{
    "headers": {
        "generation": "2020-08-12T20:31:36+00:00",
        "php": "7.4",
        "exakat_version": "2.1.5",
        "exakat_build": "1088",
        "vcs_url": "https:\/\/github.com\/Seldaek\/monolog.git",
        "vcs_branch": "(HEAD detached at 1.25.5)",
        "vcs_revision": "1817faadd1846cd08be9a49e905dc68823bc38c0",
        "code_last_commit": ""
    },
    "versions": {
        "\\": [],
        "\\Monolog\\": {
            "class": {
                "Logger": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\resettableinterface",
                        "\\psr\\log\\loggerinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Monolog log channel\n *\n * It contains a stack of Handlers and a stack of Processors,\n * and uses them to store records that are added to it.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "DEBUG": {
                            "value": 100,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Detailed debug information\n     *\/",
                            "attributes": []
                        },
                        "INFO": {
                            "value": 200,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Interesting events\n     *\n     * Examples: User logs in, SQL logs.\n     *\/",
                            "attributes": []
                        },
                        "NOTICE": {
                            "value": 250,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Uncommon events\n     *\/",
                            "attributes": []
                        },
                        "WARNING": {
                            "value": 300,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Exceptional occurrences that are not errors\n     *\n     * Examples: Use of deprecated APIs, poor use of an API,\n     * undesirable things that are not necessarily wrong.\n     *\/",
                            "attributes": []
                        },
                        "ERROR": {
                            "value": 400,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Runtime errors\n     *\/",
                            "attributes": []
                        },
                        "CRITICAL": {
                            "value": 500,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Critical conditions\n     *\n     * Example: Application component unavailable, unexpected exception.\n     *\/",
                            "attributes": []
                        },
                        "ALERT": {
                            "value": 550,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Action must be taken immediately\n     *\n     * Example: Entire website down, database unavailable, etc.\n     * This should trigger the SMS alerts and wake you up.\n     *\/",
                            "attributes": []
                        },
                        "EMERGENCY": {
                            "value": 600,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Urgent alert.\n     *\/",
                            "attributes": []
                        },
                        "API": {
                            "value": 1,
                            "visibility": "",
                            "phpdoc": "\/**\n     * Monolog API version\n     *\n     * This is only bumped when API breaks are done and should\n     * follow the major version of the library\n     *\n     * @var int\n     *\/",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$levels": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Logging levels from syslog protocol defined in RFC 5424\n     *\n     * @var array $levels Logging levels\n     *\/",
                            "attributes": []
                        },
                        "$timezone": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var \\DateTimeZone\n     *\/",
                            "attributes": []
                        },
                        "$name": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$handlers": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * The handler stack\n     *\n     * @var HandlerInterface[]\n     *\/",
                            "attributes": []
                        },
                        "$processors": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Processors that will process all log records\n     *\n     * To process records of a single handler instead, add the processor on that specific handler\n     *\n     * @var callable[]\n     *\/",
                            "attributes": []
                        },
                        "$microsecondTimestamps": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var bool\n     *\/",
                            "attributes": []
                        },
                        "$exceptionHandler": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var callable\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$name",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string             $name       The logging channel\n     * @param HandlerInterface[] $handlers   Optional stack of handlers, the first one in the array is called first, etc.\n     * @param callable[]         $processors Optional array of processors\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$handlers",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$processors",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getName": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return string\n     *\/",
                            "attributes": []
                        },
                        "withName": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$name",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Return a new cloned instance with the name changed\n     *\n     * @return static\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "pushHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handler",
                                    "reference": false,
                                    "typehint": [
                                        "HandlerInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Pushes a handler on to the stack.\n     *\n     * @param  HandlerInterface $handler\n     * @return $this\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "popHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Pops a handler from the stack\n     *\n     * @return HandlerInterface\n     *\/",
                            "attributes": []
                        },
                        "setHandlers": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handlers",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Set handlers, replacing all existing ones.\n     *\n     * If a map is passed, keys will be ignored.\n     *\n     * @param  HandlerInterface[] $handlers\n     * @return $this\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getHandlers": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return HandlerInterface[]\n     *\/",
                            "attributes": []
                        },
                        "pushProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$callback",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a processor on to the stack.\n     *\n     * @param  callable $callback\n     * @return $this\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "popProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Removes the processor on top of the stack and returns it.\n     *\n     * @return callable\n     *\/",
                            "attributes": []
                        },
                        "getProcessors": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return callable[]\n     *\/",
                            "attributes": []
                        },
                        "useMicrosecondTimestamps": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$micro",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Control the use of microsecond resolution timestamps in the 'datetime'\n     * member of new records.\n     *\n     * Generating microsecond resolution timestamps by calling\n     * microtime(true), formatting the result via sprintf() and then parsing\n     * the resulting string via \\DateTime::createFromFormat() can incur\n     * a measurable runtime overhead vs simple usage of DateTime to capture\n     * a second resolution timestamp in systems which generate a large number\n     * of log events.\n     *\n     * @param bool $micro True to use microtime() to create timestamps\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "addRecord": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record.\n     *\n     * @param  int     $level   The logging level\n     * @param  string  $message The log message\n     * @param  array   $context The log context\n     * @return bool Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Ends a log cycle and frees all resources used by handlers.\n     *\n     * Closing a Handler means flushing all buffers and freeing any open resources\/handles.\n     * Handlers that have been closed should be able to accept log records again and re-open\n     * themselves on demand, but this may not always be possible depending on implementation.\n     *\n     * This is useful at the end of a request and will be called automatically on every handler\n     * when they get destructed.\n     *\/",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Ends a log cycle and resets all handlers and processors to their initial state.\n     *\n     * Resetting a Handler or a Processor means flushing\/cleaning all buffers, resetting internal\n     * state, and getting it back to a state in which it can receive log records again.\n     *\n     * This is useful in case you want to avoid logs leaking between two requests or jobs when you\n     * have a long running process like a worker or an application server serving multiple requests\n     * in one process.\n     *\/",
                            "attributes": []
                        },
                        "addDebug": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the DEBUG level.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addInfo": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the INFO level.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addNotice": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the NOTICE level.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addWarning": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the WARNING level.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addError": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the ERROR level.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addCritical": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the CRITICAL level.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addAlert": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the ALERT level.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addEmergency": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the EMERGENCY level.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getLevels": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets all supported logging levels.\n     *\n     * @return array Assoc array with human-readable level names => level codes.\n     *\/",
                            "attributes": []
                        },
                        "getLevelName": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Gets the name of the logging level.\n     *\n     * @param  int    $level\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "toMonologLevel": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Converts PSR-3 levels to Monolog ones if necessary\n     *\n     * @param string|int Level number (monolog) or name (PSR-3)\n     * @return int\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandling": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Checks whether the Logger has a handler that listens on the given level\n     *\n     * @param  int     $level\n     * @return bool\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setExceptionHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$callback",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Set a custom exception handler\n     *\n     * @param  callable $callback\n     * @return $this\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getExceptionHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return callable\n     *\/",
                            "attributes": []
                        },
                        "handleException": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$e",
                                    "reference": false,
                                    "typehint": [
                                        "Exception"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Delegates exception management to the custom exception handler,\n     * or throws the exception if no custom handler is set.\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "log": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at an arbitrary level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  mixed   $level   The log level\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "debug": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the DEBUG level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "info": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the INFO level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "notice": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the NOTICE level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "warn": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the WARNING level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "warning": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the WARNING level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "err": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the ERROR level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "error": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the ERROR level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "crit": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the CRITICAL level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "critical": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the CRITICAL level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "alert": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the ALERT level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "emerg": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the EMERGENCY level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "emergency": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a log record at the EMERGENCY level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param  string $message The log message\n     * @param  array  $context The log context\n     * @return bool   Whether the record has been processed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "setTimezone": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$tz",
                                    "reference": false,
                                    "typehint": [
                                        "\\DateTimeZone"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Set the timezone to be used for the timestamp of log records.\n     *\n     * This is stored globally for all Logger instances\n     *\n     * @param \\DateTimeZone $tz Timezone object\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "Registry": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Monolog log registry\n *\n * Allows to get `Logger` instances in the global scope\n * via static method calls on this class.\n *\n * <code>\n * $application = new Monolog\\Logger('application');\n * $api = new Monolog\\Logger('api');\n *\n * Monolog\\Registry::addLogger($application);\n * Monolog\\Registry::addLogger($api);\n *\n * function testLogger()\n * {\n *     Monolog\\Registry::api()->addError('Sent to $api Logger instance');\n *     Monolog\\Registry::application()->addError('Sent to $application Logger instance');\n * }\n * <\/code>\n *\n * @author Tomas Tatarko <tomas@tatarko.sk>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$loggers": {
                            "value": "",
                            "visibility": "private",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * List of all loggers in the registry (by named indexes)\n     *\n     * @var Logger[]\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "addLogger": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$logger",
                                    "reference": false,
                                    "typehint": [
                                        "Logger"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds new logging channel to the registry\n     *\n     * @param  Logger                    $logger    Instance of the logging channel\n     * @param  string|null               $name      Name of the logging channel ($logger->getName() by default)\n     * @param  bool                      $overwrite Overwrite instance in the registry if the given name already exists?\n     * @throws \\InvalidArgumentException If $overwrite set to false and named Logger instance already exists\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$name",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$overwrite",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "hasLogger": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$logger",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Checks if such logging channel exists by name or instance\n     *\n     * @param string|Logger $logger Name or logger instance\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "removeLogger": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$logger",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Removes instance from registry by name or instance\n     *\n     * @param string|Logger $logger Name or logger instance\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "clear": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Clears the registry\n     *\/",
                            "attributes": []
                        },
                        "getInstance": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$name",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Gets Logger instance from the registry\n     *\n     * @param  string                    $name Name of the requested Logger instance\n     * @throws \\InvalidArgumentException If named Logger instance is not in the registry\n     * @return Logger                    Requested instance of Logger\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "__callStatic": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$name",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Gets Logger instance from the registry via static method call\n     *\n     * @param  string                    $name      Name of the requested Logger instance\n     * @param  array                     $arguments Arguments passed to static method call\n     * @throws \\InvalidArgumentException If named Logger instance is not in the registry\n     * @return Logger                    Requested instance of Logger\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$arguments",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "SignalHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Monolog POSIX signal handler\n *\n * @author Robert Gust-Bardon <robert@gust-bardon.org>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$logger": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$previousSignalHandler": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$signalLevelMap": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$signalRestartSyscalls": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$logger",
                                    "reference": false,
                                    "typehint": [
                                        "LoggerInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "registerSignalHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$signo",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "LogLevel::CRITICAL",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$callPrevious",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$restartSyscalls",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$async",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleSignal": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$signo",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$siginfo",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "ErrorHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Monolog error handler\n *\n * A facility to enable logging of runtime errors, exceptions and fatal errors.\n *\n * Quick setup: <code>ErrorHandler::register($logger);<\/code>\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$logger": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$previousExceptionHandler": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$uncaughtExceptionLevel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$previousErrorHandler": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$errorLevelMap": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$handleOnlyReportedErrors": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$hasFatalErrorHandler": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$fatalLevel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$reservedMemory": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$lastFatalTrace": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$fatalErrors": {
                            "value": "",
                            "visibility": "private",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$logger",
                                    "reference": false,
                                    "typehint": [
                                        "LoggerInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "register": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$logger",
                                    "reference": false,
                                    "typehint": [
                                        "LoggerInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Registers a new ErrorHandler for a given Logger\n     *\n     * By default it will handle errors, exceptions and fatal errors\n     *\n     * @param  LoggerInterface $logger\n     * @param  array|false     $errorLevelMap  an array of E_* constant to LogLevel::* constant mapping, or false to disable error handling\n     * @param  int|false       $exceptionLevel a LogLevel::* constant, or false to disable exception handling\n     * @param  int|false       $fatalLevel     a LogLevel::* constant, or false to disable fatal error handling\n     * @return ErrorHandler\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$errorLevelMap",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$exceptionLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$fatalLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "registerExceptionHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$callPrevious",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "registerErrorHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$levelMap",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$callPrevious",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$errorTypes",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": -1,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$handleOnlyReportedErrors",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "registerFatalHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$reservedMemorySize",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 20,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "defaultErrorLevelMap": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "handleException": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$e",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @private\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleError": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$code",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @private\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$file",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "''",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$line",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleFatalError": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @private\n     *\/",
                            "attributes": []
                        },
                        "codeToString": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$code",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "Utils": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "getClass": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$object",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @internal\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "canonicalizePath": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$streamUrl",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Makes sure if a relative path is passed in it is turned into an absolute path\n     *\n     * @param string $streamUrl stream URL or path without protocol\n     *\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "jsonEncode": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Return the JSON representation of a value\n     *\n     * @param  mixed             $data\n     * @param  int               $encodeFlags flags to pass to json encode, defaults to JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE\n     * @param  bool              $ignoreErrors whether to ignore encoding errors or to throw on error, when ignored and the encoding fails, \"null\" is returned which is valid json for null\n     * @throws \\RuntimeException if encoding fails and errors are not ignored\n     * @return string\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$encodeFlags",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$ignoreErrors",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleJsonError": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$code",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Handle a json_encode failure.\n     *\n     * If the failure is due to invalid string encoding, try to clean the\n     * input and encode again. If the second encoding attempt fails, the\n     * inital error is not encoding related or the input can't be cleaned then\n     * raise a descriptive exception.\n     *\n     * @param  int               $code return code of json_last_error function\n     * @param  mixed             $data data that was meant to be encoded\n     * @param  int               $encodeFlags flags to pass to json encode, defaults to JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE\n     * @throws \\RuntimeException if failure can't be corrected\n     * @return string            JSON encoded data after error correction\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$encodeFlags",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "throwEncodeError": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$code",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Throws an exception according to a given code with a customized message\n     *\n     * @param  int               $code return code of json_last_error function\n     * @param  mixed             $data data that was meant to be encoded\n     * @throws \\RuntimeException\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "detectAndCleanUtf8": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": true,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Detect invalid UTF-8 string characters and convert to valid UTF-8.\n     *\n     * Valid UTF-8 input will be left unmodified, but strings containing\n     * invalid UTF-8 codepoints will be reencoded as UTF-8 with an assumed\n     * original encoding of ISO-8859-15. This conversion may result in\n     * incorrect output if the actual encoding was not ISO-8859-15, but it\n     * will be clean UTF-8 output and will not rely on expensive and fragile\n     * detection algorithms.\n     *\n     * Function converts the input in place in the passed variable so that it\n     * can be used as a callback for array_walk_recursive.\n     *\n     * @param mixed &$data Input to check and convert if needed\n     * @private\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            },
            "interface": {
                "ResettableInterface": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Handler or Processor implementing this interface will be reset when Logger::reset() is called.\n *\n * Resetting ends a log cycle gets them back to their initial state.\n *\n * Resetting a Handler or a Processor means flushing\/cleaning all buffers, resetting internal\n * state, and getting it back to a state in which it can receive log records again.\n *\n * This is useful in case you want to avoid logs leaking between two requests or jobs when you\n * have a long running process like a worker or an application server serving multiple requests\n * in one process.\n *\n * @author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                }
            }
        },
        "\\Monolog\\Handler\\": {
            "class": {
                "InsightOpsHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\sockethandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Inspired on LogEntriesHandler.\n *\n * @author Robert Kaufmann III <rok3@rok3.me>\n * @author Gabriel Machado <gabriel.ms1@hotmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$logToken": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$token",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $token  Log token supplied by InsightOps\n     * @param string $region Region where InsightOps account is hosted. Could be 'us' or 'eu'.\n     * @param bool   $useSSL Whether or not SSL encryption should be used\n     * @param int    $level  The minimum logging level to trigger this handler\n     * @param bool   $bubble Whether or not messages that are handled should bubble up the stack.\n     *\n     * @throws MissingExtensionException If SSL encryption is set to true and OpenSSL is missing\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$region",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'us'",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useSSL",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "generateDataStream": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "TestHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Used for testing purposes.\n *\n * It records all records and gives you access to them for verification.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @method bool hasEmergency($record)\n * @method bool hasAlert($record)\n * @method bool hasCritical($record)\n * @method bool hasError($record)\n * @method bool hasWarning($record)\n * @method bool hasNotice($record)\n * @method bool hasInfo($record)\n * @method bool hasDebug($record)\n *\n * @method bool hasEmergencyRecords()\n * @method bool hasAlertRecords()\n * @method bool hasCriticalRecords()\n * @method bool hasErrorRecords()\n * @method bool hasWarningRecords()\n * @method bool hasNoticeRecords()\n * @method bool hasInfoRecords()\n * @method bool hasDebugRecords()\n *\n * @method bool hasEmergencyThatContains($message)\n * @method bool hasAlertThatContains($message)\n * @method bool hasCriticalThatContains($message)\n * @method bool hasErrorThatContains($message)\n * @method bool hasWarningThatContains($message)\n * @method bool hasNoticeThatContains($message)\n * @method bool hasInfoThatContains($message)\n * @method bool hasDebugThatContains($message)\n *\n * @method bool hasEmergencyThatMatches($message)\n * @method bool hasAlertThatMatches($message)\n * @method bool hasCriticalThatMatches($message)\n * @method bool hasErrorThatMatches($message)\n * @method bool hasWarningThatMatches($message)\n * @method bool hasNoticeThatMatches($message)\n * @method bool hasInfoThatMatches($message)\n * @method bool hasDebugThatMatches($message)\n *\n * @method bool hasEmergencyThatPasses($message)\n * @method bool hasAlertThatPasses($message)\n * @method bool hasCriticalThatPasses($message)\n * @method bool hasErrorThatPasses($message)\n * @method bool hasWarningThatPasses($message)\n * @method bool hasNoticeThatPasses($message)\n * @method bool hasInfoThatPasses($message)\n * @method bool hasDebugThatPasses($message)\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$records": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$recordsByLevel": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$skipReset": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "getRecords": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "clear": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "setSkipReset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$skipReset",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "hasRecords": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "hasRecord": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string|array $record Either a message string or an array containing message and optionally context keys that will be checked against all records\n     * @param int          $level  Logger::LEVEL constant value\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "hasRecordThatContains": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "hasRecordThatMatches": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$regex",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "hasRecordThatPasses": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$predicate",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "__call": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$method",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$args",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "IFTTTHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * IFTTTHandler uses cURL to trigger IFTTT Maker actions\n *\n * Register a secret key and trigger\/event name at https:\/\/ifttt.com\/maker\n *\n * value1 will be the channel from monolog's Logger constructor,\n * value2 will be the level name (ERROR, WARNING, ..)\n * value3 will be the log record's message\n *\n * @author Nehal Patel <nehal@nehalpatel.me>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$eventName": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$secretKey": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$eventName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $eventName The name of the IFTTT Maker event that should be triggered\n     * @param string $secretKey A valid IFTTT secret key\n     * @param int    $level     The minimum logging level at which this handler will be triggered\n     * @param bool   $bubble    Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$secretKey",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::ERROR",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "SocketHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Stores to any socket - uses fsockopen() or pfsockopen().\n *\n * @author Pablo de Leon Belloc <pablolb@gmail.com>\n * @see    http:\/\/php.net\/manual\/en\/function.fsockopen.php\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$connectionString": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$connectionTimeout": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$resource": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$timeout": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$writingTimeout": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$lastSentBytes": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$chunkSize": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$persistent": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$errno": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$errstr": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$lastWritingAt": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$connectionString",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $connectionString Socket connection string\n     * @param int    $level            The minimum logging level at which this handler will be triggered\n     * @param bool   $bubble           Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Connect (if necessary) and write to the socket\n     *\n     * @param array $record\n     *\n     * @throws \\UnexpectedValueException\n     * @throws \\RuntimeException\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * We will not close a PersistentSocket instance so it can be reused in other requests.\n     *\/",
                            "attributes": []
                        },
                        "closeSocket": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Close socket, if open\n     *\/",
                            "attributes": []
                        },
                        "setPersistent": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$persistent",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Set socket connection to nbe persistent. It only has effect before the connection is initiated.\n     *\n     * @param bool $persistent\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setConnectionTimeout": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$seconds",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Set connection timeout.  Only has effect before we connect.\n     *\n     * @param float $seconds\n     *\n     * @see http:\/\/php.net\/manual\/en\/function.fsockopen.php\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setTimeout": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$seconds",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Set write timeout. Only has effect before we connect.\n     *\n     * @param float $seconds\n     *\n     * @see http:\/\/php.net\/manual\/en\/function.stream-set-timeout.php\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setWritingTimeout": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$seconds",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Set writing timeout. Only has effect during connection in the writing cycle.\n     *\n     * @param float $seconds 0 for no timeout\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setChunkSize": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$bytes",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Set chunk size. Only has effect during connection in the writing cycle.\n     *\n     * @param float $bytes\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getConnectionString": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Get current connection string\n     *\n     * @return string\n     *\/",
                            "attributes": []
                        },
                        "isPersistent": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Get persistent setting\n     *\n     * @return bool\n     *\/",
                            "attributes": []
                        },
                        "getConnectionTimeout": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Get current connection timeout setting\n     *\n     * @return float\n     *\/",
                            "attributes": []
                        },
                        "getTimeout": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Get current in-transfer timeout\n     *\n     * @return float\n     *\/",
                            "attributes": []
                        },
                        "getWritingTimeout": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Get current local writing timeout\n     *\n     * @return float\n     *\/",
                            "attributes": []
                        },
                        "getChunkSize": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Get current chunk size\n     *\n     * @return float\n     *\/",
                            "attributes": []
                        },
                        "isConnected": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Check to see if the socket is currently available.\n     *\n     * UDP might appear to be connected but might fail when writing.  See http:\/\/php.net\/fsockopen for details.\n     *\n     * @return bool\n     *\/",
                            "attributes": []
                        },
                        "pfsockopen": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Wrapper to allow mocking\n     *\/",
                            "attributes": []
                        },
                        "fsockopen": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Wrapper to allow mocking\n     *\/",
                            "attributes": []
                        },
                        "streamSetTimeout": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Wrapper to allow mocking\n     *\n     * @see http:\/\/php.net\/manual\/en\/function.stream-set-timeout.php\n     *\/",
                            "attributes": []
                        },
                        "streamSetChunkSize": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Wrapper to allow mocking\n     *\n     * @see http:\/\/php.net\/manual\/en\/function.stream-set-chunk-size.php\n     *\/",
                            "attributes": []
                        },
                        "fwrite": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Wrapper to allow mocking\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "streamGetMetadata": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Wrapper to allow mocking\n     *\/",
                            "attributes": []
                        },
                        "validateTimeout": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "connectIfNotConnected": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "generateDataStream": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getResource": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return resource|null\n     *\/",
                            "attributes": []
                        },
                        "connect": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "createSocketResource": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "setSocketTimeout": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "setStreamChunkSize": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "writeToSocket": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "writingIsTimedOut": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$sent",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "SlackbotHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends notifications through Slack's Slackbot\n *\n * @author     Haralan Dobrev <hkdobrev@gmail.com>\n * @see        https:\/\/slack.com\/apps\/A0F81R8ET-slackbot\n * @deprecated According to Slack the API used on this handler it is deprecated.\n *             Therefore this handler will be removed on 2.x\n *             Slack suggests to use webhooks instead. Please contact slack for more information.\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$slackTeam": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * The slug of the Slack team\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$token": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Slackbot token\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$channel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Slack channel name\n     * @var string\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$slackTeam",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  string $slackTeam Slack team slug\n     * @param  string $token     Slackbot token\n     * @param  string $channel   Slack channel (encoded ID or name)\n     * @param  int    $level     The minimum logging level at which this handler will be triggered\n     * @param  bool   $bubble    Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$token",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$channel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::CRITICAL",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param array $record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "BufferHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstracthandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Buffers all records until closing the handler and then pass them as batch.\n *\n * This is useful for a MailHandler to send only one mail per request instead of\n * sending one per log message.\n *\n * @author Christophe Coevoet <stof@notk.org>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$handler": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$bufferSize": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$bufferLimit": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$flushOnOverflow": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$buffer": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$initialized": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handler",
                                    "reference": false,
                                    "typehint": [
                                        "HandlerInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param HandlerInterface $handler         Handler.\n     * @param int              $bufferLimit     How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.\n     * @param int              $level           The minimum logging level at which this handler will be triggered\n     * @param bool             $bubble          Whether the messages that are handled can bubble up the stack or not\n     * @param bool             $flushOnOverflow If true, the buffer is flushed when the max size has been reached, by default oldest entries are discarded\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$bufferLimit",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$flushOnOverflow",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "flush": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "__destruct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "clear": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Clears the buffer without flushing any messages down to the wrapped handler.\n     *\/",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "SyslogHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractsysloghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Logs to syslog service.\n *\n * usage example:\n *\n *   $log = new Logger('application');\n *   $syslog = new SyslogHandler('myfacility', 'local6');\n *   $formatter = new LineFormatter(\"%channel%.%level_name%: %message% %extra%\");\n *   $syslog->setFormatter($formatter);\n *   $log->pushHandler($syslog);\n *\n * @author Sven Paulus <sven@karlsruhe.org>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$ident": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$logopts": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$ident",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $ident\n     * @param mixed  $facility\n     * @param int    $level    The minimum logging level at which this handler will be triggered\n     * @param bool   $bubble   Whether the messages that are handled can bubble up the stack or not\n     * @param int    $logopts  Option flags for the openlog() call, defaults to LOG_PID\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$facility",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "LOG_USER",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$logopts",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "LOG_PID",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "RollbarHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends errors to Rollbar\n *\n * If the context data contains a `payload` key, that is used as an array\n * of payload options to RollbarNotifier's report_message\/report_exception methods.\n *\n * Rollbar's context info will contain the context + extra keys from the log record\n * merged, and then on top of that a few keys:\n *\n *  - level (rollbar level name)\n *  - monolog_level (monolog level name, raw level, as rollbar only has 5 but monolog 8)\n *  - channel\n *  - datetime (unix timestamp)\n *\n * @author Paul Statezny <paulstatezny@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$rollbarNotifier": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Rollbar notifier\n     *\n     * @var RollbarNotifier\n     *\/",
                            "attributes": []
                        },
                        "$levelMap": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$hasRecords": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Records whether any log records have been added since the last flush of the rollbar notifier\n     *\n     * @var bool\n     *\/",
                            "attributes": []
                        },
                        "$initialized": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$rollbarNotifier",
                                    "reference": false,
                                    "typehint": [
                                        "RollbarNotifier"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param RollbarNotifier $rollbarNotifier RollbarNotifier object constructed with valid token\n     * @param int             $level           The minimum logging level at which this handler will be triggered\n     * @param bool            $bubble          Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::ERROR",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "flush": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "FingersCrossedHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstracthandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Buffers all records until a certain level is reached\n *\n * The advantage of this approach is that you don't get any clutter in your log files.\n * Only requests which actually trigger an error (or whatever your actionLevel is) will be\n * in the logs, but they will contain all records, not only those above the level threshold.\n *\n * You can find the various activation strategies in the\n * Monolog\\Handler\\FingersCrossed\\ namespace.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$handler": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$activationStrategy": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$buffering": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$bufferSize": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$buffer": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$stopBuffering": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$passthruLevel": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handler",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param callable|HandlerInterface       $handler            Handler or factory callable($record|null, $fingersCrossedHandler).\n     * @param int|ActivationStrategyInterface $activationStrategy Strategy which determines when this handler takes action\n     * @param int                             $bufferSize         How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.\n     * @param bool                            $bubble             Whether the messages that are handled can bubble up the stack or not\n     * @param bool                            $stopBuffering      Whether the handler should stop buffering after being triggered (default true)\n     * @param int                             $passthruLevel      Minimum level to always flush to handler on close, even if strategy not triggered\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$activationStrategy",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bufferSize",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$stopBuffering",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$passthruLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandling": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "activate": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Manually activate this logger regardless of the activation strategy\n     *\/",
                            "attributes": []
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "clear": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Clears the buffer without flushing any messages down to the wrapped handler.\n     *\n     * It also resets the handler to its initial buffering state.\n     *\/",
                            "attributes": []
                        },
                        "flushBuffer": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Resets the state of the handler. Stops forwarding records to the wrapped handler.\n     *\/",
                            "attributes": []
                        },
                        "getHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "null",
                                    "phpdoc": "\/**\n     * Return the nested handler\n     *\n     * If the handler was provided as a factory callable, this will trigger the handler's instantiation.\n     *\n     * @return HandlerInterface\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "HandlerWrapper": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\handler\\handlerinterface",
                        "\\monolog\\resettableinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * This simple wrapper class can be used to extend handlers functionality.\n *\n * Example: A custom filtering that can be applied to any handler.\n *\n * Inherit from this class and override handle() like this:\n *\n *   public function handle(array $record)\n *   {\n *        if ($record meets certain conditions) {\n *            return false;\n *        }\n *        return $this->handler->handle($record);\n *   }\n *\n * @author Alexey Karapetov <alexey@karapetov.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$handler": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var HandlerInterface\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handler",
                                    "reference": false,
                                    "typehint": [
                                        "HandlerInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * HandlerWrapper constructor.\n     * @param HandlerInterface $handler\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandling": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "pushProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$callback",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "popProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "GroupHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstracthandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Forwards records to multiple handlers\n *\n * @author Lenar L\u00f5hmus <lenar@city.ee>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$handlers": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handlers",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param array $handlers Array of Handlers.\n     * @param bool  $bubble   Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandling": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "ElasticSearchHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Elastic Search handler\n *\n * Usage example:\n *\n *    $client = new \\Elastica\\Client();\n *    $options = array(\n *        'index' => 'elastic_index_name',\n *        'type' => 'elastic_doc_type',\n *    );\n *    $handler = new ElasticSearchHandler($client, $options);\n *    $log = new Logger('application');\n *    $log->pushHandler($handler);\n *\n * @author Jelle Vink <jelle.vink@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$client": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var Client\n     *\/",
                            "attributes": []
                        },
                        "$options": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var array Handler config options\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$client",
                                    "reference": false,
                                    "typehint": [
                                        "Client"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param Client $client  Elastica Client object\n     * @param array  $options Handler configuration\n     * @param int    $level   The minimum logging level at which this handler will be triggered\n     * @param bool   $bubble  Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$options",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getOptions": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Getter options\n     * @return array\n     *\/",
                            "attributes": []
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "bulkSend": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$documents",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Use Elasticsearch bulk API to send list of documents\n     * @param  array             $documents\n     * @throws \\RuntimeException\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "SamplingHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstracthandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sampling handler\n *\n * A sampled event stream can be useful for logging high frequency events in\n * a production environment where you only need an idea of what is happening\n * and are not concerned with capturing every occurrence. Since the decision to\n * handle or not handle a particular event is determined randomly, the\n * resulting sampled log is not guaranteed to contain 1\/N of the events that\n * occurred in the application, but based on the Law of large numbers, it will\n * tend to be close to this ratio with a large number of attempts.\n *\n * @author Bryan Davis <bd808@wikimedia.org>\n * @author Kunal Mehta <legoktm@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$handler": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var callable|HandlerInterface $handler\n     *\/",
                            "attributes": []
                        },
                        "$factor": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var int $factor\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handler",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param callable|HandlerInterface $handler Handler or factory callable($record|null, $samplingHandler).\n     * @param int                       $factor  Sample factor\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$factor",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandling": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "null",
                                    "phpdoc": "\/**\n     * Return the nested handler\n     *\n     * If the handler was provided as a factory callable, this will trigger the handler's instantiation.\n     *\n     * @return HandlerInterface\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "AbstractHandler": {
                    "abstract": true,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\handler\\handlerinterface",
                        "\\monolog\\resettableinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Base Handler class providing the Handler structure\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$level": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$bubble": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$formatter": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var FormatterInterface\n     *\/",
                            "attributes": []
                        },
                        "$processors": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "\/**\n     * @param int|string $level  The minimum logging level at which this handler will be triggered\n     * @param bool       $bubble Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandling": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Closes the handler.\n     *\n     * This will be called automatically when the object is destroyed\n     *\/",
                            "attributes": []
                        },
                        "pushProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$callback",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "popProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "setLevel": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Sets minimum logging level at which this handler will be triggered.\n     *\n     * @param  int|string $level Level or level name\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getLevel": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets minimum logging level at which this handler will be triggered.\n     *\n     * @return int\n     *\/",
                            "attributes": []
                        },
                        "setBubble": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Sets the bubbling behavior.\n     *\n     * @param  bool $bubble true means that this handler allows bubbling.\n     *                      false means that bubbling is not permitted.\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getBubble": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets the bubbling behavior.\n     *\n     * @return bool true means that this handler allows bubbling.\n     *              false means that bubbling is not permitted.\n     *\/",
                            "attributes": []
                        },
                        "__destruct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets the default formatter.\n     *\n     * @return FormatterInterface\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "SwiftMailerHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\mailhandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * SwiftMailerHandler uses Swift_Mailer to send the emails\n *\n * @author Gyula Sallai\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$mailer": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$messageTemplate": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$mailer",
                                    "reference": false,
                                    "typehint": [
                                        "\\Swift_Mailer"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param \\Swift_Mailer           $mailer  The mailer to use\n     * @param callable|\\Swift_Message $message An example message for real messages, only the body will be replaced\n     * @param int                     $level   The minimum logging level at which this handler will be triggered\n     * @param bool                    $bubble  Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::ERROR",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "send": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getSubjectFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$format",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Gets the formatter for the Swift_Message subject.\n     *\n     * @param  string             $format The format of the subject\n     * @return FormatterInterface\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildMessage": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Creates instance of Swift_Message to be sent\n     *\n     * @param  string         $content formatted email body to be sent\n     * @param  array          $records Log records that formed the content\n     * @return \\Swift_Message\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "__get": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$name",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * BC getter, to be removed in 2.0\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "FlowdockHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\sockethandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends notifications through the Flowdock push API\n *\n * This must be configured with a FlowdockFormatter instance via setFormatter()\n *\n * Notes:\n * API token - Flowdock API token\n *\n * @author Dominik Liebler <liebler.dominik@gmail.com>\n * @see https:\/\/www.flowdock.com\/api\/push\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$apiToken": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$apiToken",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string   $apiToken\n     * @param bool|int $level    The minimum logging level at which this handler will be triggered\n     * @param bool     $bubble   Whether the messages that are handled can bubble up the stack or not\n     *\n     * @throws MissingExtensionException if OpenSSL is missing\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets the default formatter.\n     *\n     * @return FormatterInterface\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param array $record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "generateDataStream": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildContent": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Builds the body of API call\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildHeader": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Builds the header of the API Call\n     *\n     * @param  string $content\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "PushoverHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\sockethandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends notifications through the pushover api to mobile phones\n *\n * @author Sebastian G\u00f6ttschkes <sebastian.goettschkes@googlemail.com>\n * @see    https:\/\/www.pushover.net\/api\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$token": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$users": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$title": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$user": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$retry": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$expire": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$highPriorityLevel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$emergencyLevel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$useFormattedMessage": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$parameterNames": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * All parameters that can be sent to Pushover\n     * @see https:\/\/pushover.net\/api\n     * @var array\n     *\/",
                            "attributes": []
                        },
                        "$sounds": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Sounds the api supports by default\n     * @see https:\/\/pushover.net\/api#sounds\n     * @var array\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$token",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string       $token             Pushover api token\n     * @param string|array $users             Pushover user id or array of ids the message will be sent to\n     * @param string       $title             Title sent to the Pushover API\n     * @param int          $level             The minimum logging level at which this handler will be triggered\n     * @param bool         $bubble            Whether the messages that are handled can bubble up the stack or not\n     * @param bool         $useSSL            Whether to connect via SSL. Required when pushing messages to users that are not\n     *                                        the pushover.net app owner. OpenSSL is required for this option.\n     * @param int          $highPriorityLevel The minimum logging level at which this handler will start\n     *                                        sending \"high priority\" requests to the Pushover API\n     * @param int          $emergencyLevel    The minimum logging level at which this handler will start\n     *                                        sending \"emergency\" requests to the Pushover API\n     * @param int          $retry             The retry parameter specifies how often (in seconds) the Pushover servers will send the same notification to the user.\n     * @param int          $expire            The expire parameter specifies how many seconds your notification will continue to be retried for (every retry seconds).\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$users",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$title",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::CRITICAL",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useSSL",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$highPriorityLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::CRITICAL",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$emergencyLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::EMERGENCY",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$retry",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 30,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$expire",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 25200,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "generateDataStream": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildContent": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildHeader": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "setHighPriorityLevel": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "setEmergencyLevel": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "useFormattedMessage": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Use the formatted message?\n     * @param bool $value\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "MissingExtensionException": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\exception",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Exception can be thrown if an extension for an handler is missing\n *\n * @author  Christian Bergau <cbergau86@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false
                },
                "AbstractSyslogHandler": {
                    "abstract": true,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Common syslog functionality\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$facility": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$logLevels": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Translates Monolog log levels to syslog log priorities.\n     *\/",
                            "attributes": []
                        },
                        "$facilities": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * List of valid log facility names.\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$facility",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "LOG_USER",
                                    "phpdoc": "\/**\n     * @param mixed $facility\n     * @param int   $level The minimum logging level at which this handler will be triggered\n     * @param bool  $bubble Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "RavenHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Handler to send messages to a Sentry (https:\/\/github.com\/getsentry\/sentry) server\n * using sentry-php (https:\/\/github.com\/getsentry\/sentry-php)\n *\n * @author Marc Abramowitz <marc@marc-abramowitz.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$logLevels": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Translates Monolog log levels to Raven log levels.\n     *\/",
                            "attributes": []
                        },
                        "$release": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string should represent the current version of the calling\n     *             software. Can be any string (git commit, version number)\n     *\/",
                            "attributes": []
                        },
                        "$ravenClient": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var Raven_Client the client object that sends the message to the server\n     *\/",
                            "attributes": []
                        },
                        "$batchFormatter": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var LineFormatter The formatter to use for the logs generated via handleBatch()\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$ravenClient",
                                    "reference": false,
                                    "typehint": [
                                        "Raven_Client"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param Raven_Client $ravenClient\n     * @param int          $level       The minimum logging level at which this handler will be triggered\n     * @param bool         $bubble      Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setBatchFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Sets the formatter for the logs generated by handleBatch().\n     *\n     * @param FormatterInterface $formatter\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getBatchFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets the formatter for the logs generated by handleBatch().\n     *\n     * @return FormatterInterface\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        },
                        "getDefaultBatchFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets the default formatter for the logs generated by handleBatch().\n     *\n     * @return FormatterInterface\n     *\/",
                            "attributes": []
                        },
                        "getExtraParameters": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets extra parameters supported by Raven that can be found in \"extra\" and \"context\"\n     *\n     * @return array\n     *\/",
                            "attributes": []
                        },
                        "setRelease": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $value\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "SyslogUdpHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractsysloghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * A Handler for logging to a remote syslogd server.\n *\n * @author Jesper Skovgaard Nielsen <nulpunkt@gmail.com>\n * @author Dominik Kukacka <dominik.kukacka@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "RFC5424": {
                            "value": 1,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "RFC3164": {
                            "value": 0,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$dateFormats": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$socket": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$ident": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$rfc": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$host",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $host\n     * @param int    $port\n     * @param mixed  $facility\n     * @param int    $level    The minimum logging level at which this handler will be triggered\n     * @param bool   $bubble   Whether the messages that are handled can bubble up the stack or not\n     * @param string $ident    Program name or tag for each log message.\n     * @param int    $rfc      RFC to format the message for.\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$port",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 514,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$facility",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "LOG_USER",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$ident",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'php'",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$rfc",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "self::RFC5424",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "splitMessageIntoLines": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "makeCommonSyslogHeader": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$severity",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Make common syslog header (see rfc5424 or rfc3164)\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDateTime": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "setSocket": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$socket",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Inject your own socket, mainly used for testing\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "BrowserConsoleHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Handler sending logs to browser's javascript console with no browser extension required\n *\n * @author Olivier Poitrey <rs@dailymotion.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$initialized": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$records": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\n     * Formatted output may contain some formatting markers to be transferred to `console.log` using the %c format.\n     *\n     * Example of formatted string:\n     *\n     *     You can do [[blue text]]{color: blue} or [[green background]]{background-color: green; color: white}\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "send": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Convert records to javascript console commands and send it to the browser.\n     * This method is automatically called on PHP shutdown if output is HTML or Javascript.\n     *\/",
                            "attributes": []
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "resetStatic": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Forget all logged records\n     *\/",
                            "attributes": []
                        },
                        "registerShutdownFunction": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Wrapper for register_shutdown_function to allow overriding\n     *\/",
                            "attributes": []
                        },
                        "writeOutput": {
                            "visibility": "protected",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$str",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Wrapper for echo to allow overriding\n     *\n     * @param string $str\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getResponseFormat": {
                            "visibility": "protected",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Checks the format of the response\n     *\n     * If Content-Type is set to application\/javascript or text\/javascript -> js\n     * If Content-Type is set to text\/html, or is unset -> html\n     * If Content-Type is anything else -> unknown\n     *\n     * @return string One of 'js', 'html' or 'unknown'\n     *\/",
                            "attributes": []
                        },
                        "generateScript": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "handleStyles": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatted",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleCustomStyles": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$style",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$string",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "dump": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$title",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$dict",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "quote": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$arg",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "call": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "call_array": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$method",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$args",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "FilterHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstracthandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Simple handler wrapper that filters records based on a list of levels\n *\n * It can be configured with an exact list of levels to allow, or a min\/max level.\n *\n * @author Hennadiy Verkh\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$handler": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Handler or factory callable($record, $this)\n     *\n     * @var callable|\\Monolog\\Handler\\HandlerInterface\n     *\/",
                            "attributes": []
                        },
                        "$acceptedLevels": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Minimum level for logs that are passed to handler\n     *\n     * @var int[]\n     *\/",
                            "attributes": []
                        },
                        "$bubble": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Whether the messages that are handled can bubble up the stack or not\n     *\n     * @var bool\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handler",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param callable|HandlerInterface $handler        Handler or factory callable($record|null, $filterHandler).\n     * @param int|array                 $minLevelOrList A list of levels to accept or a minimum level if maxLevel is provided\n     * @param int                       $maxLevel       Maximum level to accept, only used if $minLevelOrList is not an array\n     * @param bool                      $bubble         Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$minLevelOrList",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$maxLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::EMERGENCY",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getAcceptedLevels": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return array\n     *\/",
                            "attributes": []
                        },
                        "setAcceptedLevels": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$minLevelOrList",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "\/**\n     * @param int|string|array $minLevelOrList A list of levels to accept or a minimum level or level name if maxLevel is provided\n     * @param int|string       $maxLevel       Maximum level or level name to accept, only used if $minLevelOrList is not an array\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$maxLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::EMERGENCY",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandling": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getHandler": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "null",
                                    "phpdoc": "\/**\n     * Return the nested handler\n     *\n     * If the handler was provided as a factory callable, this will trigger the handler's instantiation.\n     *\n     * @return HandlerInterface\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "RotatingFileHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\streamhandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Stores logs to files that are rotated every day and a limited number of files are kept.\n *\n * This rotation is only intended to be used as a workaround. Using logrotate to\n * handle the rotation is strongly encouraged when you can use it.\n *\n * @author Christophe Coevoet <stof@notk.org>\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "FILE_PER_DAY": {
                            "value": "'Y-m-d'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "FILE_PER_MONTH": {
                            "value": "'Y-m'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "FILE_PER_YEAR": {
                            "value": "'Y'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$filename": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$maxFiles": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$mustRotate": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$nextRotation": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$filenameFormat": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$dateFormat": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$filename",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string   $filename\n     * @param int      $maxFiles       The maximal amount of files to keep (0 means unlimited)\n     * @param int      $level          The minimum logging level at which this handler will be triggered\n     * @param bool     $bubble         Whether the messages that are handled can bubble up the stack or not\n     * @param int|null $filePermission Optional file permissions (default (0644) are only for owner read\/write)\n     * @param bool     $useLocking     Try to lock log file before doing any writes\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$maxFiles",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$filePermission",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useLocking",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "setFilenameFormat": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$filenameFormat",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$dateFormat",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "rotate": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Rotates the files.\n     *\/",
                            "attributes": []
                        },
                        "getTimedFilename": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "getGlobPattern": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "NativeMailerHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\mailhandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * NativeMailerHandler uses the mail() function to send the emails\n *\n * @author Christophe Coevoet <stof@notk.org>\n * @author Mark Garrett <mark@moderndeveloperllc.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$to": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * The email addresses to which the message will be sent\n     * @var array\n     *\/",
                            "attributes": []
                        },
                        "$subject": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * The subject of the email\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$headers": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Optional headers for the message\n     * @var array\n     *\/",
                            "attributes": []
                        },
                        "$parameters": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Optional parameters for the message\n     * @var array\n     *\/",
                            "attributes": []
                        },
                        "$maxColumnWidth": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * The wordwrap length for the message\n     * @var int\n     *\/",
                            "attributes": []
                        },
                        "$contentType": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * The Content-type for the message\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$encoding": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * The encoding for the message\n     * @var string\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$to",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string|array $to             The receiver of the mail\n     * @param string       $subject        The subject of the mail\n     * @param string       $from           The sender of the mail\n     * @param int          $level          The minimum logging level at which this handler will be triggered\n     * @param bool         $bubble         Whether the messages that are handled can bubble up the stack or not\n     * @param int          $maxColumnWidth The maximum column width that the message lines will have\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$subject",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$from",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::ERROR",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$maxColumnWidth",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 70,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addHeader": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$headers",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Add headers to the message\n     *\n     * @param  string|array $headers Custom added headers\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "addParameter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$parameters",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Add parameters to the message\n     *\n     * @param  string|array $parameters Custom added parameters\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "send": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getContentType": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return string $contentType\n     *\/",
                            "attributes": []
                        },
                        "getEncoding": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return string $encoding\n     *\/",
                            "attributes": []
                        },
                        "setContentType": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$contentType",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  string $contentType The content type of the email - Defaults to text\/plain. Use text\/html for HTML\n     *                             messages.\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setEncoding": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$encoding",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  string $encoding\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "MongoDBHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Logs to a MongoDB database.\n *\n * usage example:\n *\n *   $log = new Logger('application');\n *   $mongodb = new MongoDBHandler(new \\Mongo(\"mongodb:\/\/localhost:27017\"), \"logs\", \"prod\");\n *   $log->pushHandler($mongodb);\n *\n * @author Thomas Tourlourat <thomas@tourlourat.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$mongoCollection": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$mongo",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$database",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$collection",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "GelfHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Handler to send messages to a Graylog2 (http:\/\/www.graylog2.org) server\n *\n * @author Matt Lehner <mlehner@gmail.com>\n * @author Benjamin Zikarsky <benjamin@zikarsky.de>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$publisher": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var Publisher the publisher object that sends the message to the server\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$publisher",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param PublisherInterface|IMessagePublisher|Publisher $publisher a publisher object\n     * @param int                                            $level     The minimum logging level at which this handler will be triggered\n     * @param bool                                           $bubble    Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "ZendMonitorHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Handler sending logs to Zend Monitor\n *\n * @author  Christian Bergau <cbergau86@gmail.com>\n * @author  Jason Davis <happydude@jasondavis.net>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$levelMap": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Monolog level \/ ZendMonitor Custom Event priority map\n     *\n     * @var array\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "\/**\n     * Construct\n     *\n     * @param  int                       $level\n     * @param  bool                      $bubble\n     * @throws MissingExtensionException\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "writeZendMonitorCustomEvent": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$type",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Write to Zend Monitor Events\n     * @param string $type Text displayed in \"Class Name (custom)\" field\n     * @param string $message Text displayed in \"Error String\"\n     * @param mixed $formatted Displayed in Custom Variables tab\n     * @param int $severity Set the event severity level (-1,0,1)\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$formatted",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$severity",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "getLevelMap": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Get the level map\n     *\n     * @return array\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "PHPConsoleHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Monolog handler for Google Chrome extension \"PHP Console\"\n *\n * Display PHP error\/debug log messages in Google Chrome console and notification popups, executes PHP code remotely\n *\n * Usage:\n * 1. Install Google Chrome extension https:\/\/chrome.google.com\/webstore\/detail\/php-console\/nfhmhhlpfleoednkpnnnkolmclajemef\n * 2. See overview https:\/\/github.com\/barbushin\/php-console#overview\n * 3. Install PHP Console library https:\/\/github.com\/barbushin\/php-console#installation\n * 4. Example (result will looks like http:\/\/i.hizliresim.com\/vg3Pz4.png)\n *\n *      $logger = new \\Monolog\\Logger('all', array(new \\Monolog\\Handler\\PHPConsoleHandler()));\n *      \\Monolog\\ErrorHandler::register($logger);\n *      echo $undefinedVar;\n *      $logger->addDebug('SELECT * FROM users', array('db', 'time' => 0.012));\n *      PC::debug($_SERVER); \/\/ PHP Console debugger for any type of vars\n *\n * @author Sergey Barbushin https:\/\/www.linkedin.com\/in\/barbushin\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$options": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$connector": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/** @var Connector *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$options",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "\/**\n     * @param  array          $options   See \\Monolog\\Handler\\PHPConsoleHandler::$options for more details\n     * @param  Connector|null $connector Instance of \\PhpConsole\\Connector class (optional)\n     * @param  int            $level\n     * @param  bool           $bubble\n     * @throws Exception\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$connector",
                                    "reference": false,
                                    "typehint": [
                                        "Connector"
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "initOptions": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$options",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "initConnector": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$connector",
                                    "reference": false,
                                    "typehint": [
                                        "Connector"
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getConnector": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "getOptions": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Writes the record down to the log of the implementing handler\n     *\n     * @param  array $record\n     * @return void\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleDebugRecord": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleExceptionRecord": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleErrorRecord": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getRecordTags": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": true,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "ErrorLogHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Stores to PHP error_log() handler.\n *\n * @author Elan Ruusam\u00e4e <glen@delfi.ee>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "OPERATING_SYSTEM": {
                            "value": 0,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "SAPI": {
                            "value": 4,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$messageType": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$expandNewlines": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$messageType",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "self::OPERATING_SYSTEM",
                                    "phpdoc": "\/**\n     * @param int  $messageType    Says where the error should go.\n     * @param int  $level          The minimum logging level at which this handler will be triggered\n     * @param bool $bubble         Whether the messages that are handled can bubble up the stack or not\n     * @param bool $expandNewlines If set to true, newlines in the message will be expanded to be take multiple log entries\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$expandNewlines",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getAvailableTypes": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return array With all available types\n     *\/",
                            "attributes": []
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "LogEntriesHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\sockethandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * @author Robert Kaufmann III <rok3@rok3.me>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$logToken": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$token",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $token  Log token supplied by LogEntries\n     * @param bool   $useSSL Whether or not SSL encryption should be used.\n     * @param int    $level  The minimum logging level to trigger this handler\n     * @param bool   $bubble Whether or not messages that are handled should bubble up the stack.\n     *\n     * @throws MissingExtensionException If SSL encryption is set to true and OpenSSL is missing\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$useSSL",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$host",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'data.logentries.com'",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "generateDataStream": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "DeduplicationHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\bufferhandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Simple handler wrapper that deduplicates log records across multiple requests\n *\n * It also includes the BufferHandler functionality and will buffer\n * all messages until the end of the request or flush() is called.\n *\n * This works by storing all log records' messages above $deduplicationLevel\n * to the file specified by $deduplicationStore. When further logs come in at the end of the\n * request (or when flush() is called), all those above $deduplicationLevel are checked\n * against the existing stored logs. If they match and the timestamps in the stored log is\n * not older than $time seconds, the new log record is discarded. If no log record is new, the\n * whole data set is discarded.\n *\n * This is mainly useful in combination with Mail handlers or things like Slack or HipChat handlers\n * that send messages to people, to avoid spamming with the same message over and over in case of\n * a major component failure like a database server being down which makes all requests fail in the\n * same way.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$deduplicationStore": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$deduplicationLevel": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var int\n     *\/",
                            "attributes": []
                        },
                        "$time": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var int\n     *\/",
                            "attributes": []
                        },
                        "$gc": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var bool\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$handler",
                                    "reference": false,
                                    "typehint": [
                                        "HandlerInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param HandlerInterface $handler            Handler.\n     * @param string           $deduplicationStore The file\/path where the deduplication log should be kept\n     * @param int              $deduplicationLevel The minimum logging level for log records to be looked at for deduplication purposes\n     * @param int              $time               The period (in seconds) during which duplicate entries should be suppressed after a given log is sent through\n     * @param bool             $bubble             Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$deduplicationStore",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$deduplicationLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::ERROR",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$time",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 60,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "flush": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "isDuplicate": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "collectLogs": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "appendRecord": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "FirePHPHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Simple FirePHP Handler (http:\/\/www.firephp.org\/), which uses the Wildfire protocol.\n *\n * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "HEADER_PREFIX": {
                            "value": "'X-Wf'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * Header prefix for Wildfire to recognize & parse headers\n     *\/",
                            "attributes": []
                        },
                        "STRUCTURE_URI": {
                            "value": "'http:\/\/meta.firephp.org\/Wildfire\/Structure\/FirePHP\/FirebugConsole\/0.1'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * FirePHP structure for parsing messages & their presentation\n     *\/",
                            "attributes": []
                        },
                        "PROTOCOL_URI": {
                            "value": "'http:\/\/meta.wildfirehq.org\/Protocol\/JsonStream\/0.2'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * WildFire JSON header message format\n     *\/",
                            "attributes": []
                        },
                        "PLUGIN_URI": {
                            "value": "'http:\/\/meta.firephp.org\/Wildfire\/Plugin\/FirePHP\/Library-FirePHPCore\/0.3'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * Must reference a \"known\" plugin, otherwise headers won't display in FirePHP\n     *\/",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$initialized": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Whether or not Wildfire vendor-specific headers have been generated & sent yet\n     *\/",
                            "attributes": []
                        },
                        "$messageIndex": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Shared static message index between potentially multiple handlers\n     * @var int\n     *\/",
                            "attributes": []
                        },
                        "$sendHeaders": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "createHeader": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$meta",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Base header creation function used by init headers & record headers\n     *\n     * @param  array  $meta    Wildfire Plugin, Protocol & Structure Indexes\n     * @param  string $message Log message\n     * @return array  Complete header string ready for the client as key and message as value\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "createRecordHeader": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Creates message header from record\n     *\n     * @see createHeader()\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        },
                        "getInitHeaders": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Wildfire initialization headers to enable message parsing\n     *\n     * @see createHeader()\n     * @see sendHeader()\n     * @return array\n     *\/",
                            "attributes": []
                        },
                        "sendHeader": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$header",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Send header string to the client\n     *\n     * @param string $header\n     * @param string $content\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Creates & sends header for a record, ensuring init headers have been sent prior\n     *\n     * @see sendHeader()\n     * @see sendInitHeaders()\n     * @param array $record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "headersAccepted": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Verifies if the headers are accepted by the current user agent\n     *\n     * @return bool\n     *\/",
                            "attributes": []
                        },
                        "__get": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$property",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * BC getter for the sendHeaders property that has been made static\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "__set": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$property",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * BC setter for the sendHeaders property that has been made static\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "DoctrineCouchDBHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * CouchDB handler for Doctrine CouchDB ODM\n *\n * @author Markus Bachmann <markus.bachmann@bachi.biz>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$client": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$client",
                                    "reference": false,
                                    "typehint": [
                                        "CouchDBClient"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "DynamoDbHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Amazon DynamoDB handler (http:\/\/aws.amazon.com\/dynamodb\/)\n *\n * @link https:\/\/github.com\/aws\/aws-sdk-php\/\n * @author Andrew Lawson <adlawson@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "DATE_FORMAT": {
                            "value": "'Y-m-d\\TH:i:s.uO'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$client": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var DynamoDbClient\n     *\/",
                            "attributes": []
                        },
                        "$table": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$version": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var int\n     *\/",
                            "attributes": []
                        },
                        "$marshaler": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var Marshaler\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$client",
                                    "reference": false,
                                    "typehint": [
                                        "DynamoDbClient"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param DynamoDbClient $client\n     * @param string         $table\n     * @param int            $level\n     * @param bool           $bubble\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$table",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "filterEmptyFields": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "MailHandler": {
                    "abstract": true,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Base class for all mail handlers\n *\n * @author Gyula Sallai\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "send": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Send a mail with the given content\n     *\n     * @param string $content formatted email body to be sent\n     * @param array  $records the array of log records that formed this content\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getHighestRecord": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "StreamHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Stores to any stream resource\n *\n * Can be used to store into php:\/\/stderr, remote and local files, etc.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$stream": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$url": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$errorMessage": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$filePermission": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$useLocking": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$dirCreated": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$stream",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param resource|string $stream\n     * @param int             $level          The minimum logging level at which this handler will be triggered\n     * @param bool            $bubble         Whether the messages that are handled can bubble up the stack or not\n     * @param int|null        $filePermission Optional file permissions (default (0644) are only for owner read\/write)\n     * @param bool            $useLocking     Try to lock log file before doing any writes\n     *\n     * @throws \\Exception                If a missing directory is not buildable\n     * @throws \\InvalidArgumentException If stream is not a resource or string\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$filePermission",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useLocking",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "getStream": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Return the currently active stream if it is open\n     *\n     * @return resource|null\n     *\/",
                            "attributes": []
                        },
                        "getUrl": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Return the stream URL if it was configured with a URL and not an active resource\n     *\n     * @return string|null\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "streamWrite": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$stream",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Write to stream\n     * @param resource $stream\n     * @param array $record\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "customErrorHandler": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$code",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$msg",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDirFromStream": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$stream",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $stream\n     *\n     * @return null|string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "createDir": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "LogglyHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends errors to Loggly.\n *\n * @author Przemek Sobstel <przemek@sobstel.org>\n * @author Adam Pancutt <adam@pancutt.com>\n * @author Gregory Barchard <gregory@barchard.net>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "ENDPOINT_BATCH": {
                            "value": "'bulk'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "ENDPOINT_SINGLE": {
                            "value": "'inputs'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "HOST": {
                            "value": "'logs-01.loggly.com'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$token": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$tag": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$token",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "setTag": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$tag",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addTag": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$tag",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "send": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$endpoint",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "SlackWebhookHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends notifications through Slack Webhooks\n *\n * @author Haralan Dobrev <hkdobrev@gmail.com>\n * @see    https:\/\/api.slack.com\/incoming-webhooks\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$webhookUrl": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Slack Webhook token\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$slackRecord": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Instance of the SlackRecord util class preparing data for Slack API.\n     * @var SlackRecord\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$webhookUrl",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  string      $webhookUrl             Slack Webhook URL\n     * @param  string|null $channel                Slack channel (encoded ID or name)\n     * @param  string|null $username               Name of a bot\n     * @param  bool        $useAttachment          Whether the message should be added to Slack as attachment (plain text otherwise)\n     * @param  string|null $iconEmoji              The emoji name to use (or null)\n     * @param  bool        $useShortAttachment     Whether the the context\/extra messages added to Slack as attachments are in a short style\n     * @param  bool        $includeContextAndExtra Whether the attachment should include context and extra data\n     * @param  int         $level                  The minimum logging level at which this handler will be triggered\n     * @param  bool        $bubble                 Whether the messages that are handled can bubble up the stack or not\n     * @param  array       $excludeFields          Dot separated list of fields to exclude from slack message. E.g. ['context.field1', 'extra.field2']\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$channel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$username",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useAttachment",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$iconEmoji",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useShortAttachment",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$includeContextAndExtra",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::CRITICAL",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$excludeFields",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getSlackRecord": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "getWebhookUrl": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param array $record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "WhatFailureGroupHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\grouphandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Forwards records to multiple handlers suppressing failures of each handler\n * and continuing through to give every handler a chance to succeed.\n *\n * @author Craig D'Amelio <craig@damelio.ca>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "ChromePHPHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Handler sending logs to the ChromePHP extension (http:\/\/www.chromephp.com\/)\n *\n * This also works out of the box with Firefox 43+\n *\n * @author Christophe Coevoet <stof@notk.org>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "VERSION": {
                            "value": "'4.0'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * Version of the extension\n     *\/",
                            "attributes": []
                        },
                        "HEADER_NAME": {
                            "value": "'X-ChromeLogger-Data'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * Header name\n     *\/",
                            "attributes": []
                        },
                        "USER_AGENT_REGEX": {
                            "value": "'{\\b(?:Chrome\/\\d+(?:\\.\\d+)*|HeadlessChrome|Firefox\/(?:4[3-9]|[5-9]\\d|\\d{3,})(?:\\.\\d)*)\\b}'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * Regular expression to detect supported browsers (matches any Chrome, or Firefox 43+)\n     *\/",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$initialized": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$overflowed": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Tracks whether we sent too much data\n     *\n     * Chrome limits the headers to 4KB, so when we sent 3KB we stop sending\n     *\n     * @var bool\n     *\/",
                            "attributes": []
                        },
                        "$json": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$sendHeaders": {
                            "value": "",
                            "visibility": "protected",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "\/**\n     * @param int  $level  The minimum logging level at which this handler will be triggered\n     * @param bool $bubble Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Creates & sends header for a record\n     *\n     * @see sendHeader()\n     * @see send()\n     * @param array $record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "send": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Sends the log header\n     *\n     * @see sendHeader()\n     *\/",
                            "attributes": []
                        },
                        "sendHeader": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$header",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Send header string to the client\n     *\n     * @param string $header\n     * @param string $content\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "headersAccepted": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Verifies if the headers are accepted by the current user agent\n     *\n     * @return bool\n     *\/",
                            "attributes": []
                        },
                        "__get": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$property",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * BC getter for the sendHeaders property that has been made static\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "__set": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$property",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * BC setter for the sendHeaders property that has been made static\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "PsrHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstracthandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Proxies log messages to an existing PSR-3 compliant logger.\n *\n * @author Michael Moussa <michael.moussa@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$logger": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * PSR-3 compliant logger\n     *\n     * @var LoggerInterface\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$logger",
                                    "reference": false,
                                    "typehint": [
                                        "LoggerInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param LoggerInterface $logger The underlying PSR-3 compliant logger to which messages will be proxied\n     * @param int             $level  The minimum logging level at which this handler will be triggered\n     * @param bool            $bubble Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "NewRelicHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Class to record a log on a NewRelic application.\n * Enabling New Relic High Security mode may prevent capture of useful information.\n *\n * This handler requires a NormalizerFormatter to function and expects an array in $record['formatted']\n *\n * @see https:\/\/docs.newrelic.com\/docs\/agents\/php-agent\n * @see https:\/\/docs.newrelic.com\/docs\/accounts-partnerships\/accounts\/security\/high-security\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$appName": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Name of the New Relic application that will receive logs from this handler.\n     *\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$transactionName": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Name of the current transaction\n     *\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$explodeArrays": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Some context and extra data is passed into the handler as arrays of values. Do we send them as is\n     * (useful if we are using the API), or explode them for display on the NewRelic RPM website?\n     *\n     * @var bool\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::ERROR",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\n     * @param string $appName\n     * @param bool   $explodeArrays\n     * @param string $transactionName\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$appName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$explodeArrays",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$transactionName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "isNewRelicEnabled": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Checks whether the NewRelic extension is enabled in the system.\n     *\n     * @return bool\n     *\/",
                            "attributes": []
                        },
                        "getAppName": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Returns the appname where this log should be sent. Each log can override the default appname, set in this\n     * handler's constructor, by providing the appname in it's context.\n     *\n     * @param  array       $context\n     * @return null|string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getTransactionName": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$context",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Returns the name of the current transaction. Each log can override the default transaction name, set in this\n     * handler's constructor, by providing the transaction_name in it's context\n     *\n     * @param array $context\n     *\n     * @return null|string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setNewRelicAppName": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$appName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Sets the NewRelic application that should receive this log.\n     *\n     * @param string $appName\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setNewRelicTransactionName": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$transactionName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Overwrites the name of the current transaction\n     *\n     * @param string $transactionName\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setNewRelicParameter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$key",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $key\n     * @param mixed  $value\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "SlackHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\sockethandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends notifications through Slack API\n *\n * @author Greg Kedzierski <greg@gregkedzierski.com>\n * @see    https:\/\/api.slack.com\/\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$token": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Slack API token\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$slackRecord": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Instance of the SlackRecord util class preparing data for Slack API.\n     * @var SlackRecord\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$token",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  string                    $token                  Slack API token\n     * @param  string                    $channel                Slack channel (encoded ID or name)\n     * @param  string|null               $username               Name of a bot\n     * @param  bool                      $useAttachment          Whether the message should be added to Slack as attachment (plain text otherwise)\n     * @param  string|null               $iconEmoji              The emoji name to use (or null)\n     * @param  int                       $level                  The minimum logging level at which this handler will be triggered\n     * @param  bool                      $bubble                 Whether the messages that are handled can bubble up the stack or not\n     * @param  bool                      $useShortAttachment     Whether the the context\/extra messages added to Slack as attachments are in a short style\n     * @param  bool                      $includeContextAndExtra Whether the attachment should include context and extra data\n     * @param  array                     $excludeFields          Dot separated list of fields to exclude from slack message. E.g. ['context.field1', 'extra.field2']\n     * @throws MissingExtensionException If no OpenSSL PHP extension configured\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$channel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$username",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useAttachment",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$iconEmoji",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::CRITICAL",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useShortAttachment",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$includeContextAndExtra",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$excludeFields",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getSlackRecord": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "getToken": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "generateDataStream": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildContent": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Builds the body of API call\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "prepareContentData": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Prepares content data\n     *\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildHeader": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Builds the header of the API Call\n     *\n     * @param  string $content\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param array $record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "finalizeWrite": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Finalizes the request by reading some bytes and then closing the socket\n     *\n     * If we do not read some but close the socket too early, slack sometimes\n     * drops the request entirely.\n     *\/",
                            "attributes": []
                        },
                        "getAttachmentColor": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Returned a Slack message attachment color associated with\n     * provided level.\n     *\n     * @param  int    $level\n     * @return string\n     * @deprecated Use underlying SlackRecord instead\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "stringify": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$fields",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Stringifies an array of key\/value pairs to be used in attachment fields\n     *\n     * @param  array  $fields\n     * @return string\n     * @deprecated Use underlying SlackRecord instead\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "HipChatHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\sockethandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends notifications through the hipchat api to a hipchat room\n *\n * Notes:\n * API token - HipChat API token\n * Room      - HipChat Room Id or name, where messages are sent\n * Name      - Name used to send the message (from)\n * notify    - Should the message trigger a notification in the clients\n * version   - The API version to use (HipChatHandler::API_V1 | HipChatHandler::API_V2)\n *\n * @author Rafael Dohms <rafael@doh.ms>\n * @see    https:\/\/www.hipchat.com\/docs\/api\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "API_V1": {
                            "value": "'v1'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * Use API version 1\n     *\/",
                            "attributes": []
                        },
                        "MAXIMUM_MESSAGE_LENGTH": {
                            "value": 9500,
                            "visibility": "",
                            "phpdoc": "\/**\n     * The maximum allowed length for the message.\n     *\/",
                            "attributes": []
                        },
                        "MAXIMUM_NAME_LENGTH": {
                            "value": 15,
                            "visibility": "",
                            "phpdoc": "\/**\n     * The maximum allowed length for the name used in the \"from\" field.\n     *\/",
                            "attributes": []
                        },
                        "API_V2": {
                            "value": "'v2'",
                            "visibility": "",
                            "phpdoc": "\/**\n     * Use API version v2\n     *\/",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$token": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$room": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$name": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$notify": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var bool\n     *\/",
                            "attributes": []
                        },
                        "$format": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$host": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$version": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$token",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $token   HipChat API Token\n     * @param string $room    The room that should be alerted of the message (Id or Name)\n     * @param string $name    Name used in the \"from\" field.\n     * @param bool   $notify  Trigger a notification in clients or not\n     * @param int    $level   The minimum logging level at which this handler will be triggered\n     * @param bool   $bubble  Whether the messages that are handled can bubble up the stack or not\n     * @param bool   $useSSL  Whether to connect via SSL.\n     * @param string $format  The format of the messages (default to text, can be set to html if you have html in the messages)\n     * @param string $host    The HipChat server hostname.\n     * @param string $version The HipChat API version (default HipChatHandler::API_V1)\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$room",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$name",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'Monolog'",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$notify",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::CRITICAL",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useSSL",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$format",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'text'",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$host",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'api.hipchat.com'",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$version",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "self::API_V1",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "generateDataStream": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildContent": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Builds the body of API call\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildHeader": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Builds the header of the API Call\n     *\n     * @param  string $content\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getAlertColor": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Assigns a color to each level of log records.\n     *\n     * @param  int    $level\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param array $record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "finalizeWrite": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Finalizes the request by reading some bytes and then closing the socket\n     *\n     * If we do not read some but close the socket too early, hipchat sometimes\n     * drops the request entirely.\n     *\/",
                            "attributes": []
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "combineRecords": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Combines multiple records into one. Error level of the combined record\n     * will be the highest level from the given records. Datetime will be taken\n     * from the first record.\n     *\n     * @param $records\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "validateStringLength": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$str",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Validates the length of a string.\n     *\n     * If the `mb_strlen()` function is available, it will use that, as HipChat\n     * allows UTF-8 characters. Otherwise, it will fall back to `strlen()`.\n     *\n     * Note that this might cause false failures in the specific case of using\n     * a valid name with less than 16 characters, but 16 or more bytes, on a\n     * system where `mb_strlen()` is unavailable.\n     *\n     * @param string $str\n     * @param int    $length\n     *\n     * @return bool\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$length",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "FleepHookHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\sockethandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Sends logs to Fleep.io using Webhook integrations\n *\n * You'll need a Fleep.io account to use this handler.\n *\n * @see https:\/\/fleep.io\/integrations\/webhooks\/ Fleep Webhooks Documentation\n * @author Ando Roots <ando@sqroot.eu>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "FLEEP_HOOK_URI": {
                            "value": "'\/hook\/'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "FLEEP_HOST": {
                            "value": "'fleep.io'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$token": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string Webhook token (specifies the conversation where logs are sent)\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$token",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Construct a new Fleep.io Handler.\n     *\n     * For instructions on how to create a new web hook in your conversations\n     * see https:\/\/fleep.io\/integrations\/webhooks\/\n     *\n     * @param  string                    $token  Webhook token\n     * @param  bool|int                  $level  The minimum logging level at which this handler will be triggered\n     * @param  bool                      $bubble Whether the messages that are handled can bubble up the stack or not\n     * @throws MissingExtensionException\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Returns the default formatter to use with this handler\n     *\n     * Overloaded to remove empty context and extra arrays from the end of the log message.\n     *\n     * @return LineFormatter\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Handles a log record\n     *\n     * @param array $record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "generateDataStream": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildHeader": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Builds the header of the API Call\n     *\n     * @param  string $content\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "buildContent": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Builds the body of API call\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "NullHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstracthandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Blackhole\n *\n * Any record it can handle will be thrown away. This can be used\n * to put on top of an existing stack to override it temporarily.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "\/**\n     * @param int $level The minimum logging level at which this handler will be triggered\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "AmqpHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$exchange": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var AMQPExchange|AMQPChannel $exchange\n     *\/",
                            "attributes": []
                        },
                        "$exchangeName": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$exchange",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param AMQPExchange|AMQPChannel $exchange     AMQPExchange (php AMQP ext) or PHP AMQP lib channel, ready for use\n     * @param string                   $exchangeName\n     * @param int                      $level\n     * @param bool                     $bubble       Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$exchangeName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'log'",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getRoutingKey": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Gets the routing key for the AMQP exchange\n     *\n     * @param  array  $record\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "createAmqpMessage": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  string      $data\n     * @return AMQPMessage\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "MandrillHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\mailhandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * MandrillHandler uses cURL to send the emails to the Mandrill API\n *\n * @author Adam Nicholson <adamnicholson10@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$message": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$apiKey": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$apiKey",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string                  $apiKey  A valid Mandrill API key\n     * @param callable|\\Swift_Message $message An example message for real messages, only the body will be replaced\n     * @param int                     $level   The minimum logging level at which this handler will be triggered\n     * @param bool                    $bubble  Whether the messages that are handled can bubble up the stack or not\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::ERROR",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "send": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$content",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "AbstractProcessingHandler": {
                    "abstract": true,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstracthandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Base Handler class providing the Handler structure\n *\n * Classes extending it should (in most cases) only implement write($record)\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n * @author Christophe Coevoet <stof@notk.org>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Writes the record down to the log of the implementing handler\n     *\n     * @param  array $record\n     * @return void\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "processRecord": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Processes a record.\n     *\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "CouchDBHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * CouchDB handler\n *\n * @author Markus Bachmann <markus.bachmann@bachi.biz>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$options": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$options",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "RedisHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Logs to a Redis key using rpush\n *\n * usage example:\n *\n *   $log = new Logger('application');\n *   $redis = new RedisHandler(new Predis\\Client(\"tcp:\/\/localhost:6379\"), \"logs\", \"prod\");\n *   $log->pushHandler($redis);\n *\n * @author Thomas Tourlourat <thomas@tourlourat.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$redisClient": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$redisKey": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$capSize": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$redis",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param \\Predis\\Client|\\Redis $redis   The redis instance\n     * @param string                $key     The key name to push records to\n     * @param int                   $level   The minimum logging level at which this handler will be triggered\n     * @param bool                  $bubble  Whether the messages that are handled can bubble up the stack or not\n     * @param int                   $capSize Number of entries to limit list size to\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$key",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$capSize",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "writeCapped": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Write and cap the collection\n     * Writes the record to the redis list and caps its\n     *\n     * @param  array $record associative record array\n     * @return void\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "CubeHandler": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\handler\\abstractprocessinghandler",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Logs to Cube.\n *\n * @link http:\/\/square.github.com\/cube\/\n * @author Wan Chen <kami@kamisama.me>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$udpConnection": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$httpConnection": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$scheme": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$host": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$port": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$acceptedSchemes": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$url",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Create a Cube handler\n     *\n     * @throws \\UnexpectedValueException when given url is not a valid url.\n     *                                   A valid url must consist of three parts : protocol:\/\/host:port\n     *                                   Only valid protocols used by Cube are http and udp\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$bubble",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "connectUdp": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Establish a connection to an UDP socket\n     *\n     * @throws \\LogicException           when unable to connect to the socket\n     * @throws MissingExtensionException when there is no socket extension\n     *\/",
                            "attributes": []
                        },
                        "connectHttp": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Establish a connection to a http server\n     * @throws \\LogicException when no curl extension\n     *\/",
                            "attributes": []
                        },
                        "write": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "writeUdp": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "writeHttp": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            },
            "interface": {
                "ProcessableHandlerInterface": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Interface to describe loggers that have processors\n *\n * This interface is present in monolog 1.x to ease forward compatibility.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "pushProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                "HandlerInterface"
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$callback",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a processor in the stack.\n     *\n     * @param  ProcessorInterface|callable $callback\n     * @return HandlerInterface            self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "popProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                "callable"
                            ],
                            "phpdoc": "\/**\n     * Removes the processor on top of the stack and returns it.\n     *\n     * @throws \\LogicException In case the processor stack is empty\n     * @return callable\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "FormattableHandlerInterface": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Interface to describe loggers that have a formatter\n *\n * This interface is present in monolog 1.x to ease forward compatibility.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                "HandlerInterface"
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Sets the formatter.\n     *\n     * @param  FormatterInterface $formatter\n     * @return HandlerInterface   self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                "FormatterInterface"
                            ],
                            "phpdoc": "\/**\n     * Gets the formatter.\n     *\n     * @return FormatterInterface\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "HandlerInterface": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Interface that all Monolog Handlers must implement\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "isHandling": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Checks whether the given record will be handled by this handler.\n     *\n     * This is mostly done for performance reasons, to avoid calling processors for nothing.\n     *\n     * Handlers should still check the record levels within handle(), returning false in isHandling()\n     * is no guarantee that handle() will not be called, and isHandling() might not be called\n     * for a given record.\n     *\n     * @param array $record Partial log record containing only a level key\n     *\n     * @return bool\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handle": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Handles a record.\n     *\n     * All records may be passed to this method, and the handler should discard\n     * those that it does not want to handle.\n     *\n     * The return value of this function controls the bubbling process of the handler stack.\n     * Unless the bubbling is interrupted (by returning true), the Logger class will keep on\n     * calling further handlers in the stack with a given log record.\n     *\n     * @param  array   $record The record to handle\n     * @return bool true means that this handler handled the record, and that bubbling is not permitted.\n     *                        false means the record was either not processed or that this handler allows bubbling.\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "handleBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Handles a set of records at once.\n     *\n     * @param array $records The records to handle (an array of record arrays)\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "pushProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$callback",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Adds a processor in the stack.\n     *\n     * @param  callable $callback\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "popProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Removes the processor on top of the stack and returns it.\n     *\n     * @return callable\n     *\/",
                            "attributes": []
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Sets the formatter.\n     *\n     * @param  FormatterInterface $formatter\n     * @return self\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Gets the formatter.\n     *\n     * @return FormatterInterface\n     *\/",
                            "attributes": []
                        }
                    }
                }
            },
            "trait": {
                "FormattableHandlerTrait": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Helper trait for implementing FormattableInterface\n *\n * This trait is present in monolog 1.x to ease forward compatibility.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$formatter": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var FormatterInterface\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                "HandlerInterface"
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     * @suppress PhanTypeMismatchReturn\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                "FormatterInterface"
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "getDefaultFormatter": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                "FormatterInterface"
                            ],
                            "phpdoc": "\/**\n     * Gets the default formatter.\n     *\n     * Overwrite this if the LineFormatter is not a good default for your handler.\n     *\/",
                            "attributes": []
                        }
                    }
                },
                "ProcessableHandlerTrait": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Helper trait for implementing ProcessableInterface\n *\n * This trait is present in monolog 1.x to ease forward compatibility.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$processors": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var callable[]\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "pushProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                "HandlerInterface"
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$callback",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     * @suppress PhanTypeMismatchReturn\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "popProcessor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                "callable"
                            ],
                            "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                            "attributes": []
                        },
                        "processRecord": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                "array"
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Processes a record.\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "resetProcessors": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                "void"
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                }
            }
        },
        "\\Monolog\\Handler\\FingersCrossed\\": {
            "class": {
                "ErrorLevelActivationStrategy": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\handler\\fingerscrossed\\activationstrategyinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Error level based activation strategy.\n *\n * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$actionLevel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$actionLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandlerActivated": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "ChannelLevelActivationStrategy": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\handler\\fingerscrossed\\activationstrategyinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Channel and Error level based monolog activation strategy. Allows to trigger activation\n * based on level per channel. e.g. trigger activation on level 'ERROR' by default, except\n * for records of the 'sql' channel; those should trigger activation on level 'WARN'.\n *\n * Example:\n *\n * <code>\n *   $activationStrategy = new ChannelLevelActivationStrategy(\n *       Logger::CRITICAL,\n *       array(\n *           'request' => Logger::ALERT,\n *           'sensitive' => Logger::ERROR,\n *       )\n *   );\n *   $handler = new FingersCrossedHandler(new StreamHandler('php:\/\/stderr'), $activationStrategy);\n * <\/code>\n *\n * @author Mike Meessen <netmikey@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$defaultActionLevel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$channelToActionLevel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$defaultActionLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param int   $defaultActionLevel   The default action level to be used if the record's category doesn't match any\n     * @param array $channelToActionLevel An array that maps channel names to action levels.\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$channelToActionLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "isHandlerActivated": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            },
            "interface": {
                "ActivationStrategyInterface": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Interface for activation strategies for the FingersCrossedHandler.\n *\n * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "isHandlerActivated": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Returns whether the given record activates the handler.\n     *\n     * @param  array   $record\n     * @return bool\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            }
        },
        "\\Monolog\\Handler\\Curl\\": {
            "class": {
                "Util": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$retriableErrorCodes": {
                            "value": "",
                            "visibility": "private",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "execute": {
                            "visibility": "public",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$ch",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Executes a CURL request with optional retries and exception on failure\n     *\n     * @param  resource          $ch curl handler\n     * @throws \\RuntimeException\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$retries",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 5,
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$closeAfterDone",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            }
        },
        "\\Monolog\\Handler\\Slack\\": {
            "class": {
                "SlackRecord": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Slack record utility helping to log to Slack webhooks or API.\n *\n * @author Greg Kedzierski <greg@gregkedzierski.com>\n * @author Haralan Dobrev <hkdobrev@gmail.com>\n * @see    https:\/\/api.slack.com\/incoming-webhooks\n * @see    https:\/\/api.slack.com\/docs\/message-attachments\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "COLOR_DEFAULT": {
                            "value": "'#e3e4e6'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "COLOR_GOOD": {
                            "value": "'good'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "COLOR_WARNING": {
                            "value": "'warning'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "COLOR_DANGER": {
                            "value": "'danger'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$channel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Slack channel (encoded ID or name)\n     * @var string|null\n     *\/",
                            "attributes": []
                        },
                        "$username": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Name of a bot\n     * @var string|null\n     *\/",
                            "attributes": []
                        },
                        "$userIcon": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * User icon e.g. 'ghost', 'http:\/\/example.com\/user.png'\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$useAttachment": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Whether the message should be added to Slack as attachment (plain text otherwise)\n     * @var bool\n     *\/",
                            "attributes": []
                        },
                        "$useShortAttachment": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Whether the the context\/extra messages added to Slack as attachments are in a short style\n     * @var bool\n     *\/",
                            "attributes": []
                        },
                        "$includeContextAndExtra": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Whether the attachment should include context and extra data\n     * @var bool\n     *\/",
                            "attributes": []
                        },
                        "$excludeFields": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Dot separated list of fields to exclude from slack message. E.g. ['context.field1', 'extra.field2']\n     * @var array\n     *\/",
                            "attributes": []
                        },
                        "$formatter": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var FormatterInterface\n     *\/",
                            "attributes": []
                        },
                        "$normalizerFormatter": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var NormalizerFormatter\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$channel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$username",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useAttachment",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$userIcon",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$useShortAttachment",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$includeContextAndExtra",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$excludeFields",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getSlackData": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getAttachmentColor": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Returned a Slack message attachment color associated with\n     * provided level.\n     *\n     * @param  int    $level\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "stringify": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$fields",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Stringifies an array of key\/value pairs to be used in attachment fields\n     *\n     * @param array $fields\n     *\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "setFormatter": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$formatter",
                                    "reference": false,
                                    "typehint": [
                                        "FormatterInterface"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Sets the formatter\n     *\n     * @param FormatterInterface $formatter\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "generateAttachmentField": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$title",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Generates attachment field\n     *\n     * @param string       $title\n     * @param string|array $value\n     *\n     * @return array\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "generateAttachmentFields": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Generates a collection of attachment fields from array\n     *\n     * @param array $data\n     *\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "excludeFields": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Get a copy of record with fields excluded according to $this->excludeFields\n     *\n     * @param array $record\n     *\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            }
        },
        "\\Monolog\\Handler\\SyslogUdp\\": {
            "class": {
                "UdpSocket": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "DATAGRAM_MAX_LENGTH": {
                            "value": 65023,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$ip": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$port": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$socket": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$ip",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$port",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 514,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "write": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$line",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$header",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "\"\"",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "close": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "send": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$chunk",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "assembleMessage": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$line",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$header",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            }
        },
        "\\Monolog\\Processor\\": {
            "class": {
                "PsrLogMessageProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Processes a record's message according to PSR-3 rules\n *\n * It replaces {foo} with the value from $context['foo']\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "WebProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Injects url\/method and remote IP of the current web request in all records\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$serverData": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var array|\\ArrayAccess\n     *\/",
                            "attributes": []
                        },
                        "$extraFields": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Default fields\n     *\n     * Array is structured as [key in record.extra => key in $serverData]\n     *\n     * @var array\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$serverData",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "\/**\n     * @param array|\\ArrayAccess $serverData  Array or object w\/ ArrayAccess that provides access to the $_SERVER data\n     * @param array|null         $extraFields Field names and the related key inside $serverData to be added. If not provided it defaults to: url, ip, http_method, server, referrer\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$extraFields",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "addExtraField": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$extraName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  string $extraName\n     * @param  string $serverName\n     * @return $this\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$serverName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "appendExtraFields": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$extra",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $extra\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "MemoryPeakUsageProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\processor\\memoryprocessor",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Injects memory_get_peak_usage in all records\n *\n * @see Monolog\\Processor\\MemoryProcessor::__construct() for options\n * @author Rob Jensen\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "ProcessIdProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Adds value of getmypid into records\n *\n * @author Andreas H\u00f6rnicke\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "MercurialProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Injects Hg branch and Hg revision number in all records\n *\n * @author Jonathan A. Schweder <jonathanschweder@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$level": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$cache": {
                            "value": "",
                            "visibility": "private",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getMercurialInfo": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "TagProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Adds a tags array into record\n *\n * @author Martijn Riemers\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$tags": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$tags",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addTags": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$tags",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "setTags": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$tags",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "GitProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Injects Git branch and Git commit SHA in all records\n *\n * @author Nick Otter\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$level": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$cache": {
                            "value": "",
                            "visibility": "private",
                            "static": true,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getGitInfo": {
                            "visibility": "private",
                            "static": true,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    }
                },
                "MemoryProcessor": {
                    "abstract": true,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Some methods that are common for all memory processors\n *\n * @author Rob Jensen\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$realUsage": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var bool If true, get the real size of memory allocated from system. Else, only the memory used by emalloc() is reported.\n     *\/",
                            "attributes": []
                        },
                        "$useFormatting": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var bool If true, then format memory size to human readable string (MB, KB, B depending on size)\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$realUsage",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "\/**\n     * @param bool $realUsage     Set this to true to get the real size of memory allocated from system.\n     * @param bool $useFormatting If true, then format memory size to human readable string (MB, KB, B depending on size)\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$useFormatting",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBytes": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$bytes",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Formats bytes into a human readable string if $this->useFormatting is true, otherwise return $bytes as is\n     *\n     * @param  int        $bytes\n     * @return string|int Formatted string if $this->useFormatting is true, otherwise return $bytes as is\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "IntrospectionProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Injects line\/file:class\/function where the log message came from\n *\n * Warning: This only works if the handler processes the logs directly.\n * If you put the processor on a handler that is behind a FingersCrossedHandler\n * for example, the processor will only be called once the trigger level is reached,\n * and all the log records will have the same file\/line\/.. data from the call that\n * triggered the FingersCrossedHandler.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$level": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$skipClassesPartials": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$skipStackFramesCount": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$skipFunctions": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "Logger::DEBUG",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$skipClassesPartials",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "array( )",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$skipStackFramesCount",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "isTraceClassOrSkippedFunction": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$trace",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$index",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "UidProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\processor\\processorinterface",
                        "\\monolog\\resettableinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Adds a unique identifier into records\n *\n * @author Simon M\u00f6nch <sm@webfactory.de>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$uid": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$length",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 7,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getUid": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @return string\n     *\/",
                            "attributes": []
                        },
                        "reset": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "generateUid": {
                            "visibility": "private",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$length",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "MemoryUsageProcessor": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\processor\\memoryprocessor",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Injects memory_get_usage in all records\n *\n * @see Monolog\\Processor\\MemoryProcessor::__construct() for options\n * @author Rob Jensen\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  array $record\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            },
            "interface": {
                "ProcessorInterface": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * An optional interface to allow labelling Monolog processors.\n *\n * @author Nicolas Grekas <p@tchwork.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "__invoke": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @return array The processed records\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            }
        },
        "\\Monolog\\Formatter\\": {
            "class": {
                "ElasticaFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\normalizerformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Format a log message into an Elastica Document\n *\n * @author Jelle Vink <jelle.vink@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$index": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string Elastic search index name\n     *\/",
                            "attributes": []
                        },
                        "$type": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string Elastic search document type\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$index",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $index Elastic Search index name\n     * @param string $type  Elastic Search document type\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$type",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getIndex": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Getter index\n     * @return string\n     *\/",
                            "attributes": []
                        },
                        "getType": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Getter type\n     * @return string\n     *\/",
                            "attributes": []
                        },
                        "getDocument": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Convert a log message into an Elastica Document\n     *\n     * @param  array    $record Log message\n     * @return Document\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "LineFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\normalizerformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Formats incoming records into a one-line string\n *\n * This is especially useful for logging to files\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n * @author Christophe Coevoet <stof@notk.org>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "SIMPLE_FORMAT": {
                            "value": "\"[%datetime%] %channel%.%level_name%: %message% %context% %extra%\\n\"",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$format": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$allowInlineLineBreaks": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$ignoreEmptyContextAndExtra": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$includeStacktraces": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$format",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "\/**\n     * @param string $format                     The format of the message\n     * @param string $dateFormat                 The format of the timestamp: one supported by DateTime::format\n     * @param bool   $allowInlineLineBreaks      Whether to allow inline line breaks in log entries\n     * @param bool   $ignoreEmptyContextAndExtra\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$dateFormat",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$allowInlineLineBreaks",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$ignoreEmptyContextAndExtra",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "includeStacktraces": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$include",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "allowInlineLineBreaks": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$allow",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "ignoreEmptyContextAndExtra": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$ignore",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "stringify": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "normalizeException": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$e",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "convertToString": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "replaceNewlines": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$str",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "JsonFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\normalizerformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Encodes whatever record data is passed to it as json\n *\n * This can be useful to log to databases or remote APIs\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "BATCH_MODE_NEWLINES": {
                            "value": 2,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "BATCH_MODE_JSON": {
                            "value": 1,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$batchMode": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$appendNewline": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$includeStacktraces": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var bool\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$batchMode",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "self::BATCH_MODE_JSON",
                                    "phpdoc": "\/**\n     * @param int $batchMode\n     * @param bool $appendNewline\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$appendNewline",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "getBatchMode": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * The batch mode option configures the formatting style for\n     * multiple records. By default, multiple records will be\n     * formatted as a JSON-encoded array. However, for\n     * compatibility with some API endpoints, alternative styles\n     * are available.\n     *\n     * @return int\n     *\/",
                            "attributes": []
                        },
                        "isAppendingNewlines": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * True if newlines are appended to every formatted record\n     *\n     * @return bool\n     *\/",
                            "attributes": []
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "includeStacktraces": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$include",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "\/**\n     * @param bool $include\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatchJson": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Return a JSON-encoded array of records.\n     *\n     * @param  array  $records\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatchNewlines": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Use new lines to separate records instead of a\n     * JSON-encoded array.\n     *\n     * @param  array  $records\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "normalize": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Normalizes given $data.\n     *\n     * @param mixed $data\n     *\n     * @return mixed\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$depth",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "normalizeException": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$e",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Normalizes given exception with or without its own stack trace based on\n     * `includeStacktraces` property.\n     *\n     * @param Exception|Throwable $e\n     *\n     * @return array\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "FlowdockFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\formatter\\formatterinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * formats the record to be used in the FlowdockHandler\n *\n * @author Dominik Liebler <liebler.dominik@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$source": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        },
                        "$sourceEmail": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$source",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $source\n     * @param string $sourceEmail\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$sourceEmail",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "getShortMessage": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$message",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $message\n     *\n     * @return string\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "LogstashFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\normalizerformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Serializes a log message to Logstash Event Format\n *\n * @see http:\/\/logstash.net\/\n * @see https:\/\/github.com\/logstash\/logstash\/blob\/master\/lib\/logstash\/event.rb\n *\n * @author Tim Mower <timothy.mower@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "V1": {
                            "value": 1,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        },
                        "V0": {
                            "value": 0,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$systemName": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string the name of the system for the Logstash log message, used to fill the @source field\n     *\/",
                            "attributes": []
                        },
                        "$applicationName": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string an application name for the Logstash log message, used to fill the @type field\n     *\/",
                            "attributes": []
                        },
                        "$extraPrefix": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string a prefix for 'extra' fields from the Monolog record (optional)\n     *\/",
                            "attributes": []
                        },
                        "$contextPrefix": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string a prefix for 'context' fields from the Monolog record (optional)\n     *\/",
                            "attributes": []
                        },
                        "$version": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var int logstash format version to use\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$applicationName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param string $applicationName the application that sends the data, used as the \"type\" field of logstash\n     * @param string $systemName      the system\/machine name, used as the \"source\" field of logstash, defaults to the hostname of the machine\n     * @param string $extraPrefix     prefix for extra keys inside logstash \"fields\"\n     * @param string $contextPrefix   prefix for context keys inside logstash \"fields\", defaults to ctxt_\n     * @param int    $version         the logstash format version to use, defaults to 0\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$systemName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$extraPrefix",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$contextPrefix",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'ctxt_'",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$version",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "self::V0",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatV0": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatV1": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "LogglyFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\jsonformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Encodes message information into JSON in a format compatible with Loggly.\n *\n * @author Adam Pancutt <adam@pancutt.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$batchMode",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "self::BATCH_MODE_NEWLINES",
                                    "phpdoc": "\/**\n     * Overrides the default batch mode to new lines for compatibility with the\n     * Loggly bulk API.\n     *\n     * @param int $batchMode\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$appendNewline",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Appends the 'timestamp' parameter for indexing by Loggly.\n     *\n     * @see https:\/\/www.loggly.com\/docs\/automated-parsing\/#json\n     * @see \\Monolog\\Formatter\\JsonFormatter::format()\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "ScalarFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\normalizerformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Formats data into an associative array of scalar values.\n * Objects and arrays will be JSON encoded.\n *\n * @author Andrew Lawson <adlawson@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "normalizeValue": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * @param  mixed $value\n     * @return mixed\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "MongoDBFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\formatter\\formatterinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Formats a record for use with the MongoDBHandler.\n *\n * @author Florian Plattner <me@florianplattner.de>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$exceptionTraceAsString": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "$maxNestingLevel": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$maxNestingLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 3,
                                    "phpdoc": "\/**\n     * @param int  $maxNestingLevel        0 means infinite nesting, the $record itself is level 1, $record['context'] is 2\n     * @param bool $exceptionTraceAsString set to false to log exception traces as a sub documents instead of strings\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$exceptionTraceAsString",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritDoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatArray": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$nestingLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatObject": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$nestingLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatException": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$exception",
                                    "reference": false,
                                    "typehint": [
                                        "\\Exception"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$nestingLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatDate": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$value",
                                    "reference": false,
                                    "typehint": [
                                        "\\DateTime"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$nestingLevel",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "ChromePHPFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\formatter\\formatterinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Formats a log message according to the ChromePHP array format\n *\n * @author Christophe Coevoet <stof@notk.org>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$logLevels": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Translates Monolog log levels to Wildfire levels.\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "FluentdFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\formatter\\formatterinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Class FluentdFormatter\n *\n * Serializes a log message to Fluentd unix socket protocol\n *\n * Fluentd config:\n *\n * <source>\n *  type unix\n *  path \/var\/run\/td-agent\/td-agent.sock\n * <\/source>\n *\n * Monolog setup:\n *\n * $logger = new Monolog\\Logger('fluent.tag');\n * $fluentHandler = new Monolog\\Handler\\SocketHandler('unix:\/\/\/var\/run\/td-agent\/td-agent.sock');\n * $fluentHandler->setFormatter(new Monolog\\Formatter\\FluentdFormatter());\n * $logger->pushHandler($fluentHandler);\n *\n * @author Andrius Putna <fordnox@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$levelTag": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var bool $levelTag should message level be a part of the fluentd tag\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$levelTag",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "isUsingLevelsInTag": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "GelfMessageFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\normalizerformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Serializes a log message to GELF\n * @see http:\/\/www.graylog2.org\/about\/gelf\n *\n * @author Matt Lehner <mlehner@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "DEFAULT_MAX_LENGTH": {
                            "value": 32766,
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$systemName": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string the name of the system for the Gelf log message\n     *\/",
                            "attributes": []
                        },
                        "$extraPrefix": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string a prefix for 'extra' fields from the Monolog record (optional)\n     *\/",
                            "attributes": []
                        },
                        "$contextPrefix": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var string a prefix for 'context' fields from the Monolog record (optional)\n     *\/",
                            "attributes": []
                        },
                        "$maxLength": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * @var int max length per field\n     *\/",
                            "attributes": []
                        },
                        "$logLevels": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Translates Monolog log levels to Graylog2 log priorities.\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$systemName",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$extraPrefix",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$contextPrefix",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "'ctxt_'",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$maxLength",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "WildfireFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\normalizerformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Serializes a log message according to Wildfire's header requirements\n *\n * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>\n * @author Christophe Coevoet <stof@notk.org>\n * @author Kirill chEbba Chebunin <iam@chebba.org>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "TABLE": {
                            "value": "'table'",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$logLevels": {
                            "value": "",
                            "visibility": "private",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Translates Monolog log levels to Wildfire levels.\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "normalize": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$depth",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "NormalizerFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [
                        "\\monolog\\formatter\\formatterinterface"
                    ],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Normalizes incoming records to remove objects\/resources so it's easier to dump to various targets\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "constants": {
                        "SIMPLE_DATE": {
                            "value": "\"Y-m-d H:i:s\"",
                            "visibility": "",
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "properties": {
                        "$dateFormat": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$dateFormat",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "\/**\n     * @param string $dateFormat The format of the timestamp: one supported by DateTime::format\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * {@inheritdoc}\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "normalize": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$depth",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": 0,
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "normalizeException": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$e",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "toJson": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Return the JSON representation of a value\n     *\n     * @param  mixed             $data\n     * @param  bool              $ignoreErrors\n     * @throws \\RuntimeException if encoding fails and errors are not ignored\n     * @return string\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$ignoreErrors",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "false",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                },
                "HtmlFormatter": {
                    "abstract": false,
                    "final": false,
                    "extends": "\\monolog\\formatter\\normalizerformatter",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Formats incoming records into an HTML table\n *\n * This is especially useful for html email logging\n *\n * @author Tiago Brito <tlfbrito@gmail.com>\n *\/",
                    "attributes": [],
                    "php": false,
                    "properties": {
                        "$logLevels": {
                            "value": "",
                            "visibility": "protected",
                            "static": false,
                            "typehint": [
                                ""
                            ],
                            "phpdoc": "\/**\n     * Translates Monolog log levels to html color priorities.\n     *\/",
                            "attributes": []
                        }
                    },
                    "methods": {
                        "__construct": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$dateFormat",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "null",
                                    "phpdoc": "\/**\n     * @param string $dateFormat The format of the timestamp: one supported by DateTime::format\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "addRow": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$th",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Creates an HTML table row\n     *\n     * @param  string $th       Row header content\n     * @param  string $td       Row standard cell content\n     * @param  bool   $escapeTd false if td content must not be html escaped\n     * @return string\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$td",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "' '",
                                    "phpdoc": "",
                                    "attributes": []
                                },
                                {
                                    "name": "$escapeTd",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "true",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "addTitle": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$title",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Create a HTML h1 tag\n     *\n     * @param  string $title Text to be in the h1\n     * @param  int    $level Error level\n     * @return string\n     *\/",
                                    "attributes": []
                                },
                                {
                                    "name": "$level",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        },
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Formats a log record.\n     *\n     * @param  array $record A record to format\n     * @return mixed The formatted record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Formats a set of log records.\n     *\n     * @param  array $records A set of records to format\n     * @return mixed The formatted set of records\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "convertToString": {
                            "visibility": "protected",
                            "static": false,
                            "abstract": false,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$data",
                                    "reference": false,
                                    "typehint": [
                                        ""
                                    ],
                                    "value": "",
                                    "phpdoc": "",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            },
            "interface": {
                "FormatterInterface": {
                    "abstract": false,
                    "final": false,
                    "extends": "",
                    "implements": [],
                    "use": [],
                    "useoptions": [],
                    "phpdoc": "\/**\n * Interface for formatters\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\/",
                    "attributes": [],
                    "php": false,
                    "methods": {
                        "format": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$record",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Formats a log record.\n     *\n     * @param  array $record A record to format\n     * @return mixed The formatted record\n     *\/",
                                    "attributes": []
                                }
                            ]
                        },
                        "formatBatch": {
                            "visibility": "public",
                            "static": false,
                            "abstract": true,
                            "reference": false,
                            "returntypes": [
                                ""
                            ],
                            "phpdoc": "",
                            "attributes": [],
                            "arguments": [
                                {
                                    "name": "$records",
                                    "reference": false,
                                    "typehint": [
                                        "array"
                                    ],
                                    "value": "",
                                    "phpdoc": "\/**\n     * Formats a set of log records.\n     *\n     * @param  array $records A set of records to format\n     * @return mixed The formatted set of records\n     *\/",
                                    "attributes": []
                                }
                            ]
                        }
                    }
                }
            }
        }
    }
}