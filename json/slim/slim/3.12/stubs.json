{"headers":{"generation":"2020-11-07T20:09:21+00:00","php":"7.4","exakat_version":"2.2.0","exakat_build":"1167","vcs_url":"https:\/\/github.com\/slimphp\/Slim.git","vcs_branch":"(HEAD detached at 3.12.3)","vcs_revision":"1c9318a84ffb890900901136d620b4f03a59da38","code_last_commit":""},"versions":{"\\":[],"\\Slim\\":{"classes":{"Routable":{"abstract":true,"final":false,"extends":"","implements":[],"use":["\\slim\\callableresolverawaretrait"],"useoptions":[""],"phpdoc":"","attributes":[],"php":false,"properties":{"$callable":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route callable\n     *\n     * @var callable\n     *\/","attributes":[]},"$container":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Container\n     *\n     * @var ContainerInterface\n     *\/","attributes":[]},"$middleware":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route middleware\n     *\n     * @var callable[]\n     *\/","attributes":[]},"$pattern":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route pattern\n     *\n     * @var string\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string   $pattern\n     * @param callable $callable\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getMiddleware":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the middleware registered for the group\n     *\n     * @return callable[]\n     *\/","attributes":[]},"getPattern":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the route pattern\n     *\n     * @return string\n     *\/","attributes":[]},"setContainer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set container for use with resolveCallable\n     *\n     * @param ContainerInterface $container\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["ContainerInterface"],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prepend middleware to the middleware collection\n     *\n     * @param callable|string $callable The callback routine\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setPattern":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the route pattern\n     *\n     * @param string $newPattern\n     *\/","attributes":[],"arguments":[{"name":"$newPattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Container":{"abstract":false,"final":false,"extends":"\\pimple\\container","implements":["\\psr\\container\\containerinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Slim's default DI container is Pimple.\n *\n * Slim\\App expects a container that implements Psr\\Container\\ContainerInterface\n * with these service keys configured and ready for use:\n *\n *  `settings`          an array or instance of \\ArrayAccess\n *  `environment`       an instance of \\Slim\\Http\\Environment\n *  `request`           an instance of \\Psr\\Http\\Message\\ServerRequestInterface\n *  `response`          an instance of \\Psr\\Http\\Message\\ResponseInterface\n *  `router`            an instance of \\Slim\\Interfaces\\RouterInterface\n *  `foundHandler`      an instance of \\Slim\\Interfaces\\InvocationStrategyInterface\n *  `errorHandler`      a callable with the signature: function($request, $response, $exception)\n *  `notFoundHandler`   a callable with the signature: function($request, $response)\n *  `notAllowedHandler` a callable with the signature: function($request, $response, $allowedHttpMethods)\n *  `callableResolver`  an instance of \\Slim\\Interfaces\\CallableResolverInterface\n *\/","attributes":[],"php":false,"properties":{"$defaultSettings":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/**\n     * Default settings\n     *\n     * @var array\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $values The parameters or objects.\n     *\/","attributes":[],"arguments":[{"name":"$values","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"registerDefaultServices":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This function registers the default services that Slim needs to work.\n     *\n     * All services are shared, they are registered such that the\n     * same instance is returned on subsequent calls.\n     *\n     * @param array $userSettings Associative array of application settings\n     *\n     * @return void\n     *\/","attributes":[],"arguments":[{"name":"$userSettings","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finds an entry of the container by its identifier and returns it.\n     *\n     * @param string $id Identifier of the entry to look for.\n     *\n     * @return mixed\n     *\n     * @throws InvalidArgumentException         Thrown when an offset cannot be found in the Pimple container\n     * @throws SlimContainerException           Thrown when an exception is\n     *         not an instance of ContainerExceptionInterface\n     * @throws ContainerValueNotFoundException  No entry was found for this identifier.\n     * @throws ContainerExceptionInterface      Error while retrieving the entry.\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"exceptionThrownByContainer":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Tests whether an exception needs to be recast for compliance with psr\/container.  This will be if the\n     * exception was thrown by Pimple.\n     *\n     * @param InvalidArgumentException $exception\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["InvalidArgumentException"],"value":"","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns true if the container can return an entry for the given identifier.\n     * Returns false otherwise.\n     *\n     * @param string $id Identifier of the entry to look for.\n     *\n     * @return boolean\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     *\n     * @return mixed\n     *\n     * @throws InvalidArgumentException         Thrown when an offset cannot be found in the Pimple container\n     * @throws SlimContainerException           Thrown when an exception is not\n     *         an instance of ContainerExceptionInterface\n     * @throws ContainerValueNotFoundException  No entry was found for this identifier.\n     * @throws ContainerExceptionInterface      Error while retrieving the entry.\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__isset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"App":{"abstract":false,"final":false,"extends":"","implements":[],"use":["\\slim\\middlewareawaretrait"],"useoptions":[""],"phpdoc":"","attributes":[],"php":false,"constants":{"VERSION":{"value":"'3.12.3'","visibility":"","phpdoc":"\/**\n     * Current version\n     *\n     * @var string\n     *\/","attributes":[]}},"properties":{"$container":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var ContainerInterface\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContainerInterface|array $container\n     *\n     * @throws InvalidArgumentException When no container is provided that implements ContainerInterface\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getContainer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get container\n     *\n     * @return ContainerInterface\n     *\/","attributes":[]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add middleware\n     *\n     * This method prepends new middleware to the app's middleware stack.\n     *\n     * @param  callable|string $callable The callback routine\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__call":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Calling a non-existent method on App checks to see if there's an item\n     * in the container that is callable and if so, calls it.\n     *\n     * @param  string $method\n     * @param  array  $args\n     *\n     * @return mixed\n     *\n     * @throws BadMethodCallException\n     *\/","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$args","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add GET route\n     *\n     * @param  string          $pattern  The route URI pattern\n     * @param  callable|string $callable The route callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"post":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add POST route\n     *\n     * @param  string          $pattern  The route URI pattern\n     * @param  callable|string $callable The route callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"put":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add PUT route\n     *\n     * @param  string          $pattern  The route URI pattern\n     * @param  callable|string $callable The route callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"patch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add PATCH route\n     *\n     * @param  string          $pattern  The route URI pattern\n     * @param  callable|string $callable The route callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"delete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add DELETE route\n     *\n     * @param  string          $pattern  The route URI pattern\n     * @param  callable|string $callable The route callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"options":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add OPTIONS route\n     *\n     * @param  string          $pattern  The route URI pattern\n     * @param  callable|string $callable The route callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"any":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add route for any HTTP method\n     *\n     * @param  string $pattern The route URI pattern\n     * @param  callable|string $callable The route callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"map":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add route with multiple methods\n     *\n     * @param  string[]        $methods  Numeric array of HTTP method names\n     * @param  string          $pattern  The route URI pattern\n     * @param  callable|string $callable The route callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"redirect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a route that sends an HTTP redirect\n     *\n     * @param string              $from\n     * @param string|UriInterface $to\n     * @param int                 $status\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$from","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$to","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":302,"phpdoc":"","attributes":[]}]},"group":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a route group\n     *\n     * This method accepts a route pattern and a callback. All route\n     * declarations in the callback will be prepended by the group(s)\n     * that it is in.\n     *\n     * @param string           $pattern\n     * @param callable|Closure $callable\n     *\n     * @return RouteGroupInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run application\n     *\n     * This method traverses the application middleware stack and then sends the\n     * resultant Response object to the HTTP client.\n     *\n     * @param bool|false $silent\n     *\n     * @return ResponseInterface\n     *\n     * @throws Exception\n     * @throws Throwable\n     *\/","attributes":[],"arguments":[{"name":"$silent","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"processInvalidMethod":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Pull route info for a request with a bad method to decide whether to\n     * return a not-found error (default) or a bad-method error, then run\n     * the handler for that error, returning the resulting response.\n     *\n     * Used for cases where an incoming request has an unrecognized method,\n     * rather than throwing an exception and not catching it all the way up.\n     *\n     * @param ServerRequestInterface $request\n     * @param ResponseInterface $response\n     *\n     * @return ResponseInterface\n     *\n     * @throws ContainerException\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"process":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process a request\n     *\n     * This method traverses the application middleware stack and then returns the\n     * resultant Response object.\n     *\n     * @param ServerRequestInterface $request\n     * @param ResponseInterface $response\n     *\n     * @return ResponseInterface\n     *\n     * @throws Exception\n     * @throws Throwable\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"respond":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Send the response to the client\n     *\n     * @param ResponseInterface $response\n     *\/","attributes":[],"arguments":[{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Invoke application\n     *\n     * This method implements the middleware interface. It receives\n     * Request and Response objects, and it returns a Response object\n     * after compiling the routes registered in the Router and dispatching\n     * the Request object to the appropriate Route callback routine.\n     *\n     * @param  ServerRequestInterface $request  The most recent Request object\n     * @param  ResponseInterface      $response The most recent Response object\n     *\n     * @return ResponseInterface\n     *\n     * @throws MethodNotAllowedException\n     * @throws NotFoundException\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"subRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform a sub-request from within an application route\n     *\n     * This method allows you to prepare and initiate a sub-request, run within\n     * the context of the current request. This WILL NOT issue a remote HTTP\n     * request. Instead, it will route the provided URL, method, headers,\n     * cookies, body, and server variables against the set of registered\n     * application routes. The result response object is returned.\n     *\n     * @param  string            $method      The request method (e.g., GET, POST, PUT, etc.)\n     * @param  string            $path        The request URI path\n     * @param  string            $query       The request URI query string\n     * @param  array             $headers     The request headers (key-value array)\n     * @param  array             $cookies     The request cookies (key-value array)\n     * @param  string            $bodyContent The request body\n     * @param  ResponseInterface $response     The response object (optional)\n     *\n     * @return ResponseInterface\n     *\n     * @throws MethodNotAllowedException\n     * @throws NotFoundException\n     *\/","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$cookies","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$bodyContent","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"null","phpdoc":"","attributes":[]}]},"dispatchRouterAndPrepareRoute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dispatch the router to find the route. Prepare the route for use.\n     *\n     * @param ServerRequestInterface $request\n     * @param RouterInterface        $router\n     *\n     * @return ServerRequestInterface\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$router","reference":false,"typehint":["RouterInterface"],"value":"","phpdoc":"","attributes":[]}]},"finalize":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finalize response\n     *\n     * @param ResponseInterface $response\n     *\n     * @return ResponseInterface\n     *\n     * @throws RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"isEmptyResponse":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper method, which returns true if the provided response must not output a body and false\n     * if the response could have a body.\n     *\n     * @see https:\/\/tools.ietf.org\/html\/rfc7231\n     *\n     * @param ResponseInterface $response\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"isHeadRequest":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper method to check if the current request is a HEAD request\n     *\n     * @param RequestInterface $request\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["RequestInterface"],"value":"","phpdoc":"","attributes":[]}]},"handleException":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call relevant handler from the Container if needed. If it doesn't exist,\n     * then just re-throw.\n     *\n     * @param  Exception              $e\n     * @param  ServerRequestInterface $request\n     * @param  ResponseInterface      $response\n     *\n     * @return ResponseInterface\n     *\n     * @throws Exception If a handler is needed and not found\n     *\/","attributes":[],"arguments":[{"name":"$e","reference":false,"typehint":["Exception"],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"handlePhpError":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call relevant handler from the Container if needed. If it doesn't exist,\n     * then just re-throw.\n     *\n     * @param  Throwable $e\n     * @param  ServerRequestInterface $request\n     * @param  ResponseInterface $response\n     *\n     * @return ResponseInterface\n     *\n     * @throws Throwable\n     *\/","attributes":[],"arguments":[{"name":"$e","reference":false,"typehint":["Throwable"],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"DeferredCallable":{"abstract":false,"final":false,"extends":"","implements":[],"use":["\\slim\\callableresolverawaretrait"],"useoptions":[""],"phpdoc":"","attributes":[],"php":false,"properties":{"$callable":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var callable|string\n     *\/","attributes":[]},"$container":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var ContainerInterface\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param callable|string $callable\n     * @param ContainerInterface $container\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$container","reference":false,"typehint":["ContainerInterface"],"value":"null","phpdoc":"","attributes":[]}]},"getCallable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return callable|string\n     *\/","attributes":[]},"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return mixed\n     *\/","attributes":[]}}},"RouteGroup":{"abstract":false,"final":false,"extends":"\\slim\\routable","implements":["\\slim\\interfaces\\routegroupinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["App"],"value":"null","phpdoc":"","attributes":[]}]}}},"Route":{"abstract":false,"final":false,"extends":"\\slim\\routable","implements":["\\slim\\interfaces\\routeinterface"],"use":["\\slim\\middlewareawaretrait"],"useoptions":[""],"phpdoc":"","attributes":[],"php":false,"properties":{"$methods":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * HTTP methods supported by this route\n     *\n     * @var string[]\n     *\/","attributes":[]},"$identifier":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route identifier\n     *\n     * @var string\n     *\/","attributes":[]},"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route name\n     *\n     * @var null|string\n     *\/","attributes":[]},"$groups":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Parent route groups\n     *\n     * @var RouteGroup[]\n     *\/","attributes":[]},"$finalized":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$outputBuffering":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Output buffering mode\n     *\n     * One of: false, 'prepend' or 'append'\n     *\n     * @var boolean|string\n     *\/","attributes":[]},"$arguments":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route parameters\n     *\n     * @var array\n     *\/","attributes":[]},"$savedArguments":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route arguments parameters\n     *\n     * @var null|array\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string|string[] $methods The route HTTP methods\n     * @param string          $pattern The route pattern\n     * @param callable        $callable The route callable\n     * @param RouteGroup[]    $groups The parent route groups\n     * @param int             $identifier The route identifier\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$groups","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$identifier","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"finalize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getCallable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get route callable\n     *\n     * @return callable\n     *\/","attributes":[]},"setCallable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method enables you to override the Route's callable\n     *\n     * @param string|Closure $callable\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getMethods":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get route methods\n     *\n     * @return string[]\n     *\/","attributes":[]},"getGroups":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get parent route groups\n     *\n     * @return RouteGroup[]\n     *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getIdentifier":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get route identifier\n     *\n     * @return string\n     *\/","attributes":[]},"getOutputBuffering":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get output buffering mode\n     *\n     * @return boolean|string\n     *\/","attributes":[]},"setOutputBuffering":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$mode","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setArgument":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$includeInSavedArguments","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"setArguments":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$arguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$includeInSavedArguments","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"getArguments":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getArgument":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"prepare":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$arguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"Router":{"abstract":false,"final":false,"extends":"","implements":["\\slim\\interfaces\\routerinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class organizes Slim application route objects. It is responsible\n * for registering route objects, assigning names to route objects,\n * finding routes that match the current HTTP request, and creating\n * URLs for a named route.\n *\/","attributes":[],"php":false,"properties":{"$container":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Container Interface\n     *\n     * @var ContainerInterface\n     *\/","attributes":[]},"$routeParser":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Parser\n     *\n     * @var RouteParser\n     *\/","attributes":[]},"$basePath":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Base path used in pathFor()\n     *\n     * @var string\n     *\/","attributes":[]},"$cacheFile":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Path to fast route cache file. Set to false to disable route caching\n     *\n     * @var string|False\n     *\/","attributes":[]},"$routes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Routes\n     *\n     * @var Route[]\n     *\/","attributes":[]},"$routeCounter":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route counter incrementer\n     * @var int\n     *\/","attributes":[]},"$routeGroups":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Route groups\n     *\n     * @var RouteGroup[]\n     *\/","attributes":[]},"$dispatcher":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var Dispatcher\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param RouteParser   $parser\n     *\/","attributes":[],"arguments":[{"name":"$parser","reference":false,"typehint":["RouteParser"],"value":"null","phpdoc":"","attributes":[]}]},"setBasePath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the base path used in pathFor()\n     *\n     * @param string $basePath\n     *\n     * @return static\n     * @throws InvalidArgumentException\n     *\/","attributes":[],"arguments":[{"name":"$basePath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getBasePath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the base path used in pathFor()\n     *\n     * @return string\n     *\/","attributes":[]},"setCacheFile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set path to fast route cache file. If this is false then route caching is disabled.\n     *\n     * @param string|false $cacheFile\n     *\n     * @return static\n     *\n     * @throws InvalidArgumentException If cacheFile is not a string or not false\n     * @throws RuntimeException         If cacheFile directory is not writable\n     *\/","attributes":[],"arguments":[{"name":"$cacheFile","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setContainer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContainerInterface $container\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["ContainerInterface"],"value":"","phpdoc":"","attributes":[]}]},"map":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$handler","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"dispatch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]}]},"createRoute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a new Route object\n     *\n     * @param  string[] $methods Array of HTTP methods\n     * @param  string   $pattern The route pattern\n     * @param  callable $callable The route callable\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"createDispatcher":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Dispatcher\n     *\/","attributes":[]},"setDispatcher":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Dispatcher $dispatcher\n     *\/","attributes":[],"arguments":[{"name":"$dispatcher","reference":false,"typehint":["Dispatcher"],"value":"","phpdoc":"","attributes":[]}]},"getRoutes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get route objects\n     *\n     * @return Route[]\n     *\/","attributes":[]},"getNamedRoute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"removeNamedRoute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove named route\n     *\n     * @param string $name        Route name\n     *\n     * @throws RuntimeException   If named route does not exist\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"processGroups":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process route groups\n     *\n     * @return string A group pattern to prefix routes with\n     *\/","attributes":[]},"pushGroup":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"popGroup":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"lookupRoute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$identifier","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"relativePathFor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$queryParams","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"pathFor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$queryParams","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"urlFor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the path for a named route including the base path\n     *\n     * @param string $name        Route name\n     * @param array  $data        Named argument replacement data\n     * @param array  $queryParams Optional query string parameters\n     *\n     * @return string\n     *\n     * @throws RuntimeException         If named route does not exist\n     * @throws InvalidArgumentException If required data not provided\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$queryParams","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"fullUrlFor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get fully qualified URL for named route\n     *\n     * @param UriInterface $uri\n     * @param string $routeName\n     * @param array $data Named argument replacement data\n     * @param array $queryParams Optional query string parameters\n     *\n     * @return string\n     *\n     * @throws RuntimeException         If named route does not exist\n     * @throws InvalidArgumentException If required data not provided\n     *\/","attributes":[],"arguments":[{"name":"$uri","reference":false,"typehint":["UriInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$routeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$queryParams","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"Collection":{"abstract":false,"final":false,"extends":"","implements":["\\slim\\interfaces\\collectioninterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Collection\n *\n * This class provides a common interface used by many other\n * classes in a Slim application that manage \"collections\"\n * of data that must be inspected and\/or manipulated\n *\/","attributes":[],"php":false,"properties":{"$data":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The source data\n     *\n     * @var array\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $items Pre-populate collection with this key-value array\n     *\/","attributes":[],"arguments":[{"name":"$items","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"replace":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$items","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"all":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"keys":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get collection keys\n     *\n     * @return array The collection's source data keys\n     *\/","attributes":[]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"remove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"clear":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Does this collection have a given key?\n     *\n     * @param  string $key The data key\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get collection item for key\n     *\n     * @param string $key The data key\n     *\n     * @return mixed The key's value, or the default value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set collection item\n     *\n     * @param string $key   The data key\n     * @param mixed  $value The data value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove item from collection\n     *\n     * @param string $key The data key\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"count":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get number of items in collection\n     *\n     * @return int\n     *\/","attributes":[]},"getIterator":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get collection iterator\n     *\n     * @return ArrayIterator\n     *\/","attributes":[]}}},"DefaultServicesProvider":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Register Slim's default services.\n     *\n     * @param Container $container A DI container implementing ArrayAccess and psr\/container.\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"CallableResolver":{"abstract":false,"final":true,"extends":"","implements":["\\slim\\interfaces\\callableresolverinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class resolves a string of the format 'class:method' into a closure\n * that can be dispatched.\n *\/","attributes":[],"php":false,"constants":{"CALLABLE_PATTERN":{"value":"'!^([^\\:]+)\\:([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)$!'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$container":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var ContainerInterface\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContainerInterface $container\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["ContainerInterface"],"value":"","phpdoc":"","attributes":[]}]},"resolve":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Resolve toResolve into a closure so that the router can dispatch.\n     *\n     * If toResolve is of the format 'class:method', then try to extract 'class'\n     * from the container otherwise instantiate it and then dispatch 'method'.\n     *\n     * @param callable|string $toResolve\n     *\n     * @return callable\n     *\n     * @throws RuntimeException If the callable does not exist\n     * @throws RuntimeException If the callable is not resolvable\n     *\/","attributes":[],"arguments":[{"name":"$toResolve","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseCallable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Extract class and method from toResolve\n     *\n     * @param string $toResolve\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$toResolve","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"resolveCallable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if string is something in the DIC\n     * that's callable or is a class name which has an __invoke() method.\n     *\n     * @param string $class\n     * @param string $method\n     *\n     * @return callable\n     *\n     * @throws RuntimeException if the callable does not exist\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"assertCallable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Callable $callable\n     *\n     * @throws RuntimeException if the callable is not resolvable\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"traits":{"MiddlewareAwareTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Middleware\n *\n * This is an internal class that enables concentric middleware layers. This\n * class is an implementation detail and is used only inside of the Slim\n * application; it is not visible to\u2014and should not be used by\u2014end users.\n *\/","attributes":[],"php":false,"properties":{"$tip":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Tip of the middleware call stack\n     *\n     * @var callable\n     *\/","attributes":[]},"$middlewareLock":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Middleware stack lock\n     *\n     * @var bool\n     *\/","attributes":[]}},"methods":{"addMiddleware":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add middleware\n     *\n     * This method prepends new middleware to the application middleware stack.\n     *\n     * @param callable $callable Any callable that accepts three arguments:\n     * 1. A Request object\n     * 2. A Response object\n     * 3. A \"next\" middleware callable\n     *\n     * @return static\n     *\n     * @throws RuntimeException         If middleware is added while the stack is dequeuing\n     * @throws UnexpectedValueException If the middleware doesn't return a Psr\\Http\\Message\\ResponseInterface\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"seedMiddlewareStack":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Seed middleware stack with first callable\n     *\n     * @param callable $kernel The last item to run as middleware\n     *\n     * @throws RuntimeException if the stack is seeded more than once\n     *\/","attributes":[],"arguments":[{"name":"$kernel","reference":false,"typehint":["callable"],"value":"null","phpdoc":"","attributes":[]}]},"callMiddlewareStack":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var callable $start *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"CallableResolverAwareTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is an internal class that enables resolution of 'class:method' strings\n * into a closure. This class is an implementation detail and is used only inside\n * of the Slim application.\n *\/","attributes":[],"php":false,"methods":{"resolveCallable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var CallableResolverInterface $resolver *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Slim\\Http\\":{"classes":{"Headers":{"abstract":false,"final":false,"extends":"\\slim\\collection","implements":["\\slim\\interfaces\\http\\headersinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class represents a collection of HTTP headers\n * that is used in both the HTTP request and response objects.\n * It also enables header name case-insensitivity when\n * getting or setting a header value.\n *\n * Each HTTP header can have multiple values. This class\n * stores values into an array for each header name. When\n * you request a header value, you receive an array of values\n * for that header.\n *\/","attributes":[],"php":false,"properties":{"$special":{"value":"","visibility":"protected","static":true,"typehint":[""],"phpdoc":"\/**\n     * Special HTTP headers that do not have the \"HTTP_\" prefix\n     *\n     * @var array\n     *\/","attributes":[]}},"methods":{"createFromEnvironment":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create new headers collection with data extracted from the application Environment object\n     *\n     * @param Environment $environment The Slim application Environment\n     *\n     * @return self\n     *\/","attributes":[],"arguments":[{"name":"$environment","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"determineAuthorization":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If HTTP_AUTHORIZATION does not exist tries to get it from getallheaders() when available.\n     *\n     * @param Environment $environment The Slim application Environment\n     *\n     * @return Environment\n     *\/","attributes":[],"arguments":[{"name":"$environment","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"all":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return array of HTTP header names and values.\n     * This method returns the _original_ header name as specified by the end user.\n     *\n     * @return array\n     *\/","attributes":[]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set HTTP header value\n     *\n     * This method sets a header value. It replaces\n     * any values that may already exist for the header name.\n     *\n     * @param string       $key   The case-insensitive header name\n     * @param array|string $value The header value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get HTTP header value\n     *\n     * @param  string  $key     The case-insensitive header name\n     * @param  mixed   $default The default value if key does not exist\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getOriginalKey":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get HTTP header key as originally specified\n     *\n     * @param  string   $key     The case-insensitive header name\n     * @param  mixed    $default The default value if key does not exist\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Does this collection have a given header?\n     *\n     * @param  string $key The case-insensitive header name\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"remove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove header from collection\n     *\n     * @param  string $key The case-insensitive header name\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"normalizeKey":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Cookies":{"abstract":false,"final":false,"extends":"","implements":["\\slim\\interfaces\\http\\cookiesinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$requestCookies":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Cookies from HTTP request\n     *\n     * @var array\n     *\/","attributes":[]},"$responseCookies":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Cookies for HTTP response\n     *\n     * @var array\n     *\/","attributes":[]},"$defaults":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Default cookie properties\n     *\n     * @var array\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $cookies\n     *\/","attributes":[],"arguments":[{"name":"$cookies","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"setDefaults":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set default cookie properties\n     *\n     * @param array $settings\n     *\/","attributes":[],"arguments":[{"name":"$settings","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"toHeaders":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"toHeader":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert to `Set-Cookie` header\n     *\n     * @param  string $name       Cookie name\n     * @param  array  $properties Cookie properties\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$properties","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"parseHeader":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$header","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Response":{"abstract":false,"final":false,"extends":"\\slim\\http\\message","implements":["\\psr\\http\\message\\responseinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Response\n *\n * This class represents an HTTP response. It manages\n * the response status, headers, and body\n * according to the PSR-7 standard.\n *\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/MessageInterface.php\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/ResponseInterface.php\n *\/","attributes":[],"php":false,"constants":{"EOL":{"value":"\"\\r\\n\"","visibility":"","phpdoc":"\/**\n     * EOL characters used for HTTP response.\n     *\n     * @var string\n     *\/","attributes":[]}},"properties":{"$status":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Status code\n     *\n     * @var int\n     *\/","attributes":[]},"$reasonPhrase":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Reason phrase\n     *\n     * @var string\n     *\/","attributes":[]},"$messages":{"value":"","visibility":"protected","static":true,"typehint":[""],"phpdoc":"\/**\n     * Status codes and reason phrases\n     *\n     * @var array\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int                   $status  The response status code.\n     * @param HeadersInterface|null $headers The response headers.\n     * @param StreamInterface|null  $body    The response body.\n     *\/","attributes":[],"arguments":[{"name":"$status","reference":false,"typehint":[""],"value":"StatusCode::HTTP_OK","phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":["HeadersInterface"],"value":"null","phpdoc":"","attributes":[]},{"name":"$body","reference":false,"typehint":["StreamInterface"],"value":"null","phpdoc":"","attributes":[]}]},"__clone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method is applied to the cloned object\n     * after PHP performs an initial shallow-copy. This\n     * method completes a deep-copy by creating new objects\n     * for the cloned object's internal reference pointers.\n     *\/","attributes":[]},"getStatusCode":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the response status code.\n     *\n     * The status code is a 3-digit integer result code of the server's attempt\n     * to understand and satisfy the request.\n     *\n     * @return int\n     *\/","attributes":[]},"withStatus":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified status code and, optionally, reason phrase.\n     *\n     * If no reason phrase is specified, implementations MAY choose to default\n     * to the RFC 7231 or IANA recommended reason phrase for the response's\n     * status code.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated status and reason phrase.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc7231#section-6\n     * @link http:\/\/www.iana.org\/assignments\/http-status-codes\/http-status-codes.xhtml\n     *\n     * @param int $code The 3-digit integer result code to set.\n     * @param string $reasonPhrase The reason phrase to use with the\n     *     provided status code; if none is provided, implementations MAY\n     *     use the defaults as suggested in the HTTP specification.\n     *\n     * @return static\n     *\n     * @throws InvalidArgumentException For invalid status code arguments.\n     *\/","attributes":[],"arguments":[{"name":"$code","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$reasonPhrase","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"filterStatus":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Filter HTTP status code.\n     *\n     * @param  int $status HTTP status code.\n     *\n     * @return int\n     *\n     * @throws InvalidArgumentException If an invalid HTTP status code is provided.\n     *\/","attributes":[],"arguments":[{"name":"$status","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getReasonPhrase":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the response reason phrase associated with the status code.\n     *\n     * Because a reason phrase is not a required element in a response\n     * status line, the reason phrase value MAY be null. Implementations MAY\n     * choose to return the default RFC 7231 recommended reason phrase (or those\n     * listed in the IANA HTTP Status Code Registry) for the response's\n     * status code.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc7231#section-6\n     * @link http:\/\/www.iana.org\/assignments\/http-status-codes\/http-status-codes.xhtml\n     *\n     * @return string Reason phrase; must return an empty string if none present.\n     *\/","attributes":[]},"withHeader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the provided value replacing the specified header.\n     *\n     * If a Location header is set and the status code is 200, then set the status\n     * code to 302 to mimic what PHP does. See https:\/\/github.com\/slimphp\/Slim\/issues\/1730\n     *\n     * @param string $name Case-insensitive header field name.\n     * @param string|string[] $value Header value(s).\n     *\n     * @return static\n     *\n     * @throws InvalidArgumentException For invalid header names or values.\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"write":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Write data to the response body.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * Proxies to the underlying stream and writes the provided data to it.\n     *\n     * @param string $data\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"withRedirect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Redirect.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * This method prepares the response object to return an HTTP Redirect\n     * response to the client.\n     *\n     * @param  string|UriInterface $url    The redirect destination.\n     * @param  int|null            $status The redirect HTTP status code.\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"withJson":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Json.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * This method prepares the response object to return an HTTP Json\n     * response to the client.\n     *\n     * @param  mixed $data   The data\n     * @param  int   $status The HTTP status code.\n     * @param  int   $encodingOptions Json encoding options\n     *\n     * @return static\n     *\n     * @throws RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$encodingOptions","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"isEmpty":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response empty?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isInformational":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response informational?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isOk":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response OK?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isSuccessful":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response successful?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isRedirect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response a redirect?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isRedirection":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response a redirection?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isForbidden":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response forbidden?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isNotFound":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response not Found?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isBadRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this a bad request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isClientError":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response a client error?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isServerError":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this response a server error?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert response to string.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return string\n     *\/","attributes":[]}}},"Body":{"abstract":false,"final":false,"extends":"\\slim\\http\\stream","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false},"NonBufferedBody":{"abstract":false,"final":false,"extends":"","implements":["\\psr\\http\\message\\streaminterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Represents a non-readable stream that whenever it is written pushes\n * the data back to the browser immediately.\n *\/","attributes":[],"php":false,"methods":{"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"close":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"detach":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getSize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"tell":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"eof":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isSeekable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"seek":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$whence","reference":false,"typehint":[""],"value":"SEEK_SET","phpdoc":"","attributes":[]}]},"rewind":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isWritable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"write":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$string","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isReadable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"read":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$length","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContents":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getMetadata":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]}}},"Stream":{"abstract":false,"final":false,"extends":"","implements":["\\psr\\http\\message\\streaminterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Represents a data stream as defined in PSR-7.\n *\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/StreamInterface.php\n *\/","attributes":[],"php":false,"constants":{"FSTAT_MODE_S_IFIFO":{"value":10000,"visibility":"","phpdoc":"\/**\n     * Bit mask to determine if the stream is a pipe\n     *\n     * This is octal as per header stat.h\n     *\/","attributes":[]}},"properties":{"$modes":{"value":"","visibility":"protected","static":true,"typehint":[""],"phpdoc":"\/**\n     * Resource modes\n     *\n     * @var  array\n     * @link http:\/\/php.net\/manual\/function.fopen.php\n     *\/","attributes":[]},"$stream":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The underlying stream resource\n     *\n     * @var resource\n     *\/","attributes":[]},"$meta":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Stream metadata\n     *\n     * @var array\n     *\/","attributes":[]},"$readable":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Is this stream readable?\n     *\n     * @var bool\n     *\/","attributes":[]},"$writable":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Is this stream writable?\n     *\n     * @var bool\n     *\/","attributes":[]},"$seekable":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Is this stream seekable?\n     *\n     * @var bool\n     *\/","attributes":[]},"$size":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The size of the stream if known\n     *\n     * @var null|int\n     *\/","attributes":[]},"$isPipe":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Is this stream a pipe?\n     *\n     * @var bool\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param  resource $stream A PHP resource handle.\n     *\n     * @throws InvalidArgumentException If argument is not a resource.\n     *\/","attributes":[],"arguments":[{"name":"$stream","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getMetadata":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get stream metadata as an associative array or retrieve a specific key.\n     *\n     * The keys returned are identical to the keys returned from PHP's stream_get_meta_data() function.\n     *\n     * @link http:\/\/php.net\/manual\/en\/function.stream-get-meta-data.php\n     *\n     * @param string $key Specific metadata to retrieve.\n     *\n     * @return array|mixed|null Returns an associative array if no key is\n     *     provided. Returns a specific key value if a key is provided and the\n     *     value is found, or null if the key is not found.\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"isAttached":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is a resource attached to this stream?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"attach":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attach new resource to this object.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param resource $newStream A PHP resource handle.\n     *\n     * @throws InvalidArgumentException If argument is not a valid PHP resource.\n     *\/","attributes":[],"arguments":[{"name":"$newStream","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"detach":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Separates any underlying resources from the stream.\n     *\n     * After the stream has been detached, the stream is in an unusable state.\n     *\n     * @return resource|null Underlying PHP stream, if any\n     *\/","attributes":[]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Reads all data from the stream into a string, from the beginning to end.\n     *\n     * This method MUST attempt to seek to the beginning of the stream before\n     * reading data and read the stream until the end is reached.\n     *\n     * Warning: This could attempt to load a large amount of data into memory.\n     *\n     * This method MUST NOT raise an exception in order to conform with PHP's\n     * string casting operations.\n     *\n     * @see http:\/\/php.net\/manual\/en\/language.oop5.magic.php#object.tostring\n     *\n     * @return string\n     *\/","attributes":[]},"close":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Closes the stream and any underlying resources.\n     *\/","attributes":[]},"getSize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the size of the stream if known.\n     *\n     * @return int|null Returns the size in bytes if known, or null if unknown.\n     *\/","attributes":[]},"tell":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the current position of the file read\/write pointer\n     *\n     * @return int Position of the file pointer\n     *\n     * @throws RuntimeException on error.\n     *\/","attributes":[]},"eof":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns true if the stream is at the end of the stream.\n     *\n     * @return bool\n     *\/","attributes":[]},"isReadable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether or not the stream is readable.\n     *\n     * @return bool\n     *\/","attributes":[]},"isWritable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether or not the stream is writable.\n     *\n     * @return bool\n     *\/","attributes":[]},"isSeekable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether or not the stream is seekable.\n     *\n     * @return bool\n     *\/","attributes":[]},"seek":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Seek to a position in the stream.\n     *\n     * @link http:\/\/www.php.net\/manual\/en\/function.fseek.php\n     *\n     * @param int $offset Stream offset\n     * @param int $whence Specifies how the cursor position will be calculated\n     *     based on the seek offset. Valid values are identical to the built-in\n     *     PHP $whence values for `fseek()`.  SEEK_SET: Set position equal to\n     *     offset bytes SEEK_CUR: Set position to current location plus offset\n     *     SEEK_END: Set position to end-of-stream plus offset.\n     *\n     * @throws RuntimeException If stream is not seekable\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$whence","reference":false,"typehint":[""],"value":"SEEK_SET","phpdoc":"","attributes":[]}]},"rewind":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Seek to the beginning of the stream.\n     *\n     * If the stream is not seekable, this method will raise an exception;\n     * otherwise, it will perform a seek(0).\n     *\n     * @see seek()\n     *\n     * @link http:\/\/www.php.net\/manual\/en\/function.fseek.php\n     *\n     * @throws RuntimeException on failure.\n     *\/","attributes":[]},"read":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Read data from the stream.\n     *\n     * @param int $length Read up to $length bytes from the object and return\n     *     them. Fewer than $length bytes may be returned if underlying stream\n     *     call returns fewer bytes.\n     *\n     * @return string Returns the data read from the stream, or an empty string if no bytes are available.\n     *\n     * @throws RuntimeException if an error occurs.\n     *\/","attributes":[],"arguments":[{"name":"$length","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"write":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Write data to the stream.\n     *\n     * @param string $string The string that is to be written.\n     *\n     * @return int Returns the number of bytes written to the stream.\n     *\n     * @throws RuntimeException If stream is not writable\n     *\/","attributes":[],"arguments":[{"name":"$string","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContents":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the remaining contents in a string\n     *\n     * @return string\n     *\n     * @throws RuntimeException If stream is not readable\n     *\/","attributes":[]},"isPipe":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether or not the stream is a pipe.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"Request":{"abstract":false,"final":false,"extends":"\\slim\\http\\message","implements":["\\psr\\http\\message\\serverrequestinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class represents an HTTP request.\n * It manages the request method, URI, headers, cookies, and body according to the PSR-7 standard.\n *\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/MessageInterface.php\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/RequestInterface.php\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/ServerRequestInterface.php\n *\/","attributes":[],"php":false,"properties":{"$method":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The request method\n     *\n     * @var string\n     *\/","attributes":[]},"$originalMethod":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The original request method (ignoring override)\n     *\n     * @var string\n     *\/","attributes":[]},"$uri":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The request URI object\n     *\n     * @var UriInterface\n     *\/","attributes":[]},"$requestTarget":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The request URI target (path + query string)\n     *\n     * @var string\n     *\/","attributes":[]},"$queryParams":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The request query string params\n     *\n     * @var array\n     *\/","attributes":[]},"$cookies":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The request cookies\n     *\n     * @var array\n     *\/","attributes":[]},"$serverParams":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The server environment variables at the time the request was created.\n     *\n     * @var array\n     *\/","attributes":[]},"$attributes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The request attributes (route segment names and values)\n     *\n     * @var Collection\n     *\/","attributes":[]},"$bodyParsed":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The request body parsed (if possible) into a PHP array or object\n     *\n     * @var null|array|object\n     *\/","attributes":[]},"$bodyParsers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * List of request body parsers (e.g., url-encoded, JSON, XML, multipart)\n     *\n     * @var callable[]\n     *\/","attributes":[]},"$uploadedFiles":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * List of uploaded files\n     *\n     * @var UploadedFileInterface[]\n     *\/","attributes":[]},"$validMethods":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Valid request methods\n     *\n     * @var string[]\n     * @deprecated\n     *\/","attributes":[]}},"methods":{"createFromEnvironment":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create new HTTP request with data extracted from the application\n     * Environment object\n     *\n     * @param  Environment $environment The Slim application Environment\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$environment","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string           $method        The request method\n     * @param UriInterface     $uri           The request URI object\n     * @param HeadersInterface $headers       The request headers collection\n     * @param array            $cookies       The request cookies collection\n     * @param array            $serverParams  The server environment variables\n     * @param StreamInterface  $body          The request body object\n     * @param array            $uploadedFiles The request uploadedFiles collection\n     *\n     * @throws InvalidMethodException on invalid HTTP method\n     *\/","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$uri","reference":false,"typehint":["UriInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":["HeadersInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$cookies","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$serverParams","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$body","reference":false,"typehint":["StreamInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$uploadedFiles","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"__clone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method is applied to the cloned object after PHP performs an initial shallow-copy.\n     * This method completes a deep-copy by creating new objects for the cloned object's internal reference pointers.\n     *\/","attributes":[]},"getMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieves the HTTP method of the request.\n     *\n     * @return string\n     *\/","attributes":[]},"getOriginalMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the original HTTP method (ignore override).\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return string\n     *\/","attributes":[]},"withMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the provided HTTP method.\n     *\n     * While HTTP method names are typically all uppercase characters, HTTP\n     * method names are case-sensitive and thus implementations SHOULD NOT\n     * modify the given string.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * changed request method.\n     *\n     * @param string $method Case-sensitive method.\n     *\n     * @return static\n     *\n     * @throws InvalidArgumentException for invalid HTTP methods.\n     *\/","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"filterMethod":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Validate the HTTP method\n     *\n     * @param  null|string $method\n     *\n     * @return null|string\n     *\n     * @throws InvalidArgumentException on invalid HTTP method.\n     *\/","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Does this request use a given method?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param  string $method HTTP method\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this a GET request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isPost":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this a POST request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isPut":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this a PUT request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isPatch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this a PATCH request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isDelete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this a DELETE request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isHead":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this a HEAD request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this a OPTIONS request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"isXhr":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is this an XHR request?\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return bool\n     *\/","attributes":[]},"getRequestTarget":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieves the message's request target.\n     *\n     * Retrieves the message's request-target either as it will appear (for\n     * clients), as it appeared at request (for servers), or as it was\n     * specified for the instance (see withRequestTarget()).\n     *\n     * In most cases, this will be the origin-form of the composed URI,\n     * unless a value was provided to the concrete implementation (see\n     * withRequestTarget() below).\n     *\n     * If no URI is available, and no request-target has been specifically\n     * provided, this method MUST return the string \"\/\".\n     *\n     * @return string\n     *\/","attributes":[]},"withRequestTarget":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specific request-target.\n     *\n     * If the request needs a non-origin-form request-target \u2014 e.g., for\n     * specifying an absolute-form, authority-form, or asterisk-form \u2014\n     * this method may be used to create an instance with the specified\n     * request-target, verbatim.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * changed request target.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc7230#section-2.7\n     * (for the various request-target forms allowed in request messages)\n     *\n     * @param string $requestTarget\n     *\n     * @return static\n     *\n     * @throws InvalidArgumentException if the request target is invalid\n     *\/","attributes":[],"arguments":[{"name":"$requestTarget","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUri":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieves the URI instance.\n     *\n     * This method MUST return a UriInterface instance.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc3986#section-4.3\n     *\n     * @return UriInterface\n     *\/","attributes":[]},"withUri":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns an instance with the provided URI.\n     *\n     * This method MUST update the Host header of the returned request by\n     * default if the URI contains a host component. If the URI does not\n     * contain a host component, any pre-existing Host header MUST be carried\n     * over to the returned request.\n     *\n     * You can opt-in to preserving the original state of the Host header by\n     * setting `$preserveHost` to `true`. When `$preserveHost` is set to\n     * `true`, this method interacts with the Host header in the following ways:\n     *\n     * - If the the Host header is missing or empty, and the new URI contains\n     *   a host component, this method MUST update the Host header in the returned\n     *   request.\n     * - If the Host header is missing or empty, and the new URI does not contain a\n     *   host component, this method MUST NOT update the Host header in the returned\n     *   request.\n     * - If a Host header is present and non-empty, this method MUST NOT update\n     *   the Host header in the returned request.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new UriInterface instance.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc3986#section-4.3\n     *\n     * @param UriInterface $uri          New request URI to use.\n     * @param bool         $preserveHost Preserve the original state of the Host header.\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$uri","reference":false,"typehint":["UriInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$preserveHost","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get request content type.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return string|null\n     *\/","attributes":[]},"getMediaType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get request media type, if known.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return string|null\n     *\/","attributes":[]},"getMediaTypeParams":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get request media type params, if known.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return string[]\n     *\/","attributes":[]},"getContentCharset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get request content character set, if known.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return string|null\n     *\/","attributes":[]},"getContentLength":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get request content length, if known.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return int|null\n     *\/","attributes":[]},"getCookieParams":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve cookies.\n     *\n     * Retrieves cookies sent by the client to the server.\n     *\n     * The data MUST be compatible with the structure of the $_COOKIE superglobal.\n     *\n     * @return array\n     *\/","attributes":[]},"getCookieParam":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch cookie value from cookies sent by the client to the server.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param string $key     The attribute name.\n     * @param mixed  $default Default value to return if the attribute does not exist.\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"withCookieParams":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified cookies.\n     *\n     * The data IS NOT REQUIRED to come from the $_COOKIE superglobal, but MUST\n     * be compatible with the structure of $_COOKIE. Typically, this data will\n     * be injected at instantiation.\n     *\n     * This method MUST NOT update the related Cookie header of the request\n     * instance, nor related values in the server params.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated cookie values.\n     *\n     * @param array $cookies Array of key\/value pairs representing cookies.\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$cookies","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getQueryParams":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve query string arguments.\n     *\n     * Retrieves the deserialized query string arguments, if any.\n     *\n     * Note: the query params might not be in sync with the URI or server\n     * params. If you need to ensure you are only getting the original\n     * values, you may need to parse the query string from `getUri()->getQuery()`\n     * or from the `QUERY_STRING` server param.\n     *\n     * @return array\n     *\/","attributes":[]},"withQueryParams":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified query string arguments.\n     *\n     * These values SHOULD remain immutable over the course of the incoming\n     * request. They MAY be injected during instantiation, such as from PHP's\n     * $_GET superglobal, or MAY be derived from some other value such as the\n     * URI. In cases where the arguments are parsed from the URI, the data\n     * MUST be compatible with what PHP's parse_str() would return for\n     * purposes of how duplicate query parameters are handled, and how nested\n     * sets are handled.\n     *\n     * Setting query string arguments MUST NOT change the URI stored by the\n     * request, nor the values in the server params.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated query string arguments.\n     *\n     * @param array $query Array of query string arguments, typically from\n     *     $_GET.\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getUploadedFiles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve normalized file upload data.\n     *\n     * This method returns upload metadata in a normalized tree, with each leaf\n     * an instance of Psr\\Http\\Message\\UploadedFileInterface.\n     *\n     * These values MAY be prepared from $_FILES or the message body during\n     * instantiation, or MAY be injected via withUploadedFiles().\n     *\n     * @return array\n     *\/","attributes":[]},"withUploadedFiles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a new instance with the specified uploaded files.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated body parameters.\n     *\n     * @param array $uploadedFiles An array tree of UploadedFileInterface instances.\n     *\n     * @return static\n     *\n     * @throws InvalidArgumentException if an invalid structure is provided.\n     *\/","attributes":[],"arguments":[{"name":"$uploadedFiles","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getServerParams":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve server parameters.\n     *\n     * Retrieves data related to the incoming request environment,\n     * typically derived from PHP's $_SERVER superglobal. The data IS NOT\n     * REQUIRED to originate from $_SERVER.\n     *\n     * @return array\n     *\/","attributes":[]},"getServerParam":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve a server parameter.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param  string $key\n     * @param  mixed  $default\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getAttributes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve attributes derived from the request.\n     *\n     * The request \"attributes\" may be used to allow injection of any\n     * parameters derived from the request: e.g., the results of path\n     * match operations; the results of decrypting cookies; the results of\n     * deserializing non-form-encoded message bodies; etc. Attributes\n     * will be application and request specific, and CAN be mutable.\n     *\n     * @return array\n     *\/","attributes":[]},"getAttribute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve a single derived request attribute.\n     *\n     * Retrieves a single derived request attribute as described in\n     * getAttributes(). If the attribute has not been previously set, returns\n     * the default value as provided.\n     *\n     * This method obviates the need for a hasAttribute() method, as it allows\n     * specifying a default value to return if the attribute is not found.\n     *\n     * @see getAttributes()\n     *\n     * @param string $name The attribute name.\n     * @param mixed $default Default value to return if the attribute does not exist.\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"withAttribute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified derived request attribute.\n     *\n     * This method allows setting a single derived request attribute as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated attribute.\n     *\n     * @see getAttributes()\n     *\n     * @param string $name The attribute name.\n     * @param mixed $value The value of the attribute.\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"withAttributes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a new instance with the specified derived request attributes.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * This method allows setting all new derived request attributes as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return a new instance that has the\n     * updated attributes.\n     *\n     * @param  array $attributes New attributes\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$attributes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"withoutAttribute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance that removes the specified derived request attribute.\n     *\n     * This method allows removing a single derived request attribute as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that removes\n     * the attribute.\n     *\n     * @see getAttributes()\n     *\n     * @param string $name The attribute name.\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getParsedBody":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve any parameters provided in the request body.\n     *\n     * If the request Content-Type is either application\/x-www-form-urlencoded\n     * or multipart\/form-data, and the request method is POST, this method MUST\n     * return the contents of $_POST.\n     *\n     * Otherwise, this method may return any results of deserializing\n     * the request body content; as parsing returns structured content, the\n     * potential types MUST be arrays or objects only. A null value indicates\n     * the absence of body content.\n     *\n     * @return null|array|object\n     *\n     * @throws RuntimeException if the request body media type parser returns an invalid value\n     *\/","attributes":[]},"withParsedBody":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified body parameters.\n     *\n     * These MAY be injected during instantiation.\n     *\n     * If the request Content-Type is either application\/x-www-form-urlencoded\n     * or multipart\/form-data, and the request method is POST, use this method\n     * ONLY to inject the contents of $_POST.\n     *\n     * The data IS NOT REQUIRED to come from $_POST, but MUST be the results of\n     * deserializing the request body content. Deserialization\/parsing returns\n     * structured data, and, as such, this method ONLY accepts arrays or objects,\n     * or a null value if nothing was available to parse.\n     *\n     * As an example, if content negotiation determines that the request data\n     * is a JSON payload, this method could be used to create a request\n     * instance with the deserialized parameters.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated body parameters.\n     *\n     * @param null|array|object $data The deserialized body data. This will typically be in an array or object.\n     *\n     * @return static\n     *\n     * @throws InvalidArgumentException if an unsupported argument type is\n     *     provided.\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"reparseBody":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Force Body to be parsed again.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @return $this\n     *\/","attributes":[]},"registerMediaTypeParser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Register media type parser.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param string   $mediaType A HTTP media type (excluding content-type params).\n     * @param callable $callable  A callable that returns parsed contents for media type.\n     *\/","attributes":[],"arguments":[{"name":"$mediaType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getParam":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch request parameter value from body or query string (in that order).\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param  string $key     The parameter key.\n     * @param  mixed  $default The default value.\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getParsedBodyParam":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch parameter value from request body.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param string $key\n     * @param mixed  $default\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getQueryParam":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch parameter value from query string.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param string $key\n     * @param mixed  $default\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getParams":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch associative array of body and query string parameters.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param array|null $only list the keys to retrieve.\n     *\n     * @return array|null\n     *\/","attributes":[],"arguments":[{"name":"$only","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]}]}}},"RequestBody":{"abstract":false,"final":false,"extends":"\\slim\\http\\body","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Provides a PSR-7 implementation of a reusable raw request body\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"Uri":{"abstract":false,"final":false,"extends":"","implements":["\\psr\\http\\message\\uriinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Value object representing a URI.\n *\n * This interface is meant to represent URIs according to RFC 3986 and to\n * provide methods for most common operations. Additional functionality for\n * working with URIs can be provided on top of the interface or externally.\n * Its primary use is for HTTP requests, but may also be used in other\n * contexts.\n *\n * Instances of this interface are considered immutable; all methods that\n * might change state MUST be implemented such that they retain the internal\n * state of the current instance and return an instance that contains the\n * changed state.\n *\n * Typically the Host header will be also be present in the request message.\n * For server-side requests, the scheme will typically be discoverable in the\n * server parameters.\n *\n * @link http:\/\/tools.ietf.org\/html\/rfc3986 (the URI specification)\n *\/","attributes":[],"php":false,"properties":{"$scheme":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri scheme (without \":\/\/\" suffix)\n     *\n     * @var string\n     *\/","attributes":[]},"$user":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri user\n     *\n     * @var string\n     *\/","attributes":[]},"$password":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri password\n     *\n     * @var string\n     *\/","attributes":[]},"$host":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri host\n     *\n     * @var string\n     *\/","attributes":[]},"$port":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri port number\n     *\n     * @var null|int\n     *\/","attributes":[]},"$basePath":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri base path\n     *\n     * @var string\n     *\/","attributes":[]},"$path":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri path\n     *\n     * @var string\n     *\/","attributes":[]},"$query":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri query string (without \"?\" prefix)\n     *\n     * @var string\n     *\/","attributes":[]},"$fragment":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Uri fragment string (without \"#\" prefix)\n     *\n     * @var string\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $scheme   Uri scheme.\n     * @param string $host     Uri host.\n     * @param int    $port     Uri port number.\n     * @param string $path     Uri path.\n     * @param string $query    Uri query string.\n     * @param string $fragment Uri fragment.\n     * @param string $user     Uri user.\n     * @param string $password Uri password.\n     *\/","attributes":[],"arguments":[{"name":"$scheme","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$host","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$port","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"'\/'","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$fragment","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$password","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"createFromString":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create new Uri from string.\n     *\n     * @param  string $uri Complete Uri string (i.e., https:\/\/user:pass@host:443\/path?query).\n     *\n     * @return self\n     *\/","attributes":[],"arguments":[{"name":"$uri","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"createFromEnvironment":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create new Uri from environment.\n     *\n     * @param Environment $env\n     *\n     * @return self\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"getScheme":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the scheme component of the URI.\n     *\n     * If no scheme is present, this method MUST return an empty string.\n     *\n     * The value returned MUST be normalized to lowercase, per RFC 3986\n     * Section 3.1.\n     *\n     * The trailing \":\" character is not part of the scheme and MUST NOT be\n     * added.\n     *\n     * @see https:\/\/tools.ietf.org\/html\/rfc3986#section-3.1\n     *\n     * @return string The URI scheme.\n     *\/","attributes":[]},"withScheme":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified scheme.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified scheme.\n     *\n     * Implementations MUST support the schemes \"http\" and \"https\" case\n     * insensitively, and MAY accommodate other schemes if required.\n     *\n     * An empty scheme is equivalent to removing the scheme.\n     *\n     * @param string $scheme The scheme to use with the new instance.\n     *\n     * @return self A new instance with the specified scheme.\n     *\n     * @throws InvalidArgumentException for invalid or unsupported schemes.\n     *\/","attributes":[],"arguments":[{"name":"$scheme","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"filterScheme":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Filter Uri scheme.\n     *\n     * @param  string $scheme Raw Uri scheme.\n     * @return string\n     *\n     * @throws InvalidArgumentException If the Uri scheme is not a string.\n     * @throws InvalidArgumentException If Uri scheme is not \"\", \"https\", or \"http\".\n     *\/","attributes":[],"arguments":[{"name":"$scheme","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAuthority":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the authority component of the URI.\n     *\n     * If no authority information is present, this method MUST return an empty\n     * string.\n     *\n     * The authority syntax of the URI is:\n     *\n     * <pre>\n     * [user-info@]host[:port]\n     * <\/pre>\n     *\n     * If the port component is not set or is the standard port for the current\n     * scheme, it SHOULD NOT be included.\n     *\n     * @see https:\/\/tools.ietf.org\/html\/rfc3986#section-3.2\n     *\n     * @return string The URI authority, in \"[user-info@]host[:port]\" format.\n     *\/","attributes":[]},"getUserInfo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the user information component of the URI.\n     *\n     * If no user information is present, this method MUST return an empty\n     * string.\n     *\n     * If a user is present in the URI, this will return that value;\n     * additionally, if the password is also present, it will be appended to the\n     * user value, with a colon (\":\") separating the values.\n     *\n     * The trailing \"@\" character is not part of the user information and MUST\n     * NOT be added.\n     *\n     * @return string The URI user information, in \"username[:password]\" format.\n     *\/","attributes":[]},"withUserInfo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified user information.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified user information.\n     *\n     * Password is optional, but the user information MUST include the\n     * user; an empty string for the user is equivalent to removing user\n     * information.\n     *\n     * @param string $user The user name to use for authority.\n     * @param null|string $password The password associated with $user.\n     *\n     * @return self A new instance with the specified user information.\n     *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$password","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"filterUserInfo":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Filters the user info string.\n     *\n     * @param string $query The raw uri query string.\n     *\n     * @return string The percent-encoded query string.\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getHost":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the host component of the URI.\n     *\n     * If no host is present, this method MUST return an empty string.\n     *\n     * The value returned MUST be normalized to lowercase, per RFC 3986\n     * Section 3.2.2.\n     *\n     * @see http:\/\/tools.ietf.org\/html\/rfc3986#section-3.2.2\n     *\n     * @return string The URI host.\n     *\/","attributes":[]},"withHost":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified host.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified host.\n     *\n     * An empty host value is equivalent to removing the host.\n     *\n     * @param string $host The hostname to use with the new instance.\n     *\n     * @return self A new instance with the specified host.\n     *\/","attributes":[],"arguments":[{"name":"$host","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPort":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the port component of the URI.\n     *\n     * If a port is present, and it is non-standard for the current scheme,\n     * this method MUST return it as an integer. If the port is the standard port\n     * used with the current scheme, this method SHOULD return null.\n     *\n     * If no port is present, and no scheme is present, this method MUST return\n     * a null value.\n     *\n     * If no port is present, but a scheme is present, this method MAY return\n     * the standard port for that scheme, but SHOULD return null.\n     *\n     * @return null|int The URI port.\n     *\/","attributes":[]},"withPort":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified port.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified port.\n     *\n     * Implementations MUST raise an exception for ports outside the\n     * established TCP and UDP port ranges.\n     *\n     * A null value provided for the port is equivalent to removing the port\n     * information.\n     *\n     * @param null|int $port The port to use with the new instance; a null value\n     *     removes the port information.\n     *\n     * @return self A new instance with the specified port.\n     *\/","attributes":[],"arguments":[{"name":"$port","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasStandardPort":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Does this Uri use a standard port?\n     *\n     * @return bool\n     *\/","attributes":[]},"filterPort":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Filter Uri port.\n     *\n     * @param  null|int $port The Uri port number.\n     * @return null|int\n     *\n     * @throws InvalidArgumentException If the port is invalid.\n     *\/","attributes":[],"arguments":[{"name":"$port","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the path component of the URI.\n     *\n     * The path can either be empty or absolute (starting with a slash) or\n     * rootless (not starting with a slash). Implementations MUST support all\n     * three syntaxes.\n     *\n     * Normally, the empty path \"\" and absolute path \"\/\" are considered equal as\n     * defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically\n     * do this normalization because in contexts with a trimmed base path, e.g.\n     * the front controller, this difference becomes significant. It's the task\n     * of the user to handle both \"\" and \"\/\".\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.3.\n     *\n     * As an example, if the value should include a slash (\"\/\") not intended as\n     * delimiter between path segments, that value MUST be passed in encoded\n     * form (e.g., \"%2F\") to the instance.\n     *\n     * @see https:\/\/tools.ietf.org\/html\/rfc3986#section-2\n     * @see https:\/\/tools.ietf.org\/html\/rfc3986#section-3.3\n     *\n     * @return string The URI path.\n     *\/","attributes":[]},"withPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified path.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified path.\n     *\n     * The path can either be empty or absolute (starting with a slash) or\n     * rootless (not starting with a slash). Implementations MUST support all three syntaxes.\n     *\n     * If the path is intended to be domain-relative rather than path relative then\n     * it must begin with a slash (\"\/\"). Paths not starting with a slash (\"\/\")\n     * are assumed to be relative to some base path known to the application or\n     * consumer.\n     *\n     * Users can provide both encoded and decoded path characters.\n     * Implementations ensure the correct encoding as outlined in getPath().\n     *\n     * @param string $path The path to use with the new instance.\n     *\n     * @return static A new instance with the specified path.\n     *\n     * @throws InvalidArgumentException For invalid paths.\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getBasePath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the base path segment of the URI.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * This method MUST return a string; if no path is present it MUST return\n     * an empty string.\n     *\n     * @return string The base path segment of the URI.\n     *\/","attributes":[]},"withBasePath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set base path.\n     *\n     * Note: This method is not part of the PSR-7 standard.\n     *\n     * @param  string $basePath\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$basePath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"filterPath":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Filter Uri path.\n     *\n     * Returns a RFC 3986 percent-encoded uri path.\n     *\n     * This method percent-encodes all reserved\n     * characters in the provided path string. This method\n     * will NOT double-encode characters that are already\n     * percent-encoded.\n     *\n     * @param  string $path The raw uri path.\n     *\n     * @return string\n     *\n     * @link   http:\/\/www.faqs.org\/rfcs\/rfc3986.html\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the query string of the URI.\n     *\n     * If no query string is present, this method MUST return an empty string.\n     *\n     * The leading \"?\" character is not part of the query and MUST NOT be\n     * added.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.4.\n     *\n     * As an example, if a value in a key\/value pair of the query string should\n     * include an ampersand (\"&\") not intended as a delimiter between values,\n     * that value MUST be passed in encoded form (e.g., \"%26\") to the instance.\n     *\n     * @see https:\/\/tools.ietf.org\/html\/rfc3986#section-2\n     * @see https:\/\/tools.ietf.org\/html\/rfc3986#section-3.4\n     *\n     * @return string\n     *\/","attributes":[]},"withQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified query string.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified query string.\n     *\n     * Users can provide both encoded and decoded query characters.\n     * Implementations ensure the correct encoding as outlined in getQuery().\n     *\n     * An empty query string value is equivalent to removing the query string.\n     *\n     * @param string $query The query string to use with the new instance.\n     *\n     * @return self A new instance with the specified query string.\n     *\n     * @throws InvalidArgumentException For invalid query strings.\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"filterQuery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Filters the query string or fragment of a URI.\n     *\n     * @param string $query The raw uri query string.\n     *\n     * @return string The percent-encoded query string.\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFragment":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the fragment component of the URI.\n     *\n     * If no fragment is present, this method MUST return an empty string.\n     *\n     * The leading \"#\" character is not part of the fragment and MUST NOT be\n     * added.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.5.\n     *\n     * @see https:\/\/tools.ietf.org\/html\/rfc3986#section-2\n     * @see https:\/\/tools.ietf.org\/html\/rfc3986#section-3.5\n     *\n     * @return string The URI fragment.\n     *\/","attributes":[]},"withFragment":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified URI fragment.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified URI fragment.\n     *\n     * Users can provide both encoded and decoded fragment characters.\n     * Implementations ensure the correct encoding as outlined in getFragment().\n     *\n     * An empty fragment value is equivalent to removing the fragment.\n     *\n     * @param string $fragment The fragment to use with the new instance.\n     *\n     * @return static A new instance with the specified fragment.\n     *\/","attributes":[],"arguments":[{"name":"$fragment","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the string representation as a URI reference.\n     *\n     * Depending on which components of the URI are present, the resulting\n     * string is either a full URI or relative reference according to RFC 3986,\n     * Section 4.1. The method concatenates the various components of the URI,\n     * using the appropriate delimiters:\n     *\n     * - If a scheme is present, it MUST be suffixed by \":\".\n     * - If an authority is present, it MUST be prefixed by \"\/\/\".\n     * - The path can be concatenated without delimiters. But there are two\n     *   cases where the path has to be adjusted to make the URI reference\n     *   valid as PHP does not allow to throw an exception in __toString():\n     *     - If the path is rootless and an authority is present, the path MUST\n     *       be prefixed by \"\/\".\n     *     - If the path is starting with more than one \"\/\" and no authority is\n     *       present, the starting slashes MUST be reduced to one.\n     * - If a query is present, it MUST be prefixed by \"?\".\n     * - If a fragment is present, it MUST be prefixed by \"#\".\n     *\n     * @see http:\/\/tools.ietf.org\/html\/rfc3986#section-4.1\n     *\n     * @return string\n     *\/","attributes":[]},"getBaseUrl":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the fully qualified base URL.\n     *\n     * Note that this method never includes a trailing \/\n     *\n     * This method is not part of PSR-7.\n     *\n     * @return string\n     *\/","attributes":[]}}},"UploadedFile":{"abstract":false,"final":false,"extends":"","implements":["\\psr\\http\\message\\uploadedfileinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Represents an uploaded file according to the PSR-7 standard.\n *\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/UploadedFileInterface.php\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/StreamInterface.php\n *\/","attributes":[],"php":false,"properties":{"$file":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/**\n     * The client-provided full path to the file\n     *\n     * @note this is public to maintain BC with 3.1.0 and earlier.\n     *\n     * @var string\n     *\/","attributes":[]},"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The client-provided file name.\n     *\n     * @var string\n     *\/","attributes":[]},"$type":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The client-provided media type of the file.\n     *\n     * @var string\n     *\/","attributes":[]},"$size":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The size of the file in bytes.\n     *\n     * @var int\n     *\/","attributes":[]},"$error":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * A valid PHP UPLOAD_ERR_xxx code for the file upload.\n     *\n     * @var int\n     *\/","attributes":[]},"$sapi":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Indicates if the upload is from a SAPI environment.\n     *\n     * @var bool\n     *\/","attributes":[]},"$stream":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * An optional StreamInterface wrapping the file resource.\n     *\n     * @var StreamInterface\n     *\/","attributes":[]},"$moved":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Indicates if the uploaded file has already been moved.\n     *\n     * @var bool\n     *\/","attributes":[]}},"methods":{"createFromEnvironment":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a normalized tree of UploadedFile instances from the Environment.\n     *\n     * Returns a normalized tree of UploadedFile instances or null if none are provided.\n     *\n     * @param Environment $env The environment\n     *\n     * @return array|null\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"parseUploadedFiles":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse a non-normalized, i.e. $_FILES superglobal, tree of uploaded file data.\n     *\n     * Returns a normalized tree of UploadedFile instances.\n     *\n     * @param array $uploadedFiles The non-normalized tree of uploaded file data.\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$uploadedFiles","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string      $file The full path to the uploaded file provided by the client.\n     * @param string|null $name The file name.\n     * @param string|null $type The file media type.\n     * @param int|null    $size The file size in bytes.\n     * @param int         $error The UPLOAD_ERR_XXX code representing the status of the upload.\n     * @param bool        $sapi Indicates if the upload is in a SAPI environment.\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$size","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$error","reference":false,"typehint":[""],"value":"UPLOAD_ERR_OK","phpdoc":"","attributes":[]},{"name":"$sapi","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getStream":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve a stream representing the uploaded file.\n     *\n     * This method MUST return a StreamInterface instance, representing the\n     * uploaded file. The purpose of this method is to allow utilizing native PHP\n     * stream functionality to manipulate the file upload, such as\n     * stream_copy_to_stream() (though the result will need to be decorated in a\n     * native PHP stream wrapper to work with such functions).\n     *\n     * If the moveTo() method has been called previously, this method MUST raise\n     * an exception.\n     *\n     * @return StreamInterface\n     *\n     * @throws RuntimeException in cases when no stream is available or can be created.\n     *\/","attributes":[]},"moveTo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Move the uploaded file to a new location.\n     *\n     * Use this method as an alternative to move_uploaded_file(). This method is\n     * guaranteed to work in both SAPI and non-SAPI environments.\n     * Implementations must determine which environment they are in, and use the\n     * appropriate method (move_uploaded_file(), rename(), or a stream\n     * operation) to perform the operation.\n     *\n     * $targetPath may be an absolute path, or a relative path. If it is a\n     * relative path, resolution should be the same as used by PHP's rename()\n     * function.\n     *\n     * The original file or stream MUST be removed on completion.\n     *\n     * If this method is called more than once, any subsequent calls MUST raise\n     * an exception.\n     *\n     * When used in an SAPI environment where $_FILES is populated, when writing\n     * files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be\n     * used to ensure permissions and upload status are verified correctly.\n     *\n     * If you wish to move to a stream, use getStream(), as SAPI operations\n     * cannot guarantee writing to stream destinations.\n     *\n     * @see http:\/\/php.net\/is_uploaded_file\n     * @see http:\/\/php.net\/move_uploaded_file\n     *\n     * @param string $targetPath Path to which to move the uploaded file.\n     *\n     * @throws InvalidArgumentException If the $path specified is invalid.\n     * @throws RuntimeException On any error during the move operation or on the second subsequent call to the method.\n     *\/","attributes":[],"arguments":[{"name":"$targetPath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getError":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the error associated with the uploaded file.\n     *\n     * The return value MUST be one of PHP's UPLOAD_ERR_XXX constants.\n     *\n     * If the file was uploaded successfully, this method MUST return\n     * UPLOAD_ERR_OK.\n     *\n     * Implementations SHOULD return the value stored in the \"error\" key of\n     * the file in the $_FILES array.\n     *\n     * @see http:\/\/php.net\/manual\/en\/features.file-upload.errors.php\n     *\n     * @return int\n     *\/","attributes":[]},"getClientFilename":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the filename sent by the client.\n     *\n     * Do not trust the value returned by this method. A client could send\n     * a malicious filename with the intention to corrupt or hack your\n     * application.\n     *\n     * Implementations SHOULD return the value stored in the \"name\" key of\n     * the file in the $_FILES array.\n     *\n     * @return string|null\n     *\/","attributes":[]},"getClientMediaType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the media type sent by the client.\n     *\n     * Do not trust the value returned by this method. A client could send\n     * a malicious media type with the intention to corrupt or hack your\n     * application.\n     *\n     * Implementations SHOULD return the value stored in the \"type\" key of\n     * the file in the $_FILES array.\n     *\n     * @return string|null\n     *\/","attributes":[]},"getSize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve the file size.\n     *\n     * Implementations SHOULD return the value stored in the \"size\" key of\n     * the file in the $_FILES array if available, as PHP calculates this based\n     * on the actual size transmitted.\n     *\n     * @return int|null\n     *\/","attributes":[]}}},"StatusCode":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"constants":{"HTTP_CONTINUE":{"value":100,"visibility":"","phpdoc":"","attributes":[]},"HTTP_PROCESSING":{"value":102,"visibility":"","phpdoc":"","attributes":[]},"HTTP_SWITCHING_PROTOCOLS":{"value":101,"visibility":"","phpdoc":"","attributes":[]},"HTTP_CREATED":{"value":201,"visibility":"","phpdoc":"","attributes":[]},"HTTP_OK":{"value":200,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NONAUTHORITATIVE_INFORMATION":{"value":203,"visibility":"","phpdoc":"","attributes":[]},"HTTP_ACCEPTED":{"value":202,"visibility":"","phpdoc":"","attributes":[]},"HTTP_RESET_CONTENT":{"value":205,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NO_CONTENT":{"value":204,"visibility":"","phpdoc":"","attributes":[]},"HTTP_MULTI_STATUS":{"value":207,"visibility":"","phpdoc":"","attributes":[]},"HTTP_PARTIAL_CONTENT":{"value":206,"visibility":"","phpdoc":"","attributes":[]},"HTTP_ALREADY_REPORTED":{"value":208,"visibility":"","phpdoc":"","attributes":[]},"HTTP_IM_USED":{"value":226,"visibility":"","phpdoc":"","attributes":[]},"HTTP_MULTIPLE_CHOICES":{"value":300,"visibility":"","phpdoc":"","attributes":[]},"HTTP_MOVED_PERMANENTLY":{"value":301,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NOT_EXTENDED":{"value":510,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NETWORK_AUTHENTICATION_REQUIRED":{"value":511,"visibility":"","phpdoc":"","attributes":[]},"HTTP_INSUFFICIENT_STORAGE":{"value":507,"visibility":"","phpdoc":"","attributes":[]},"HTTP_LOOP_DETECTED":{"value":508,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NETWORK_CONNECTION_TIMEOUT_ERROR":{"value":599,"visibility":"","phpdoc":"","attributes":[]},"HTTP_INTERNAL_SERVER_ERROR":{"value":500,"visibility":"","phpdoc":"","attributes":[]},"HTTP_CLIENT_CLOSED_REQUEST":{"value":499,"visibility":"","phpdoc":"","attributes":[]},"HTTP_BAD_GATEWAY":{"value":502,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NOT_IMPLEMENTED":{"value":501,"visibility":"","phpdoc":"","attributes":[]},"HTTP_GATEWAY_TIMEOUT":{"value":504,"visibility":"","phpdoc":"","attributes":[]},"HTTP_SERVICE_UNAVAILABLE":{"value":503,"visibility":"","phpdoc":"","attributes":[]},"HTTP_VARIANT_ALSO_NEGOTIATES":{"value":506,"visibility":"","phpdoc":"","attributes":[]},"HTTP_VERSION_NOT_SUPPORTED":{"value":505,"visibility":"","phpdoc":"","attributes":[]},"HTTP_FAILED_DEPENDENCY":{"value":424,"visibility":"","phpdoc":"","attributes":[]},"HTTP_LOCKED":{"value":423,"visibility":"","phpdoc":"","attributes":[]},"HTTP_PRECONDITION_REQUIRED":{"value":428,"visibility":"","phpdoc":"","attributes":[]},"HTTP_UPGRADE_REQUIRED":{"value":426,"visibility":"","phpdoc":"","attributes":[]},"HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE":{"value":431,"visibility":"","phpdoc":"","attributes":[]},"HTTP_TOO_MANY_REQUESTS":{"value":429,"visibility":"","phpdoc":"","attributes":[]},"HTTP_UNAVAILABLE_FOR_LEGAL_REASONS":{"value":451,"visibility":"","phpdoc":"","attributes":[]},"HTTP_CONNECTION_CLOSED_WITHOUT_RESPONSE":{"value":444,"visibility":"","phpdoc":"","attributes":[]},"HTTP_REQUEST_ENTITY_TOO_LARGE":{"value":413,"visibility":"","phpdoc":"","attributes":[]},"HTTP_REQUEST_URI_TOO_LONG":{"value":414,"visibility":"","phpdoc":"","attributes":[]},"HTTP_UNSUPPORTED_MEDIA_TYPE":{"value":415,"visibility":"","phpdoc":"","attributes":[]},"HTTP_REQUESTED_RANGE_NOT_SATISFIABLE":{"value":416,"visibility":"","phpdoc":"","attributes":[]},"HTTP_EXPECTATION_FAILED":{"value":417,"visibility":"","phpdoc":"","attributes":[]},"HTTP_IM_A_TEAPOT":{"value":418,"visibility":"","phpdoc":"","attributes":[]},"HTTP_MISDIRECTED_REQUEST":{"value":421,"visibility":"","phpdoc":"","attributes":[]},"HTTP_UNPROCESSABLE_ENTITY":{"value":422,"visibility":"","phpdoc":"","attributes":[]},"HTTP_METHOD_NOT_ALLOWED":{"value":405,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NOT_ACCEPTABLE":{"value":406,"visibility":"","phpdoc":"","attributes":[]},"HTTP_PROXY_AUTHENTICATION_REQUIRED":{"value":407,"visibility":"","phpdoc":"","attributes":[]},"HTTP_REQUEST_TIMEOUT":{"value":408,"visibility":"","phpdoc":"","attributes":[]},"HTTP_CONFLICT":{"value":409,"visibility":"","phpdoc":"","attributes":[]},"HTTP_GONE":{"value":410,"visibility":"","phpdoc":"","attributes":[]},"HTTP_LENGTH_REQUIRED":{"value":411,"visibility":"","phpdoc":"","attributes":[]},"HTTP_PRECONDITION_FAILED":{"value":412,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NOT_FOUND":{"value":404,"visibility":"","phpdoc":"","attributes":[]},"HTTP_FORBIDDEN":{"value":403,"visibility":"","phpdoc":"","attributes":[]},"HTTP_PAYMENT_REQUIRED":{"value":402,"visibility":"","phpdoc":"","attributes":[]},"HTTP_UNAUTHORIZED":{"value":401,"visibility":"","phpdoc":"","attributes":[]},"HTTP_BAD_REQUEST":{"value":400,"visibility":"","phpdoc":"","attributes":[]},"HTTP_PERMANENT_REDIRECT":{"value":308,"visibility":"","phpdoc":"","attributes":[]},"HTTP_TEMPORARY_REDIRECT":{"value":307,"visibility":"","phpdoc":"","attributes":[]},"HTTP_UNUSED":{"value":306,"visibility":"","phpdoc":"","attributes":[]},"HTTP_USE_PROXY":{"value":305,"visibility":"","phpdoc":"","attributes":[]},"HTTP_NOT_MODIFIED":{"value":304,"visibility":"","phpdoc":"","attributes":[]},"HTTP_SEE_OTHER":{"value":303,"visibility":"","phpdoc":"","attributes":[]},"HTTP_FOUND":{"value":302,"visibility":"","phpdoc":"","attributes":[]}}},"Message":{"abstract":true,"final":false,"extends":"","implements":["\\psr\\http\\message\\messageinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Abstract message (base class for Request and Response)\n *\n * This class represents a general HTTP message. It provides common properties and methods for\n * the HTTP request and response, as defined in the PSR-7 MessageInterface.\n *\n * @link https:\/\/github.com\/php-fig\/http-message\/blob\/master\/src\/MessageInterface.php\n * @see \\Slim\\Http\\Request\n * @see \\Slim\\Http\\Response\n *\/","attributes":[],"php":false,"properties":{"$protocolVersion":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var string\n     *\/","attributes":[]},"$validProtocolVersions":{"value":"","visibility":"protected","static":true,"typehint":[""],"phpdoc":"\/**\n     * @var array\n     *\/","attributes":[]},"$headers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var HeadersInterface\n     *\/","attributes":[]},"$body":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var StreamInterface\n     *\/","attributes":[]}},"methods":{"__set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Disable magic setter to ensure immutability\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getProtocolVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieves the HTTP protocol version as a string.\n     *\n     * The string MUST contain only the HTTP version number (e.g., \"1.1\", \"1.0\").\n     *\n     * @return string\n     *\/","attributes":[]},"withProtocolVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified HTTP protocol version.\n     *\n     * The version string MUST contain only the HTTP version number (e.g.,\n     * \"1.1\", \"1.0\").\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new protocol version.\n     *\n     * @param string $version HTTP protocol version\n     *\n     * @return static\n     *\n     * @throws InvalidArgumentException if the http version is an invalid number\n     *\/","attributes":[],"arguments":[{"name":"$version","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getHeaders":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieves all message header values.\n     *\n     * Returns an associative array of the message's headers.\n     * Each key MUST be a header name, and each value MUST be an array of strings for that header.\n     *\n     * The keys represent the header name as it will be sent over the wire, and\n     * each value is an array of strings associated with the header.\n     *\n     *     \/\/ Represent the headers as a string\n     *     foreach ($message->getHeaders() as $name => $values) {\n     *         echo $name . \": \" . implode(\", \", $values);\n     *     }\n     *\n     *     \/\/ Emit headers iteratively:\n     *     foreach ($message->getHeaders() as $name => $values) {\n     *         foreach ($values as $value) {\n     *             header(sprintf('%s: %s', $name, $value), false);\n     *         }\n     *     }\n     *\n     * While header names are not case-sensitive, getHeaders() will preserve the\n     * exact case in which headers were originally specified.\n     *\n     * @return array\n     *\/","attributes":[]},"hasHeader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if a header exists by the given case-insensitive name.\n     *\n     * Returns true if any header names match the given header name using a case-insensitive string comparison.\n     * Returns false if no matching header name is found in the message.\n     *\n     * @param string $name Case-insensitive header field name.\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getHeader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieves a message header value by the given case-insensitive name.\n     *\n     * This method returns an array of all the header values of the given\n     * case-insensitive header name.\n     *\n     * If the header does not appear in the message, this method MUST return an\n     * empty array.\n     *\n     * @param string $name Case-insensitive header field name.\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getHeaderLine":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieves a comma-separated string of the values for a single header.\n     *\n     * This method returns a string of all of the header values of the given\n     * case-insensitive header name as a string concatenated together using\n     * a comma.\n     *\n     * NOTE: Not all header values may be appropriately represented using\n     * comma concatenation. For such headers, use getHeader() instead\n     * and supply your own delimiter when concatenating.\n     *\n     * If the header does not appear in the message, this method MUST return\n     * an empty string.\n     *\n     * @param string $name Case-insensitive header field name.\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"withHeader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the provided value replacing the specified header.\n     *\n     * While header names are case-insensitive, the casing of the header will\n     * be preserved by this function, and returned from getHeaders().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new and\/or updated header and value.\n     *\n     * @param string $name Case-insensitive header field name.\n     * @param string|string[] $value Header value(s).\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"withAddedHeader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified header appended with the given value.\n     *\n     * Existing values for the specified header will be maintained. The new\n     * value(s) will be appended to the existing list. If the header did not\n     * exist previously, it will be added.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new header and\/or value.\n     *\n     * @param string $name Case-insensitive header field name to add.\n     * @param string|string[] $value Header value(s).\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"withoutHeader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance without the specified header.\n     *\n     * Header resolution MUST be done without case-sensitivity.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that removes\n     * the named header.\n     *\n     * @param string $name Case-insensitive header field name to remove.\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getBody":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the body of the message.\n     *\n     * @return StreamInterface Returns the body as a stream.\n     *\/","attributes":[]},"withBody":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an instance with the specified message body.\n     *\n     * The body MUST be a StreamInterface object.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return a new instance that has the\n     * new body stream.\n     *\n     * @param StreamInterface $body Body.\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$body","reference":false,"typehint":["StreamInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"Environment":{"abstract":false,"final":false,"extends":"\\slim\\collection","implements":["\\slim\\interfaces\\http\\environmentinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class decouples the Slim application from the global PHP environment.\n * This is particularly useful for unit testing, but it also lets us create\n * custom sub-requests.\n *\/","attributes":[],"php":false,"methods":{"mock":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$settings","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]}}}}},"\\Slim\\Exception\\":{"classes":{"ContainerValueNotFoundException":{"abstract":false,"final":false,"extends":"\\runtimeexception","implements":["\\psr\\container\\notfoundexceptioninterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false},"ContainerException":{"abstract":false,"final":false,"extends":"\\invalidargumentexception","implements":["\\psr\\container\\containerexceptioninterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false},"NotFoundException":{"abstract":false,"final":false,"extends":"\\slim\\exception\\slimexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false},"InvalidMethodException":{"abstract":false,"final":false,"extends":"\\invalidargumentexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$request":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var ServerRequestInterface\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ServerRequestInterface $request\n     * @param string                 $method\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return ServerRequestInterface\n     *\/","attributes":[]}}},"MethodNotAllowedException":{"abstract":false,"final":false,"extends":"\\slim\\exception\\slimexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$allowedMethods":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var string[]\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ServerRequestInterface $request\n     * @param ResponseInterface      $response\n     * @param string[]               $allowedMethods\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$allowedMethods","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getAllowedMethods":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string[]\n     *\/","attributes":[]}}},"SlimException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$request":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var ServerRequestInterface\n     *\/","attributes":[]},"$response":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var ResponseInterface\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ServerRequestInterface $request\n     * @param ResponseInterface      $response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"getRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return ServerRequestInterface\n     *\/","attributes":[]},"getResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return ResponseInterface\n     *\/","attributes":[]}}}}},"\\Slim\\Handlers\\":{"classes":{"NotAllowed":{"abstract":false,"final":false,"extends":"\\slim\\handlers\\abstracthandler","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param  ServerRequestInterface $request  The most recent Request object\n     * @param  ResponseInterface      $response The most recent Response object\n     * @param  string[]               $methods  Allowed HTTP methods\n     *\n     * @return ResponseInterface\n     *\n     * @throws UnexpectedValueException\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$methods","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"renderPlainOptionsMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render plain message for OPTIONS response\n     *\n     * @param  string[] $methods\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"renderJsonNotAllowedMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render JSON not allowed message\n     *\n     * @param  string[] $methods\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"renderXmlNotAllowedMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render XML not allowed message\n     *\n     * @param  string[] $methods\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"renderHtmlNotAllowedMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render HTML not allowed message\n     *\n     * @param  string[] $methods\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"AbstractHandler":{"abstract":true,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$knownContentTypes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Known handled content types\n     *\n     * @var array\n     *\/","attributes":[]}},"methods":{"determineContentType":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine which content type we know about is wanted using `Accept` header\n     *\n     * Note: This method is a bare-bones implementation designed specifically for\n     * Slim's error handling requirements. Consider a fully-feature solution such\n     * as willdurand\/negotiation for any other situation.\n     *\n     * @param ServerRequestInterface $request\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"Error":{"abstract":false,"final":false,"extends":"\\slim\\handlers\\abstracterror","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ServerRequestInterface $request   The most recent Request object\n     * @param ResponseInterface      $response  The most recent Response object\n     * @param Exception              $exception The caught Exception object\n     *\n     * @return ResponseInterface\n     *\n     * @throws UnexpectedValueException\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$exception","reference":false,"typehint":["Exception"],"value":"","phpdoc":"","attributes":[]}]},"renderHtmlErrorMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render HTML error page\n     *\n     * @param  Exception $exception\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["Exception"],"value":"","phpdoc":"","attributes":[]}]},"renderHtmlException":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render exception as HTML.\n     *\n     * Provided for backwards compatibility; use renderHtmlExceptionOrError().\n     *\n     * @param Exception $exception\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["Exception"],"value":"","phpdoc":"","attributes":[]}]},"renderHtmlExceptionOrError":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render exception or error as HTML.\n     *\n     * @param Exception|\\Error $exception\n     *\n     * @return string\n     *\n     * @throws RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"renderJsonErrorMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render JSON error\n     *\n     * @param Exception $exception\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["Exception"],"value":"","phpdoc":"","attributes":[]}]},"renderXmlErrorMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render XML error\n     *\n     * @param Exception $exception\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["Exception"],"value":"","phpdoc":"","attributes":[]}]},"createCdataSection":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a CDATA section with the given content.\n     *\n     * @param  string $content\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"PhpError":{"abstract":false,"final":false,"extends":"\\slim\\handlers\\abstracterror","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ServerRequestInterface $request  The most recent Request object\n     * @param ResponseInterface      $response The most recent Response object\n     * @param Throwable              $error    The caught Throwable object\n     *\n     * @return ResponseInterface\n     *\n     * @throws UnexpectedValueException\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$error","reference":false,"typehint":["Throwable"],"value":"","phpdoc":"","attributes":[]}]},"renderHtmlErrorMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render HTML error page\n     *\n     * @param Throwable $error\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$error","reference":false,"typehint":["Throwable"],"value":"","phpdoc":"","attributes":[]}]},"renderHtmlError":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render error as HTML.\n     *\n     * @param Throwable $error\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$error","reference":false,"typehint":["Throwable"],"value":"","phpdoc":"","attributes":[]}]},"renderJsonErrorMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render JSON error\n     *\n     * @param Throwable $error\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$error","reference":false,"typehint":["Throwable"],"value":"","phpdoc":"","attributes":[]}]},"renderXmlErrorMessage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render XML error\n     *\n     * @param Throwable $error\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$error","reference":false,"typehint":["Throwable"],"value":"","phpdoc":"","attributes":[]}]},"createCdataSection":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a CDATA section with the given content.\n     *\n     * @param  string $content\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"AbstractError":{"abstract":true,"final":false,"extends":"\\slim\\handlers\\abstracthandler","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$displayErrorDetails":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var bool\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param bool $displayErrorDetails Set to true to display full details\n     *\/","attributes":[],"arguments":[{"name":"$displayErrorDetails","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"writeToErrorLog":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Write to the error log if displayErrorDetails is false\n     *\n     * @param Exception|Throwable $throwable\n     *\n     * @return void\n     *\/","attributes":[],"arguments":[{"name":"$throwable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"renderThrowableAsText":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render error as Text.\n     *\n     * @param Exception|Throwable $throwable\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$throwable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"logError":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Wraps the error_log function so that this can be easily tested\n     *\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"NotFound":{"abstract":false,"final":false,"extends":"\\slim\\handlers\\abstracthandler","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param  ServerRequestInterface $request  The most recent Request object\n     * @param  ResponseInterface      $response The most recent Response object\n     *\n     * @return ResponseInterface\n     *\n     * @throws UnexpectedValueException\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"renderPlainNotFoundOutput":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render plain not found message\n     *\n     * @return string\n     *\/","attributes":[]},"renderJsonNotFoundOutput":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a response for application\/json content not found\n     *\n     * @return string\n     *\/","attributes":[]},"renderXmlNotFoundOutput":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a response for xml content not found\n     *\n     * @return string\n     *\/","attributes":[]},"renderHtmlNotFoundOutput":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a response for text\/html content not found\n     *\n     * @param  ServerRequestInterface $request The most recent Request object\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Slim\\Handlers\\Strategies\\":{"classes":{"RequestResponse":{"abstract":false,"final":false,"extends":"","implements":["\\slim\\interfaces\\invocationstrategyinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Default route callback strategy with route parameters as an array of arguments.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Invoke a route callable with request, response, and all route parameters\n     * as an array of arguments.\n     *\n     * @param array|callable         $callable\n     * @param ServerRequestInterface $request\n     * @param ResponseInterface      $response\n     * @param array                  $routeArguments\n     *\n     * @return ResponseInterface\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$routeArguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"RequestResponseArgs":{"abstract":false,"final":false,"extends":"","implements":["\\slim\\interfaces\\invocationstrategyinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Route callback strategy with route parameters as individual arguments.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Invoke a route callable with request, response and all route parameters\n     * as individual arguments.\n     *\n     * @param array|callable         $callable\n     * @param ServerRequestInterface $request\n     * @param ResponseInterface      $response\n     * @param array                  $routeArguments\n     *\n     * @return ResponseInterface\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$routeArguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Slim\\Interfaces\\":{"interfaces":{"InvocationStrategyInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param callable               $callable The callable to invoke using the strategy.\n     * @param ServerRequestInterface $request The request object.\n     * @param ResponseInterface      $response The response object.\n     * @param array                  $routeArguments The route's placeholder arguments\n     *\n     * @return ResponseInterface|string\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$routeArguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"RouteGroupInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"getPattern":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get route pattern\n     *\n     * @return string\n     *\/","attributes":[]},"add":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prepend middleware to the group middleware collection\n     *\n     * @param callable|string $callable The callback routine\n     *\n     * @return RouteGroupInterface\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Execute route group callable in the context of the Slim App\n     *\n     * This method invokes the route group object's callable, collecting\n     * nested route objects\n     *\n     * @param App $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["App"],"value":"","phpdoc":"","attributes":[]}]}}},"RouterInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"constants":{"DISPATCH_STATUS":{"value":0,"visibility":"","phpdoc":"\/**\n     * Route result constants\n     *\/","attributes":[]},"ALLOWED_METHODS":{"value":1,"visibility":"","phpdoc":"","attributes":[]}},"methods":{"map":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add route\n     *\n     * @param string[] $methods Array of HTTP methods\n     * @param string   $pattern The route pattern\n     * @param callable $handler The route callable\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$handler","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"dispatch":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dispatch router for HTTP request\n     *\n     * @param  ServerRequestInterface $request The current HTTP request object\n     *\n     * @return array\n     *\n     * @link   https:\/\/github.com\/nikic\/FastRoute\/blob\/master\/src\/Dispatcher.php\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]}]},"pushGroup":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a route group to the array\n     *\n     * @param string   $pattern The group pattern\n     * @param callable $callable A group callable\n     *\n     * @return RouteGroupInterface\n     *\/","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"popGroup":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Removes the last route group from the array\n     *\n     * @return bool True if successful, else False\n     *\/","attributes":[]},"getNamedRoute":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get named route object\n     *\n     * @param string $name        Route name\n     *\n     * @return RouteInterface\n     *\n     * @throws RuntimeException   If named route does not exist\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"lookupRoute":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $identifier\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$identifier","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"relativePathFor":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the path for a named route excluding the base path\n     *\n     * @param string $name        Route name\n     * @param array  $data        Named argument replacement data\n     * @param array  $queryParams Optional query string parameters\n     *\n     * @return string\n     *\n     * @throws RuntimeException         If named route does not exist\n     * @throws InvalidArgumentException If required data not provided\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$queryParams","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"pathFor":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the path for a named route including the base path\n     *\n     * @param string $name        Route name\n     * @param array  $data        Named argument replacement data\n     * @param array  $queryParams Optional query string parameters\n     *\n     * @return string\n     *\n     * @throws RuntimeException         If named route does not exist\n     * @throws InvalidArgumentException If required data not provided\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$queryParams","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"RouteInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"getArgument":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve a specific route argument\n     *\n     * @param string      $name\n     * @param string|null $default\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getArguments":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get route arguments\n     *\n     * @return string[]\n     *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get route name\n     *\n     * @return null|string\n     *\/","attributes":[]},"getPattern":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get route pattern\n     *\n     * @return string\n     *\/","attributes":[]},"setArgument":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a route argument\n     *\n     * @param string $name\n     * @param string $value\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setArguments":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Replace route arguments\n     *\n     * @param string[] $arguments\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$arguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setOutputBuffering":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set output buffering mode\n     *\n     * One of: false, 'prepend' or 'append'\n     *\n     * @param boolean|string $mode\n     *\n     * @throws InvalidArgumentException If an unknown buffering mode is specified\n     *\/","attributes":[],"arguments":[{"name":"$mode","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set route name\n     *\n     * @param string $name\n     *\n     * @return RouteInterface\n     *\n     * @throws InvalidArgumentException if the route name is not a string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add middleware\n     *\n     * This method prepends new middleware to the route's middleware stack.\n     *\n     * @param callable|string $callable The callback routine\n     *\n     * @return RouteInterface\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"prepare":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prepare the route for use\n     *\n     * @param ServerRequestInterface $request\n     * @param array                  $arguments\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$arguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run route\n     *\n     * This method traverses the middleware stack, including the route's callable\n     * and captures the resultant HTTP response object. It then sends the response\n     * back to the Application.\n     *\n     * @param ServerRequestInterface $request\n     * @param ResponseInterface      $response\n     *\n     * @return ResponseInterface\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]},"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dispatch route callable against current Request and Response objects\n     *\n     * This method invokes the route object's callable. If middleware is\n     * registered for the route, each callable middleware is invoked in\n     * the order specified.\n     *\n     * @param ServerRequestInterface $request  The current Request object\n     * @param ResponseInterface      $response The current Response object\n     *\n     * @return ResponseInterface\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["ServerRequestInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["ResponseInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"CallableResolverInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"resolve":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Invoke the resolved callable.\n     *\n     * @param callable|string $toResolve\n     *\n     * @return callable\n     *\n     * @throws RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$toResolve","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"CollectionInterface":{"abstract":false,"final":false,"extends":"\\iteratoraggregate","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"set":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set collection item\n     *\n     * @param string $key   The data key\n     * @param mixed  $value The data value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get collection item for key\n     *\n     * @param string $key     The data key\n     * @param mixed  $default The default value to return if data key does not exist\n     *\n     * @return mixed The key's value, or the default value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"replace":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add item to collection, replacing existing items with the same data key\n     *\n     * @param array $items Key-value array of data to append to this collection\n     *\/","attributes":[],"arguments":[{"name":"$items","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"all":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get all items in collection\n     *\n     * @return array The collection's source data\n     *\/","attributes":[]},"has":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Does this collection have a given key?\n     *\n     * @param string $key The data key\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"remove":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove item from collection\n     *\n     * @param string $key The data key\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"clear":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove all items from collection\n     *\/","attributes":[]}}}}},"\\Slim\\Interfaces\\Http\\":{"interfaces":{"EnvironmentInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"mock":{"visibility":"public","static":true,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create mock environment\n     *\n     * @param  array $settings Array of custom environment keys and values\n     *\n     * @return static\n     *\/","attributes":[],"arguments":[{"name":"$settings","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"HeadersInterface":{"abstract":false,"final":false,"extends":"\\slim\\interfaces\\collectioninterface","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"add":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add HTTP header value\n     *\n     * This method appends a header value. Unlike the set() method,\n     * this method _appends_ this new value to any values\n     * that already exist for this header name.\n     *\n     * @param string          $key   The case-insensitive header name\n     * @param string|string[] $value The new header value(s)\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"normalizeKey":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Normalize header name\n     *\n     * This method transforms header names into a\n     * normalized form. This is how we enable case-insensitive\n     * header names in the other methods in this class.\n     *\n     * @param  string $key The case-insensitive header name\n     *\n     * @return string Normalized header name\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"CookiesInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"get":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get request cookie\n     *\n     * @param  string $name    Cookie name\n     * @param  mixed  $default Cookie default value\n     *\n     * @return mixed Cookie value if present, else default\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set response cookie\n     *\n     * @param string       $name  Cookie name\n     * @param string|array $value Cookie value, or cookie properties\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"toHeaders":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert to array of `Set-Cookie` headers\n     *\n     * @return string[]\n     *\/","attributes":[]},"parseHeader":{"visibility":"public","static":true,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse HTTP request `Cookie:` header and extract into a PHP associative array.\n     *\n     * @param  string $header The raw HTTP request `Cookie:` header\n     *\n     * @return array Associative array of cookie names and values\n     *\n     * @throws InvalidArgumentException if the cookie data cannot be parsed\n     *\/","attributes":[],"arguments":[{"name":"$header","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}}}}