{"headers":{"generation":"2020-11-07T20:16:45+00:00","php":"7.4","exakat_version":"2.2.0","exakat_build":"1167","vcs_url":"https:\/\/github.com\/bolt\/bolt.git","vcs_branch":"3.5","vcs_revision":"5e4e7d6eb5a79ee26537246bea62aa49a9d20afc","code_last_commit":""},"versions":{"\\":[],"\\Bolt\\":{"classes":{"Application":{"abstract":false,"final":false,"extends":"\\silex\\application","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"constants":{"DEFAULT_LOCALE":{"value":"'en_GB'","visibility":"","phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use $app['locale_fallbacks'] instead.\n     *\/","attributes":[]}},"properties":{"$initialized":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $values\n     *\/","attributes":[],"arguments":[{"name":"$values","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"null","phpdoc":"","attributes":[]}]},"initConfig":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"initSession":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"initialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"initLogger":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialize the loggers.\n     *\/","attributes":[]},"initDatabase":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialize the database providers.\n     *\/","attributes":[]},"checkDatabaseConnection":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"initRendering":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialize the rendering providers.\n     *\/","attributes":[]},"initDebugging":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set up the debugging if required.\n     *\/","attributes":[]},"initProfiler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set up the profilers for the toolbar.\n     *\/","attributes":[]},"initLocale":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"initProviders":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"initExtensions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"mount":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$controllers","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"initMountpoints":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use {@see ControllerEvents::MOUNT} instead.\n     *\/","attributes":[]},"beforeHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"afterHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"errorHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"__isset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $name\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the Bolt version string.\n     *\n     * @return string\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *             Use parameters in application instead\n     *\/","attributes":[]},"generatePath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generates a path from the given parameters.\n     *\n     * @param string $route      The name of the route\n     * @param array  $parameters An array of parameters\n     *\n     * @return string The generated path\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *             Use {@see \\Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface} instead.\n     *\/","attributes":[],"arguments":[{"name":"$route","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"Cache":{"abstract":false,"final":false,"extends":"\\doctrine\\common\\cache\\filesystemcache","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Simple, file based cache for volatile data. Useful for storing non-vital\n * information like feeds, and other stuff that can be recovered easily.\n *\n * @author Bob den Otter <bob@twokings.nl>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"DEFAULT_MAX_AGE":{"value":600,"visibility":"","phpdoc":"\/** Max cache age. Default 10 minutes. *\/","attributes":[]},"EXTENSION":{"value":"'.data'","visibility":"","phpdoc":"\/** Default cache file extension. *\/","attributes":[]}},"properties":{"$filesystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var CompositeFilesystemInterface *\/","attributes":[]},"$umask":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Cache constructor.\n     *\n     * @param string                       $directory\n     * @param string                       $extension\n     * @param int                          $umask\n     * @param CompositeFilesystemInterface $filesystem\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$extension","reference":false,"typehint":[""],"value":"self::EXTENSION","phpdoc":"","attributes":[]},{"name":"$umask","reference":false,"typehint":[""],"value":2,"phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["CompositeFilesystemInterface"],"value":"null","phpdoc":"","attributes":[]}]},"clearCache":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use flushAll() instead.\n     *\/","attributes":[]},"doFlush":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clear the cache. Both the doctrine FilesystemCache, as well as twig and thumbnail temp files.\n     *\n     * @return bool\n     *\/","attributes":[]},"flushDirectory":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function for doFlush().\n     *\n     * @param DirectoryInterface $directory\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]}]},"createPathIfNeeded":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create base path path if needed.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"DeepDiff":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @deprecated since 3.3, to be removed in 4.0.\n *\/","attributes":[],"php":false,"methods":{"diff":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated since 3.3, to be removed in 4.0.\n     *\n     * @param array $a\n     * @param array $b\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$a","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$b","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Library":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class for Bolt's generic library functions.\n *\n * @deprecated Deprecated since 3.0, to be removed in 4.0.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"formatFilesize":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Format a filesize like '10.3 KiB' or '2.5 MiB'.\n     *\n     * @param int $size\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$size","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"filesizeToBytes":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert a size string, such as 5M to bytes.\n     *\n     * @param string $size\n     *\n     * @return float\n     *\/","attributes":[],"arguments":[{"name":"$size","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getExtension":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the extension (if any) of a filename.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $filename\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"safeFilename":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Encodes a filename, for use in thumbnails, magnific popup, etc.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $filename\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"path":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Simple wrapper for $app['url_generator']->generate().\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $path\n     * @param array  $param\n     * @param string $add\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$param","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$add","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"redirect":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Simple wrapper for $app->redirect($app['url_generator']->generate());.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $path\n     * @param array  $param\n     * @param string $add\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$param","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$add","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"simpleredirect":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a simple redirect to a page \/ path.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $path\n     * @param bool   $abort\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$abort","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"smartUnserialize":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Leniently decode a serialized compound data structure, detecting whether\n     * it's dealing with JSON-encoded data or a PHP-serialized string.\n     *\n     * @param string $str\n     * @param bool   $assoc\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$assoc","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]}}},"Omnisearch":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Simple search implementation for the Bolt backend.\n *\n * TODO:\n * - permissions\n * - a config.yml for search options\n *\n * @author Xiao-HuTai, xiao@twokings.nl\n *\/","attributes":[],"php":false,"constants":{"OMNISEARCH_LANDINGPAGE":{"value":99999,"visibility":"","phpdoc":"","attributes":[]},"OMNISEARCH_FILE":{"value":1000,"visibility":"","phpdoc":"","attributes":[]},"OMNISEARCH_CONTENT":{"value":2000,"visibility":"","phpdoc":"","attributes":[]},"OMNISEARCH_EXTENSION":{"value":3000,"visibility":"","phpdoc":"","attributes":[]},"OMNISEARCH_MENUITEM":{"value":5000,"visibility":"","phpdoc":"","attributes":[]},"OMNISEARCH_CONTENTTYPE":{"value":9999,"visibility":"","phpdoc":"","attributes":[]}},"properties":{"$showNewContentType":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showViewContentType":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showConfiguration":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showMaintenance":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showExtensions":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showFiles":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showRecords":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showLandingpage":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$data":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]}]},"initialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"initContentTypes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"initMenuitems":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"initExtensions":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Menu\\MenuEntry $extension *\/","attributes":[]},"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"query":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$withRecord","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"find":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find in files.\n     *\n     * @param string      $query\n     * @param string      $path\n     * @param string      $name\n     * @param bool|string $contains\n     * @param int         $priority\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"'theme'","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"'*.twig'","phpdoc":"","attributes":[]},{"name":"$contains","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$priority","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"search":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Content[] $searchresults *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$withRecord","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"matches":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$sentence","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$word","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"compareOptions":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * OmnisearchOption implements Comparable.\n     *\n     * @param array $a\n     * @param array $b\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$a","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$b","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"generatePath":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper to generate a route.\n     *\n     * @param string $route\n     * @param array  $parameters\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$route","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"Bootstrap":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles creating the Application with .bolt.[yml|php] configuration.\n *\n * This does not handle autoloading.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"run":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create the application.\n     *\n     * @param string $rootPath\n     *\n     * @return Silex\\Application\n     *\/","attributes":[],"arguments":[{"name":"$rootPath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Config":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class for our config object.\n *\n * @deprecated Deprecated since 3.0, to be removed in 4.0.\n *\n * @author Bob den Otter, bob@twokings.nl\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Silex\\Application *\/","attributes":[]},"$data":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$defaultConfig":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$reservedFieldNames":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$cachetimestamp":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$fields":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/**\n     * Use {@see Config::getFields} instead.\n     * Will be made protected in Bolt 3.0.\n     *\n     * @var \\Bolt\\Storage\\Field\\Manager\n     *\/","attributes":[]},"$notify_update":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var bool @deprecated Deprecated since 3.2, to be removed in 4.0 *\/","attributes":[]},"$exceptions":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$cacheFile":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var JsonFile *\/","attributes":[]},"$passed":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Silex\\Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]}]},"getExceptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array|null\n     *\/","attributes":[]},"initialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"loadTheme":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if cache is valid for theme; if not invalidate and load it.\n     *\/","attributes":[]},"parseConfigYaml":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Read and parse a YAML configuration file.\n     *\n     * @param string             $filename  The name of the YAML file to read\n     * @param DirectoryInterface $directory The (optional) directory to the YAML file\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"null","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a config value, using a path.\n     *\n     * For example:\n     * $app['config']->set('general\/branding\/name', 'Bolt');\n     *\n     * @param string $path\n     * @param mixed  $value\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a config value, using a path.\n     *\n     * For example:\n     * $var = $config->get('general\/wysiwyg\/ck\/contentsCss');\n     *\n     * @param string            $path\n     * @param string|array|bool $default\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"doReplacements":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Replaces placeholders in config values %foo% will be resolved to $app['foo'] from the container.\n     *\n     * @internal This is only public so that it can be called from the service provider boot method.\n     * Do not access this directly since the API is liable to be changed at short notice.\n     *\n     * @param mixed $value\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Load the configuration from the various YML files.\n     *\n     * @return array\n     *\/","attributes":[]},"parseGeneral":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Read and parse the config.yml and config_local.yml configuration files.\n     *\n     * @return array\n     *\/","attributes":[]},"parseTaxonomy":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Read and parse the taxonomy.yml configuration file.\n     *\n     * @param array|null $taxonomies\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$taxonomies","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]}]},"parseContentTypes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Read and parse the contenttypes.yml configuration file.\n     *\n     * @param array $generalConfig\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$generalConfig","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"parseTheme":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Read and parse the current theme's config.yml configuration file.\n     *\n     * @param DirectoryInterface $themeDir\n     * @param array              $generalConfig\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$themeDir","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$generalConfig","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"parseTemplatefields":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method pulls the templatefields config from the theme config and appends it\n     * to the contenttypes configuration.\n     *\/","attributes":[]},"parseContentType":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse a single Contenttype configuration array.\n     *\n     * @param string $key\n     * @param array  $contentType\n     * @param array  $generalConfig\n     *\n     * @throws InvalidArgumentException\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$generalConfig","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseFieldsAndGroups":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse a Contenttype's filed and determine the grouping.\n     *\n     * @param array $fields\n     * @param array $generalConfig\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$generalConfig","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"parseFieldRepeaters":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Basic validation of repeater fields.\n     *\n     * @param array  $fields\n     * @param string $key\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseDatabase":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse and fine-tune the database configuration.\n     *\n     * @param array $options\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"parseSqliteOptions":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fine-tune Sqlite configuration parameters.\n     *\n     * @param array $config\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"parseConnectionParams":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parses params to valid connection parameters.\n     *\n     * - Defaults are merged into the params\n     * - Bolt keys are converted to Doctrine keys\n     * - Invalid keys are filtered out\n     *\n     * @param array|string $params\n     * @param array        $defaults\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$params","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$defaults","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"checkTaxonomy":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sanity check for slashes in in taxonomy slugs.\n     *\n     * @return bool\n     *\/","attributes":[]},"checkConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sanity checks for doubles in in contenttypes.\n     *\n     * @return bool\n     *\/","attributes":[]},"getFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * A getter to access the fields manager.\n     *\n     * @return \\Bolt\\Storage\\Field\\Manager\n     **\/","attributes":[]},"getDefaults":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Assume sensible defaults for a number of options.\n     *\/","attributes":[]},"getTwigPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build an array of Twig paths.\n     *\n     * @return string[]\n     *\/","attributes":[]},"setCKPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.3, to be removed in 4.0.\n     *\/","attributes":[]},"loadCache":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attempt to load cached configuration files.\n     *\n     * @throws RuntimeException\n     *\n     * @return array|null\n     *\/","attributes":[]},"isCacheValid":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Filesystem\\Filesystem $configFs *\/","attributes":[]},"isThemeCacheValid":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the cache is still valid with theme file as well.\n     *\n     * @return bool\n     *\/","attributes":[]},"invalidateCache":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Invalidate (remove) the cache file.\n     *\/","attributes":[]},"cacheConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @internal Do not use\n     *\n     * @param bool $force\n     *\/","attributes":[],"arguments":[{"name":"$force","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"saveCache":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.2, to be removed in 4.0. Now handled in a listener.\n     *\/","attributes":[]},"checkValidCache":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.2, to be removed in 4.0.\n     *\/","attributes":[]},"getTimestamp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a timestamp, corrected to the timezone.\n     *\n     * @param mixed $when\n     *\n     * @return string Timestamp\n     *\/","attributes":[],"arguments":[{"name":"$when","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCurrentTimestamp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the current timestamp, corrected to the timezone.\n     *\n     * @return string Current timestamp\n     *\/","attributes":[]},"getWhichEnd":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Use {@see Zone} instead with a {@see Request}.\n     *\n     * Going forward, decisions determined by current request\n     * should be done in an app or route middleware.\n     * Application should be setup agnostic to the current request.\n     *\n     * Route middlewares apply only to a certain route or group of routes.\n     * See {@see \\Bolt\\Controller\\Async\\AsyncBase::before} for an example.\n     *\n     * App middlewares apply to all routes.\n     * See classes in \\Bolt\\EventListener for examples of these.\n     * These middlewares could also be filtered by checking for Zone inside of listener.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @return string\n     *\/","attributes":[]},"determineZone":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\EventListener\\ZoneGuesser $guesser *\/","attributes":[]}}},"Users":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class to handle things dealing with users.\n *\n * @deprecated Deprecated since 3.0, to be removed in 4.0.\n *\/","attributes":[],"php":false,"properties":{"$users":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @internal Visibility will be changed to 'private' for these two in Bolt 3.0 *\/","attributes":[]},"$currentuser":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$repository":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Repository\\UsersRepository *\/","attributes":[]},"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application $app *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Silex\\Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]}]},"getRepository":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Repository\\UsersRepository\n     *\/","attributes":[]},"saveUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Save changes to a user to the database. (re)hashing the password, if needed.\n     *\n     * @param Entity\\Users|array $user\n     *\n     * @return int the number of affected rows\n     *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isValidSession":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"checkValidSession":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"getAntiCSRFToken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"checkAntiCSRFToken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"getActiveSessions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"deleteUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove a user from the database.\n     *\n     * @param int $id\n     *\n     * @return int the number of affected rows\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getEmptyUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a stub for a new\/empty user.\n     *\n     * @return array\n     *\/","attributes":[]},"getUsers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array with the current users.\n     *\n     * @return array[]\n     *\/","attributes":[]},"hasUsers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Test to see if there are users in the user table.\n     *\n     * @return int\n     *\/","attributes":[]},"getUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a user, specified by ID, username or email address.\n     *\n     * @param int|string $userId\n     *\n     * @return array|false\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCurrentUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the current user as an array.\n     *\n     * @return array\n     *\/","attributes":[]},"getCurrentUserProperty":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the current user's property.\n     *\n     * @param string $property\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$property","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCurrentUsername":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the username of the current user.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @return string\n     *\/","attributes":[]},"isEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check a user's enable status.\n     *\n     * @param int|bool $id User ID, or false for current user\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"setEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Enable or disable a user, specified by id.\n     *\n     * @param int|string $id\n     * @param bool|int   $enabled\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$enabled","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"hasRole":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a certain user has a specific role.\n     *\n     * @param string|int $id\n     * @param string     $role\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$role","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addRole":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a certain role from a specific user.\n     *\n     * @param string|int $id\n     * @param string     $role\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$role","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"removeRole":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove a certain role from a specific user.\n     *\n     * @param string|int $id\n     * @param string     $role\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$role","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"filterManipulatableRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Ensure changes to the user's roles match what the current user has\n     * permissions to manipulate.\n     *\n     * @param string|int $id       User ID\n     * @param array      $newRoles Roles from form submission\n     *\n     * @return string[] The user's roles with the allowed changes\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$newRoles","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"checkForRoot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check for a user with the 'root' role.\n     *\n     * There should always be at least one If there isn't we promote the current\n     * user.\n     *\n     * @return bool\n     *\/","attributes":[]},"isAllowed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Runs a permission check. Permissions are encoded as strings, where\n     * the ':' character acts as a separator for dynamic parts and\n     * sub-permissions.\n     *\n     * Apart from the route-based rules defined in permissions.yml, the\n     * following special cases are available:\n     *\n     * \"overview:$contenttype\" - view the overview for the content type. Alias\n     *                           for \"contenttype:$contenttype:view\".\n     * \"contenttype:$contenttype\",\n     * \"contenttype:$contenttype:view\",\n     * \"contenttype:$contenttype:view:$id\" - View any item or a particular item\n     *                                       of the specified content type.\n     * \"contenttype:$contenttype:edit\",\n     * \"contenttype:$contenttype:edit:$id\" - Edit any item or a particular item\n     *                                       of the specified content type.\n     * \"contenttype:$contenttype:create\" - Create a new item of the specified\n     *                                     content type. (It doesn't make sense\n     *                                     to provide this permission on a\n     *                                     per-item basis, for obvious reasons)\n     * \"contenttype:$contenttype:change-ownership\",\n     * \"contenttype:$contenttype:change-ownership:$id\" - Change the ownership\n     *                                of the specified content type or item.\n     *\n     * @param string $what        the desired permission, as elaborated upon above\n     * @param string $contenttype\n     * @param int    $contentid\n     *\n     * @return bool TRUE if the permission is granted, FALSE if denied\n     *\/","attributes":[],"arguments":[{"name":"$what","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"isContentStatusTransitionAllowed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check to see if the current user can change the status on the record.\n     *\n     * @param string $fromStatus\n     * @param string $toStatus\n     * @param string $contenttype\n     * @param string $contentid\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$fromStatus","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$toStatus","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"canonicalizeFieldValue":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a correctly canonicalized value for a field, depending on its name.\n     *\n     * @param string $fieldname\n     * @param string $fieldvalue\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$fieldname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldvalue","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkAvailability":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a certain field with a certain value doesn't exist already.\n     * Depending on the field type, different pre-massaging of the compared\n     * values are applied, because what constitutes 'equal' for the purpose\n     * of this filtering depends on the field type.\n     *\n     * @param string $fieldname\n     * @param string $value\n     * @param int    $currentid\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$fieldname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$currentid","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"updateUserLogin":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Cron":{"abstract":false,"final":false,"extends":"\\symfony\\component\\eventdispatcher\\event","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Simple cron dispatch class for Bolt.\n *\n * To create a listener you need to something similar in your class:\n *      use Bolt\\Events\\CronEvents;\n *      $this->app['dispatcher']->addListener(CronEvents::CRON_INTERVAL, [$this, 'myJobCallbackMethod']);\n *\n * CRON_INTERVAL should be replace with one of the following:\n *      * CRON_HOURLY\n *      * CRON_DAILY\n *      * CRON_WEEKLY\n *      * CRON_MONTHLY\n *      * CRON_YEARLY\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$lastruns":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$repository":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Repository\\CronRepository *\/","attributes":[]},"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]},"$output":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Symfony\\Component\\Console\\Output\\OutputInterface *\/","attributes":[]},"$param":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array Passed in console paramters. *\/","attributes":[]},"$runtime":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime The start of the execution time for this cron instance. *\/","attributes":[]},"$cronHour":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$jobs":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array The next elegible run time for each interim. *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Silex\\Application $app\n     * @param OutputInterface   $output\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"null","phpdoc":"","attributes":[]}]},"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run the jobs.\n     *\n     * @param array $param\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$param","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"executeSingle":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run a single cron dispatcher.\n     *\n     * @param CronEvent $event\n     * @param string    $interimName\n     * @param array     $data\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["CronEvent"],"value":"","phpdoc":"","attributes":[]},{"name":"$interimName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"isExecutable":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Test whether or not to call dispatcher.\n     *\n     * @param string $interimName The cron event name\n     *\n     * @return bool Dispatch event or not\n     *\/","attributes":[],"arguments":[{"name":"$interimName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getScheduleThreshold":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get our configured hour and convert it to UNIX time.\n     *\/","attributes":[]},"getRunTimes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Query table for last run time of each interim.\n     *\/","attributes":[]},"getNextRunTime":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the next run time for a given interim.\n     *\n     * @param string                    $interimName The interim; CRON_HOURLY, CRON_DAILY, CRON_WEEKLY, CRON_MONTHLY or CRON_YEARLY\n     * @param \\Bolt\\Storage\\Entity\\Cron $runEntity   The last execution time of the interim\n     *\n     * @return \\DateTime\n     *\/","attributes":[],"arguments":[{"name":"$interimName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$runEntity","reference":false,"typehint":["Entity\\Cron"],"value":"","phpdoc":"","attributes":[]}]},"notify":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If we're passed an OutputInterface, we're called from Nut and can notify\n     * the end user.\n     *\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"handleError":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Provide feedback on exceptions in cron jobs.\n     *\n     * @param \\Exception $e           The passed exception\n     * @param string     $interimName The cron handler name\n     *\/","attributes":[],"arguments":[{"name":"$e","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]},{"name":"$interimName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Version":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt's current version.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"VERSION":{"value":"'3.5.7'","visibility":"","phpdoc":"\/**\n     * Bolt's version constant.\n     *\n     * This should take the form of:\n     *   x.y.z [[alpha|beta|RC|patch] n]\n     *\n     * e.g. versions for:\n     *   Stable      \u2014 3.0.0\n     *   Development \u2014 3.1.0 alpha 1\n     *\/","attributes":[]}},"methods":{"isStable":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Whether this release is a stable one.\n     *\n     * @return bool\n     *\/","attributes":[]},"compare":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compares a semantic version (x.y.z) against Bolt's version, given a\n     * specified comparison operator.\n     *\n     * Note 1:\n     * Be sure to include the `.z` number in the version given, as\n     * omitting it can give inconsistent results.\n     *\n     * e.g. If the version of Bolt was '3.2.0' (or greater), then:\n     *     `Version::compare('3.2', '>=');`\n     * is NOT equal to, or greater than, Bolt's version.\n     *\n     * Note 2:\n     * Pre-release versions, such as 3.2.0-beta1, are considered lower\n     * than their final release counterparts (like 2.3.0). As you may notice,\n     * the difference being that Bolt '3.2.0-beta1' is considered LOWER than\n     * the `compare($version)` value of '3.2.0'.\n     *\n     * e.g. If the version of Bolt was '3.2.0 beta 1', then:\n     *     `Version::compare('3.2.0', '>=');`\n     * is equal to, or greater than, Bolt's version.\n     *\n     * @see http:\/\/semver.org\/ For an explanation on semantic versioning.\n     * @see http:\/\/php.net\/manual\/en\/function.version-compare.php#refsect1-function.version-compare-notes Notes on version_compare\n     *\n     * @param string $version  The version to compare.\n     * @param string $operator The comparison operator: <, <=, >, >=, ==, !=\n     *\n     * @return bool Whether the comparison succeeded.\n     *\/","attributes":[],"arguments":[{"name":"$version","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$operator","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"forComposer":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a version formatted for composer.\n     *\n     * @return string\n     *\/","attributes":[]},"name":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated since 3.0, to be removed in 4.0.\n     *\n     * @return string|null\n     *\/","attributes":[]},"__construct":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Must not be instantiated.\n     *\/","attributes":[]}}},"Stack":{"abstract":false,"final":false,"extends":"","implements":["\\countable","\\iteratoraggregate"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Stack for remembering the most recently used files for the current user.\n *\n * @author Bob den Otter, bob@twokings.nl\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"MAX_ITEMS":{"value":7,"visibility":"","phpdoc":"","attributes":[]}},"properties":{"$matcher":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Filesystem\\Matcher *\/","attributes":[]},"$users":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Users *\/","attributes":[]},"$session":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var SessionInterface *\/","attributes":[]},"$acceptedFileTypes":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]},"$files":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FileInterface[] *\/","attributes":[]},"$initialized":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Filesystem\\Matcher $matcher\n     * @param Users              $users\n     * @param SessionInterface   $session\n     * @param string[]           $acceptedFileTypes\n     *\/","attributes":[],"arguments":[{"name":"$matcher","reference":false,"typehint":["Filesystem\\Matcher"],"value":"","phpdoc":"","attributes":[]},{"name":"$users","reference":false,"typehint":["Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$session","reference":false,"typehint":["SessionInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$acceptedFileTypes","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a file to the stack.\n     *\n     * @param FileInterface|string $filename the file to add\n     * @param FileInterface|null   $removed  returns the removed file, if one was removed\n     *\n     * @throws FileNotStackableException if file is not stackable\n     *\n     * @return FileInterface if filename cannot be matched to filesystem\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$removed","reference":true,"typehint":["FileInterface"],"value":"null","phpdoc":"","attributes":[]}]},"delete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Delete a file from the stack.\n     *\n     * @param FileInterface|string $filename\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"contains":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a given file is present on the stack.\n     *\n     * @param FileInterface|string $filename\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isStackable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a given file can be added to the stack.\n     *\n     * Requirements:\n     * - File's extension is accepted\n     * - File can be matched to filesystem\n     * - File is not currently on the stack\n     *\n     * @param FileInterface|string $filename\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getList":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the list of files in the stack, filtered by type (if given).\n     *\n     * @param string[] $types Filter files by type. Valid types: \"image\", \"document\", \"other\"\n     *\n     * @return FileInterface[]\n     *\/","attributes":[],"arguments":[{"name":"$types","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getIterator":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"count":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"initialize":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialize file list for current user, either from session or database.\n     *\/","attributes":[]},"persist":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Persist the contents of the current stack to the session, as well as the database.\n     *\/","attributes":[]},"hydrateList":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Converts a list of paths to file objects.\n     *\n     * @param string[] $paths\n     *\n     * @return FileInterface[]\n     *\/","attributes":[],"arguments":[{"name":"$paths","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"persistableList":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the list of files as full paths.\n     *\n     * @return string[]\n     *\/","attributes":[]}}},"Render":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Wrapper around Twig's render() function. Handles the following responsibilities:.\n *\n * - Calls twig's render\n * - Stores a page in cache, if needed\n * - Store template (partials) in cache, if needed\n * - Fetches pages or template (partials) from cache\n *\n * @author Bob den Otter, bob@twokings.nl\n *\n * @deprecated Since 3.3, will be removed in 4.0.\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$safe":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set up the object.\n     *\n     * @param \\Silex\\Application $app\n     * @param bool               $safe\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$safe","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"__get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$property","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$property","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"render":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render a template, possibly store it in cache. Or, if applicable, return the cached result.\n     *\n     * @param string|string[] $templateName Template name(s)\n     * @param array           $context      Context variables\n     * @param array           $globals      Global variables\n     *\n     * @return TemplateResponse\n     *\n     * @deprecated Since 3.3, will be removed in 4.0.\n     *\/","attributes":[],"arguments":[{"name":"$templateName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$globals","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"hasTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Since 3.3, will be removed in 4.0.\n     *\n     * Check if the template exists.\n     *\n     * @param string $template the name of the template\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fetchCachedRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieve a fully cached page from cache.\n     *\n     * @deprecated Deprecated since 3.1, to be removed in 4.0. @see \\Silex\\HttpCache\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response|bool\n     *\/","attributes":[]},"cacheRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Store a fully rendered (and post-processed) page to cache.\n     *\n     * @deprecated Deprecated since 3.1, to be removed in 4.0. @see \\Silex\\HttpCache\n     *\n     * @param Response $response\n     *\/","attributes":[],"arguments":[{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"cacheDuration":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the duration (in seconds) for the cache.\n     *\n     * @deprecated Deprecated since 3.1, to be removed in 4.0. @see \\Silex\\HttpCache\n     *\n     * @return int\n     *\/","attributes":[]},"checkCacheConditions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the current conditions are suitable for caching.\n     *\n     * @deprecated Deprecated since 3.1, to be removed in 4.0. @see \\Silex\\HttpCache\n     *\n     * @param string $type\n     * @param bool   $checkoverride\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"'template'","phpdoc":"","attributes":[]},{"name":"$checkoverride","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]}}},"TemplateChooser":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A class for choosing whichever template should be used.\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Config $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"homepage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Choose a template for the homepage.\n     *\n     * @param \\Bolt\\Legacy\\Content|\\Bolt\\Legacy\\Content[] $content\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"record":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Choose a template for a single record page, e.g.:\n     * - '\/page\/about'\n     * - '\/entry\/lorum-ipsum'.\n     *\n     * Refactor note: Using a FQCN for the hint here as a `use` statement causes\n     * a fatal in the unit tests\u2026 'cause PHP and class_alias() versus namespaces.\n     *\n     * @param object $record\n     * @param array  $data\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$record","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"listing":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Select a template for listing pages.\n     *\n     * @param array $contenttype\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"taxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Select a template for taxonomy.\n     *\n     * @param string $taxonomyslug\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$taxonomyslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"search":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Select a search template.\n     *\n     * @return string[]\n     *\/","attributes":[]},"maintenance":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Select a template to use for the \"maintenance\" page.\n     *\n     * @return string[]\n     *\/","attributes":[]}}},"Pager":{"abstract":false,"final":false,"extends":"\\arrayobject","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class Pager.\n *\n * @author Rix Beck <rix@neologik.hu>\n *\n * @deprecated\n *\/","attributes":[],"php":false,"properties":{"$for":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$count":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$totalpages":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$current":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showing_from":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showing_to":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$link":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$array","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]}]},"makelink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Used for calling from template to build up right paginated URL link.\n     *\n     * @return string\n     *\/","attributes":[]},"makeParameterId":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$suffix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Configuration\\":{"classes":{"YamlUpdater":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Allows (simple) modifications of Bolt .yml files.\n *\n * @author Bob den Otter <bob@twokings.nl>\n **\/","attributes":[],"php":false,"properties":{"$file":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FileInterface *\/","attributes":[]},"$lines":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var MutableBag|string[] Contains a line of the file per index. *\/","attributes":[]},"$parsed":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var MutableBag the parsed yml file *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates an updater for the given file.\n     *\n     * @param FileInterface $file\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FileInterface $file\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a value for a key from the yml file.\n     *\n     * @param string $key\n     * @param bool   $throwEx throw exception if key is not found\n     *\n     * @return mixed|string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$throwEx","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"change":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Updates a single value with replacement for given key in yml file.\n     *\n     * @param string       $key\n     * @param string|array $value\n     * @param bool         $backup\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$backup","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"prepareValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.3, to be remove in v4.\n     *\n     * @param mixed $value\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"save":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Save our modified .yml file.\n     *\n     * @param bool $backup Back up the file before committing changes to it\n     *\n     * @throws IOException\n     * @throws ParseException\n     *\/","attributes":[],"arguments":[{"name":"$backup","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ConfigurationValueProxy":{"abstract":false,"final":false,"extends":"","implements":["\\arrayaccess","\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class ConfigurationProxy a simple wrapper that allows passing a pointer to the eventual\n * compiled and validated configuration.\n *\n * @internal\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$data":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var mixed|null *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$path":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$default":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var mixed|null *\/","attributes":[]},"$checked":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Config $config\n     * @param string $path\n     * @param mixed  $default\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     *{@inheritdoc}\n     *\/","attributes":[]},"getData":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the data of the loaded config.\n     *\n     * @return array\n     *\/","attributes":[]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     *{@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"initialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialize the configuration value.\n     *\/","attributes":[]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     *{@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"onKernelRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Kernel request event callback.\n     *\/","attributes":[]}}},"ComposerChecks":{"abstract":false,"final":false,"extends":"\\bolt\\configuration\\lowlevelchecks","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Inherits from default and adds some specific checks for composer installs.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n **\/","attributes":[],"php":false,"properties":{"$composerSuffix":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The constructor requires a resource manager object to perform checks against.\n     * This should ideally be typehinted to Bolt\\Configuration\\ResourceManager.\n     *\n     * @param ResourceManager $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"checkConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"checkCache":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"checkDatabase":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"checkPublicAssets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"checkSummary":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"checkDir":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Standard":{"abstract":false,"final":false,"extends":"\\bolt\\configuration\\resourcemanager","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Left as a blank extension of ResourceManager for now, this semantically\n * represents a default configuration for a Bolt application.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ClassLoader|string  $loader              ClassLoader or root path\n     * @param Request             $request\n     * @param PathResolverFactory $pathResolverFactory\n     *\/","attributes":[],"arguments":[{"name":"$loader","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["Request"],"value":"null","phpdoc":"","attributes":[]},{"name":"$pathResolverFactory","reference":false,"typehint":["PathResolverFactory"],"value":"null","phpdoc":"","attributes":[]}]}}},"LazyPathsProxy":{"abstract":false,"final":false,"extends":"\\bolt\\configuration\\pathsproxy","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt\\Configuration\\ResourceManager::getPaths() is proxied here, which used to return a simple array.\n *\n * This allows us to still use getPath, getUrl, and getRequest methods which have custom logic in them to maintain BC.\n *\n * @deprecated since 3.0, to be removed in 4.0.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$factory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var callable *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param callable $factory\n     *\/","attributes":[],"arguments":[{"name":"$factory","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ResourceManager":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A Base Class to handle resource management of paths and urls within a Bolt App.\n *\n * Intended to simplify the ability to override resource location\n *\n * @deprecated Deprecated since 3.0, to be removed in 4.0.\n *\n * @author Ross Riley, riley.ross@gmail.com\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]},"$urlPrefix":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$root":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Eloquent\\Pathogen\\AbsolutePathInterface *\/","attributes":[]},"$requestObject":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Request *\/","attributes":[]},"$paths":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var AbsolutePathInterface[] *\/","attributes":[]},"$urls":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$request":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]},"$verifier":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LowLevelChecks|null *\/","attributes":[]},"$classLoader":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Composer\\Autoload\\ClassLoader|null *\/","attributes":[]},"$pathManager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Eloquent\\Pathogen\\FileSystem\\Factory\\FileSystemPathFactory *\/","attributes":[]},"$pathsProxy":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/**\n     * @deprecated since 3.0, to be removed in 4.0.\n     *\n     * @var PathsProxy\n     *\/","attributes":[]},"$requestInitialized":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$configInitialized":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$pathResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver|null *\/","attributes":[]},"$pathResolverFactory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolverFactory *\/","attributes":[]},"$disableApacheChecks":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor initialises on the app root path.\n     *\n     * @param \\ArrayAccess $container ArrayAccess compatible DI container that must contain one of:\n     *                                'classloader' of instance a ClassLoader will use introspection to find root path or\n     *                                'rootpath' will be treated as an existing directory as string.\n     *\n     * Optional ones:\n     * 'request' - Symfony\\Component\\HttpFoundation\\Request\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["\\ArrayAccess"],"value":"","phpdoc":"","attributes":[]}]},"useLoader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\Composer\\Autoload\\ClassLoader $loader\n     *\n     * @return \\Eloquent\\Pathogen\\RelativePathInterface|\\Eloquent\\Pathogen\\AbsolutePathInterface\n     *\/","attributes":[],"arguments":[{"name":"$loader","reference":false,"typehint":["ClassLoader"],"value":"","phpdoc":"","attributes":[]}]},"setApp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Don't use!\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"disableApacheChecks":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"setPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a resource path.\n     *\n     * @param string $name\n     * @param string $value\n     * @param bool   $applyToResolver\n     *\n     * @return AbsolutePathInterface|RelativePathInterface|\\Closure\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$applyToResolver","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"getPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets a path as a string.\n     *\n     * Subdirectories are automatically parsed to correct filesystem.\n     *\n     * For example:\n     *\n     *     $bar = getPath('root\/foo\/bar');\n     *\n     * @param string $name Name of path\n     *\n     * @throws \\InvalidArgumentException If path isn't available\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPathObject":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets a path as a PathInterface.\n     *\n     * Subdirectories are automatically parsed to correct filesystem.\n     *\n     * For example:\n     *\n     *     $bar = getPath('root\/foo\/bar');\n     *\n     * @param string $name Name of path\n     *\n     * @throws \\InvalidArgumentException If path isn't available\n     *\n     * @return AbsolutePathInterface\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if the given name has a path associated with it.\n     *\n     * @param string $name of path\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPathResolverFactory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"setPathResolver":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$pathResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]}]},"setUrl":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a URL path definition.\n     *\n     * @param string $name\n     * @param string $value\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUrl":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a URL path definition.\n     *\n     * @param string $name\n     * @param bool   $includeBasePath\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$includeBasePath","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"setRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a parameter that describes the request,\n     * e.g. 'hostname', 'protocol' or 'canonical'.\n     *\n     * @param string $name\n     * @param string $value\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a request parameter.\n     *\n     * @param string $name\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPaths":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Just don't use this.\n     *\n     * @deprecated since 3.0, to be removed in 4.0.\n     *\n     * @return PathsProxy\n     *\/","attributes":[]},"initializeRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Takes a Request object and uses it to initialize settings that depend on\n     * the request.\n     *\n     * @param Application $app\n     * @param Request     $request\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["Request"],"value":"null","phpdoc":"","attributes":[]}]},"initializeConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Takes a loaded config array and uses it to initialize settings that depend on it.\n     *\/","attributes":[]},"initialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"setThemePath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This currently gets special treatment because of the processing order.\n     * The theme path is needed before the app has constructed, so this is a shortcut to\n     * allow the Application constructor to pre-provide a theme path.\n     *\n     * @param array $generalConfig\n     *\/","attributes":[],"arguments":[{"name":"$generalConfig","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"verify":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.1, to be removed in 4.0.\n     *\/","attributes":[]},"verifyDb":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.1, to be removed in 4.0.\n     *\/","attributes":[]},"getVerifier":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the LowlevelChecks object.\n     *\n     * @return LowlevelChecks\n     *\/","attributes":[]},"setVerifier":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the LowlevelChecks object.\n     *\n     * @param LowlevelChecks|null $verifier\n     *\/","attributes":[],"arguments":[{"name":"$verifier","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getClassLoader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the Composer autoload ClassLoader.\n     *\n     * @return ClassLoader\n     *\/","attributes":[]},"getApp":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the Bolt\\Application object.\n     *\n     * @throws \\RuntimeException\n     *\n     * @return \\Silex\\Application\n     *\/","attributes":[]},"findRelativePath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find the relative file system path between two file system paths.\n     *\n     * @param string $frompath Path to start from\n     * @param string $topath   Path we want to end up in\n     *\n     * @return string Path leading from $frompath to $topath\n     *\/","attributes":[],"arguments":[{"name":"$frompath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$topath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"callerNotSelfOrPathsProxy":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$index","reference":false,"typehint":[""],"value":1,"phpdoc":"","attributes":[]}]},"callerNotSelfOrChild":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$index","reference":false,"typehint":[""],"value":1,"phpdoc":"","attributes":[]}]},"callerNotSelf":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$index","reference":false,"typehint":[""],"value":1,"phpdoc":"","attributes":[]}]},"callerNot":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$files","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$index","reference":false,"typehint":[""],"value":1,"phpdoc":"","attributes":[]}]}}},"PathResolver":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A class to resolve and manage paths. Paths defined here are allowed to have variables within them.\n * For example: \"files\" folder is within the web directory so it is defined as \"%web%\/files\". This allows\n * the web directory to be changed and the files path does not have to be redefined.\n *\n * This functionality could be added within ResourceManager, but given that 90% of that code is deprecated I figured\n * it would be better to create this separately.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$paths":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$resolving":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"defaultPaths":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Default paths for Bolt installation.\n     *\n     * @return array\n     *\/","attributes":[]},"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $root  the root path which must be absolute\n     * @param array  $paths initial path definitions\n     *\/","attributes":[],"arguments":[{"name":"$root","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$paths","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"define":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Define a path, or really an alias\/variable.\n     *\n     * @param string $name\n     * @param string $path\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"resolve":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Resolve a path.\n     *\n     * Examples:\n     *  - `%web%\/files` - A path with variables.\n     *  - `files` - A previously defined variable.\n     *  - `foo\/bar` - A relative path that will be resolved against the root path.\n     *  - `\/tmp` - An absolute path will be returned as is.\n     *\n     * @param string $path     the path\n     * @param bool   $absolute if the path is relative, resolve it against the root path\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$absolute","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"raw":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the raw path definition for the name given.\n     *\n     * @param string $name\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"names":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the names of all paths.\n     *\n     * @return array\n     *\/","attributes":[]},"rawAll":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns all path names and their raw definitions.\n     *\n     * @return array\n     *\/","attributes":[]},"normalizeName":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * For BC.\n     *\n     * @deprecated since 3.3, will be removed in 4.0.\n     *\n     * @param string $name\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Composer":{"abstract":false,"final":false,"extends":"\\bolt\\configuration\\standard","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Configuration for a Bolt application Composer install.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor initialises on the app root path.\n     *\n     * @param string              $path\n     * @param Request             $request\n     * @param PathResolverFactory $pathResolverFactory\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["Request"],"value":"null","phpdoc":"","attributes":[]},{"name":"$pathResolverFactory","reference":false,"typehint":["PathResolverFactory"],"value":"null","phpdoc":"","attributes":[]}]},"getVerifier":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"PathsProxy":{"abstract":false,"final":false,"extends":"","implements":["\\arrayaccess"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt\\Configuration\\ResourceManager::getPaths() is proxied here, which used to return a simple array.\n *\n * This allows us to still use getPath, getUrl, and getRequest methods which have custom logic in them to maintain BC.\n *\n * @deprecated since 3.0, to be removed in 4.0.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$resources":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ResourceManager *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param ResourceManager $resources\n     *\/","attributes":[],"arguments":[{"name":"$resources","reference":false,"typehint":["ResourceManager"],"value":"","phpdoc":"","attributes":[]}]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ForwardToPathResolver":{"abstract":false,"final":false,"extends":"\\bolt\\configuration\\resourcemanager","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Forwards all relevant paths to PathResolver.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\n * @deprecated since 3.3, to be removed in 4.0.\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["\\ArrayAccess"],"value":"","phpdoc":"","attributes":[]}]}}},"PathResolverFactory":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This acts as a staging area for PathResolver so that it doesn't have to be created until it is needed.\n * It is basically only to bridge ResourceManager to PathResolver.\n *\n * @deprecated since 3.3, will be removed in 4.0.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$rootPath":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$paths":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\/","attributes":[]},"setRootPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $rootPath\n     *\n     * @return PathResolverFactory\n     *\/","attributes":[],"arguments":[{"name":"$rootPath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasRootPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return bool\n     *\/","attributes":[]},"getRootPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setPaths":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $paths\n     *\n     * @return PathResolverFactory\n     *\/","attributes":[],"arguments":[{"name":"$paths","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addPaths":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $paths\n     *\n     * @return PathResolverFactory\n     *\/","attributes":[],"arguments":[{"name":"$paths","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getPaths":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"create":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create PathResolver.\n     *\n     * @return PathResolver\n     *\/","attributes":[]}}},"Environment":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Environment set up and management class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$cache":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Cache *\/","attributes":[]},"$actions":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Pimple *\/","attributes":[]},"$filesystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Filesystem *\/","attributes":[]},"$boltPath":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$boltAssetsPath":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$appPath":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$viewPath":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$boltVersion":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$versionChange":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $boltPath\n     * @param string $boltAssetsPath\n     * @param Cache  $cache\n     * @param Pimple $actions\n     * @param string $boltVersion\n     *\/","attributes":[],"arguments":[{"name":"$boltPath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$boltAssetsPath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$cache","reference":false,"typehint":["Cache"],"value":"","phpdoc":"","attributes":[]},{"name":"$actions","reference":false,"typehint":["Pimple"],"value":"","phpdoc":"","attributes":[]},{"name":"$boltVersion","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasVersionChange":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Has a Bolt version change been detected.\n     *\n     * @return bool\n     *\/","attributes":[]},"checkVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check Bolt's version against a cached key. If there is a change we flush\n     * the cache data and if required synchronise asset directories.\n     *\/","attributes":[]},"syncAssets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform a synchronisation of files in specific app\/view\/ subdirectories.\n     *\n     * @return array|null\n     *\/","attributes":[]},"syncAssetsDirectory":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Synchronise the files in an app\/view\/ subdirectory.\n     *\n     * @param string $dir\n     *\/","attributes":[],"arguments":[{"name":"$dir","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkCacheVersion":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the cache version matches Bolt's current version.\n     *\n     * @return bool TRUE  - versions match\n     *              FALSE - versions don't match\n     *\/","attributes":[]},"updateAutoloader":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var DumpAutoload $autoload *\/","attributes":[]},"updateCacheVersion":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Write our version string out to given cache directory.\n     *\/","attributes":[]},"getVersionFileName":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"PathDependencySorter":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Sorts PathResolver paths based on their dependencies.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$resolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]},"$resolving":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param PathResolver $resolver\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]}]},"getSortedNames":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the list of path names sorted by least dependent first.\n     *\n     * @return string[]\n     *\/","attributes":[]},"getDependencies":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns path names with their dependencies.\n     *\n     * @return array [name => dependencies]\n     *\/","attributes":[]},"getDependenciesRecursive":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns dependencies recursively for a path.\n     *\n     * @param string $path\n     * @param array  $dependencies\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$dependencies","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"LowlevelChecks":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @deprecated Deprecated since 3.1, to be removed in 4.0.\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$disableApacheChecks":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$checks":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$configChecks":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$magicQuotes":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$safeMode":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$isApache":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$mysqlLoaded":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$postgresLoaded":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$sqliteLoaded":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ResourceManager $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"__get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$property","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$property","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"removeCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove a check from the list causing it to be skipped.\n     *\n     * @param string $check\n     *\/","attributes":[],"arguments":[{"name":"$check","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a check.\n     *\n     * @param string $check\n     * @param bool   $top\n     *\/","attributes":[],"arguments":[{"name":"$check","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$top","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"doChecks":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform the checks.\n     *\/","attributes":[]},"checkMagicQuotes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"checkSafeMode":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"assertWritableDir":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkCache":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the cache dir is present and writable.\n     *\/","attributes":[]},"checkApache":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This check looks for the presence of the .htaccess file inside the web directory.\n     * It is here only as a convenience check for users that install the basic version of Bolt.\n     *\n     * If you see this error and want to disable it, call $config->getVerifier()->disableApacheChecks();\n     * inside your bootstrap.php file, just before the call to $config->verify().\n     **\/","attributes":[]},"doDatabaseCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform the check for the database folder. We do this separately, because it can only\n     * be done _after_ the other checks, since we need to have the $config, to see if we even\n     * _need_ to do this check.\n     *\/","attributes":[]},"disableApacheChecks":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"lowlevelConfigFix":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a config file is present and writable. If not, try to create it\n     * from the filename.dist.\n     *\n     * @param string $name Filename stem; .yml extension will be added automatically.\n     *\n     * @throws \\Bolt\\Exception\\BootException\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Configuration\\Check\\":{"classes":{"PhpExtensions":{"abstract":false,"final":false,"extends":"\\bolt\\configuration\\check\\basecheck","implements":["\\bolt\\configuration\\check\\configurationcheckinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Checks for PHP extension configuration.\n *\n * @deprecated Since 3.4, to be removed in 4.0\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$options":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"setOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"runCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"Result":{"abstract":false,"final":false,"extends":"","implements":["\\jsonserializable"],"use":[],"useoptions":[],"phpdoc":"\/**\n * A container class for a check result.\n *\n * @deprecated Since 3.4, to be removed in 4.0\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$pass":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$message":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$exception":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Exception *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"isPass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the result is a pass or fail.\n     *\n     * @return bool\n     *\/","attributes":[]},"pass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a pass condition for the check.\n     *\n     * @return \\Bolt\\Configuration\\Check\\Result\n     *\/","attributes":[]},"fail":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a fail condition for the check.\n     *\n     * @return \\Bolt\\Configuration\\Check\\Result\n     *\/","attributes":[]},"isException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the result contains an exception.\n     *\n     * @return bool\n     *\/","attributes":[]},"setMessage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the message that describes the check result.\n     *\n     * @param string $message\n     *\n     * @return \\Bolt\\Configuration\\Check\\Result\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getMessage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the message that describes the check result.\n     *\n     * @return string\n     *\/","attributes":[]},"setException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the exception that occurred during the check.\n     *\n     * @param \\Exception $exception\n     *\n     * @return \\Bolt\\Configuration\\Check\\Result\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]},"getException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the exception that occurred during the check.\n     *\n     * @return \\Exception\n     *\/","attributes":[]},"jsonSerialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"EmailSetup":{"abstract":false,"final":false,"extends":"\\bolt\\configuration\\check\\basecheck","implements":["\\bolt\\configuration\\check\\configurationcheckinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Checks for email configuration.\n *\n * @deprecated Since 3.4, to be removed in 4.0\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$options":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"setOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"runCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"checkMailOptions":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getEmailHtml":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render HTML for the sample email.\n     *\n     * @return string\n     *\/","attributes":[]},"sendMessage":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attempt to send the email message.\n     *\n     * @param string $senderMail\n     * @param string $senderName\n     * @param string $mailhtml\n     *\/","attributes":[],"arguments":[{"name":"$senderMail","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$senderName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$mailhtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"BaseCheck":{"abstract":true,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base class for checks.\n *\n * @deprecated Since 3.4, to be removed in 4.0\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]},"$options":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$results":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Result[] *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"createResult":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for the result container.\n     *\n     * @return \\Bolt\\Configuration\\Check\\Result\n     *\/","attributes":[]}}},"DirectoryAccess":{"abstract":false,"final":false,"extends":"\\bolt\\configuration\\check\\basecheck","implements":["\\bolt\\configuration\\check\\configurationcheckinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Checks for writeable directories.\n *\n * @deprecated Since 3.4, to be removed in 4.0\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$options":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"setOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"runCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}},"interfaces":{"ConfigurationCheckInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * System configuration check interface.\n *\n * @deprecated Since 3.4, to be removed in 4.0\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"setOptions":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the options for the check.\n     *\n     * @param array $options\n     *\n     * @return \\Bolt\\Configuration\\Check\\ConfigurationCheckInterface\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"runCheck":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Execute the test.\n     *\n     * @return \\Bolt\\Configuration\\Check\\Result\n     *\/","attributes":[]}}}}},"\\Bolt\\Configuration\\Validation\\":{"classes":{"Validator":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\configuration\\validation\\validatorinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * System validator.\n *\n * @internal For BC. Use of this class should not include use of LowlevelChecks\n *           methods\/properties.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"CHECK_CONFIG":{"value":"'configuration'","visibility":"","phpdoc":"","attributes":[]},"CHECK_DATABASE":{"value":"'database'","visibility":"","phpdoc":"","attributes":[]},"CHECK_APACHE":{"value":"'apache'","visibility":"","phpdoc":"","attributes":[]},"CHECK_CACHE":{"value":"'cache'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$configManager":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$pathResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]},"$flashLogger":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FlashLoggerInterface *\/","attributes":[]},"$check":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Config               $config\n     * @param PathResolver         $pathResolver\n     * @param FlashLoggerInterface $flashLogger\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$pathResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]},{"name":"$flashLogger","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$checkName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$prepend","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$checkName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"remove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$checkName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"check":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$checkName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checks":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run system installation checks.\n     *\/","attributes":[]},"getValidator":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var ValidationInterface $validator *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constructorArgs","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Database":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\configuration\\validation\\configawareinterface","\\bolt\\configuration\\validation\\validationinterface","\\bolt\\configuration\\validation\\pathresolverawareinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Database validation check.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$pathResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]},"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]}},"methods":{"check":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPathResolver":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$pathResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]}]},"setConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"doDatabaseSqliteCheck":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$dbConfig","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"Cache":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\configuration\\validation\\validationinterface","\\bolt\\configuration\\validation\\pathresolverawareinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Cache validation check.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$pathResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]}},"methods":{"check":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPathResolver":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$pathResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]}]}}},"Apache":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\configuration\\validation\\validationinterface","\\bolt\\configuration\\validation\\pathresolverawareinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Apache .htaccess validation check.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$pathResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]}},"methods":{"check":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This check looks for the presence of the .htaccess file inside the web directory.\n     * It is here only as a convenience check for users that install the basic version of Bolt.\n     *\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPathResolver":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$pathResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]}]}}},"Configuration":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\configuration\\validation\\validationinterface","\\bolt\\configuration\\validation\\configawareinterface","\\bolt\\configuration\\validation\\flashloggerawareinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Configuration parameters validation check.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$flashLogger":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FlashLoggerInterface *\/","attributes":[]}},"methods":{"check":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"setFlashLogger":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$flashLogger","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]}]}}}},"interfaces":{"ValidationInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Validation check interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"check":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform the validation check.\n     *\/","attributes":[]}}},"FlashLoggerAwareInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface for validation checks that require FlashLoggerInterface.\n *\n * @internal do not use\n *\n * @deprecated Deprecated since 3.2, to be removed in 4.0.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"setFlashLogger":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FlashLoggerInterface $flashLogger\n     *\/","attributes":[],"arguments":[{"name":"$flashLogger","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"PathResolverAwareInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface for validation checks that require ResourceManager.\n *\n * @internal do not use\n *\n * @deprecated Deprecated since 3.1, to be removed in 4.0.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"setPathResolver":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param PathResolver $pathResolver\n     *\/","attributes":[],"arguments":[{"name":"$pathResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]}]}}},"ValidatorInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Validator interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"add":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a check.\n     *\n     * @param string                     $checkName Name for the check\n     * @param string|ValidationInterface $className Class name, or instance of a ValidationInterface class\n     * @param bool                       $prepend   Prepend to the execution list\n     *\/","attributes":[],"arguments":[{"name":"$checkName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$prepend","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $checkName\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$checkName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"remove":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove a check from the list causing it to be skipped.\n     *\n     * @param string $checkName Name of the check to remove\n     *\/","attributes":[],"arguments":[{"name":"$checkName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"check":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform a named check.\n     *\n     * @param string $checkName Name of the check to run\n     *\n     * @return Response|null\n     *\/","attributes":[],"arguments":[{"name":"$checkName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checks":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform all checks.\n     *\/","attributes":[]}}},"ConfigAwareInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface for validation checks that require Config.\n *\n * @internal do not use\n *\n * @deprecated Deprecated since 3.1, to be removed in 4.0.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"setConfig":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Config $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Form\\":{"classes":{"BoltExtension":{"abstract":false,"final":false,"extends":"\\symfony\\component\\form\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Symfony Forms extension to provide types, type extensions and a guesser.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"loadTypes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}}},"\\Bolt\\Form\\FormType\\":{"classes":{"UserNewType":{"abstract":false,"final":false,"extends":"\\bolt\\form\\formtype\\abstractusertype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt new user editing form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"UserData":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * User form DTO.\n *\n * @internal\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$userName":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$password":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$email":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$displayName":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$lastSeen":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$lastIp":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$stack":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$enabled":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$roles":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\/","attributes":[]},"createFromEntity":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Entity\\Users $entity\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"applyToEntity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$mutator","reference":false,"typehint":["ListMutator"],"value":"null","phpdoc":"","attributes":[]}]},"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"getUserName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setUserName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $userName\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$userName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPassword":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setPassword":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $password\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$password","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getEmail":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setEmail":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $email\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$email","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDisplayName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setDisplayName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $displayName\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$displayName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLastSeen":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setLastSeen":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\DateTime $lastSeen\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$lastSeen","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLastIp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setLastIp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $lastIp\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$lastIp","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getStack":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"setStack":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $stack\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$stack","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return bool\n     *\/","attributes":[]},"setEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param bool $enabled\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$enabled","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"setRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $roles\n     *\n     * @return UserData\n     *\/","attributes":[],"arguments":[{"name":"$roles","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"UserEditType":{"abstract":false,"final":false,"extends":"\\bolt\\form\\formtype\\abstractusertype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt user editing form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"configureOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["OptionsResolver"],"value":"","phpdoc":"","attributes":[]}]}}},"AbstractUserType":{"abstract":true,"final":false,"extends":"\\symfony\\component\\form\\abstracttype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt base user form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configureOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["OptionsResolver"],"value":"","phpdoc":"","attributes":[]}]},"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @inheritDoc\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addId":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addUserName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addDisplayName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addEmail":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     * @param bool                 $checkMx\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$checkMx","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"addPassword":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Regarding the autocomplete on the passwords:\n     *\n     * @see https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=468153#c150\n     *\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addEnabled":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addLastSeen":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addLastIp":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addRoles":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addSave":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     *\n     * @return AbstractUserType\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"UserLoginType":{"abstract":false,"final":false,"extends":"\\symfony\\component\\form\\abstracttype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt user login form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"UserProfileType":{"abstract":false,"final":false,"extends":"\\bolt\\form\\formtype\\abstractusertype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt user profile editing form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"PrefillType":{"abstract":false,"final":false,"extends":"\\symfony\\component\\form\\abstracttype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Prefill form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"configureOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["OptionsResolver"],"value":"","phpdoc":"","attributes":[]}]}}},"ContentEditType":{"abstract":false,"final":false,"extends":"\\symfony\\component\\form\\abstracttype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * ContentType editing form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"configureOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["OptionsResolver"],"value":"","phpdoc":"","attributes":[]}]}}},"FileUploadType":{"abstract":false,"final":false,"extends":"\\symfony\\component\\form\\abstracttype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * File upload form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"configureOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["OptionsResolver"],"value":"","phpdoc":"","attributes":[]}]}}},"FileEditType":{"abstract":false,"final":false,"extends":"\\symfony\\component\\form\\abstracttype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * File editing form type.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"buildForm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["FormBuilderInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"configureOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["OptionsResolver"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Form\\Validator\\Constraints\\":{"classes":{"FieldEqualsValidator":{"abstract":false,"final":false,"extends":"\\symfony\\component\\validator\\constraintvalidator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Equivalent field value validator.\n *\n * Validates that a non-NULL value does not match the value of another field.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"validate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]},"addViolation":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add violation.\n     *\n     * @param mixed      $value\n     * @param Constraint $constraint\n     *\n     * @return true\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]}}},"FieldContains":{"abstract":false,"final":false,"extends":"\\symfony\\component\\validator\\constraint","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Field containing a value subset validation constraint.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$message":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$field":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$insensitive":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"getDefaultOption":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritDoc}\n     *\/","attributes":[]},"getRequiredOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritDoc}\n     *\/","attributes":[]}}},"ExistingEntityValidator":{"abstract":false,"final":false,"extends":"\\symfony\\component\\validator\\constraintvalidator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Existing entity validator.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManager $em\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]}]},"validate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]},"hasEntity":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity $formEntity *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]},"addViolation":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add violation.\n     *\n     * @param mixed      $value\n     * @param Constraint $constraint\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]}}},"ExistingEntity":{"abstract":false,"final":false,"extends":"\\symfony\\component\\validator\\constraint","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Existing entity validation constraint.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"ENTITY_EXISTS_ERROR":{"value":"'63e88f63-0a35-4ac9-9d55-ad987e1d5c7b'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$errorNames":{"value":"","visibility":"protected","static":true,"typehint":[""],"phpdoc":"","attributes":[]},"$message":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$className":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string Class name or alias that is passed to getRepository() *\/","attributes":[]},"$fieldNames":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var array Field names that are OR-ed in the SQL query *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array|null $options\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]}}},"FieldEquals":{"abstract":false,"final":false,"extends":"\\symfony\\component\\validator\\constraint","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Equivalent field value validation constraint.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$message":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$field":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$loose":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$insensitive":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"getDefaultOption":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritDoc}\n     *\/","attributes":[]},"getRequiredOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritDoc}\n     *\/","attributes":[]}}},"Yaml":{"abstract":false,"final":false,"extends":"\\symfony\\component\\validator\\constraint","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * YAML validation constraint.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$message":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}}},"FieldContainsValidator":{"abstract":false,"final":false,"extends":"\\symfony\\component\\validator\\constraintvalidator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Field containing a value subset validator.\n *\n * Validates that a non-NULL value does not match part of the value of another\n * field.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"validate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]},"addViolation":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add violation.\n     *\n     * @param mixed      $value\n     * @param Constraint $constraint\n     *\n     * @return true\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]}}},"YamlValidator":{"abstract":false,"final":false,"extends":"\\symfony\\component\\validator\\constraintvalidator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * YAML validator.\n *\n * Validates a given input string parses as valid YAML.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"validate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]},"addViolation":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add violation.\n     *\n     * @param mixed           $error\n     * @param Constraint|Yaml $constraint\n     *\n     * @return true\n     *\/","attributes":[],"arguments":[{"name":"$error","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":["Constraint"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Form\\FieldType\\":{"classes":{"UserRoleType":{"abstract":false,"final":false,"extends":"\\symfony\\component\\form\\abstracttype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * User permission\/role type.\n *\n * @deprecated Since 3.4. Do not use\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$permissions":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Permissions *\/","attributes":[]},"$session":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var SessionInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param SessionInterface $session\n     * @param Permissions      $permissions\n     *\/","attributes":[],"arguments":[{"name":"$session","reference":false,"typehint":["SessionInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$permissions","reference":false,"typehint":["Permissions"],"value":"","phpdoc":"","attributes":[]}]},"getParent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"configureOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["OptionsResolver"],"value":"","phpdoc":"","attributes":[]}]},"getRoleAccessCallback":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Token $sessionAuth *\/","attributes":[]}}}}},"\\Bolt\\Form\\Resolver\\":{"classes":{"Choice":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Choice resolver.\n *\n * @internal DO NOT USE. Will be replaced circa Bolt 3.5.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$query":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Query *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Query $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["Query"],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentType $contentType\n     * @param array       $templateFields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["ContentType"],"value":"","phpdoc":"","attributes":[]},{"name":"$templateFields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"build":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the select array object.\n     *\n     * @param ArrayObject $select\n     * @param array       $fields\n     * @param bool        $isTemplateFields\n     *\/","attributes":[],"arguments":[{"name":"$select","reference":false,"typehint":["ArrayObject"],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$prefix","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getValues":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $field\n     *\n     * @return array|null\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getYamlValues":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a YAML defined array of select field value options.\n     *\n     * @param Bag $field\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"getEntityValues":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var QueryResultset $entities *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Extension\\":{"classes":{"ResolvedExtension":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This wraps an extension and provides additional functionality\n * that does not belong in the extension itself.\n *\n * This works similar to Symfony's ResolvedFormType.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$innerExtension":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ExtensionInterface *\/","attributes":[]},"$enabled":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$descriptor":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var PackageDescriptor|null *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param ExtensionInterface $innerExtension\n     *\/","attributes":[],"arguments":[{"name":"$innerExtension","reference":false,"typehint":["ExtensionInterface"],"value":"","phpdoc":"","attributes":[]}]},"getInnerExtension":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the wrapped extension.\n     *\n     * @return \\Bolt\\Extension\\ExtensionInterface\n     *\/","attributes":[]},"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a unique identifier for the extension, such as: Vendor\/Name.\n     *\n     * @return string\n     *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the extension name (the class short name).\n     *\n     * @return string\n     *\/","attributes":[]},"getVendor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the extension vendor.\n     *\n     * @return string\n     *\/","attributes":[]},"getDisplayName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the extension human friendly name.\n     *\n     * @return string\n     *\/","attributes":[]},"getClassName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the extension class name.\n     *\n     * @return string\n     *\/","attributes":[]},"getBaseDirectory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the root directory for the extension.\n     *\n     * @return \\Bolt\\Filesystem\\Handler\\DirectoryInterface\n     *\/","attributes":[]},"getDescriptor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the extension's package descriptor.\n     *\n     * @return PackageDescriptor|null\n     *\/","attributes":[]},"setDescriptor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the extension's package descriptor.\n     *\n     * @param PackageDescriptor $descriptor\n     *\n     * @return ResolvedExtension\n     *\/","attributes":[],"arguments":[{"name":"$descriptor","reference":false,"typehint":["PackageDescriptor"],"value":"null","phpdoc":"","attributes":[]}]},"isManaged":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether the extension is managed by Bolt. This is the opposite of \"bundled\".\n     *\n     * @return bool\n     *\/","attributes":[]},"isBundled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether the extension is bundled by user. This is the opposite of \"managed\".\n     *\n     * @return bool\n     *\/","attributes":[]},"isEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the extension is enabled.\n     *\n     * @return bool\n     *\/","attributes":[]},"setEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Enable or disable an extension at runtime.\n     *\n     * @param bool|int $enabled\n     *\n     * @return ResolvedExtension\n     *\/","attributes":[],"arguments":[{"name":"$enabled","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isValid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the extension is valid.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"ContainerProxy":{"abstract":false,"final":false,"extends":"\\pimple","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A Container proxy that prevents non-whitelisted services from being invoked.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$container":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Container *\/","attributes":[]},"$serviceWhiteList":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Container $container        the real container\n     * @param string[]  $serviceWhiteList a list of services that can be invoked\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["Container"],"value":"","phpdoc":"","attributes":[]},{"name":"$serviceWhiteList","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"raw":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"extend":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"keys":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"AbstractExtension":{"abstract":true,"final":false,"extends":"","implements":["\\bolt\\extension\\extensioninterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Defined some base functionality for extensions.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$container":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Container *\/","attributes":[]},"$baseDirectory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var DirectoryInterface|null *\/","attributes":[]},"$webDirectory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var DirectoryInterface|null *\/","attributes":[]},"$name":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$vendor":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$namespace":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"setContainer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["Container"],"value":"","phpdoc":"","attributes":[]}]},"setBaseDirectory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]}]},"getBaseDirectory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setWebDirectory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]}]},"getWebDirectory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getVendor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getNamespace":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getDisplayName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getContainer":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the container.\n     *\n     * Note: This is allows traits to access app without losing coding completion\n     *\n     * @return Container\n     *\/","attributes":[]}}},"Manager":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class to manage loading of extensions.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$extensions":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ResolvedExtension[] *\/","attributes":[]},"$composerNames":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]},"$extFs":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FilesystemInterface *\/","attributes":[]},"$webFs":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FilesystemInterface *\/","attributes":[]},"$flashLogger":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FlashLoggerInterface *\/","attributes":[]},"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$booted":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$loaded":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$registered":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Application @deprecated *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FilesystemInterface  $extensions\n     * @param FilesystemInterface  $web\n     * @param FlashLoggerInterface $flashLogger\n     * @param Config               $config\n     *\/","attributes":[],"arguments":[{"name":"$extensions","reference":false,"typehint":["FilesystemInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$web","reference":false,"typehint":["FilesystemInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$flashLogger","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"all":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get all installed extensions.\n     *\n     * @return ResolvedExtension[]\n     *\/","attributes":[]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an installed extension class.\n     *\n     * @param string|null $id The extension ID or composer name\n     *\n     * @return ExtensionInterface|null\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getResolved":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the resolved form of an installed extension class.\n     *\n     * @param string|null $id The extension ID or composer name\n     *\n     * @return ResolvedExtension|null\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add an extension to be registered.\n     *\n     * @param ExtensionInterface      $extension\n     * @param DirectoryInterface|null $baseDir\n     * @param DirectoryInterface|null $webDir\n     * @param string|null             $composerName\n     *\n     * @throws \\RuntimeException\n     *\n     * @return ResolvedExtension\n     *\/","attributes":[],"arguments":[{"name":"$extension","reference":false,"typehint":["ExtensionInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$baseDir","reference":false,"typehint":["DirectoryInterface"],"value":"null","phpdoc":"","attributes":[]},{"name":"$webDir","reference":false,"typehint":["DirectoryInterface"],"value":"null","phpdoc":"","attributes":[]},{"name":"$composerName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"addManagedExtensions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Load a collection of extension classes.\n     *\/","attributes":[]},"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call register() for each extension.\n     *\n     * @param Application $app\n     *\n     * @throws \\RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call boot() for each extension loader that implements ServiceProviderInterface.\n     *\n     * @internal\n     *\n     * @param Application $app\n     *\n     * @throws \\RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"loadPackageDescriptors":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Load the extension autoload.json cache file and build the PackageDescriptor array.\n     *\n     * @return PackageDescriptor[]\n     *\/","attributes":[]},"addManagedExtension":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var ExtensionInterface $extension *\/","attributes":[],"arguments":[{"name":"$descriptor","reference":false,"typehint":["PackageDescriptor"],"value":"","phpdoc":"","attributes":[]}]},"isClassLoadable":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a class is loadable.\n     *\n     * This comes about as local extensions that are moved or removed will over\n     * emmit warnings while trying to validly rebuild autoloaders.\n     *\n     * @param string $className\n     *\n     * @throws ContextErrorException\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getApp":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @internal do not use! For legacy support only\n     *\/","attributes":[]}}},"SimpleExtension":{"abstract":true,"final":false,"extends":"\\bolt\\extension\\abstractextension","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface","\\silex\\serviceproviderinterface"],"use":["\\bolt\\extension\\storagetrait","\\bolt\\extension\\twigtrait","\\bolt\\extension\\translationtrait","\\bolt\\extension\\menutrait","\\bolt\\extension\\nuttrait","\\bolt\\extension\\controllertrait","\\bolt\\extension\\controllermounttrait","\\bolt\\extension\\assettrait","\\bolt\\extension\\configtrait"],"useoptions":[""],"phpdoc":"\/**\n * This will replace current BaseExtension.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"registerServices":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Register additional services for the extension.\n     *\n     * Example:\n     * <pre>\n     *   $app['koala'] = $app->share(\n     *       function ($app) {\n     *           return new Koala($app['drop.bear']);\n     *       }\n     *   );\n     * <\/pre>\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"subscribe":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Define events to listen to here.\n     *\n     * @param EventDispatcherInterface $dispatcher\n     *\/","attributes":[],"arguments":[{"name":"$dispatcher","reference":false,"typehint":["EventDispatcherInterface"],"value":"","phpdoc":"","attributes":[]}]},"getServiceProviders":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}},"interfaces":{"ExtensionInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * ExtensionInterface.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getServiceProviders":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the service provider.\n     *\n     * @return ServiceProviderInterface[]\n     *\/","attributes":[]},"setContainer":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the container.\n     *\n     * @param Container $container\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["Container"],"value":"","phpdoc":"","attributes":[]}]},"setBaseDirectory":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the root directory for the extension\n     * with filesystem configured in core.\n     *\n     * @param DirectoryInterface $directory\n     *\n     * @return ExtensionInterface\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]}]},"getBaseDirectory":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the root directory for the extension.\n     *\n     * @throws \\LogicException if the extension has not been registered with a base directory\n     *\n     * @return DirectoryInterface\n     *\/","attributes":[]},"getWebDirectory":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the web directory for the extension.\n     *\n     * The extension's assets should be installed in this folder.\n     *\n     * @throws \\LogicException if the extension has not been registered with a web directory\n     *\n     * @return DirectoryInterface\n     *\/","attributes":[]},"setWebDirectory":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the web directory for the extension.\n     *\n     * @param DirectoryInterface $directory\n     *\n     * @return ExtensionInterface\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]}]},"getId":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a unique identifier for the extension, such as: Vendor\/Name.\n     *\n     * @return string\n     *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the extension name (the class short name).\n     *\n     * @return string\n     *\/","attributes":[]},"getVendor":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the extension vendor.\n     *\n     * @return string\n     *\/","attributes":[]},"getDisplayName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the human friendly extension name.\n     *\n     * @return string\n     *\/","attributes":[]}}}},"traits":{"ControllerMountTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Controller mounting trait for an extension.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"registerFrontendControllers":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of frontend controllers to mount.\n     *\n     * <pre>\n     *  return [\n     *      '\/foobar' => new FooController(),\n     *  ];\n     * <\/pre>\n     *\n     * @return ControllerCollection[]|ControllerProviderInterface[]\n     *\/","attributes":[]},"registerBackendControllers":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of backend controllers to mount.\n     *\n     * Note: The backend prefix will be automatically prepended to prefixes defined here.\n     *\n     * <pre>\n     *  return [\n     *      '\/foobar' => new FooController(),\n     *  ];\n     * <\/pre>\n     *\n     * @return ControllerCollection[]|ControllerProviderInterface[]\n     *\/","attributes":[]},"onMountControllers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Mounts the controllers defined in registerControllers().\n     *\n     * @param MountEvent $event\n     *\n     * @internal\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["MountEvent"],"value":"","phpdoc":"","attributes":[]}]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]}}},"TwigTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Twig function\/filter addition and interface functions for an extension.\n *\n * @author Carson Full <carsonfull@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$twigFilters":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var TwigFilter[] *\/","attributes":[]},"$twigFunctions":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var TwigFunction[] *\/","attributes":[]},"$safeFilterNames":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]},"$safeFunctionNames":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]},"$pathAdded":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"registerTwigFunctions":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of twig functions to register.\n     *\n     * Example:\n     * <pre>\n     *  return [\n     *      'foo' => 'fooFunction',\n     *      'bar' => ['barFunction', ['is_safe' => ['html']]]\n     *  ];\n     * <\/pre>\n     *\n     * @return array\n     *\/","attributes":[]},"registerTwigFilters":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of twig filters to register.\n     *\n     * Example:\n     * <pre>\n     *  return [\n     *      'foo' => 'fooFilter',\n     *      'bar' => ['barFilter', ['is_safe' => ['html']]]]\n     *  ];\n     * <\/pre>\n     *\n     * @return array\n     *\/","attributes":[]},"registerTwigPaths":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of relative paths to add to Twig's path array.\n     *\n     * Example:\n     * <pre>\n     *  return [\n     *      'templates\/foo',\n     *      'templates\/bar' => ['position' => 'prepend', 'namespace' => 'MyExtension']\n     *  ];\n     * <\/pre>\n     *\n     * @return array\n     *\/","attributes":[]},"extendTwigService":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call this in register method.\n     *\n     * @internal\n     *\/","attributes":[]},"loadTwig":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds filters and functions to Twig Environment.\n     *\n     * @param Environment $twig\n     *\/","attributes":[],"arguments":[{"name":"$twig","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"updateSandboxPolicy":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var SandboxExtension $sandbox *\/","attributes":[],"arguments":[{"name":"$twig","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"addTwigPath":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Append a path to Twig's path array.\n     *\n     * @param string $path\n     * @param array  $options\n     *\n     * @throws LoaderError\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addTwigFunction":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a Twig Function.\n     *\n     * @internal Will be made private in 4.0. Use registerTwigFunctions() instead.\n     *\n     * @param string          $name\n     * @param string|callable $callback\n     * @param array           $options\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callback","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"addTwigFilter":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a Twig Filter.\n     *\n     * @internal Will be made private in 4.0. Use registerTwigFilters() instead.\n     *\n     * @param string          $name\n     * @param string|callable $callback\n     * @param array           $options\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callback","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"renderTemplate":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render a Twig template.\n     *\n     * @param string $template\n     * @param array  $context\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return string *\/","attributes":[]},"getBaseDirectory":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return DirectoryInterface *\/","attributes":[]}}},"DatabaseSchemaTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Database schema modification.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"registerExtensionTables":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a set of tables to register.\n     *\n     * <pre>\n     *  return [\n     *      'table_name' => \\Fully\\Qualified\\Table\\ClassName::class,\n     *  ];\n     * <\/pre>\n     *\n     * @return string[]\n     *\/","attributes":[]},"extendDatabaseSchemaServices":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Platforms\\AbstractPlatform $platform *\/","attributes":[]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]}}},"TranslationTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Automatic translation inclusion for an extension.\n *\n * Based upon three factors:\n *  - All translations are in the translations dub-directory of the extension\n *  - Translations are named as en.yml, en_GB.yml, or etc... based upon the locale\n *\n * @author Aaron Valandra <amvalandra@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"extendTranslatorService":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call this in register method.\n     *\n     * @internal\n     *\/","attributes":[]},"loadTranslationsFromDefaultPath":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var DirectoryInterface $translationDirectory *\/","attributes":[]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]},"getBaseDirectory":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return DirectoryInterface *\/","attributes":[]}}},"MenuTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Admin menu handling trait for an extension.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$menuEntries":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var MenuEntry[] *\/","attributes":[]}},"methods":{"registerMenuEntries":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of menu entries to register.\n     *\n     * @return MenuEntry[]\n     *\/","attributes":[]},"extendMenuService":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var MenuEntry $menus *\/","attributes":[]},"addMenuEntry":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a menu option to backend menu.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use registerMenuEntries() instead.\n     *\n     * @param string $label\n     * @param string $path\n     * @param string $icon\n     * @param string $permission\n     *\/","attributes":[],"arguments":[{"name":"$label","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$icon","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$permission","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]}}},"NutTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Adding nut commands trait for an extension.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"registerNutCommands":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of nut commands to register.\n     *\n     * @param Container $container\n     *\n     * @return Command[]\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["Container"],"value":"","phpdoc":"","attributes":[]}]},"extendNutService":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call this in register method.\n     *\n     * @internal\n     *\/","attributes":[]},"addConsoleCommand":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a console command.\n     *\n     * @param Command $command\n     *\n     * @deprecated since 3.0, will be removed in 4.0. Use registerNutCommands() instead.\n     *\/","attributes":[],"arguments":[{"name":"$command","reference":false,"typehint":["Command"],"value":"","phpdoc":"","attributes":[]}]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]}}},"StorageTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Storage helpers.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"registerRepositoryMappings":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a list of entities to map to repositories.\n     *\n     * <pre>\n     *  return [\n     *      'alias' => [\\Entity\\Class::class => \\Repository\\Class::class],\n     *  ];\n     * <\/pre>\n     *\n     * @return array\n     *\/","attributes":[]},"extendRepositoryMapping":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call this in register method.\n     *\n     * @internal\n     *\/","attributes":[]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]}}},"ControllerTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Controller routes trait for an extension.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"registerFrontendRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Define frontend routes here.\n     *\n     * @param ControllerCollection $collection\n     *\/","attributes":[],"arguments":[{"name":"$collection","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"registerBackendRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Define backend routes here.\n     *\n     * @param ControllerCollection $collection\n     *\/","attributes":[],"arguments":[{"name":"$collection","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"onMountRoutes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Mounts the routes defined in registerFrontendRoutes() and registerBackendRoutes().\n     *\n     * @param MountEvent $event\n     *\n     * @internal\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["MountEvent"],"value":"","phpdoc":"","attributes":[]}]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]}}},"AssetTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Asset loading trait for an extension.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$assets":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var AssetInterface[] *\/","attributes":[]},"$loadedAssets":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"registerAssets":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of assets to register. Assets can be a file, snippet, or widget.\n     *\n     * @return AssetInterface[]\n     *\/","attributes":[]},"extendAssetServices":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call this in register method.\n     *\n     * @internal\n     *\n     * @throws \\InvalidArgumentException\n     *\/","attributes":[]},"loadAssets":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Merges assets returned from registerAssets() to our list.\n     *\n     * @throws \\InvalidArgumentException\n     *\/","attributes":[]},"addAsset":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add an file, snippet or widget asset to the render queue.\n     *\n     * @param AssetInterface $asset\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]}]},"addJquery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add jQuery to the output.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"disableJquery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Don't add jQuery to the output.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"normalizeAsset":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Normalizes the path and package name of the asset file.\n     *\n     * @param FileAssetInterface $asset\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["FileAssetInterface"],"value":"","phpdoc":"","attributes":[]}]},"isAbsoluteUrl":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @see \\Symfony\\Component\\Asset\\Package::isAbsoluteUrl\n     *\n     * @param string $url\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]},"getName":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return string *\/","attributes":[]},"getBaseDirectory":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return DirectoryInterface *\/","attributes":[]},"getWebDirectory":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return DirectoryInterface *\/","attributes":[]}}},"ConfigTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Config file handling for extensions.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"registerFields":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Register a list of Bolt fields.\n     *\n     * Example:\n     * <pre>\n     *  return [\n     *      new ColourPickField(),\n     *  ];\n     * <\/pre>\n     *\n     * @return FieldInterface[]\n     *\/","attributes":[]},"extendConfigService":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Call this in register method.\n     *\/","attributes":[]},"getDefaultConfig":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Override this to provide a default configuration,\n     * which will be used in the absence of a config file.\n     *\n     * @return array\n     *\/","attributes":[]},"getConfig":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the config for the extension.\n     *\n     * @return array\n     *\/","attributes":[]},"addConfig":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Merge in a yaml file to the config.\n     *\n     * @param ParsableInterface $file\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":["ParsableInterface"],"value":"","phpdoc":"","attributes":[]}]},"copyDistFile":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Copy config.yml.dist to extension config dir.\n     *\n     * @param FileInterface $file\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return string *\/","attributes":[]},"getVendor":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return string *\/","attributes":[]},"getBaseDirectory":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return DirectoryInterface *\/","attributes":[]},"getContainer":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/** @return Container *\/","attributes":[]}}}}},"\\Bolt\\Logger\\":{"classes":{"FlashLogger":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\logger\\flashbagattachableinterface","\\bolt\\logger\\flashloggerinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Storage logger for FlashBag messages.\n *\n * This class stores messages in memory until they are ready to be dispatched,\n * as this allows them to be set without a session being started and a cookie\n * set when it might not be valid.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$flashes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array $flash *\/","attributes":[]},"$flashBag":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FlashBagInterface|null *\/","attributes":[]}},"methods":{"danger":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"error":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"info":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"success":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"warning":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"configuration":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"clear":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a message.\n     *\n     * @param string $type\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"keys":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"attachFlashBag":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$flashBag","reference":false,"typehint":["FlashBagInterface"],"value":"","phpdoc":"","attributes":[]}]},"isFlashBagAttached":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return whether a FlashBag has been attached.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"Manager":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt's logger service class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]},"$changeRepository":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Repository\\LogChangeRepository *\/","attributes":[]},"$systemRepository":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Repository\\LogSystemRepository *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application                    $app\n     * @param Repository\\LogChangeRepository $changeRepository\n     * @param Repository\\LogSystemRepository $systemRepository\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$changeRepository","reference":false,"typehint":["Repository\\LogChangeRepository"],"value":"","phpdoc":"","attributes":[]},{"name":"$systemRepository","reference":false,"typehint":["Repository\\LogSystemRepository"],"value":"","phpdoc":"","attributes":[]}]},"trim":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Trim the log.\n     *\n     * @param string $log\n     *\n     * @throws \\UnexpectedValueException\n     *\/","attributes":[],"arguments":[{"name":"$log","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"clear":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clear a log.\n     *\n     * @param string $log\n     *\n     * @throws \\UnexpectedValueException\n     *\/","attributes":[],"arguments":[{"name":"$log","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getActivity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a specific activity log.\n     *\n     * @param string $log     The log to query.  Either 'change' or 'system'\n     * @param int    $page\n     * @param int    $amount  Number of results to return\n     * @param array  $options\n     *\n     * @throws \\UnexpectedValueException\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$log","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$page","reference":false,"typehint":[""],"value":1,"phpdoc":"","attributes":[]},{"name":"$amount","reference":false,"typehint":[""],"value":10,"phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getListingData":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the listing data such as title and count.\n     *\n     * @param array $contenttype  The ContentType\n     * @param int   $contentId    The content ID\n     * @param array $queryOptions\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$queryOptions","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}}},"interfaces":{"FlashBagAttachableInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"attachFlashBag":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attach a FlashBag.\n     *\n     * @param FlashBagInterface $flashBag\n     *\/","attributes":[],"arguments":[{"name":"$flashBag","reference":false,"typehint":["FlashBagInterface"],"value":"","phpdoc":"","attributes":[]}]},"isFlashBagAttached":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether a FlashBag has been attached.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"FlashLoggerInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * FlashBag logger interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"CONFIGURATION":{"value":"'configuration'","visibility":"","phpdoc":"","attributes":[]},"SUCCESS":{"value":"'success'","visibility":"","phpdoc":"","attributes":[]},"WARNING":{"value":"'warning'","visibility":"","phpdoc":"","attributes":[]},"ERROR":{"value":"'error'","visibility":"","phpdoc":"","attributes":[]},"INFO":{"value":"'info'","visibility":"","phpdoc":"","attributes":[]},"DANGER":{"value":"'danger'","visibility":"","phpdoc":"","attributes":[]}},"methods":{"danger":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Display a 'danger' message. Shown only to authenticated users.\n     *\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"error":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Display a 'error' message. Shown to all users, even those who aren't authenticated.\n     *\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"info":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Display a 'info' message. Shown to all users, even those who aren't authenticated.\n     *\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"success":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Display a 'success' message. Shown to all users, even those who aren't authenticated.\n     *\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"warning":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Display a 'warning' message. Shown only to authenticated users.\n     *\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"configuration":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Display a 'configuration needed' message. Shown only to authenticated users.\n     *\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a message.\n     *\n     * @param string $type\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a message from the stack.\n     *\n     * @param string $type\n     * @param array  $default\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Has messages for a given type?\n     *\n     * @param string $type\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"clear":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clear out messages.\n     *\/","attributes":[]},"keys":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of all defined types.\n     *\n     * @return array\n     *\/","attributes":[]}}}}},"\\Bolt\\Logger\\Handler\\":{"classes":{"SystemHandler":{"abstract":false,"final":false,"extends":"\\monolog\\handler\\abstractprocessinghandler","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Monolog Database handler for system logging.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]},"$initialized":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$tablename":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     * @param bool|int    $level\n     * @param bool        $bubble\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$level","reference":false,"typehint":[""],"value":"Logger::DEBUG","phpdoc":"","attributes":[]},{"name":"$bubble","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle.\n     *\n     * @param array $record\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$record","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"write":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Token $sessionAuth *\/","attributes":[],"arguments":[{"name":"$record","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"initialize":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialize class parameters.\n     *\/","attributes":[]}}},"RecordChangeHandler":{"abstract":false,"final":false,"extends":"\\monolog\\handler\\abstractprocessinghandler","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Monolog Database handler for record changes (changelog).\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]},"$initialized":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$tablename":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$allowed":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     * @param bool|int    $level\n     * @param bool        $bubble\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$level","reference":false,"typehint":[""],"value":"Logger::DEBUG","phpdoc":"","attributes":[]},{"name":"$bubble","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle.\n     *\n     * @param array $record\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$record","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"write":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$record","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"checkTransaction":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check that the requested log transaction is valid.\n     *\n     * @param array $context\n     *\n     * @throws \\UnexpectedValueException\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getData":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the context data.\n     *\n     * @param array $context\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getContentObject":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the content object.\n     *\n     * @deprecated Deprecated since 3.3. To be removed in v4.\n     *\n     * @param array $contenttype\n     * @param array $values\n     *\n     * @throws StorageException\n     *\n     * @return Content\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$values","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"initialize":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialize class parameters.\n     *\/","attributes":[]},"diff":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $a\n     * @param array $b\n     *\n     * @return array [key, left, right][]\n     *\/","attributes":[],"arguments":[{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$b","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Response\\":{"classes":{"TemplateView":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A view that will be rendered with Twig and converted to a response.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$template":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$context":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var MutableBag *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string   $template\n     * @param iterable $context\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $template\n     *\n     * @return TemplateView\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return MutableBag\n     *\/","attributes":[]},"setContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param iterable $context\n     *\n     * @return TemplateView\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__clone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Don't call directly.\n     *\n     * @internal\n     *\/","attributes":[]}}},"TemplateResponse":{"abstract":false,"final":false,"extends":"\\symfony\\component\\httpfoundation\\response","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Template based response.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$template":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$context":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Bag *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string   $template The template name\n     * @param iterable $context  The context given to the template\n     * @param mixed    $content  The response content, see setContent()\n     * @param int      $status   The response status code\n     * @param array    $headers  An array of response headers\n     *\n     * @throws \\InvalidArgumentException\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"create":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Factory method for chainability.\n     *\n     * @param string   $template The template name\n     * @param iterable $context  The context given to the template\n     * @param mixed    $content  The response content, see setContent()\n     * @param int      $status   The response status code\n     * @param array    $headers  An array of response headers\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Bag\n     *\/","attributes":[]},"setContext":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param iterable $context\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__clone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Don't call directly.\n     *\n     * @internal\n     *\/","attributes":[]}}},"BoltResponse":{"abstract":false,"final":false,"extends":"\\symfony\\component\\httpfoundation\\response","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * BoltResponse uses a renderer and context variables\n * to create the response content.\n *\n * @deprecated Deprecated since 3.3, use TemplateResponse instead.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$template":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Template *\/","attributes":[]},"$context":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$compiled":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$stopwatch":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Stopwatch|null *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Template $template An object that is able to render a template with context\n     * @param array    $context  An array of context variables\n     * @param array    $globals  An array of global context variables\n     * @param int      $status   The response status code\n     * @param array    $headers  An array of response headers\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":["Template"],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$globals","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"create":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Factory method for chainability.\n     *\n     * @param Template $template An object that is able to render a template with context\n     * @param array    $context  An array of context variables\n     * @param array    $globals  An array of global context variables\n     * @param int      $status   The response status code\n     * @param array    $headers  An array of response headers\n     *\n     * @return \\Bolt\\Response\\BoltResponse\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$globals","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"setStopwatch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$stopwatch","reference":false,"typehint":["Stopwatch"],"value":"","phpdoc":"","attributes":[]}]},"setTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the Renderer used to create this Response.\n     *\n     * @param Template $template A template object\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":["Template"],"value":"","phpdoc":"","attributes":[]}]},"setContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the context variables for this Response.\n     *\n     * @param array $context\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the template.\n     *\n     * @return Template\n     *\/","attributes":[]},"getContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the context.\n     *\n     * @return array\n     *\/","attributes":[]},"getGlobalContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets globals from the template.\n     *\n     * @return array\n     *\/","attributes":[]},"addGlobals":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds globals to the template.\n     *\n     * @param array $globals\n     *\/","attributes":[],"arguments":[{"name":"$globals","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addGlobalContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a global to the template.\n     *\n     * @param string $name\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTemplateName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the name of the main loaded template.\n     *\n     * @return string\n     *\/","attributes":[]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the Response as a string.\n     *\n     * @return string The Response as HTML\n     *\/","attributes":[]},"getContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets HTML content for the response.\n     *\n     * @return string\n     *\/","attributes":[]},"isCompiled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether the response has been compiled.\n     *\n     * @return bool\n     *\/","attributes":[]},"compile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compiles the template using the context.\n     *\/","attributes":[]},"handleException":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The __toString method isn't allowed to throw exceptions so we turn them into an error instead.\n     *\n     * @param \\Exception $e\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$e","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Asset\\":{"classes":{"JsonManifestVersionStrategy":{"abstract":false,"final":true,"extends":"","implements":["\\symfony\\component\\asset\\versionstrategy\\versionstrategyinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * @internal\n * @deprecated to be replaced with upstream implementation in v4\n *\n * The manifest file uses the following format:\n *     {\n *         \"main.js\": \"main.abc123.js\",\n *         \"css\/styles.css\": \"css\/styles.555abc.css\"\n *     }\n *\/","attributes":[],"php":false,"properties":{"$manifestFile":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FileInterface|JsonFile *\/","attributes":[]},"$manifestData":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array|null *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$manifestFile","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]}]},"getVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"applyVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getManifestPath":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Target":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt Snippet target location.\n *\n * This class categorizes all possible snippet locations in constants.\n *\/","attributes":[],"php":false,"constants":{"BEFORE_JS":{"value":"'beforejs'","visibility":"","phpdoc":"","attributes":[]},"AFTER_JS":{"value":"'afterjs'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_LOGIN_MIDDLE":{"value":"'login_middle'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_LOGIN_BOTTOM":{"value":"'login_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_EDITFILE_BOTTOM":{"value":"'editfile_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_LOGIN_TOP":{"value":"'login_top'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_FILES_BOTTOM":{"value":"'files_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_EDITFILE_BELOW_HEADER":{"value":"'editfile_below_header'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_FILES_BELOW_HEADER":{"value":"'files_below_header'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_EDITCONTENT_BOTTOM":{"value":"'editcontent_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_EDITCONTENT_BELOW_HEADER":{"value":"'editcontent_below_header'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_EDITCONTENT_ASIDE_BOTTOM":{"value":"'editcontent_aside_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_EDITCONTENT_ASIDE_MIDDLE":{"value":"'editcontent_aside_middle'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_EDITCONTENT_ASIDE_TOP":{"value":"'editcontent_aside_top'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_OVERVIEW_BOTTOM":{"value":"'overview_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_OVERVIEW_BELOW_HEADER":{"value":"'overview_below_header'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_OVERVIEW_ASIDE_BOTTOM":{"value":"'overview_aside_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_OVERVIEW_ASIDE_MIDDLE":{"value":"'overview_aside_middle'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_OVERVIEW_ASIDE_TOP":{"value":"'overview_aside_top'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_DASHBOARD_BOTTOM":{"value":"'dashboard_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_DASHBOARD_BELOW_HEADER":{"value":"'dashboard_below_header'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_DASHBOARD_ASIDE_BOTTOM":{"value":"'dashboard_aside_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_DASHBOARD_ASIDE_MIDDLE":{"value":"'dashboard_aside_middle'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_BACK_DASHBOARD_ASIDE_TOP":{"value":"'dashboard_aside_top'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_FRONT_ASIDE_TOP":{"value":"'aside_top'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_FRONT_ASIDE_MIDDLE":{"value":"'aside_middle'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_FRONT_ASIDE_BOTTOM":{"value":"'aside_bottom'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_FRONT_FOOTER":{"value":"'footer'","visibility":"","phpdoc":"","attributes":[]},"AFTER_BODY_JS":{"value":"'afterbodyjs'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_FRONT_MAIN_TOP":{"value":"'main_top'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_FRONT_MAIN_BREAK":{"value":"'main_break'","visibility":"","phpdoc":"","attributes":[]},"WIDGET_FRONT_MAIN_BOTTOM":{"value":"'main_bottom'","visibility":"","phpdoc":"","attributes":[]},"AFTER_HEAD_JS":{"value":"'afterheadjs'","visibility":"","phpdoc":"","attributes":[]},"BEFORE_BODY_CSS":{"value":"'beforebodycss'","visibility":"","phpdoc":"","attributes":[]},"AFTER_BODY_CSS":{"value":"'afterbodycss'","visibility":"","phpdoc":"","attributes":[]},"BEFORE_BODY_JS":{"value":"'beforebodyjs'","visibility":"","phpdoc":"","attributes":[]},"AFTER_HEAD_META":{"value":"'afterheadmeta'","visibility":"","phpdoc":"","attributes":[]},"BEFORE_HEAD_CSS":{"value":"'beforeheadcss'","visibility":"","phpdoc":"","attributes":[]},"AFTER_HEAD_CSS":{"value":"'afterheadcss'","visibility":"","phpdoc":"","attributes":[]},"BEFORE_HEAD_JS":{"value":"'beforeheadjs'","visibility":"","phpdoc":"","attributes":[]},"END_OF_HTML":{"value":"'endofhtml'","visibility":"","phpdoc":"","attributes":[]},"END_OF_BODY":{"value":"'endofbody'","visibility":"","phpdoc":"","attributes":[]},"BEFORE_HEAD_META":{"value":"'beforeheadmeta'","visibility":"","phpdoc":"","attributes":[]},"AFTER_HTML":{"value":"'afterhtml'","visibility":"","phpdoc":"","attributes":[]},"START_OF_HEAD":{"value":"'startofhead'","visibility":"","phpdoc":"","attributes":[]},"AFTER_META":{"value":"'aftermeta'","visibility":"","phpdoc":"","attributes":[]},"START_OF_BODY":{"value":"'startofbody'","visibility":"","phpdoc":"","attributes":[]},"END_OF_HEAD":{"value":"'endofhead'","visibility":"","phpdoc":"","attributes":[]},"AFTER_CSS":{"value":"'aftercss'","visibility":"","phpdoc":"","attributes":[]},"BEFORE_CSS":{"value":"'beforecss'","visibility":"","phpdoc":"","attributes":[]}},"methods":{"listAll":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns all possible target locations (which are constants).\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @return array\n     *\/","attributes":[]}}},"BoltVersionStrategy":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\asset\\versionstrategy\\versionstrategyinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * A version strategy that hashes a base salt, path, and timestamp of file.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$directory":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var DirectoryInterface *\/","attributes":[]},"$baseSalt":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param DirectoryInterface $directory\n     * @param string             $baseSalt\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$baseSalt","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"applyVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Injector":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class for matching HTML elements and injecting text.\n *\n * @author Bob den Otter <bob@twokings.nl>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getMap":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a map of function names to locations.\n     *\n     * @return array\n     *\/","attributes":[]},"inject":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param AssetInterface $asset\n     * @param string         $location\n     * @param Response       $response\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"headTagStart":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML into the start of the head section of\n     * an HTML page, right after the <head> tag.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"headTagEnd":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML into the head section of an HTML\n     * page, right before the <\/head> tag.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"bodyTagStart":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML into the start of the head section of\n     * an HTML page, right after the <body> tag.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"bodyTagEnd":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML into the body section of an HTML\n     * page, right before the <\/body> tag.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"htmlTagEnd":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML into the html section of an HTML\n     * page, right before the <\/html> tag.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"metaTagsAfter":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML into the head section of an HTML page.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"cssTagsAfter":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML into the head section of an HTML page.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"cssTagsBefore":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML before the first CSS include in the page.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"jsTagsBefore":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML before the first javascript include in the page.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"jsTagsAfter":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to insert some HTML after the last javascript include.\n     * First in the head section, but if there is no script in the head, place\n     * it anywhere.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     * @param bool           $insidehead\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$insidehead","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getMatches":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a set of matches.\n     *\n     * @param string $rawHtml        The original HTML\n     * @param string $htmlTag        HTML tag fragment we're matching, e.g. '<head' or '<\/head'\n     * @param bool   $matchRemainder TRUE matches the remainder of the line, not just the tag - (.*)\n     * @param bool   $matchAll       TRUE returns all matched instances - preg_match_all()\n     *\n     * @return string[]|false\n     *\/","attributes":[],"arguments":[{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$htmlTag","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$matchRemainder","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$matchAll","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"tagSoup":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Since we're serving tag soup, just append the tag to the HTML we're given.\n     *\n     * @param AssetInterface $asset\n     * @param string         $rawHtml\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["AssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$rawHtml","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"interfaces":{"QueueInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface for asset queues.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"process":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Insert all queued assets into HTML response.\n     *\n     * @param Request  $request\n     * @param Response $response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"getQueue":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the assets in this queue.\n     *\n     * @return AssetInterface[]|array\n     *\/","attributes":[]},"clear":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clears the queue.\n     *\/","attributes":[]}}},"AssetInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface for assets.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert object into a usable string.\n     *\n     * @return string\n     *\/","attributes":[]},"getPriority":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the priority of the asset used for sorting.\n     *\n     * @return int\n     *\/","attributes":[]},"setPriority":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the asset's priority.\n     *\n     * @param int $priority\n     *\n     * @return AssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$priority","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getZone":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the asset's zone. Either 'frontend' or 'backend'.\n     *\n     * @return string|null\n     *\/","attributes":[]},"setZone":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the asset zone. Either 'frontend' or 'backend'.\n     *\n     * @param string $zone\n     *\n     * @return AssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$zone","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLocation":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the assets's target location.\n     *\n     * @return string|null\n     *\/","attributes":[]},"setLocation":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Target locational element.\n     *\n     * @param string $location\n     *\n     * @return AssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"traits":{"AssetSortTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait for handling queue priority sorting.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"sort":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Do a Schwartzian Transform for stable sort.\n     *\n     * @see http:\/\/en.wikipedia.org\/wiki\/Schwartzian_transform\n     *\n     * @param AssetInterface[] $assets\n     *\n     * @return AssetInterface[]\n     *\/","attributes":[],"arguments":[{"name":"$assets","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"CallableInvokerTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait for handling callables.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"invokeCallable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the return value from the callable.\n     *\n     * Parameters can be can handled in three ways:\n     *   - null              - Nothing passed to the callback\n     *   - Indexed array     - Value of each element will be passed to function in order\n     *   - Associative array - Key names will attempt to match to the callable function variable names\n     *\n     * @param callable $callback\n     * @param array    $callbackArguments\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]},{"name":"$callbackArguments","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getArguments":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an ordered list of arguments.\n     *\n     * @param callable $callback\n     * @param array    $callbackArguments\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]},{"name":"$callbackArguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getParameters":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var object $callback *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Asset\\Widget\\":{"classes":{"Queue":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\asset\\queueinterface"],"use":["\\bolt\\asset\\assetsorttrait"],"useoptions":[""],"phpdoc":"\/**\n * Widget queue processor.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Bob den Otter <bob@twokings.nl>\n *\/","attributes":[],"php":false,"properties":{"$queue":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var WidgetAssetInterface[] Queue with snippets of HTML to insert. *\/","attributes":[]},"$injector":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Asset\\Injector *\/","attributes":[]},"$cache":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\Common\\Cache\\CacheProvider *\/","attributes":[]},"$render":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Environment *\/","attributes":[]},"$deferAdded":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * NOTE: Constructor type hint for Environment omitted for BC, add in v4\n     *\n     * @param Injector      $injector\n     * @param CacheProvider $cache\n     * @param Environment   $render\n     *\/","attributes":[],"arguments":[{"name":"$injector","reference":false,"typehint":["Injector"],"value":"","phpdoc":"","attributes":[]},{"name":"$cache","reference":false,"typehint":["CacheProvider"],"value":"","phpdoc":"","attributes":[]},{"name":"$render","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a widget to the queue.\n     *\n     * @param WidgetAssetInterface $widget\n     *\/","attributes":[],"arguments":[{"name":"$widget","reference":false,"typehint":["WidgetAssetInterface"],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a widget from the queue.\n     *\n     * @param string $key\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRendered":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a rendered (and potentially cached) widget from the queue.\n     *\n     * @param string $key\n     *\n     * @return Markup|string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"clear":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"process":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"getQueue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the queued widgets.\n     *\n     * @return WidgetAssetInterface[]\n     *\/","attributes":[]},"hasItemsInQueue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"Zone::FRONTEND","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the number of queued widgets.\n     *\n     * @param string $location Location (e.g. 'dashboard_aside_top')\n     * @param string $zone     Either Zone::FRONTEND or Zone::BACKEND\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"Zone::FRONTEND","phpdoc":"","attributes":[]}]},"countItemsInQueue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"Zone::FRONTEND","phpdoc":"","attributes":[]}]},"count":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the number of queued widgets.\n     *\n     * @param string $location Location (e.g. 'dashboard_aside_top')\n     * @param string $zone     Either Zone::FRONTEND or Zone::BACKEND\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"Zone::FRONTEND","phpdoc":"","attributes":[]}]},"render":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render a location's widget.\n     *\n     * @param string $location        Location (e.g. 'dashboard_aside_top')\n     * @param string $zone            Either Zone::FRONTEND or Zone::BACKEND\n     * @param string $wrapperTemplate Template file for wrapper\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"Zone::FRONTEND","phpdoc":"","attributes":[]},{"name":"$wrapperTemplate","reference":false,"typehint":[""],"value":"'widgetwrapper.twig'","phpdoc":"","attributes":[]}]},"getHtml":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the HTML content from the widget.\n     *\n     * @param WidgetAssetInterface $widget\n     *\n     * @throws \\Exception\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$widget","reference":false,"typehint":["WidgetAssetInterface"],"value":"","phpdoc":"","attributes":[]}]},"addDeferredJavaScript":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Insert a snippet of Javascript to fetch the actual widget's contents.\n     *\n     * @param WidgetAssetInterface $widget\n     * @param Response             $response\n     *\/","attributes":[],"arguments":[{"name":"$widget","reference":false,"typehint":["WidgetAssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]}}},"Widget":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\asset\\widget\\widgetassetinterface"],"use":["\\bolt\\asset\\callableinvokertrait"],"useoptions":[""],"phpdoc":"\/**\n * Widget objects.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Bob den Otter <bob@twokings.nl>\n *\/","attributes":[],"php":false,"properties":{"$key":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$zone":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$location":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$callback":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var callable *\/","attributes":[]},"$callbackArguments":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$content":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$class":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$prefix":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$postfix":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$defer":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$priority":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$cacheDuration":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$rendered":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"create":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return WidgetAssetInterface\n     *\/","attributes":[]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getKey":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setKey":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getZone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setZone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$zone","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLocation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setLocation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCallback":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setCallback":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getCallbackArguments":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setCallbackArguments":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$callbackArguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPrefix":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrefix":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPostfix":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPostfix":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$postfix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isDeferred":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setDefer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$defer","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPriority":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPriority":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$priority","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCacheDuration":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setCacheDuration":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$cacheDuration","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"toString":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Either return the passed in 'content' or the result of the callback.\n     *\n     * @return string\n     *\/","attributes":[]}}}},"interfaces":{"WidgetAssetInterface":{"abstract":false,"final":false,"extends":"\\arrayaccess","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Widget assets interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getKey":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the wiget's key.\n     *\n     * @return string|null\n     *\/","attributes":[]},"setKey":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the widget (semi-) unique key.\n     *\n     * @internal\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[]},"getCallback":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the optional content provider callback function.\n     *\n     * callable|null\n     *\/","attributes":[]},"setCallback":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set\/clear the optional content provider callback function.\n     *\n     * @param callable $callback\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getCallbackArguments":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the callback function arguments.\n     *\n     * @return array|null\n     *\/","attributes":[]},"setCallbackArguments":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set\/clear the arguments to pass to callback.\n     *\n     * @param array $callbackArguments\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$callbackArguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the static HTML content for the widget.\n     *\n     * @return string|null\n     *\/","attributes":[]},"setContent":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the static HTML content for the widget.\n     *\n     * @param string $content\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getClass":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the HTML class to use for the widget's holder div.\n     *\n     * @return string|null\n     *\/","attributes":[]},"setClass":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the HTML class to use for the widget's holder div.\n     *\n     * @param string $class\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPrefix":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the HTML to be applied before the widget's output.\n     *\n     * @return string|null\n     *\/","attributes":[]},"setPrefix":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the HTML to be applied before the widget's output.\n     *\n     * @param string $prefix\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPostfix":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the HTML to be applied after the widget's output.\n     *\n     * @return string|null\n     *\/","attributes":[]},"setPostfix":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the HTML to be applied after the widget's output.\n     *\n     * @param string $postfix\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$postfix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isDeferred":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the widget is set to be lazy loaded.\n     *\n     * @return bool\n     *\/","attributes":[]},"setDefer":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set\/unset the lazy loading flag fo the widget content.\n     *\n     * @param bool $defer\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$defer","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPriority":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the widget's render priroity in the target position.\n     *\n     * @return int\n     *\/","attributes":[]},"setPriority":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the widget's render priroity in the target position.\n     *\n     * @param int $priority\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$priority","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCacheDuration":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the number of seconds to cache the widgets content.\n     *\n     * @return int\n     *\/","attributes":[]},"setCacheDuration":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the number of seconds to cache the widgets content.\n     *\n     * @param int $cacheDuration\n     *\n     * @return WidgetAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$cacheDuration","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Asset\\File\\":{"classes":{"FileAssetBase":{"abstract":true,"final":false,"extends":"","implements":["\\bolt\\asset\\file\\fileassetinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * File asset base class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$type":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$path":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$packageName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$url":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$late":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$priority":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$location":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$attributes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$zone":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $path\n     * @param string $packageName\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$packageName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"create":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $path\n     * @param string $packageName\n     *\n     * @return FileAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$packageName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFileName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setFileName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $path\n     *\n     * @return FileAssetBase\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPackageName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setPackageName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $packageName\n     *\n     * @return FileAssetBase\n     *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUrl":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setUrl":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $url\n     *\n     * @return FileAssetBase\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isLate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setLate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$late","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPriority":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPriority":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$priority","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLocation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setLocation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAttributes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$raw","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"setAttributes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$attributes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addAttribute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$attribute","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getZone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setZone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$zone","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"JavaScript":{"abstract":false,"final":false,"extends":"\\bolt\\asset\\file\\fileassetbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * JavaScript file object class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$type":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"Queue":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\asset\\queueinterface"],"use":["\\bolt\\asset\\assetsorttrait"],"useoptions":[""],"phpdoc":"\/**\n * File asset queue processor.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Bob den Otter <bob@twokings.nl>\n *\/","attributes":[],"php":false,"properties":{"$injector":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Asset\\Injector *\/","attributes":[]},"$packages":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Packages *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$stylesheet":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FileAssetInterface[] *\/","attributes":[]},"$javascript":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FileAssetInterface[] *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Injector $injector\n     * @param Packages $packages\n     * @param Config   $config\n     *\/","attributes":[],"arguments":[{"name":"$injector","reference":false,"typehint":["Injector"],"value":"","phpdoc":"","attributes":[]},{"name":"$packages","reference":false,"typehint":["Packages"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a file asset to the queue.\n     *\n     * @param FileAssetInterface $asset\n     *\n     * @throws \\InvalidArgumentException\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["FileAssetInterface"],"value":"","phpdoc":"","attributes":[]}]},"process":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var FileAssetInterface $asset *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"getQueue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"clear":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"processAsset":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process a single asset.\n     *\n     * @param FileAssetInterface $asset\n     * @param Request            $request\n     * @param Response           $response\n     *\/","attributes":[],"arguments":[{"name":"$asset","reference":false,"typehint":["FileAssetInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"addJquery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Insert jQuery, if it's not inserted already.\n     *\n     * Some of the patterns that 'match' are:\n     * - jquery.js\n     * - jquery.min.js\n     * - jquery-latest.js\n     * - jquery-latest.min.js\n     * - jquery-1.8.2.min.js\n     * - jquery-1.5.js\n     *\n     * @param Request  $request\n     * @param Response $response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]}}},"Stylesheet":{"abstract":false,"final":false,"extends":"\\bolt\\asset\\file\\fileassetbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Cascading stylesheet file object class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$type":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}},"interfaces":{"FileAssetInterface":{"abstract":false,"final":false,"extends":"\\bolt\\asset\\assetinterface","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * File asset interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getType":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the asset's type.\n     *\n     * @return string\n     *\/","attributes":[]},"getPackageName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the package name.\n     *\n     * @return string\n     *\/","attributes":[]},"setPackageName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the package name.\n     *\n     * @param string $package\n     *\n     * @return FileAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$package","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPath":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the asset's path.\n     *\n     * @return string\n     *\/","attributes":[]},"setPath":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the asset's path.\n     *\n     * @param string $path\n     *\n     * @return FileAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUrl":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the asset's url.\n     *\n     * @return string\n     *\/","attributes":[]},"setUrl":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the asset's url.\n     *\n     * @param string $url\n     *\n     * @return FileAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isLate":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the asset is set to load late.\n     *\n     * @return bool\n     *\/","attributes":[]},"setLate":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the asset to load late.\n     *\n     * @param bool $late\n     *\n     * @return FileAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$late","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAttributes":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the asset's attributes.\n     *\n     * @param bool $raw\n     *\n     * @return string|array\n     *\/","attributes":[],"arguments":[{"name":"$raw","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"setAttributes":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the asset's attributes.\n     *\n     * @param array $attributes\n     *\n     * @return FileAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$attributes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addAttribute":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add and attributes for the asset.\n     *\n     * @param string $attribute\n     *\n     * @return FileAssetInterface\n     *\/","attributes":[],"arguments":[{"name":"$attribute","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Asset\\Snippet\\":{"classes":{"Queue":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\asset\\queueinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Snippet queue processor.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Bob den Otter <bob@twokings.nl>\n *\/","attributes":[],"php":false,"properties":{"$queue":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Snippet[] Queue with snippets of HTML to insert. *\/","attributes":[]},"$injector":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Asset\\Injector *\/","attributes":[]},"$cache":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\Common\\Cache\\CacheProvider *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Injector      $injector\n     * @param CacheProvider $cache\n     *\/","attributes":[],"arguments":[{"name":"$injector","reference":false,"typehint":["Injector"],"value":"","phpdoc":"","attributes":[]},{"name":"$cache","reference":false,"typehint":["CacheProvider"],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Insert a snippet. And by 'insert' we actually mean 'add it to the queue,\n     * to be processed later'.\n     *\n     * @param SnippetAssetInterface $snippet\n     *\/","attributes":[],"arguments":[{"name":"$snippet","reference":false,"typehint":["SnippetAssetInterface"],"value":"","phpdoc":"","attributes":[]}]},"clear":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"process":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Snippet $asset *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"getQueue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the queued snippets.\n     *\n     * @return \\Bolt\\Asset\\Snippet\\Snippet[]\n     *\/","attributes":[]}}},"Snippet":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\asset\\snippet\\snippetassetinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Snippet objects.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$priority":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$location":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$callback":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var callable|string *\/","attributes":[]},"$callbackArguments":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$zone":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"create":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return SnippetAssetInterface\n     *\/","attributes":[]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getPriority":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPriority":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$priority","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLocation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setLocation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCallback":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setCallback":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCallbackArguments":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setCallbackArguments":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$callbackArguments","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getZone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setZone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$zone","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCallableResult":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the output from the callback.\n     *\n     * @throws \\RuntimeException\n     *\n     * @return string\n     *\/","attributes":[]}}}},"interfaces":{"SnippetAssetInterface":{"abstract":false,"final":false,"extends":"\\bolt\\asset\\assetinterface","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Snippet asset interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getCallback":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get callback or HTML string.\n     *\n     * @return callable|string\n     *\/","attributes":[]},"setCallback":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set callback or HTML string.\n     *\n     * @param callable|string $callback\n     *\n     * @return Snippet\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCallbackArguments":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the callback arguments.\n     *\n     * @return array\n     *\/","attributes":[]},"setCallbackArguments":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the callback arguments.\n     *\n     * @param array $callbackArguments\n     *\n     * @return Snippet\n     *\/","attributes":[],"arguments":[{"name":"$callbackArguments","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Embed\\":{"classes":{"Resolver":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Embed resolver service.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$embedFactory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var callable *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param callable $embedFactory\n     *\/","attributes":[],"arguments":[{"name":"$embedFactory","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"embed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Embed\\Providers\\Provider $provider *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":["UriInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$providerName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"image":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the best embeded image from a given URL.\n     *\n     * @param UriInterface $url\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":["UriInterface"],"value":"","phpdoc":"","attributes":[]}]},"images":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return embed images from a given URL.\n     *\n     * @param UriInterface $url\n     *\n     * @return array Values: url, width, height, size, mime (array)\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":["UriInterface"],"value":"","phpdoc":"","attributes":[]}]},"getUrlAdapter":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an API adapter matching the pattern of the given URL.\n     *\n     * @param UriInterface $url\n     *\n     * @return \\Embed\\Adapters\\Adapter\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":["UriInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"GuzzleDispatcher":{"abstract":false,"final":false,"extends":"","implements":["\\embed\\http\\dispatcherinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Guzzle dispatcher for the embed\/embed service.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$client":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Client *\/","attributes":[]},"$responses":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Embed\\Http\\AbstractResponse[] *\/","attributes":[]},"$handlerStack":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var HandlerStack *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Client       $client\n     * @param HandlerStack $handlerStack\n     *\/","attributes":[],"arguments":[{"name":"$client","reference":false,"typehint":["Client"],"value":"","phpdoc":"","attributes":[]},{"name":"$handlerStack","reference":false,"typehint":["HandlerStack"],"value":"","phpdoc":"","attributes":[]}]},"dispatch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":["Url"],"value":"","phpdoc":"","attributes":[]}]},"dispatchImages":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Psr7\\Response $response *\/","attributes":[],"arguments":[{"name":"$urls","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getGuzzleResponse":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Execute a Guzzle request, and return an API response.\n     *\n     * @param Url   $url\n     * @param array $options\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":["Url"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getMimeType":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Psr7\\Response $response\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$response","reference":false,"typehint":["Psr7\\Response"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Translation\\":{"classes":{"TranslationFile":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles translation file dependent tasks.\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]},"$domain":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string Requested Domain. *\/","attributes":[]},"$absPath":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string Path to the translation file. *\/","attributes":[]},"$relPath":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string Project relative path to the translation file. *\/","attributes":[]},"$translatables":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array List of all translatable Strings found. *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     * @param string      $domain Requested resource\n     * @param string      $locale Requested locale\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$domain","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$locale","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"buildPath":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the path to a tranlsation resource.\n     *\n     * @param string $domain Requested resource\n     * @param string $locale Requested locale\n     *\n     * @return array [absolute path, relative path]\n     *\/","attributes":[],"arguments":[{"name":"$domain","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$locale","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"path":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the path to a translation resource.\n     *\n     * @return array [absolute path, relative path]\n     *\/","attributes":[]},"addTranslatable":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a string to the internal list of translatable strings.\n     *\n     * @param string $text\n     *\/","attributes":[],"arguments":[{"name":"$text","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"scanTwigFiles":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Symfony\\Component\\Finder\\SplFileInfo $file *\/","attributes":[]},"scanPhpFiles":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Scan php files for  __('...' and __(\"...\" and add the strings found to the list of translatable strings.\n     *\n     * All translatable strings have to be called with:\n     * __(\"text\", params=[], domain='messages', locale=null) \/\/ $app['translator']->trans()\n     * __(\"text\", count, params=[], domain='messages', locale=null) \/\/ $app['translator']->transChoice()\n     *\/","attributes":[]},"gatherTranslatableStrings":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find all twig templates and bolt php code, extract translatables strings, merge with existing translations.\n     *\/","attributes":[]},"buildNewContent":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Builds the translations file data with added translations.\n     *\n     * @param array $newTranslations   New translation data to write\n     * @param array $savedTranslations Translation data read from file\n     * @param array $hinting           Translation data that can be used as hinting\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$newTranslations","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$savedTranslations","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$hinting","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"readSavedTranslations":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parses translations file and returns translations.\n     *\n     * @return array|null Translations found\n     *\/","attributes":[]},"contentInfo":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the content of the info translation file or the fallback file.\n     *\n     * @return string\n     *\/","attributes":[]},"contentMessages":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets all translatable strings and returns a translationsfile for messages or contenttypes.\n     *\n     * @return string\n     *\/","attributes":[]},"content":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets all translatable strings and returns a translations file for\n     * messages.\n     *\n     * @return string\n     *\/","attributes":[]},"isWriteAllowed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if translations file is allowed to write to.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"ContenttypesKeygen":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Generates translations keys for contenttypes.\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]},"$hints":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array Hints for translations. *\/","attributes":[]},"$translation":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array Translated strings. *\/","attributes":[]},"$ctnames":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array ContentType names. *\/","attributes":[]},"$saved":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array Translations read from file. *\/","attributes":[]},"$translatables":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array Translatable strings. *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param \\Silex\\Application $app\n     * @param array              $translatables\n     * @param array              $savedTranslations\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$translatables","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$savedTranslations","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"translations":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns translations.\n     *\n     * @return array\n     *\/","attributes":[]},"hints":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns hints.\n     *\n     * @return array\n     *\/","attributes":[]},"generate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generates translations keys for contenttypes.\n     *\/","attributes":[]},"generateNamesDescription":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generates keys for contenttypes names and description and save found names for later usage.\n     *\/","attributes":[]},"generateGroups":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generates keys for tab group names.\n     *\/","attributes":[]},"generateFromGeneric":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generates strings for contenttypes from generic translations.\n     *\/","attributes":[]},"slugifyKey":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Only allow \"a-z_\" in key parts.\n     *\n     * @param string $key\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isSaved":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Test if a translation already exists for a key.\n     *\n     * @param string $key\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fallback":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a fallback translation for a key or false if none can be found.\n     *\n     * @param string $key\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Translator":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles translation.\n *\/","attributes":[],"php":false,"methods":{"htmlencodeParams":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Encode array values as html special chars.\n     *\n     * @param array  $params    Parameter to encode\n     * @param string $removeKey If not empty the key is removed from result\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$params","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$removeKey","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"trans":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Low level translation.\n     *\n     * @param string $key\n     * @param array  $params\n     * @param string $domain\n     * @param mixed  $locale\n     * @param mixed  $default\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$domain","reference":false,"typehint":[""],"value":"'messages'","phpdoc":"","attributes":[]},{"name":"$locale","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"__":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Translation shortcut placeholder.\n     *\n     * Special parameter keys:\n     * 'DEFAULT': the value is returns instead of the key of no translation is found\n     * 'NUMBER': transChoice is triggered with the value as count value\n     *\n     * @param mixed  $key    The message ID. If an array is passed, a sanitized key is built\n     * @param array  $params Parameter for string replacement and commands ('DEFAULT', 'NUMBER')\n     * @param string $domain\n     * @param mixed  $locale\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$domain","reference":false,"typehint":[""],"value":"'messages'","phpdoc":"","attributes":[]},{"name":"$locale","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]}}},"LazyTranslator":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Lazy-loading Translator.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$key":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$params":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$domain":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$locale":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $key\n     * @param array  $params\n     * @param string $domain\n     * @param string $locale\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$domain","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$locale","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $key\n     * @param array  $params\n     * @param string $domain\n     * @param null   $locale\n     *\n     * @return LazyTranslator\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$domain","reference":false,"typehint":[""],"value":"'messages'","phpdoc":"","attributes":[]},{"name":"$locale","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}}}},"\\Bolt\\Security\\Random\\":{"classes":{"Generator":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Random generator.\n *\n * NOTE: PHP 5 polyfill for random_bytes() and random_int() provided by\n * paragonie\/random_compat Composer library.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"generate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate a random byte string.\n     *\n     * @param int $length\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$length","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"generateInt":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate a random integer.\n     *\n     * @param int $min Lower bound of the range to generate\n     * @param int $max Upper bound of the range to generate\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$min","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]},{"name":"$max","reference":false,"typehint":[""],"value":"PHP_INT_MAX","phpdoc":"","attributes":[]}]},"generateString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate a random string.\n     *\n     * @param int $length\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$length","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\AccessControl\\":{"classes":{"Login":{"abstract":false,"final":false,"extends":"\\bolt\\accesscontrol\\accesschecker","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Login authentication handling.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$passwordFactory":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Factory *\/","attributes":[]},"$authTokenName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$csrfTokenManager":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var CsrfTokenManagerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"login":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attempt to login a user with the given password. Accepts username or\n     * email.\n     *\n     * @param string             $userName\n     * @param string             $password\n     * @param AccessControlEvent $event\n     *\n     * @throws AccessControlException\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$userName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$password","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$event","reference":false,"typehint":["AccessControlEvent"],"value":"","phpdoc":"","attributes":[]}]},"loginCheckPassword":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check a user login request for username\/password combinations.\n     *\n     * @param string             $userName\n     * @param string             $password\n     * @param AccessControlEvent $event\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$userName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$password","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$event","reference":false,"typehint":["AccessControlEvent"],"value":"","phpdoc":"","attributes":[]}]},"loginCheckAuthtoken":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attempt to login a user via the bolt_authtoken cookie.\n     *\n     * @param string             $authCookie\n     * @param AccessControlEvent $event\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$authCookie","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$event","reference":false,"typehint":["AccessControlEvent"],"value":"","phpdoc":"","attributes":[]}]},"getUserEntity":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the user record entity if it exists.\n     *\n     * @param string $userName\n     *\n     * @return Entity\\Users|null\n     *\/","attributes":[],"arguments":[{"name":"$userName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"loginFinish":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finish user login process(es).\n     *\n     * @param Entity\\Users $userEntity\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$userEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"loginFailed":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add error messages to logs and update the user.\n     *\n     * @param Entity\\Users $userEntity\n     *\n     * @return false\n     *\/","attributes":[],"arguments":[{"name":"$userEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"updateUserLogin":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update the user record with latest login information.\n     *\n     * @param Entity\\Users $userEntity\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$userEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"updateUserShadowLogin":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove expired shadow login data.\n     *\n     * @param Entity\\Users $userEntity\n     *\n     * @return Entity\\Users\n     *\/","attributes":[],"arguments":[{"name":"$userEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"updateAuthToken":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the Authtoken cookie and DB-entry. If it's already present, update it.\n     *\n     * @param Entity\\Users $userEntity\n     *\n     * @throws DriverException\n     *\n     * @return Entity\\Authtoken\n     *\/","attributes":[],"arguments":[{"name":"$userEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"throttleUntil":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Calculate the amount of time until we should throttle login attempts for\n     * a user.\n     *\n     * The amount is increased exponentially with each attempt: 1, 4, 9, 16, 25,\n     * 36\u2026 seconds.\n     *\n     * Note: I just realized this is conceptually wrong: we should throttle\n     * based on remote_addr, not username. So, this isn't used, yet.\n     *\n     * @param int $attempts\n     *\n     * @return \\DateTime\n     *\/","attributes":[],"arguments":[{"name":"$attempts","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Permissions":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class implements role-based permissions.\n *\/","attributes":[],"php":false,"constants":{"ROLE_ROOT":{"value":"'root'","visibility":"","phpdoc":"\/**\n     * Superuser role; if assigned to a user, this role overrides all\n     * permission checks, granting everything - pretty much like the 'root'\n     * user on *nix systems.\n     *\/","attributes":[]},"ROLE_OWNER":{"value":"'owner'","visibility":"","phpdoc":"\/**\n     * A special role that is used to tag the owner of a resource; it is only\n     * valid for permission checks that are specific to one particular content\n     * item.\n     *\/","attributes":[]},"ROLE_ANONYMOUS":{"value":"'anonymous'","visibility":"","phpdoc":"\/**\n     * Anonymous user: this role is automatically assigned to everyone,\n     * including \"non-users\" (not logged in).\n     *\/","attributes":[]},"ROLE_EVERYONE":{"value":"'everyone'","visibility":"","phpdoc":"\/**\n     * Everyone means 'everyone with an account'; this role is automatically\n     * assigned to every actual user, but not to anonymous access.\n     *\/","attributes":[]}},"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]},"$rqcache":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array Per-request permission cache *\/","attributes":[]},"$contentTypePermissions":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array The list of ContentType permissions *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]}]},"audit":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Write an entry to the permission audit log.\n     *\n     * @param string $msg\n     *\/","attributes":[],"arguments":[{"name":"$msg","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDefinedRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets a list of all the roles that can be assigned to users explicitly.\n     * This includes all the custom roles from permissions.yml, plus the\n     * special 'root' role, but not the special roles 'anonymous', 'everyone',\n     * and 'owner' (these are assigned automatically).\n     *\n     * @return array\n     *\/","attributes":[]},"getRole":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets meta-information on the specified role.\n     *\n     * @param string $roleName\n     *\n     * @return array An associative array describing the role. Keys are:\n     *               - 'label': A human-readable role name, suitable as a label in the\n     *               backend\n     *               - 'description': A description of what this role is supposed to do.\n     *               - 'builtin': Optional; if present and true-ish, this is a built-in\n     *               role and cannot be overridden in permissions.yml.\n     *\/","attributes":[],"arguments":[{"name":"$roleName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUserRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the roles for a given user. If a content type is specified, the\n     * \"owner\" role is added if appropriate.\n     *\n     * @param array   $user    An array as returned by Users::getUser()\n     * @param Content $content An optional Content object to check ownership\n     *\n     * @throws AccessControlException\n     *\n     * @return array An associative array of roles for the given user\n     *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":["Content"],"value":"null","phpdoc":"","attributes":[]}]},"getManipulatableRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the roles the current user can manipulate.\n     *\n     * @param array $currentUser\n     *\n     * @return string[] list of role names\n     *\/","attributes":[],"arguments":[{"name":"$currentUser","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"isAllowedToManipulate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if the current user is able to manipulate the given user.\n     *\n     * @param array $user\n     * @param array $currentUser\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$currentUser","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"checkPermission":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Low-level permission check. Given a set of available roles, a\n     * permission, and an optional content type, this method checks whether\n     * the permission may be granted.\n     *\n     * @param array  $roleNames      An array of effective role names. This must\n     *                               include any of the appropriate automatic\n     *                               roles, as these are not added at this point.\n     * @param string $permissionName Which permission to check\n     * @param string $type\n     * @param mixed  $item\n     *\n     * @return bool TRUE if granted, FALSE if not\n     *\/","attributes":[],"arguments":[{"name":"$roleNames","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$permissionName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$item","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"checkRolePermission":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks whether the specified $roleName grants permission $permissionName\n     * for the $contenttype in question (NULL for global permissions).\n     *\n     * @param string $roleName\n     * @param string $permissionName\n     * @param string $type\n     * @param mixed  $item\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$roleName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$permissionName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"'global'","phpdoc":"","attributes":[]},{"name":"$item","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"checkRoleGlobalPermission":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a given role has the specified permission.\n     *\n     * @param string $roleName\n     * @param string $permissionName\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$roleName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$permissionName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkRoleHierarchyPermission":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a hierarchy role has a sub-role.\n     *\n     * @param string       $roleName\n     * @param string       $permissionName\n     * @param string|array $role\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$roleName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$permissionName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$role","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkRoleContentTypePermission":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a role has a specific Contenttype permission.\n     *\n     * @param string $roleName\n     * @param string $permissionName\n     * @param string $contenttype\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$roleName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$permissionName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentTypePermissions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the list of ContentType permissions available.\n     *\n     * @return bool[]\n     *\/","attributes":[]},"getContentTypeUserPermissions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a list of ContentType permissions that a user has for the ContentType.\n     *\n     * @param string             $contentTypeSlug\n     * @param array|Entity\\Users $user\n     *\n     * @return bool[]\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeSlug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRolesByGlobalPermission":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Lists the roles that would grant the specified global permission.\n     *\n     * @param string $permissionName\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$permissionName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getGlobalRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the configured global permissions.\n     *\n     * @return array\n     *\/","attributes":[]},"getRolesByContentTypePermission":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Lists the roles that would grant the specified permission for the\n     * specified content type. Sort of a reverse lookup on the permission\n     * check.\n     *\n     * @param string $permissionName\n     * @param string $contenttype\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$permissionName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getEffectiveRolesForUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the effective roles for a given user.\n     * The effective roles include the roles that were explicitly assigned,\n     * as well as the built-in automatic roles.\n     *\n     * @param mixed $user an array or array-access object that contains a\n     *                    'roles' key; if no user is given, \"guest\" access is\n     *                    assumed\n     *\n     * @return array a list of effective role names for this user\n     *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isAllowed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Runs a permission check. Permissions are encoded as strings, where\n     * the ':' character acts as a separator for dynamic parts and\n     * sub-permissions.\n     * Apart from the route-based rules defined in permissions.yml, the\n     * following special cases are available:.\n     *\n     * \"overview:$contenttype\" - view the overview for the content type. Alias\n     *                           for \"contenttype:$contenttype:view\".\n     * \"contenttype:$contenttype\",\n     * \"contenttype:$contenttype:view\",\n     * \"contenttype:$contenttype:view:$id\" - View any item or a particular item\n     *                                       of the specified content type.\n     * \"contenttype:$contenttype:edit\",\n     * \"contenttype:$contenttype:edit:$id\" - Edit any item or a particular item\n     *                                       of the specified content type.\n     * \"contenttype:$contenttype:create\" - Create a new item of the specified\n     *                                     content type. (It doesn't make sense\n     *                                     to provide this permission on a\n     *                                     per-item basis, for obvious reasons)\n     * \"contenttype:$contenttype:change-ownership\",\n     * \"contenttype:$contenttype:change-ownership:$id\" - Change the ownership\n     *                                of the specified content type or item.\n     * Further, permissions can be combined with the special keywords 'and' and\n     * 'or' (case-insensitive), or their symbolic aliases '&' (or '&&') and '|'\n     * (or '||'). To override the default precedence (with 'or' binding tighter\n     * than 'and'), or to make precedence explicit, use parentheses. Ex.:\n     *\n     * \"contenttype:$contenttype:edit or contenttype:$contenttype:view\"\n     *\n     * @param string               $what      the desired permission, as elaborated upon above\n     * @param mixed                $user      the user to check permissions against\n     * @param string|array|Content $content   Optional: Content object\/array or ContentType slug.\n     *                                        If specified, $what is taken to be a relative permission (e.g. 'edit')\n     *                                        rather than an absolute one (e.g. 'contenttype:pages:edit').\n     * @param int                  $contentId only used if $content is given, to further specifiy the content item\n     *\n     * @return bool TRUE if the permission is granted, FALSE if denied\n     *\/","attributes":[],"arguments":[{"name":"$what","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"isAllowedRule":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a user is allowed a rule 'type'.\n     *\n     * @param array                $rule\n     * @param array                $user\n     * @param array                $userRoles\n     * @param string|array|Content $content\n     * @param string               $contenttypeSlug\n     * @param int                  $contentid\n     *\n     * @throws AccessControlException\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$rule","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$userRoles","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypeSlug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isAllowedSingle":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a user has a specific role.\n     *\n     * @param string               $what\n     * @param array                $user\n     * @param array                $userRoles\n     * @param string|array|Content $content\n     * @param string               $contenttypeSlug\n     * @param int                  $contentId\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$what","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$userRoles","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$contenttypeSlug","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getContentStatusTransitionPermission":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the required permission for transitioning any content item from\n     * one status to another. An empty status value indicates a non-existant\n     * item (create\/delete).\n     *\n     * @param string $fromStatus\n     * @param string $toStatus\n     *\n     * @throws AccessControlException\n     *\n     * @return string|null The name of the required permission suffix (e.g.\n     *                     'publish'), or NULL if no permission is required.\n     *\/","attributes":[],"arguments":[{"name":"$fromStatus","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$toStatus","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isContentStatusTransitionAllowed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check to see if a user is allowed to change that status of a Contenttype\n     * record to a target status.\n     *\n     * @param string $fromStatus\n     * @param string $toStatus\n     * @param array  $user\n     * @param string $contenttype\n     * @param int    $contentid\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$fromStatus","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$toStatus","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]}}},"Password":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Password handling.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application $app *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"setRandomPassword":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var UsersRepository $repo *\/","attributes":[],"arguments":[{"name":"$username","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"resetPasswordConfirm":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var UsersRepository $repo *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$remoteIP","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"resetPasswordRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sends email with password request. Accepts email or username.\n     *\n     * @param string $username\n     * @param string $remoteIP\n     * @param Event  $event\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$username","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$remoteIP","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"resetPasswordNotification":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Send the password reset link notification to the user.\n     *\n     * @param Entity\\Users $userEntity\n     * @param string       $shadowPassword\n     * @param string       $shadowToken\n     *\/","attributes":[],"arguments":[{"name":"$userEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$shadowPassword","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$shadowToken","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"PermissionParser":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Lexer and parser for permission query syntax.\n *\n * Input is a stream of bytes, usually from a call to isAllowed(). Output is\n * a nested associative array representing permission query AST.\n *\n * Each node in the nested tree contains the following keys:\n * - 'type': one of the P_XXXX parse tree node type constants (see below)\n * - 'value': the node's \"payload\". For nodes that have children (P_AND, P_OR),\n *            this is an array of child nodes; for other nodes, it is the plain\n *            payload - a simple query of the form 'a:b:c:...' for P_SIMPLE, or\n *            NULL for P_TRUE and P_FALSE.\n *\n * Lexer tokens will not typically be used outside the parser. Each lexer token\n * is an associative array with the following keys:\n * - 'type': one of the T_XXXX constants, indicating the token type.\n * - 'capture': if the token captures variable input, this key holds the value.\n * - 'match': the raw input consumed by this token. For any valid input stream,\n *            concatenating the 'match' values for all the output tokens should\n *            yield back the original input.\n *\/","attributes":[],"php":false,"constants":{"P_OR":{"value":1,"visibility":"","phpdoc":"\/**\n     * A list of child queries, combined with short-circuiting \"OR\" (i.e.,\n     * first sub-check to pass short-circuits).\n     *\/","attributes":[]},"P_SIMPLE":{"value":0,"visibility":"","phpdoc":"\/**\n     * A single permission check of the form a:b:c:.\n     *\/","attributes":[]},"P_FALSE":{"value":4,"visibility":"","phpdoc":"\/**\n     * Always-fail dummy check.\n     *\/","attributes":[]},"P_TRUE":{"value":3,"visibility":"","phpdoc":"\/**\n     * Always-pass dummy check.\n     *\/","attributes":[]},"P_AND":{"value":2,"visibility":"","phpdoc":"\/**\n     * A list of child queries, combined with short-circuiting \"AND\" (i.e.,\n     * first sub-check to fail short-circuits).\n     *\/","attributes":[]},"T_UNDEFINED":{"value":0,"visibility":"","phpdoc":"\/**\n     * Dummy type to signal lexer errors.\n     *\/","attributes":[]},"T_CLOSE_PARENS":{"value":2,"visibility":"","phpdoc":"\/**\n     * Closing parens: ')'.\n     *\/","attributes":[]},"T_OPEN_PARENS":{"value":1,"visibility":"","phpdoc":"\/**\n     * Opening parens: '('.\n     *\/","attributes":[]},"T_AND":{"value":4,"visibility":"","phpdoc":"\/**\n     * 'AND' keyword or operator.\n     *\/","attributes":[]},"T_OR":{"value":3,"visibility":"","phpdoc":"\/**\n     * 'OR' keyword or operator.\n     *\/","attributes":[]},"T_QUERY":{"value":5,"visibility":"","phpdoc":"\/**\n     * A single query (a:b:c:...).\n     *\/","attributes":[]},"T_TRUE":{"value":7,"visibility":"","phpdoc":"\/**\n     * 'TRUE' keyword.\n     *\/","attributes":[]},"T_SPACE":{"value":6,"visibility":"","phpdoc":"\/**\n     * Whitespace. Skipped in the parser, but required to separate some tokens.\n     *\/","attributes":[]},"T_FALSE":{"value":8,"visibility":"","phpdoc":"\/**\n     * 'FALSE' keyword.\n     *\/","attributes":[]}},"methods":{"tokenName":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the symbolic name of a lexer token type.\n     *\n     * @param int $tokenType\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$tokenType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Lexes and parses the specified query string $what.\n     *\n     * @param $what\n     *\n     * @throws PermissionLexerException\n     * @throws PermissionParserException\n     *\n     * @return array a parse tree\n     *\/","attributes":[],"arguments":[{"name":"$what","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"lex":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Lexes the given $query into lexer tokens.\n     *\n     * @param $query\n     *\n     * @throws PermissionLexerException\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"expect":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Assert that the given $token's 'type' key is in the list of $expected\n     * token types.\n     *\n     * @param array $expected list of token types (T_XXXX constants)\n     * @param array $token    a lexer token, associative array\n     *\n     * @throws PermissionParserException\n     *\/","attributes":[],"arguments":[{"name":"$expected","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$token","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parse":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse a stream of lexer tokens ('lexemes') into a permission query AST.\n     *\n     * @param array $tokens An array or iterable of lexer tokens. The output of\n     *                      `lex()` is suitable here.\n     *\n     * @return array a nested associative array representing the resulting\n     *               parse tree\n     *\/","attributes":[],"arguments":[{"name":"$tokens","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseAnd":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$tokens","reference":true,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseOr":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$tokens","reference":true,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseSimple":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$tokens","reference":true,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"AccessChecker":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Authentication handling.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManagerInterface *\/","attributes":[]},"$requestStack":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Symfony\\Component\\HttpFoundation\\RequestStack *\/","attributes":[]},"$session":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Symfony\\Component\\HttpFoundation\\Session\\SessionInterface *\/","attributes":[]},"$flashLogger":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Logger\\FlashLoggerInterface *\/","attributes":[]},"$systemLogger":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$permissions":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\AccessControl\\Permissions *\/","attributes":[]},"$randomGenerator":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Generator *\/","attributes":[]},"$dispatcher":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EventDispatcherInterface *\/","attributes":[]},"$cookieOptions":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$validSession":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManagerInterface   $em\n     * @param RequestStack             $requestStack\n     * @param SessionInterface         $session\n     * @param EventDispatcherInterface $dispatcher\n     * @param FlashLoggerInterface     $flashLogger\n     * @param LoggerInterface          $systemLogger\n     * @param Permissions              $permissions\n     * @param Generator                $randomGenerator\n     * @param array                    $cookieOptions\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManagerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$requestStack","reference":false,"typehint":["RequestStack"],"value":"","phpdoc":"","attributes":[]},{"name":"$session","reference":false,"typehint":["SessionInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$dispatcher","reference":false,"typehint":["EventDispatcherInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$flashLogger","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$systemLogger","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$permissions","reference":false,"typehint":["Permissions"],"value":"","phpdoc":"","attributes":[]},{"name":"$randomGenerator","reference":false,"typehint":["Generator"],"value":"","phpdoc":"","attributes":[]},{"name":"$cookieOptions","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"isValidSession":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * We will not allow tampering with sessions, so we make sure the current\n     * session is still valid for the device on which it was created, and that\n     * the username, and IP address, are still the same.\n     *\n     * 1. If user has a valid session and it is fresh, check against cookie:\n     *    - If NOT a match refuse\n     *    - If a match accept\n     * 2. If user has a valid session and it is stale (>10 minutes), check the\n     *    database records again:\n     *    - If disabled refuse\n     *    - If enabled\n     *      - If NOT a match refuse\n     *      - If a match accept\n     *      - Update session data\n     * 3. If user has no session check authtoken table entry (closed broswer):\n     *    - If passed validity date refuse\n     *    - If within validity date, hash username and IP against salt and\n     *      compare to database:\n     *      - If NOT a match refuse\n     *      - If a match accept\n     *\n     * @param string $authCookie\n     *\n     * @throws AccessControlException\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$authCookie","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"revokeSession":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Log out the currently logged in user.\n     *\n     * @return bool\n     *\/","attributes":[]},"checkSessionStored":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check the stored session, if we're past expiry then return false\n     * regardless and force a check\/update from the database authentication\n     * record.\n     *\n     * @param Token\\Token $sessionAuth\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$sessionAuth","reference":false,"typehint":["Token\\Token"],"value":"","phpdoc":"","attributes":[]}]},"checkSessionDatabase":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check the user authentication cookie against what is stored in the\n     * database.\n     *\n     * @param string $authCookie\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$authCookie","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkSessionKeys":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check the session is still valid for the device on which it was created,\n     * and. i.e. the username, IP address, and (if configured) the browser agent\n     * values are all still the same.\n     *\n     * @param Token\\Token $sessionAuth\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$sessionAuth","reference":false,"typehint":["Token\\Token"],"value":"","phpdoc":"","attributes":[]}]},"getActiveSessions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Lookup active sessions.\n     *\n     * @return array\n     *\/","attributes":[]},"getAuthToken":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a MD5 hash key to identify the session with. This is calculated from\n     * a name, a salt, and optionally the remote IP address, broswer's agent\n     * string and the user's HTTP hostname.\n     *\n     * @param string $userId\n     * @param string $salt\n     *\n     * @return string|bool\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$salt","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getClientHost":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the user's host name.\n     *\n     * @return string\n     *\/","attributes":[]},"getClientIp":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the user's IP address.\n     *\n     * @return string\n     *\/","attributes":[]},"getClientUserAgent":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the user's browser User Agent.\n     *\n     * @return string\n     *\/","attributes":[]},"getRepositoryUsers":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Repository\\UsersRepository\n     *\/","attributes":[]},"getRepositoryAuthtoken":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Repository\\AuthtokenRepository\n     *\/","attributes":[]}}}}},"\\Bolt\\AccessControl\\Token\\":{"classes":{"Token":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Authentication tokens.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$user":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Entity\\Users *\/","attributes":[]},"$token":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Entity\\Authtoken *\/","attributes":[]},"$checked":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Entity\\Users     $userEntity\n     * @param Entity\\Authtoken $tokenEntity\n     *\/","attributes":[],"arguments":[{"name":"$userEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$tokenEntity","reference":false,"typehint":["Entity\\Authtoken"],"value":"","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"isEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if stored user object is enabled.\n     *\n     * @return bool|null\n     *\/","attributes":[]},"getUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get stored user entity object.\n     *\n     * @return Entity\\Users\n     *\/","attributes":[]},"setUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set fresh user entity object.\n     *\n     * @param Entity\\Users $user\n     *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"getToken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get stored token entity object.\n     *\n     * @return Entity\\Authtoken\n     *\/","attributes":[]},"setToken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set fresh token entity object.\n     *\n     * @param Entity\\Authtoken $token\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":["Entity\\Authtoken"],"value":"","phpdoc":"","attributes":[]}]},"getChecked":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get time of last check against database.\n     *\n     * @return int\n     *\/","attributes":[]},"setChecked":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set time of last database check to now.\n     *\/","attributes":[]}}},"Generator":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Token generator.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$token":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $username\n     * @param string $salt\n     * @param string $remoteIP\n     * @param string $hostName\n     * @param string $userAgent\n     * @param array  $cookieOptions\n     * @param string $algorithm\n     *\/","attributes":[],"arguments":[{"name":"$username","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$salt","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$remoteIP","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$hostName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$userAgent","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$cookieOptions","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$algorithm","reference":false,"typehint":[""],"value":"'sha256'","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}}}},"\\Bolt\\Composer\\":{"classes":{"PackageCollection":{"abstract":false,"final":true,"extends":"","implements":["\\jsonserializable"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Package collection class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$packages":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Package[] *\/","attributes":[]}},"methods":{"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a package to the collection.\n     *\n     * @param Package $package\n     *\/","attributes":[],"arguments":[{"name":"$package","reference":false,"typehint":["Package"],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a package from the collection.\n     *\n     * @param string $name\n     *\n     * @return Package|null\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"jsonSerialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"Package":{"abstract":false,"final":true,"extends":"","implements":["\\jsonserializable"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class describing a single package, either composer installed, locally installed, or pending installation.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$status":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$type":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$name":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$title":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$description":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$version":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$authors":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$keywords":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$readmeLink":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$configLink":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$repositoryLink":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$constraint":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$valid":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$enabled":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"createFromComposerPackage":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param CompletePackageInterface $package\n     *\n     * @return Package\n     *\/","attributes":[],"arguments":[{"name":"$package","reference":false,"typehint":["CompletePackageInterface"],"value":"","phpdoc":"","attributes":[]}]},"createFromComposerJson":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $composerJson\n     *\n     * @return Package\n     *\/","attributes":[],"arguments":[{"name":"$composerJson","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"jsonSerialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setStatus":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the status, either 'installed', 'pending', or 'local'.\n     *\n     * @param string $status\n     *\/","attributes":[],"arguments":[{"name":"$status","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the type, e.g. 'bolt-extension', 'bolt-theme', 'composer-plugin', etc.\n     *\n     * @param string $type\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the Composer name.\n     *\n     * @param string $name\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a package Composer name.\n     *\n     * @return string\n     *\/","attributes":[]},"setTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the user-friendly title.\n     *\n     * @param string $title\n     *\/","attributes":[],"arguments":[{"name":"$title","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setDescription":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the description.\n     *\n     * @param string $description\n     *\/","attributes":[],"arguments":[{"name":"$description","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the version.\n     *\n     * @param string $version\n     *\/","attributes":[],"arguments":[{"name":"$version","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setAuthors":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the authors.\n     *\n     * @param array $authors\n     *\/","attributes":[],"arguments":[{"name":"$authors","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setKeywords":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the keywords.\n     *\n     * @param array $keywords\n     *\/","attributes":[],"arguments":[{"name":"$keywords","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setReadmeLink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the relative URI to the README file.\n     *\n     * @param string $readmeLink\n     *\/","attributes":[],"arguments":[{"name":"$readmeLink","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setConfigLink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the relative URI to the YAML config file.\n     *\n     * @param string $configLink\n     *\/","attributes":[],"arguments":[{"name":"$configLink","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setRepositoryLink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the remote source code repository URL.\n     *\n     * @param string $repositoryLink\n     *\/","attributes":[],"arguments":[{"name":"$repositoryLink","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setConstraint":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the version constraint this package uses.\n     *\n     * @param string $constraint\n     *\/","attributes":[],"arguments":[{"name":"$constraint","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setValid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set if this extension is valid.\n     *\n     * @param bool $valid\n     *\/","attributes":[],"arguments":[{"name":"$valid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set if this extension is enabled.\n     *\n     * @param bool $enabled\n     *\/","attributes":[],"arguments":[{"name":"$enabled","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"JsonManager":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer JSON file manager class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$messages":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param $app \\Silex\\Application\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"init":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialise a JSON file at given location with optional data input.\n     *\n     * @param string $file\n     * @param array  $data\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Filesystem\\Handler\\JsonFile $jsonFile *\/","attributes":[]},"setJsonDefaults":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Enforce the default JSON settings.\n     *\n     * @param array $json\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$json","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"PackageManager":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]},"$started":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$useSsl":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$json":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array|null *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"getMessages":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var PingService $pinger *\/","attributes":[]},"getOutput":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the output from the last IO.\n     *\n     * @return string\n     *\/","attributes":[]},"setup":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set up function.\n     *\n     * - Copy\/update the installer event class\n     * - Update the composer.json\n     * - Test connection to the server\n     *\/","attributes":[]},"useSsl":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if we can\/should use SSL\/TLS\/HTTP2 or HTTP.\n     *\n     * @throws \\Exception\n     *\n     * @return bool\n     *\/","attributes":[]},"checkPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check for packages that need to be installed or updated.\n     *\n     * @return array\n     *\/","attributes":[]},"dependsPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find which packages cause the given package to be installed.\n     *\n     * @param string $packageName\n     * @param string $constraint\n     *\n     * @return Dependency[]|null\n     *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"dumpAutoload":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dump fresh autoloader.\n     *\n     * @return int 0 on success or a positive error code on failure\n     *\/","attributes":[]},"installPackages":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Install configured packages.\n     *\n     * @return int 0 on success or a positive error code on failure\n     *\/","attributes":[]},"prohibitsPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find which packages prevent the given package from being installed.\n     *\n     * @param string $packageName\n     * @param string $constraint\n     *\n     * @return Dependency[]|null\n     *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"removePackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove packages from the root install.\n     *\n     * @param $packages array Indexed array of package names to remove\n     *\n     * @return int 0 on success or a positive error code on failure\n     *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"requirePackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Require (install) packages.\n     *\n     * @param $packages array Associative array of package names\/versions to remove\n     *                        Format: ['name' => '', 'version' => '']\n     *\n     * @return int 0 on success or a positive error code on failure\n     *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"searchPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Search for packages.\n     *\n     * @param $packages array Indexed array of package names to search\n     *\n     * @return array List of matching packages\n     *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"showPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Show packages.\n     *\n     * @param string $target\n     * @param string $package\n     * @param string $version\n     * @param bool   $root\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$target","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$package","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$version","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$root","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"updatePackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update packages in the root install.\n     *\n     * @param  $packages array Indexed array of package names to update\n     *\n     * @return int 0 on success or a positive error code on failure\n     *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"initJson":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialise a new JSON file.\n     *\n     * @param string $file File to initialise\n     * @param array  $data Data to be added as JSON parameter\/value pairs\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getAllPackages":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var CompletePackageInterface $composerPackage *\/","attributes":[]},"linkReadMe":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the URI for a package's readme.\n     *\n     * @param ResolvedExtension $extension\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$extension","reference":false,"typehint":["ResolvedExtension"],"value":"","phpdoc":"","attributes":[]}]},"linkConfig":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the URI for a package's config file edit window.\n     *\n     * @param ResolvedExtension $extension\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$extension","reference":false,"typehint":["ResolvedExtension"],"value":"","phpdoc":"","attributes":[]}]},"updateJson":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set up Composer JSON file.\n     *\/","attributes":[]}}},"ScriptHandler":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer event script handler.\n *\n * @internal\n *\/","attributes":[],"php":false,"methods":{"installAssets":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Install Bolt's assets.\n     *\n     * This should be ran on \"post-install-cmd\" and \"post-update-cmd\" events.\n     *\n     * @param Event $event\n     * @param bool  $checkForCreateProject\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]},{"name":"$checkForCreateProject","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"installThemesAndFiles":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Install Bolt's default themes and files.\n     *\n     * This should be ran on \"post-create-project-cmd\" event.\n     *\n     * @param Event $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"updateProject":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Updates project existing structure if needed.\n     *\n     * @param Event $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"configureProject":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Configures installation's directory structure and default site bundle.\n     *\n     * The configured paths & extensions are written to .bolt.yml\n     * and the skeleton structure is modified accordingly.\n     *\n     * @param Event $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"runUpdateProjectFromAssets":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if updateProject is in composer.json. If not,\n     * this adds it \/ shows how to add it, and then runs updateProject.\n     *\n     * @param Event $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Composer\\Script\\":{"classes":{"BootstrapYamlUpdater":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Updates .bolt.yml paths for changes with PathResolver introduced in 3.3.\n *\n * NOTE: If debugging this with with xdebug, you will need to run Composer from\n * the vendor\/bin\/ directory, and set the COMPOSER_ALLOW_XDEBUG=1 environment\n * variable, e.g.\n * <pre>\n * COMPOSER_ALLOW_XDEBUG=1 .\/vendor\/bin\/composer run-script <script name>\n * <\/pre>\n *\n * @internal\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"FILENAME":{"value":"'.bolt.yml'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$io":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var IOInterface *\/","attributes":[]},"$filesystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Filesystem *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param IOInterface $io\n     * @param Filesystem  $filesystem\n     *\/","attributes":[],"arguments":[{"name":"$io","reference":false,"typehint":["IOInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["Filesystem"],"value":"null","phpdoc":"","attributes":[]}]},"fromEvent":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create from a Composer event object.\n     *\n     * @param Event           $event\n     * @param Filesystem|null $filesystem\n     *\n     * @return BootstrapYamlUpdater\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["Filesystem"],"value":"null","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update .bolt.yml file if needed.\n     *\/","attributes":[]},"save":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Save updated data .bolt.yml file, or remove if it matches defaults.\n     *\n     * @param array $contents\n     *\/","attributes":[],"arguments":[{"name":"$contents","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"updatePaths":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update paths.\n     *\n     * @param MutableBag $paths\n     *\n     * @return MutableBag\n     *\/","attributes":[],"arguments":[{"name":"$paths","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"determineMostCommonBaseAppPath":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine the most common app path.\n     *\n     * @param string[] $paths\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$paths","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"PathCustomizer":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interactively allows CLI user to modify PathResolver paths.\n *\n * @internal\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$resolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]},"$io":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var NutStyleInterface *\/","attributes":[]},"$pathsTable":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Table *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param PathResolver      $resolver\n     * @param NutStyleInterface $io\n     *\/","attributes":[],"arguments":[{"name":"$resolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]},{"name":"$io","reference":false,"typehint":["NutStyleInterface"],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run the customizer.\n     *\/","attributes":[]},"renderPaths":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render paths table.\n     *\/","attributes":[]},"askPathToModify":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Ask which path to modify.\n     *\n     * @return string|null the path name to modify or null to finish\n     *\/","attributes":[]},"askAndSetNewPathValue":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Ask for the new value for the given path name and set it.\n     *\n     * @param string $name\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"BundleConfigurator":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Configures project default site bundle.\n *\n * This should only be used for new projects.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"FILENAME":{"value":"'.bolt.yml'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$io":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var NutStyleInterface *\/","attributes":[]},"$filesystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Filesystem *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param NutStyleInterface $io\n     * @param Filesystem|null   $filesystem\n     *\/","attributes":[],"arguments":[{"name":"$io","reference":false,"typehint":["NutStyleInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["Filesystem"],"value":"null","phpdoc":"","attributes":[]}]},"fromEvent":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create from a Composer event object.\n     *\n     * @param Event $event\n     *\n     * @return BundleConfigurator\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Setup .bolt.yml file if needed.\n     *\/","attributes":[]},"load":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Load data from .bolt.yml if it exists.\n     *\n     * @return MutableBag\n     *\/","attributes":[]},"save":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Save updated data .bolt.yml file, or remove if it matches defaults.\n     *\n     * @param MutableBag $contents\n     *\/","attributes":[],"arguments":[{"name":"$contents","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"updateSiteBundleLoader":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add the default site bundle if it exists.\n     *\n     * @param MutableBag $contents\n     *\/","attributes":[],"arguments":[{"name":"$contents","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]}}},"DirectorySyncer":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Syncs directories from core to user project.\n *\n * @internal\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$userResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]},"$boltResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]},"$io":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var IOInterface *\/","attributes":[]},"$options":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Options *\/","attributes":[]},"$filesystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Filesystem *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param PathResolver $userResolver\n     * @param PathResolver $boltResolver\n     * @param IOInterface  $io\n     * @param Options|null $options\n     * @param Filesystem   $filesystem\n     *\/","attributes":[],"arguments":[{"name":"$userResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]},{"name":"$boltResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]},{"name":"$io","reference":false,"typehint":["IOInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["Options"],"value":"null","phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["Filesystem"],"value":"null","phpdoc":"","attributes":[]}]},"fromEvent":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create from Composer Event.\n     *\n     * @param Event $event\n     *\n     * @return DirectorySyncer\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"sync":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $srcName     The source path alias in PathResolver to sync from\n     * @param string $targetName  The target path alias in PathResolver to sync to\n     * @param bool   $delete      Whether to delete files that are not in the source directory\n     * @param array  $onlySubDirs Only sync these sub dirs if given\n     *\/","attributes":[],"arguments":[{"name":"$srcName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$targetName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$delete","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$onlySubDirs","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"mirror":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper to make mirror calls shorter.\n     *\n     * @param string $origin\n     * @param string $target\n     * @param bool   $delete\n     *\/","attributes":[],"arguments":[{"name":"$origin","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$target","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$delete","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]}}},"ScriptHandlerUpdater":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Adds handler to composer.json scripts section or shows how (on error).\n *\n * @internal\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$event":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Event *\/","attributes":[]},"$io":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var IOInterface *\/","attributes":[]},"$scripts":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array|null *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Event $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"needsUpdate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if composer.json scripts already have the handler we are adding.\n     *\n     * @return bool\n     *\/","attributes":[]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attempt to update composer.json, or show how if we can't update the file.\n     *\/","attributes":[]},"updateAutomatically":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update composer.json file.\n     *\/","attributes":[]},"showHow":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Tell users of the change and show how the composer.json file should be updated.\n     *\/","attributes":[]},"modifyScripts":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add updateProject handler right before installAssets handler.\n     *\n     * @param string[] $scripts\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$scripts","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasScript":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $eventName\n     * @param string $script\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$eventName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$script","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"DirectoryConfigurator":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Configures project directories, including:\n * - customizing directories\n * - writing .bolt.yml\n * - moving skeleton directories\n * - updating directory permissions\n *\n * This should only be used for new projects.\n *\n * @internal\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$io":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var NutStyleInterface *\/","attributes":[]},"$filesystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Filesystem *\/","attributes":[]},"$resolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]},"$defaults":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]},"$options":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Options *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param NutStyleInterface $io\n     * @param Options|null      $options\n     * @param PathResolver|null $resolver\n     * @param Filesystem|null   $filesystem\n     *\/","attributes":[],"arguments":[{"name":"$io","reference":false,"typehint":["NutStyleInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["Options"],"value":"null","phpdoc":"","attributes":[]},{"name":"$resolver","reference":false,"typehint":["PathResolver"],"value":"null","phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["Filesystem"],"value":"null","phpdoc":"","attributes":[]}]},"fromEvent":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create from a Composer event object.\n     *\n     * @param Event $event\n     *\n     * @return DirectoryConfigurator\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Go!\n     *\/","attributes":[]},"configureDirs":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Configure dirs from env, composer extra values, and via user input.\n     *\/","attributes":[]},"writeYamlConfig":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Writes the .bolt.yml file if paths are not the default.\n     *\/","attributes":[]},"moveSkeletonDirs":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Move dirs from skeleton to match given paths.\n     *\/","attributes":[]},"moveSkeletonDir":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Move given dir from skeleton to match PathResolver setting if needed.\n     *\n     * @param string $name\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"updatePermissions":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update all path resolver directories permissions.\n     *\/","attributes":[]},"verbose":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string|string[] $messages\n     *\/","attributes":[],"arguments":[{"name":"$messages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Options":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles options in composer's extra section and env vars.\n *\n * @internal\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$composerExtra":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array $composerExtra\n     *\/","attributes":[],"arguments":[{"name":"$composerExtra","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"fromEvent":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create from a Composer event object.\n     *\n     * @param Event $event\n     *\n     * @return Options\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"getDirMode":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the directory mode.\n     *\n     * @return int\n     *\/","attributes":[]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an option from environment variable or composer's extra section.\n     *\n     * Example: With key \"dir-mode\" it checks for \"BOLT_DIR_MODE\" environment variable,\n     * then \"bolt-dir-mode\" in composer's extra section, then returns given default value.\n     *\n     * @param string $key\n     * @param mixed  $default\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getEnv":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $key\n     *\n     * @return array|false|string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Composer\\Satis\\":{"classes":{"StatService":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$urls":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$extendSite":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$client":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var ClientInterface *\/","attributes":[]},"$loggerSystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * StatService constructor.\n     *\n     * @param ClientInterface $client\n     * @param LoggerInterface $loggerSystem\n     * @param string          $extendSite\n     *\/","attributes":[],"arguments":[{"name":"$client","reference":false,"typehint":["ClientInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerSystem","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$extendSite","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"recordInstall":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record an extension install.\n     *\n     * @param string $package\n     * @param string $version\n     *\/","attributes":[],"arguments":[{"name":"$package","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$version","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"QueryService":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class to provide querying of the Bolt Extensions repo as a\n * service.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n **\/","attributes":[],"php":false,"properties":{"$site":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$urls":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$format":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$client":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\GuzzleHttp\\Client *\/","attributes":[]},"$isRetry":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param \\GuzzleHttp\\Client $client\n     * @param string             $site\n     * @param array              $urls\n     *\/","attributes":[],"arguments":[{"name":"$client","reference":false,"typehint":["Client"],"value":"","phpdoc":"","attributes":[]},{"name":"$site","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$urls","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"all":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"info":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Make an extension package info request.\n     *\n     * @param string $package Composer package name 'author\/extension'\n     * @param string $bolt    Bolt version number\n     *\n     * @return string|bool|object\n     *\/","attributes":[],"arguments":[{"name":"$package","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$bolt","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setFormat":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$format","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Execute the query.\n     *\n     * @param string $url\n     * @param array  $params\n     *\n     * @throws SatisQueryException\n     *\n     * @return string|bool|object\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"PingService":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class to provide pinging of the Bolt Marketplace as a service.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$client":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Client *\/","attributes":[]},"$requestStack":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var RequestStack *\/","attributes":[]},"$uri":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$messages":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var MutableBag *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Client       $client\n     * @param RequestStack $requestStack\n     * @param string       $uri\n     *\/","attributes":[],"arguments":[{"name":"$client","reference":false,"typehint":["Client"],"value":"","phpdoc":"","attributes":[]},{"name":"$requestStack","reference":false,"typehint":["RequestStack"],"value":"","phpdoc":"","attributes":[]},{"name":"$uri","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"ping":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Ping site to see if we have a valid connection and it is responding correctly.\n     *\n     * @param bool $addQuery\n     *\/","attributes":[],"arguments":[{"name":"$addQuery","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$debugClient","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getMessages":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Bag\n     *\/","attributes":[]},"doPing":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param bool $addQuery\n     * @param bool $debugClient\n     *\n     * @throws ClientException\n     * @throws ServerException\n     * @throws RequestException\n     *\/","attributes":[],"arguments":[{"name":"$addQuery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$debugClient","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Composer\\Action\\":{"classes":{"UpdatePackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer update package class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Composer\\Composer $composer *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"ProhibitsPackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\abstractdependencyaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Shows which packages prevent the given package from being installed with\n * detailed information about why a package cannot be installed.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $packageName\n     * @param string $textConstraint\n     * @param bool   $onlyLocal\n     *\n     * @return Dependency[]|null\n     *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$textConstraint","reference":false,"typehint":[""],"value":"'*'","phpdoc":"","attributes":[]},{"name":"$onlyLocal","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]}}},"DependsPackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\abstractdependencyaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Shows which packages cause the given package to be installed with\n * detailed information about where a package is referenced.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $packageName\n     * @param string $textConstraint\n     * @param bool   $onlyLocal\n     *\n     * @return Dependency[]|null\n     *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$textConstraint","reference":false,"typehint":[""],"value":"'*'","phpdoc":"","attributes":[]},{"name":"$onlyLocal","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]}}},"RequirePackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer require package class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var $install \\Composer\\Installer *\/","attributes":[],"arguments":[{"name":"$package","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"updateComposerJson":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update the JSON file.\n     *\n     * @param JsonFile $jsonFile\n     * @param array    $package\n     * @param bool     $isPostInstall\n     *\/","attributes":[],"arguments":[{"name":"$jsonFile","reference":false,"typehint":["JsonFile"],"value":"","phpdoc":"","attributes":[]},{"name":"$package","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$isPostInstall","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"updateFileCleanly":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Cleanly update a Composer JSON file.\n     *\n     * @param JsonFile $jsonFile\n     * @param array    $new\n     * @param string   $requireKey\n     * @param string   $removeKey\n     * @param bool     $sortPackages\n     * @param bool     $isPostInstall\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$jsonFile","reference":false,"typehint":["JsonFile"],"value":"","phpdoc":"","attributes":[]},{"name":"$new","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$requireKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$removeKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$sortPackages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$isPostInstall","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"AbstractDependencyAction":{"abstract":true,"final":false,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Abstract class for mapping Composer dependency relationships.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$inverted":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool Whether to invert matching process (why-not vs why behaviour) *\/","attributes":[]},"$recursive":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Execute.\n     *\n     * @param string $packageName    package to inspect\n     * @param string $textConstraint Optional version constraint\n     * @param bool   $onlyLocal\n     *\n     * @return Dependency[]|null\n     *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$textConstraint","reference":false,"typehint":[""],"value":"'*'","phpdoc":"","attributes":[]},{"name":"$onlyLocal","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"getRequiredPool":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var BasePackage $rootPackage *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$textConstraint","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$onlyLocal","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getNeedles":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a needle stack of Links depending on why\/why-not.\n     *\n     * @param string             $packageName\n     * @param PackageInterface[] $packages\n     * @param bool               $inverted\n     *                                        - Prohibits = true\n     *                                        - Depends   = false\n     *\n     * @return Link[]\n     *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$packages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$inverted","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDependencies":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Assembles and prints a bottom-up table of the dependencies.\n     *\n     * @param array $results\n     *\n     * @return Dependency[]\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"SearchPackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer search package class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Search for packages.\n     *\n     * @param array $packages Indexed array of package names to search for\n     * @param bool  $onlyname True for name only search, false for full text\n     *\n     * @throws PackageManagerException\n     *\n     * @return array List of matching packages\n     *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$onlyname","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]}}},"DumpAutoload":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer autoloader creation class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dump autoloaders.\n     *\n     * @throws \\Bolt\\Exception\\PackageManagerException\n     *\n     * @return int 0 on success or a positive error code on failure\n     *\/","attributes":[]}}},"Options":{"abstract":false,"final":false,"extends":"\\symfony\\component\\httpfoundation\\parameterbag","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer action options class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Local $adapter *\/","attributes":[],"arguments":[{"name":"$composerJson","reference":false,"typehint":["JsonFile"],"value":"","phpdoc":"","attributes":[]},{"name":"$composerOverrides","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"baseDir":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Extension base directory.\n     *\n     * @return string\n     *\/","attributes":[]},"composerJson":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Location of the composer.json file.\n     *\n     * @return JsonFile\n     *\/","attributes":[]},"dryRun":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Outputs the operations but will not execute anything (implicitly enables --verbose).\n     *\n     * Composer parameter: --dry-run\n     *\n     * @return bool\n     *\/","attributes":[]},"verbose":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shows more details including new commits pulled in when updating packages.\n     *\n     * Composer parameter: --verbose\n     *\n     * @return bool\n     *\/","attributes":[]},"noDev":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Disables installation of require-dev packages.\n     *\n     * Composer parameter: --no-dev\n     *\n     * @return bool\n     *\/","attributes":[]},"noAutoloader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Skips autoloader generation.\n     *\n     * Composer parameter: --no-autoloader\n     *\n     * @return bool\n     *\/","attributes":[]},"noScripts":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Skips the execution of all scripts defined in composer.json file.\n     *\n     * Composer parameter: --no-scripts\n     *\n     * @return bool\n     *\/","attributes":[]},"withDependencies":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add also all dependencies of whitelisted packages to the whitelist.\n     *\n     * Composer parameter: --with-dependencies\n     *\n     * @return bool\n     *\/","attributes":[]},"ignorePlatformReqs":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Ignore platform requirements (php & ext- packages).\n     *\n     * Composer parameter: --ignore-platform-reqs\n     *\n     * @return bool\n     *\/","attributes":[]},"preferStable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prefer stable versions of dependencies.\n     *\n     * Composer parameter: --prefer-stable\n     *\n     * @return bool\n     *\/","attributes":[]},"preferLowest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prefer lowest versions of dependencies.\n     *\n     * Composer parameter: --prefer-lowest\n     *\n     * @return bool\n     *\/","attributes":[]},"sortPackages":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sorts packages when adding\/updating a new dependency.\n     *\n     * Composer parameter: --sort-packages\n     *\n     * @return bool\n     *\/","attributes":[]},"preferSource":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Forces installation from package sources when possible, including VCS information.\n     *\n     * Composer parameter: --prefer-source\n     *\n     * @return bool\n     *\/","attributes":[]},"preferDist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Forces installation from package dist (archive) even for dev versions.\n     *\n     * Composer parameter: --prefer-dist\n     *\n     * @return bool\n     *\/","attributes":[]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Do package update as well.\n     *\n     * Composer parameter: --None: Bolt customisation\n     *\n     * @return bool\n     *\/","attributes":[]},"noUpdate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Disables the automatic update of the dependencies.\n     *\n     * Composer parameter: --no-update\n     *\n     * @return bool\n     *\/","attributes":[]},"updateNoDev":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run the dependency update with the --no-dev option.\n     *\n     * Composer parameter: --update-no-dev\n     *\n     * @return bool\n     *\/","attributes":[]},"updateWithDependencies":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allows inherited dependencies to be updated with explicit dependencies.\n     *\n     * Composer parameter: --update-with-dependencies\n     *\n     * @return bool\n     *\/","attributes":[]},"dev":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the 'dev' parameter.\n     *\n     * Depending on where used:\n     *   - Add requirement to require-dev\n     *   - Removes a package from the require-dev section\n     *   - Disables autoload-dev rules\n     *\n     * Composer parameter: --dev\n     *\n     * @return bool\n     *\/","attributes":[]},"onlyName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Search only in name.\n     *\n     * Composer parameter: --only-name\n     *\n     * @return bool\n     *\/","attributes":[]},"optimize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert PSR-0\/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production.\n     *\n     * Composer parameter: --optimize\n     *\n     * @return bool\n     *\/","attributes":[]},"optimizeAutoloader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Optimizes PSR0 and PSR4 packages to be loaded with classmaps too, good for production.\n     *\n     * Composer parameter: --optimize-autoloader\n     *\n     * @return bool\n     *\/","attributes":[]},"classmapAuthoritative":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Autoload classes from the classmap only. Implicitly enables --optimize-autoloader.\n     *\n     * Composer parameter: --classmap-authoritative\n     *\n     * @return bool\n     *\/","attributes":[]}}},"CheckPackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Checks for installable, or upgradeable packages.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var string $versionConstraint *\/","attributes":[]}}},"BaseAction":{"abstract":true,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$messages":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]},"$io":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Composer\\IO\\BufferIO *\/","attributes":[]},"$composer":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Composer\\Composer *\/","attributes":[]},"$pool":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Composer\\DependencyResolver\\Pool *\/","attributes":[]},"$repos":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Composer\\Repository\\CompositeRepository *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param $app \\Silex\\Application\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"getOutput":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the output from the last IO.\n     *\n     * @return string\n     *\/","attributes":[]},"getOptions":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a single option.\n     *\n     * @return Options\n     *\/","attributes":[]},"getComposer":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a Composer object.\n     *\n     * @throws \\Exception\n     *\n     * @return \\Composer\\Composer\n     *\/","attributes":[]},"getIO":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the IO object.\n     *\n     * @return \\Composer\\IO\\BufferIO\n     *\/","attributes":[]},"resetComposer":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a new Composer object.\n     *\n     * @return \\Composer\\Composer\n     *\/","attributes":[]},"getPreferedTarget":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine if we're to force installation from package sources when\n     * possible, including VCS information.\n     *\n     * @param string $option\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$option","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setAllowSslDowngrade":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var ConfigurableRepositoryInterface $repo *\/","attributes":[],"arguments":[{"name":"$choice","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"findBestVersionForPackage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Given a package name, this determines the best version to use in the require key.\n     *\n     * This returns a version with the ^ operator prefixed when possible.\n     *\n     * @param string $packageName\n     * @param string $targetPackageVersion\n     * @param bool   $returnArray\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return string|array\n     *\/","attributes":[],"arguments":[{"name":"$packageName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$targetPackageVersion","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$returnArray","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getPool":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a resolver pool that contains repositories, that provide packages.\n     *\n     * @return \\Composer\\DependencyResolver\\Pool\n     *\/","attributes":[]},"getMinimumStability":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine the minimum required stability.\n     *\n     * @return string\n     *\/","attributes":[]},"getRepos":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get all our repos.\n     *\n     * @return \\Composer\\Repository\\CompositeRepository\n     *\/","attributes":[]},"formatRequirements":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $packages\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"normalizeRequirements":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parses a name\/version pairs and returns an array of pairs.\n     *\n     * @param array $packages a set of package\/version pairs separated by \":\", \"=\" or \" \"\n     *\n     * @return array[] An array of arrays containing a name and (if provided) a version\n     *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"RemovePackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer remove package class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Filesystem\\Handler\\JsonFile $jsonFile *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"InstallPackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer package install class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Install packages.\n     *\n     * @throws \\Bolt\\Exception\\PackageManagerException\n     *\n     * @return int 0 on success or a positive error code on failure\n     *\/","attributes":[]}}},"ShowPackage":{"abstract":false,"final":true,"extends":"\\bolt\\composer\\action\\baseaction","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer show package class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$versionParser":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Composer\\Package\\Version\\VersionParser *\/","attributes":[]}},"methods":{"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var $package \\Composer\\Package\\PackageInterface *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$package","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$version","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$root","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getPackage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finds a package by name and version if provided.\n     *\n     * @param RepositoryInterface $installedRepo\n     * @param RepositoryInterface $repos\n     * @param string              $name\n     * @param string|null         $version\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return array [CompletePackageInterface, array of versions]\n     *\/","attributes":[],"arguments":[{"name":"$installedRepo","reference":false,"typehint":["RepositoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$repos","reference":false,"typehint":["RepositoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$version","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Composer\\Package\\":{"classes":{"DependencyRelationship":{"abstract":false,"final":false,"extends":"","implements":["\\jsonserializable"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer package dependency relationship.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$sourceName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$sourceVersion":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$targetName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$targetVersion":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$reason":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"jsonSerialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"toArray":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return object as array.\n     *\n     * @return array\n     *\/","attributes":[]},"getSourceName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setSourceName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $sourceName\n     *\n     * @return DependencyRelationship\n     *\/","attributes":[],"arguments":[{"name":"$sourceName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSourceVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setSourceVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $sourceVersion\n     *\n     * @return DependencyRelationship\n     *\/","attributes":[],"arguments":[{"name":"$sourceVersion","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTargetName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setTargetName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $targetName\n     *\n     * @return DependencyRelationship\n     *\/","attributes":[],"arguments":[{"name":"$targetName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTargetVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setTargetVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $targetVersion\n     *\n     * @return DependencyRelationship\n     *\/","attributes":[],"arguments":[{"name":"$targetVersion","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getReason":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setReason":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $reason\n     *\n     * @return DependencyRelationship\n     *\/","attributes":[],"arguments":[{"name":"$reason","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"serialize":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]}}},"Dependency":{"abstract":false,"final":false,"extends":"","implements":["\\jsonserializable"],"use":[],"useoptions":[],"phpdoc":"\/**\n * A single composer package dependency.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"PROHIBITS":{"value":"'prohibits'","visibility":"","phpdoc":"","attributes":[]},"DEPENDS":{"value":"'depends'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$type":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$package":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var PackageInterface *\/","attributes":[]},"$link":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Link *\/","attributes":[]},"$children":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Dependency[]|false *\/","attributes":[]},"$relationship":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var DependencyRelationship *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string             $name\n     * @param string             $type\n     * @param PackageInterface   $package\n     * @param Link               $link\n     * @param Dependency[]|false $children\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$package","reference":false,"typehint":["PackageInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$link","reference":false,"typehint":["Link"],"value":"","phpdoc":"","attributes":[]},{"name":"$children","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"jsonSerialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"toArray":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return object as array.\n     *\n     * @return array\n     *\/","attributes":[]},"create":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     * @param string $type\n     * @param array  $result\n     *\n     * @return Dependency\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$result","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     *\n     * @return Dependency\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $type\n     *\n     * @return Dependency\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return PackageInterface\n     *\/","attributes":[]},"setPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param PackageInterface $package\n     *\n     * @return Dependency\n     *\/","attributes":[],"arguments":[{"name":"$package","reference":false,"typehint":["PackageInterface"],"value":"","phpdoc":"","attributes":[]}]},"getLink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Link\n     *\/","attributes":[]},"setLink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Link $link\n     *\n     * @return Dependency\n     *\/","attributes":[],"arguments":[{"name":"$link","reference":false,"typehint":["Link"],"value":"","phpdoc":"","attributes":[]}]},"getChildren":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Dependency[]|false\n     *\/","attributes":[]},"setChildren":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Dependency[]|false $children\n     *\n     * @return Dependency\n     *\/","attributes":[],"arguments":[{"name":"$children","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRelationship":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return DependencyRelationship\n     *\/","attributes":[]},"setRelationship":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param DependencyRelationship $relationship\n     *\n     * @return Dependency\n     *\/","attributes":[],"arguments":[{"name":"$relationship","reference":false,"typehint":["DependencyRelationship"],"value":"","phpdoc":"","attributes":[]}]},"serialize":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]}}}}},"\\Bolt\\Composer\\EventListener\\":{"classes":{"PackageDescriptor":{"abstract":false,"final":true,"extends":"","implements":["\\jsonserializable"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Package reference descriptor.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$name":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$class":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$path":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$webPath":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$constraint":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$valid":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $name\n     * @param string $class\n     * @param string $path\n     * @param string $webPath\n     * @param string $constraint\n     * @param bool   $valid\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$webPath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$valid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getWebPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getConstraint":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"isValid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return bool\n     *\/","attributes":[]},"parse":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create class from uncertain JSON data.\n     *\n     * @param Composer $composer\n     * @param string   $webPath\n     * @param string   $path\n     * @param array    $jsonData\n     *\n     * @return PackageDescriptor\n     *\/","attributes":[],"arguments":[{"name":"$composer","reference":false,"typehint":["Composer"],"value":"","phpdoc":"","attributes":[]},{"name":"$webPath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$jsonData","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"create":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Re-instantiate class from array element.\n     *\n     * @param array $data\n     *\n     * @return PackageDescriptor\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"jsonSerialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"parseClass":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record the package's loading class.\n     *\n     * @param array $jsonData\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$jsonData","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"parseConstraint":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record the package's version constraints.\n     *\n     * @param array $jsonData\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$jsonData","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"parseValid":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the extension is valid for loading, i.e has a class and is withing version constraints.\n     *\n     * @param Composer    $composer\n     * @param string|null $class\n     * @param string|null $constraint\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$composer","reference":false,"typehint":["Composer"],"value":"","phpdoc":"","attributes":[]},{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$constraint","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"BufferIOListener":{"abstract":false,"final":false,"extends":"","implements":["\\composer\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Composer action listeners.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$manager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Composer\\PackageManager $manager *\/","attributes":[]},"$logger":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param PackageManager  $manager\n     * @param LoggerInterface $logger\n     *\/","attributes":[],"arguments":[{"name":"$manager","reference":false,"typehint":["PackageManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$logger","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]}]},"onPrePackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Composer pre-package action events.\n     *\n     * @param PackageEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["PackageEvent"],"value":"","phpdoc":"","attributes":[]}]},"onPostPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Composer post-package action events.\n     *\n     * @param PackageEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["PackageEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the events to subscribe to.\n     *\n     * @return array\n     *\/","attributes":[]}}},"PackageEventListener":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Event listener for extension Composer operations.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"handle":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Event handler for composer package events.\n     *\n     * @param PackageEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["PackageEvent"],"value":"","phpdoc":"","attributes":[]}]},"dump":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dump the metadata for extension loading on the 'post-autoload-dump' event.\n     *\n     * @param Event $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]}]},"mirror":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Mirror a directory if the two directories don't match.\n     *\n     * @param string       $source\n     * @param string       $dest\n     * @param PackageEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$source","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$dest","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$event","reference":false,"typehint":["PackageEvent"],"value":"","phpdoc":"","attributes":[]}]},"getInstalledComposerJson":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return all the installed extension composer.json files.\n     *\n     * @return Finder|SplFileInfo[]\n     *\/","attributes":[]}}}}},"\\Bolt\\Provider\\":{"classes":{"FilesystemServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"SessionServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Session service provider.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"ThumbnailsServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Register thumbnails service.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"findDefaultImage":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Application $app\n     * @param string      $name\n     *\n     * @return ImageInterface\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"PrefillServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"PathServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$deprecatedResources":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"CanonicalServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Canonical service provider.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"CacheServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"TwigServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"registerSandbox":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"ExtensionServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * 1st phase: Registers our services. Registers extensions on boot.\n * 2nd phase: Boots extensions on boot.\n *\/","attributes":[],"php":false,"properties":{"$firstPhase":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param bool $firstPhase\n     *\/","attributes":[],"arguments":[{"name":"$firstPhase","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"StackServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"TranslationServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"addResources":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\SplFileInfo $fileInfo *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$locale","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"mergeGenericLocales":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds generic locales into a given list.\n     *\n     * [fr_FR, es, en_GB, en_US] -> [fr_FR, fr, es, en_GB, en_US, en]\n     *\n     * @param string[] $inputLocales\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$inputLocales","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"mergeUtf8Locales":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds UTF-8 suffixes for each locale in given list.\n     *\n     * @param string[] $inputLocales\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$inputLocales","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setDefaultTimezone":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"UsersServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"FilePermissionsServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * @author Benjamin Georgeault <benjamin@wedgesama.fr>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"AccessControlServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"MailerServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * SwiftMailer integration.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"SecurityServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt security service provider.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"PermissionsServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"UploadServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class to handle uploads.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Filesystem $filesystem *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"QueryServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"NutServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"CronServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]}]}}},"ConfigServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var EventDispatcherInterface $dispatcher *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"EmbedServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Embed service provider.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Embed\\Adapters\\Adapter $info *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"MarkdownServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"RenderServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"GuzzleServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"AssetServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * HTML asset service providers.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"OmnisearchServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"WebProfilerServiceProvider":{"abstract":false,"final":false,"extends":"\\silex\\provider\\webprofilerserviceprovider","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Only use TraceableEventDispatcher and Profiler if $app['debug'] is true.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"TemplateChooserServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"PagerServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"DatabaseSchemaServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt database storage service provider.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"RandomGeneratorServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"RoutingServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"DatabaseServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Database provider.\n *\n * @author Carson Full <carsonfull@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Database\\Connection|\\Bolt\\Storage\\Database\\MasterSlaveConnection $db *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"ValidatorServiceProvider":{"abstract":false,"final":false,"extends":"\\silex\\provider\\validatorserviceprovider","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Validator service provider.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"ProfilerServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"LoggerServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Monolog provider for Bolt system logging entries.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"FormServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Register form services.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"EventListenerServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var EventDispatcherInterface $dispatcher *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"StorageServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface $dispatcher *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"MenuServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"DebugServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Configure Error & Exception Handlers, DebugClassLoader, and debug value.\n *\n * This should be registered first, so that the handlers can be registered\n * before other boot logic happens and services are invoked.\n *\n * 1. There is no error \/ exception handlers during app creation and registration stage. This is a very small window,\n *    since closures are just being registered (no logic). Extensions are not loaded either.\n * 2. App Boot\n *   2.a. Debug 1st phase: Error & exception handlers are registered based on `debug.early`'s value.\n *        There should be no logic required to get this value.\n *   2.b. Extensions 1st phase: Extensions are registered.\n *   2.c. Debug 2nd phase: The \"real\" `debug` value is retrieved from config, which means all the logic to setup config\n *        is ran. This is where everything starts happening. Then the handlers are re-registered if their configuration\n *        has changed.\n *   2.d. Extensions 2nd phase: Extensions are booted.\n *   2.e. App continues to boot everything else.\n * 3. Kernel Request\n *   3.a. Our early exception handler is replaced with either the HttpKernel or Console App exception handling.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$firstPhase":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param bool $firstPhase\n     *\/","attributes":[],"arguments":[{"name":"$firstPhase","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"registerHandlers":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"configureLogger":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Configure the error handler to log types given to the logger given and to ignore all types not specified.\n     *\n     * It's important that the BufferingLogger is completely replaced for all error types with either a real logger\n     * or null, otherwise a memory leak could occur.\n     *\n     * @param ErrorHandler    $handler\n     * @param LoggerInterface $logger\n     * @param array|int       $loggedAt An array map of E_* to LogLevel::* or an integer bit field of E_* constants\n     *\/","attributes":[],"arguments":[{"name":"$handler","reference":false,"typehint":["ErrorHandler"],"value":"","phpdoc":"","attributes":[]},{"name":"$logger","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggedAt","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ControllerServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface","\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated Deprecated since 3.3, to be removed in 4.0. *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated Deprecated since 3.0, to be removed in 4.0. *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"onMountFrontend":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["MountEvent"],"value":"","phpdoc":"","attributes":[]}]},"onMountBackend":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["MountEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"DumperServiceProvider":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * DI for Symfony's VarDumper.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Legacy\\":{"classes":{"BaseExtension":{"abstract":true,"final":false,"extends":"\\bolt\\extension\\simpleextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @deprecated Deprecated since 3.0, to be removed in 4.0.\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$installtype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$extensionConfig":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$composerJsonLoaded":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$composerJson":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"getApp":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setInstallType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the extension install type.\n     *\n     * @param string $type\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getInstallType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the extension type.\n     *\n     * @return string\n     *\/","attributes":[]},"getComposerName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the Composer name, e.g. 'bolt\/foobar-extension'.\n     *\n     * @return string|null The Composer name for this extension, or NULL if the\n     *                     extension is not composerized.\n     *\/","attributes":[]},"getComposerJSON":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the contents of the extension's composer.json file, lazy-loading\n     * as needed.\n     *\/","attributes":[]},"setComposerConfiguration":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This allows write access to the composer config, allowing simulation of this feature\n     * even if the extension doesn't have a physical composer.json file.\n     *\n     * @param array $configuration\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$configuration","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getExtensionConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Builds an array suitable for conversion to JSON, which in turn will end\n     * up in a consolidated JSON file containing the configurations of all\n     * installed extensions.\n     *\/","attributes":[]},"isSafe":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allow use of the extension's Twig function in content records when the\n     * content type has the setting 'allowtwig: true' is set.\n     *\n     * @return boolean\n     *\/","attributes":[]},"getSnippets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the available Snippets, used in \\Bolt\\Extensions.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use $app['asset.queue.snippet']->getQueue()\n     *\n     * @return array\n     *\/","attributes":[]},"getAssets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a list of all css and js assets that are added via extensions.\n     *\n     * @return array\n     *\/","attributes":[]},"clearAssets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clear all previously added assets.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\/","attributes":[]},"addMenuOption":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use \\Bolt\\Extension\\MenuTrait::addMenuEntry() instead\n     *\/","attributes":[],"arguments":[{"name":"$label","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$icon","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$requiredPermission","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"parseSnippet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse a snippet, an pass on the generated HTML to the caller (Extensions).\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $callback\n     * @param string $var1\n     * @param string $var2\n     * @param string $var3\n     *\n     * @return bool|string\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$var1","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$var2","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$var3","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]}}},"Content":{"abstract":false,"final":false,"extends":"","implements":["\\arrayaccess"],"use":["\\bolt\\storage\\entity\\contenttypetrait","\\bolt\\storage\\entity\\contentroutetrait","\\bolt\\storage\\entity\\contentrelationtrait","\\bolt\\storage\\entity\\contentvaluestrait","\\bolt\\storage\\entity\\contentsearchtrait","\\bolt\\storage\\entity\\contenttaxonomytrait"],"useoptions":[""],"phpdoc":"\/**\n * Legacy Content class.\n *\n * @deprecated Deprecated since 3.0, to be removed in 4.0.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$values":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$taxonomy":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$relation":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$contenttype":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$user":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$sortorder":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$config":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$group":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\Silex\\Application $app\n     * @param string             $contenttype\n     * @param array              $values\n     * @param boolean            $isRootType\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$values","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$isRootType","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"getBaseColumns":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets a list of the base columns that are hard-coded into all content\n     * types (rather than configured through contenttypes.yml).\n     *\/","attributes":[]},"setContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the Contenttype for the record.\n     *\n     * @param array|string $contenttype\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDecodedValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the decoded version of a value of the current object.\n     *\n     * @param string $name name of the value to get\n     *\n     * @return mixed The decoded value or null when no value available\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRenderedValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @internal Forward comparability for to forward legacy calls to getDecodedValue()\n     *\n     * @param string $fieldName\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"preParse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If passed snippet contains Twig tags, parse the string as Twig, and return the results.\n     *\n     * @param string  $snippet\n     * @param boolean $allowtwig\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$snippet","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$allowtwig","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTemplateContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"__call":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Magic __call function, used for when templates use {{ content.title }},\n     * so we can map it to $this->values['title'].\n     *\n     * @param string $name      Method name originally called\n     * @param array  $arguments Arguments to the call\n     *\n     * @return mixed return value of the call\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$arguments","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"previous":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the previous record. In this case 'previous' is defined as 'latest one published before\n     * this one' by default. You can pass a parameter like 'id' or '-title' to use that as\n     * the column to sort on.\n     *\n     * @param string $field\n     * @param array  $where\n     *\n     * @return \\Bolt\\Legacy\\Content\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"'datepublish'","phpdoc":"","attributes":[]},{"name":"$where","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"next":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the next record. In this case 'next' is defined as 'first one published after\n     * this one' by default. You can pass a parameter like 'id' or '-title' to use that as\n     * the column to sort on.\n     *\n     * @param string $field\n     * @param array  $where\n     *\n     * @return \\Bolt\\Legacy\\Content\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"'datepublish'","phpdoc":"","attributes":[]},{"name":"$where","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * ArrayAccess support.\n     *\n     * @param mixed $offset\n     *\n     * @return boolean\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * ArrayAccess support.\n     *\n     * @param mixed $offset\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * ArrayAccess support.\n     *\n     * @todo we could implement an setDecodedValue() function to do the encoding here\n     *\n     * @param string $offset\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * ArrayAccess support.\n     *\n     * @param string $offset\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"AppSingleton":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Don't use this. Period.\n *\n * This is the same singleton ResourceManager had. It has just been pulled out so other\n * deprecated parts of the codebase don't have to be coupled to ResourceManager.\n *\n * @deprecated Deprecated since 3.3, to be removed in 4.0.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":true,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]}},"methods":{"get":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Wrong.\n     *\n     * @return Application\n     *\/","attributes":[]},"set":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]}}},"Storage":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Legacy Storage class.\n *\n * @deprecated Deprecated since 3.0, to be removed in 4.0.\n *\/","attributes":[],"php":false,"properties":{"$images":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]},"$tables":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$prefix":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$checkedfortimed":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$inDispatcher":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool Test to indicate if we're inside a dispatcher. *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"getContentObject":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an object for the content of a specific contenttype. This will be\n     * \\Bolt\\Legacy\\Content, unless the contenttype defined another class to be\n     * used.\n     *\n     * @param array|string $contenttype\n     * @param array        $values\n     * @param bool         $isRootType\n     *\n     * @throws \\Exception\n     *\n     * @return \\Bolt\\Legacy\\Content\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$values","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$isRootType","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"preFill":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Database\\Prefill\\Builder $builder *\/","attributes":[],"arguments":[{"name":"$contentTypes","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"logInsert":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Writes a content-changelog entry for a newly-created entry.\n     *\n     * @param string  $contenttype Slug of the record contenttype\n     * @param integer $contentid   ID of the record\n     * @param array   $content     Record values\n     * @param string  $comment     Editor's comment\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$comment","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"logUpdate":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Writes a content-changelog entry for an updated entry.\n     * This function must be called *before* the actual update, because it\n     * fetches the old content from the database.\n     *\n     * @param string  $contenttype Slug of the record contenttype\n     * @param integer $contentid   ID of the record\n     * @param array   $newContent  New record values\n     * @param array   $oldContent  Old record values\n     * @param string  $comment     Editor's comment\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$newContent","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$oldContent","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$comment","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"logDelete":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Writes a content-changelog entry for a deleted entry.\n     * This function must be called *before* the actual update, because it.\n     *\n     * @param string  $contenttype Slug of the record contenttype\n     * @param integer $contentid   ID of the record\n     * @param array   $content     Record values\n     * @param string  $comment     Editor's comment\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$comment","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"saveContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Save a record.\n     *\n     * @param Content $content\n     * @param string  $comment\n     *\n     * @throws \\Bolt\\Exception\\StorageException\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$comment","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"deleteContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Delete a record.\n     *\n     * @param string  $contenttype\n     * @param integer $id\n     *\n     * @throws \\Bolt\\Exception\\StorageException\n     *\n     * @return integer The number of affected rows.\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"insertContent":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Insert a new contenttype record in the database.\n     *\n     * @param \\Bolt\\Legacy\\Content $content Record content to insert\n     * @param string               $comment Editor's comment\n     *\n     * @return boolean\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$comment","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"updateContent":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update a Bolt contenttype record.\n     *\n     * @param \\Bolt\\Legacy\\Content $content The content object to be updated\n     * @param string               $comment Add a comment to save with change.\n     *\n     * @throws \\Bolt\\Exception\\StorageException\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$comment","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getValidSaveData":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a valid array to commit.\n     *\n     * @param array $fieldvalues\n     * @param array $contenttype\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$fieldvalues","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"updateSingleValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update a single value from content.\n     *\n     * It is called in list of contents.\n     *\n     * @param string $contenttype Content Type to be edited.\n     * @param int    $id          Id of content to be updated.\n     * @param string $field       Field name of content to be changed.\n     * @param mixed  $value       New value to be defined on field.\n     *\n     * @return bool Returns true when update is done or false if not.\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getEmptyContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"decodeSearchQuery":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Decode search query into searchable parts.\n     *\n     * @param string $q\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$q","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"searchSingleContentType":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Search through a single contenttype.\n     *\n     * Search, weigh and return the results.\n     *\n     * @param       $query\n     * @param       $contenttype\n     * @param       $fields\n     * @param array $filter\n     * @param bool  $implode\n     *\n     * @return Content\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]},{"name":"$implode","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"compareSearchWeights":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compare by search weights.\n     *\n     * Or fallback to dates or title\n     *\n     * @param \\Bolt\\Legacy\\Content $a\n     * @param \\Bolt\\Legacy\\Content $b\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$a","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$b","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]}]},"searchContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Search through actual content.\n     *\n     * Unless the query is invalid it will always return a 'result array'. It may\n     * complain in the log but it won't abort.\n     *\n     * @param string  $q            Search string\n     * @param array   $contenttypes Contenttype names to search for:\n     *                              - string: Specific contenttype\n     *                              - null:   Every searchable contenttype\n     * @param array   $filters      Additional filters for contenttypes\n     *                              - key is contenttype\n     *                              - value is filter\n     * @param integer $limit        limit the number of results\n     * @param integer $offset       skip this number of results\n     *\n     * @return mixed false if query is invalid, an array with results if query was executed\n     *\/","attributes":[],"arguments":[{"name":"$q","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypes","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]},{"name":"$filters","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]},{"name":"$limit","reference":false,"typehint":[""],"value":9999,"phpdoc":"","attributes":[]},{"name":"$offset","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"searchAllContentTypes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$parameters","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$pager","reference":true,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"searchContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Pager\\PagerManager $manager *\/","attributes":[],"arguments":[{"name":"$contenttypename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$pager","reference":true,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getContentByTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Pager\\PagerManager $manager *\/","attributes":[],"arguments":[{"name":"$taxonomyslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"publishTimedRecords":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     * @see        \\Bolt\\Storage\\EventProcessor\\TimedRecord::publishTimedRecords()\n     *\/","attributes":[]},"depublishExpiredRecords":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     * @see        \\Bolt\\Storage\\EventProcessor\\TimedRecord::holdExpiredRecords()\n     *\/","attributes":[]},"organizeQueryParameters":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Split into meta-parameters and contenttype parameters.\n     *\n     * This is tightly coupled to $this->getContent()\n     *\n     * @param array|string|null $inParameters\n     *\n     * @see $this->decodeContentQuery()\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$inParameters","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"decodeContentTypesFromText":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Decode a contenttypes argument from text.\n     *\n     * (entry,page) -> ['entry', 'page']\n     * event -> ['event']\n     *\n     * @param string $text text with contenttypes\n     *\n     * @return array array with contenttype(slug)s\n     *\/","attributes":[],"arguments":[{"name":"$text","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseTextQuery":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse textquery into useable arguments.\n     *\n     * This is tightly coupled to $this->getContent()\n     *\n     * @see $this->decodeContentQuery()\n     *\n     * @param $textquery\n     * @param array $decoded         a pre-set decoded array to fill\n     * @param array $metaParameters  meta parameters\n     * @param array $ctypeParameters contenttype parameters\n     *\/","attributes":[],"arguments":[{"name":"$textquery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$decoded","reference":true,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$metaParameters","reference":true,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$ctypeParameters","reference":true,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"prepareDecodedQueryForUse":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prepare decoded for actual use.\n     *\n     * This is tightly coupled to $this->getContent()\n     *\n     * @see $this->decodeContentQuery()\n     *\n     * @param $decoded\n     * @param $metaParameters\n     * @param $ctypeParameters\n     *\/","attributes":[],"arguments":[{"name":"$decoded","reference":true,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$metaParameters","reference":true,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$ctypeParameters","reference":true,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"decodeQueryOrder":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the parameter for the 'order by' part of a query.\n     *\n     * This is tightly coupled to $this->getContent()\n     *\n     * @param array  $contenttype\n     * @param string $orderValue\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$orderValue","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"decodeContentQuery":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Decode a content textquery\n     *\n     * This is tightly coupled to $this->getContent()\n     *\n     * @param string $textquery\n     * @param array  $inParameters\n     *\n     * @internal param string $query the query (eg. page\/about, entries\/latest\/5)\n     * @internal param array  $parameters parameters to the query\n     *\n     * @return array decoded query, keys:\n     *               contenttypes   - array, contenttypeslugs that will be returned\n     *               return_single  - boolean, true if only 1 result should be returned\n     *               self_paginated - boolean, true if already be paginated\n     *               order_callback - callback, sort results post-hydration after everything is merged\n     *               queries        - array of SQL query parts:\n     *               * tablename   - tablename\n     *               * contenttype - contenttype array\n     *               * from        - from part\n     *               * where       - where part\n     *               * order       - order part\n     *               * params      - bind-parameters\n     *               parameters     - parameters to use after the queries\n     *\/","attributes":[],"arguments":[{"name":"$textquery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$inParameters","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"decodePageParameter":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Decodes contextual page number from current request url if found.\n     *\n     * @param string $context      Pager id\/name in url which value we find\n     * @param array  $inParameters\n     *\n     * @return mixed Page number in context\n     * @deprecated Not used in core anymore\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$inParameters","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"hydrateRows":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Hydrate database rows into objects.\n     *\n     * @param array|string $contenttype\n     * @param array        $rows\n     * @param boolean      $getTaxoAndRel\n     *\n     * @throws \\Exception\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$rows","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$getTaxoAndRel","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"executeGetContentSearch":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Execute the content queries.\n     *\n     * This is tightly coupled to $this->getContent()\n     *\n     * @see $this->getContent()\n     *\n     * @param array $decoded\n     * @param array $parameters\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$decoded","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"executeGetContentQueries":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Execute the content queries.\n     *\n     * This is tightly coupled to $this->getContent()\n     *\n     * @see $this->getContent()\n     *\n     * @param array $decoded\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$decoded","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * getContent based on a 'human readable query'.\n     *\n     * Used directly by {% setcontent %} but also in other parts.\n     *\n     * This code has been split into multiple methods in the spirit of\n     * separation of concerns, but the situation is still far from ideal.\n     *\n     * Where applicable each 'concern' notes the coupling in the local\n     * documentation.\n     *\n     * @param string $textquery\n     * @param string $parameters\n     * @param array  $pager\n     * @param array  $whereparameters\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$textquery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$pager","reference":true,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$whereparameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"runContentTypeTableChecks":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check for the existence of ContentType tables.\n     *\n     * @param array $contenttypes ContentType slugs to check\n     *\n     * @return boolean\n     *\/","attributes":[],"arguments":[{"name":"$contenttypes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"isValidColumn":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a given name is a valid column, and if it can be used in queries.\n     *\n     * @param string  $name\n     * @param array   $contenttype\n     * @param boolean $allowVariants\n     *\n     * @return boolean\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$allowVariants","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getFieldName":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get field name, stripping possible \" DESC\" \" ASC\" etc.\n     *\n     * @param string $name\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getEscapedSortorder":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an escaped sortorder for use in SQL, from a fieldname like 'title' or '-id'.\n     *\n     * for example, -id returns `r`.`id` DESC\n     *\n     * @param string $name\n     * @param string $prefix\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$prefix","reference":false,"typehint":[""],"value":"'r'","phpdoc":"","attributes":[]}]},"isNotLastItemInArray":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if this is the last element in the array.\n     *\n     * @param $totalOrderByElements\n     * @param $index\n     *\n     * @return boolean\n     *\/","attributes":[],"arguments":[{"name":"$totalOrderByElements","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$index","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getOrderBys":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the ORDER BY parameters for the query.\n     *\n     * @param $order\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$order","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isMultiOrderQuery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if this query has multiple ORDER BY parameters.\n     *\n     * @param $order\n     *\n     * @return boolean\n     *\/","attributes":[],"arguments":[{"name":"$order","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSortOrder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get sorting order of name, stripping possible \" DESC\" \" ASC\" etc., and\n     * also return the sorting order.\n     *\n     * @param string $name\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"'-datepublish'","phpdoc":"","attributes":[]}]},"groupingSort":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function for sorting Records of content that have a Grouping.\n     *\n     * @param Content $a\n     * @param Content $b\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$a","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$b","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]}]},"parseWhereParameter":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to set the proper 'where' parameter,\n     * when getting values like '<2012' or '!bob'.\n     *\n     * @param string $key\n     * @param string $value\n     * @param mixed  $fieldtype\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldtype","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the contenttype as an array, based on the given $contenttypeslug.\n     *\n     * @param string $contenttypeslug\n     *\n     * @return boolean|array\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTaxonomyType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the taxonomy as an array, based on the given $taxonomyslug.\n     *\n     * @param string $taxonomyslug\n     *\n     * @return boolean|array\n     *\/","attributes":[],"arguments":[{"name":"$taxonomyslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentTypes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of the available contenttypes.\n     *\n     * @return array $contenttypes\n     *\/","attributes":[]},"getContentTypeFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of the available fields for a given contenttype.\n     *\n     * @param string $contenttypeslug\n     *\n     * @return array $fields\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentTypeFieldType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the fieldtype for a given contenttype and fieldname.\n     *\n     * @param string $contenttypeslug\n     * @param string $fieldname\n     *\n     * @return array $fields\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentTypeGrouping":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a given contenttype has a grouping, and if it does, return it.\n     *\n     * @param string $contenttypeslug\n     *\n     * @return mixed $grouping\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentTypeTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of the available taxonomytypes for a given contenttype.\n     *\n     * @param string $contenttypeslug\n     *\n     * @return array $taxonomy\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTaxonomy":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the taxonomy for one or more units of content, return the array with the taxonomy attached.\n     *\n     * @param \\Bolt\\Legacy\\Content[] $content\n     *\n     * @return array $content\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"updateTaxonomy":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update \/ insert taxonomy for a given content-unit.\n     *\n     * @param string  $contenttype\n     * @param integer $contentId\n     * @param array   $taxonomy\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomy","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRelation":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the relations for one or more units of content, return the array with the taxonomy attached.\n     *\n     * @param array $content\n     *\n     * @return array $content\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRepeaters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"updateRelation":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update \/ insert relation for a given content-unit.\n     *\n     * $relation looks like:\n     * arr(2)\n     * [\n     *   \"pages\"        => arr(1)\n     *   [\n     *      0 => str(2) \"22\"\n     *   ]\n     *   \"showcases\" => arr(3)\n     *   [\n     *      0 => str(2) \"15\"\n     *      1 => str(1) \"9\"\n     *      2 => str(2) \"13\"\n     *   ]\n     * ]\n     *\n     * $currentvalues looks like\n     * arr(2)\n     * [\n     *   0 => arr(3)\n     *   [\n     *     \"id\"             => str(1) \"5\"\n     *     \"to_contenttype\" => str(12) \"showcases\"\n     *     \"to_id\"          => str(2) \"15\"\n     *   ]\n     *   1 => arr(3)\n     *   [\n     *     \"id\"             => str(1) \"6\"\n     *     \"to_contenttype\" => str(12) \"showcases\"\n     *     \"to_id\"          => str(1) \"9\"\n     *   ]\n     * ]\n     *\n     * @param string  $contenttype\n     * @param integer $contentId\n     * @param array   $relation\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$relation","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLatestId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUri":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a unique URL for a record\n     *\n     * @param string  $title\n     * @param integer $id\n     * @param string  $contenttypeslug\n     * @param boolean $fulluri\n     * @param boolean $allowempty\n     * @param string  $slugfield\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$title","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]},{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"\"\"","phpdoc":"","attributes":[]},{"name":"$fulluri","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]},{"name":"$allowempty","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]},{"name":"$slugfield","reference":false,"typehint":[""],"value":"'slug'","phpdoc":"","attributes":[]}]},"tableExists":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the table $name exists. We use our own queries here, because it's _much_\n     * faster than Doctrine's getSchemaManager().\n     *\n     * @param $name\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTablename":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the table name with prefix from a given $name.\n     *\n     * @param string $name\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContenttypeTablename":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the tablename with prefix from a given Contenttype.\n     *\n     * @param string|array $contenttype\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasRecords":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$tablename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"findContent":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find record from Content Type and Content Id.\n     *\n     * @param string $tablename Table name\n     * @param int    $contentId Content Id\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$tablename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setPager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Setter for pager storage element.\n     *\n     * @deprecated Just for keep BC\n     *\n     * @param string      $name\n     * @param array|Pager $pager\n     *\n     * @return Storage\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$pager","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPager":{"visibility":"public","static":false,"abstract":false,"reference":true,"returntypes":[""],"phpdoc":"\/**\n     * Getter of a pager element. Pager can hold a paging snapshot map.\n     *\n     * @deprecated Just for keep BC\n     *\n     * @param string $name Optional name of a pager element. Whole pager map returns if no name given.\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"isEmptyPager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return bool\n     *\/","attributes":[]}}},"AbstractPager":{"abstract":true,"final":false,"extends":"","implements":["\\arrayaccess"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class Pager\n * -----------\n *  Legacy class to keep compatibility for a while.\n *  It is just for remap deprecated properties like showing_from -> showingFrom\n *\n * @deprecated Deprecated since 3.3, to be removed in 4.0.\n *\/","attributes":[],"php":false,"properties":{"$manager":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var \\Bolt\\Pager\\PagerManager\n     *\/","attributes":[]}},"methods":{"__get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__isset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCamelPropName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"camelize":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$varname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Legacy\\PasswordLib\\":{"classes":{"PasswordLibRandomGenerator":{"abstract":false,"final":true,"extends":"\\passwordlib\\random\\generator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A PasswordLib Random Generator that uses random_bytes.\n *\n * @internal\n *\n * @deprecated Deprecated since 3.3, to be removed in 4.0.\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\/","attributes":[]},"generate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$size","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"generateInt":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$min","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]},{"name":"$max","reference":false,"typehint":[""],"value":"PHP_INT_MAX","phpdoc":"","attributes":[]}]},"generateString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$length","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$characters","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"addSource":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$source","reference":false,"typehint":["Source"],"value":"","phpdoc":"","attributes":[]}]},"getMixer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getSources":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"PasswordLibFactory":{"abstract":false,"final":true,"extends":"\\passwordlib\\password\\factory","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A PasswordLib Factory that uses our random generator.\n *\n * @internal\n *\n * @deprecated Deprecated since 3.3, to be removed in 4.0.\n *\/","attributes":[],"php":false,"properties":{"$implementations":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var AbstractPassword[] *\/","attributes":[]},"$generator":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PasswordLibRandomGenerator *\/","attributes":[]}},"methods":{"createHash":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var AbstractPassword $instance *\/","attributes":[],"arguments":[{"name":"$password","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$prefix","reference":false,"typehint":[""],"value":"'$2a$'","phpdoc":"","attributes":[]}]},"verifyHash":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var AbstractPassword $instance *\/","attributes":[],"arguments":[{"name":"$password","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$hash","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getGenerator":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}}}},"\\Bolt\\Filesystem\\":{"classes":{"UploadContainer":{"abstract":false,"final":false,"extends":"","implements":["\\sirius\\upload\\container\\containerinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$filesystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FilesystemInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FilesystemInterface $filesystem\n     *\/","attributes":[],"arguments":[{"name":"$filesystem","reference":false,"typehint":["FilesystemInterface"],"value":"","phpdoc":"","attributes":[]}]},"isWritable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"save":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"delete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"moveUploadedFile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\n     * @throws IOException\n     *\n     * This is called from \\Sirius\\Upload\\Handler::processSingleFile() which expects a boolean return value,\n     * and as \\Bolt\\FilesystemInterface::putStream only returns void or throws an error, we catch\n     * IOExceptions here and return a false on exception\n     *\/","attributes":[],"arguments":[{"name":"$localFile","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$destination","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Listing":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * File and directory listing handler.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$directory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var DirectoryInterface *\/","attributes":[]},"$contents":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var HandlerInterface[] *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param DirectoryInterface $directory\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]}]},"getDirectories":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the directories content listing of the requested target.\n     *\n     * @param bool $showHidden True to show hidden (dot) files\n     *\n     * @throws Exception\\IOException\n     *\n     * @return DirectoryInterface[]\n     *\/","attributes":[],"arguments":[{"name":"$showHidden","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getFiles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the files content listing of the requested target.\n     *\n     * @param bool $showHidden True to show hidden (dot) files\n     *\n     * @throws Exception\\IOException\n     *\n     * @return FileInterface[]\n     *\/","attributes":[],"arguments":[{"name":"$showHidden","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"isAuthorized":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Does the web server user have read\/write file system permissions to the\n     * target directory, see {@see \\Bolt\\Filesystem\\Plugin\\Authorized}.\n     *\n     * @deprecated since 3.3 to be removed in 4.0.\n     *\n     * @throws Exception\\IOException\n     *\n     * @return bool\n     *\/","attributes":[]},"getContents":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Lazy load & cache the directory contents.\n     *\n     * @return HandlerInterface[]\n     *\/","attributes":[]}}},"FilePermissions":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Use to check if an access to a file is allowed.\n *\n * @author Benjamin Georgeault <benjamin@wedgesama.fr>\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$allowedPrefixes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string[] List of Filesystem prefixes that are editable. *\/","attributes":[]},"$allowed":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array Regex list represented editable resources. *\/","attributes":[]},"$blocked":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array Regex list represented resources forbidden for edition. *\/","attributes":[]},"$maxUploadSize":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var float Maximum upload size allowed by PHP, in bytes. *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor, initialize filters rules.\n     *\n     * @param Config $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"authorized":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if you can do something with the given file or directory.\n     *\n     * @param string $prefix\n     * @param string $path\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"allowedUpload":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if a given file is acceptable for upload.\n     *\n     * @param string $originalFilename\n     *\n     * @throws IOException\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$originalFilename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAllowedUploadExtensions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the array of configured acceptable file extensions.\n     *\n     * @return array\n     *\/","attributes":[]},"getMaxUploadSize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the maximum upload size the server is configured to accept.\n     *\n     * @return float\n     *\/","attributes":[]},"getMaxUploadSizeNice":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the max upload value in a formatted string.\n     *\n     * @return string\n     *\/","attributes":[]}}},"Matcher":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is designed to help migrate us to our new filesystem abstraction which\n * requires mount points. During this transition period we need to be able to\n * match paths without mount points to a filesystem.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$filesystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FilesystemInterface *\/","attributes":[]},"$filesystemsToCheck":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FilesystemInterface $filesystem\n     * @param string[]            $filesystemsToCheck\n     *\/","attributes":[],"arguments":[{"name":"$filesystem","reference":false,"typehint":["FilesystemInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$filesystemsToCheck","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getFile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the file object for the path given. Paths with the mount point included are\n     * preferred, but are not required for BC. If the mount point is not included a list\n     * of filesystems are checked and chosen if the file exists in that filesystem.\n     *\n     * @param FileInterface|string $path\n     * @param bool                 $throwException\n     *\n     * @throws FileNotFoundException if file was not found\n     *\n     * @return FileInterface\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$throwException","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"getImage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Same as {@see getFile} for images.\n     *\n     * @param ImageInterface|string $path\n     * @param bool                  $throwException\n     *\n     * @throws FileNotFoundException if file was not found\n     *\n     * @return ImageInterface\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$throwException","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"containsMountPoint":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Change if a path contains a mount point.\n     *\n     * Ex: files:\/\/foo.jpg\n     *\n     * @param string $path\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Filesystem\\Handler\\":{"classes":{"NullableImage":{"abstract":false,"final":false,"extends":"\\bolt\\filesystem\\handler\\image","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Image used for twig where exceptions cannot be caught.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getInfo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$cache","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"getType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}}},"\\Bolt\\Filesystem\\Plugin\\":{"classes":{"NoAssetUrl":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\filesystem\\plugininterface"],"use":["\\bolt\\filesystem\\plugin\\plugintrait"],"useoptions":[""],"phpdoc":"\/**\n * Declare that the filesystem cannot use \"url\" method.\n *\n * Useful when the AssetUrl plugin is used AND when the filesystem mount point matches an asset package,\n * but you don't want to use that one.\n *\/","attributes":[],"php":false,"methods":{"getMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"Authorized":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\filesystem\\plugininterface"],"use":["\\bolt\\filesystem\\plugin\\plugintrait"],"useoptions":[""],"phpdoc":"\/**\n * Connects filesystem to FilePermissions class.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$filePermissions":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FilePermissions *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FilePermissions $filePermissions\n     *\/","attributes":[],"arguments":[{"name":"$filePermissions","reference":false,"typehint":["FilePermissions"],"value":"","phpdoc":"","attributes":[]}]},"getMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether you are authorized to do something with a file or directory.\n     *\n     * @param string $path\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ThumbnailUrl":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\filesystem\\plugininterface"],"use":["\\bolt\\filesystem\\plugin\\plugintrait"],"useoptions":[""],"phpdoc":"\/**\n * Generates thumbnail urls.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$urlGenerator":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param UrlGeneratorInterface $urlGenerator\n     *\/","attributes":[],"arguments":[{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]}]},"getMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate thumbnail url.\n     *\n     * @param string $path\n     * @param int    $width\n     * @param int    $height\n     * @param string $action\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$height","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$action","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Parents":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\filesystem\\plugininterface"],"use":["\\bolt\\filesystem\\plugin\\plugintrait"],"useoptions":[""],"phpdoc":"\/**\n * Returns a list of parent directory objects for a path.\n *\n * Example: parents(\"a\/b\/c\") \/\/ [b, a, (root)]\n *\/","attributes":[],"php":false,"methods":{"getMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $path\n     *\n     * @return DirectoryInterface[]\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ToJs":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\filesystem\\plugininterface"],"use":["\\bolt\\filesystem\\plugin\\plugintrait"],"useoptions":[""],"phpdoc":"\/**\n * Returns intrinsic data about file as well as some pre-generated links for JS to use.\n *\n * Goal of this plugin is to always give JS consistent data about a file in a DRY way.\n *\/","attributes":[],"php":false,"methods":{"getMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"AssetUrl":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\filesystem\\plugininterface"],"use":["\\bolt\\filesystem\\plugin\\plugintrait"],"useoptions":[""],"phpdoc":"\/**\n * Returns the public url\/path of an asset (filesystem path).\n *\n * If this plugin is given packages and the filesystem has a mount point\n * it will be used as the package name for getting the url.\n *\n * For example:\n *\n *  \/\/ $fs = Bolt\\Filesystem\\Manager\n *  $fs->url('foo:\/\/bar.jpg');\n *\n * Uses the package \"foo\" in the Packages class to generate url.\n *\/","attributes":[],"php":false,"properties":{"$packages":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Packages|PackageInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Packages|PackageInterface $packages\n     *\/","attributes":[],"arguments":[{"name":"$packages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the public url\/path of an asset.\n     *\n     * @param string $path\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"HasUrl":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\filesystem\\plugininterface"],"use":["\\bolt\\filesystem\\plugin\\plugintrait"],"useoptions":[""],"phpdoc":"\/**\n * Determines if the path has a url by try-catching the url plugin.\n *\/","attributes":[],"php":false,"methods":{"getMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"handle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine if the path has a url.\n     *\n     * @param string $path\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"traits":{"PluginTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait to shortcut filesystem setter for plugins.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$filesystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FilesystemInterface *\/","attributes":[]}},"methods":{"setFilesystem":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$filesystem","reference":false,"typehint":["FilesystemInterface"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Filesystem\\Exception\\":{"classes":{"DefaultImageNotFoundException":{"abstract":false,"final":false,"extends":"\\bolt\\filesystem\\exception\\filenotfoundexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string          $message\n     * @param string          $path\n     * @param \\Exception|null $previous\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$previous","reference":false,"typehint":["\\Exception"],"value":"null","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\":{"classes":{"NamingStrategy":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\namingstrategyinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles Object to DB naming adjustments.\n *\/","attributes":[],"php":false,"properties":{"$prefix":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"'bolt_'","phpdoc":"","attributes":[]}]},"classToTableName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Takes either a global or absolute class name and returns an underscored table name.\n     *\n     * @param string $className\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"classToAlias":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates an automatic alias from a class name.\n     *\n     * @param string $className\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRelativeClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a class name with namespaces removed.\n     *\n     * @param string $className\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContentLegacyService":{"abstract":false,"final":false,"extends":"","implements":[],"use":["\\bolt\\storage\\entity\\contentroutetrait","\\bolt\\storage\\entity\\contentrelationtrait","\\bolt\\storage\\entity\\contenttaxonomytrait","\\bolt\\storage\\entity\\contentsearchtrait","\\bolt\\storage\\entity\\contentvaluestrait"],"useoptions":[""],"phpdoc":"\/**\n * Legacy bridge for Content object backward compatibility.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"initialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initialise.\n     *\n     * @param Entity\\Entity $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Entity\\Entity"],"value":"","phpdoc":"","attributes":[]}]},"setupContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the legacy ContentType object on the Entity.\n     *\n     * @param Entity\\Entity $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Entity\\Entity"],"value":"","phpdoc":"","attributes":[]}]}}},"QuerySet":{"abstract":false,"final":false,"extends":"\\arrayiterator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class works keeps a set of queries that will eventually\n * be executed sequentially.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$resultCallbacks":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$lastInsertId":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$parentId":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"append":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryBuilder $qb A QueryBuilder instance\n     *\/","attributes":[],"arguments":[{"name":"$qb","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"execute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Execute function, iterate the queries, and execute them sequentially.\n     *\n     * @throws \\Exception\n     *\n     * @return \\Doctrine\\DBAL\\Driver\\Statement|int|null\n     *\/","attributes":[]},"onResult":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a callback that gets run before a secondary query that passes the supplementary\n     * query and the result of the first query into the callable.\n     *\n     * @param callable $callback [description]\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getInsertId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter method to return last insert ID from query.\n     *\n     * @return int|null\n     *\/","attributes":[]},"setLastInsertId":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @TODO Temporary workaround for PostgreSQL databases that don't use a sequence.\n     *\n     * @param QueryBuilder $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"getParentId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return mixed\n     *\/","attributes":[]},"setParentId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $parentId\n     *\/","attributes":[],"arguments":[{"name":"$parentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPrimary":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * A helper method to get the primary database query from a set. Normally this points to the first in the set.\n     *\n     * @return QueryBuilder\n     *\/","attributes":[]}}},"LazyEntityManager":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\entitymanagerinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Lazy-loading EntityManager.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$factory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var callable $factory *\/","attributes":[]},"$em":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager $urlGenerator *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param callable $factory Should return EntityManager when invoked\n     *\/","attributes":[],"arguments":[{"name":"$factory","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getEntityManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return EntityManager\n     *\/","attributes":[]},"getRepository":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\n     * @deprecated will be removed when {{ setcontent }} is cut over\n     *\/","attributes":[],"arguments":[{"name":"$textQuery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$pager","reference":true,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$whereParameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"FieldManager":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Uses a typemap to construct an instance of a Field.\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$handlers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$typemap":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$boltConfig":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$sanitiser":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var SanitiserInterface *\/","attributes":[]},"$customHandlers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     * Requires access to legacy Config class so that it can add fields to the old-style manager\n     * This can be removed once the templating has migrated to the new system.\n     *\n     * @param array              $typemap\n     * @param Config             $config\n     * @param SanitiserInterface $sanitiser\n     *\/","attributes":[],"arguments":[{"name":"$typemap","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$sanitiser","reference":false,"typehint":["SanitiserInterface"],"value":"","phpdoc":"","attributes":[]}]},"setEntityManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set an instance of EntityManager.\n     *\n     * @param EntityManager $em\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"null","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the field instance for the supplied class.\n     *\n     * @param string $class\n     * @param array  $mapping\n     *\n     * @return FieldTypeBase\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$mapping","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFieldFor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Looks up a type from the typemap and returns a field class.\n     *\n     * @param string $type\n     *\n     * @return FieldTypeBase|false\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Links the field name found in the config to a callable handler.\n     *\n     * @param string          $class\n     * @param callable|object $handler\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$handler","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addFieldType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shorthand to add a field to both the new and legacy managers.\n     *\n     * @param string               $name\n     * @param Field\\FieldInterface $field\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":["Field\\FieldInterface"],"value":"","phpdoc":"","attributes":[]}]},"hasCustomHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Note, this method is for Bolt use only, as a way to distinguish which fields have been added outside of the\n     * core system. It will be removed in a future version.\n     *\n     * @param string $name\n     *\n     * @internal\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"EntityManager":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\entitymanagerinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Manages all loaded entities across application, provides access to Repository\n * Classes.\n *\n * Legacy methods:\n *\n * @method array getContentType($contenttypeslug)\n * @method void  publishTimedRecords($contenttype)\n * @method void  depublishExpiredRecords($contenttype)\n *\/","attributes":[],"php":false,"properties":{"$conn":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Connection *\/","attributes":[]},"$eventManager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EventDispatcherInterface *\/","attributes":[]},"$mapping":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var MetadataDriver *\/","attributes":[]},"$logger":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$builder":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Entity\\Builder *\/","attributes":[]},"$fieldManager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FieldManager *\/","attributes":[]},"$collectionManager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var CollectionManager *\/","attributes":[]},"$repositories":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$aliases":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$legacyStorage":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Storage *\/","attributes":[]},"$defaultRepositoryFactory":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var callable *\/","attributes":[]},"$legacyService":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var  ContentLegacyService *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates a new EntityManager that operates on the given database connection\n     * and uses the given EventManager.\n     *\n     * @param \\Doctrine\\DBAL\\Connection $conn\n     * @param EventDispatcherInterface  $eventManager\n     * @param MetadataDriver            $mapping\n     * @param LoggerInterface           $logger\n     *\/","attributes":[],"arguments":[{"name":"$conn","reference":false,"typehint":["Connection"],"value":"","phpdoc":"","attributes":[]},{"name":"$eventManager","reference":false,"typehint":["EventDispatcherInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$mapping","reference":false,"typehint":["MetadataDriver"],"value":"","phpdoc":"","attributes":[]},{"name":"$logger","reference":false,"typehint":["LoggerInterface"],"value":"null","phpdoc":"","attributes":[]}]},"createQueryBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return QueryBuilder\n     *\/","attributes":[]},"createExpressionBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return ExpressionBuilder\n     *\/","attributes":[]},"create":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates an entity of the given class, with the data supplied.\n     *\n     * @param string                 $className The type of entity to create\n     * @param array                  $data      The data to use to hydrate the new entity\n     * @param ClassMetadataInterface $metadata\n     *\n     * @return Entity\\Entity\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadataInterface"],"value":"null","phpdoc":"","attributes":[]}]},"getEntityBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an entity builder instance for a given class.\n     *\n     * @param string        $className\n     * @param ClassMetadata $classMetadata\n     *\n     * @return Entity\\Builder\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$classMetadata","reference":false,"typehint":["ClassMetadata"],"value":"null","phpdoc":"","attributes":[]}]},"setEntityBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set an entity builder instance.\n     *\n     * @param Entity\\Builder $builder\n     *\/","attributes":[],"arguments":[{"name":"$builder","reference":false,"typehint":["Entity\\Builder"],"value":"","phpdoc":"","attributes":[]}]},"getFieldManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return FieldManager\n     *\/","attributes":[]},"setFieldManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FieldManager $fieldManager\n     *\/","attributes":[],"arguments":[{"name":"$fieldManager","reference":false,"typehint":["FieldManager"],"value":"","phpdoc":"","attributes":[]}]},"getCollectionManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return CollectionManager\n     *\/","attributes":[]},"setCollectionManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param CollectionManager $collectionManager\n     *\/","attributes":[],"arguments":[{"name":"$collectionManager","reference":false,"typehint":["CollectionManager"],"value":"","phpdoc":"","attributes":[]}]},"createCollection":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shorthand access method to create collection. Consults aliases to allow short names.\n     *\n     * @param string|Entity\\Entity $className\n     *\n     * @return ArrayCollection\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"find":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finds an object by its identifier.\n     *\n     * This is just a convenient shortcut for getRepository($className)->find($id).\n     *\n     * @param string     $className class name of the object to find\n     * @param int|string $id        identity of the object to find\n     *\n     * @return object the found object\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"save":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The object will be entered into the database as a result of this operation.\n     *\n     * @param object $object the instance to persist to storage\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$object","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"delete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Removes an object instance.\n     *\n     * Passed in object will be removed from the database as a result of this operation.\n     *\n     * @param object $object the object instance to remove\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$object","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRepository":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var ContentRepository $repo *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setRepository":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets a custom repository class for an entity.\n     *\n     * @param string $entityName\n     * @param string $repositoryClass\n     *\/","attributes":[],"arguments":[{"name":"$entityName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$repositoryClass","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setDefaultRepositoryFactory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets a default repository factory that can handle metadata that is not\n     * mapped to a specific entity.\n     *\n     * @param callable $factory\n     *\/","attributes":[],"arguments":[{"name":"$factory","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getDefaultRepositoryFactory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the default repository factory set on this object.\n     *\n     * @param ClassMetadataInterface $classMetadata\n     *\n     * @return callable $factory\n     *\/","attributes":[],"arguments":[{"name":"$classMetadata","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getConnection":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the DBAL Driver Connection.\n     *\n     * @return Connection\n     *\/","attributes":[]},"getEventManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the Event Manager.\n     *\n     * @return EventDispatcherInterface\n     *\/","attributes":[]},"getMapper":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the Class Metadata Driver.\n     *\n     * @return MetadataDriver\n     *\/","attributes":[]},"addEntityAlias":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Registers shorter alias access for Entities.\n     *\n     * For example ->addEntityAlias('user', 'Project\\Bundle\\Module\\Entity\\User')\n     * would allow ->getRepository('user')\n     *\n     * @param string $alias\n     * @param string $namespace\n     *\/","attributes":[],"arguments":[{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"legacy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a proxy to the legacy storage service.\n     *\n     * @return Storage\n     *\/","attributes":[]},"setLegacyStorage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the LegacyRepository.\n     *\n     * @param Storage $storage\n     *\/","attributes":[],"arguments":[{"name":"$storage","reference":false,"typehint":["Storage"],"value":"","phpdoc":"","attributes":[]}]},"setLegacyService":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the LegacyRepository.\n     *\n     * @param ContentLegacyService $service\n     *\/","attributes":[],"arguments":[{"name":"$service","reference":false,"typehint":["ContentLegacyService"],"value":"","phpdoc":"","attributes":[]}]},"getLogger":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for logger object.\n     *\n     * @return LoggerInterface\n     *\/","attributes":[]},"__call":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Magic call method acts as a catchall proxy to the legacy repository.\n     *\n     * @param string $method\n     * @param array  $args\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$args","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Note that this method is explicitly defined here because the magic method above cannot\n     * pass dynamic variables by reference.\n     *\n     * @param string $textquery\n     * @param array  $parameters\n     * @param array  $pager\n     * @param array  $whereparameters\n     *\n     * @return \\Bolt\\Legacy\\Content|\\Bolt\\Legacy\\Content[]\n     *\/","attributes":[],"arguments":[{"name":"$textquery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$pager","reference":true,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$whereparameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"EntityProxy":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  This class is used by lazily loaded entities. It stores a reference to an entity but only\n *  fetches it on demand.\n *\/","attributes":[],"php":false,"properties":{"$entity":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$reference":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$loaded":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$proxy":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var object *\/","attributes":[]},"$em":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager|null *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string             $entity    the class name of the object to find\n     * @param string             $reference the identity of the object to find\n     * @param EntityManager|null $em\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$reference","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"null","phpdoc":"","attributes":[]}]},"load":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"__call":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $method\n     * @param array  $args\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$args","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $attribute\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$attribute","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $attribute\n     * @param mixed  $value\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$attribute","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getProxy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return object\n     *\/","attributes":[]}}},"Repository":{"abstract":false,"final":false,"extends":"","implements":["\\doctrine\\common\\persistence\\objectrepository"],"use":[],"useoptions":[],"phpdoc":"\/**\n * A default repository class that other repositories can inherit to provide more specific features.\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$_class":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var ClassMetadata *\/","attributes":[]},"$entityName":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$builder":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var Builder *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initializes a new Repository.\n     *\n     * @param EntityManager $em            the EntityManager to use\n     * @param ClassMetadata $classMetadata the class descriptor\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$classMetadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"create":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity $entity *\/","attributes":[],"arguments":[{"name":"$params","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"null","phpdoc":"","attributes":[]}]},"createQueryBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates a new QueryBuilder instance that is prepopulated for this entity name.\n     *\n     * @param string $alias\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$alias","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"count":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the number of rows used in this repository table.\n     *\n     * @return int\n     *\/","attributes":[]},"find":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"findAll":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"findBy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$criteria","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$orderBy","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]},{"name":"$limit","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$offset","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"findOneBy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finds a single object by a set of criteria.\n     *\n     * @param array $criteria the criteria\n     * @param array $orderBy\n     *\n     * @return object|false the object\n     *\/","attributes":[],"arguments":[{"name":"$criteria","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$orderBy","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]}]},"findWithCriteria":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to build a basic select, returns QB object.\n     *\n     * @param array $criteria\n     * @param array $orderBy\n     * @param int   $limit\n     * @param int   $offset\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$criteria","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$orderBy","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]},{"name":"$limit","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$offset","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"findWith":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Method to hydrate and return a QueryBuilder query.\n     *\n     * @param QueryBuilder $query\n     *\n     * @return array Entity\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"findOneWith":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Method to hydrate and return a single QueryBuilder result.\n     *\n     * @param QueryBuilder $query\n     *\n     * @return Entity|false\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"queryWith":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Method to execute query from a Bolt QueryInterface object\n     * The query is passed to the pre-load handlers then built into a\n     * QueryBuilder instance that can be executed.\n     *\n     * @param QueryInterface $query [description]\n     *\n     * @return array Entity | false\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]}]},"getLoadQuery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to initialise and return a QueryBuilder instance.\n     * Note that the metadata fields will be passed the instance to modify where appropriate.\n     *\n     * @return QueryBuilder\n     *\/","attributes":[]},"load":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to run load method on each field for the managed entity.\n     *\n     * Takes a QueryBuilder instance as input\n     *\n     * @param QueryBuilder $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"query":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to run query method on each field for the managed entity.\n     *\n     * Takes a QueryInterface instance as input\n     *\n     * @param QueryInterface $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]}]},"persist":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to run persist method on each field for the managed entity.\n     *\n     * Takes a QuerySet instance as input\n     *\n     * @param QuerySet $queries\n     * @param Entity   $entity\n     * @param array    $exclusions\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$exclusions","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"delete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Deletes a single object.\n     *\n     * @param object $entity the entity to delete\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"save":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Saves a single object.\n     *\n     * @param object $entity the entity to save\n     * @param bool   $silent Suppress events\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$silent","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"insert":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Saves a new object into the database.\n     *\n     * @param object $entity the entity to insert\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Updates an object into the database.\n     *\n     * @param object   $entity     the entity to update\n     * @param string[] $exclusions Ignore updates to these fields\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$exclusions","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"hydrate":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to hydrate an Entity Object from fetched data.\n     *\n     * @param array        $data\n     * @param QueryBuilder $qb\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$qb","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"hydrateAll":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to hydrate an array of Entity Objects from fetched data.\n     *\n     * @param array        $data\n     * @param QueryBuilder $qb\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$qb","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"refresh":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to refresh (re-hydrate an entity) using\n     * the field setters.\n     *\n     * @param  $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFieldManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetches FieldManager instance from the EntityManager.\n     *\n     * @return FieldManager\n     *\/","attributes":[]},"getEntityBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Builder $builder\n     *\/","attributes":[]},"getEntityName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getClassName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getTableName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getAlias":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getEntityManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return EntityManager\n     *\/","attributes":[]},"getClassMetadata":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for class metadata.\n     *\n     * @return ClassMetadata\n     *\/","attributes":[]},"event":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shortcut method to fetch the Event Dispatcher.\n     *\n     * @return \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface\n     *\/","attributes":[]}}}},"interfaces":{"NamingStrategyInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles Object to DB naming adjustments.\n *\/","attributes":[],"php":false,"methods":{"classToTableName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Takes either a global or absolute class name and returns an underscored table name.\n     *\n     * @param $className\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"classToAlias":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a short alias for the entity.\n     *\n     * @param $className\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"EntityManagerInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * EntityManager interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getRepository":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the repository for a class.\n     *\n     * @param string $className\n     *\n     * @throws InvalidRepositoryException\n     *\n     * @return Repository\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"traits":{"CaseTransformTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  This trait provides re-usable methods for converting strings between different case styles.\n *\/","attributes":[],"php":false,"methods":{"camelize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Converts a string from underscored to Camel Case.\n     *\n     * @param string $id A string to camelize\n     *\n     * @return string The camelized string\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"underscore":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Converts a string from camel case to underscored.\n     *\n     * @param string $id The string to underscore\n     *\n     * @return string The underscored string\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Mapping\\":{"classes":{"MetadataDriver":{"abstract":false,"final":false,"extends":"","implements":["\\doctrine\\common\\persistence\\mapping\\driver\\mappingdriver"],"use":["\\bolt\\storage\\casetransformtrait"],"useoptions":[""],"phpdoc":"\/**\n * This is a Bolt specific metadata driver that provides mapping information\n * for the internal and user-defined schemas. To do this it takes in the\n * constructor, an instance of Bolt\\Storage\\Database\\Schema\\Manager and uses\n * this to read in the schema.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$schemaManager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Database\\Schema\\Manager *\/","attributes":[]},"$contenttypes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$taxonomies":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array taxonomy configuration *\/","attributes":[]},"$metadata":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array metadata mappings *\/","attributes":[]},"$defaultAliases":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$typemap":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$namingStrategy":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var NamingStrategy *\/","attributes":[]},"$aliases":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$generalConfig":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$unmapped":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * Keeps a reference of which metadata is not mapped to\n     * a specific entity.\n     *\n     * @var array\n     *\/","attributes":[]},"$fallbackEntity":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string A default entity for any table not matched *\/","attributes":[]},"$initialized":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Manager                 $schemaManager\n     * @param ConfigurationValueProxy $contenttypes\n     * @param ConfigurationValueProxy $taxonomies\n     * @param array                   $typemap\n     * @param NamingStrategy          $namingStrategy\n     *\/","attributes":[],"arguments":[{"name":"$schemaManager","reference":false,"typehint":["Manager"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypes","reference":false,"typehint":["ConfigurationValueProxy"],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomies","reference":false,"typehint":["ConfigurationValueProxy"],"value":"","phpdoc":"","attributes":[]},{"name":"$typemap","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$namingStrategy","reference":false,"typehint":["NamingStrategy"],"value":"null","phpdoc":"","attributes":[]}]},"initialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Reads the schema from Bolt\\Storage\\Database\\Schema\\Manager and creates mapping data.\n     *\/","attributes":[]},"initializeShortAliases":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Setup some short aliases so non prefixed keys can be used to get metadata.\n     *\/","attributes":[]},"initializeDefaultAliases":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     *  This seeds the defaultAliases array with the correctly prefixed mappings.\n     *\/","attributes":[]},"getAliases":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for aliases.\n     *\n     * @return array\n     *\/","attributes":[]},"resolveClassName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Method will try to find an entity class name to handle data,\n     * alternatively falling back to $this->fallbackEntity.\n     *\n     * @param string $alias\n     *\n     * @return string Fully Qualified Class Name\n     *\/","attributes":[],"arguments":[{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"loadMetadataForTable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Load the metadata for a table.\n     *\n     * @param Table $table\n     *\/","attributes":[],"arguments":[{"name":"$table","reference":false,"typehint":["Table"],"value":"","phpdoc":"","attributes":[]}]},"setRepeaters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $contentKey\n     * @param string $className\n     * @param array  $inputData\n     *\n     * @return array|null\n     *\/","attributes":[],"arguments":[{"name":"$contentKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$inputData","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"postProcessField":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This is a patch method that reproduces some of the setup that happens for standard fields in Bolt\/Config\n     * in future versions this will be handled by the individual mapping classes but remains here until they are able\n     * to take over completely.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param array $field\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setGeneralConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This is a patch method that allows the general app config to be injected into this class. It is only to be used\n     * for providing Backwards Compatibility and will be removed once the general mapping config is ready to take over.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"normalizeFieldTypes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to fix or patch any field mappings\n     *\n     * @param array $fields\n     *\/","attributes":[],"arguments":[{"name":"$fields","reference":true,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getRepeaterMapping":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This is a helper method to get a correct mapping from an array config. It's designed to take raw array config\n     * to generate a correct format mapping for repeaters.\n     *\n     * @param array $config\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setRelations":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the relationship.\n     *\n     * @param string $contentKey\n     * @param string $className\n     *\/","attributes":[],"arguments":[{"name":"$contentKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setIncomingRelations":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $contentKey\n     * @param string $className\n     *\/","attributes":[],"arguments":[{"name":"$contentKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setTaxonomies":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the taxonomy.\n     *\n     * @param string $contentKey\n     * @param string $className\n     *\/","attributes":[],"arguments":[{"name":"$contentKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setTemplatefields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Setup a templatefields field if needed.\n     *\n     * @param string $contentKey\n     * @param string $className\n     *\/","attributes":[],"arguments":[{"name":"$contentKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setContentFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$contentKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$table","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"loadMetadataForClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"null","phpdoc":"","attributes":[]}]},"loadMetadataForFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getFieldTypeFor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the field type for a given column.\n     *\n     * @param string                       $name\n     * @param \\Doctrine\\DBAL\\Schema\\Column $column\n     * @param null                         $field  Optional field value for repeaters\/array based columns\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$column","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getFieldMetadata":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $contentType\n     * @param string $column\n     * @param string $field\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$column","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getAllClassNames":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getUnmapped":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets a list of tables that are not mapped to specific entities.\n     *\n     * @return array\n     *\/","attributes":[]},"setDefaultAlias":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds an alias mapping from an internal name to a Fully Qualified Entity.\n     *\n     * @param string $alias\n     * @param string $entity\n     *\/","attributes":[],"arguments":[{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getClassMetadata":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the metadata for a given class name.\n     *\n     * @param string $className\n     *\n     * @return ClassMetadata|false the class metadata\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"normalizeClassName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Performs basic normalisation on a searched for class name to make sure it\n     * conforms to lookup format.\n     *\n     * @param $className\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isTransient":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Not implemented, always returns false.\n     *\n     * @param string $className\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTaxonomyConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"getContentTypeFromAlias":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Given a tablename or slug get the correct Bolt keyname from the config.\n     *\n     * @param $alias\n     * @param bool $forceSlug\n     *\n     * @return string $key\n     *\/","attributes":[],"arguments":[{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$forceSlug","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]}}},"TaxonomyValue":{"abstract":false,"final":false,"extends":"","implements":["\\arrayaccess"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Taxonomy mapping.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$value":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$data":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $name\n     * @param mixed  $value\n     * @param array  $data\n     *\n     * @throws StorageException\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ClassMetadata":{"abstract":false,"final":false,"extends":"","implements":["\\doctrine\\common\\persistence\\mapping\\classmetadata"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base metadata class, used to provide info from mapping configuration to Entity objects.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$boltname":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$tableName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$identifier":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$namingStrategy":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var NamingStrategyInterface *\/","attributes":[]},"$fieldMappings":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string                  $className      Fully-qualified class name\n     * @param NamingStrategyInterface $namingStrategy Naming strategy\n     *\/","attributes":[],"arguments":[{"name":"$className","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$namingStrategy","reference":false,"typehint":["NamingStrategyInterface"],"value":"null","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getTableName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the fully-qualified class name of this persistent class.\n     *\n     * @return string\n     *\/","attributes":[]},"setTableName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the table name of this persistent class.\n     *\n     * @param $tableName\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getBoltName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the bolt name of this class (normally table name without prefix).\n     *\n     * @return string\n     *\/","attributes":[]},"setBoltName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the bolt name of this class (normally table name without prefix).\n     *\n     * @param $name\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAliasName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the internal alias using the naming strategy.\n     *\n     * @return string\n     *\/","attributes":[]},"getFieldMapping":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param $fieldName\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setFieldMappings":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the fieldMappings array with metadata.\n     *\n     * @param array $fieldMappings\n     *\/","attributes":[],"arguments":[{"name":"$fieldMappings","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFieldMappings":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the fieldMappings array.\n     *\n     *\n     * @return array $fieldMappings\n     *\/","attributes":[]},"getIdentifier":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the mapped identifier field name.\n     *\n     * The returned structure is an array of the identifier field names.\n     *\n     * @return array\n     *\/","attributes":[]},"setIdentifier":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the mapped identifier field name.\n     *\n     * @param array $identifier\n     *\/","attributes":[],"arguments":[{"name":"$identifier","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getReflectionClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the ReflectionClass instance for this mapped class.\n     *\n     * @return \\ReflectionClass\n     *\/","attributes":[]},"isIdentifier":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if the given field name is a mapped identifier for this class.\n     *\n     * @param string $fieldName\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if the given field is a mapped property for this class.\n     *\n     * @param string $fieldName\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFieldNames":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * A numerically indexed list of field names of this persistent class.\n     *\n     * This array includes identifier fields if present on this class.\n     *\n     * @return array\n     *\/","attributes":[]},"getTypeOfField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a type name of this field.\n     *\n     * This type names can be implementation specific but should at least include the php types:\n     * integer, string, boolean, float\/double, datetime.\n     *\n     * @param string $fieldName\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getIdentifierFieldNames":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns an array of identifier field names numerically indexed.\n     *\n     * @return array\n     *\/","attributes":[]},"hasAssociation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isSingleValuedAssociation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isCollectionValuedAssociation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAssociationNames":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getAssociationTargetClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$assocName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isAssociationInverseSide":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$assocName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAssociationMappedByTargetField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$assocName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getIdentifierValues":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$object","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContentType":{"abstract":false,"final":false,"extends":"","implements":["\\arrayaccess"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Legacy bridge for ContentType array access.\n *\n * @deprecated Deprecated since 3.0, to be removed in 4.0.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$boltname":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$contentType":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $boltname\n     * @param array  $contentType\n     *\/","attributes":[],"arguments":[{"name":"$boltname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}}},"traits":{"ContentTypeTitleTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait for mapping a ContentType 'title' to a column name.\n *\n * @deprecated Find something less fugly for v3.0\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getTitleColumnName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the likely column name of the title.\n     *\n     * @param ContentType|array $contentType\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTitleColumnNames":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of the column name(s) of the title.\n     *\n     * @param ContentType|array $contentType\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Mapping\\Type\\":[],"\\Bolt\\Storage\\Database\\":{"classes":{"Connection":{"abstract":false,"final":false,"extends":"\\doctrine\\dbal\\connection","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Extension of DBAL's Connection class to allow catching of database connection\n * exceptions.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$_queryCacheProfile":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueryCacheProfile *\/","attributes":[]}},"methods":{"connect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"fetchAll":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method wraps the native fetchAll method to pass in the configured QueryCacheProfile.\n     * If the profile is set to null then operation will continue identically to the standard, otherwise\n     * the existence of a cache profile will result in the executeQueryCache() method being called.\n     *\n     *\n     * @param string $sql    the SQL query\n     * @param array  $params the query parameters\n     * @param array  $types  the query parameter types\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$sql","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$types","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"executeUpdate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Executes an SQL INSERT\/UPDATE\/DELETE query with the given parameters\n     * and returns the number of affected rows.\n     *\n     * This method supports PDO binding types as well as DBAL mapping types.\n     *\n     * @param string $query  the SQL query\n     * @param array  $params the query parameters\n     * @param array  $types  the parameter types\n     *\n     * @throws \\Doctrine\\DBAL\\DBALException\n     *\n     * @return int the number of affected rows\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$types","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"setQueryCacheProfile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets an optional Query Cache handler on the connection class.\n     *\n     * @param QueryCacheProfile $profile\n     *\/","attributes":[],"arguments":[{"name":"$profile","reference":false,"typehint":["QueryCacheProfile"],"value":"","phpdoc":"","attributes":[]}]}}},"MasterSlaveConnection":{"abstract":false,"final":false,"extends":"\\doctrine\\dbal\\connections\\masterslaveconnection","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Extension of DBAL's Connection class to allow catching of database connection\n * exceptions.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$_queryCacheProfile":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueryCacheProfile *\/","attributes":[]}},"methods":{"connect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$connectionName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"setQueryCacheProfile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets an optional Query Cache handler on the connection class.\n     *\n     * @param QueryCacheProfile $profile\n     *\/","attributes":[],"arguments":[{"name":"$profile","reference":false,"typehint":["QueryCacheProfile"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Database\\Prefill\\":{"classes":{"ImageClient":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles fetching prefill images from an API service.\n *\/","attributes":[],"php":false,"properties":{"$client":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Client *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param \\GuzzleHttp\\Client $client\n     *\/","attributes":[],"arguments":[{"name":"$client","reference":false,"typehint":["Client"],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetches an image from a remote source.\n     *\n     * @param string $url URL of the remote image to fetch\n     *\n     * @return StreamInterface\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Builder":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Builder of pre-filled records for set of ContentTypes.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$storage":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$generatorFactory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var callable *\/","attributes":[]},"$maxCount":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$contentTypes":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Bag *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManager $storage\n     * @param callable      $generatorFactory\n     * @param int           $maxCount\n     * @param Bag           $contentTypes\n     *\/","attributes":[],"arguments":[{"name":"$storage","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$generatorFactory","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]},{"name":"$maxCount","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypes","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"build":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build up-to 'n' number of pre-filled ContentType records.\n     *\n     * @param array $contentTypeNames\n     * @param int   $count\n     * @param bool  $canExceedMax\n     *\n     * @return MutableBag\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeNames","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$count","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$canExceedMax","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"doBuild":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string     $contentTypeName\n     * @param int        $createCount\n     * @param MutableBag $response\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$createCount","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"getMaxCount":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the maximum number of records allowed to exists before we stop\n     * generating, or refuse to generate more records,\n     *\n     * @return int\n     *\/","attributes":[]},"setMaxCount":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Override the maximum number of records allowed to exists before we stop\n     * generating, or refuse to generate more records,\n     *\n     * @param int $maxCount\n     *\n     * @return Builder\n     *\/","attributes":[],"arguments":[{"name":"$maxCount","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setGeneratorFactory":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a custom generator factory.\n     *\n     * @param callable $generatorFactory\n     *\/","attributes":[],"arguments":[{"name":"$generatorFactory","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"createRecordContentGenerator":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a generator for a specific ContentType, from the factory.\n     *\n     * @param string $contentTypeName\n     *\n     * @return RecordContentGenerator\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ApiClient":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles fetching prefill text content from an API service.\n *\/","attributes":[],"php":false,"properties":{"$client":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Client *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param \\GuzzleHttp\\Client $client\n     *\/","attributes":[],"arguments":[{"name":"$client","reference":false,"typehint":["Client"],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetches the content from the service.\n     *\n     * @param string $request Parameters to add to the base uri - eg \/medium\/decorate\/ol\n     * @param string $base\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$base","reference":false,"typehint":[""],"value":"'http:\/\/loripsum.net\/api\/'","phpdoc":"","attributes":[]}]}}},"RecordContentGenerator":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Create a generated set of pre-filled records for a ContentType.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$apiClient":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var ApiClient *\/","attributes":[]},"$imageClient":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var ImageClient *\/","attributes":[]},"$contentTypeName":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$repository":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var ContentRepository *\/","attributes":[]},"$filesystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FilesystemInterface *\/","attributes":[]},"$taxConfig":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$imageFiles":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$defaultTitles":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var ImmutableBag *\/","attributes":[]},"$createSummary":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$fieldMap":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string              $contentTypeName\n     * @param ApiClient           $apiClient\n     * @param ContentRepository   $repository\n     * @param FilesystemInterface $filesystem\n     * @param array               $taxConfig\n     * @param ImmutableBag        $defaultTitles\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$apiClient","reference":false,"typehint":["ApiClient"],"value":"","phpdoc":"","attributes":[]},{"name":"$imageClient","reference":false,"typehint":["ImageClient"],"value":"","phpdoc":"","attributes":[]},{"name":"$repository","reference":false,"typehint":["ContentRepository"],"value":"","phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["FilesystemInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$taxConfig","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$defaultTitles","reference":false,"typehint":["ImmutableBag"],"value":"","phpdoc":"","attributes":[]}]},"generate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Content $entity *\/","attributes":[],"arguments":[{"name":"$count","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentTypeName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the name of the ContentType that entities are generated for.\n     *\n     * @return string\n     *\/","attributes":[]},"fillEntity":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a single ContentType entity.\n     *\n     * @param Entity\\Content $contentEntity\n     *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]}]},"setFieldValue":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Entity\\Content $contentEntity\n     * @param array          $contentType\n     * @param string         $fieldName\n     * @param array          $values\n     *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$values","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addBoolean":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Entity\\Content $contentEntity\n     * @param string         $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addDate":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Entity\\Content $contentEntity\n     * @param string         $fieldName\n     * @param string         $type\n     *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addNumeric":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Entity\\Content $contentEntity\n     * @param string         $fieldName\n     * @param string         $type\n     *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addText":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Entity\\Content $contentEntity\n     * @param string         $fieldName\n     * @param string         $type\n     * @param array          $contentType\n     *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addJson":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Entity\\Content $contentEntity\n     * @param string         $fieldName\n     * @param string         $type\n     *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setTaxonomyCollection":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Collection\\Taxonomy $taxonomies *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getTaxonomyEntity":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a base taxonomy entity object.\n     *\n     * @param Entity\\Content $contentEntity\n     * @param string         $taxonomy\n     *\n     * @return Entity\\Taxonomy\n     *\/","attributes":[],"arguments":[{"name":"$contentEntity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomy","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getValidOwnerIds":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an array of enabled system IDs.\n     *\n     * @return array\n     *\/","attributes":[]},"getImageFiles":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an array of file names in the \"files\" filesystem.\n     *\n     * @return \\Bolt\\Filesystem\\Handler\\Image[]\n     *\/","attributes":[]},"getReservedTitle":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the title for a 'Block' ContentType. Check if the desired ones\n     * aren't present in the database yet, and return them in order.\n     *\n     * @param string $contentTypeName\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRandomTags":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of random tags\n     *\n     * @param int $count\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$count","reference":false,"typehint":[""],"value":5,"phpdoc":"","attributes":[]}]},"getRandomImage":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a random image.\n     *\n     * @param string      $type\n     * @param string|null $placeholder\n     *\n     * @return array|null\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$placeholder","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fetchPlaceholder":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attempt to fetch a placeholder image from a remote URL.\n     *\n     * @param string $placeholder\n     *\n     * @return array|bool\n     *\/","attributes":[],"arguments":[{"name":"$placeholder","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Database\\Schema\\":{"classes":{"Timer":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Schema validation check functionality.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"CHECK_INTERVAL":{"value":1800,"visibility":"","phpdoc":"","attributes":[]}},"properties":{"$cacheFile":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FileInterface *\/","attributes":[]},"$expired":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FileInterface $cacheFile\n     *\/","attributes":[],"arguments":[{"name":"$cacheFile","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]}]},"isCheckRequired":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if we have determined that we need to do a database check.\n     *\n     * @return bool\n     *\/","attributes":[]},"setCheckRequired":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Invalidate our database check by removing the timestamp file from cache.\n     *\n     * @throws \\RuntimeException\n     *\/","attributes":[]},"setCheckExpiry":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set our state as valid by writing the current date\/time to the\n     * app\/cache\/dbcheck.ts file.\n     *\n     * We only want to do these checks once per hour, per session, since it's\n     * pretty time consuming\u2026 Unless specifically requested.\n     *\/","attributes":[]}}},"Manager":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\database\\schema\\schemamanagerinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Manager class for Bolt database schema.\n *\n * Based on on parts of the monolithic Bolt\\Database\\IntegrityChecker class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"INTEGRITY_CHECK_INTERVAL":{"value":1800,"visibility":"","phpdoc":"\/** @deprecated Deprecated since 3.0, to be removed in 4.0. *\/","attributes":[]},"INTEGRITY_CHECK_TS_FILENAME":{"value":"'dbcheck_ts'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$connection":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Connection *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Config *\/","attributes":[]},"$schema":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Schema\\Schema *\/","attributes":[]},"$schemaTables":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Schema\\Table[] *\/","attributes":[]},"$installedTables":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Schema\\Table[] *\/","attributes":[]},"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"__call":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. This is a place holder to prevent fatal errors.\n     *\n     * @param string $name\n     * @param mixed  $args\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$args","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. This is a place holder to prevent fatal errors.\n     *\n     * @param string $name\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTableName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the database name of a table from an alias.\n     *\n     * @param string $name\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isCheckRequired":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isUpdateRequired":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"check":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run a check against current and configured schemas.\n     *\n     * @return SchemaCheck\n     *\/","attributes":[]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run database table updates.\n     *\n     * @return \\Bolt\\Storage\\Database\\Schema\\SchemaCheck\n     *\/","attributes":[]},"hasUserTable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if just the users table is present.\n     *\n     * @return bool\n     *\/","attributes":[]},"getSchema":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the built schema.\n     *\n     * @return \\Doctrine\\DBAL\\Schema\\Schema\n     *\/","attributes":[]},"getSchemaTables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated Deprecated since 3.0, to be removed in 4.0. *\/","attributes":[]},"getInstalledTables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the installed table list from Doctrine.\n     *\n     * @return \\Doctrine\\DBAL\\Schema\\Table[]\n     *\/","attributes":[]},"registerExtensionTable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method allows extensions to register their own tables.\n     *\n     * @param callable $generator a generator function that takes the Schema\n     *                            instance and returns a table or an array of\n     *                            tables\n     *\/","attributes":[],"arguments":[{"name":"$generator","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getSchemaTimer":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Storage\\Database\\Schema\\Timer\n     *\/","attributes":[]},"getSchemaComparator":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Storage\\Database\\Schema\\Comparison\\BaseComparator\n     *\/","attributes":[]}}},"SchemaCheck":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A response class for a single table's check.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$pending":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$titles":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$messages":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$hints":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$diffs":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var TableDiff[] *\/","attributes":[]}},"methods":{"getDiff":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a table diffs.\n     *\n     * @return TableDiff[]\n     *\/","attributes":[]},"addHint":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a hint.\n     *\n     * @param string $hint\n     *\/","attributes":[],"arguments":[{"name":"$hint","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getHints":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the hints.\n     *\n     * @return array\n     *\/","attributes":[]},"hasHints":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check is there are pending hints.\n     *\n     * @return bool\n     *\/","attributes":[]},"addMessage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a message.\n     *\n     * @param string $tableName\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getMessages":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the messages.\n     *\n     * @return array\n     *\/","attributes":[]},"getResponseStrings":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the response messages as a string.\n     *\n     * @return string[]\n     *\/","attributes":[]},"hasResponses":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check is there are pending responses.\n     *\n     * @return bool\n     *\/","attributes":[]},"addTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add title message.\n     *\n     * @param string $tableName\n     * @param string $title\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$title","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTitles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the message titles.\n     *\n     * @return array\n     *\/","attributes":[]},"checkDiff":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check a Comparator diff and store the messages that make it up.\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getAddedColumns":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record added columns.\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getAddedIndexes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var $index \\Doctrine\\DBAL\\Schema\\Index *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getChangedColumns":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record changed columns.\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getChangedIndexes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record changed indexes.\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getRemovedColumns":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record removed columns.\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getRemovedIndexes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record removed indexes.\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getRenamedColumns":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record renamed columns.\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getAddedForeignKeys":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record added foreign key(s).\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"getChangedForeignKeys":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record changed foreign key(s).\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"addForeignKeysMessage":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a message for a foreign key change.\n     *\n     * @param string               $tableName\n     * @param ForeignKeyConstraint $foreignKey\n     * @param string               $format\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$foreignKey","reference":false,"typehint":["ForeignKeyConstraint"],"value":"","phpdoc":"","attributes":[]},{"name":"$format","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRemovedForeignKeys":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Record removed foreign key(s).\n     *\n     * @param string    $tableName\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]}}},"LazySchemaManager":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\database\\schema\\schemamanagerinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$factory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var callable *\/","attributes":[]},"$manager":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Manager *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param callable $factory Should return SchemaManagerInterface when invoked\n     *\/","attributes":[],"arguments":[{"name":"$factory","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Manager\n     *\/","attributes":[]},"isCheckRequired":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isUpdateRequired":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"TableModifier":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table modification handler class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$connection":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Connection *\/","attributes":[]},"$loggerSystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Psr\\Log\\LoggerInterface *\/","attributes":[]},"$loggerFlash":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Logger\\FlashLoggerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Connection           $connection\n     * @param LoggerInterface      $loggerSystem\n     * @param FlashLoggerInterface $loggerFlash\n     *\/","attributes":[],"arguments":[{"name":"$connection","reference":false,"typehint":["Connection"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerSystem","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerFlash","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]}]},"createTables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process a group of tables create queries.\n     *\n     * @param array       $tableCreates\n     * @param SchemaCheck $response\n     *\/","attributes":[],"arguments":[{"name":"$tableCreates","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["SchemaCheck"],"value":"","phpdoc":"","attributes":[]}]},"alterTables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process a group of tables alter queries.\n     *\n     * @param array       $tableAlters\n     * @param SchemaCheck $response\n     *\/","attributes":[],"arguments":[{"name":"$tableAlters","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["SchemaCheck"],"value":"","phpdoc":"","attributes":[]}]},"createTable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process a single table create query.\n     *\n     * @param string      $tableName\n     * @param array       $tableCreate\n     * @param SchemaCheck $response\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$tableCreate","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["SchemaCheck"],"value":"","phpdoc":"","attributes":[]}]},"alterTable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process a single table alter queries.\n     *\n     * @param string      $tableName\n     * @param array       $tableAlter\n     * @param SchemaCheck $response\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$tableAlter","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["SchemaCheck"],"value":"","phpdoc":"","attributes":[]}]},"runQuery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run the create\/alter query.\n     *\n     * @param string $tableName\n     * @param string $query\n     *\n     * @return \\Doctrine\\DBAL\\Driver\\Statement|null\n     *\/","attributes":[],"arguments":[{"name":"$tableName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"interfaces":{"SchemaManagerInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface for schema manager.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"isCheckRequired":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check to see if we have past the time to re-check our schema.\n     *\n     * @return bool\n     *\/","attributes":[]},"isUpdateRequired":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check to see if there is a mismatch in installed versus configured\n     * schemas.\n     *\n     * @return bool\n     *\/","attributes":[]}}}}},"\\Bolt\\Storage\\Database\\Schema\\Types\\":{"classes":{"JsonType":{"abstract":false,"final":true,"extends":"\\doctrine\\dbal\\types\\type","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Type generating JSON object values.\n *\n * DBAL 2.6 deprecated JsonArrayType in favour of JsonType, and bumped the\n * minimum PHP version to 7.1. As we need to maintain support for PHP 5.5+\n * this has caused problems with schema change detection.\n *\n * @see https:\/\/github.com\/bolt\/bolt\/issues\/6856\n *\n * @internal Provided to bridge DBAL 2.5 & 2.6 support.\n *\n * @author Baptiste Clavi\u00e9 <clavie.b@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getSQLDeclaration":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$fieldDeclaration","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]}]},"convertToDatabaseValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]}]},"convertToPHPValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"requiresSQLCommentHint":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]}]}}},"ConversionException":{"abstract":false,"final":true,"extends":"\\doctrine\\dbal\\types\\conversionexception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @internal Provided to bridge DBAL 2.5 & 2.6 support.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"conversionFailedSerialization":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Thrown when a value failed serialisation.\n     *\n     * @param mixed          $value\n     * @param string         $format\n     * @param string         $error\n     * @param Exception|null $e\n     *\n     * @return ConversionException\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$format","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$error","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$e","reference":false,"typehint":["Exception"],"value":"null","phpdoc":"","attributes":[]}]}}},"JsonArrayType":{"abstract":false,"final":true,"extends":"\\doctrine\\dbal\\types\\jsonarraytype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Type generating JSON object values.\n *\n * DBAL 2.6 deprecated JsonArrayType in favour of JsonType, and bumped the\n * minimum PHP version to 7.1. As we need to maintain support for PHP 5.5+\n * this has caused problems with schema change detection.\n *\n * @see https:\/\/github.com\/bolt\/bolt\/issues\/6856\n *\n * @internal Provided to bridge DBAL 2.5 & 2.6 support.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"requiresSQLCommentHint":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]}]}}},"CarbonDateTimeType":{"abstract":false,"final":false,"extends":"\\doctrine\\dbal\\types\\datetimetype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Doctrine DateTimeType using Carbon.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"convertToPHPValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]}]}}},"CarbonDateType":{"abstract":false,"final":false,"extends":"\\doctrine\\dbal\\types\\datetype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Doctrine DateType using Carbon.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"convertToPHPValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Database\\Schema\\Table\\":{"classes":{"Taxonomy":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table for taxonomy data.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"Relations":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table for content relationship data.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"FieldValue":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table for field values with separate columns for each data type.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"BaseTable":{"abstract":true,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base database table class for Bolt.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$platform":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Platforms\\AbstractPlatform $platform *\/","attributes":[]},"$table":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Schema\\Table *\/","attributes":[]},"$tablePrefix":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$tableName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$aliasName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param AbstractPlatform $platform\n     * @param string           $tablePrefix\n     *\/","attributes":[],"arguments":[{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]},{"name":"$tablePrefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the table object.\n     *\n     * @throws StorageException\n     *\n     * @return \\Doctrine\\DBAL\\Schema\\Table\n     *\/","attributes":[]},"buildTable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the table's schema object.\n     *\n     * @param Schema $schema\n     * @param string $aliasName\n     * @param string $charset\n     * @param string $collate\n     *\n     * @return \\Doctrine\\DBAL\\Schema\\Table\n     *\/","attributes":[],"arguments":[{"name":"$schema","reference":false,"typehint":["Schema"],"value":"","phpdoc":"","attributes":[]},{"name":"$aliasName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$charset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$collate","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTableName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the table's name.\n     *\n     * @throws \\RuntimeException\n     *\n     * @return string\n     *\/","attributes":[]},"getTableAlias":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the table's alias (short) name.\n     *\n     * @throws \\RuntimeException\n     *\n     * @return string\n     *\/","attributes":[]},"getTextDefault":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Default value for TEXT fields, differs per platform.\n     *\n     * @return string|null\n     *\/","attributes":[]},"addColumns":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add columns to the table.\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Define the columns that require indexing.\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the table's primary key.\n     *\/","attributes":[]},"addForeignKeyConstraints":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the table's foreign key constraints.\n     *\/","attributes":[]}}},"Users":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table for user account data.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"Cron":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table for cron schedule data.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"ContentType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$typeMap":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array Mapping of field type to column type function *\/","attributes":[]},"$ignoredChanges":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isKnownType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the field type is valid.\n     *\n     * @param string $type\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addCustomFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add the contenttype's specific fields.\n     *\n     * @param string $fieldName\n     * @param string $type\n     * @param bool   $addIndex\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$addIndex","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnBoolean":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for booleans, default to zero.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnDate":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for date, not null.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnDateTime":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for date\/time, not null.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnDecimal":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for decimals.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnFloat":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for floats, default to zero.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnInteger":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for integers, default to zero.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnJson":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for JSON arrays.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnStringNormal":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for a 256 character string with an empty string default.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnStringNotNull":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column for a 128 character string, not null, with an empty string default.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"columnText":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a column text fields.\n     *\n     * @param string $fieldName\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"AuthToken":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table for authentication token data.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated Deprecated since 3.4, to be removed in v4.0.  *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"LogChange":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table for change log data.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"LogSystem":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\table\\basetable","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Table for system logging data.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addIndexes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setPrimaryKey":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}}},"\\Bolt\\Storage\\Database\\Schema\\Comparison\\":{"classes":{"BaseComparator":{"abstract":true,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base class for handling table comparison.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$connection":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Connection *\/","attributes":[]},"$prefix":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$systemLog":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Psr\\Log\\LoggerInterface *\/","attributes":[]},"$diffs":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Schema\\TableDiff[] *\/","attributes":[]},"$tablesCreate":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Schema\\Table[] *\/","attributes":[]},"$tablesAlter":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Schema\\TableDiff[] *\/","attributes":[]},"$ignoredChanges":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var IgnoredChange[] *\/","attributes":[]},"$pending":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$response":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Database\\Schema\\SchemaCheck *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Connection      $connection\n     * @param string          $prefix\n     * @param LoggerInterface $systemLog\n     *\/","attributes":[],"arguments":[{"name":"$connection","reference":false,"typehint":["Connection"],"value":"","phpdoc":"","attributes":[]},{"name":"$prefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$systemLog","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]}]},"hasPending":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Are database updates required.\n     *\n     * @param Table[] $fromTables\n     * @param Table[] $toTables\n     * @param array   $protectedTableNames\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$fromTables","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$toTables","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$protectedTableNames","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"compare":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run the update checks and flag if we need an update.\n     *\n     * @param Table[] $fromTables\n     * @param Table[] $toTables\n     * @param array   $protectedTableNames\n     * @param bool    $force\n     *\n     * @return SchemaCheck\n     *\/","attributes":[],"arguments":[{"name":"$fromTables","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$toTables","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$protectedTableNames","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$force","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the schema check response object.\n     *\n     * @return \\Bolt\\Storage\\Database\\Schema\\SchemaCheck\n     *\/","attributes":[]},"getCreates":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the table creation SQL queries.\n     *\n     * @return string[]\n     *\/","attributes":[]},"getAlters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var $tableDiff TableDiff *\/","attributes":[]},"getDiffs":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the unmodified table diffs.\n     *\n     * @return TableDiff[]\n     *\/","attributes":[]},"addIgnoredChange":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add an ignored change to the list.\n     *\n     * @param IgnoredChange $ignoredChange\n     *\/","attributes":[],"arguments":[{"name":"$ignoredChange","reference":false,"typehint":["IgnoredChange"],"value":"","phpdoc":"","attributes":[]}]},"setIgnoredChanges":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a list of changes this platform will ignore.\n     *\/","attributes":[]},"removeIgnoredChanges":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove table\/column diffs that for verious reasons aren't supported on a\n     * platform.\n     *\n     * @param TableDiff $diff\n     *\/","attributes":[],"arguments":[{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"checkTables":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var $fromTable Table *\/","attributes":[],"arguments":[{"name":"$fromTables","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$toTables","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkTable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check that a single table's columns and indices are valid.\n     *\n     * @param Table $fromTable\n     * @param Table $toTable\n     *\/","attributes":[],"arguments":[{"name":"$fromTable","reference":false,"typehint":["Table"],"value":"","phpdoc":"","attributes":[]},{"name":"$toTable","reference":false,"typehint":["Table"],"value":"","phpdoc":"","attributes":[]}]},"adjustDiffs":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var TableDiff $tableDiff *\/","attributes":[],"arguments":[{"name":"$protectedTableNames","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"adjustContentTypeDiffs":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clear 'removedColumns' attribute from ContentType table diffs to prevent accidental data removal.\n     *\n     * @param TableDiff $tableDiff\n     * @param array     $protectedTableNames\n     *\/","attributes":[],"arguments":[{"name":"$tableDiff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]},{"name":"$protectedTableNames","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addAlterResponses":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add required changes to the response object.\n     *\n     * NOTE: This must be run after adjustDiffs() so that the user response\n     * doesn't contain ignored changes.\n     *\/","attributes":[]}}},"IgnoredChange":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$alteration":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$propertyName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$before":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$after":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $alteration\n     * @param string $propertyName\n     * @param string $before\n     * @param string $after\n     *\/","attributes":[],"arguments":[{"name":"$alteration","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$propertyName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$before","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$after","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"matches":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if parameters match object parameters.\n     *\n     * @param string $alteration\n     * @param string $propertyName\n     * @param string $before\n     * @param string $after\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$alteration","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$propertyName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$before","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$after","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAlteration":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getPropertyName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getBefore":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getAfter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"DiffUpdater":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Processor for \\Doctrine\\DBAL\\Schema\\TableDiff objects.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$ignoredChanges":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Database\\Schema\\Comparison\\IgnoredChange[] *\/","attributes":[]},"$paramMap":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param IgnoredChange[] $ignoredChanges\n     *\/","attributes":[],"arguments":[{"name":"$ignoredChanges","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"adjustDiff":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var IgnoredChange $ignoredChange *\/","attributes":[],"arguments":[{"name":"$tableDiff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]},"checkChangedProperties":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check individual diff properties.\n     *\n     * @param TableDiff     $tableDiff\n     * @param array         $schemaUpdateType\n     * @param string        $alterName\n     * @param IgnoredChange $ignoredChange\n     *\/","attributes":[],"arguments":[{"name":"$tableDiff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]},{"name":"$schemaUpdateType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$alterName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$ignoredChange","reference":false,"typehint":["IgnoredChange"],"value":"","phpdoc":"","attributes":[]}]},"checkColumn":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Do checks for columns.\n     *\n     * @param Column        $column\n     * @param IgnoredChange $ignoredChange\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$column","reference":false,"typehint":["Column"],"value":"","phpdoc":"","attributes":[]},{"name":"$ignoredChange","reference":false,"typehint":["IgnoredChange"],"value":"","phpdoc":"","attributes":[]}]},"checkColumnDiff":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Do checks for column diffs.\n     *\n     * @param ColumnDiff    $columnDiff\n     * @param IgnoredChange $ignoredChange\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$columnDiff","reference":false,"typehint":["ColumnDiff"],"value":"","phpdoc":"","attributes":[]},{"name":"$ignoredChange","reference":false,"typehint":["IgnoredChange"],"value":"","phpdoc":"","attributes":[]}]},"checkIndex":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Do checks for indexes.\n     *\n     * @param Index         $index\n     * @param IgnoredChange $ignoredChange\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$index","reference":false,"typehint":["Index"],"value":"","phpdoc":"","attributes":[]},{"name":"$ignoredChange","reference":false,"typehint":["IgnoredChange"],"value":"","phpdoc":"","attributes":[]}]},"checkForeignKeyConstraint":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Do checks for foreignKey constraints.\n     *\n     * @param ForeignKeyConstraint $foreignKeyConstraint\n     * @param IgnoredChange        $ignoredChange\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$foreignKeyConstraint","reference":false,"typehint":["ForeignKeyConstraint"],"value":"","phpdoc":"","attributes":[]},{"name":"$ignoredChange","reference":false,"typehint":["IgnoredChange"],"value":"","phpdoc":"","attributes":[]}]},"updateDiffTable":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * After post-processing a diff, check if we have anything left and respond\n     * as Comparator::diffTable() would.\n     *\n     * @param TableDiff $diff\n     *\n     * @return TableDiff|false\n     *\/","attributes":[],"arguments":[{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]}}},"PostgreSql":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\comparison\\basecomparator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Comparison handling for PostgreSQL platforms.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$platform":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"setIgnoredChanges":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"removeIgnoredChanges":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]}}},"MySql":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\comparison\\basecomparator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Comparison handling for MySQL\/MariaDB platforms.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$platform":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"setIgnoredChanges":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"removeIgnoredChanges":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]}}},"Comparator":{"abstract":false,"final":true,"extends":"\\doctrine\\dbal\\schema\\comparator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Comparator class.\n *\n * @internal\n *\n * @deprecated Drop when minimum PHP version is 7.1 or greater.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"diffColumn":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$column1","reference":false,"typehint":["Column"],"value":"","phpdoc":"","attributes":[]},{"name":"$column2","reference":false,"typehint":["Column"],"value":"","phpdoc":"","attributes":[]}]}}},"Sqlite":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\comparison\\basecomparator","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Comparison handling for Sqlite platforms.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$platform":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"setIgnoredChanges":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"removeIgnoredChanges":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$diff","reference":false,"typehint":["TableDiff"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Database\\Schema\\Builder\\":{"classes":{"ExtensionTables":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\builder\\basebuilder","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Builder for Bolt extension tables.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$tableGenerators":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var callable[] *\/","attributes":[]},"$prefix":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string @deprecated Deprecated since 3.0, to be removed in 4.0. *\/","attributes":[]}},"methods":{"getSchemaTables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Table $table *\/","attributes":[],"arguments":[{"name":"$schema","reference":false,"typehint":["Schema"],"value":"","phpdoc":"","attributes":[]}]},"addTable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method allows extensions to register their own tables.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param callable $generator a generator function that takes the Schema\n     *                            instance and returns a table or an array of\n     *                            tables\n     *\/","attributes":[],"arguments":[{"name":"$generator","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"addPrefix":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param string $prefix\n     *\/","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"BaseTables":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\builder\\basebuilder","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Builder for Bolt core tables.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getSchemaTables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var BaseTable $table *\/","attributes":[],"arguments":[{"name":"$schema","reference":false,"typehint":["Schema"],"value":"","phpdoc":"","attributes":[]}]}}},"ContentTables":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\database\\schema\\builder\\basebuilder","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Builder for Bolt content tables.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$tableSchemas":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"getSchemaTables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the schema for Bolt ContentType tables.\n     *\n     * @param Schema $schema\n     * @param Config $config\n     *\n     * @return \\Doctrine\\DBAL\\Schema\\Table[]\n     *\/","attributes":[],"arguments":[{"name":"$schema","reference":false,"typehint":["Schema"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"getNormalisedContentTypes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an array of ContentTypes with the table name is the key.\n     *\n     * @param Config $config\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"addContentTypeTableColumns":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add the custom columns for the ContentType.\n     *\n     * @param \\Bolt\\Storage\\Database\\Schema\\Table\\ContentType $tableObj\n     * @param \\Doctrine\\DBAL\\Schema\\Table                     $table\n     * @param array                                           $fields\n     * @param FieldManager                                    $fieldManager\n     *\/","attributes":[],"arguments":[{"name":"$tableObj","reference":false,"typehint":["ContentType"],"value":"","phpdoc":"","attributes":[]},{"name":"$table","reference":false,"typehint":["Table"],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldManager","reference":false,"typehint":["FieldManager"],"value":"","phpdoc":"","attributes":[]}]},"addContentTypeTableColumn":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a single column to the ContentType table.\n     *\n     * @param \\Bolt\\Storage\\Database\\Schema\\Table\\ContentType $tableObj\n     * @param \\Doctrine\\DBAL\\Schema\\Table                     $table\n     * @param string                                          $fieldName\n     * @param array                                           $values\n     * @param FieldManager                                    $fieldManager\n     *\/","attributes":[],"arguments":[{"name":"$tableObj","reference":false,"typehint":["ContentType"],"value":"","phpdoc":"","attributes":[]},{"name":"$table","reference":false,"typehint":["Table"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$values","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldManager","reference":false,"typehint":["FieldManager"],"value":"","phpdoc":"","attributes":[]}]},"getContentTypeTableColumnType":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Certain field types can have single or JSON array types, figure it out.\n     *\n     * @param array $values\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$values","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"BaseBuilder":{"abstract":true,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base class for Bolt's table builders.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$connection":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\Connection *\/","attributes":[]},"$manager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Database\\Schema\\Manager *\/","attributes":[]},"$tables":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Pimple *\/","attributes":[]},"$charset":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$collate":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$systemLog":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Psr\\Log\\LoggerInterface *\/","attributes":[]},"$flashLogger":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Logger\\FlashLoggerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Connection           $connection\n     * @param Manager              $manager\n     * @param Pimple               $tables\n     * @param string               $charset\n     * @param string               $collate\n     * @param LoggerInterface      $systemLog\n     * @param FlashLoggerInterface $flashLogger\n     *\/","attributes":[],"arguments":[{"name":"$connection","reference":false,"typehint":["Connection"],"value":"","phpdoc":"","attributes":[]},{"name":"$manager","reference":false,"typehint":["Manager"],"value":"","phpdoc":"","attributes":[]},{"name":"$tables","reference":false,"typehint":["Pimple"],"value":"","phpdoc":"","attributes":[]},{"name":"$charset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$collate","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$systemLog","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$flashLogger","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Repository\\":{"classes":{"LogSystemRepository":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\repository\\baselogrepository","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A Repository class that handles storage operations for the system log table.\n *\/","attributes":[],"php":false},"CronRepository":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\repository","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A Repository class that handles storage operations for the Cron table.\n *\/","attributes":[],"php":false,"methods":{"getNextRunTime":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetches the next run time for a named interval eg: cron.Hourly, or cron.Daily.\n     *\n     * @param $interimName\n     *\n     * @return \\Bolt\\Storage\\Entity\\Cron|false\n     *\/","attributes":[],"arguments":[{"name":"$interimName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"queryNextRunTime":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated Deprecated since 3.0, to be removed in 4.0. *\/","attributes":[],"arguments":[{"name":"$interimName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContentRepository":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\repository","implements":[],"use":["\\bolt\\storage\\mapping\\contenttypetitletrait"],"useoptions":[""],"phpdoc":"\/**\n * A Repository class that handles dynamically created content tables.\n *\/","attributes":[],"php":false,"properties":{"$legacy":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ContentLegacyService *\/","attributes":[]}},"methods":{"getSelectList":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetches details on records for select lists.\n     *\n     * @param array  $contentType\n     * @param string $order\n     * @param array  $neededFields\n     *\n     * @return array|false\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$order","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$neededFields","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"querySelectList":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the query for a record select list.\n     *\n     * @param array  $contentType\n     * @param string $order\n     * @param array  $neededFields\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$order","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$neededFields","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"setLegacyService":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the legacy Content service object.\n     *\n     * @param ContentLegacyService $service\n     *\/","attributes":[],"arguments":[{"name":"$service","reference":false,"typehint":["ContentLegacyService"],"value":"","phpdoc":"","attributes":[]}]},"createQueryBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$alias","reference":false,"typehint":[""],"value":"'content'","phpdoc":"","attributes":[]}]},"hydrateLegacyHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Hydration handler for the legacy object.\n     *\n     * @param HydrationEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["HydrationEvent"],"value":"","phpdoc":"","attributes":[]}]}}},"LogChangeRepository":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\repository\\baselogrepository","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A Repository class that handles storage operations for the change log table.\n *\/","attributes":[],"php":false,"methods":{"getChangeLog":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get content changelog entries for all content types.\n     *\n     * @param array $options An array with additional options. Currently, the\n     *                       following options are supported:\n     *                       - 'limit' (int)\n     *                       - 'offset' (int)\n     *                       - 'order' (string)\n     *                       - 'direction' (string)\n     *\n     * @return \\Bolt\\Storage\\Entity\\LogChange[]\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getChangeLogQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the query to get content changelog entries for all content types.\n     *\n     * @param array $options\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"countChangeLog":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a count of change log entries.\n     *\n     * @deprecated since 3.3, will be removed in 4.0\n     *\n     * @return int\n     *\/","attributes":[]},"countChangeLogQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the query to get a count of change log entries.\n     *\n     * @deprecated since 3.3, will be removed in 4.0\n     *\n     * @return QueryBuilder\n     *\/","attributes":[]},"getChangeLogByContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get content changelog entries by content type.\n     *\n     * @param string $contentType ContentType key name\n     * @param array  $options     Additional options:\n     *                            - 'limit' (integer):     Maximum number of results to return\n     *                            - 'order' (string):      Field to order by\n     *                            - 'direction' (string):  ASC or DESC\n     *                            - 'contentid' (integer): Filter further by content ID\n     *                            - 'id' (integer):        Filter by a specific change log entry ID\n     *\n     * @return \\Bolt\\Storage\\Entity\\LogChange[]\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getChangeLogByContentTypeQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build query to get content changelog entries by ContentType.\n     *\n     * @param string $contentType\n     * @param array  $options\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"countChangeLogByContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a count of change log entries by contenttype.\n     *\n     * @param string $contentType\n     * @param array  $options\n     *\n     * @return int|false\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"countChangeLogByContentTypeQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a count of change log entries by contenttype.\n     *\n     * @param string $contentType\n     * @param array  $options\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getChangeLogEntry":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\LogChange $logChange *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$cmpOp","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getChangeLogEntryQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build query to get one changelog entry from the database.\n     *\n     * @param string $contentType\n     * @param int    $contentId\n     * @param int    $id\n     * @param string $cmpOp\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$cmpOp","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setLimitOrder":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Conditionally add LIMIT and ORDER BY to a QueryBuilder query.\n     *\n     * @param QueryBuilder $query\n     * @param array        $options Additional options:\n     *                              - 'limit' (integer):     Maximum number of results to return\n     *                              - 'order' (string):      Field to order by\n     *                              - 'direction' (string):  ASC or DESC\n     *                              - 'contentid' (integer): Filter further by content ID\n     *                              - 'id' (integer):        Filter by a specific change log entry ID\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setWhere":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set any required WHERE clause on a QueryBuilder.\n     *\n     * @param QueryBuilder $query\n     * @param string       $contentType\n     * @param array        $options\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"FieldValueRepository":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\repository","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"queryExistingFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int    $id\n     * @param string $contentType\n     * @param string $field\n     *\n     * @return \\Doctrine\\DBAL\\Query\\QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getExistingFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int    $id\n     * @param string $contentType\n     * @param string $field\n     *\n     * @return Entity[]\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"AuthtokenRepository":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\repository","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A Repository class that handles storage operations for the Authtoken table.\n *\/","attributes":[],"php":false,"methods":{"getUserToken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetches an existing token for the given user \/ ip.\n     *\n     * @param string      $userId\n     * @param string      $ip\n     * @param string|null $userAgent\n     *\n     * @return \\Bolt\\Storage\\Entity\\Authtoken|false\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$ip","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$userAgent","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getUserTokenQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$ip","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$userAgent","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getToken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetches an existing token for the given user \/ ip.\n     *\n     * @param string      $token\n     * @param string|null $ip\n     * @param string|null $userAgent\n     *\n     * @return \\Bolt\\Storage\\Entity\\Authtoken|false\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$ip","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$userAgent","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getTokenQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$ip","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$userAgent","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"deleteTokens":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Deletes all tokens for the given user.\n     *\n     * @param int $userId\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"deleteTokensQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"deleteExpiredTokens":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Deletes all expired tokens.\n     *\n     * @return int\n     *\/","attributes":[]},"deleteExpiredTokensQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getActiveSessions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetches all active sessions.\n     *\n     * @return \\Bolt\\Storage\\Entity\\Authtoken[]\n     *\/","attributes":[]},"getActiveSessionsQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"BaseLogRepository":{"abstract":true,"final":false,"extends":"\\bolt\\storage\\repository","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A Repository class that handles storage operations for the log tables.\n *\/","attributes":[],"php":false,"methods":{"trimLog":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Trim logs older that provided date.\n     *\n     * @param \\DateTime $period\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$period","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"queryTrimLog":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the query for a log trim.\n     *\n     * @param \\DateTime $period\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$period","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"clearLog":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clear the log table.\n     *\n     * @return bool\n     *\/","attributes":[]},"getActivity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get content log's activity entries.\n     *\n     * @param int   $page\n     * @param int   $amount\n     * @param array $options\n     *\n     * @return Entity\\LogChange[]\n     *\/","attributes":[],"arguments":[{"name":"$page","reference":false,"typehint":[""],"value":1,"phpdoc":"","attributes":[]},{"name":"$amount","reference":false,"typehint":[""],"value":10,"phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getActivityQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the query to get the log entries.\n     *\n     * @param int   $page\n     * @param int   $amount\n     * @param array $options\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$page","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$amount","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getActivityCount":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the total amount of log entries, optionally limited to a given level\n     * and\/or context.\n     *\n     * @param array $options\n     *\n     * @return int|false\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getActivityCountQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the query for the entry count.\n     *\n     * @param array $options\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addWhereActivity":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add required WHERE parameters.\n     *\n     * @param QueryBuilder $qb\n     * @param array        $options\n     *\/","attributes":[],"arguments":[{"name":"$qb","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"buildWhereOr":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build an OR group that is added to the AND.\n     *\n     * @param QueryBuilder $qb\n     * @param string       $parentColumnName\n     * @param array        $options\n     *\n     * @return CompositeExpression\n     *\/","attributes":[],"arguments":[{"name":"$qb","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$parentColumnName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getCount":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a column count query result.\n     *\n     * @param array|false $result\n     *\n     * @return int|false\n     *\/","attributes":[],"arguments":[{"name":"$result","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"UsersRepository":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\repository","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A Repository class that handles storage operations for the users table.\n *\/","attributes":[],"php":false,"properties":{"$userEntities":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"deleteUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Delete a user.\n     *\n     * @param string|int $userId either the user's ID, username, or email\n     *                           address\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"deleteUserQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the user deletion query.\n     *\n     * @param string|int $userId\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Users $userEntity *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUserQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the user fetch query.\n     *\n     * @param string|int $userId\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUserAuthData":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a user's authentication data.\n     *\n     * @param string|int $userId\n     *\n     * @return Entity\\Users|false\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUserAuthDataQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the user fetch query.\n     *\n     * @param string|int $userId\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUsers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get all the system users.\n     *\n     * @return Entity\\Users[]|false\n     *\/","attributes":[]},"hasUsers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check to see if there are users in the user table.\n     *\n     * @deprecated Deprecated since 3.3. To be removed in v4.0.\n     *\n     * @return int\n     *\/","attributes":[]},"hasUsersQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.3. To be removed in v4.0.\n     *\n     * @return QueryBuilder\n     *\/","attributes":[]},"getUserShadowAuth":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get user based on password reset notification.\n     *\n     * @param string $shadowToken\n     *\n     * @return Entity\\Users|false\n     *\/","attributes":[],"arguments":[{"name":"$shadowToken","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUserShadowAuthQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $shadowToken\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$shadowToken","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"save":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$silent","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$exclusions","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"unsetSensitiveFields":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Null sensitive data that doesn't need to be passed around.\n     *\n     * @param Entity\\Users $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Collection\\":{"classes":{"Taxonomy":{"abstract":false,"final":false,"extends":"\\doctrine\\common\\collections\\arraycollection","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class stores an array collection of Taxonomy Entities.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Taxonomy constructor.\n     *\n     * @param array          $elements\n     * @param MetadataDriver $metadata\n     *\/","attributes":[],"arguments":[{"name":"$elements","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["MetadataDriver"],"value":"null","phpdoc":"","attributes":[]}]},"setFromPost":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array          $formValues\n     * @param Entity\\Content $entity\n     *\/","attributes":[],"arguments":[{"name":"$formValues","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]}]},"setFromDatabaseValues":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$result","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Runs a check on an incoming collection to make sure that duplicates are filtered out. Precedence is given to\n     * records that are already persisted, with any diff in incoming properties updated.\n     *\n     * Any records not in the incoming set are deleted from the collection and the deleted ones returned as an array.\n     *\n     * @param Taxonomy $collection\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$collection","reference":false,"typehint":["Taxonomy"],"value":"","phpdoc":"","attributes":[]}]},"getGrouped":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the taxonomy types that are in the collection, grouped by taxonomy key.\n     *\n     * @internal\n     *\n     * @return array\n     *\/","attributes":[]},"getNew":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Taxonomy $el *\/","attributes":[]},"getExisting":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the elements that have already been persisted.\n     *\n     * @return Taxonomy\n     *\/","attributes":[]},"getOriginal":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This loops over the existing collection to see if the properties in the incoming\n     * are already available on a saved record. To do this it checks the three key properties\n     * content_id, taxonomytype and slug, if there's a match it returns the original, otherwise\n     * it returns the new and adds the new one to the collection.\n     *\n     * @param Entity\\Taxonomy $entity\n     *\n     * @return mixed|null\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets a specific taxonomy name from the overall collection.\n     *\n     * @param string $fieldName\n     *\n     * @return Taxonomy\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"filter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$p","reference":false,"typehint":["Closure"],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Required by interface ArrayAccess.\n     *\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"containsKeyValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSortorder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$slug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getGroupingTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return null|string\n     *\/","attributes":[]},"getGroupingTaxonomies":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]}}},"Relations":{"abstract":false,"final":false,"extends":"\\doctrine\\common\\collections\\arraycollection","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class stores an array collection of Relations Entities.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Relations constructor.\n     *\n     * @param array         $elements\n     * @param EntityManager $em\n     *\/","attributes":[],"arguments":[{"name":"$elements","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"null","phpdoc":"","attributes":[]}]},"setEntityManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param EntityManager $em\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]}]},"setFromPost":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array          $formValues\n     * @param Entity\\Content $entity\n     *\/","attributes":[],"arguments":[{"name":"$formValues","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]}]},"setFromDatabaseValues":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $result\n     *\/","attributes":[],"arguments":[{"name":"$result","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Runs a check on an incoming collection to make sure that duplicates are filtered out. Precedence is given to\n     * records that are already persisted, with any diff in incoming properties updated.\n     *\n     * Any records not in the incoming set are deleted from the collection and the deleted ones returned as an array.\n     *\n     * @param Relations $collection\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$collection","reference":false,"typehint":["Relations"],"value":"","phpdoc":"","attributes":[]}]},"getGrouped":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Relations $element *\/","attributes":[]},"getOriginal":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This loops over the existing collection to see if the properties in the incoming\n     * are already available on a saved record. To do this it checks the four key properties\n     * if there's a match it returns the original, otherwise\n     * it returns the new and adds the new one to the collection.\n     *\n     * @param Entity\\Relations $entity\n     *\n     * @return mixed|null\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Entity\\Relations"],"value":"","phpdoc":"","attributes":[]}]},"getField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Relations $el *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$biDirectional","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$contentTypeId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"incoming":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Relations $el *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Overrides the default to allow fetching a sub-selection.\n     *\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"CollectionManager":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Collection Manager class.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$collections":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var callable[] *\/","attributes":[]},"$em":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]}},"methods":{"setHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string   $entity\n     * @param callable $handler\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$handler","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setEntityManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set an instance of EntityManager.\n     *\n     * @param EntityManager $em\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"null","phpdoc":"","attributes":[]}]},"create":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $class\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return ArrayCollection\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"LazyCollection":{"abstract":false,"final":false,"extends":"\\doctrine\\common\\collections\\arraycollection","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * LazyCollection Class - Allows a set of references to Entities to be loaded on demand.\n *\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allows adding an entity proxy class.\n     *\n     * @param EntityProxy $element\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$element","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     *  Force loads the proxy objects and returns the real objects\n     *\/","attributes":[]}}}}},"\\Bolt\\Storage\\Entity\\":{"classes":{"Taxonomy":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for taxonomy.\n *\/","attributes":[],"php":false,"properties":{"$_config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$content_id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$contenttype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$taxonomytype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$slug":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$sortorder":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]}},"methods":{"setConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $id\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setContentId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $content_id\n     *\/","attributes":[],"arguments":[{"name":"$content_id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $contenttype\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTaxonomytype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setTaxonomytype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $taxonomytype\n     *\/","attributes":[],"arguments":[{"name":"$taxonomytype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSlug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setSlug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $slug\n     *\/","attributes":[],"arguments":[{"name":"$slug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSortorder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setSortorder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $sortorder\n     *\/","attributes":[],"arguments":[{"name":"$sortorder","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Relations":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for relations.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$from_contenttype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$from_id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$to_contenttype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$to_id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$invert":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $id\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFromContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setFromContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $from_contenttype\n     *\/","attributes":[],"arguments":[{"name":"$from_contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFromId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setFromId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $from_id\n     *\/","attributes":[],"arguments":[{"name":"$from_id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getToContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getToId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setToId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $to_id\n     *\/","attributes":[],"arguments":[{"name":"$to_id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setToContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $to_contenttype\n     *\/","attributes":[],"arguments":[{"name":"$to_contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isInvert":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return bool\n     *\/","attributes":[]},"setInvert":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param bool $invert\n     *\/","attributes":[],"arguments":[{"name":"$invert","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"actAsInverse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"isInverted":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"FieldValue":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for TemplateFields.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$contenttype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$content_id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$grouping":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$fieldname":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$fieldtype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$block":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$value":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var mixed *\/","attributes":[]},"$value_string":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string @internal Use $value instead *\/","attributes":[]},"$value_text":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string @internal Use $value instead *\/","attributes":[]},"$value_integer":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int @internal Use $value instead *\/","attributes":[]},"$value_float":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var float @internal Use $value instead *\/","attributes":[]},"$value_decimal":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int @internal Use $value instead *\/","attributes":[]},"$value_date":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime @internal Use $value instead *\/","attributes":[]},"$value_datetime":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime @internal Use $value instead *\/","attributes":[]},"$value_json_array":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array @internal Use $value instead *\/","attributes":[]}},"methods":{"getValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return mixed\n     *\/","attributes":[]},"setValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $value\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getContentId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"getGrouping":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"getFieldName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getFieldType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"handleStorage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated since 3.3 to be renamed in v4. *\/","attributes":[],"arguments":[{"name":"$fieldObject","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"TemplateFields":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for TemplateFields.\n *\/","attributes":[],"php":false,"methods":{"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for templates using {{ content.get(title) }} functions.\n     *\n     * @param string $key\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"Builder":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Builder class to create entity objects and populate with data.\n *\/","attributes":[],"php":false,"properties":{"$class":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * The class to use for new instances.\n     *\n     * @var string\n     *\/","attributes":[]},"$classMetadata":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$metadata":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$fieldManager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$transformers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param MetadataDriver $metadata\n     * @param FieldManager   $fieldManager\n     *\/","attributes":[],"arguments":[{"name":"$metadata","reference":false,"typehint":["MetadataDriver"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldManager","reference":false,"typehint":["FieldManager"],"value":"","phpdoc":"","attributes":[]}]},"setClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the entity class that will be built.\n     *\n     * @param string $class\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setClassMetadata":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the metadata for the class to be built.\n     *\n     * @param ClassMetadata $classMetadata\n     *\/","attributes":[],"arguments":[{"name":"$classMetadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"getClassMetadata":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the metadata instance.\n     *\n     * @return ClassMetadata $classMetadata\n     *\/","attributes":[]},"setTransformer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a transformer for a specific field type.\n     *\n     * @param string   $fieldTypeClass Class of the field type to transform\n     * @param callable $handler\n     *\/","attributes":[],"arguments":[{"name":"$fieldTypeClass","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$handler","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getEntity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a new empty entity class.\n     *\n     * @param object|null $entity\n     *\n     * @return object\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Uses either the class default or the supplied ClassMetadata to return\n     * a list of fields for this entity.\n     *\n     * @return array\n     *\/","attributes":[]},"create":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates a new entity object.\n     *\n     * @param array|object $data   data to load into the entity\n     * @param object|null  $entity\n     *\n     * @return object $entity\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"createFromDatabaseValues":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Performs database to PHP transforms before creating new entity.\n     *\n     * @param array       $data\n     * @param object|null $entity\n     *\n     * @return object $entity\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"refresh":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Refresh an entities values.\n     *\n     * @param object|null $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getHydratedValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed       $value\n     * @param string      $field\n     * @param string|null $subField\n     * @param string|null $block\n     *\n     * @return FieldValue|bool\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$subField","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$block","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]}}},"Content":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":["\\bolt\\storage\\mapping\\contenttypetitletrait","\\bolt\\storage\\entity\\contenttypetrait","\\bolt\\storage\\entity\\contentroutetrait"],"useoptions":[""],"phpdoc":"\/**\n * Entity for Content.\n *\/","attributes":[],"php":false,"properties":{"$contenttype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string|Mapping\\ContentType *\/","attributes":[]},"$_legacy":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ContentLegacyService *\/","attributes":[]},"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$slug":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$datecreated":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$datechanged":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$datepublish":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$datedepublish":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$ownerid":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$status":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$relation":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Collection\\Relations *\/","attributes":[]},"$taxonomy":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Collection\\Taxonomy *\/","attributes":[]},"$templatefields":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var TemplateFields *\/","attributes":[]},"$group":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array @deprecated Deprecated since 3.0, to be removed in 4.0. *\/","attributes":[]},"$sortorder":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]}},"methods":{"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSortorder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @return int\n     *\/","attributes":[]},"setSortorder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param int $sortorder\n     *\/","attributes":[],"arguments":[{"name":"$sortorder","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $id\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSlug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setSlug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $slug\n     *\/","attributes":[],"arguments":[{"name":"$slug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDatecreated":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get creation date.\n     *\n     * @return \\DateTime\n     *\/","attributes":[]},"setDatecreated":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set creation date.\n     *\n     * @param \\DateTime|string|null $date\n     *\/","attributes":[],"arguments":[{"name":"$date","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDatechanged":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get change date.\n     *\n     * @return \\DateTime\n     *\/","attributes":[]},"setDatechanged":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set change date.\n     *\n     * @param \\DateTime|string|null $date\n     *\/","attributes":[],"arguments":[{"name":"$date","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDatepublish":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setDatepublish":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set published date.\n     *\n     * @param \\DateTime|string|null $date\n     *\/","attributes":[],"arguments":[{"name":"$date","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDatedepublish":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setDatedepublish":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set depublished date.\n     *\n     * @param \\DateTime|string|null $date\n     *\/","attributes":[],"arguments":[{"name":"$date","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getOwnerid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setOwnerid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $ownerid\n     *\/","attributes":[],"arguments":[{"name":"$ownerid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getStatus":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setStatus":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $status\n     *\/","attributes":[],"arguments":[{"name":"$status","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRelation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string|null $contentType\n     *\n     * @return Collection\\Relations\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"setRelation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Collection\\Relations $rel\n     *\/","attributes":[],"arguments":[{"name":"$rel","reference":false,"typehint":["Collection\\Relations"],"value":"","phpdoc":"","attributes":[]}]},"getTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Collection\\Taxonomy\n     *\/","attributes":[]},"setTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Collection\\Taxonomy $taxonomy\n     *\/","attributes":[],"arguments":[{"name":"$taxonomy","reference":false,"typehint":["Collection\\Taxonomy"],"value":"","phpdoc":"","attributes":[]}]},"getGroup":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @return array\n     *\/","attributes":[]},"setGroup":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0.\n     *\n     * @param array $group\n     *\/","attributes":[],"arguments":[{"name":"$group","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setValues":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper to set an array of values.\n     *\n     * @param array $values\n     *\/","attributes":[],"arguments":[{"name":"$values","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getValues":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper to return an array of user-defined values from the Entity.\n     * This excludes meta fields set by Bolt.\n     *\/","attributes":[]},"getTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for a record's 'title' field.\n     *\n     * If there is no field called 'title' then we just return the first text\n     * type field.\n     *\n     * @return string\n     *\/","attributes":[]},"getContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string|Mapping\\ContentType\n     *\/","attributes":[]},"setContenttype":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string|Mapping\\ContentType $value\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTemplatefields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return TemplateFields|array|null\n     *\/","attributes":[]},"setTemplatefields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param TemplateFields|array|null $value\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLegacy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return ContentLegacyService\n     *\/","attributes":[]},"setLegacyService":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentLegacyService $service\n     *\/","attributes":[],"arguments":[{"name":"$service","reference":false,"typehint":["ContentLegacyService"],"value":"","phpdoc":"","attributes":[]}]},"getValidDateObject":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a valid date property to persist.\n     *\n     * @param \\DateTime|string|null $date\n     *\n     * @return \\DateTime|null\n     *\/","attributes":[],"arguments":[{"name":"$date","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Users":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for User.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$username":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$password":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$email":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$lastseen":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$lastip":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$displayname":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$stack":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$enabled":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$shadowpassword":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$shadowtoken":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$shadowvalidity":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$failedlogins":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$throttleduntil":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$roles":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $id\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUsername":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setUsername":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $username\n     *\/","attributes":[],"arguments":[{"name":"$username","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPassword":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setPassword":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $password\n     *\/","attributes":[],"arguments":[{"name":"$password","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getEmail":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setEmail":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $email\n     *\/","attributes":[],"arguments":[{"name":"$email","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLastseen":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setLastseen":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\DateTime $lastseen\n     *\/","attributes":[],"arguments":[{"name":"$lastseen","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLastip":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setLastip":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $lastip\n     *\/","attributes":[],"arguments":[{"name":"$lastip","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDisplayname":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setDisplayname":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $displayname\n     *\/","attributes":[],"arguments":[{"name":"$displayname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getStack":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"setStack":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $stack\n     *\/","attributes":[],"arguments":[{"name":"$stack","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return bool\n     *\/","attributes":[]},"getEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for enabled flag.\n     *\n     * @return bool\n     *\/","attributes":[]},"setEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param bool $enabled\n     *\/","attributes":[],"arguments":[{"name":"$enabled","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getShadowpassword":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setShadowpassword":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $shadowpassword\n     *\/","attributes":[],"arguments":[{"name":"$shadowpassword","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getShadowtoken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setShadowtoken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $shadowtoken\n     *\/","attributes":[],"arguments":[{"name":"$shadowtoken","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getShadowvalidity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setShadowvalidity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $shadowvalidity\n     *\/","attributes":[],"arguments":[{"name":"$shadowvalidity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFailedlogins":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setFailedlogins":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $failedlogins\n     *\/","attributes":[],"arguments":[{"name":"$failedlogins","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getThrottleduntil":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setThrottleduntil":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\DateTime $throttleduntil\n     *\/","attributes":[],"arguments":[{"name":"$throttleduntil","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"setRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $roles\n     *\/","attributes":[],"arguments":[{"name":"$roles","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"Cron":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for cron jobs.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$interim":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$lastrun":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]}},"methods":{"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $id\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getInterim":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setInterim":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $interim\n     *\/","attributes":[],"arguments":[{"name":"$interim","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLastrun":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setLastrun":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\DateTime $lastrun\n     *\/","attributes":[],"arguments":[{"name":"$lastrun","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Authtoken":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for Auth Tokens.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$user_id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$token":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$salt":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$lastseen":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$ip":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$useragent":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$validity":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]}},"methods":{"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $id\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUserId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setUserId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $userId\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getToken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setToken":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $token\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSalt":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setSalt":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $salt\n     *\/","attributes":[],"arguments":[{"name":"$salt","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLastseen":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setLastseen":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\DateTime $lastseen\n     *\/","attributes":[],"arguments":[{"name":"$lastseen","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getIp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setIp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $ip\n     *\/","attributes":[],"arguments":[{"name":"$ip","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUseragent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setUseragent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Setter for the user agent string.\n     *\n     * @param string $useragent\n     *\/","attributes":[],"arguments":[{"name":"$useragent","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getValidity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setValidity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\DateTime $validity\n     *\/","attributes":[],"arguments":[{"name":"$validity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Log":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for Auth Tokens.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$level":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$date":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$message":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$username":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$requesturi":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$route":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$ip":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$file":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$line":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$contenttype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$contentid":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$code":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$dump":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}}},"LogChange":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for change logs.\n *\/","attributes":[],"php":false,"properties":{"$date":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$ownerid":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$title":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$contenttype":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$contentid":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$mutation_type":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$diff":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$comment":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$contentTypeMeta":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ClassMetadata *\/","attributes":[]}},"methods":{"getDate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setDate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\DateTime $date\n     *\/","attributes":[],"arguments":[{"name":"$date","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getOwnerId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setOwnerId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $ownerId\n     *\/","attributes":[],"arguments":[{"name":"$ownerId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $title\n     *\/","attributes":[],"arguments":[{"name":"$title","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $contentType\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setContentId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $contentId\n     *\/","attributes":[],"arguments":[{"name":"$contentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getMutationType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setMutationType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $mutationType\n     *\/","attributes":[],"arguments":[{"name":"$mutationType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDiff":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"setDiff":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $diff\n     *\/","attributes":[],"arguments":[{"name":"$diff","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getComment":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setComment":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $comment\n     *\/","attributes":[],"arguments":[{"name":"$comment","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setContentTypeMeta":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allows injecting the metadata configuration into the record so output can be built based on variable types.\n     *\n     * @param ClassMetadata $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"getChangedFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get changed fields.\n     *\n     * @param array $contentType\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"fieldText":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compile changes for text field types.\n     *\n     * @param string $key\n     * @param string $value\n     * @param array  $fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"fieldList":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compile changes for list field types.\n     *\n     * @param string $key\n     * @param string $value\n     * @param array  $fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"fieldGeolocation":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compile changes for geolocation field types.\n     *\n     * @param string $key\n     * @param string $value\n     * @param array  $fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"fieldImage":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compile changes for image field types.\n     *\n     * @param string $key\n     * @param string $value\n     * @param array  $fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"fieldOembed":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compile changes for embed field types.\n     *\n     * @param string $key\n     * @param string $value\n     * @param array  $fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"fieldSelect":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compile changes for select field types.\n     *\n     * @param string $key\n     * @param string $value\n     * @param array  $fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"fieldVideo":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Compile changes for video field types.\n     *\n     * @param string $key\n     * @param string $value\n     * @param array  $fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"Entity":{"abstract":true,"final":false,"extends":"","implements":["\\jsonserializable","\\arrayaccess"],"use":["\\bolt\\storage\\entity\\entityserializetrait","\\bolt\\storage\\entity\\entityarrayaccesstrait","\\bolt\\storage\\entity\\magicattributetrait"],"useoptions":[""],"phpdoc":"\/**\n * An abstract class that other entities can inherit. Provides automatic getters and setters along\n * with serialization.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array $data\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an entity field value by name.\n     *\n     * @param string $key The entity field name\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set an entity field value by name.\n     *\n     * @param string $key\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $id\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"LogSystem":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\entity\\entity","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Entity for system logs.\n *\/","attributes":[],"php":false,"properties":{"$id":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$level":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$date":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\DateTime *\/","attributes":[]},"$message":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$ownerid":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$route":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$requesturi":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$ip":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$context":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$source":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $id\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLevel":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setLevel":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $level\n     *\/","attributes":[],"arguments":[{"name":"$level","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\DateTime\n     *\/","attributes":[]},"setDate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param \\DateTime $date\n     *\/","attributes":[],"arguments":[{"name":"$date","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getMessage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setMessage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getOwnerid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int\n     *\/","attributes":[]},"setOwnerid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $ownerid\n     *\/","attributes":[],"arguments":[{"name":"$ownerid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRoute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setRoute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $route\n     *\/","attributes":[],"arguments":[{"name":"$route","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRequesturi":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setRequesturi":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $requestUri\n     *\/","attributes":[],"arguments":[{"name":"$requestUri","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getIp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setIp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $ip\n     *\/","attributes":[],"arguments":[{"name":"$ip","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $context\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSource":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"setSource":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $source\n     *\/","attributes":[],"arguments":[{"name":"$source","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"traits":{"EntitySerializeTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Provides ability for an entity to serialize itself.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$_internal":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"jsonSerialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"toArray":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"ContentSearchTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait class for ContentType search.\n *\n * This is a breakout of the old Bolt\\Content class and serves two main purposes:\n *   * Maintain backward compatibility for Bolt\\Content through the remainder of\n *     the 2.x development\/release life-cycle\n *   * Attempt to break up former functionality into sections of code that more\n *     resembles Single Responsibility Principles\n *\n * These traits should be considered transitional, the functionality in the\n * process of refactor, and not representative of a valid approach.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$lastWeight":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int The last time we weight a searchresult *\/","attributes":[]}},"methods":{"getSearchResultWeight":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the content's query weight\u2026 and something to eat\u2026 it looks hungry.\n     *\n     * @return int\n     *\/","attributes":[]},"weighSearchResult":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Weigh this content against a query.\n     *\n     * The query is assumed to be in a format as returned by decode Storage->decodeSearchQuery().\n     *\n     * @param array $query Query to weigh against\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFieldWeights":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Calculate the default field weights.\n     *\n     * This gives more weight to the 'slug pointer fields'.\n     *\n     * @return array\n     *\/","attributes":[]},"getTaxonomyWeights":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Calculate the default taxonomy weights.\n     *\n     * Adds weights to taxonomies that behave like tags.\n     *\n     * @return array\n     *\/","attributes":[]},"weighQueryText":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Weight a text part relative to some other part.\n     *\n     * @param string $subject  the subject to search in\n     * @param string $complete the complete search term (lowercased)\n     * @param array  $words    all the individual search terms (lowercased)\n     * @param int    $max      maximum number of points to return\n     *\n     * @return int The weight\n     *\/","attributes":[],"arguments":[{"name":"$subject","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$complete","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$words","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$max","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContentValuesTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait class for ContentType relations.\n *\n * This is a breakout of the old Bolt\\Content class and serves two main purposes:\n *   * Maintain backward compatibility for Bolt\\Content through the remainder of\n *     the 2.x development\/release life-cycle\n *   * Attempt to break up former functionality into sections of code that more\n *     resembles Single Responsibility Principles\n *\n * These traits should be considered transitional, the functionality in the\n * process of refactor, and not representative of a valid approach.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$isRootType":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool Whether this is a \"real\" ContentType or an embedded ones *\/","attributes":[]}},"methods":{"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Pseudo-magic function, used for when templates use {{ content.get(title) }},\n     * so we can map it to $this->values['title'].\n     *\n     * @param string $name\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"excerpt":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Alias for getExcerpt().\n     *\n     * @param int          $length\n     * @param bool         $includeTitle\n     * @param string|array $focus\n     *\n     * @return Markup\n     *\/","attributes":[],"arguments":[{"name":"$length","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$includeTitle","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$focus","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getExcerpt":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create an excerpt for the content.\n     *\n     * @param int          $length\n     * @param bool         $includeTitle\n     * @param string|array $focus\n     *\n     * @return Markup\n     *\/","attributes":[],"arguments":[{"name":"$length","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$includeTitle","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$focus","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getValues":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a content objects values.\n     *\n     * @param bool $json     Set to TRUE to return JSON encoded values for arrays\n     * @param bool $stripped Set to true to strip all of the base fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$json","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$stripped","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"setValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a ContentType record's individual value.\n     *\n     * @param string $key\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setValues":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a ContentType record's values.\n     *\n     * @param array $values\n     *\/","attributes":[],"arguments":[{"name":"$values","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setFromPost":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a ContentType record values from a HTTP POST.\n     *\n     * @param array $values\n     * @param array $contenttype\n     *\n     * @throws \\Exception\n     *\/","attributes":[],"arguments":[{"name":"$values","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getImage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the first image in the content.\n     *\n     * @return string\n     *\/","attributes":[]},"getTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the title, name, caption or subject.\n     *\n     * @param bool $allowBasicTags\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$allowBasicTags","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getTitleColumnName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the columnname of the title, name, caption or subject.\n     *\n     * @return array\n     *\/","attributes":[]},"hasTemplateFields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a ContentType field has a template set.\n     *\n     * @return bool\n     *\/","attributes":[]},"getTemplateFieldsContentType":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the template associate with a ContentType field.\n     *\n     * @return string\n     *\/","attributes":[]},"getTemplateFieldConfig":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Environment $twig *\/","attributes":[]}}},"MagicAttributeTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":["\\bolt\\storage\\casetransformtrait"],"useoptions":[""],"phpdoc":"\/**\n * Provides access to entity attributes and the schema-less _fields\n * attribute via __get and __set magic methods.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$_fields":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__isset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__unset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__call":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$arguments","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFields":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * An internal method that builds a list of available fields depending on context.\n     *\n     * @return array\n     **\/","attributes":[]},"has":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Boolean check on whether entity has field.\n     *\n     * @param string $field\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContentTypeTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait class for ContentType definitions.\n *\n * These traits should be considered transitional, the functionality in the\n * process of refactor, and not representative of a valid approach.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"fieldInfo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get field information for the given field.\n     *\n     * @param string $key\n     *\n     * @return array an associative array containing at least the key 'type',\n     *               and, depending on the type, other keys\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fieldType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the field type for a given field name.\n     *\n     * @param string $key\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContentTaxonomyTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait class for ContentType relations.\n *\n * This is a breakout of the old Bolt\\Content class and serves two main purposes:\n *   * Maintain backward compatibility for Bolt\\Content through the remainder of\n *     the 2.x development\/release life-cycle\n *   * Attempt to break up former functionality into sections of code that more\n *     resembles Single Responsibility Principles\n *\n * These traits should be considered transitional, the functionality in the\n * process of refactor, and not representative of a valid approach.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * NOTE: This probably needs to implement, or be called by, Bolt\\Storage::getTaxonomy().\n     *\n     * @param string $taxonomyType\n     *\/","attributes":[],"arguments":[{"name":"$taxonomyType","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"setGroup":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the 'group', 'groupname' and 'sortorder' properties of the current object.\n     *\n     * @param string $group\n     * @param string $name\n     * @param string $taxonomytype\n     * @param int    $sortorder\n     *\/","attributes":[],"arguments":[{"name":"$group","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomytype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$sortorder","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"setTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a taxonomy for the current object.\n     *\n     * @param string       $taxonomyType\n     * @param string|array $slug\n     * @param string       $name\n     * @param int          $sortorder\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$taxonomyType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$slug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$sortorder","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"sortTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sort the taxonomy of the current object, based on the order given in taxonomy.yml.\n     *\/","attributes":[]}}},"EntityArrayAccessTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Allows array access for an entity eg:\n *     $entity['value'] is equivalent to $entity->getValue().\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @see ArrayAccess::offsetSet\n     *\n     * @param string $offset\n     * @param string $value\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @see ArrayAccess::offsetExists\n     *\n     * @param string $offset\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @see ArrayAccess::offsetUnset\n     *\n     * @param int $offset\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @see ArrayAccess::offsetGet\n     *\n     * @param string $offset\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContentRelationTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait class for ContentType relations.\n *\n * This is a breakout of the old Bolt\\Content class and serves two main purposes:\n *   * Maintain backward compatibility for Bolt\\Content through the remainder of\n *     the 2.x development\/release life-cycle\n *   * Attempt to break up former functionality into sections of code that more\n *     resembles Single Responsibility Principles\n *\n * These traits should be considered transitional, the functionality in the\n * process of refactor, and not representative of a valid approach.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"related":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Alias for getRelation().\n     *\n     * @param string|null $filterContentType\n     * @param array       $options\n     *\n     * @return \\Bolt\\Legacy\\Content[]\n     *\/","attributes":[],"arguments":[{"name":"$filterContentType","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getRelation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets one or more related records.\n     *\n     * @param string $filterContentType ContentType to filter returned results on\n     * @param array  $options           a set of 'WHERE' options to apply to the filter\n     *\n     * Backward compatibility note:\n     * The $options parameter used to be $filterid, an integer\n     *\n     * @return \\Bolt\\Legacy\\Content[]\n     *\/","attributes":[],"arguments":[{"name":"$filterContentType","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"setRelation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a relation.\n     *\n     * @param string|array $contentType\n     * @param int          $id\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"clearRelation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clears a relation.\n     *\n     * @param string|array $contenttype\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContentRouteTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait class for ContentType routing.\n *\n * This is a breakout of the old Bolt\\Content class and serves two main purposes:\n *   * Maintain backward compatibility for Bolt\\Content through the remainder of\n *     the 2.x development\/release life-cycle\n *   * Attempt to break up former functionality into sections of code that more\n *     resembles Single Responsibility Principles\n *\n * These traits should be considered transitional, the functionality in the\n * process of refactor, and not representative of a valid approach.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"editlink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates a link to EDIT this record, if the user is logged in.\n     *\n     * @return string\n     *\/","attributes":[]},"link":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates a URL for the content record.\n     *\n     * @param int $referenceType\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$referenceType","reference":false,"typehint":[""],"value":"UrlGeneratorInterface::ABSOLUTE_PATH","phpdoc":"","attributes":[]}]},"isHome":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Checks if the current record is set as the homepage.\n     *\n     * @return bool\n     *\/","attributes":[]},"getRouteNameAndParams":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns [route name, route params] for url generation, or null for various reasons.\n     *\n     * @return array|null\n     *\/","attributes":[]},"getRouteConfig":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Retrieves the first route applicable to the content as a two-element array consisting of the binding and the\n     * route array. Returns `null` if there is no applicable route.\n     *\n     * @return array|null\n     *\/","attributes":[]},"getRouteRequirementParams":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build a ContentType's route parameters.\n     *\n     * @param array $route\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$route","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"isApplicableRoute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a route is applicable to this record.\n     *\n     * @param array $route\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$route","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getReference":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the reference to this record, to uniquely identify this specific record.\n     *\n     * @return string\n     *\/","attributes":[]},"getLinkSlug":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a record's slug depending on the type of object used.\n     *\n     * @return string|int\n     *\/","attributes":[]}}}}},"\\Bolt\\Storage\\Field\\":{"classes":{"Manager":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class to manage instances of fields and instantiate the defaults.\n *\n * @deprecated Deprecated since 3.0, to be removed in 4.0 see src\/Storage\/FieldManager\n *\n * @author Ross Riley <riley.ross@gmail.com>\n **\/","attributes":[],"php":false,"properties":{"$fields":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$defaults":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$dummyFields":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"addField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":["FieldInterface"],"value":"","phpdoc":"","attributes":[]}]},"addDummyField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDatabaseField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Base":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\field\\fieldinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$name":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$template":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $name\n     * @param string $template\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}},"interfaces":{"FieldInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface implemented by content fields.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the name of the field.\n     *\n     * @return string The field name\n     *\/","attributes":[]},"getTemplate":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the path to the template.\n     *\n     * @return string The template name\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the storage type.\n     *\n     * @throws DBALException\n     *\n     * @return Type A Valid Storage Type\n     *\/","attributes":[]},"getStorageOptions":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns additional options to be passed to the storage field.\n     *\n     * @return array An array of options\n     *\/","attributes":[]}}}}},"\\Bolt\\Storage\\Field\\Collection\\":{"classes":{"FieldCollection":{"abstract":false,"final":false,"extends":"\\doctrine\\common\\collections\\arraycollection","implements":["\\bolt\\storage\\field\\collection\\fieldcollectioninterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * A mapping of FieldValues.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$grouping":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$block":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$toRemove":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FieldValue[] $elements\n     *\/","attributes":[],"arguments":[{"name":"$elements","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getNew":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getExisting":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setGrouping":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$grouping","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setBlock":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $block\n     *\/","attributes":[],"arguments":[{"name":"$block","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getBlock":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getIterator":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Iterator|FieldValue[]\n     *\/","attributes":[]},"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getFieldType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRenderedValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"LazyFieldCollection":{"abstract":false,"final":false,"extends":"\\doctrine\\common\\collections\\abstractlazycollection","implements":["\\bolt\\storage\\field\\collection\\fieldcollectioninterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class is used by lazily loaded field values. It stores a reference to an array of rows and\n * fetches from the database on demand.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$references":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int[] *\/","attributes":[]},"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager|null *\/","attributes":[]},"$grouping":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$collection":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FieldCollectionInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param int[]              $references\n     * @param EntityManager|null $em\n     *\/","attributes":[],"arguments":[{"name":"$references","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"null","phpdoc":"","attributes":[]}]},"getNew":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getExisting":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setGrouping":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$grouping","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getBlock":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getFieldType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRenderedValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"doInitialize":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handles the conversion of references to entities.\n     *\/","attributes":[]},"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"RepeatingFieldCollection":{"abstract":false,"final":false,"extends":"\\doctrine\\common\\collections\\arraycollection","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class stores an array collection of Fields.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$mapping":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManager $em\n     * @param array         $mapping\n     * @param array         $elements\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$mapping","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$elements","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"createFrom":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$elements","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FieldCollectionInterface $collection\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$collection","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addFromArray":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array  $fields\n     * @param int    $grouping\n     * @param object $entity\n     * @param string $block\n     *\n     * @throws FieldConfigurationException\n     *\/","attributes":[],"arguments":[{"name":"$fields","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$grouping","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$block","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"addFromReferences":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $ids\n     * @param int   $grouping\n     *\/","attributes":[],"arguments":[{"name":"$ids","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$grouping","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"getOriginal":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This loops over the existing collection to see if the properties in the incoming\n     * are already available on a saved record.\n     *\n     * @param object $entity\n     *\n     * @return mixed|null\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param RepeatingFieldCollection $collection\n     *\n     * @return RepeatingFieldCollection[]\n     *\/","attributes":[],"arguments":[{"name":"$collection","reference":false,"typehint":["RepeatingFieldCollection"],"value":"","phpdoc":"","attributes":[]}]},"getNew":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"getExisting":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"setName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"flatten":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"getFieldType":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string      $field\n     * @param string|null $block\n     *\n     * @throws FieldConfigurationException\n     *\n     * @return FieldTypeBase\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$block","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getFieldTypeName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $field\n     * @param null   $block\n     *\n     * @throws FieldConfigurationException\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$block","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getEmptySet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return FieldCollection\n     *\/","attributes":[]},"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}}},"interfaces":{"FieldCollectionInterface":{"abstract":false,"final":false,"extends":"\\doctrine\\common\\collections\\collection","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A map of FieldValues.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getNew":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int[]\n     *\/","attributes":[]},"getExisting":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return int[]\n     *\/","attributes":[]},"setGrouping":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param int $grouping\n     *\/","attributes":[],"arguments":[{"name":"$grouping","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a field value to the map.\n     *\n     * @param FieldValue $value\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a field value to the map with the specified key.\n     *\n     * @param string     $key\n     * @param FieldValue $value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getIterator":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Iterator|FieldValue[]\n     *\/","attributes":[]},"getFieldType":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the type of a given $fieldName.\n     *\n     * @param string $fieldName\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRenderedValue":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the rendered version of a value for Twig.\n     *\n     * @internal\n     *\n     * This can be refactored to something better, once the\n     * deprecation of legacy content is complete\n     *\n     * @param string $fieldName\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Field\\Sanitiser\\":{"classes":{"Sanitiser":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\field\\sanitiser\\sanitiserinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Field sanitiser class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$allowedTags":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$allowedAttributes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$allowedWyswig":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array $allowedTags\n     * @param array $allowedAttributes\n     * @param array $allowedWyswig\n     *\/","attributes":[],"arguments":[{"name":"$allowedTags","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$allowedAttributes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$allowedWyswig","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"sanitise":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$isWysiwyg","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getAllowedTags":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setAllowedTags":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$allowedTags","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getAllowedAttributes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setAllowedAttributes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$allowedAttributes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getWyswigAllowedTags":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a list of allowed tags needed for WYSIWYG field types.\n     *\n     * For HTML fields we want to override a few tags, e.g, it makes\n     * no sense to disallow `<iframe>` if we have `embed: true` in\n     * config.yml.\n     *\n     * @return array\n     *\/","attributes":[]},"isWysiwygEnabled":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a WYSIWYG configuration value.\n     *\n     * @param string $name\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"interfaces":{"SanitiserAwareInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Sanitiser aware interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getSanitiser":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the sanitiser object.\n     *\n     * @return SanitiserInterface\n     *\/","attributes":[]},"setSanitiser":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the sanitiser.\n     *\n     * @param SanitiserInterface $sanitiser\n     *\/","attributes":[],"arguments":[{"name":"$sanitiser","reference":false,"typehint":["SanitiserInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"SanitiserInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Field sanitiser interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"sanitise":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sanitise HTML, by allowing only white-listed tags and attributes.\n     *\n     * @param string $value     a string value to sanitize\n     * @param bool   $isWysiwyg true if the field should allow HTML tags\n     *                          needed for WYSIWYG fields\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$isWysiwyg","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getAllowedTags":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the list of allowed HTML tags.\n     *\n     * @return array\n     *\/","attributes":[]},"setAllowedTags":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Override the allowed HTML tags.\n     *\n     * @param array $allowedTags\n     *\n     * @return SanitiserInterface\n     *\/","attributes":[],"arguments":[{"name":"$allowedTags","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getAllowedAttributes":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the list of allowed attributes.\n     *\n     * @return array\n     *\/","attributes":[]},"setAllowedAttributes":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Override the allowed attributes.\n     *\n     * @param array $allowedAttributes\n     *\n     * @return SanitiserInterface\n     *\/","attributes":[],"arguments":[{"name":"$allowedAttributes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"WysiwygAwareInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * WYSIWYG aware interface.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false}},"traits":{"SanitiserAwareTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Sanitiser aware trait.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$sanitiser":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var SanitiserInterface *\/","attributes":[]}},"methods":{"getSanitiser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the sanitiser object.\n     *\n     * @return SanitiserInterface\n     *\/","attributes":[]},"setSanitiser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the sanitiser.\n     *\n     * @param SanitiserInterface $sanitiser\n     *\/","attributes":[],"arguments":[{"name":"$sanitiser","reference":false,"typehint":["SanitiserInterface"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Field\\Type\\":{"classes":{"DateType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$mapping","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"null","phpdoc":"","attributes":[]}]},"query":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Date fields perform substitution on the parameters passed in to query.\n     * To handle this we pass every parameter through `strtotime()` to make\n     * sure that it is a valid search.\n     *\n     * @param QueryInterface $query\n     * @param ClassMetadata  $metadata\n     *\n     * @throws QueryParseException\n     *\n     * @return \\Doctrine\\DBAL\\Query\\QueryBuilder|null\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"TextAreaType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"ImageListType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\listtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"ImageType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"TemplateSelectType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"IncomingRelationType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\relationtype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"load":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * For relations, the load method adds an extra ->addSelect() and ->leftJoin() to the query that\n     * fetches the related records from the join table in the same query as the content fetch.\n     *\n     * IDs are returned comma-separated which the ->hydrate() method can then turn into pointers\n     * to the related entities.\n     *\n     * @param QueryBuilder  $query\n     * @param ClassMetadata $metadata\n     *\n     * @return QueryBuilder|null|void\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"hydrate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"EmbedType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"TaxonomyType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\jointypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"query":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Query\\SelectQuery $query *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"load":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * For the taxonomy field the load event modifies the query to fetch taxonomies related\n     * to a content record from the join table.\n     *\n     * It does this via an additional ->addSelect() and ->leftJoin() call on the QueryBuilder\n     * which includes then includes the taxonomies in the same query as the content fetch.\n     *\n     * @param QueryBuilder  $query\n     * @param ClassMetadata $metadata\n     *\n     * @return QueryBuilder|null\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"hydrate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Collection\\Taxonomy $fieldTaxonomy *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getPlatformGroupConcat":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get platform specific group_concat token for provided column.\n     *\n     * @param string       $column\n     * @param string       $order\n     * @param string       $alias\n     * @param QueryBuilder $query\n     *\n     * @throws StorageException\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$column","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$order","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"getGroup":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Collection\\Taxonomy $taxonomy\n     *\n     * @return array|null\n     *\/","attributes":[],"arguments":[{"name":"$taxonomy","reference":false,"typehint":["Collection\\Taxonomy"],"value":"","phpdoc":"","attributes":[]}]},"getSortorder":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Collection\\Taxonomy $taxonomy\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$taxonomy","reference":false,"typehint":["Collection\\Taxonomy"],"value":"","phpdoc":"","attributes":[]}]},"getExistingTaxonomies":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Direct query to get existing taxonomy records.\n     *\n     * @param mixed $entity\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"normalize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Collection\\Taxonomy $collection *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"SelectMultipleType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"DateTimeType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\datetype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$mapping","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"null","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"FieldTypeBase":{"abstract":true,"final":false,"extends":"","implements":["\\bolt\\storage\\field\\type\\fieldtypeinterface","\\bolt\\storage\\field\\fieldinterface"],"use":["\\bolt\\storage\\casetransformtrait"],"useoptions":[""],"phpdoc":"\/**\n * This is an abstract class for a field type that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$mapping":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]},"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$platform":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var AbstractPlatform *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array              $mapping\n     * @param EntityManager|null $em\n     *\/","attributes":[],"arguments":[{"name":"$mapping","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"null","phpdoc":"","attributes":[]}]},"getPlatform":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the platform.\n     *\n     * @return AbstractPlatform\n     *\/","attributes":[]},"setPlatform":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the current platform to an instance of AbstractPlatform.\n     *\n     * @param AbstractPlatform $platform\n     *\/","attributes":[],"arguments":[{"name":"$platform","reference":false,"typehint":["AbstractPlatform"],"value":"","phpdoc":"","attributes":[]}]},"load":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"query":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hydrate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The set method takes a raw php value and performs the conversion to the entity value.\n     * Normally this is as simple as $entity->$key = $value although more complicated transforms\n     * can happen should a field type choose to override this method.\n     *\n     * Note too that this will also be the default method called for an entity builder which is\n     * designed to receive raw data to initialise an entity.\n     *\n     * @param object $entity\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Reads the current value of the field from an entity and returns value.\n     *\n     * @param $entity\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"present":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the name of the Doctrine storage type to use for a field.\n     *\n     * @return Type\n     *\/","attributes":[]},"getStorageTypeObject":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper method to bridge compatibility between old and new Field interfaces. Previously a string storage\n     * type was allowed whereas new behaviour is to expect a Type object.\n     *\n     * @return Type\n     *\/","attributes":[]},"getStorageOptions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated\n     * Here to maintain compatibility with the old interface\n     *\/","attributes":[]},"getMappingAttribute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the entity attribute name to be used for reading \/ persisting.\n     *\n     * @return string\n     *\/","attributes":[]},"getTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Provides a template that is able to render the field.\n     *\n     * @deprecated\n     *\/","attributes":[]},"isJson":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a value is a JSON string.\n     *\n     * @param string $value\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"FileListType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\listtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"SelectType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"IntegerType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"GeolocationType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"VideoType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"FloatType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"TemplateFieldsType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$chooser":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var TemplateChooser *\/","attributes":[]},"$twig":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Environment *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array           $mapping\n     * @param EntityManager   $em\n     * @param TemplateChooser $chooser\n     * @param Environment     $twig\n     *\/","attributes":[],"arguments":[{"name":"$mapping","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$chooser","reference":false,"typehint":["TemplateChooser"],"value":"","phpdoc":"","attributes":[]},{"name":"$twig","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"hydrate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param object $entity\n     * @param mixed  $value\n     * @param mixed  $rawData\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$rawData","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"serialize":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string        $input\n     * @param ClassMetadata $metadata\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"buildMetadata":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param object     $entity\n     * @param array|null $rawData\n     *\n     * @return ClassMetadata\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$rawData","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"RelationType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\jointypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"query":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Relation fields can allow filters on the relations fetched. For now this is limited\n     * to the id field because of the possible complexity of fetching and filtering\n     * all the related data.\n     *\n     * For example the following queries:\n     *     'pages', {'relationkey'=>'1'}\n     *     'pages', {'relationkey'=>'1 || 2 || 3'}.\n     *\n     * Because the search is actually on the join table, we replace the\n     * expression to filter the join side rather than on the main side.\n     *\n     * @param QueryInterface $query\n     * @param ClassMetadata  $metadata\n     *\n     * @return QueryBuilder|null\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"load":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * For relations, the load method adds an extra ->addSelect() and ->leftJoin() to the query that\n     * fetches the related records from the join table in the same query as the content fetch.\n     *\n     * IDs are returned comma-separated which the ->hydrate() method can then turn into pointers\n     * to the related entities.\n     *\n     * @param QueryBuilder  $query\n     * @param ClassMetadata $metadata\n     *\n     * @return QueryBuilder|null|void\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"hydrate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getExistingRelations":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get existing relationship records.\n     *\n     * @param mixed $entity\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getInverseRelations":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get inverse relationship records. That is ones where the definition happened on the opposite record.\n     *\n     * @param mixed $entity\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPlatformGroupConcat":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get platform specific group_concat token for provided column.\n     *\n     * @param string       $column\n     * @param string       $alias\n     * @param QueryBuilder $query\n     *\n     * @throws StorageException\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$column","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"normalize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The normalize method takes care of any pre-persist cleaning up.\n     *\n     * For relations that allows us to support non standard data formats such\n     * as arrays that allow this style data setting to work...\n     *\n     *   `$entity->setPages(['1', '2']);`\n     *\n     *    or\n     *\n     *   `$entity->setRelation(['pages'=>['1', '2']]);`\n     *\n     * @param Entity\\Content $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ListTypeBase":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"HiddenType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"BlockType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\repeatertype","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class adds a block collection and handles additional functionality for adding\n * named blocks.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"normalize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Normalize step ensures that we have correctly hydrated objects at the collection\n     * and entity level.\n     *\n     * @param $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"CheckboxType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"MarkdownType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":["\\bolt\\storage\\field\\sanitiser\\sanitiserawareinterface"],"use":["\\bolt\\storage\\field\\sanitiser\\sanitiserawaretrait"],"useoptions":[""],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the name of the Doctrine storage type to use for a field.\n     *\n     * @return Type\n     *\/","attributes":[]}}},"RepeaterType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"query":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Repeater fields can allow filters on the value of a sub-field\n     *\n     * For example the following queries:\n     *     'repeatfield', {'repeatstatus=1'}\n     *     'repeatfield', {'repeattitle=%Test%'}.\n     *\n     * Because the search is actually on the join table, we replace the\n     * expression to filter the join side rather than on the main side.\n     *\n     * @param QueryInterface $query\n     * @param ClassMetadata  $metadata\n     *\n     * @return QueryBuilder|null\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"rewriteQueryFilterParameters":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method does an in-place modification of a generic ContentType.field\n     * query to the format actually used in the raw SQL. For instance a simple\n     * query might say `entries.repeater = 'title=%Test%'` but now we are in\n     * the context of entries the actual SQL fragment needs to do a sub-select\n     * on the bolt_field_value table and only return the content_ids where this\n     * query matches so this method rewrites the SQL fragment just before the\n     * query gets sent.\n     *\n     * @param Filter      $filter\n     * @param SelectQuery $query\n     * @param string      $field\n     *\/","attributes":[],"arguments":[{"name":"$filter","reference":false,"typehint":["Filter"],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":["SelectQuery"],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"load":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * For repeating fields, the load method adds extra joins and selects to\n     * the query that fetches the related records from the field and field\n     * value tables in the same query as the content fetch.\n     *\n     * @param QueryBuilder  $query\n     * @param ClassMetadata $metadata\n     *\n     * @return QueryBuilder|null\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hydrate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The set method gets called directly by a new entity builder. For this field we never want to allow\n     * null values, rather we want an empty collection so this overrides the default and handles that.\n     *\n     * @param object $entity\n     * @param mixed  $val\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$val","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"normalize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Normalize step ensures that we have correctly hydrated objects at the collection\n     * and entity level.\n     *\n     * @param object $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getPlatformGroupConcat":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get platform specific group_concat token for provided column.\n     *\n     * @param QueryBuilder $query\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"getExistingFields":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get existing fields for this record.\n     *\n     * @param object $entity\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addToInsertQuery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Query to insert new field values.\n     *\n     * @param QuerySet $queries\n     * @param array    $changes\n     * @param object   $entity\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$changes","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addToDeleteQuery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Query to delete existing field values.\n     *\n     * @param QuerySet $queries\n     * @param $changes\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$changes","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addToUpdateQuery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Query to insert new field values.\n     *\n     * @param QuerySet $queries\n     * @param array    $changes\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$changes","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFieldType":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $field\n     *\n     * @throws FieldConfigurationException\n     *\n     * @return FieldTypeBase\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFieldTypeName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param $field\n     *\n     * @throws FieldConfigurationException\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"FileType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"TextType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":["\\bolt\\storage\\field\\sanitiser\\sanitiserawareinterface"],"use":["\\bolt\\storage\\field\\sanitiser\\sanitiserawaretrait"],"useoptions":[""],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * Note: The persist() override was removed, because it was sanitising fields\n * when not desired. See https:\/\/github.com\/bolt\/bolt\/issues\/5789 for details.\n *\n * Note: After the removal of the persist() method, we can use the\n * SanitiserAwareTrait again, ensuring editors don't inadvertently insert\n * javascript in `type: text` fields. Hopefully this will also help a bit in\n * the never-ending \"OMFG, an editor can self-XSS!!1!one!\" discussions.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"JoinTypeBase":{"abstract":true,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is an abstract class that field types dealing with join\/association functionality can extend.\n * It provides standard helpers to perform complex loads\/queries\/hydration across join tables.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"normalizeData":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method takes the flat underscore separated key->value data that comes from the query result\n     * and turns it into a properly structured array. The second part of the method also removes duplicate\n     * values in the case where an aggregate query returns more than one copy of the row.\n     *\n     * For example, `_from_id => \"4,4,4\"` gets normalized to `['fromid'=>4]`\n     *\n     * @param Traversable $data\n     * @param string      $field\n     * @param string      $separator\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$separator","reference":false,"typehint":[""],"value":"','","phpdoc":"","attributes":[]}]},"rewriteQueryFilterParameters":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Query\\SelectQuery $query *\/","attributes":[],"arguments":[{"name":"$filter","reference":false,"typehint":["Filter"],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$column","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"normalizeFromPost":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param object|Entity\\Content $entity\n     * @param string                $target\n     *\n     * @return Collections\\ArrayCollection|null\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$target","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"HtmlType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":["\\bolt\\storage\\field\\sanitiser\\sanitiserawareinterface","\\bolt\\storage\\field\\sanitiser\\wysiwygawareinterface"],"use":["\\bolt\\storage\\field\\sanitiser\\sanitiserawaretrait"],"useoptions":[""],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"hydrate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the name of the Doctrine storage type to use for a field.\n     *\n     * @return Type\n     *\/","attributes":[]}}},"SlugType":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\field\\type\\fieldtypebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"persist":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getStorageType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}},"interfaces":{"FieldTypeInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is one of a suite of basic Bolt field transformers that handles\n * the lifecycle of a field from pre-query to persist.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"load":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle or ignore the load event.\n     *\n     * @param QueryBuilder  $query\n     * @param ClassMetadata $metadata\n     *\n     * @return QueryBuilder|null\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"query":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle or ignore the query event.\n     *\n     * @param QueryInterface $query\n     * @param ClassMetadata  $metadata\n     *\n     * @return QueryBuilder|null\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]}]},"persist":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle or ignore the persist event.\n     *\n     * @param QuerySet $queries\n     * @param mixed    $entity\n     *\/","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["QuerySet"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hydrate":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle or ignore the hydrate event.\n     *\n     * @param $data\n     * @param $entity\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle transforms on a field set.\n     *\n     * @param $entity\n     * @param $value\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"present":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle or ignore the present event.\n     *\n     * @param $entity\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the name of the type.\n     *\n     * @return string The field name\n     *\/","attributes":[]}}}}},"\\Bolt\\Storage\\ContentRequest\\":{"classes":{"Listing":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Helper class for ContentType overview listings.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$query":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Query *\/","attributes":[]},"$pager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var PagerManager *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManager $em\n     * @param Query         $query\n     * @param Config        $config\n     * @param PagerManager  $pager\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":["Query"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$pager","reference":false,"typehint":["PagerManager"],"value":"null","phpdoc":"","attributes":[]}]},"action":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch a listing of ContentType records.\n     *\n     * @param string         $contentTypeSlug\n     * @param ListingOptions $options\n     *\n     * @return Content|false\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeSlug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["ListingOptions"],"value":"","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the content records, and fallback a page if none found.\n     *\n     * @param string         $contentTypeSlug\n     * @param array          $contentParameters\n     * @param ListingOptions $options\n     *\n     * @return Content|false\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeSlug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentParameters","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["ListingOptions"],"value":"","phpdoc":"","attributes":[]}]},"runPagerQueries":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryResultset $results\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"runGroupSort":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param $results\n     *\n     * @return QueryResultset|array\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Modify":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Helper class for ContentType record (mass) field modifications and status\n * transitions.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$users":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Users *\/","attributes":[]},"$loggerSystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$loggerFlash":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FlashLoggerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param EntityManager        $em\n     * @param Users                $users\n     * @param LoggerInterface      $loggerSystem\n     * @param FlashLoggerInterface $loggerFlash\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$users","reference":false,"typehint":["Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerSystem","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerFlash","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]}]},"action":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Modify an individual ContentType's records.\n     *\n     * @param string $contentTypeName ContentType slug\n     * @param array  $changeRequest   Change array in the format of:\n     *                                [id => [action => [field => value]]]\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$changeRequest","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"modifyContentTypeRecord":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform modification action(s) on a ContentType record.\n     *\n     * @param Repository $repo\n     * @param Content    $entity\n     * @param string     $action\n     * @param array|null $fieldData\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$repo","reference":false,"typehint":["Repository"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$action","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldData","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"deleteRecord":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Mapping\\ContentType $contentType *\/","attributes":[],"arguments":[{"name":"$repo","reference":false,"typehint":["Repository"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]}]},"modifyRecord":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Modify a record's value(s).\n     *\n     * @param Content $entity\n     * @param array   $fieldData\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldData","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"modifyRecordValue":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Modify a record's value if permitted.\n     *\n     * @param Content $entity\n     * @param string  $field\n     * @param mixed   $value\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"transistionRecordStatus":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Transition a record's status if permitted.\n     *\n     * @param Content $entity\n     * @param string  $newStatus\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$newStatus","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"transistionRecordOwner":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Transition a record's owner if permitted.\n     *\n     * @param Content $entity\n     * @param int     $ownerId\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$ownerId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ListingOptions":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class to manage record listing options.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$order":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$page":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$taxonomies":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$filter":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$groupSort":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"setOrder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the order.\n     *\n     * @param string|null $order\n     *\n     * @return ListingOptions\n     *\/","attributes":[],"arguments":[{"name":"$order","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getOrder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the order\u2026 Would you like fries with that?\n     *\n     * @return string\n     *\/","attributes":[]},"setPage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the page.\n     *\n     * @param int|null $page\n     *\n     * @return ListingOptions\n     *\/","attributes":[],"arguments":[{"name":"$page","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the page.\n     *\n     * @return int\n     *\/","attributes":[]},"getPreviousPage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the previous page number.\n     *\n     * @return int\n     *\/","attributes":[]},"setTaxonomies":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the taxonomies.\n     *\n     * @param array|null $taxonomies\n     *\n     * @return ListingOptions\n     *\/","attributes":[],"arguments":[{"name":"$taxonomies","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTaxonomies":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the taxonomies.\n     *\n     * @return array\n     *\/","attributes":[]},"setFilter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the filter.\n     *\n     * @param string|null $filter\n     *\n     * @return ListingOptions\n     *\/","attributes":[],"arguments":[{"name":"$filter","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFilter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the filter.\n     *\n     * @return string\n     *\/","attributes":[]},"getGroupSort":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return mixed\n     *\/","attributes":[]},"setGroupSort":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $groupSort\n     *\n     * @return ListingOptions\n     *\/","attributes":[],"arguments":[{"name":"$groupSort","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Edit":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Helper class for ContentType record editor edits.\n *\n * Prior to v3.0 this functionality existed in \\Bolt\\Controllers\\Backend::editcontent().\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$query":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Query *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$users":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Users *\/","attributes":[]},"$filesystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Manager *\/","attributes":[]},"$loggerSystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$loggerFlash":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FlashLoggerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param EntityManager        $em\n     * @param Config               $config\n     * @param Users                $users\n     * @param Manager              $filesystem\n     * @param LoggerInterface      $loggerSystem\n     * @param FlashLoggerInterface $loggerFlash\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$users","reference":false,"typehint":["Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["Manager"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerSystem","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerFlash","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]}]},"setQueryHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @internal DO NOT USE\n     *\n     * @deprecated Temporary and to be removed circa 3.5.\n     *\n     * @param Query $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["Query"],"value":"","phpdoc":"","attributes":[]}]},"action":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Do the edit form for a record.\n     *\n     * @param Content     $content     A content record\n     * @param ContentType $contentType The ContentType data\n     * @param bool        $duplicate   If TRUE create a duplicate record\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["ContentType"],"value":"","phpdoc":"","attributes":[]},{"name":"$duplicate","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRelationsList":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Repository\\ContentRepository $repo *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["ContentType"],"value":"","phpdoc":"","attributes":[]}]},"neededFields":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of fields mentioned in the 'format:' for a relationship in contenttypes.\n     *\n     * @param array $relationValues\n     * @param array $relationConfig\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$relationValues","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$relationConfig","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTemplateFieldTemplates":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine which templates will result in templatefields.\n     *\n     * @param ContentType $contentType\n     * @param Content     $content\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["ContentType"],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]}]},"getPublishingDate":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Converts database publishing\/depublishing dates to values to be used in Twig.\n     *\n     * @param string $date\n     * @param bool   $setNowOnEmpty\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$date","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$setNowOnEmpty","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"createGroupTabs":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate tab groups.\n     *\n     * @param ContentType $contentType\n     * @param array       $has\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["ContentType"],"value":"","phpdoc":"","attributes":[]},{"name":"$has","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getUsedFieldtypes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a list of fields types used in regular, template and virtual fields.\n     *\n     * @param ContentType $contentType\n     * @param Content     $content\n     * @param array       $has\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["ContentType"],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$has","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"Save":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Helper class for ContentType record editor saves.\n *\n * Prior to v3.0 this functionality existed in \\Bolt\\Controllers\\Backend::editcontent().\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$users":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Users *\/","attributes":[]},"$loggerChange":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$loggerSystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$loggerFlash":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FlashLoggerInterface *\/","attributes":[]},"$urlGenerator":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface *\/","attributes":[]},"$slugify":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var SlugifyInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param EntityManager         $em\n     * @param Config                $config\n     * @param Users                 $users\n     * @param LoggerInterface       $loggerChange\n     * @param LoggerInterface       $loggerSystem\n     * @param FlashLoggerInterface  $loggerFlash\n     * @param UrlGeneratorInterface $urlGenerator\n     * @param SlugifyInterface      $slugify\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$users","reference":false,"typehint":["Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerChange","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerSystem","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerFlash","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$slugify","reference":false,"typehint":["SlugifyInterface"],"value":"null","phpdoc":"","attributes":[]}]},"action":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Do the save for a POSTed record.\n     *\n     * @param array  $formValues\n     * @param array  $contentType  The ContentType data\n     * @param int    $id           The record ID\n     * @param bool   $new          If TRUE this is a new record\n     * @param string $returnTo\n     * @param string $editReferrer\n     *\n     * @throws AccessControlException\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$formValues","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$new","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$returnTo","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$editReferrer","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setTransitionStatus":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check whether the status is allowed.\n     *\n     * We act as if a status *transition* were requested and fallback to the old\n     * status otherwise.\n     *\n     * @param Entity\\Content $content\n     * @param string         $contentTypeSlug\n     * @param int            $id\n     * @param string         $oldStatus\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypeSlug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$oldStatus","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setPostedValues":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set a ContentType record values from a HTTP POST.\n     *\n     * @param Entity\\Content $content\n     * @param array          $formValues\n     * @param array          $contentType\n     *\n     * @throws AccessControlException\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$formValues","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setPostedRelations":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert POST relationship values to an array of Entity objects keyed by\n     * ContentType.\n     *\n     * @param Entity\\Content $content\n     * @param array|null     $formValues\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$formValues","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setPostedTaxonomies":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Collection\\Taxonomy $taxonomies *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$formValues","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"saveContentRecord":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Commit the record to the database.\n     *\n     * @param Entity\\Content      $content\n     * @param Entity\\Content|null $oldContent\n     * @param array               $contentType\n     * @param bool                $new\n     * @param string              $comment\n     * @param string              $returnTo\n     * @param string              $editReferrer\n     *\n     * @return Response|null\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$oldContent","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$new","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$comment","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$returnTo","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$editReferrer","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setSuccessfulControlValues":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add successful control values to request values, and do needed corrections.\n     *\n     * @see http:\/\/www.w3.org\/TR\/html401\/interact\/forms.html#h-17.13.2\n     *\n     * @param array $formValues\n     * @param array $fields\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$formValues","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$fields","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"createJsonUpdate":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build a valid AJAX response for in-place saves that account for pre\/post\n     * save events.\n     *\n     * @param Entity\\Content $content\n     * @param bool           $flush\n     *\n     * @return JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Entity\\Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$flush","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"logChange":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a change log entry to track the change.\n     *\n     * @param string              $contentType\n     * @param int                 $contentId\n     * @param Entity\\Content      $newContent\n     * @param Entity\\Content|null $oldContent\n     * @param string|null         $comment\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$newContent","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$oldContent","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$comment","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"generateUrl":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shortcut for {@see UrlGeneratorInterface::generate}.\n     *\n     * @param string $name          The name of the route\n     * @param array  $params        An array of parameters\n     * @param int    $referenceType The type of reference to be generated (one of the constants)\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$referenceType","reference":false,"typehint":[""],"value":"UrlGeneratorInterface::ABSOLUTE_PATH","phpdoc":"","attributes":[]}]},"isEmptyArray":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check wether an array is empty and if it is the value of the repeater is set to null.\n     *\n     * @param array $input\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\EventProcessor\\":{"classes":{"TimedRecord":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Timed record (de)publishing handler.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"CACHE_KEY_PUBLISH":{"value":"'publish.timer.publish'","visibility":"","phpdoc":"","attributes":[]},"CACHE_KEY_HOLD":{"value":"'publish.timer.hold'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$contentTypeNames":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManagerInterface *\/","attributes":[]},"$cache":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var CacheProvider *\/","attributes":[]},"$dispatcher":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EventDispatcherInterface *\/","attributes":[]},"$systemLogger":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$interval":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array                    $contentTypeNames\n     * @param EntityManagerInterface   $em\n     * @param CacheProvider            $cache\n     * @param EventDispatcherInterface $dispatcher\n     * @param LoggerInterface          $systemLogger\n     * @param int                      $interval\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeNames","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManagerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$cache","reference":false,"typehint":["CacheProvider"],"value":"","phpdoc":"","attributes":[]},{"name":"$dispatcher","reference":false,"typehint":["EventDispatcherInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$systemLogger","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$interval","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isDuePublish":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the timer for publishing timed records.\n     *\/","attributes":[]},"isDueHold":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the timer for publishing timed records.\n     *\/","attributes":[]},"publishTimedRecords":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check (and update) any records that need to be updated from \"timed\" to \"published\".\n     *\/","attributes":[]},"holdExpiredRecords":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check (and update) any records that need to be updated from \"published\" to \"held\".\n     *\/","attributes":[]},"timedHandleRecords":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle any pending timed publish\/hold transitions.\n     *\n     * @param string $contentTypeName\n     * @param string $type\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"save":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Save a modified entity.\n     *\n     * @param ContentRepository $contentRepo\n     * @param Content           $content\n     * @param string            $type\n     * @param string            $legacyType\n     *\/","attributes":[],"arguments":[{"name":"$contentRepo","reference":false,"typehint":["ContentRepository"],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$legacyType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"dispatch":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dispatch the update event.\n     *\n     * @param Content $content\n     * @param string  $type\n     * @param string  $legacyType\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$legacyType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTimedRecords":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the QueryBuilder where parameters.\n     *\n     * @param ContentRepository $contentRepo\n     * @param string            $type\n     *\n     * @throws \\Exception\n     *\n     * @return Content[]|false\n     *\/","attributes":[],"arguments":[{"name":"$contentRepo","reference":false,"typehint":["ContentRepository"],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTimedPublishQuery":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the QueryBuilder where parameters.\n     *\n     * @param QueryBuilder $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"getHoldQuery":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the QueryBuilder where parameters.\n     *\n     * @param QueryBuilder $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Query\\":{"classes":{"SearchQueryResultset":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\query\\queryresultset","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class builds on the default QueryResultset to add\n * the ability to merge sets based on weighted scores.\n *\/","attributes":[],"php":false,"properties":{"$results":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$scores":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array  $results A set of results\n     * @param string $type    An optional label to partition results\n     * @param array  $scores  An array of scores for the corresponding results\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$scores","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"sortSingle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $label\n     *\/","attributes":[],"arguments":[{"name":"$label","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"SelectQuery":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\query\\queryinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n *  This query class coordinates a select query build from Bolt's\n *  custom query DSL as documented here:.\n *\n *  @see https:\/\/docs.bolt.cm\/templates\/content-fetching\n *\n *  The resulting QueryBuilder object is then passed through to the individual\n *  field handlers where they can perform value transformations.\n *\n *  @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$qb":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueryBuilder *\/","attributes":[]},"$parser":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueryParameterParser *\/","attributes":[]},"$contentType":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$params":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$filters":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Filter[] *\/","attributes":[]},"$replacements":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$singleFetchMode":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param QueryBuilder         $qb\n     * @param QueryParameterParser $parser\n     *\/","attributes":[],"arguments":[{"name":"$qb","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$parser","reference":false,"typehint":["QueryParameterParser"],"value":"","phpdoc":"","attributes":[]}]},"setContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the ContentType that this query will run against.\n     *\n     * @param string $contentType\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the ContentType that this query will run against.\n     *\n     * @return string\n     *\/","attributes":[]},"setParameters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the parameters that will filter \/ alter the query.\n     *\n     * @param array $params\n     *\/","attributes":[],"arguments":[{"name":"$params","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter to allow access to a set parameter.\n     *\n     * @param $name\n     *\n     * @return array|null\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Setter to allow writing to a named parameter.\n     *\n     * @param string $name\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getWhereExpression":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates a composite expression that adds all the attached\n     * filters individual expressions into a combined one.\n     *\n     * @return CompositeExpression\n     *\/","attributes":[]},"getWhereParameters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns all the parameters for the query.\n     *\n     * @return array\n     *\/","attributes":[]},"getWhereParametersFor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets all the parameters for a specific field name.\n     *\n     * @param string $fieldName\n     *\n     * @return array array of key=>value parameters\n     *\/","attributes":[],"arguments":[{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setWhereParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets all the parameters for a specific field name.\n     *\n     * @param string $key\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addFilter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Filter $filter\n     *\/","attributes":[],"arguments":[{"name":"$filter","reference":false,"typehint":["Filter"],"value":"","phpdoc":"","attributes":[]}]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns all the filters attached to the query.\n     *\n     * @return Filter[]\n     *\/","attributes":[]},"build":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Part of the QueryInterface this turns all the input into a Doctrine\n     * QueryBuilder object and is usually run just before query execution.\n     * That allows modifications to be made to any of the parameters up until\n     * query execution time.\n     *\n     * @return QueryBuilder\n     *\/","attributes":[]},"getQueryBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allows public access to the QueryBuilder object.\n     *\n     * @return QueryBuilder\n     *\/","attributes":[]},"setQueryBuilder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allows replacing the default QueryBuilder.\n     *\n     * @param QueryBuilder $qb\n     *\/","attributes":[],"arguments":[{"name":"$qb","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]}]},"getSingleFetchMode":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether the query is in single fetch mode.\n     *\n     * @return bool\n     *\/","attributes":[]},"setSingleFetchMode":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Turns single fetch mode on or off.\n     *\n     * @param bool $value\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string String representation of query\n     *\/","attributes":[]},"processFilters":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method that runs the individual key\/value input through\n     * the QueryParameterParser. This allows complicated expressions to\n     * be turned into simple sql expressions.\n     *\/","attributes":[]}}},"SearchConfig":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class takes an overall config array as input and parses into values\n * applicable for performing searches.\n *\n * This takes into account ContentTypes that aren't searchable along with\n * taxonomy and field weightings.\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array|Config *\/","attributes":[]},"$searchableTypes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$invisibleTypes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$joins":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$searchInvisible":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"getConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the config of all fields for a given content type.\n     *\n     * @param string $contentType\n     *\n     * @return array|false\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFieldConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the config of one given field for a given content type.\n     *\n     * @param string $contentType\n     * @param string $field\n     *\n     * @return array|false\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseContenttypes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Iterates over the main config and delegates weighting to both\n     * searchable columns and searchable taxonomies.\n     *\/","attributes":[]},"parseTaxonomies":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Iterates the taxonomies for a given ContentType, then assigns a\n     * weighting based on type.\n     *\n     * @param string $contentType\n     * @param array  $taxonomies\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomies","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getJoins":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper method to return the join search columns for a ContentType\n     * weighting based on type.\n     *\n     * @param string $contentType\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSearchableColumns":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine what columns are searchable for a given ContentType.\n     *\n     * @param string $type\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isInvisible":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Does some checks to see whether a ContentType should appear in search results.\n     * This is based on ContentType options.\n     *\n     * @param string $contentType\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"canSearchInvisible":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return bool\n     *\/","attributes":[]},"enableSearchInvisible":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param bool $searchInvisible\n     *\/","attributes":[],"arguments":[{"name":"$searchInvisible","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"QueryParameterParser":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler class to convert the DSL for content query parameters\n *  into equivalent DBAL expressions.\n *\n *  @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$alias":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$key":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$value":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var mixed *\/","attributes":[]},"$expr":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ExpressionBuilder *\/","attributes":[]},"$valueMatchers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$filterHandlers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Filter[] *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param ExpressionBuilder $expr\n     *\/","attributes":[],"arguments":[{"name":"$expr","reference":false,"typehint":["ExpressionBuilder"],"value":"null","phpdoc":"","attributes":[]}]},"setupDefaults":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"setAlias":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the select alias to be used in sql queries.\n     *\n     * @param string $alias\n     *\/","attributes":[],"arguments":[{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFilter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var callable $callback *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"incorrectQueryHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handles some errors in key\/value string formatting.\n     *\n     * @param string            $key\n     * @param string            $value\n     * @param ExpressionBuilder $expr\n     *\n     * @throws QueryParseException\n     *\n     * @return null\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$expr","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"multipleKeyAndValueHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This handler processes 'triple pipe' queries as implemented in Bolt\n     * It looks for three pipes in the key and value and creates an OR composite\n     * expression for example: 'username|||email':'fred|||pete'.\n     *\n     * @param string            $key\n     * @param string            $value\n     * @param ExpressionBuilder $expr\n     *\n     * @return Filter|null\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$expr","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"multipleValueHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This handler processes multiple value queries as defined in the Bolt 'Fetching Content'\n     * documentation. It allows a value to be parsed to and AND\/OR expression.\n     *\n     * For example, this handler will correctly parse values like:\n     *     'username': 'fred||bob'\n     *     'id': '<5 && !1'\n     *\n     * @param string            $key\n     * @param string            $value\n     * @param ExpressionBuilder $expr\n     *\n     * @return Filter|null\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$expr","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"defaultFilterHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The default handler is the last to be run and handler simple value parsing.\n     *\n     * @param string            $key\n     * @param string|array      $value\n     * @param ExpressionBuilder $expr\n     *\n     * @return Filter\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$expr","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseValue":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method uses the defined value matchers to parse a passed in value.\n     *\n     * The following component parts will be returned in the array:\n     * [\n     *     'value'    => <the value remaining after the parse>\n     *     'operator' => <the operator that should be used>\n     *     'matched'  => <the pattern that the value matched>\n     * ]\n     *\n     * @param string $value Value to process\n     *\n     * @throws QueryParseException\n     *\n     * @return array Parsed values\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addFilterHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The goal of this class is to turn any key:value into a Filter class.\n     * Adding a handler here will push the new filter callback onto the top\n     * of the Queue along with the built in defaults.\n     *\n     * Note: the callback should either return nothing or an instance of\n     * \\Bolt\\Storage\\Query\\Filter\n     *\n     * @param callable $handler\n     *\/","attributes":[],"arguments":[{"name":"$handler","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"addValueMatcher":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds an additional token to parse for value parameters.\n     *\n     * This gives the ability to define additional value -> operator matches\n     *\n     * @param string $token    Regex pattern to match against\n     * @param array  $params   Options to provide to the matched param\n     * @param bool   $priority If set item will be prepended to start of list\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$priority","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]}}},"FrontendQueryScope":{"abstract":false,"final":false,"extends":"","implements":["\\bolt\\storage\\query\\queryscopeinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class takes an overall config array as input and parses into values\n * applicable for performing select queries.\n *\n * This takes into account default ordering for ContentTypes.\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array|Config *\/","attributes":[]},"$orderBys":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Config $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"getConfig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the config of all fields for a given content type.\n     *\n     * @param string $contentType\n     *\n     * @return array|false\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getOrder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the config of one given field for a given content type.\n     *\n     * @param string $contentType\n     *\n     * @return array|false\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parseContenttypes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Iterates over the main config and delegates weighting to both\n     * searchable columns and searchable taxonomies.\n     *\/","attributes":[]},"onQueryExecute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryInterface $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"ContentQueryParser":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler class to convert the DSL for content queries into an\n *  object representation.\n *\n *  @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$query":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$params":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$contentTypes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$operation":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$identifier":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$operations":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$directives":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$directiveHandlers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var callable[] *\/","attributes":[]},"$handlers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var callable[] *\/","attributes":[]},"$services":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueryInterface[] *\/","attributes":[]},"$scope":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueryScopeInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManager  $em\n     * @param QueryInterface $queryHandler\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$queryHandler","reference":false,"typehint":["QueryInterface"],"value":"null","phpdoc":"","attributes":[]}]},"setupDefaults":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method to initialise the default handlers.\n     *\/","attributes":[]},"setQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the input query.\n     *\n     * @param string $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setParameters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the input parameters to handle.\n     *\n     * @param array $params\n     *\/","attributes":[],"arguments":[{"name":"$params","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets a single input parameter.\n     *\n     * @param string $param\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$param","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse a query.\n     *\/","attributes":[]},"parseContent":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parses the content area of the querystring.\n     *\/","attributes":[]},"parseOperation":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Internal method that takes the 'query' part of the input and\n     * parses it into one of the various operations supported.\n     *\n     * A simple select operation will just contain the ContentType eg 'pages'\n     * but additional operations can be triggered using the '\/' separator.\n     *\n     * @internal\n     *\/","attributes":[]},"parseDirectives":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Directives are all of the other parameters supported by Bolt that do not\n     * relate to an actual filter query. Some examples include 'printquery', 'limit',\n     * 'order' or 'returnsingle'.\n     *\n     * All these need to parsed and taken out of the params that are sent to the query.\n     *\/","attributes":[]},"runDirectives":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This runs the callbacks attached to each directive command.\n     *\n     * @param QueryInterface $query\n     * @param array          $skipDirective\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$skipDirective","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"setScope":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$scope","reference":false,"typehint":["QueryScopeInterface"],"value":"","phpdoc":"","attributes":[]}]},"runScopes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]}]},"getEntityManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the object EntityManager.\n     *\n     * @return EntityManager\n     *\/","attributes":[]},"getContentTypes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the parsed content types.\n     *\n     * @return array\n     *\/","attributes":[]},"getOperation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the parsed operation.\n     *\n     * @return string\n     *\/","attributes":[]},"getIdentifier":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the parsed identifier.\n     *\n     * @return string\n     *\/","attributes":[]},"getDirective":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a directive from the parsed list.\n     *\n     * @param string $key\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setDirective":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets a directive for the named key.\n     *\n     * @param string      $key\n     * @param string|bool $value\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getDirectiveHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the handler for the named directive.\n     *\n     * @param string $check\n     *\n     * @return callable\n     *\/","attributes":[],"arguments":[{"name":"$check","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasDirectiveHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns boolean for existence of handler.\n     *\n     * @param string $check\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$check","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addDirectiveHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a handler for the named directive.\n     *\n     * @param string        $key\n     * @param callable|null $callback\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callback","reference":false,"typehint":["callable"],"value":"null","phpdoc":"","attributes":[]}]},"addHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a handler AND operation for the named operation.\n     *\n     * @param string   $operation\n     * @param callable $callback\n     *\/","attributes":[],"arguments":[{"name":"$operation","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$callback","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"getHandler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a handler for the named operation.\n     *\n     * @param string $operation\n     *\n     * @return callable\n     *\/","attributes":[],"arguments":[{"name":"$operation","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addService":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a service for the named operation.\n     *\n     * @param string         $operation\n     * @param QueryInterface $service\n     *\/","attributes":[],"arguments":[{"name":"$operation","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$service","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getService":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a service for the named operation.\n     *\n     * @param string $operation\n     *\n     * @return QueryInterface\n     *\/","attributes":[],"arguments":[{"name":"$operation","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getParameters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the current parameters.\n     *\n     * @return array\n     *\/","attributes":[]},"hasParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper method to check if parameters are set for a specific key.\n     *\n     * @param string $param\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$param","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a single named parameter.\n     *\n     * @param string $param\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$param","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fetch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Runs the query and fetches the results.\n     *\n     * @return QueryResultset|Content|null\n     *\/","attributes":[]},"getOperations":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter to return the currently registered operations.\n     *\n     * @return array\n     *\/","attributes":[]},"addOperation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a new operation to the list supported.\n     *\n     * @param string $operation name of operation to parse for\n     *\/","attributes":[],"arguments":[{"name":"$operation","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"removeOperation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Removes an operation from the list supported.\n     *\n     * @param string $operation name of operation to remove\n     *\/","attributes":[],"arguments":[{"name":"$operation","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"SearchWeighter":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class takes a fetched resultset and sorts them based on the weighting\n * settings in the SearchConfig class.\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var SearchConfig *\/","attributes":[]},"$results":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueryResultset|array *\/","attributes":[]},"$searchWords":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$contentType":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor takes a compiled SearchConfig which is essentially an array\n     * of fields that we will search for text content, along with their corresponding\n     * weighting score.\n     *\n     * @param SearchConfig $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["SearchConfig"],"value":"","phpdoc":"","attributes":[]}]},"setResults":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets an iterable group of results, this normally comes directly\n     * from the database query.\n     *\n     * @param QueryResultset|array $results\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the ContentType that we are weighting, that is, what type the results\n     * array is. That allows us to map against the configuration to see which fields\n     * to scan for relevant text.\n     *\n     * @param string $type\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setSearchWords":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the words that we want to query against. Normally this comes from the\n     * filter in a search, exploded into an array so the words are separated.\n     *\n     * @param array $words\n     *\/","attributes":[],"arguments":[{"name":"$words","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"weight":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This is the public method that gets a score for a the set of results.\n     *\n     * @return array An array of scores for each of the corresponding results\n     *\/","attributes":[]},"getContentFields":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper method to fetch the fields for an individual ContentType.\n     *\n     * @return array|false\n     *\/","attributes":[]},"buildResultIndex":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This is a simple version of the Vector Space Model.\n     *\n     * @see https:\/\/en.wikipedia.org\/wiki\/Vector_space_model\n     *\n     * The goal is to determine a relavance score for a corpus of values\n     * based on both the existence of a word or words but also based on\n     * how important the words are.\n     *\n     * For example, when querying results against a search of 'lorem ipsum';\n     * a result with the title 'Lorem Ipsum' should score higher\n     * than a result with the title 'An article about robots and lorem ipsum'\n     *\n     * The ratio of the appearance of the query words to the overall size of\n     * the document is used to produce a better score.\n     *\n     * @param object $result A single result to score\n     *\n     * @return array An array consisting of a count \/ dictionary of words\n     *\/","attributes":[],"arguments":[{"name":"$result","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getResultScore":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method uses the index built in the method above to do some quick\n     * score calculations for each word of the query, versus each word of the\n     * index dictionary.\n     *\n     * @param object $result\n     *\n     * @return float\n     *\/","attributes":[],"arguments":[{"name":"$result","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Filter":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  This class represents a single filter that converts to an expression along\n *  with associated query values.\n *\n *\n *  @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$key":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$expression":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var CompositeExpression *\/","attributes":[]},"$parameters":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"setKey":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the key that this filter affects.\n     *\n     * @param string $key\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getKey":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for key.\n     *\n     * @return string\n     *\/","attributes":[]},"getExpression":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the compiled expression as a string. This will look\n     * something like `(alias.key = :placeholder)`.\n     *\n     * @return string\n     *\/","attributes":[]},"setExpression":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allows replacing the expression object with a modified one.\n     *\n     * @param CompositeExpression $expression\n     *\/","attributes":[],"arguments":[{"name":"$expression","reference":false,"typehint":["CompositeExpression"],"value":"","phpdoc":"","attributes":[]}]},"getExpressionObject":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the actual object of the expression. This is generally\n     * only needed for on the fly modification, to get the compiled\n     * expression use getExpression().\n     *\n     * @return CompositeExpression\n     *\/","attributes":[]},"getParameters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the array of parameters attached to this filter. These are\n     * normally used to replace placeholders at compile time.\n     *\n     * @return array\n     *\/","attributes":[]},"setParameters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Setter method to replace parameters.\n     *\n     * @param array $parameters\n     *\/","attributes":[],"arguments":[{"name":"$parameters","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"hasParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper method to check if parameters are set for a specific key.\n     *\n     * @param string $param\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$param","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allows setting a parameter for a single key.\n     *\n     * @param string $param\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$param","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"QueryResultset":{"abstract":false,"final":false,"extends":"\\appenditerator","implements":["\\countable"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class is a wrapper that handles single or multiple\n * sets or results fetched via a query. They can be iterated\n * normally, or split by label, eg just results from one\n * ContentType.\n *\/","attributes":[],"php":false,"properties":{"$results":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$originalQueries":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueryBuilder[] *\/","attributes":[]}},"methods":{"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array  $results A set of results\n     * @param string $type    An optional label to partition results\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Allows retrieval of a set or results, if a label has been used to\n     * store results then passing the label as a parameter returns just\n     * that set of results.\n     *\n     * @param string $label\n     *\n     * @return ArrayIterator\n     *\/","attributes":[],"arguments":[{"name":"$label","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"count":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the total count.\n     *\n     * @return int\n     *\/","attributes":[]},"setOriginalQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param $type\n     * @param $originalQuery\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$originalQuery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getOriginalQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param null $type\n     *\n     * @return QueryBuilder\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getOriginalQueries":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return QueryBuilder[]\n     *\/","attributes":[]}}},"Query":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$parser":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ContentQueryParser *\/","attributes":[]},"$scopes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param ContentQueryParser $parser\n     *\/","attributes":[],"arguments":[{"name":"$parser","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]},"addScope":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string              $name\n     * @param QueryScopeInterface $scope\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$scope","reference":false,"typehint":["QueryScopeInterface"],"value":"","phpdoc":"","attributes":[]}]},"getScope":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     *\n     * @return QueryScopeInterface|null\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * getContent based on a 'human readable query'.\n     *\n     * Used by the twig command {% setcontent %} but also directly.\n     * For reference refer to @link https:\/\/docs.bolt.cm\/templating\/content-fetching\n     *\n     * @param string       $textQuery\n     * @param array|string $parameters\n     *\n     * @return QueryResultset|Content|null\n     *\/","attributes":[],"arguments":[{"name":"$textQuery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getContentByScope":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $scopeName\n     * @param string $textquery\n     * @param array  $parameters\n     *\n     * @return QueryResultset|null\n     *\/","attributes":[],"arguments":[{"name":"$scopeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$textquery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"SearchQuery":{"abstract":false,"final":false,"extends":"\\bolt\\storage\\query\\selectquery","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This query class coordinates a search query building mainly on the same\n * filtering system used in the SelectQuery class. The main difference is\n * the addition of weighting, which is driven by documented here:.\n *\n *  @see https:\/\/docs.bolt.cm\/templates\/content-search\n *\n *  The resulting QueryBuilder object is then passed through to the individual\n *  field handlers where they can perform value transformations.\n *\n *  @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$search":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var SearchConfig *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param QueryBuilder         $qb\n     * @param QueryParameterParser $parser\n     * @param SearchConfig         $config\n     *\/","attributes":[],"arguments":[{"name":"$qb","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$parser","reference":false,"typehint":["QueryParameterParser"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["SearchConfig"],"value":"","phpdoc":"","attributes":[]}]},"setSearch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This method sets the search filter which then triggers the process method.\n     *\n     * @param string $search full search query\n     *\/","attributes":[],"arguments":[{"name":"$search","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setParameters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the overall parameters on the query. This may include others\n     * than the search query itself which gets set to the 'filter' param.\n     *\n     * @param array $params\n     *\/","attributes":[],"arguments":[{"name":"$params","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getSearchWords":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the individual elements of the search query as an array.\n     *\n     * @return array\n     *\/","attributes":[]},"getSearchParameter":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This is an internal helper method to get the search words prepared to\n     * be passed to the expression builder.\n     *\n     * @return string\n     *\/","attributes":[]},"processFilters":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This overrides the SelectQuery default to do some extra preparation for a search query.\n     * Firstly it builds separate filters for the search query and then it removes the filter\n     * from the params and the others will then get processed normally by the parent.\n     *\/","attributes":[]},"getWhereExpression":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates a composite expression that adds all the attached\n     * filters individual expressions into a combined one.\n     *\n     * @return CompositeExpression|null\n     *\/","attributes":[]}}}},"interfaces":{"QueryScopeInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface QueryScopeInterface\n * Interface defines a class that provides additional scoping for a Query.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"onQueryExecute":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"QueryInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface that defines minimum functionality of a Bolt Query class.\n *\n * The goal of a query is to store select and filter parameters that can be\n * used to create a relevant SQL expression.\n *\/","attributes":[],"php":false,"methods":{"build":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Builds the query and returns an instance of QueryBuilder.\n     *\n     * @return \\Doctrine\\DBAL\\Query\\QueryBuilder\n     *\/","attributes":[]},"getQueryBuilder":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the current instance of QueryBuilder.\n     *\n     * @return \\Doctrine\\DBAL\\Query\\QueryBuilder\n     *\/","attributes":[]}}}}},"\\Bolt\\Storage\\Query\\Handler\\":{"classes":{"SelectQueryHandler":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler class to perform select query and return a resultset.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentQueryParser $contentQuery\n     *\n     * @return QueryResultset|Content|false\n     *\/","attributes":[],"arguments":[{"name":"$contentQuery","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]},"whitelistParameters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This block is added to deal with the possibility that a requested filter is not an allowable option on the\n     * database table. If the requested field filter is not a valid field on this table then we completely skip\n     * the query because no results will be expected if the field does not exist. The exception to this is if the field\n     * is part of an OR query then we remove the missing field from the stack but still allow the other fields through.\n     *\n     * @param array      $queryParams\n     * @param Repository $repo\n     *\n     * @return bool|array $cleanParams\n     *\/","attributes":[],"arguments":[{"name":"$queryParams","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$repo","reference":false,"typehint":["Repository"],"value":"","phpdoc":"","attributes":[]}]}}},"FirstQueryHandler":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler to modify query based on activation of 'first' modifier.\n *\n *  eg: 'pages\/first\/3'\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentQueryParser $contentQuery\n     *\n     * @return QueryResultset\n     *\/","attributes":[],"arguments":[{"name":"$contentQuery","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]}}},"SearchQueryHandler":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler class to perform search query and then weight the fetched result set.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var SearchWeighter $weighter *\/","attributes":[],"arguments":[{"name":"$contentQuery","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]}}},"LatestQueryHandler":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler to modify query based on activation of 'latest' modifier.\n *\n *  eg: 'pages\/latest\/10'\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentQueryParser $contentQuery\n     *\n     * @return QueryResultset\n     *\/","attributes":[],"arguments":[{"name":"$contentQuery","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]}}},"IdentifiedSelectHandler":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler to fetch a single record if an identifier is set in the query.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentQueryParser $contentQuery\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$contentQuery","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]}}},"NativeSearchHandler":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handler class to perform a native search where the db adapter supports full-text\n * language searching, thus avoiding the need to weight the results in PHP code.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentQueryParser $contentQuery\n     *\n     * @return SearchQueryResultset\n     *\/","attributes":[],"arguments":[{"name":"$contentQuery","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]},"postgresSearch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentQueryParser $contentQuery\n     *\n     * @return SearchQueryResultset\n     *\/","attributes":[],"arguments":[{"name":"$contentQuery","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]}}},"RandomQueryHandler":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler for queries requested with the random modifier.\n *\n *  eg: 'pages\/random\/10'\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param ContentQueryParser $contentQuery\n     *\n     * @return QueryResultset\n     *\/","attributes":[],"arguments":[{"name":"$contentQuery","reference":false,"typehint":["ContentQueryParser"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Query\\Adapter\\":{"classes":{"PostgresSearch":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Handler to build a fulltext search query for Postgres.\n *\/","attributes":[],"php":false,"properties":{"$qb":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$searchWords":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$contentType":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$qb","reference":false,"typehint":["QueryBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["SearchConfig"],"value":"","phpdoc":"","attributes":[]},{"name":"$searchWords","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"setContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getWeight":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$score","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Query\\Directive\\":{"classes":{"GetQueryDirective":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Directive that allows running of a callback on query.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryInterface $query\n     * @param callable       $callback\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$callback","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]}}},"PagingDirective":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Directive to add a limit modifier to the query.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryInterface $query\n     * @param int            $limit\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$limit","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"HydrateDirective":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Directive to add a limit modifier to the query.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryInterface $query\n     * @param int            $limit\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$limit","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ReturnSingleDirective":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Directive to specify that a single object, rather than an array should be returned.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryInterface $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"PrintQueryDirective":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Directive a raw output of the generated query.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryInterface $query\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"OrderDirective":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Directive to alter query based on 'order' parameter.\n *\n *  eg: 'pages', ['order'=>'-datepublish']\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryInterface $query\n     * @param string         $order\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$order","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getOrderBys":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param $order\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$order","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isMultiOrderQuery":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param $order\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$order","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"LimitDirective":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Directive to add a limit modifier to the query.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param QueryInterface $query\n     * @param int            $limit\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["QueryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$limit","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"OffsetDirective":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n *  Directive to add a limit modifier to the query.\n *\/","attributes":[],"php":false,"methods":{"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param SelectQuery $query\n     * @param $page\n     * @param $otherDirectives\n     *\/","attributes":[],"arguments":[{"name":"$query","reference":false,"typehint":["SelectQuery"],"value":"","phpdoc":"","attributes":[]},{"name":"$page","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$otherDirectives","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Storage\\Migration\\":{"classes":{"Import":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Database records import class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Bob den Otter <bob@twokings.nl>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$query":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Query *\/","attributes":[]},"$contentTypes":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Bag *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManager $em\n     * @param Query         $query\n     * @param Bag           $contentTypes\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":["Query"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypes","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Bag        $importData\n     * @param MutableBag $responseBag\n     * @param bool       $overwrite\n     * @param Bag        $importUsers\n     *\n     * @throws \\Bolt\\Exception\\InvalidRepositoryException\n     *\n     * @return MutableBag\n     *\/","attributes":[],"arguments":[{"name":"$importData","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]},{"name":"$responseBag","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]},{"name":"$overwrite","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$importUsers","reference":false,"typehint":["Bag"],"value":"null","phpdoc":"","attributes":[]}]},"importUsers":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Bag        $importUsers\n     * @param MutableBag $responseBag\n     *\n     * @throws \\Bolt\\Exception\\InvalidRepositoryException\n     *\/","attributes":[],"arguments":[{"name":"$importUsers","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]},{"name":"$responseBag","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"importContentType":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform an import for records under a single ContentType key.\n     *\n     * @param string     $contentTypeName\n     * @param Bag        $importData\n     * @param MutableBag $relationQueue\n     * @param MutableBag $responseBag\n     * @param bool       $overwrite\n     *\n     * @throws \\Bolt\\Exception\\InvalidRepositoryException\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$importData","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]},{"name":"$relationQueue","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]},{"name":"$responseBag","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]},{"name":"$overwrite","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addTaxonomy":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Content $entity\n     * @param Bag     $taxonomyFields\n     * @param Bag     $importDatum\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomyFields","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]},{"name":"$importDatum","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"addRelations":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Queue an entities relations for later processing.\n     *\n     * @param Repository $repo\n     * @param MutableBag $relationQueue\n     * @param Bag        $importDatum\n     * @param MutableBag $relationFields\n     *\/","attributes":[],"arguments":[{"name":"$repo","reference":false,"typehint":["Repository"],"value":"","phpdoc":"","attributes":[]},{"name":"$relationQueue","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]},{"name":"$importDatum","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]},{"name":"$relationFields","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"processRelationQueue":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Collection\\Relations $related *\/","attributes":[],"arguments":[{"name":"$relationQueue","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"validateContentTypes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check that the import file's ContentTypes exists.\n     *\n     * @param Bag $importData\n     *\n     * @throws RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$importData","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]}}},"Export":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Database records export class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Bob den Otter <bob@twokings.nl>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$query":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Query *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManager $em\n     * @param Query         $query\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$query","reference":false,"typehint":["Query"],"value":"","phpdoc":"","attributes":[]}]},"run":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run the export process and return the data.\n     *\n     * @param array      $exportContentTypes\n     * @param MutableBag $responseBag\n     * @param bool       $includeUsers\n     *\n     * @throws \\Bolt\\Exception\\InvalidRepositoryException\n     *\n     * @return MutableBag\n     *\/","attributes":[],"arguments":[{"name":"$exportContentTypes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$responseBag","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]},{"name":"$includeUsers","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"addExportMeta":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add the export meta information.\n     *\n     * @param MutableBag $exportData\n     *\/","attributes":[],"arguments":[{"name":"$exportData","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"addExportUsers":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add the user table to the export.\n     *\n     * @param MutableBag $exportData\n     *\n     * @throws \\Bolt\\Exception\\InvalidRepositoryException\n     *\/","attributes":[],"arguments":[{"name":"$exportData","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"getRecords":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the records for a given ContentType.\n     *\n     * @param string     $contentTypeName\n     * @param MutableBag $exportData\n     * @param MutableBag $responseBag\n     *\n     * @throws \\Bolt\\Exception\\InvalidRepositoryException\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$exportData","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]},{"name":"$responseBag","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"addRecord":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity $val *\/","attributes":[],"arguments":[{"name":"$contentTypeBag","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]},{"name":"$metadata","reference":false,"typehint":["ClassMetadata"],"value":"","phpdoc":"","attributes":[]},{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Controller\\":{"classes":{"ConfigurableBase":{"abstract":true,"final":false,"extends":"\\bolt\\controller\\base","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Add routes from the configuration file.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$callbackResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var CallbackResolver $callbackResolver *\/","attributes":[]}},"methods":{"connect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"before":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"after":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"getConfigurationRoutes":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return routes (as arrays) that will be converted to route objects.\n     *\n     * @return array\n     *\/","attributes":[]},"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"addRoute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$ctr","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"resolveBefore":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a closure that will resolve the middleware callback\n     * to call on kernel request and call it.\n     *\n     * @param array|string|null $before\n     *\n     * @return \\Closure\n     *\/","attributes":[],"arguments":[{"name":"$before","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"resolveAfter":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a closure that will resolve the middleware callback\n     * to call on kernel response and call it.\n     *\n     * @param array|string|null $after\n     *\n     * @return \\Closure\n     *\/","attributes":[],"arguments":[{"name":"$after","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"resolveMiddleware":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a closure that will resolve the class to use\n     * in middleware callback if one isn't specified.\n     *\n     * @param array|string|null $callback\n     *\n     * @return \\Closure Invoke to get middleware callback\n     *\/","attributes":[],"arguments":[{"name":"$callback","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Routing":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\requirement","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @deprecated Deprecated since 3.0, to be removed in 4.0. Use {@see Bolt\\Controller\\Requirement} instead.\n *\/","attributes":[],"php":false,"methods":{"getAnyContentTypeRequirement":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use {@see Bolt\\Controller\\Requirement::anyContentType} instead.\n     *\/","attributes":[]},"getPluralContentTypeRequirement":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use {@see Bolt\\Controller\\Requirement::pluralContentTypes} instead.\n     *\/","attributes":[]},"getAnyTaxonomyTypeRequirement":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use {@see Bolt\\Controller\\Requirement::anyTaxonomyType} instead.\n     *\/","attributes":[]},"getPluralTaxonomyTypeRequirement":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use {@see Bolt\\Controller\\Requirement::pluralTaxonomyTypes} instead.\n     *\/","attributes":[]},"getTaxonomyRequirement":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use {@see Bolt\\Controller\\Requirement::singleTaxonomy} instead.\n     *\n     * @param string $taxonomyName\n     * @param string $emptyValue\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$taxonomyName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$emptyValue","reference":false,"typehint":[""],"value":"'none'","phpdoc":"","attributes":[]}]},"deprecationWarn":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $old Old function name\n     * @param string $new New function name\n     *\n     * @internal\n     *\/","attributes":[],"arguments":[{"name":"$old","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$new","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Base":{"abstract":true,"final":false,"extends":"","implements":["\\silex\\controllerproviderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base class for all controllers which mainly provides shortcut methods for\n * application services.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]}},"methods":{"connect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"addRoutes":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"abort":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shortcut to abort the current request by sending a proper HTTP error.\n     *\n     * @param int    $statusCode The HTTP status code\n     * @param string $message    The status message\n     * @param array  $headers    An array of HTTP headers\n     *\n     * @throws HttpExceptionInterface\n     *\/","attributes":[],"arguments":[{"name":"$statusCode","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"render":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Renders a template.\n     *\n     * @param string|string[] $template Template name(s)\n     * @param array           $context  Context variables\n     * @param array           $globals  Global variables\n     *\n     * @return TemplateResponse|TemplateView\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$globals","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addResolvedRoute":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated since 3.4 to be removed in 4.0 *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"json":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert some data into a JSON response.\n     *\n     * @param mixed $data    The response data\n     * @param int   $status  The response status code\n     * @param array $headers An array of response headers\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$headers","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"createForm":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Creates and returns a Form instance from the type of the form.\n     *\n     * @param string|FormTypeInterface $type    The built type of the form\n     * @param mixed                    $data    The initial data for the form\n     * @param array                    $options Options for the form\n     *\n     * @return Form\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"FormType::class","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"createFormBuilder":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a form builder.\n     *\n     * @param string|FormTypeInterface $type    The type of the form\n     * @param mixed                    $data    The initial data\n     * @param array                    $options The options\n     *\n     * @return FormBuilderInterface The form builder\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"FormType::class","phpdoc":"","attributes":[]},{"name":"$data","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"generateUrl":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var UrlGeneratorInterface $generator *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$referenceType","reference":false,"typehint":[""],"value":"UrlGeneratorInterface::ABSOLUTE_PATH","phpdoc":"","attributes":[]}]},"redirect":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Redirects the user to another URL.\n     *\n     * @param string $url    The URL to redirect to\n     * @param int    $status The status code (302 by default)\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":302,"phpdoc":"","attributes":[]}]},"redirectToRoute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a RedirectResponse to the given route with the given parameters.\n     *\n     * @param string $route      The name of the route\n     * @param array  $parameters An array of parameters\n     * @param int    $status     The status code to use for the Response\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$route","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$status","reference":false,"typehint":[""],"value":302,"phpdoc":"","attributes":[]}]},"storage":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the Entity Manager.\n     *\n     * @return \\Bolt\\Storage\\EntityManager|\\Bolt\\Legacy\\Storage\n     *\/","attributes":[]},"session":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the session.\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Session\\Session\n     *\/","attributes":[]},"flashes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the flash logger.\n     *\n     * @return \\Bolt\\Logger\\FlashLoggerInterface\n     *\/","attributes":[]},"accessControl":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the Authentication object.\n     *\n     * @return \\Bolt\\AccessControl\\AccessChecker\n     *\/","attributes":[]},"validateCsrfToken":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Validates CSRF token and throws HttpException if not.\n     *\n     * @param string|null $value the token value or null to use \"bolt_csrf_token\" parameter from request\n     * @param string      $id    the token ID\n     *\n     * @throws HttpExceptionInterface\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"'bolt'","phpdoc":"","attributes":[]}]},"isCsrfTokenValid":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if csrf token is valid.\n     *\n     * @param string|null $value the token value or null to use \"bolt_csrf_token\" parameter from request\n     * @param string      $id    the token ID\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"'bolt'","phpdoc":"","attributes":[]}]},"extensions":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the \\Bolt\\Extensions object.\n     *\n     * @return \\Bolt\\Extension\\Manager\n     *\/","attributes":[]},"filesystem":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the Bolt\\Filesystem\\Manager object.\n     *\n     * @return \\Bolt\\Filesystem\\Manager\n     *\/","attributes":[]},"users":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the Users object.\n     *\n     * @return \\Bolt\\Users\n     *\/","attributes":[]},"hasUsers":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check to see if the user table exists and has records.\n     *\n     * @return bool\n     *\/","attributes":[]},"getUser":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return current user or user by ID.\n     *\n     * @param int|string|null $userId\n     *\n     * @return Entity\\Users|false\n     *\/","attributes":[],"arguments":[{"name":"$userId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"isAllowed":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Token $sessionAuth *\/","attributes":[],"arguments":[{"name":"$what","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getRepository":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a repository.\n     *\n     * @param string $repository\n     *\n     * @return \\Bolt\\Storage\\Repository\n     *\/","attributes":[],"arguments":[{"name":"$repository","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shortcut for {@see \\Bolt\\Legacy\\Storage::getContent()}.\n     *\n     * @param string $textQuery\n     * @param array  $parameters\n     * @param array  $pager\n     * @param array  $whereParameters\n     *\n     * @return \\Bolt\\Legacy\\Content|\\Bolt\\Legacy\\Content[]\n     *\n     * @see \\Bolt\\Legacy\\Storage::getContent()\n     *\/","attributes":[],"arguments":[{"name":"$textQuery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$pager","reference":true,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$whereParameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getContentType":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the contenttype as an array, based on the given slug.\n     *\n     * @param string $slug\n     *\n     * @return bool|array\n     *\/","attributes":[],"arguments":[{"name":"$slug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getContentTypeUserPermissions":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper to get a user's permissions for a ContentType.\n     *\n     * @param string             $contentTypeSlug\n     * @param array|Entity\\Users $user\n     *\n     * @return bool[]\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeSlug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getOption":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shortcut for {@see \\Bolt\\Config::get}.\n     *\n     * @param string $path\n     * @param mixed  $default\n     *\n     * @return string|int|array|null\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getRefererQueryParameters":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of query parameters used in the request.\n     *\n     * @param Request $request\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"templateChooser":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the Bolt\\TemplateChooser provider.\n     *\n     * @return \\Bolt\\TemplateChooser\n     *\/","attributes":[]},"createQueryBuilder":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a new Query Builder.\n     *\n     * @return \\Doctrine\\DBAL\\Query\\QueryBuilder\n     *\/","attributes":[]},"resources":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Configuration\\ResourceManager\n     *\/","attributes":[]}}},"Zone":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Zone constants class to define which part of the Bolt site that a request is\n * relative to.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"ASYNC":{"value":"'async'","visibility":"","phpdoc":"","attributes":[]},"BACKEND":{"value":"'backend'","visibility":"","phpdoc":"","attributes":[]},"FRONTEND":{"value":"'frontend'","visibility":"","phpdoc":"","attributes":[]},"KEY":{"value":"'zone'","visibility":"","phpdoc":"","attributes":[]}},"methods":{"isFrontend":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if request is for frontend routes.\n     *\n     * @param Request $request\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"isBackend":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if request is for backend routes.\n     *\n     * @param Request $request\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"isAsync":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if request is for asynchronous\/AJAX routes.\n     *\n     * @param Request $request\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"is":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if request is for a specific zone.\n     *\n     * @param Request $request\n     * @param string  $value\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the current zone.\n     *\n     * @param Request $request\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"set":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the current zone.\n     *\n     * @param Request $request\n     * @param string  $value\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Frontend":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\configurablebase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Standard Frontend actions.\n *\n * This file acts as a grouping for the default front-end controllers.\n *\n * For overriding the default behavior here, please reference\n * https:\/\/docs.bolt.cm\/templating\/templates-routes#routing or the routing.yml\n * file in your configuration.\n *\/","attributes":[],"php":false,"methods":{"getConfigurationRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"before":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The default before filter for the controllers in this file.\n     *\n     * Refer to the routing.yml config file for overridding.\n     *\n     * @param Request $request The Symfony Request\n     *\n     * @return null|TemplateResponse|RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"after":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"homepage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Controller for the \"Homepage\" route. Usually the front page of the website.\n     *\n     * @param Request $request\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"record":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Controller for a single record page, like '\/page\/about\/' or '\/entry\/lorum'.\n     *\n     * @param Request $request         The request\n     * @param string  $contenttypeslug The content type slug\n     * @param string  $slug            The content slug\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$slug","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"preview":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The controller for previewing a content from posted data.\n     *\n     * @param Request $request         The Symfony Request\n     * @param string  $contenttypeslug The content type slug\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"listing":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The listing page controller.\n     *\n     * @param Request $request         The Symfony Request\n     * @param string  $contenttypeslug The content type slug\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"taxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The taxonomy listing page controller.\n     *\n     * @param Request $request      The Symfony Request\n     * @param string  $taxonomytype The taxonomy type slug\n     * @param string  $slug         The taxonomy slug\n     *\n     * @return TemplateResponse|false\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomytype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$slug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isTaxonomyValid":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the taxonomy is valid.\n     *\n     * @see https:\/\/github.com\/bolt\/bolt\/pull\/2310\n     *\n     * @param array|false $content\n     * @param string      $slug\n     * @param array       $taxonomy\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$slug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomy","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"search":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The search result page controller.\n     *\n     * @param Request $request      The Symfony Request\n     * @param array   $contenttypes The content type slug(s) you want to search for\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypes","reference":false,"typehint":["array"],"value":"null","phpdoc":"","attributes":[]}]},"template":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Renders the specified template from the current theme in response to a request without\n     * loading any content.\n     *\n     * @param string $template The template name\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getListingParameters":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns an array of the parameters used in getContent for listing pages.\n     *\n     * @param string $contentTypeSlug The content type slug\n     * @param bool   $allowViewless   Allow viewless contenttype\n     *\n     * @return array Parameters to use in getContent\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeSlug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$allowViewless","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getListingOrder":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the listing order.\n     *\n     * If the ContentType's sort is false (default in Config::parseContentType),\n     * either:\n     *  - we let `getContent()` sort by itself\n     *  - we explicitly set it to sort on the general\/listing_sort setting\n     *\n     * @param array $contentType\n     *\n     * @return null|string\n     *\/","attributes":[],"arguments":[{"name":"$contentType","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"Requirement":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Defines route requirements from content types \/ taxonomy configurations.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config $config *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Requirement constructor.\n     *\n     * @param Config $config\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"anyContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return plural and singular content type slugs.\n     *\n     * @return string\n     *\/","attributes":[]},"pluralContentTypes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return only plural content type slugs.\n     *\n     * @return string\n     *\/","attributes":[]},"anyTaxonomyType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return plural and singular taxonomy type slugs.\n     *\n     * @return string\n     *\/","attributes":[]},"pluralTaxonomyTypes":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return only plural taxonomy type slugs.\n     *\n     * @return string\n     *\/","attributes":[]},"singleTaxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return slugs of existing taxonomy values.\n     *\n     * @param string $taxonomyName\n     * @param string $emptyValue\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$taxonomyName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$emptyValue","reference":false,"typehint":[""],"value":"'none'","phpdoc":"","attributes":[]}]},"configAssert":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets slugs from config imploded for regex.\n     *\n     * @param string $key      contenttypes or taxonomy\n     * @param bool   $singular Include singular slugs\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$singular","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Controller\\Async\\":{"classes":{"AsyncBase":{"abstract":true,"final":false,"extends":"\\bolt\\controller\\base","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base class for all async controllers.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"connect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"before":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Middleware function to do some tasks that should be done for all\n     * asynchronous requests.\n     *\n     * @param Request $request\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]}}},"Records":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\async\\asyncbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Async controller for record manipulation routes.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"action":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform an action on a ContentType record.\n     *\n     * The action part of the POST request should take the form:\n     * [\n     *     contenttype => [\n     *         id => [\n     *             action => [field => value]\n     *         ]\n     *     ]\n     * ]\n     *\n     * For example:\n     * [\n     *     'pages'   => [\n     *         3 => ['modify' => ['status' => 'held']],\n     *         5 => null,\n     *         4 => ['modify' => ['status' => 'draft']],\n     *         1 => ['delete' => null],\n     *         2 => ['modify' => ['status' => 'published']],\n     *     ],\n     *     'entries' => [\n     *         4 => ['modify' => ['status' => 'published']],\n     *         1 => null,\n     *         5 => ['delete' => null],\n     *         2 => null,\n     *         3 => ['modify' => ['title' => 'Drop Bear Attacks']],\n     *     ]\n     * ]\n     *\n     * @param Request $request Symfony Request\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]}}},"Embed":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\async\\asyncbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Async controller for embed routes.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"embed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Request $request\n     *\n     * @throws InvalidUrlException\n     *\n     * @return JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]}}},"Stack":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\async\\asyncbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Async controller for Stack async routes.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var FileInterface|null $removed *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"show":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render a user's current stack.\n     *\n     * @param Request $request\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]}}},"FilesystemManager":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\async\\asyncbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Async controller for filesystem management async routes.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$ctr","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"browse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * List browse on the server, so we can insert them in the file input.\n     *\n     * @param Request $request\n     * @param string  $namespace\n     * @param string  $path\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"createFolder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a new folder.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"createFile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create an empty file.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"deleteFile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Delete a file on the server.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"duplicateFile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Duplicate a file on the server.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"filesAutoComplete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Filesystem\\Handler\\File $file *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"recordBrowser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * List records to easily insert links through the WYSIWYG editor.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[]},"removeFolder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Delete a folder recursively if writeable.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"renameFile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Rename a file within the files directory tree.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"renameFolder":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Rename a folder within the files directory tree.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"isMatchingExtension":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check that file extensions are not being changed.\n     *\n     * @param string $oldName\n     * @param string $newName\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$oldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$newName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"logException":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Log an exception to the system log.\n     *\n     * @param string     $message   A formatted error message\n     * @param \\Exception $exception The exception that has been thrown\n     *\n     * @return bool Whether the record has been processed\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$exception","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"General":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\async\\asyncbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Async controller for general async routes.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"async":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Default route binder for asynchronous requests.\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[]},"changeLogRecord":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate the change log box for a single record in edit.\n     *\n     * @param string $contenttype\n     * @param int    $contentid\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"dashboardNews":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * News. Film at 11.\n     *\n     * @param Request $request\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"lastModified":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Latest {contenttype} to show a small listing in the sidebars.\n     *\n     * @param string   $contenttypeslug\n     * @param int|null $contentid\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"latestActivity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the 'latest activity' for the dashboard.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[]},"makeUri":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate a URI based on request parameters.\n     *\n     * @param Request $request\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"omnisearch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform an OmniSearch search and return the results.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"popularTags":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch a JSON encoded set of the most popular taxonomy specific tags.\n     *\n     * @param Request $request\n     * @param string  $taxonomytype\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$taxonomytype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"readme":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render an extension's README.md file.\n     *\n     * @param ExtensionInterface $extension\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$extension","reference":false,"typehint":["ExtensionInterface"],"value":"","phpdoc":"","attributes":[]}]},"tags":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch a JSON encoded set of taxonomy specific tags.\n     *\n     * @param string $taxonomytype\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$taxonomytype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getNews":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the news from Bolt HQ (with caching).\n     *\n     * @param string $hostname\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$hostname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fetchNews":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the news from Bolt HQ.\n     *\n     * @param string $hostname\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$hostname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fetchNewsOptions":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the guzzle options.\n     *\n     * @param string $hostname\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$hostname","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLastmodifiedByContentLog":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get last modified records from the content log.\n     *\n     * @param string $contenttypeslug\n     * @param int    $contentid\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLastmodifiedSimple":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Only get latest {contenttype} record edits based on date changed.\n     *\n     * @param string $contenttypeslug\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Widget":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\async\\asyncbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Async controller for widget async routes.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"before":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Override of async request before method.\n     *\n     * NOTE: Routes on this controller *MUST* check their own authentication\n     * where it is applicable.\n     *\n     * @param Request $request\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"widget":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render a widget, and return the HTML, so it can be inserted in the page.\n     *\n     * @param Request $request\n     * @param string  $key\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"SystemChecks":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\async\\asyncbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Async controller for system testing async routes.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"directoriesCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check the needed directories are writeable.\n     *\n     * @param Request $request\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"emailCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Send an e-mail ping test.\n     *\n     * @param Request $request\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"extensionsCheck":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check the installation of PHP extensions.\n     *\n     * @param Request $request\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"getCheck":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for the check class.\n     *\n     * @param string $check\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return \\Bolt\\Configuration\\Check\\ConfigurationCheckInterface\n     *\/","attributes":[],"arguments":[{"name":"$check","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Controller\\Backend\\":{"classes":{"Authentication":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Backend controller for authentication routes.\n *\n * @author Carson Full <carsonfull@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"getLogin":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Form $form *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"postLogin":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle a login attempt.\n     *\n     * @param Request $request The Symfony Request\n     *\n     * @return Response|RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"logout":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Token $sessionAuth *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"resetPassword":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Reset the password. This route is normally only reached when the user\n     * clicks a \"password reset\" link in the email.\n     *\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"handlePostLogin":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle a login POST.\n     *\n     * @param Request       $request\n     * @param FormInterface $form\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$form","reference":false,"typehint":["FormInterface"],"value":"","phpdoc":"","attributes":[]}]},"handlePostReset":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle a password reset POST.\n     *\n     * @param Request       $request\n     * @param FormInterface $form\n     *\n     * @return RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$form","reference":false,"typehint":["FormInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"Records":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Backend controller for record manipulation routes.\n *\n * Prior to v3.0 this functionality primarily existed in the monolithic\n * Bolt\\Controllers\\Backend class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"edit":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Form $form *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getReturnTo":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Calculate the parameter used to determine response.\n     *\n     * @internal to be removed when forms cut-over is complete\n     *\n     * @param Request $request\n     * @param Button  $button\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$button","reference":false,"typehint":["Button"],"value":"","phpdoc":"","attributes":[]}]},"overview":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Content type overview page.\n     *\n     * @param Request $request         The Symfony Request\n     * @param string  $contenttypeslug The content type slug\n     *\n     * @return \\Bolt\\Response\\TemplateResponse|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkEditAccess":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check that the user is allowed to edit the record.\n     *\n     * @param string $contenttypeslug\n     * @param int    $id\n     *\n     * @return bool|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$contenttypeslug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getEditReferrer":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the editreferrer in twig if it was not set yet.\n     *\n     * @param Request $request\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"recordEdit":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Storage\\ContentRequest\\Edit\n     *\/","attributes":[]},"recordListing":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Storage\\ContentRequest\\Listing\n     *\/","attributes":[]},"recordSave":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Storage\\ContentRequest\\Save\n     *\/","attributes":[]}}},"Database":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Backend controller for database manipulation routes.\n *\n * Prior to v3.0 this functionality primarily existed in the monolithic\n * Bolt\\Controllers\\Backend class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"check":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var $response \\Bolt\\Storage\\Database\\Schema\\SchemaCheck *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check the database, create tables, add missing\/new columns to tables.\n     *\n     * @param Request $request The Symfony Request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"updateResult":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Show the result of database updates.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[]},"schemaManager":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Storage\\Database\\Schema\\Manager\n     *\/","attributes":[]}}},"Extend":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$readWriteMode":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns routes to connect to the application.\n     *\n     * @param \\Silex\\ControllerCollection $c\n     *\/","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"before":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Middleware function to check whether a user is logged on.\n     *\n     * @param Request     $request\n     * @param Application $app\n     * @param string      $roleRoute\n     *\n     * @return null|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$roleRoute","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"check":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check a package.\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[]},"dependsPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find \"depends\" package dependencies.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"dumpAutoload":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dumps the autoloader.\n     *\n     * @throws PackageManagerException\n     *\n     * @return Response\n     *\/","attributes":[]},"generateTheme":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate a copy of a theme package.\n     *\n     * @param Request $request\n     *\n     * @throws PackageManagerException\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"install":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Install a package.\n     *\n     * Equivalent to `composer require author\/package`\n     *\n     * @param Request $request\n     *\n     * @throws PackageManagerException\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"installAll":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Install all packages that are in the composer.json but not in vendor.\n     *\n     * Equivalent to `composer install`\n     *\n     * @throws PackageManagerException\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\/","attributes":[]},"installed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a list of all installed packages.\n     *\n     * Partially equivalent to `composer show -i`\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[]},"installInfo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Request $request\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"installPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Package install chooser modal.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse|\\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[]},"overview":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The main 'Extensions' page.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse|\\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[]},"packageInfo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var PackageInterface $package *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"prohibitsPackage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find \"prohibits\" dependencies.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"update":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update a package(s).\n     *\n     * @param Request $request\n     *\n     * @throws PackageManagerException\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"uninstall":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Uninstall a package.\n     *\n     * @param Request $request\n     *\n     * @throws PackageManagerException\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"getRenderContext":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get render parameters for Twig.\n     *\n     * @return array\n     *\/","attributes":[]},"manager":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Composer\\PackageManager\n     *\/","attributes":[]},"getJsonException":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an exception formatted as JSON.\n     *\n     * @param \\Exception $e\n     *\n     * @return JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$e","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]}}},"BackendBase":{"abstract":true,"final":false,"extends":"\\bolt\\controller\\base","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base class for all backend controllers.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"connect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"render":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$globals","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"before":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Middleware function to check whether a user is logged on.\n     *\n     * @param Request     $request   The Symfony Request\n     * @param Application $app       The application\/container\n     * @param string      $roleRoute An overriding value for the route name in permission checks\n     *\n     * @return null|\\Symfony\\Component\\HttpFoundation\\RedirectResponse|\\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$roleRoute","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getContent":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Temporary override for back-end.\n     *\n     * @internal For core use only, to be removed soon!\n     *\n     * @param string $textQuery\n     * @param array  $parameters\n     * @param array  $pager\n     * @param array  $whereParameters\n     *\n     * @return QueryResultset\n     *\n     * @see \\Bolt\\Storage\\Query\\Query::getContent()\n     *\/","attributes":[],"arguments":[{"name":"$textQuery","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$pager","reference":true,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$whereParameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getRoutePermission":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Temporary hack to get the permission name associated with the route.\n     *\n     * @internal\n     *\n     * @param string $route\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$route","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setAuthenticationCookie":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the authentication cookie in the response.\n     *\n     * @param Request  $request\n     * @param Response $response\n     * @param string   $token\n     *\n     * @return Response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]},{"name":"$token","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"login":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the Login object.\n     *\n     * @return \\Bolt\\AccessControl\\Login\n     *\/","attributes":[]},"password":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the Password object.\n     *\n     * @return \\Bolt\\AccessControl\\Password\n     *\/","attributes":[]},"checkFirstUser":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var UsersRepository $repo *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$route","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Users":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Backend controller for user maintenance routes.\n *\n * Prior to v3.0 this functionality primarily existed in the monolithic\n * Bolt\\Controllers\\Backend class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"admin":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * All users admin page.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[]},"edit":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Form\\FormType\\UserData $data *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"first":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var RequirementCollection $requirements *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"modify":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform modification actions on users.\n     *\n     * @param string $action The action\n     * @param int    $id     The user ID\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$action","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"profile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Form\\FormType\\UserData $data *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"viewRoles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Route to view the configured user roles.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[]},"getUserEntity":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the user we want to edit, or a new entity object if null.\n     *\n     * @param int $id\n     *\n     * @return Entity\\Users|false\n     *\/","attributes":[],"arguments":[{"name":"$id","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"notifyUserSetupEmail":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Message $message *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$displayName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$email","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Upload":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class to handle file uploads.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n **\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"before":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Request     $request\n     * @param Application $app\n     * @param null        $roleRoute\n     *\n     * @return null|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$roleRoute","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"uploadNamespace":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Route to handle file uploads.\n     *\n     * @param Request $request\n     * @param string  $namespace\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parser":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse a string and determine the upload prefix and namespace.\n     *\n     * @param string $handler\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$handler","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"handleUploadFiles":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Sirius\\Upload\\Result\\Collection $result *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$files","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getFilesToProcess":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine the list of files to upload.\n     *\n     * @param Request $request\n     * @param string  $namespace\n     * @param string  $files\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$files","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"processCustomUploadHandler":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This handles the more advanced functionality where multiple upload handlers\n     * are provided. Only the first one is returned as a result, the result\n     * of this first upload is then attempted to copy to the remaining handlers.\n     *\n     * @param Request $request\n     * @param array   $handler\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$handler","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"FileManager":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Backend controller for file\/directory management routes.\n *\n * Prior to v3.0 this functionality primarily existed in the monolithic\n * Bolt\\Controllers\\Backend class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"edit":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Form $form *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$file","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"manage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The file management browser.\n     *\n     * @param Request $request   The Symfony Request\n     * @param string  $namespace The filesystem namespace\n     * @param string  $path      The path prefix\n     *\n     * @return \\Bolt\\Response\\TemplateResponse|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"handleEdit":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle a file edit POST.\n     *\n     * @param FormInterface $form\n     * @param FileInterface $file\n     *\n     * @return JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$form","reference":false,"typehint":["FormInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$file","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]}]},"handleUpload":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var UploadedFile[] $files *\/","attributes":[],"arguments":[{"name":"$form","reference":false,"typehint":["FormInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]}]},"processUpload":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process an individual file upload.\n     *\n     * @param DirectoryInterface $directory\n     * @param string             $filename\n     * @param array              $fileToProcess\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fileToProcess","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getRelatedFiles":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gather related (present) files.\n     *\n     * Matches: foo(_local)?\\.*(.dist)?\n     *\n     * i.e., if we're editing config.yml, we also want to check for\n     * config.yml.dist and config_local.yml\n     *\n     * @param FileInterface $file\n     *\n     * @return FileInterface[]\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]}]},"getCodeMirrorPlugins":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"Log":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Backend controller for logging routes.\n *\n * Prior to v3.0 this functionality primarily existed in the monolithic\n * Bolt\\Controllers\\Backend class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"changeOverview":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Change log overview route.\n     *\n     * @param Request $request\n     *\n     * @return \\Bolt\\Response\\TemplateResponse|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"changeRecord":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Show a single change log entry.\n     *\n     * @param Request $request\n     * @param string  $contenttype ContentType slug\n     * @param int     $contentid   Content record ID\n     * @param int     $id          The change log entry ID\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$id","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"changeRecordListing":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Show a list of changelog entries.\n     *\n     * @param Request $request\n     * @param string  $contenttype ContentType slug\n     * @param int     $contentid   Content record ID\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$contenttype","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentid","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"systemOverview":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * System log overview route.\n     *\n     * @param Request $request\n     *\n     * @return \\Bolt\\Response\\TemplateResponse|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"manager":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return \\Bolt\\Logger\\Manager\n     *\/","attributes":[]},"changeLogRepository":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Repository\\LogChangeRepository|Repository\n     *\/","attributes":[]},"systemLogRepository":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Repository\\LogSystemRepository|Repository\n     *\/","attributes":[]},"getPagination":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Calculate pagination parameters.\n     *\n     * @param int|string|null $page\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$page","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getQueryOptions":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Calculate the query options.\n     *\n     * @param array $pagination\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$pagination","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"General":{"abstract":false,"final":false,"extends":"\\bolt\\controller\\backend\\backendbase","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * General controller for basic backend routes.\n *\n * Prior to v3.0 this functionality primarily existed in the monolithic\n * Bolt\\Controllers\\Backend class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"addRoutes":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$c","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"about":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * About page route.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[]},"checks":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var RequirementCollection $baseReqs *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"clearCache":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clear the cache.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[]},"dashboard":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dashboard or 'root' route.\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[]},"omnisearch":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Show the Omnisearch results.\n     *\n     * @param Request $request The Symfony Request\n     *\n     * @return \\Bolt\\Response\\TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"prefill":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generate Lorem Ipsum records in the database for given ContentTypes.\n     *\n     * @param Request $request The Symfony Request\n     *\n     * @return \\Bolt\\Response\\TemplateResponse|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"translation":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prepare\/edit\/save a translation.\n     *\n     * @param Request $request   The Symfony Request\n     * @param string  $domain    The domain\n     * @param string  $tr_locale The translation locale\n     *\n     * @return \\Bolt\\Response\\TemplateResponse|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$domain","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$tr_locale","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLatest":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the latest records for viewable ContentTypes that a user has access\n     * to.\n     *\n     * When there are no ContentType records we will suggest to create some\n     * dummy content.\n     *\n     * @param int $limit\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$limit","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getTranslationData":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the translation data.\n     *\n     * @param MutableBag $tr\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$tr","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]},"saveTranslationFile":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attempt to save the POST data for a translation file edit.\n     *\n     * @param string     $contents\n     * @param MutableBag $tr\n     *\n     * @return bool|\\Symfony\\Component\\HttpFoundation\\RedirectResponse\n     *\/","attributes":[],"arguments":[{"name":"$contents","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$tr","reference":false,"typehint":["MutableBag"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Menu\\":{"classes":{"Menu":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Menu class.\n *\/","attributes":[],"php":false,"properties":{"$name":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$menu":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$resolved":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name     The name of the menu\n     * @param array  $menu     The items that the menu contains\n     * @param bool   $resolved\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$menu","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$resolved","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The name of the menu.\n     *\n     * @return string\n     *\/","attributes":[]},"getItems":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * The item that the menu contains.\n     *\n     * @return array\n     *\/","attributes":[]},"isResolved":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Has this menu had it's paths resolved to links.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"MenuBuilder":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"menu":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$identifier","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$resolved","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"resolve":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a named menu.\n     *\n     * @param array $menu\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$menu","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"menuBuilder":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Recursively scans the passed array to ensure everything gets the\n     * menuHelper() treatment.\n     *\n     * @param array $menu\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$menu","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"menuHelper":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Updates a menu item to have at least a 'link' key.\n     *\n     * @param array $item\n     *\n     * @return array Keys 'link' and possibly 'label', 'title' and 'path'\n     *\/","attributes":[],"arguments":[{"name":"$item","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"resolveRouteToLink":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Resolve the route to a generated url.\n     *\n     * @param array $item\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$item","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"resolvePathToContent":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine the type of path we have.\n     *\n     * @param array $item\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$item","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"populateItemFromRecord":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Legacy\\Content $content *\/","attributes":[],"arguments":[{"name":"$item","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"MenuEntry":{"abstract":false,"final":false,"extends":"","implements":["\\serializable"],"use":[],"useoptions":[],"phpdoc":"\/**\n * A menu entry item.\n *\n * @internal Do not extend. Backwards compatibility not guaranteed on this class presently.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$parent":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var MenuEntry|null *\/","attributes":[]},"$children":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var MenuEntry[] *\/","attributes":[]},"$name":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$label":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$icon":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$permission":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$group":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$uri":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$routeName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$routeParams":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$routeGenerated":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$urlGenerator":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface *\/","attributes":[]}},"methods":{"createRoot":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create the root menu entry.\n     *\n     * @param UrlGeneratorInterface $urlGenerator\n     * @param string                $basePath\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$basePath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $name\n     * @param string $uri\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$uri","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"create":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $name\n     * @param string $uri\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$uri","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"setRoute":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the uri to be generated with given route name and params.\n     *\n     * @param string $routeName\n     * @param array  $routeParams\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$routeName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$routeParams","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the menu entry's internal name.\n     *\n     * @return string\n     *\/","attributes":[]},"getUri":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the menu entry's URI relative to Bolt admin's.\n     *\n     * @return string\n     *\/","attributes":[]},"getLabel":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the menu entry's label.\n     *\n     * @return string\n     *\/","attributes":[]},"setLabel":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the menu entry's label.\n     *\n     * @param string $label\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$label","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getIcon":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the menu entry's icon.\n     *\n     * @return string\n     *\/","attributes":[]},"setIcon":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the menu entry's icon.\n     *\n     * @param string $icon\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$icon","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPermission":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the menu entry's required view permission.\n     *\n     * @return string\n     *\/","attributes":[]},"setPermission":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the menu entry's required view permission.\n     *\n     * @param string $permission\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$permission","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isGroup":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if menu entry is a group.\n     *\n     * @return bool\n     *\/","attributes":[]},"setGroup":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set if the menu entry is a group.\n     *\n     * @param bool $group\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$group","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"add":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add child menu entry.\n     *\n     * @param MenuEntry $menu\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$menu","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]}]},"get":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a menu entry's named child.\n     *\n     * @param string $name\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"has":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns true if the child is defined.\n     *\n     * @param string $name\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"remove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove a menu entry's named child.\n     *\n     * @param string $name\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"parent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the menu entry's parent.\n     *\n     * @return MenuEntry\n     *\/","attributes":[]},"children":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the menu entry's children.\n     *\n     * @return MenuEntry[]\n     *\/","attributes":[]},"serialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"unserialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$serialized","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Menu\\Builder\\":{"classes":{"AdminMenu":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt admin (back-end) area menu builder.\n *\n * @internal backwards compatibility not guaranteed on this class presently\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"build":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the menus.\n     *\n     * @param MenuEntry $root\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$root","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]}]},"addConfiguration":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Configuration menus.\n     *\n     * @param MenuEntry $root\n     *\/","attributes":[],"arguments":[{"name":"$root","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]}]},"addFileManagement":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * File management menus.\n     *\n     * @param MenuEntry $root\n     *\/","attributes":[],"arguments":[{"name":"$root","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]}]},"addExtend":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Extensions menus.\n     *\n     * @param MenuEntry $root\n     *\/","attributes":[],"arguments":[{"name":"$root","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]}]}}},"AdminContent":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt admin (back-end) content menu builder.\n *\n * @internal backwards compatibility not guaranteed on this class presently\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$contentTypes":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Bag *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Bag $contentTypes\n     *\/","attributes":[],"arguments":[{"name":"$contentTypes","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"build":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Build the \"Content\" menu.\n     *\n     * @param MenuEntry $root\n     *\n     * @return MenuEntry\n     *\/","attributes":[],"arguments":[{"name":"$root","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]}]},"addContentType":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a ContentType's menu and sub-menu.\n     *\n     * @param MenuEntry $contentRoot\n     * @param string    $contentTypeKey\n     * @param Bag       $contentType\n     *\/","attributes":[],"arguments":[{"name":"$contentRoot","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypeKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"addGroupedMenu":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add the \"Other content\" & similar menu\/sub menus.\n     *\n     * @param MenuEntry $contentRoot\n     * @param Bag       $contentType\n     *\/","attributes":[],"arguments":[{"name":"$contentRoot","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"fillGroupedMenus":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fill the \"Other content\" & similar menu\/sub menus with entries.\n     *\n     * @param MenuEntry $contentRoot\n     *\/","attributes":[],"arguments":[{"name":"$contentRoot","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]}]},"addGroupedContentTypes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add a group's children.\n     *\n     * @param MenuEntry $groupEntry\n     * @param array     $contentTypes\n     *\/","attributes":[],"arguments":[{"name":"$groupEntry","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Menu\\Resolver\\":{"classes":{"Access":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Menu access permission resolver.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$permissions":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Permissions *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Permissions $permissions\n     *\/","attributes":[],"arguments":[{"name":"$permissions","reference":false,"typehint":["Permissions"],"value":"","phpdoc":"","attributes":[]}]},"resolve":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Resolve the access permissions on each menu child recursively, and\n     * remove the child if access is not granted. Should a parent have no\n     * remaining children & isn't routed, it should then be removed.\n     *\n     * @param MenuEntry    $menu\n     * @param Entity\\Users $user\n     *\/","attributes":[],"arguments":[{"name":"$menu","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"doResolve":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param MenuEntry    $parent\n     * @param MenuEntry    $child\n     * @param Entity\\Users $user\n     *\/","attributes":[],"arguments":[{"name":"$parent","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$child","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$user","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]}}},"RecentlyEdited":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Recently edited record resolver.\n *\n * @internal backwards compatibility not guaranteed on this class presently\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]},"$markdown":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Parsedown *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManager $em\n     * @param Parsedown     $markdown\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$markdown","reference":false,"typehint":["Parsedown"],"value":"","phpdoc":"","attributes":[]}]},"resolve":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param MenuEntry $menu\n     * @param Bag       $contentTypes\n     *\/","attributes":[],"arguments":[{"name":"$menu","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypes","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"resolveGroupMenu":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param MenuEntry $groupMenu\n     * @param Bag       $contentTypes\n     *\/","attributes":[],"arguments":[{"name":"$groupMenu","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypes","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"addRecentlyEdited":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param MenuEntry $contentMenu\n     * @param string    $contentTypeKey\n     * @param Bag       $contentTypes\n     *\/","attributes":[],"arguments":[{"name":"$contentMenu","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypeKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypes","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"addSingleton":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param MenuEntry $contentMenu\n     * @param string    $contentTypeKey\n     *\/","attributes":[],"arguments":[{"name":"$contentMenu","reference":false,"typehint":["MenuEntry"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentTypeKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRecords":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch recently changed records for a given ContentType.\n     *\n     * @param string $contentTypeKey\n     * @param int    $limit\n     *\n     * @return Entity\\Content[]\n     *\/","attributes":[],"arguments":[{"name":"$contentTypeKey","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$limit","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Request\\":{"traits":{"ProfilerAwareTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Profiler request aware trait.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"isProfilerRequest":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check to see if the request has matched one of the profiler's\n     * routes.\n     *\n     * @param Request $request\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Profiler\\":{"classes":{"BoltDataCollector":{"abstract":false,"final":false,"extends":"\\symfony\\component\\httpkernel\\datacollector\\datacollector","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * BoltDataCollector.\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"collect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Collect the date for the Toolbar item.\n     *\n     * @param Request    $request\n     * @param Response   $response\n     * @param \\Exception $exception\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]},{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"null","phpdoc":"","attributes":[]}]},"getVersion":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for version.\n     *\n     * @return string\n     *\/","attributes":[]},"getBranding":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for branding.\n     *\n     * @return string\n     *\/","attributes":[]},"getPayoff":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for payoff.\n     *\n     * @return string\n     *\/","attributes":[]},"getDashboardlink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for dashboardlink.\n     *\n     * @return string\n     *\/","attributes":[]},"getEditlink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for editlink.\n     *\n     * @return string\n     *\/","attributes":[]},"getEdittitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for edittitle.\n     *\n     * @return string\n     *\/","attributes":[]}}},"DebugToolbarEnabler":{"abstract":false,"final":false,"extends":"","implements":["\\silex\\serviceproviderinterface","\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Enables debug toolbar if applicable.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$listener":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var WebDebugToolbarListener *\/","attributes":[]},"$dispatcher":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EventDispatcherInterface *\/","attributes":[]},"$debugLoggedOff":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"onRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Enable toolbar if logged in or debug mode is enabled.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"register":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"boot":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"DatabaseDataCollector":{"abstract":false,"final":false,"extends":"\\symfony\\component\\httpkernel\\datacollector\\datacollector","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * DatabaseDataCollector.\n *\n * @author Christophe Coevoet <stof@notk.org>\n *\/","attributes":[],"php":false,"properties":{"$logger":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$logger","reference":false,"typehint":["DebugStack"],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"collect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]},{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"null","phpdoc":"","attributes":[]}]},"getQueryCount":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getQueries":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getTime":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"trim":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$queries","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Routing\\":{"classes":{"RootControllerCollection":{"abstract":false,"final":false,"extends":"\\bolt\\routing\\controllercollection","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This is the root controller collection.\n *\n * When $app->flush() is called, the controller mount event is dispatched.\n *\n * This allows the controllers to be built up right before they are needed.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]},"$dispatcher":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EventDispatcherInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application              $app\n     * @param EventDispatcherInterface $dispatcher\n     * @param Route                    $defaultRoute\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$dispatcher","reference":false,"typehint":["EventDispatcherInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$defaultRoute","reference":false,"typehint":["Route"],"value":"","phpdoc":"","attributes":[]}]},"flush":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]}}},"UrlGeneratorFragmentWrapper":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\routing\\generator\\configurablerequirementsinterface","\\symfony\\component\\routing\\generator\\urlgeneratorinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Wraps a UrlGenerator to allow urls to be generated with a fragment.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$wrapped":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * UrlGeneratorFragmentWrapper constructor.\n     *\n     * @param UrlGeneratorInterface $wrapped\n     *\/","attributes":[],"arguments":[{"name":"$wrapped","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]}]},"generate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\n     * A key, \"fragment\", can be passed into $parameters whose value will appended to generated url after a \"#\"\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$referenceType","reference":false,"typehint":[""],"value":"UrlGeneratorInterface::ABSOLUTE_PATH","phpdoc":"","attributes":[]}]},"setContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":["RequestContext"],"value":"","phpdoc":"","attributes":[]}]},"getContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setStrictRequirements":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$enabled","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isStrictRequirements":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"UrlMatcher":{"abstract":false,"final":false,"extends":"\\silex\\redirectableurlmatcher","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * If Silex\\RedirectableUrlMatcher does not match a route,\n * it checks for a route with a trailing slash and redirects to it.\n *\n * This additionally checks for a route without a trailing slash and redirects\n * to it.\n *\/","attributes":[],"php":false,"methods":{"match":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$pathinfo","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Canonical":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class has two purposes.\n * - Provide a getter (and override setter) to get the canonical url for the current request.\n * - Update the RequestContext with the scheme\/host override from the config.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$urlGenerator":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface *\/","attributes":[]},"$globalOverride":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var UriInterface|null An optional scheme\/host override. *\/","attributes":[]},"$forceSsl":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$override":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var UriInterface|null An optional override for current request to use instead of the UrlGenerator *\/","attributes":[]},"$request":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Request|null The current request. *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param UrlGeneratorInterface    $urlGenerator   the url generator\n     * @param bool                     $forceSsl       whether to force SSL on relative override urls (generated urls get this applied elsewhere)\n     * @param UriInterface|string|null $globalOverride an optional scheme and\/or host override to apply to all urls\n     *\/","attributes":[],"arguments":[{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$forceSsl","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$globalOverride","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"setUrlGenerator":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param UrlGeneratorInterface $urlGenerator\n     *\/","attributes":[],"arguments":[{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]}]},"setGlobalOverride":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This overrides the scheme and host for all urls generated including the canonical one.\n     *\n     * @param UriInterface|string|null $uri\n     *\/","attributes":[],"arguments":[{"name":"$uri","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setOverride":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This overrides the the canonical url. It will be resolved against the current request.\n     *\n     * Note: This only applies to the current request, so it will need to be called again for the next one.\n     *\n     * @param UriInterface|string|null $uri\n     *\/","attributes":[],"arguments":[{"name":"$uri","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUrl":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the canonical url for the current request,\n     * or null if called outside of the request cycle.\n     *\n     * @return string|null\n     *\/","attributes":[]},"onRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Stores the current request and applies the global override.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"onFinishRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clear the current request and override.\n     *\n     * @param FinishRequestEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["FinishRequestEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setRequest":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the current request and reset the current override.\n     *\n     * @param Request|null $request\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"null","phpdoc":"","attributes":[]}]},"applyGlobalOverride":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the scheme and host overrides (if any) on the UrlGenerator's RequestContext.\n     *\n     * This needs to happen after RouterListener as that sets the scheme\n     * and host from the request. To override we need to be after that.\n     *\/","attributes":[]},"resolveCurrentOverride":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If there is a current override, resolve it to an absolute url based on current request.\n     *\/","attributes":[]}}},"LazyUrlGenerator":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\routing\\generator\\urlgeneratorinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Implements a lazy UrlGenerator.\n * Similar concept with {@see \\Silex\\LazyUrlMatcher LazyUrlMatcher} and\n * {@see \\Symfony\\Component\\HttpKernel\\EventListener\\RouterListener RouterListener}.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$factory":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var callable $factory *\/","attributes":[]},"$urlGenerator":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface $urlGenerator *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * LazyUrlGenerator constructor.\n     *\n     * @param callable $factory Should return UrlGeneratorInterface when invoked\n     *\/","attributes":[],"arguments":[{"name":"$factory","reference":false,"typehint":["callable"],"value":"","phpdoc":"","attributes":[]}]},"setContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":["RequestContext"],"value":"","phpdoc":"","attributes":[]}]},"getUrlGenerator":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return UrlGeneratorInterface\n     *\/","attributes":[]},"getContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"generate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$parameters","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$referenceType","reference":false,"typehint":[""],"value":"self::ABSOLUTE_PATH","phpdoc":"","attributes":[]}]}}},"ControllerResolver":{"abstract":false,"final":false,"extends":"\\silex\\controllerresolver","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Resolves extensions being used as a controller.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"instantiateController":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If class name passed in is an extension then return\n     * the extension instance instead of creating a new class.\n     *\n     * @param string $class\n     *\n     * @return object\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ControllerCollection":{"abstract":false,"final":false,"extends":"\\silex\\controllercollection","implements":["\\bolt\\routing\\defaultcontrollerclassawareinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * When mounting a controller class with a prefix most times you have a route\n * with a blank path (ex: Backend::dashboard). That is the only route that\n * flushes to include an (unwanted) trailing slash.\n *\n * This fixes that trailing slash.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$defaultControllerClass":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string|object $defaultControllerClass *\/","attributes":[]}},"methods":{"setDefaultControllerClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"match":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$to","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"flush":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]}}},"CallbackResolver":{"abstract":false,"final":false,"extends":"\\silex\\callbackresolver","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Handles resolving callbacks from routing.yml that specify a class name.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Pimple $app *\/","attributes":[]},"$classmap":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/**\n     * @deprecated Deprecated since 3.3, to be removed in 4.0.\n     *\n     * @var array\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * CallbackResolver Constructor.\n     *\n     * @param \\Pimple $app\n     * @param array   $classmap An array of class names as keys\n     *                          mapped to their service name as values\n     *                          Ex: 'Bolt\\Controller\\Frontend' => 'controller.frontend'\n     *                          Deprecated since 3.3, to be removed in 4.0.\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["\\Pimple"],"value":"","phpdoc":"","attributes":[]},{"name":"$classmap","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"isValid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns true if the string is a valid service method representation or if\n     * the string\/array references a class contained in the resolver's classmap.\n     *\n     * @param string $name\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"convertCallback":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated Deprecated since 3.3, to be removed in 4.0. *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"instantiateClass":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a new instance of a class.\n     *\n     * @param string $class\n     *\n     * @return object\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"interfaces":{"DefaultControllerClassAwareInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Interface for Bolt controller collection classes.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"setDefaultControllerClass":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the default controller class.\n     *\n     * This is this first part of a callable so it can be a string or an object.\n     *\n     * @param string|object $class\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Twig\\":{"classes":{"SetcontentNode":{"abstract":false,"final":false,"extends":"\\twig\\node\\node","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Twig setcontent node.\n *\n * @author Bob den Otter <bob@twokings.nl>\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$legacy":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string          $name\n     * @param Node            $contentType\n     * @param ArrayExpression $arguments\n     * @param array           $whereArguments\n     * @param int             $lineNo\n     * @param null            $tag\n     * @param bool            $legacy\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["Node"],"value":"","phpdoc":"","attributes":[]},{"name":"$arguments","reference":false,"typehint":["ArrayExpression"],"value":"","phpdoc":"","attributes":[]},{"name":"$whereArguments","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$lineNo","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$tag","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$legacy","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"compile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$compiler","reference":false,"typehint":["Compiler"],"value":"","phpdoc":"","attributes":[]}]},"compileLegacy":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Compiler $compiler\n     * @param Node     $arguments\n     *\n     * @deprecated Deprecated since 3.4, to be removed in 4.0.\n     *\/","attributes":[],"arguments":[{"name":"$compiler","reference":false,"typehint":["Compiler"],"value":"","phpdoc":"","attributes":[]},{"name":"$arguments","reference":false,"typehint":["Node"],"value":"","phpdoc":"","attributes":[]}]}}},"SetcontentTokenParser":{"abstract":false,"final":false,"extends":"\\twig\\tokenparser\\abstracttokenparser","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Twig {{ setcontent }} token parser.\n *\n * @author Bob den Otter <bob@twokings.nl>\n *\/","attributes":[],"php":false,"properties":{"$legacy":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var bool\n     *\n     * @deprecated Deprecated since 3.4, to be remove in v4.\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param bool $legacy\n     *\/","attributes":[],"arguments":[{"name":"$legacy","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"parse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":["Token"],"value":"","phpdoc":"","attributes":[]}]},"getTag":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"FilesystemLoader":{"abstract":false,"final":false,"extends":"\\twig\\loader\\filesystemloader","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Loads templates from a Bolt\\Filesystem interface.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$filesystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FilesystemInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FilesystemInterface $filesystem The filesystem to use\n     * @param array|string        $paths      A path or an array of paths where to look for templates\n     *\/","attributes":[],"arguments":[{"name":"$filesystem","reference":false,"typehint":["FilesystemInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$paths","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"addPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"self::MAIN_NAMESPACE","phpdoc":"","attributes":[]}]},"prependPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"self::MAIN_NAMESPACE","phpdoc":"","attributes":[]}]},"getSourceContext":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addDir":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Adds a directory where templates are stored.\n     *\n     * @param DirectoryInterface $dir\n     * @param string             $namespace\n     *\n     * @throws LoaderError\n     *\/","attributes":[],"arguments":[{"name":"$dir","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"self::MAIN_NAMESPACE","phpdoc":"","attributes":[]}]},"prependDir":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prepends a directory where templates are stored.\n     *\n     * @param DirectoryInterface $dir\n     * @param string             $namespace\n     *\n     * @throws LoaderError\n     *\/","attributes":[],"arguments":[{"name":"$dir","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$namespace","reference":false,"typehint":[""],"value":"self::MAIN_NAMESPACE","phpdoc":"","attributes":[]}]},"getSource":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCacheKey":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isFresh":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$time","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"findTemplate":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finds a file given the template name.\n     *\n     * @param string $name  the template name\n     * @param bool   $throw whether to throw exceptions or return false\n     *\n     * @throws LoaderError\n     *\n     * @return FileInterface|false\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$throw","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]}}},"SwitchNode":{"abstract":false,"final":false,"extends":"\\twig\\node\\node","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Represents a switch node.\n *\n * @author Dsls\n * @author maxgalbu\n *\n * @see https:\/\/gist.github.com\/maxgalbu\/9409182\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Node      $value\n     * @param Node      $cases\n     * @param Node|null $default\n     * @param int       $lineNo\n     * @param null      $tag\n     *\/","attributes":[],"arguments":[{"name":"$value","reference":false,"typehint":["Node"],"value":"","phpdoc":"","attributes":[]},{"name":"$cases","reference":false,"typehint":["Node"],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":["Node"],"value":"null","phpdoc":"","attributes":[]},{"name":"$lineNo","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]},{"name":"$tag","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"compile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$compiler","reference":false,"typehint":["Compiler"],"value":"","phpdoc":"","attributes":[]}]}}},"ArrayAccessSecurityProxy":{"abstract":false,"final":false,"extends":"","implements":["\\arrayaccess","\\iteratoraggregate","\\countable","\\bolt\\twig\\securityproxyinterface"],"use":["\\bolt\\debug\\caster\\transparentproxytrait"],"useoptions":[""],"phpdoc":"\/**\n * This is a proxy for arrays and ArrayAccess objects that verifies access with a Twig Sandbox.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$object":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array|ArrayAccess *\/","attributes":[]},"$sandbox":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var SandboxExtension *\/","attributes":[]},"$class":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array|ArrayAccess $array       The object or array to proxy to\n     * @param SandboxExtension  $sandbox     The Sandbox to verify with\n     * @param string            $fakeClass   A class name to use for checking with Sandbox and dumper (if object)\n     * @param bool              $transparent Whether this proxy should be transparent to the VarDumper\n     *\/","attributes":[],"arguments":[{"name":"$array","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$sandbox","reference":false,"typehint":["SandboxExtension"],"value":"","phpdoc":"","attributes":[]},{"name":"$fakeClass","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$transparent","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"getProxiedClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$offset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getIterator":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"count":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getProxiedObject":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array|ArrayAccess\n     *\/","attributes":[]}}},"SecurityPolicy":{"abstract":false,"final":false,"extends":"","implements":["\\twig\\sandbox\\securitypolicyinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Security policy enforced in sandbox mode.\n *\n * @author Carson Full <carsonfull@gmail.com>\n * @author Fabien Potencier <fabien@symfony.com>\n *\/","attributes":[],"php":false,"properties":{"$allowedTags":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$allowedFilters":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$allowedMethods":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$allowedProperties":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$allowedFunctions":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array $allowedTags\n     * @param array $allowedFilters\n     * @param array $allowedMethods\n     * @param array $allowedProperties\n     * @param array $allowedFunctions\n     *\/","attributes":[],"arguments":[{"name":"$allowedTags","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$allowedFilters","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$allowedMethods","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$allowedProperties","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]},{"name":"$allowedFunctions","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addAllowedTag":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add tag allowed by this policy.\n     *\n     * @param string $tag\n     *\/","attributes":[],"arguments":[{"name":"$tag","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setAllowedTags":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $tags\n     *\/","attributes":[],"arguments":[{"name":"$tags","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addAllowedFilter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add filter allowed by this policy.\n     *\n     * @param string $filter\n     *\/","attributes":[],"arguments":[{"name":"$filter","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setAllowedFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $filters\n     *\/","attributes":[],"arguments":[{"name":"$filters","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addAllowedFunction":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add function allowed by this policy.\n     *\n     * @param string $function\n     *\/","attributes":[],"arguments":[{"name":"$function","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setAllowedFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $functions\n     *\/","attributes":[],"arguments":[{"name":"$functions","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addAllowedMethod":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add class method allowed by this policy.\n     *\n     * @param string $class\n     * @param string $method\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setAllowedMethods":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $methods\n     *\/","attributes":[],"arguments":[{"name":"$methods","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"addAllowedProperty":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add class property allowed by this policy.\n     *\n     * @param string $class\n     * @param string $property\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$property","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setAllowedProperties":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $properties\n     *\/","attributes":[],"arguments":[{"name":"$properties","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"checkSecurity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$tags","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filters","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$functions","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkMethodAllowed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$obj","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$method","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"checkPropertyAllowed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$obj","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$property","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"matchAnyClassInTree":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$objClass","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAllClasses":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"globMatchAll":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$patterns","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$string","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$ignoreCase","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"globMatch":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$string","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$ignoreCase","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]}}},"SafeEnvironment":{"abstract":false,"final":false,"extends":"\\bolt\\twig\\twigenvironmentwrapper","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Wraps real Twig environment:\n * - render() and display() are called with sandbox enabled.\n * - Adding an extension here adds the tags\/functions\/filters in extension to the security policy whitelist.\n *\n * @deprecated since 3.3, will be removed in 4.0.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$sandbox":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Environment      $env\n     * @param SandboxExtension $sandbox\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$sandbox","reference":false,"typehint":["SandboxExtension"],"value":"","phpdoc":"","attributes":[]}]},"render":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"display":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"addExtension":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$extension","reference":false,"typehint":["ExtensionInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"TwigEnvironmentWrapper":{"abstract":true,"final":false,"extends":"\\twig\\environment","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Base class for wrapping twig environment.\n *\n * @deprecated since 3.3, will be removed in 4.0.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$env":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Environment $env\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"getBaseTemplateClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setBaseTemplateClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"enableDebug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"disableDebug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isDebug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"enableAutoReload":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"disableAutoReload":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isAutoReload":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"enableStrictVariables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"disableStrictVariables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isStrictVariables":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getCache":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$original","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"setCache":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$cache","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCacheFilename":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTemplateClass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$index","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getTemplateClassPrefix":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"render":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"display":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"load":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"loadTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$index","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"createTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isTemplateFresh":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$time","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"resolveTemplate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$names","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"clearTemplateCache":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"clearCacheFiles":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getLexer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setLexer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$lexer","reference":false,"typehint":["LexerInterface"],"value":"","phpdoc":"","attributes":[]}]},"tokenize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$source","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getParser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setParser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$parser","reference":false,"typehint":["ParserInterface"],"value":"","phpdoc":"","attributes":[]}]},"parse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$stream","reference":false,"typehint":["TokenStream"],"value":"","phpdoc":"","attributes":[]}]},"getCompiler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setCompiler":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$compiler","reference":false,"typehint":["CompilerInterface"],"value":"","phpdoc":"","attributes":[]}]},"compile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$node","reference":false,"typehint":["NodeInterface"],"value":"","phpdoc":"","attributes":[]}]},"compileSource":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$source","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$name","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"setLoader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$loader","reference":false,"typehint":["LoaderInterface"],"value":"","phpdoc":"","attributes":[]}]},"getLoader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setCharset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$charset","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getCharset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"initRuntime":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"hasExtension":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addRuntimeLoader":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$loader","reference":false,"typehint":["RuntimeLoaderInterface"],"value":"","phpdoc":"","attributes":[]}]},"getExtension":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getRuntime":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addExtension":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$extension","reference":false,"typehint":["ExtensionInterface"],"value":"","phpdoc":"","attributes":[]}]},"removeExtension":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setExtensions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$extensions","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getExtensions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addTokenParser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$parser","reference":false,"typehint":["TokenParserInterface"],"value":"","phpdoc":"","attributes":[]}]},"getTokenParsers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getTags":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addNodeVisitor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$visitor","reference":false,"typehint":["NodeVisitorInterface"],"value":"","phpdoc":"","attributes":[]}]},"getNodeVisitors":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addFilter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getFilter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"registerUndefinedFilterCallback":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addTest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$test","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getTests":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getTest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addFunction":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$function","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getFunction":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"registerUndefinedFunctionCallback":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$callable","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"addGlobal":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getGlobals":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"mergeGlobals":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$context","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getUnaryOperators":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getBinaryOperators":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"computeAlternatives":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$items","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"SwitchTokenParser":{"abstract":false,"final":false,"extends":"\\twig\\tokenparser\\abstracttokenparser","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Adapted from code originally in Twig\/extensions.\n *\n * Usage:\n *\n * {% set foo = 1 %}\n * {% switch foo %}\n *     {% case 1 %}\n *         Foo was equal to the number one.\n *     {% case 2 %}\n *         Foo was two.\n *     {% default %}\n *         This is the default fallback.\n * {% endswitch %}\n *\n *\n * @see: https:\/\/gist.github.com\/maxgalbu\/9409182\n *\/","attributes":[],"php":false,"methods":{"parse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parses a token and returns a node.\n     *\n     * @param Token $token A Token instance\n     *\n     * @throws SyntaxError\n     *\n     * @return Node A Twig node instance\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":["Token"],"value":"","phpdoc":"","attributes":[]}]},"decideIfFork":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Token $token\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":["Token"],"value":"","phpdoc":"","attributes":[]}]},"decideIfEnd":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Token $token\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$token","reference":false,"typehint":["Token"],"value":"","phpdoc":"","attributes":[]}]},"getTag":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the tag name associated with this token parser.\n     *\n     * @return string The tag name\n     *\/","attributes":[]}}},"RuntimeLoader":{"abstract":false,"final":false,"extends":"","implements":["\\twig\\runtimeloader\\runtimeloaderinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Twig RuntimeLoader implementation.\n *\n * @internal based on the similar class from Silex 2 and will probably be\n * replaced when Bolt v4 switches to Silex 2\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$container":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Container *\/","attributes":[]},"$mapping":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Container $container\n     * @param array     $mapping\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["Container"],"value":"","phpdoc":"","attributes":[]},{"name":"$mapping","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"load":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$class","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"interfaces":{"SecurityProxyInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * {@see SecurityPolicy} will check for this interface to get the class name\n * of the object to verify (instead of {@see get_class} by default).\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getProxiedClass":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the proxied class name.\n     *\n     * @return string\n     *\/","attributes":[]}}}}},"\\Bolt\\Twig\\Extension\\":{"classes":{"AdminExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Admin (back-end) functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getTests":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"DumpExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Modified version of Twig Bridge's DumpExtension to use runtime loading.\n * Also, backtrace function.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getTokenParsers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"ArrayExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters that provide array manipulation.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$orderOn":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$orderAscending":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$orderOnSecondary":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$orderAscendingSecondary":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"order":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sorts \/ orders items of an array.\n     *\n     * @param array  $array\n     * @param string $on\n     * @param string $onSecondary\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$array","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$on","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$onSecondary","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getSortOrder":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get sorting order of name, stripping possible \"DESC\", \"ASC\", and also\n     * return the sorting order.\n     *\n     * @param string $name\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"'-datepublish'","phpdoc":"","attributes":[]}]},"orderHelper":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function for sorting an array of \\Bolt\\Legacy\\Content.\n     *\n     * @param \\Bolt\\Legacy\\Content|array $a\n     * @param \\Bolt\\Legacy\\Content|array $b\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$a","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$b","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"shuffle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Randomly shuffle the contents of a passed array.\n     *\n     * @param array $array\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$array","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"unique":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Takes two arrays and returns a compiled array of unique, sorted values.\n     *\n     * @deprecated Deprecated since 3.2, to be removed in 4.0.\n     *\n     * @param array $arr1\n     * @param array $arr2\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$arr1","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$arr2","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"RecordExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Content record functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"HtmlExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * HTML functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"BoltExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":["\\twig\\extension\\globalsinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt base Twig functionality and definitions.\n *\/","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManagerInterface *\/","attributes":[]},"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$paths":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathsProxy *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManagerInterface $em\n     * @param Config                 $config\n     * @param PathsProxy             $paths\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManagerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$paths","reference":false,"typehint":["PathsProxy"],"value":"","phpdoc":"","attributes":[]}]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getStorage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Used by setcontent tag.\n     *\n     * @return EntityManagerInterface\n     *\/","attributes":[]},"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getGlobals":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\n     * As of Twig 2.x, the ability to register a global variable after runtime\n     * or the extensions have been initialized will not be possible any longer,\n     * but changing the value of an already registered global is possible.\n     *\/","attributes":[]},"getTokenParsers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"UtilsExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * General-purpose utility functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"TextExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Text functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getTests":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"RoutingExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Routing functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"WidgetExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Widget functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"UserExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * User functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getTests":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"ImageExtension":{"abstract":false,"final":false,"extends":"\\twig\\extension\\abstractextension","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Image functionality Twig extension.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"getFunctions":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getFilters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}}},"\\Bolt\\Twig\\Runtime\\":{"classes":{"RoutingRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters that provide routing functionality.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$canonical":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Canonical *\/","attributes":[]},"$requestStack":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var RequestStack *\/","attributes":[]},"$locale":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Canonical    $canonical\n     * @param RequestStack $requestStack\n     * @param string       $locale\n     *\/","attributes":[],"arguments":[{"name":"$canonical","reference":false,"typehint":["Canonical"],"value":"","phpdoc":"","attributes":[]},{"name":"$requestStack","reference":false,"typehint":["RequestStack"],"value":"","phpdoc":"","attributes":[]},{"name":"$locale","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"canonical":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get canonical url for current request.\n     *\n     * @return string|null\n     *\/","attributes":[]},"htmlLang":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the language value for in tags where the language attribute is\n     * required. The underscore '_' in the locale will be replaced with a\n     * hyphen '-'.\n     *\n     * @return string\n     *\/","attributes":[]},"isMobileClient":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if the page is viewed on a mobile device.\n     *\n     * @return bool\n     *\/","attributes":[]},"redirect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Redirect the browser to another page.\n     *\n     * @param string $path\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"request":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the requested parameter from $_REQUEST, $_GET or $_POST.\n     *\n     * @param string $parameter    The parameter to get\n     * @param string $from         'GET' or 'POST', all the others falls back to REQUEST\n     * @param bool   $stripSlashes Apply stripslashes. Defaults to false.\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$parameter","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$from","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$stripSlashes","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]}}},"DumpRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Twig Bridge's DumpExtension's runtime logic with custom enabled check.\n * Also, backtrace function.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$cloner":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var ClonerInterface *\/","attributes":[]},"$dumper":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var HtmlDumper *\/","attributes":[]},"$users":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Users *\/","attributes":[]},"$debugShowLoggedoff":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param ClonerInterface $cloner\n     * @param HtmlDumper      $dumper\n     * @param Users           $users\n     * @param bool            $debugShowLoggedoff\n     *\/","attributes":[],"arguments":[{"name":"$cloner","reference":false,"typehint":["ClonerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$dumper","reference":false,"typehint":["HtmlDumper"],"value":"","phpdoc":"","attributes":[]},{"name":"$users","reference":false,"typehint":["Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$debugShowLoggedoff","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"dump":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Environment $env\n     * @param mixed       $context\n     *\n     * @return bool|null|string\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"dumpBacktrace":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Output pretty-printed backtrace.\n     *\n     * @param Environment $env\n     * @param array       $context\n     * @param int         $depth\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$depth","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isEnabled":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Environment $env\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]}}},"BoltRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt extension runtime for Twig.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$queryEngine":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Query *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Query $queryEngine\n     *\/","attributes":[],"arguments":[{"name":"$queryEngine","reference":false,"typehint":["Query"],"value":"","phpdoc":"","attributes":[]}]},"getQueryEngine":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Query\n     *\/","attributes":[]}}},"UtilsRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters that provide generic utility.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$firebugLogger":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$debug":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$isUser":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$showAlways":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param LoggerInterface $firebugLogger\n     * @param bool            $debug\n     * @param bool            $isUser\n     * @param bool            $showAlways\n     *\/","attributes":[],"arguments":[{"name":"$firebugLogger","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$debug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$isUser","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$showAlways","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fileExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a file exists.\n     *\n     * @param string $filename\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"printFirebug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Send debug data to the developers FirePHP instance in-browser.\n     *\n     * @param mixed $var The data to be dumped into FirePHP\n     * @param mixed $msg The message to associate with the data\n     *\/","attributes":[],"arguments":[{"name":"$var","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$msg","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"allowDebug":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to determine if we're supposed to allow `backtrace`\n     * and `firebug`. If `$this->app['debug']` is false, we don't allow it.\n     * Otherwise we show only to _logged on_ users, _or_ non-authenticated\n     * users, but then `debug_show_loggedoff` needs to be set.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"AdminRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters for backend.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$stack":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Stack *\/","attributes":[]},"$urlGenerator":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface *\/","attributes":[]},"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]},"$buid":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var int Holds the last used Bolt unique ID. *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Config                $config\n     * @param Stack                 $stack\n     * @param UrlGeneratorInterface $urlGenerator\n     * @param Silex\\Application     $app\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$stack","reference":false,"typehint":["Stack"],"value":"","phpdoc":"","attributes":[]},{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$app","reference":false,"typehint":["Silex\\Application"],"value":"","phpdoc":"","attributes":[]}]},"addData":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add JavaScript data to app['jsdata'].\n     *\n     * @param string $path\n     * @param mixed  $value\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isChangelogEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"testStackable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return whether or not a file is stackable.\n     *\n     * @param FileInterface|string $filename\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$filename","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"stack":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return an array with the items on the stack.\n     *\n     * @param array|string $types\n     *\n     * @return array An array of items\n     *\/","attributes":[],"arguments":[{"name":"$types","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"logLevel":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert a Monolog log level to textual equivalent.\n     *\n     * @param int $level\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$level","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"trans":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Translate using our __().\n     *\n     * @internal\n     * @internal param array $args\n     * @internal param int   $numArgs\n     *\n     * @return string Translated content\n     *\/","attributes":[]},"randomQuote":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a random quote. Just for fun.\n     *\n     * @return string\n     *\/","attributes":[]},"ymllink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create a link to edit a .yml file, if a filename is detected in the string. Mostly\n     * for use in Flashbag messages, to allow easy editing.\n     *\n     * @param string $str\n     *\n     * @return string Resulting string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hattr":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Prepares attributes ready to attach to an html tag.\n     *\n     * - Handles boolean attributes.\n     * - Omits empty attributes if not forced by appending '!' to the name.\n     * - JSON encodes array values\n     * - Prettied output of class attribute and array data is handled.\n     *\n     * @param array $attributes\n     *\n     * @return string Attributes\n     *\/","attributes":[],"arguments":[{"name":"$attributes","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hclass":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Generates pretty class attributes.\n     *\n     * @param array|string $classes\n     * @param bool         $raw\n     *\n     * @return string Class attribute\n     *\/","attributes":[],"arguments":[{"name":"$classes","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$raw","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]},"buid":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a unique ID.\n     *\n     * @return string UID\n     *\/","attributes":[]}}},"HtmlRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters for HTML.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$markdown":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Parsedown *\/","attributes":[]},"$menu":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var MenuBuilder *\/","attributes":[]},"$em":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManager *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Config        $config\n     * @param \\Parsedown    $markdown\n     * @param MenuBuilder   $menu\n     * @param EntityManager $em\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$markdown","reference":false,"typehint":["\\Parsedown"],"value":"","phpdoc":"","attributes":[]},{"name":"$menu","reference":false,"typehint":["MenuBuilder"],"value":"","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManager"],"value":"","phpdoc":"","attributes":[]}]},"decorateTT":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Transforms plain text to HTML.\n     *\n     * @see \\Bolt\\Helpers\\Html::decorateTT()\n     *\n     * @param string $str\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"editable":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Makes a piece of HTML editable.\n     *\n     * @param string               $html    The HTML to be editable\n     * @param \\Bolt\\Legacy\\Content $content The actual content\n     * @param string               $field\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$html","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$field","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"markdown":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Formats the given string as Markdown in HTML.\n     *\n     * @param string $content\n     *\n     * @return string Markdown output\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"link":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create an HTML link to a given URL or ContentType\/slug pair.\n     *\n     * @param string $location\n     * @param string $label\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$location","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$label","reference":false,"typehint":[""],"value":"'[link]'","phpdoc":"","attributes":[]}]},"menu":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Output a menu.\n     *\n     * @param Environment $env\n     * @param string      $identifier Identifier for a particular menu\n     * @param string      $template   the template to use\n     * @param array       $params     extra parameters to pass on to the menu template\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$identifier","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$template","reference":false,"typehint":[""],"value":"'_sub_menu.twig'","phpdoc":"","attributes":[]},{"name":"$params","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]},"shy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add 'soft hyphens' &shy; to a string, so that it won't break layout in HTML when\n     * using strings without spaces or dashes.\n     *\n     * @param string $str\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"twig":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @deprecated since 3.3. To be removed in 4.0.\n     *\n     * Formats the given string as Twig in HTML.\n     *\n     * Use template_from_string instead:\n     * http:\/\/twig.sensiolabs.org\/doc\/functions\/template_from_string.html\n     *\n     * @param Environment $env\n     * @param string      $snippet\n     * @param array       $context\n     *\n     * @return string Twig output\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$snippet","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":[""],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"ImageRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters that provide image support.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$urlGenerator":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface *\/","attributes":[]},"$filesystem":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Manager *\/","attributes":[]},"$filesystemMatcher":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Matcher *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Config                $config\n     * @param UrlGeneratorInterface $urlGenerator\n     * @param Manager               $filesystem\n     * @param Matcher               $filesystemMatcher\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$filesystem","reference":false,"typehint":["Manager"],"value":"","phpdoc":"","attributes":[]},{"name":"$filesystemMatcher","reference":false,"typehint":["Matcher"],"value":"","phpdoc":"","attributes":[]}]},"image":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to make a path to an image.\n     *\n     * @param Environment  $env\n     * @param string|array $fileName Target filename\n     * @param string|int   $width    Target width\n     * @param string|int   $height   Target height\n     * @param string       $crop     String identifier for cropped images\n     *\n     * @return string Image path\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$fileName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$height","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$crop","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"imageInfo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an image.\n     *\n     * @param string $fileName\n     *\n     * @return \\Bolt\\Filesystem\\Handler\\ImageInterface\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"popup":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to wrap an image in a Magnific popup HTML tag, with thumbnail.\n     *\n     * example: {{ content.image|popup(320, 240) }}\n     * example: {{ popup(content.image, 320, 240) }}\n     * example: {{ content.image|popup(width=320, height=240, title=\"My Image\") }}\n     *\n     * Note: This function used to be called 'fancybox', but Fancybox was\n     * deprecated in favour of the Magnific Popup library.\n     *\n     * @param string|array $fileName Image file name\n     * @param int          $width    Image width\n     * @param int          $height   Image height\n     * @param string       $crop     Crop image string identifier\n     * @param string       $title    Display title for image\n     *\n     * @return string HTML output\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$height","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$crop","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$title","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"showImage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to show an image on a rendered page.\n     *\n     * Set width or height parameter to '0' for proportional scaling.\n     * Set them both to null (or not at all) to get the default size from config.yml.\n     *\n     * Example: {{ content.image|showimage(320, 240) }}\n     * Example: {{ showimage(content.image, 320, 240) }}\n     *\n     * @param string $fileName Image filename\n     * @param int    $width    Image width\n     * @param int    $height   Image height\n     * @param string $crop     Crop image string identifier\n     *\n     * @return string HTML output\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$height","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$crop","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"thumbnail":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Helper function to make a path to an image thumbnail.\n     *\n     * @param string     $fileName Target filename\n     * @param string|int $width    Target width\n     * @param string|int $height   Target height\n     * @param string     $crop     zooming and cropping: Set to 'f(it)', 'b(orders)', 'r(esize)' or 'c(rop)'\n     *                             Set width or height parameter to '0' for proportional scaling\n     *                             Setting them to '' uses default values\n     *\n     * @return string Relative URL of the thumbnail\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$height","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$crop","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getThumbnail":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a thumbnail object.\n     *\n     * @param string|array $fileName\n     * @param int          $width\n     * @param int          $height\n     * @param string       $scale\n     *\n     * @return Thumbnail\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$height","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$scale","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getThumbnailUri":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the thumbnail relative URI, using width, height and action.\n     *\n     * @param Thumbnail $thumb\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$thumb","reference":false,"typehint":["Thumbnail"],"value":"","phpdoc":"","attributes":[]}]},"getAliasedUri":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the thumbnail relative URI, using an alias.\n     *\n     * @param string|null $fileName\n     * @param string      $alias\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isAlias":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $alias\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$alias","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"normalizeFileName":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If $fileName is an array with 'filename' or 'file' return that property,\n     * otherwise return passed value.\n     *\n     * @param array|string $fileName\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"RecordRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters that provide \\Bolt\\Legacy\\Content manipulation.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$requestStack":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var RequestStack *\/","attributes":[]},"$pagerManager":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PagerManager *\/","attributes":[]},"$templatesDir":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var DirectoryInterface *\/","attributes":[]},"$themeTemplateSelect":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$useTwigGlobals":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param RequestStack       $requestStack\n     * @param PagerManager       $pagerManager\n     * @param DirectoryInterface $templatesDir\n     * @param array              $themeTemplateSelect\n     * @param mixed              $useTwigGlobals\n     *\/","attributes":[],"arguments":[{"name":"$requestStack","reference":false,"typehint":["RequestStack"],"value":"","phpdoc":"","attributes":[]},{"name":"$pagerManager","reference":false,"typehint":["PagerManager"],"value":"","phpdoc":"","attributes":[]},{"name":"$templatesDir","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$themeTemplateSelect","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$useTwigGlobals","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"current":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Request $request *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"excerpt":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create an excerpt for the given content.\n     *\n     * @param \\Bolt\\Legacy\\Content|array|string $content\n     * @param int                               $length  Defaults to 200 characters\n     * @param array|string|null                 $focus\n     *\n     * @return string Resulting excerpt\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$length","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$focus","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getFirstImage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the first image from the given content record.\n     *\n     * This method is deprecated. In Bolt 3.5 it'll be replaced \/ removed to\n     * fall in line with the work done for #6985\n     *\n     * @param \\Bolt\\Storage\\Entity\\Content $content\n     *\n     * @return array|null image\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fields":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Output all (relevant) fields to the browser. Convenient for dumping the\n     * content in order in, say, a `record.twig` template, without having to\n     * iterate over them in the browser.\n     *\n     * @param Environment          $env\n     * @param \\Bolt\\Legacy\\Content $record\n     * @param bool                 $common\n     * @param bool                 $extended\n     * @param bool                 $repeaters\n     * @param bool                 $templateFields\n     * @param string               $template\n     * @param string|array         $exclude\n     * @param bool                 $skip_uses\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$record","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$common","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]},{"name":"$extended","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$repeaters","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]},{"name":"$templateFields","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]},{"name":"$template","reference":false,"typehint":[""],"value":"'_sub_fields.twig'","phpdoc":"","attributes":[]},{"name":"$exclude","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$skip_uses","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"listTemplates":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Finder|FileInterface[] $finder *\/","attributes":[],"arguments":[{"name":"$filter","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"pager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Output a simple pager, for paginated listing pages.\n     *\n     * @param Environment $env\n     * @param string      $pagerName\n     * @param int         $surr\n     * @param string      $template  The template to apply\n     * @param string      $class\n     *\n     * @return string The rendered pager HTML\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$pagerName","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$surr","reference":false,"typehint":[""],"value":4,"phpdoc":"","attributes":[]},{"name":"$template","reference":false,"typehint":[""],"value":"'_sub_pager.twig'","phpdoc":"","attributes":[]},{"name":"$class","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"selectField":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a selected field from a contentset.\n     *\n     * @param array        $content     A Bolt record array\n     * @param array|string $fieldName   Name of a field, or array of field names to return from each record\n     * @param bool         $startempty  Whether or not the array should start with an empty element\n     * @param string       $keyName     Name of the key in the array\n     * @param string|null  $contentType ContentType string used by the select field\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$content","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fieldName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$startempty","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$keyName","reference":false,"typehint":[""],"value":"'id'","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"taxonomy":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array|Taxonomy|Entity\\Content|Legacy\\Content $candidate\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$candidate","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"UserRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters that provide user functionality.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$users":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Users *\/","attributes":[]},"$csrfTokenManager":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var CsrfTokenManagerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Users                     $users\n     * @param CsrfTokenManagerInterface $csrfTokenManager\n     *\/","attributes":[],"arguments":[{"name":"$users","reference":false,"typehint":["Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$csrfTokenManager","reference":false,"typehint":["CsrfTokenManagerInterface"],"value":"","phpdoc":"","attributes":[]}]},"getUser":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of data for a user, based on the given name, email address,\n     * or ID. Returns an array on success, and false otherwise.\n     *\n     * @param mixed $who\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$who","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getUserId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an id number for a user, based on the given name. Returns\n     * an integer id on success, and false otherwise.\n     *\n     * @param string $who\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$who","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isAllowed":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a certain action is allowed for the current user (and possibly\n     * content item).\n     *\n     * @param string $what    Operation\n     * @param mixed  $content if specified, a Content item\n     *\n     * @return bool True if allowed\n     *\/","attributes":[],"arguments":[{"name":"$what","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$content","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"token":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a simple Anti-CSRF-like token.\n     *\n     * @deprecated Deprecated since 3.0, to be removed in 4.0. Use Symfony forms instead.\n     *\n     * @return CsrfToken\n     *\/","attributes":[]}}},"TextRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters that provide text manipulation.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$systemLogger":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var LoggerInterface *\/","attributes":[]},"$slugify":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var SlugifyInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param LoggerInterface  $systemLogger\n     * @param SlugifyInterface $slugify\n     *\/","attributes":[],"arguments":[{"name":"$systemLogger","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$slugify","reference":false,"typehint":["SlugifyInterface"],"value":"","phpdoc":"","attributes":[]}]},"jsonDecode":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * JSON decodes a variable. Twig has a built-in json_encode filter, but no built-in\n     * function to JSON decode a string. This functionality remedies that.\n     *\n     * @param string $string the string to decode\n     *\n     * @return array|null The JSON decoded array\n     *\/","attributes":[],"arguments":[{"name":"$string","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"localeDateTime":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the date time in a particular format. Takes the locale into\n     * account.\n     *\n     * @param string|\\DateTime $dateTime\n     * @param string           $format\n     *\n     * @return string Formatted date and time\n     *\/","attributes":[],"arguments":[{"name":"$dateTime","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$format","reference":false,"typehint":[""],"value":"'%B %e, %Y %H:%M'","phpdoc":"","attributes":[]}]},"pregReplace":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Perform a regular expression search and replace on the given string.\n     *\n     * @param string $str\n     * @param string $pattern\n     * @param string $replacement\n     * @param int    $limit\n     *\n     * @return string Same string where first character is in upper case\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$pattern","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$replacement","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$limit","reference":false,"typehint":[""],"value":-1,"phpdoc":"","attributes":[]}]},"safeString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a 'safe string' version of a given string.\n     *\n     * @see function Bolt\\Library::safeString()\n     *\n     * @param string $str\n     * @param bool   $strict\n     * @param string $extrachars\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$strict","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$extrachars","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"slug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the 'sluggified' version of a string.\n     *\n     * @param string $str input value\n     *\n     * @return string Slug safe version of the string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"testJson":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Test whether a passed string contains valid JSON.\n     *\n     * @param string $string the string to test\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$string","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"WidgetRuntime":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bolt specific Twig functions and filters for HTML.\n *\n * @internal\n *\/","attributes":[],"php":false,"properties":{"$widgetQueue":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Queue *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Queue $widgetQueue\n     *\/","attributes":[],"arguments":[{"name":"$widgetQueue","reference":false,"typehint":["Queue"],"value":"","phpdoc":"","attributes":[]}]},"countWidgets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the number of widgets in the queue for a given type \/ location.\n     *\n     * @param Environment $env\n     * @param string      $location Location (e.g. 'dashboard_aside_top')\n     * @param string      $zone     Either Zone::FRONTEND or Zone::BACKEND\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$location","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"Zone::FRONTEND","phpdoc":"","attributes":[]}]},"getWidgets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets a list of the registered widgets.\n     *\n     * @return array\n     *\/","attributes":[]},"hasWidgets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a type \/ location has widgets in the queue.\n     *\n     * @param Environment $env\n     * @param string      $location Location (e.g. 'dashboard_aside_top')\n     * @param string      $zone     Either Zone::FRONTEND or Zone::BACKEND\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$location","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"Zone::FRONTEND","phpdoc":"","attributes":[]}]},"widgets":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Renders a particular widget type on the given location.\n     *\n     * @param Environment $env\n     * @param string      $location Location (e.g. 'dashboard_aside_top')\n     * @param string      $zone     Either Zone::FRONTEND or Zone::BACKEND\n     * @param string      $wrapper\n     *\n     * @return string|Markup\n     *\/","attributes":[],"arguments":[{"name":"$env","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$location","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"Zone::FRONTEND","phpdoc":"","attributes":[]},{"name":"$wrapper","reference":false,"typehint":[""],"value":"'widgetwrapper.twig'","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Events\\":{"classes":{"StorageEvent":{"abstract":false,"final":false,"extends":"\\symfony\\component\\eventdispatcher\\genericevent","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Event instance for Storage events.\n *\n * PRE_SAVE (preSave)\n * - Available:\n *   - Content object\n * - Notes:\n *   - Do not call saveContent()\n *\n * POST_SAVE (postSave)\n * - Available:\n *   - Content object\n *   - ID\n * - Notes:\n *   - Safe to call saveContent()\n *\n * PRE_DELETE (preDelete)\n * - Available:\n *   - Content object\n *   - ID\n * - Notes:\n *   - Do not call saveContent()\n *\n * POST_DELETE (postDelete)\n * - Available:\n *   - Content object\n *   - ID\n * - Notes:\n *   - Do not call saveContent()\n *   - Database record will no longer exist\n *\/","attributes":[],"php":false,"properties":{"$subject":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Legacy\\Content|Entity\\Content|array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Instantiate generic Storage Event.\n     *\n     * @param Legacy\\Content|Entity\\Content|array $subject   Content object\n     * @param array                               $arguments\n     *\/","attributes":[],"arguments":[{"name":"$subject","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$arguments","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]},"getId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the record id.\n     *\n     * @return int\n     *\/","attributes":[]},"getContentType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the record's ContentType name.\n     *\n     * @return string\n     *\/","attributes":[]},"getContent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the content object.\n     *\n     * @return \\Bolt\\Legacy\\Content\n     *\/","attributes":[]},"isCreate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Is the record being created, updated or deleted.\n     *\n     * @return bool|null True  - Create\n     *                   False - Update\n     *                   Null  - Delete\n     *\/","attributes":[]}}},"FailedConnectionEvent":{"abstract":false,"final":false,"extends":"\\doctrine\\dbal\\event\\connectioneventargs","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Event dispatched on Doctrine ConnectionException occurrence.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$exception":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Doctrine\\DBAL\\DBALException *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param \\Doctrine\\DBAL\\Connection    $connection\n     * @param \\Doctrine\\DBAL\\DBALException $exception\n     *\/","attributes":[],"arguments":[{"name":"$connection","reference":false,"typehint":["Connection"],"value":"","phpdoc":"","attributes":[]},{"name":"$exception","reference":false,"typehint":["DBALException"],"value":"","phpdoc":"","attributes":[]}]},"getException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Getter for the exception.\n     *\n     * @return \\Doctrine\\DBAL\\DBALException\n     *\/","attributes":[]}}},"AccessControlEvent":{"abstract":false,"final":false,"extends":"\\symfony\\component\\eventdispatcher\\event","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * AccessControl event class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$clientIp":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$dateTime":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$uri":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$userName":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$reason":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$dispatched":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * NOTE:\n     * For security reasons we don't store the request object here so the\n     * values in the event remain immutable.\n     *\n     * @param Request $request\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"setDispatched":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @internal\n     *\n     * @return AccessControlEvent\n     *\/","attributes":[]},"setReason":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @internal\n     *\n     * @param int $reason\n     *\n     * @return AccessControlEvent\n     *\/","attributes":[],"arguments":[{"name":"$reason","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getReason":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the failure reason code.\n     *\n     * @return int\n     *\/","attributes":[]},"getClientIp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the IP address requesting the access.\n     *\n     * @return string\n     *\/","attributes":[]},"getDateTime":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the timestamp the request occurred.\n     *\n     * @return int\n     *\/","attributes":[]},"getUri":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the requested URI of the access event.\n     *\n     * @return string\n     *\/","attributes":[]},"getUserName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the given user name of the access event.\n     *\n     * @return string\n     *\/","attributes":[]},"setUserName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @internal\n     *\n     * @param string $userName\n     *\/","attributes":[],"arguments":[{"name":"$userName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"CronEvent":{"abstract":false,"final":false,"extends":"\\symfony\\component\\eventdispatcher\\event","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Event class for system compulsory cron jobs.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application *\/","attributes":[]},"$output":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/** @var \\Symfony\\Component\\Console\\Output\\OutputInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application     $app\n     * @param OutputInterface $output\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"null","phpdoc":"","attributes":[]}]},"doRunScheduledJobs":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Process jobs.\n     *\n     * @param Event  $event\n     * @param string $eventName\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["Event"],"value":"","phpdoc":"","attributes":[]},{"name":"$eventName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"cronHourly":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Hourly jobs.\n     *\/","attributes":[]},"cronDaily":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Daily jobs.\n     *\/","attributes":[]},"cronWeekly":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Weekly jobs.\n     *\/","attributes":[]},"cronMonthly":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Monthly jobs.\n     *\/","attributes":[]},"cronYearly":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Yearly jobs.\n     *\/","attributes":[]},"notify":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If we're passed an OutputInterface, we're called from Nut and can notify\n     * the end user.\n     *\n     * @param string $msg\n     *\/","attributes":[],"arguments":[{"name":"$msg","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"HydrationEvent":{"abstract":false,"final":false,"extends":"\\symfony\\component\\eventdispatcher\\genericevent","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Hydration event allow access to\n * pre and post hydration of entities.\n *\n * Before hydration, the subject will be an array of fetched data\n * After hydration, the subject will be the hydrated object\n *\n * @author Ross Riley <riley.ross@gmail.com>\n *\/","attributes":[],"php":false},"SchemaEvent":{"abstract":false,"final":false,"extends":"\\symfony\\component\\eventdispatcher\\event","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Schema event.\n *\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$creates":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$alters":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array $creates\n     * @param array $alters\n     *\/","attributes":[],"arguments":[{"name":"$creates","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$alters","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getCreates":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"getAlters":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]}}},"SchemaEvents":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Schema event constants.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"UPDATE":{"value":"'schema.update'","visibility":"","phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"MountEvent":{"abstract":false,"final":false,"extends":"\\symfony\\component\\eventdispatcher\\event","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Controllers should be mounted to this event,\n * which will then mount them to the application.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]},"$collection":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var ControllerCollection *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application          $app\n     * @param ControllerCollection $collection\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$collection","reference":false,"typehint":["ControllerCollection"],"value":"","phpdoc":"","attributes":[]}]},"getApp":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Application\n     *\/","attributes":[]},"mount":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Mounts controllers under the given route prefix.\n     *\n     * @param string                                           $prefix      The route prefix\n     * @param ControllerCollection|ControllerProviderInterface $controllers A ControllerCollection or a ControllerProviderInterface instance\n     *\/","attributes":[],"arguments":[{"name":"$prefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$controllers","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"verifyCollection":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Verifies collection is correct type and calls connect on providers.\n     *\n     * Note: This is the same code as {@see Silex\\Application::mount}\n     *\n     * @param ControllerProviderInterface|ControllerCollection $collection\n     *\n     * @throws LogicException If controllers is not an instance of ControllerProviderInterface or ControllerCollection\n     *\n     * @return ControllerCollection\n     *\/","attributes":[],"arguments":[{"name":"$collection","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"CronEvents":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Definitions for all possible Cron Events.\n *\n * @codeCoverageIgnore\n *\/","attributes":[],"php":false,"constants":{"CRON_MONTHLY":{"value":"'cron.Monthly'","visibility":"","phpdoc":"","attributes":[]},"CRON_YEARLY":{"value":"'cron.Yearly'","visibility":"","phpdoc":"","attributes":[]},"CRON_DAILY":{"value":"'cron.Daily'","visibility":"","phpdoc":"","attributes":[]},"CRON_WEEKLY":{"value":"'cron.Weekly'","visibility":"","phpdoc":"","attributes":[]},"CRON_HOURLY":{"value":"'cron.Hourly'","visibility":"","phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"AccessControlEvents":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * AccessControl event constants.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"constants":{"ACCESS_CHECK_FAILURE":{"value":"'access.check.failure'","visibility":"","phpdoc":"","attributes":[]},"FAILURE_INVALID":{"value":1,"visibility":"","phpdoc":"","attributes":[]},"FAILURE_PASSWORD":{"value":2,"visibility":"","phpdoc":"","attributes":[]},"FAILURE_DISABLED":{"value":4,"visibility":"","phpdoc":"","attributes":[]},"FAILURE_LOCKED":{"value":8,"visibility":"","phpdoc":"","attributes":[]},"FAILURE_DENIED":{"value":16,"visibility":"","phpdoc":"","attributes":[]},"LOGIN_FAILURE":{"value":"'login.failure'","visibility":"","phpdoc":"","attributes":[]},"LOGIN_SUCCESS":{"value":"'login.success'","visibility":"","phpdoc":"","attributes":[]},"RESET_REQUEST":{"value":"'reset.request'","visibility":"","phpdoc":"","attributes":[]},"LOGOUT_SUCCESS":{"value":"'logout.success'","visibility":"","phpdoc":"","attributes":[]},"RESET_FAILURE":{"value":"'reset.failure'","visibility":"","phpdoc":"","attributes":[]},"RESET_SUCCESS":{"value":"'reset.success'","visibility":"","phpdoc":"","attributes":[]},"ACCESS_CHECK_SUCCESS":{"value":"'access.check.success'","visibility":"","phpdoc":"","attributes":[]},"ACCESS_CHECK_REQUEST":{"value":"'access.check.request'","visibility":"","phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Singleton constructor.\n     *\/","attributes":[]}}},"StorageEvents":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Definitions for all possible StorageEvents.\n *\n *  * @codeCoverageIgnore\n *\/","attributes":[],"php":false,"constants":{"POST_HYDRATE":{"value":"'postHydrate'","visibility":"","phpdoc":"","attributes":[]},"PRE_HYDRATE":{"value":"'preHydrate'","visibility":"","phpdoc":"","attributes":[]},"POST_DELETE":{"value":"'postDelete'","visibility":"","phpdoc":"","attributes":[]},"PRE_DELETE":{"value":"'preDelete'","visibility":"","phpdoc":"","attributes":[]},"POST_INSERT":{"value":"'postInsert'","visibility":"","phpdoc":"","attributes":[]},"PRE_INSERT":{"value":"'preInsert'","visibility":"","phpdoc":"","attributes":[]},"POST_SAVE":{"value":"'postSave'","visibility":"","phpdoc":"","attributes":[]},"PRE_SAVE":{"value":"'preSave'","visibility":"","phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"ControllerEvents":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"constants":{"MOUNT":{"value":"'controller.mount'","visibility":"","phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}}}},"\\Bolt\\Exception\\":{"classes":{"FieldConfigurationException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Exceptions in Bolt\\Storage.\n *\/","attributes":[],"php":false},"FilesystemException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Filesystem exceptions.\n *\n * @deprecated since 3.3, to be removed in 4.0.\n *\/","attributes":[],"php":false,"constants":{"FILE_NOT_REMOVEABLE":{"value":4,"visibility":"","phpdoc":"","attributes":[]},"FILE_NOT_WRITEABLE":{"value":2,"visibility":"","phpdoc":"","attributes":[]},"FILE_NOT_READABLE":{"value":1,"visibility":"","phpdoc":"","attributes":[]}},"properties":{"$code":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$code","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]},{"name":"$previous","reference":false,"typehint":["\\Exception"],"value":"null","phpdoc":"","attributes":[]}]}}},"QueryParseException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Exceptions in Bolt\\Storage\\Query.\n *\/","attributes":[],"php":false},"PagerOverrideException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Throws when an initialized pager object gonna be overwritten from html query parameters.\n *\n * @author Rix Beck <rix@neologik.hu>\n *\/","attributes":[],"php":false},"EmbedResolverException":{"abstract":false,"final":false,"extends":"\\runtimeexception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Exceptions thrown from embed resolvers.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false},"PathResolutionException":{"abstract":false,"final":false,"extends":"\\runtimeexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false},"PermissionParserException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Signals an error in the parser.\n *\/","attributes":[],"php":false},"FileNotStackableException":{"abstract":false,"final":false,"extends":"\\exception","implements":["\\symfony\\component\\httpkernel\\exception\\httpexceptioninterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$unstackableFile":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var FileInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"getUnstackableFile":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return FileInterface\n     *\/","attributes":[]},"getStatusCode":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"getHeaders":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"AccessControlException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Access exceptions.\n *\/","attributes":[],"php":false},"BootException":{"abstract":false,"final":false,"extends":"\\runtimeexception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Boot initialisation exception.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$response":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Response *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string     $message\n     * @param int        $code\n     * @param \\Exception $previous\n     * @param Response   $response\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$code","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]},{"name":"$previous","reference":false,"typehint":["\\Exception"],"value":"null","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"null","phpdoc":"","attributes":[]}]},"hasResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return bool\n     *\/","attributes":[]},"getResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Response\n     *\/","attributes":[]},"setResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Response $response\n     *\/","attributes":[],"arguments":[{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"earlyException":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Output an exception *very* early in the load-chain.\n     *\n     * @param string $message\n     *\n     * @throws BootException\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"earlyExceptionComposer":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Exception due to a missing vendor\/autoload.php file.\n     *\n     * @return static\n     *\/","attributes":[]},"earlyExceptionVersion":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Exception due to a PHP version being unsupported.\n     *\/","attributes":[]},"getEarlyExceptionHtml":{"visibility":"protected","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Template for early exception HTML to be parsed by sprintf() prior to output.\n     *\n     * @return string\n     *\/","attributes":[]},"getHintsComposer":{"visibility":"protected","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Footer hints for missing autoload.php exceptions.\n     *\n     * @return string\n     *\/","attributes":[]}}},"PermissionLexerException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Signals an error in the lexer.\n *\/","attributes":[],"php":false},"LowLevelDatabaseException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\lowlevelexception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @deprecated Deprecated since 3.2, to be removed in 4.0. @see \\Bolt\\Exception\\BootException\n *\/","attributes":[],"php":false,"methods":{"failedConnect":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$platform","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$previous","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]},"missingParameter":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$parameter","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"missingDriver":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$driver","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"unsupportedDriver":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$driver","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"unsecure":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"unwritableFile":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"unwritableFolder":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"nonexistantFile":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"nonexistantFolder":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"invalidPath":{"visibility":"protected","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$error","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"LowlevelException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @deprecated Deprecated since 3.2, to be removed in 4.0. @see \\Bolt\\Exception\\BootException\n *\/","attributes":[],"php":false,"properties":{"$html":{"value":"","visibility":"public","static":true,"typehint":[""],"phpdoc":"","attributes":[]},"$info":{"value":"","visibility":"public","static":true,"typehint":[""],"phpdoc":"","attributes":[]},"$screen":{"value":"","visibility":"public","static":true,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Print a 'low level' error page, and quit. The user has to fix something.\n     *\n     * Security caveat: the message is inserted into the page unescaped, so\n     * make sure that it contains valid HTML with proper encoding applied.\n     *\n     * @param string     $message\n     * @param int        $code\n     * @param \\Exception $previous\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$code","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$previous","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"catchFatalErrorsEarly":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Catch and display errors that occur before the Application object has\n     * been instantiated.\n     *\n     * If the error occurs later in the application life cycle, we flush this\n     * output in catchFatalErrors() which has access to the Application object.\n     *\/","attributes":[]},"catchFatalErrors":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Callback for register_shutdown_function() to handle fatal errors.\n     *\n     * @param \\Silex\\Application $app\n     * @param bool               $flush\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]},{"name":"$flush","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"nullHandler":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Ignore exception handler pointed at by set_exception_handler().\n     *\n     * @param \\Exception $e\n     *\/","attributes":[],"arguments":[{"name":"$e","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]},"cleanHTML":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove HTML elements from the error output.\n     *\n     * @param string $output\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$output","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"SatisQueryException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false},"StorageException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Exceptions in Bolt\\Storage.\n *\/","attributes":[],"php":false},"PackageManagerException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$file":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$line":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$code","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]},{"name":"$previous","reference":false,"typehint":["\\Exception"],"value":"null","phpdoc":"","attributes":[]}]}}},"InvalidRepositoryException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Exceptions in Bolt\\Storage.\n *\/","attributes":[],"php":false}}},"\\Bolt\\Exception\\Database\\":{"classes":{"DatabaseException":{"abstract":false,"final":false,"extends":"\\exception","implements":["\\bolt\\exception\\database\\databaseexceptioninterface"],"use":["\\bolt\\exception\\database\\databaseexceptiontrait"],"useoptions":[""],"phpdoc":"","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string         $driver\n     * @param string         $message\n     * @param Exception|null $previous\n     * @param int            $code\n     *\/","attributes":[],"arguments":[{"name":"$driver","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$previous","reference":false,"typehint":["Exception"],"value":"null","phpdoc":"","attributes":[]},{"name":"$code","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]}}},"DatabaseConnectionException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\database\\databaseexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false}},"interfaces":{"DatabaseExceptionInterface":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"getDriver":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getPlatform":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the driver's platform (human name).\n     *\n     * @return string\n     *\/","attributes":[]}}}},"traits":{"DatabaseExceptionTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$driver":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$driverNames":{"value":"","visibility":"protected","static":true,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"getDriver":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getPlatform":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the driver's platform (human name).\n     *\n     * @return string\n     *\/","attributes":[]}}}}},"\\Bolt\\Exception\\Configuration\\Validation\\":{"classes":{"MissingExtensionException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\validationexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$extension":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $extension\n     *\/","attributes":[],"arguments":[{"name":"$extension","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getExtension":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]}}},"ValidationException":{"abstract":false,"final":false,"extends":"\\exception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string         $message\n     * @param Exception|null $previous\n     *\/","attributes":[],"arguments":[{"name":"$message","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]},{"name":"$previous","reference":false,"typehint":["Exception"],"value":"null","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Exception\\Configuration\\Validation\\Database\\":{"classes":{"InsecureDatabaseException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\database\\abstractdatabasevalidationexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $driver\n     *\/","attributes":[],"arguments":[{"name":"$driver","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"SqlitePathException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\database\\abstractdatabasevalidationexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$type":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$path":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$error":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"folderMissing":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fileMissing":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"fileNotWritable":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"folderNotWritable":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $path\n     * @param string $type\n     * @param string $error\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$error","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getError":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]}}},"UnsupportedDatabaseException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\database\\abstractdatabasevalidationexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $driver\n     *\/","attributes":[],"arguments":[{"name":"$driver","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"MissingDatabaseExtensionException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\missingextensionexception","implements":["\\bolt\\exception\\database\\databaseexceptioninterface"],"use":["\\bolt\\exception\\database\\databaseexceptiontrait"],"useoptions":[""],"phpdoc":"","attributes":[],"php":false,"properties":{"$extension":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $driver pdo_*\n     *\/","attributes":[],"arguments":[{"name":"$driver","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"DatabaseParameterException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\database\\abstractdatabasevalidationexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$parameter":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $parameter\n     * @param string $driver\n     *\/","attributes":[],"arguments":[{"name":"$parameter","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$driver","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getParameter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]}}},"AbstractDatabaseValidationException":{"abstract":true,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\validationexception","implements":["\\bolt\\exception\\database\\databaseexceptioninterface"],"use":["\\bolt\\exception\\database\\databaseexceptiontrait"],"useoptions":[""],"phpdoc":"","attributes":[],"php":false,"properties":{"$subType":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $subType\n     * @param string $driver\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$subType","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$driver","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"getSubType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]}}}}},"\\Bolt\\Exception\\Configuration\\Validation\\System\\":{"classes":{"AbstractSystemValidationException":{"abstract":true,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\validationexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$type":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $type\n     * @param string $message\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"getType":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]}}},"ApacheValidationException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\system\\abstractsystemvalidationexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\/","attributes":[]}}},"CacheValidationException":{"abstract":false,"final":false,"extends":"\\bolt\\exception\\configuration\\validation\\system\\abstractsystemvalidationexception","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$path":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string $path\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getPath":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]}}}}},"\\Bolt\\Helpers\\":{"classes":{"RequestSanitiser":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Exception request sanitiser.\n *\n * @internal only to be used to sanitise Request objects for Twig exception renders\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"filter":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Filter a request object to be safe to pass to Twig.\n     *\n     * @param Request $request\n     *\n     * @return Bag\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"getValues":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param array $values\n     *\n     * @return Bag\n     *\/","attributes":[],"arguments":[{"name":"$values","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"Str":{"abstract":false,"final":false,"extends":"\\bolt\\common\\str","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"makeSafe":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns a \"safe\" version of the given string - basically only US-ASCII and\n     * numbers. Needed because filenames and titles and such, can't use all characters.\n     *\n     * @param string $str\n     * @param bool   $strict\n     * @param string $extrachars\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$strict","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$extrachars","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"replaceFirst":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$search","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$replace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$subject","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$caseSensitive","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"replaceLast":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$search","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$replace","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$subject","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$caseSensitive","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"shyphenate":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add 'soft hyphens' &shy; to a string, so that it won't break layout in HTML when\n     * using strings without spaces or dashes. Only breaks in long (> 19 chars) words.\n     *\n     * @param string $str\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"endsWith":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$subject","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$search","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$caseSensitive","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]}}},"Excerpt":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$body":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Content|LegacyContent|array|string *\/","attributes":[]},"$title":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Content|LegacyContent|array|string $body\n     * @param string|null                        $title\n     *\/","attributes":[],"arguments":[{"name":"$body","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$title","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getExcerpt":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the excerpt of a given piece of text.\n     *\n     * @param int               $length\n     * @param bool              $includeTitle\n     * @param array|string|null $focus\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$length","reference":false,"typehint":[""],"value":200,"phpdoc":"","attributes":[]},{"name":"$includeTitle","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$focus","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"createFromEntity":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @internal\n     *\n     * @param Content   $entity\n     * @param Bag       $contentType\n     * @param int       $length\n     * @param Parsedown $markdown\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$entity","reference":false,"typehint":["Content"],"value":"","phpdoc":"","attributes":[]},{"name":"$contentType","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]},{"name":"$length","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$markdown","reference":false,"typehint":["Parsedown"],"value":"","phpdoc":"","attributes":[]}]},"extractLocations":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Find the locations of each of the words.\n     * Nothing exciting here. The array_unique is required, unless you decide\n     * to make the words unique before passing in.\n     *\n     * @param array  $words\n     * @param string $fulltext\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$words","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$fulltext","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"determineSnipLocation":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Work out which is the most relevant portion to display\n     * This is done by looping over each match and finding the smallest distance between two found\n     * strings. The idea being that the closer the terms are the better match the snippet would be.\n     * When checking for matches we only change the location if there is a better match.\n     * The only exception is where we have only two matches in which case we just take the\n     * first as will be equally distant.\n     *\n     * @param array $locations\n     * @param int   $prevCount\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$locations","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$prevCount","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"extractRelevant":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Center on, and highlight search terms in excerpts.\n     *\n     * @see: http:\/\/www.boyter.org\/2013\/04\/building-a-search-result-extract-generator-in-php\/\n     *\n     * @param string|array $words\n     * @param string       $fulltext\n     * @param int          $relLength\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$words","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$fulltext","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$relLength","reference":false,"typehint":[""],"value":300,"phpdoc":"","attributes":[]}]}}},"ListMutator":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @internal\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$available":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var MutableBag *\/","attributes":[]},"$mutable":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var MutableBag *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array $available\n     * @param array $mutable\n     *\/","attributes":[],"arguments":[{"name":"$available","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$mutable","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"__invoke":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$original","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$proposed","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"Html":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"trimText":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Trim text to a given length.\n     *\n     * @param string $str           String to trim\n     * @param int    $desiredLength Target string length\n     * @param bool   $hellip        Add dots when the string is too long\n     * @param int    $cutOffCap     Maximum difference between string length when removing words\n     *\n     * @return string Trimmed string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$desiredLength","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$hellip","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]},{"name":"$cutOffCap","reference":false,"typehint":[""],"value":10,"phpdoc":"","attributes":[]}]},"decorateTT":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Transforms plain text to HTML. Plot twist: text between backticks (`) is\n     * wrapped in a <tt> element.\n     *\n     * @param string $str Input string. Treated as plain text.\n     *\n     * @return string The resulting HTML\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isURL":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a given string looks like it could be a URL, with or without the protocol.\n     *\n     * @see https:\/\/mathiasbynens.be\/demo\/url-regex\n     *\n     * @param string $str\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"addScheme":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add 'http:\/\/' to a link, if it has no protocol already.\n     *\n     * @param string $url\n     * @param string $scheme\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$url","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$scheme","reference":false,"typehint":[""],"value":"'http:\/\/'","phpdoc":"","attributes":[]}]},"providerLink":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create 'provider' link, as used in the footer, to link to either an\n     * email address or website URL.\n     *\n     * @param array $providedby\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$providedby","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"Input":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"methods":{"cleanPostedData":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Clean posted data. Convert tabs to spaces (primarily for yaml) and\n     * stripslashes when magic quotes are turned on.\n     *\n     * @param mixed $var\n     * @param bool  $stripslashes\n     * @param bool  $stripControlChars\n     *\n     * @return string|array\n     *\/","attributes":[],"arguments":[{"name":"$var","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$stripslashes","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]},{"name":"$stripControlChars","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]}]}}},"Arr":{"abstract":false,"final":false,"extends":"\\bolt\\collection\\arr","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * @deprecated since 3.3, to be removed in 4.0. Use {@see Bolt\\Collection\\Arr} instead.\n *\/","attributes":[],"php":false,"methods":{"makeValuePairs":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Make a simple array consisting of key=>value pairs, that can be used\n     * in select-boxes in forms.\n     *\n     * @param array  $array\n     * @param string $key\n     * @param string $value\n     *\n     * @return array\n     *\n     * @deprecated since 3.3, to be removed in 4.0. Use {@see array_column} or {@see Arr::column} instead.\n     *\/","attributes":[],"arguments":[{"name":"$array","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$key","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$value","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"mergeRecursiveDistinct":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * This is the same as {@see array_replace_recursive}.\n     * Use that instead or the smarter {@see replaceRecursive}.\n     *\n     * @param array $array1\n     * @param array $array2\n     *\n     * @return array\n     *\n     * @deprecated since 3.3, to be removed in 4.0.\n     *\/","attributes":[],"arguments":[{"name":"$array1","reference":true,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$array2","reference":true,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"isIndexedArray":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Use {@see isIndexed} or {@see isAssociative} instead.\n     *\n     * This is the same as isIndexed but it does not check if\n     * array is zero-indexed and has sequential keys.\n     *\n     * @param array $arr\n     *\n     * @return bool True if indexed, false if associative\n     *\n     * @deprecated since 3.3, to be removed in 4.0.\n     *\/","attributes":[],"arguments":[{"name":"$arr","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"Deprecated":{"abstract":false,"final":false,"extends":"\\bolt\\common\\deprecated","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * This class provides shortcuts for trigger deprecation warnings for various things.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"service":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Shortcut for triggering a deprecation warning for a DI service.\n     *\n     * Example:\n     *     Deprecated::service('foo', 3.3, 'bar'); \/\/ triggers warning: \"Accessing $app['foo'] is deprecated since 3.3 and will be removed in 4.0. Use $app['bar'] instead.\"\n     *\n     * @param string     $name    the service that is deprecated\n     * @param float|null $since   the version it was deprecated in\n     * @param string     $suggest a service name or suggestion of what to use instead\n     *\/","attributes":[],"arguments":[{"name":"$name","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$since","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$suggest","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Helpers\\Image\\":{"classes":{"Thumbnail":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Thumbnail helper class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$fileName":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$title":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$altTitle":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$height":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$width":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$scale":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$thumbConf":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param array $thumbConf Values from $app['config']->get('general\/thumbnails')\n     *\/","attributes":[],"arguments":[{"name":"$thumbConf","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getFileName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the file name.\n     *\n     * @return string\n     *\/","attributes":[]},"setFileName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the file name.\n     *\n     * @param array|string $fileName\n     *\n     * @return Thumbnail\n     *\/","attributes":[],"arguments":[{"name":"$fileName","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the title.\n     *\n     * @return string\n     *\/","attributes":[]},"setTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the title.\n     *\n     * @param string $title\n     *\n     * @return Thumbnail\n     *\/","attributes":[],"arguments":[{"name":"$title","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getAltTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the alternative title.\n     *\n     * @return string\n     *\/","attributes":[]},"setAltTitle":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the alternative title.\n     *\n     * @param string $altTitle\n     *\n     * @return Thumbnail\n     *\/","attributes":[],"arguments":[{"name":"$altTitle","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getWidth":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the thumbnail width.\n     *\n     * @param bool $round\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$round","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"setWidth":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the thumbnail width.\n     *\n     * @param int $width\n     * @param int $default\n     *\n     * @return Thumbnail\n     *\/","attributes":[],"arguments":[{"name":"$width","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":100,"phpdoc":"","attributes":[]}]},"getHeight":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the thumbnail height.\n     *\n     * @param bool $round\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$round","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"setHeight":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the thumbnail height.\n     *\n     * @param int $height\n     * @param int $default\n     *\n     * @return Thumbnail\n     *\/","attributes":[],"arguments":[{"name":"$height","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":100,"phpdoc":"","attributes":[]}]},"getScale":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the thumbnail scaling method.\n     *\n     * @return string\n     *\/","attributes":[]},"setScale":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the thumbnail scaling method.\n     *\n     * @param string $scale\n     *\n     * @return Thumbnail\n     *\/","attributes":[],"arguments":[{"name":"$scale","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Pager\\":{"classes":{"PagerManager":{"abstract":false,"final":false,"extends":"","implements":["\\arrayaccess"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class PagerManager\n * -------------------\n *  is a centralized service that would be instantiated lazily by PagerServiceProvider.\n *  It's changes Pager:: based, global smelling static calls that would be served by the manager to\n *  fit TDD principle.\n *  The service will be accessible via ``$app['pager']`` then.\n *\n * Role of the manager\n * -------------------\n * - manages Pager elements which are atomic objects of a paging reference and roughly corresponding current Bolt\\Pager\n *   objects\n * - responsible for decoding\/encoding pager objects from\/to query parameters\n * - centralizing all pager related operations like\n *      ``$page = ($request->query) ? $request->query->get($param, $request->query->get('page', 1)) : 1;``\n *      that occurs redundantly in code atm\n * - a pager element would be reached as ``$app['pager']['search']``\n * - ``(string) $app['pager']`` for encoding html query rather than ``Pager::makeLink()``\n * - no more ``Bolt\\Legacy\\Storage::GetContent()`` (and others) has to receive &$pager as argument, which is not so clear\n *   enough\n *\n * Conventions:\n * ------------\n *  - *Context Id* : Textual id of a pager element. It is hints the context or content type where the pager is refers to\n *  - *Pager Id* \/ *Parameter Id* : Full text id of a pager object in placeholder array. It is a key with\n * ``<PAGE>_<context_id>``. Query parameters can contain current page state under this parameter id.\n *\n * Practical:\n * ----------\n *  - Variable ``pager`` injected into templates contains a member ``manager`` furthermore, so PagerManager API can be\n *  accessed via\n *  - Instantiating PagerManager - like reaching ``$app['pager']`` - decodes http page parameters and can be addressed\n *  by their context id. So ``$app['pager']['entities']`` returns a Pager object decoded from query parameters was\n *  ``page_entities=N`` originally\n *\n * @author Rix Beck <rix@neologik.hu>\n *\/","attributes":[],"php":false,"constants":{"PAGE":{"value":"'page'","visibility":"","phpdoc":"","attributes":[]}},"properties":{"$link":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$pagers":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$request":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"isPagingRequest":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Request $request\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"initialize":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initializer of pager objects from request query parameters.\n     *\n     * @param Request $request\n     *\n     * @throws PagerOverrideException\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"makeLink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Use for calling from template to build up paginated URL link.\n     * It preserves each http query parameters except which is requested and returns a http GET query string.\n     * Last parameter appended to the end of the string so its value can be just concatenating.\n     * Against deprecated Pager::makelink() this is will build link based on initialized pagers.\n     *\n     * @param string $linkFor [optional] Id of pager the link should be built for. With empty argument passing\n     *                        the link will be built for the first initialized pager object found.\n     *\n     * @return string GET query string\n     * @throw \\RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$linkFor","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"makeParameterId":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parameter Id builder.\n     * Http query parameter names of pager objects are built of PAGE constant and a name of pager that is refers\n     * to its context.\n     *\n     * @param $contextId\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"decodeHttpQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Decodes HTTP query url and stores in addressable format.\n     *\/","attributes":[]},"encodeHttpQuery":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Encodes Http GET query string from actual parts of query parameters and from 'current' values of pager objects.\n     *\n     * @param array|null $qparams [optional] Optional parameters where actual values to be merged into\n     *\n     * @return string Encoded query string\n     *\/","attributes":[],"arguments":[{"name":"$qparams","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"__toString":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Object string encoder.\n     *\n     * @return string Encoded query string\n     *\/","attributes":[]},"offsetExists":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Pager element object existence check at a specific context id.\n     *\n     * @param mixed $contextId Context Id of pager object\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetSet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the Pager object.\n     *\n     * @param mixed $contextId\n     * @param Pager $pager\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$pager","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetUnset":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Unset a Pager object.\n     *\n     * @param mixed $contextId\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"offsetGet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $contextId\n     *\n     * @return Pager|false\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"keys":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns context ids array.\n     *\n     * @return array\n     *\/","attributes":[]},"isEmptyPager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns empty status of Pager object array.\n     *\n     * @return bool\n     *\/","attributes":[]},"setLink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set pager manager link value directly forcing link build.\n     *\n     * @param string $link Link to force\n     *\n     * @return $this\n     *\/","attributes":[],"arguments":[{"name":"$link","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"createPager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Factory method creating a Pager object.\n     *\n     * @param string $contextId [optional]\n     *\n     * @return Pager\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getPager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets the explicitly indexed pager or finds a completely initialized one.\n     * Pager is initialized if its _$totalpages_ attribute set.\n     *\n     * @param string $contextId [optional]\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getCurrentPage":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $contextId\n     *\n     * @return Pager|int\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"getPagers":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"getRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Strict getter for request property.\n     *\n     * @throws \\RuntimeException\n     *\n     * @return Request\n     *\/","attributes":[]},"findPagerId":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Gets a parameter id of an explicit context id or gets a valid one.\n     *\n     * @param string $contextId [optional]\n     *\n     * @return int|string\n     *\/","attributes":[],"arguments":[{"name":"$contextId","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"remapPagers":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Builds an array of Pagers with current page values.\n     *\n     * @return array\n     *\/","attributes":[]},"findInitializedPagerId":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finds any initialized pager and gets its pager id.\n     *\n     * @return int|string\n     *\/","attributes":[]}}},"Pager":{"abstract":false,"final":false,"extends":"\\bolt\\legacy\\abstractpager","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class Pager\n *  Elementary pager object.\n *\n * @author Rix Beck <rix@neologik.hu>\n *\/","attributes":[],"php":false,"properties":{"$for":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$count":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$totalpages":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$current":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showingFrom":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$showingTo":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"","attributes":[]},"$manager":{"value":"","visibility":"public","static":false,"typehint":[""],"phpdoc":"\/**\n     * @var PagerManager\n     *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$manager","reference":false,"typehint":["PagerManager"],"value":"null","phpdoc":"","attributes":[]}]},"setFor":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $for\n     *\n     * @return Pager\n     *\/","attributes":[],"arguments":[{"name":"$for","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setCount":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $count\n     *\n     * @return Pager\n     *\/","attributes":[],"arguments":[{"name":"$count","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setTotalpages":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $totalpages\n     *\n     * @return Pager\n     *\/","attributes":[],"arguments":[{"name":"$totalpages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setCurrent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $current\n     *\n     * @return Pager\n     *\/","attributes":[],"arguments":[{"name":"$current","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setShowingFrom":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $showingFrom\n     *\n     * @return Pager\n     *\/","attributes":[],"arguments":[{"name":"$showingFrom","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setShowingTo":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $showingTo\n     *\n     * @return Pager\n     *\/","attributes":[],"arguments":[{"name":"$showingTo","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"setManager":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param PagerManager $manager\n     *\n     * @return Pager\n     *\/","attributes":[],"arguments":[{"name":"$manager","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"makeLink":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $linkFor\n     *\n     * @return mixed\n     *\/","attributes":[],"arguments":[{"name":"$linkFor","reference":false,"typehint":[""],"value":"''","phpdoc":"","attributes":[]}]},"asArray":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * For v2 and v3 BC reasons.\n     *\n     * @return array\n     *\/","attributes":[]}}}}},"\\Bolt\\Debug\\Caster\\":{"classes":{"FilesystemCasters":{"abstract":false,"final":false,"extends":"\\bolt\\debug\\caster\\abstractcasterprovider","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Casters for Filesystem objects.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"defineCasters":{"visibility":"protected","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"castHandler":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param HandlerInterface $handler\n     * @param array            $a\n     * @param Stub             $stub\n     * @param bool             $isNested\n     * @param int              $filter\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$handler","reference":false,"typehint":["HandlerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$stub","reference":false,"typehint":["Stub"],"value":"","phpdoc":"","attributes":[]},{"name":"$isNested","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"castFile":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param FileInterface $file\n     * @param array         $a\n     * @param Stub          $stub\n     * @param bool          $isNested\n     * @param int           $filter\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$file","reference":false,"typehint":["FileInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$stub","reference":false,"typehint":["Stub"],"value":"","phpdoc":"","attributes":[]},{"name":"$isNested","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"castDirectory":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param DirectoryInterface $directory\n     * @param array              $a\n     * @param Stub               $stub\n     * @param bool               $isNested\n     * @param int                $filter\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$directory","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$stub","reference":false,"typehint":["Stub"],"value":"","phpdoc":"","attributes":[]},{"name":"$isNested","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"castImage":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Image $image\n     * @param array $a\n     * @param Stub  $stub\n     * @param bool  $isNested\n     * @param int   $filter\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$image","reference":false,"typehint":["Image"],"value":"","phpdoc":"","attributes":[]},{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$stub","reference":false,"typehint":["Stub"],"value":"","phpdoc":"","attributes":[]},{"name":"$isNested","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"castImageInfo":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Image\\Info $info\n     * @param array      $a\n     * @param Stub       $stub\n     * @param bool       $isNested\n     * @param int        $filter\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$info","reference":false,"typehint":["Image\\Info"],"value":"","phpdoc":"","attributes":[]},{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$stub","reference":false,"typehint":["Stub"],"value":"","phpdoc":"","attributes":[]},{"name":"$isNested","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"castImageType":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Image\\Type $type\n     * @param array      $a\n     * @param Stub       $stub\n     * @param bool       $isNested\n     * @param int        $filter\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$type","reference":false,"typehint":["Image\\Type"],"value":"","phpdoc":"","attributes":[]},{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$stub","reference":false,"typehint":["Stub"],"value":"","phpdoc":"","attributes":[]},{"name":"$isNested","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"castDimensions":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Image\\Dimensions $dimensions\n     * @param array            $a\n     * @param Stub             $stub\n     * @param bool             $isNested\n     * @param int              $filter\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$dimensions","reference":false,"typehint":["Image\\Dimensions"],"value":"","phpdoc":"","attributes":[]},{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$stub","reference":false,"typehint":["Stub"],"value":"","phpdoc":"","attributes":[]},{"name":"$isNested","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"castImageExif":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Image\\Exif $exif\n     * @param array      $a\n     * @param Stub       $stub\n     * @param bool       $isNested\n     * @param int        $filter\n     *\n     * @return array|mixed\n     *\/","attributes":[],"arguments":[{"name":"$exif","reference":false,"typehint":["Image\\Exif"],"value":"","phpdoc":"","attributes":[]},{"name":"$a","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$stub","reference":false,"typehint":["Stub"],"value":"","phpdoc":"","attributes":[]},{"name":"$isNested","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$filter","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]}}},"AbstractCasterProvider":{"abstract":true,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Abstract class providing casters.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"defineCasters":{"visibility":"protected","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return callable[]\n     *\/","attributes":[]},"getCasters":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return callable[]\n     *\/","attributes":[]}}}},"traits":{"TransparentProxyTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Helper to make proxy classes transparent to VarDumper.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$transparent":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"getProxiedClass":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return string\n     *\/","attributes":[]},"getProxiedObject":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return object|array\n     *\/","attributes":[]},"setTransparent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Enable or disable transparency to dumper.\n     *\n     * @param bool $bool\n     *\/","attributes":[],"arguments":[{"name":"$bool","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"registerCaster":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Registers caster for this class.\n     *\n     * This allows VarDumper to make this proxy transparent when dumping.\n     *\n     * @param AbstractCloner $cloner\n     *\/","attributes":[],"arguments":[{"name":"$cloner","reference":false,"typehint":["AbstractCloner"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Nut\\":{"classes":{"Info":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to output phpinfo().\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"Init":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to perform initial setup tasks.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"updateDistBundles":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Archive distributions have the site bundle files installed as .dist\n     * files to prevent the real files being overridden. If the .dist file\n     * exists, but the original doesn't then we should rename them.\n     *\/","attributes":[]}}},"DatabaseRepair":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to repair\/update database schema.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"dumpSql":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Dump the output.\n     *\/","attributes":[]}}},"CacheClear":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to clear the cache.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"DebugEvents":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to dump system listened events, and target callable.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"getTable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param OutputInterface $output\n     *\n     * @return Table\n     *\/","attributes":[],"arguments":[{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"BaseCommand":{"abstract":true,"final":false,"extends":"\\symfony\\component\\console\\command\\command","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut building block.\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Container *\/","attributes":[]},"$io":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var NutStyle *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Container|null $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Container"],"value":"null","phpdoc":"","attributes":[]}]},"initialize":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var ContainerHelper $helper *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"auditLog":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Log a Nut execution if auditing is on.\n     *\n     * @param string $source  __CLASS__ of caller\n     * @param string $message Message to log\n     *\/","attributes":[],"arguments":[{"name":"$source","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ExtensionsUpdate":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to update extensions.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$pinger":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PingService *\/","attributes":[]}},"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"initialize":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"ConfigSet":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\abstractconfig","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to set parameter value in a YAML configuration file.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"doExecute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$updater","reference":false,"typehint":["YamlUpdater"],"value":"","phpdoc":"","attributes":[]},{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"ServerRun":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Runs Bolt application using PHP built-in web server.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var ProcessHelper $helper *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"createServerProcess":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param string $address\n     * @param string $webDir\n     * @param string $router\n     *\n     * @return null|\\Symfony\\Component\\Process\\Process\n     *\/","attributes":[],"arguments":[{"name":"$address","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$webDir","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$router","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isOtherServerProcessRunning":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determines if another process is bound to the given address and port.\n     *\n     * @param string $address An address\/port tuple\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$address","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLockFile":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determines the name of the lock file for a particular PHP web server process.\n     *\n     * @param string $address An address\/port tuple\n     *\n     * @return string The filename\n     *\/","attributes":[],"arguments":[{"name":"$address","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"SetupRun":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to perform Bolt set-up (first time, or post-update) tasks.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$step":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$firstUser":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var array *\/","attributes":[]},"$isDbSetup":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"reconcileSystemRequirements":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var RequirementCollection $requires *\/","attributes":[]},"reconcileDatabaseConfiguration":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param bool $isInteractive\n     *\n     * @throws DatabaseConnectionException\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$isInteractive","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"reconcileDatabaseSchema":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check the database schema exists is consistent with the configuration.\n     *\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"reconcileRootUser":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var UsersRepository $repo *\/","attributes":[],"arguments":[{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"reconcileExtensionEnvironment":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update\/install the extension composer.json with latest Bolt specific\n     * parameters, version numbers, etc.\n     *\n     * @param OutputInterface $output\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"reconcileInitialConfig":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Selective config edit on set-up.\n     *\n     * @param OutputInterface $output\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"displayConfigTable":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]},"finish":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Finishing step.\n     *\n     * Let new sites know set up is complete and login name.\n     *\n     * @return int\n     *\/","attributes":[]},"getBufferedOutput":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a pre-configured output buffer, with the same formatter and\n     * decorator in use for the passed output, with optionally separate\n     * verbosity level.\n     *\n     * @param OutputInterface $output\n     * @param int             $verbosity\n     *\n     * @return BufferedOutput\n     *\/","attributes":[],"arguments":[{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$verbosity","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"writeBufferedOutput":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Write buffered output to the console.\n     *\n     * Nothing will be written if the command result is 0 and verbose output is\n     * not enabled.\n     *\n     * @param BufferedOutput $buffer\n     * @param int            $result\n     *\/","attributes":[],"arguments":[{"name":"$buffer","reference":false,"typehint":["BufferedOutput"],"value":"","phpdoc":"","attributes":[]},{"name":"$result","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"step":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Write the current step text to output.\n     *\n     * @param int          $step\n     * @param array|string $message\n     *\/","attributes":[],"arguments":[{"name":"$step","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$message","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"writeWelcome":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Write the welcome message.\n     *\/","attributes":[]}}},"UserAdd":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\abstractuser","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to add a user to the system.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"interact":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Storage\\Repository\\UsersRepository $repo *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"validate":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Entity\\Users $userEntity\n     *\n     * @return array|null\n     *\/","attributes":[],"arguments":[{"name":"$userEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]}}},"CronRunner":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to run cron tasks.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"DatabasePrefill":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Database pre-fill command.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"reportWarn":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Bag $results\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"reportError":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Bag $results\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"reportCreate":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param Bag $results\n     *\/","attributes":[],"arguments":[{"name":"$results","reference":false,"typehint":["Bag"],"value":"","phpdoc":"","attributes":[]}]},"getContentTypeNames":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return array\n     *\/","attributes":[]}}},"ExtensionsInstall":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to install an extension.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$pinger":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PingService *\/","attributes":[]}},"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"initialize":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"ExtensionsDumpAutoload":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to update extension autoloaders.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"DatabaseCheck":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to perform a database consistency check command.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"showDiffs":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render diffs.\n     *\/","attributes":[]},"showCreates":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Display a section of tables to be created.\n     *\/","attributes":[]},"showAlterations":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Display a section of tables to be altered.\n     *\/","attributes":[]}}},"TestRunner":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to run all available PHPUnit tests.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"UserRoleRemove":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to remove a role from a Bolt user account.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"AbstractConfig":{"abstract":true,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Config command base class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$file":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FileInterface *\/","attributes":[]}},"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"doExecute":{"visibility":"protected","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param YamlUpdater     $updater\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\/","attributes":[],"arguments":[{"name":"$updater","reference":false,"typehint":["YamlUpdater"],"value":"","phpdoc":"","attributes":[]},{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"LogTrim":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to clear the system & change logs.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"UserRoleAdd":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\abstractuser","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to add a role to a Bolt user account.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"interact":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"DatabaseExport":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut database exporter command.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var JsonFile|YamlFile $file *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"getResolvedPaths":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param InputInterface $input\n     *\n     * @throws RuntimeException\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"AbstractUser":{"abstract":true,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * User command base class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"askUserName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param InputInterface $input\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]}]},"askDisplayName":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param InputInterface $input\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]}]},"askEmail":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param InputInterface $input\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]}]},"askPassword":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param InputInterface $input\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]}]},"askRole":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param InputInterface $input\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"PimpleDump":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Pimple container dumper command for PhpStorm & IntelliJ IDEA.\n *\n * @author Carson Full <carsonfull@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"isEnabled":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"UserResetPassword":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to reset a user password.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"DatabaseImport":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut database importer command.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var JsonFile|YamlFile $file *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"getResolvedPaths":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param InputInterface $input\n     *\n     * @throws RuntimeException\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"ExtensionsUninstall":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to uninstall an extension.\n *\n * @author Ross Riley <riley.ross@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"UserManage":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to manage a user.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"getUser":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param UsersRepository $repo\n     * @param string          $userLogin\n     *\n     * @return Entity\\Users|false\n     *\/","attributes":[],"arguments":[{"name":"$repo","reference":false,"typehint":["UsersRepository"],"value":"","phpdoc":"","attributes":[]},{"name":"$userLogin","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"UsersList":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to list all users.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"DebugServiceProviders":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to dump system provider registration order.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"DatabaseOptimize":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to optimize the running database.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"getPlatformUpdates":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var string $table *\/","attributes":[]},"assertMaintenanceMode":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\Config $config *\/","attributes":[]}}},"SetupSync":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to perform Bolt web asset sync.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"mirrorThemes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Directory $theme *\/","attributes":[]}}},"DebugRouter":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to dump system routes.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"formatArrayAsYaml":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @param mixed $array\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$array","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"executeAll":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"sortRoutes":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sort routes by their route binding name.\n     *\n     * @param Route[] $routes\n     *\n     * @return Route[]\n     *\/","attributes":[],"arguments":[{"name":"$routes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"sortPattern":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sort routes by their URI pattern.\n     *\n     * @param Route[] $routes\n     *\n     * @return Route[]\n     *\/","attributes":[],"arguments":[{"name":"$routes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"getMethods":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a route's HTTP methods as a sorted string.\n     *\n     * @param Route $route\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$route","reference":false,"typehint":["Route"],"value":"","phpdoc":"","attributes":[]}]},"sortMethods":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sort routes by their allowed HTTP method(s).\n     *\n     * @param Route[] $routes\n     *\n     * @return Route[]\n     *\/","attributes":[],"arguments":[{"name":"$routes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]}}},"ExtensionsSetup":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to set up extension directories.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"setupJson":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create or update the extensions\/composer.json file.\n     *\/","attributes":[]},"setupAutoloader":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set up the Composer autoloader.\n     *\n     * @throws \\Bolt\\Exception\\PackageManagerException\n     *\/","attributes":[]},"outputResult":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Output the relevant result.\n     *\n     * @param int $result\n     *\n     * @return int\n     *\/","attributes":[],"arguments":[{"name":"$result","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"RouterMatch":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A console command to test route matching.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"LogClear":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to clear the system & change logs.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @deprecated Deprecated since 3.4, to be removed in 4.0. Use --no-interaction *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"Extensions":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\basecommand","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to list all installed extensions.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"execute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Composer\\Package\\CompletePackageInterface $package *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}},"ConfigGet":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\abstractconfig","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut command to get a parameter value from a YAML configuration file.\n *\/","attributes":[],"php":false,"methods":{"configure":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"doExecute":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$updater","reference":false,"typehint":["YamlUpdater"],"value":"","phpdoc":"","attributes":[]},{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Nut\\Output\\":{"classes":{"OverwritableOutput":{"abstract":false,"final":true,"extends":"","implements":["\\bolt\\nut\\output\\overwritableoutputinterface"],"use":["\\bolt\\nut\\output\\outputwrappertrait"],"useoptions":[""],"phpdoc":"\/**\n * An Output wrapper that can capture groups of output and remove\/overwrite them later.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$buffer":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var BufferedOutput *\/","attributes":[]},"$captures":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Capture[] *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param OutputInterface $output\n     *\/","attributes":[],"arguments":[{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"capture":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"captureUserInput":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"remove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"write":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$messages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$newline","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"writeln":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$messages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]}}},"Capture":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Holds text that could be overwritten in console.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$text":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"append":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$text","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"overwrite":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$formatter","reference":false,"typehint":["OutputFormatterInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"cleanAutocomplete":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$newText","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getLines":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$text","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$formatter","reference":false,"typehint":["OutputFormatterInterface"],"value":"","phpdoc":"","attributes":[]}]},"chunk":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Splits buffer into parts of given width accounting for ANSI styling.\n     *\n     * @param string $text\n     * @param int    $width\n     *\n     * @return string[]\n     *\/","attributes":[],"arguments":[{"name":"$text","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$width","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"interfaces":{"NutStyleInterface":{"abstract":false,"final":false,"extends":"\\bolt\\nut\\output\\overwritableoutputinterface","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Combines OverwritableOutputInterface & OverwritableStyleInterface.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false},"OverwritableOutputInterface":{"abstract":false,"final":false,"extends":"\\symfony\\component\\console\\output\\outputinterface","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * An Output that can capture groups of output text and remove\/overwrite them later.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"capture":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Start capturing output to remove.\n     *\n     * This should start a new capture each time it is called.\n     *\/","attributes":[]},"remove":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove output from latest capture.\n     *\/","attributes":[]},"captureUserInput":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add user input to latest capture.\n     *\n     * This is a special case where the user writes to console but it doesn't go through our output.\n     * We need to manually add it to keep the console in sync.\n     *\n     * @param string $input\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}}},"traits":{"OutputWrapperTrait":{"abstract":false,"final":false,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Trait to help create OutputInterface wrappers.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$output":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var OutputInterface *\/","attributes":[]}},"methods":{"write":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$messages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$newline","reference":false,"typehint":[""],"value":"false","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"writeln":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$messages","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$options","reference":false,"typehint":[""],"value":0,"phpdoc":"","attributes":[]}]},"isQuiet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"isVerbose":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"isVeryVerbose":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"isDebug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"setVerbosity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$level","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getVerbosity":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"setDecorated":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$decorated","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isDecorated":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]},"setFormatter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$formatter","reference":false,"typehint":["OutputFormatterInterface"],"value":"","phpdoc":"","attributes":[]}]},"getFormatter":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}}}},"\\Bolt\\Nut\\Style\\":{"classes":{"NutStyle":{"abstract":false,"final":false,"extends":"\\symfony\\component\\console\\style\\symfonystyle","implements":["\\bolt\\nut\\output\\nutstyleinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Nut custom style.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$input":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var InputInterface *\/","attributes":[]},"$output":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var OverwritableOutputInterface *\/","attributes":[]},"$questionHelper":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QuestionHelper *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"fromComposer":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Create from Composer IO.\n     *\n     * @param IOInterface $io\n     *\n     * @return NutStyle\n     *\/","attributes":[],"arguments":[{"name":"$io","reference":false,"typehint":["IOInterface"],"value":"","phpdoc":"","attributes":[]}]},"isInteractive":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"askThenRemove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$validator","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"askHiddenThenRemove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$validator","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"confirmThenRemove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"choiceThenRemove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$choices","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"askQuestionThenRemove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":["Question"],"value":"","phpdoc":"","attributes":[]}]},"capture":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"remove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"captureUserInput":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"isQuiet":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isVerbose":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isVeryVerbose":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"isDebug":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}}},"interfaces":{"OverwritableStyleInterface":{"abstract":false,"final":false,"extends":"\\symfony\\component\\console\\style\\styleinterface","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * An extension of StyleInterface that adds user input methods that remove their output afterwards.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"isInteractive":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether the input is interactive.\n     *\n     * @return bool\n     *\/","attributes":[]},"askThenRemove":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Asks a question then removes the question & answer.\n     *\n     * @param string        $question\n     * @param string|null   $default\n     * @param callable|null $validator\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]},{"name":"$validator","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"askHiddenThenRemove":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Asks a question with the user input hidden then removes the question.\n     *\n     * @param string        $question\n     * @param callable|null $validator\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$validator","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"confirmThenRemove":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Asks for confirmation then removes the question & answer.\n     *\n     * @param string $question\n     * @param bool   $default\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"true","phpdoc":"","attributes":[]}]},"choiceThenRemove":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Asks a choice question then removes the question & answer.\n     *\n     * @param string          $question\n     * @param array           $choices\n     * @param string|int|null $default\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$choices","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$default","reference":false,"typehint":[""],"value":"null","phpdoc":"","attributes":[]}]},"askQuestionThenRemove":{"visibility":"public","static":false,"abstract":true,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Asks a question then removes the question & answer.\n     *\n     * @param Question $question\n     *\n     * @return mixed|string\n     *\/","attributes":[],"arguments":[{"name":"$question","reference":false,"typehint":["Question"],"value":"","phpdoc":"","attributes":[]}]}}}}},"\\Bolt\\Nut\\Helper\\":{"classes":{"Terminal":{"abstract":false,"final":true,"extends":"","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * An easy way to get the terminal's width\/height.\n *\n * Values are not cached here for accuracy, so limited calls to this class is recommended.\n *\n * This started from Symfony's code, and modified to be its own class and to use a signal handler if available.\n *\n * Symfony 3.x does have their own Terminal class, but values are cached there. If the user resizes their terminal\n * window the code will never know about it.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$width":{"value":"","visibility":"private","static":true,"typehint":[""],"phpdoc":"","attributes":[]},"$height":{"value":"","visibility":"private","static":true,"typehint":[""],"phpdoc":"","attributes":[]},"$pcntlEnabled":{"value":"","visibility":"private","static":true,"typehint":[""],"phpdoc":"","attributes":[]},"$pcntlAsync":{"value":"","visibility":"private","static":true,"typehint":[""],"phpdoc":"","attributes":[]},"$pcntlNeedsUpdate":{"value":"","visibility":"private","static":true,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"getWidth":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the Terminal's width.\n     *\n     * @return int\n     *\/","attributes":[]},"getHeight":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns the Terminal's height.\n     *\n     * @return int\n     *\/","attributes":[]},"updateDimensions":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Update our dimension properties.\n     *\/","attributes":[]},"checkPcntl":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Initializes and checks if we have received a SIGWINCH signal.\n     *\n     * @return bool whether dimensions should be fetched\n     *\/","attributes":[]},"fetchDimensions":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Fetch dimensions based on platform.\n     *\/","attributes":[]},"getAnsiCon":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Parse width & height from ANSICON env var.\n     *\n     * @return int[]\n     *\/","attributes":[]},"getConsoleMode":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run console mode command and parse output to width & height.\n     *\n     * @return int[]\n     *\/","attributes":[]},"getSttyColumns":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run stty command and parse output to width & height.\n     *\n     * @return int[]\n     *\/","attributes":[]},"runCommand":{"visibility":"private","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Run a command.\n     *\n     * @param string $command\n     *\n     * @return string|null\n     *\/","attributes":[],"arguments":[{"name":"$command","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]}}},"ContainerHelper":{"abstract":false,"final":false,"extends":"\\symfony\\component\\console\\helper\\helper","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Bridges Container to commands.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$container":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Container *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Container $container\n     *\/","attributes":[],"arguments":[{"name":"$container","reference":false,"typehint":["Container"],"value":"","phpdoc":"","attributes":[]}]},"getContainer":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * @return Container\n     *\/","attributes":[]},"getName":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"QuestionHelper":{"abstract":false,"final":true,"extends":"\\symfony\\component\\console\\helper\\symfonyquestionhelper","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * A QuestionHelper that can remove all output when done.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$remove":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$question":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Question *\/","attributes":[]},"$output":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var OverwritableOutputInterface *\/","attributes":[]},"$autocomplete":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$stty":{"value":"","visibility":"private","static":true,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\/","attributes":[]},"askThenRemove":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Ask a question to the user and then remove the question & answer.\n     *\n     * @param InputInterface              $input\n     * @param OverwritableOutputInterface $output\n     * @param Question                    $question\n     *\n     * @return mixed|string The user answer\n     *\/","attributes":[],"arguments":[{"name":"$input","reference":false,"typehint":["InputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$output","reference":false,"typehint":["OverwritableOutputInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$question","reference":false,"typehint":["Question"],"value":"","phpdoc":"","attributes":[]}]},"setInputStream":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\n     * Wrap input stream to call our onRead method.\n     *\/","attributes":[],"arguments":[{"name":"$stream","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"onRead":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * On input stream read.\n     *\n     * We capture user input here if applicable.\n     *\n     * We can't use the return value of ask() because it is trimmed.\n     * We need to account for those extra characters when overwriting.\n     *\n     * @param string $data\n     *\/","attributes":[],"arguments":[{"name":"$data","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"hasSttyAvailable":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Returns whether Stty is available or not.\n     *\n     * @return bool\n     *\/","attributes":[]}}},"Table":{"abstract":false,"final":false,"extends":"\\symfony\\component\\console\\helper\\table","implements":[],"use":[],"useoptions":[],"phpdoc":"\/**\n * Extends Symfony's Table to provide an overwrite method.\n *\n * Table values can be updated then, instead of calling render(),\n * call overwrite() and the previous table will be removed and\n * the new one will be rendered.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$output":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var OverwritableOutputInterface *\/","attributes":[]},"$previouslyRendered":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param OverwritableOutputInterface $output\n     *\/","attributes":[],"arguments":[{"name":"$output","reference":false,"typehint":["OverwritableOutputInterface"],"value":"","phpdoc":"","attributes":[]}]},"overwrite":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Remove previously rendered table, then render again with new data.\n     *\n     * This assumes the table is the last output on the terminal.\n     *\/","attributes":[]}}}}},"\\Bolt\\EventListener\\":{"classes":{"AccessControlListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * AccessControl listener class.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$filesystem":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FilesystemInterface *\/","attributes":[]},"$sessionStorage":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var SessionStorage *\/","attributes":[]},"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManagerInterface *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FilesystemInterface    $filesystem\n     * @param SessionStorage         $sessionStorage\n     * @param EntityManagerInterface $em\n     *\/","attributes":[],"arguments":[{"name":"$filesystem","reference":false,"typehint":["FilesystemInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$sessionStorage","reference":false,"typehint":["SessionStorage"],"value":"","phpdoc":"","attributes":[]},{"name":"$em","reference":false,"typehint":["EntityManagerInterface"],"value":"","phpdoc":"","attributes":[]}]},"onStorageEventPostSave":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Users $userEntity *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["StorageEvent"],"value":"","phpdoc":"","attributes":[]}]},"onStorageEventPreDelete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Users $userEntity *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["StorageEvent"],"value":"","phpdoc":"","attributes":[]}]},"deleteAuthtokens":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Repository\\AuthtokenRepository $repo *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"deleteSessions":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var \\Bolt\\AccessControl\\Token\\Token $token *\/","attributes":[],"arguments":[{"name":"$user","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"SystemLoggerListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface","\\psr\\log\\loggerawareinterface"],"use":["\\psr\\log\\loggerawaretrait"],"useoptions":[""],"phpdoc":"\/**\n * Log kernel events to system logger.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param LoggerInterface $logger\n     *\/","attributes":[],"arguments":[{"name":"$logger","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]}]},"onException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Log exceptions thrown in the application.\n     *\n     * @param GetResponseForExceptionEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseForExceptionEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"RedirectListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Listener for redirects.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$session":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Symfony\\Component\\HttpFoundation\\Session\\Session *\/","attributes":[]},"$urlGenerator":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface *\/","attributes":[]},"$users":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Users *\/","attributes":[]},"$authentication":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\AccessControl\\AccessChecker $authentication *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * RedirectListener constructor.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Session\\Session          $session\n     * @param \\Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface $urlGenerator\n     * @param \\Bolt\\Users                                                $users\n     * @param \\Bolt\\AccessControl\\AccessChecker                          $authentication\n     *\/","attributes":[],"arguments":[{"name":"$session","reference":false,"typehint":["Session"],"value":"","phpdoc":"","attributes":[]},{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$users","reference":false,"typehint":["Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$authentication","reference":false,"typehint":["AccessChecker"],"value":"","phpdoc":"","attributes":[]}]},"onResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Kernel response listener callback.\n     *\n     * @param FilterResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["FilterResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"handleNoBackendAccess":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * When redirecting to the backend dashboard (while logged in),\n     * if the user does not have access change the redirect to the homepage.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\RedirectResponse $response\n     *\/","attributes":[],"arguments":[{"name":"$response","reference":false,"typehint":["RedirectResponse"],"value":"","phpdoc":"","attributes":[]}]},"handleLoginRetreat":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * When redirecting to login page set the 'retreat' variable in the session.\n     * This allows a redirect back to the current page after successful login.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request          $request\n     * @param \\Symfony\\Component\\HttpFoundation\\RedirectResponse $response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["RedirectResponse"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the events to subscribe to.\n     *\n     * @return array\n     *\/","attributes":[]}}},"SnippetListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"","attributes":[],"php":false,"properties":{"$queues":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var QueueInterface[] *\/","attributes":[]},"$canonical":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Canonical *\/","attributes":[]},"$packages":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Packages *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param QueueInterface[] $queues\n     * @param Canonical        $canonical\n     * @param Packages         $packages\n     * @param Config           $config\n     *\/","attributes":[],"arguments":[{"name":"$queues","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]},{"name":"$canonical","reference":false,"typehint":["Canonical"],"value":"","phpdoc":"","attributes":[]},{"name":"$packages","reference":false,"typehint":["Packages"],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]}]},"onResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Callback for response event.\n     *\n     * @param FilterResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["FilterResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"addSnippets":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add base snippets to the response.\n     *\/","attributes":[]},"encode":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Encode the snippet string and make it HTML safe.\n     *\n     * @param string $str\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$str","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"DisableXssProtectionListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Disable browser's XSS detection for given routes.\n *\n * These routes should still verify the request data with a CSRF token.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$routes":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string[] *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string[] $routes\n     *\/","attributes":[],"arguments":[{"name":"$routes","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"onResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Add X-XSS-Protection header if route matches, request is unsafe, and response has body.\n     *\n     * @param FilterResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["FilterResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"StorageEventListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":["\\bolt\\request\\profilerawaretrait"],"useoptions":[""],"phpdoc":"","attributes":[],"php":false,"properties":{"$em":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EntityManagerInterface *\/","attributes":[]},"$timedRecord":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var EventProcessor\\TimedRecord *\/","attributes":[]},"$schemaManager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Schema\\SchemaManagerInterface *\/","attributes":[]},"$urlGenerator":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var UrlGeneratorInterface *\/","attributes":[]},"$loggerFlash":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Bolt\\Logger\\FlashLoggerInterface *\/","attributes":[]},"$passwordFactory":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var PasswordFactory *\/","attributes":[]},"$hashStrength":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var int *\/","attributes":[]},"$timedRecordsEnabled":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param EntityManagerInterface        $em\n     * @param EventProcessor\\TimedRecord    $timedRecord\n     * @param Schema\\SchemaManagerInterface $schemaManager\n     * @param UrlGeneratorInterface         $urlGenerator\n     * @param FlashLoggerInterface          $loggerFlash\n     * @param PasswordFactory               $passwordFactory\n     * @param int                           $hashStrength\n     * @param bool                          $timedRecordsEnabled\n     *\/","attributes":[],"arguments":[{"name":"$em","reference":false,"typehint":["EntityManagerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$timedRecord","reference":false,"typehint":["EventProcessor\\TimedRecord"],"value":"","phpdoc":"","attributes":[]},{"name":"$schemaManager","reference":false,"typehint":["Schema\\SchemaManagerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$urlGenerator","reference":false,"typehint":["UrlGeneratorInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$loggerFlash","reference":false,"typehint":["FlashLoggerInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$passwordFactory","reference":false,"typehint":["PasswordFactory"],"value":"","phpdoc":"","attributes":[]},{"name":"$hashStrength","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$timedRecordsEnabled","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"onUserEntityPreSave":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/** @var Entity\\Users $entityRecord *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["StorageEvent"],"value":"","phpdoc":"","attributes":[]}]},"onPostHydrate":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Post hydration storage event.\n     *\n     * @param HydrationEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["HydrationEvent"],"value":"","phpdoc":"","attributes":[]}]},"onPreDelete":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Pre-delete event to delete an entities taxonomy & relation entities.\n     *\n     * @param StorageEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["StorageEvent"],"value":"","phpdoc":"","attributes":[]}]},"onKernelRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Kernel request listener callback.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"schemaCheck":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Trigger database schema checks if required.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"passwordHash":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Hash user passwords on save.\n     *\n     * @param Entity\\Users $usersEntity\n     *\/","attributes":[],"arguments":[{"name":"$usersEntity","reference":false,"typehint":["Entity\\Users"],"value":"","phpdoc":"","attributes":[]}]},"getValidHash":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return a valid hash for a password, of if the password is already hashed\n     * just return as is.\n     *\n     * @param string $password\n     *\n     * @throws AccessControlException\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$password","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"PagerListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Class PagerListener.\n *\n * @author Rix Beck <rix@neologik.hu>\n *\/","attributes":[],"php":false,"properties":{"$manager":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * PagerListener constructor.\n     *\n     * @param PagerManager $manager\n     *\/","attributes":[],"arguments":[{"name":"$manager","reference":false,"typehint":["PagerManager"],"value":"","phpdoc":"","attributes":[]}]},"onRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Resume the session if it has been started previously or debugging is enabled.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"TemplateViewListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Converts controller results that are TemplateView's to TemplateResponse's.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$twig":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Environment *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Environment $twig\n     *\/","attributes":[],"arguments":[{"name":"$twig","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"onView":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If controller result is a TemplateView, convert it to a TemplateResponse.\n     *\n     * @param GetResponseForControllerResultEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseForControllerResultEvent"],"value":"","phpdoc":"","attributes":[]}]},"render":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render TemplateView to a TemplateResponse.\n     *\n     * @param TemplateView $view\n     *\n     * @return TemplateResponse\n     *\/","attributes":[],"arguments":[{"name":"$view","reference":false,"typehint":["TemplateView"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"ExceptionListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":["\\bolt\\request\\profilerawaretrait"],"useoptions":[""],"phpdoc":"\/**\n * HTTP kernel exception routing listener.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$twig":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Environment *\/","attributes":[]},"$rootPath":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$saveDir":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var DirectoryInterface *\/","attributes":[]},"$slugifer":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var SlugifyInterface *\/","attributes":[]},"$debug":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$config":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]},"$users":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Users *\/","attributes":[]},"$session":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var SessionInterface *\/","attributes":[]},"$requestStack":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var RequestStack *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Environment        $twig\n     * @param string             $rootPath\n     * @param DirectoryInterface $saveDir\n     * @param SlugifyInterface   $slugifer\n     * @param bool               $debug\n     * @param Config             $config\n     * @param Users              $users\n     * @param SessionInterface   $session\n     * @param RequestStack       $requestStack\n     *\/","attributes":[],"arguments":[{"name":"$twig","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]},{"name":"$rootPath","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$saveDir","reference":false,"typehint":["DirectoryInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$slugifer","reference":false,"typehint":["SlugifyInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$debug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$users","reference":false,"typehint":["Users"],"value":"","phpdoc":"","attributes":[]},{"name":"$session","reference":false,"typehint":["SessionInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$requestStack","reference":false,"typehint":["RequestStack"],"value":"","phpdoc":"","attributes":[]}]},"onBootException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle boot initialisation exceptions.\n     *\n     * @param GetResponseForExceptionEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseForExceptionEvent"],"value":"","phpdoc":"","attributes":[]}]},"onKernelException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Handle errors thrown in the application.\n     *\n     * @param GetResponseForExceptionEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseForExceptionEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"renderException":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]},"renderDatabaseException":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["DatabaseExceptionInterface"],"value":"","phpdoc":"","attributes":[]}]},"renderSystemValidationException":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["AbstractSystemValidationException"],"value":"","phpdoc":"","attributes":[]}]},"getContext":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get a pre-packaged Twig context array.\n     *\n     * @param \\Exception $exception\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"null","phpdoc":"","attributes":[]}]},"getSafeTrace":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an exception trace that is safe to display publicly.\n     *\n     * @param \\Exception $exception\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]},"getSafeArguments":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get an array of safe (sanitised) function arguments from a trace entry.\n     *\n     * @param array $args\n     *\n     * @return array\n     *\/","attributes":[],"arguments":[{"name":"$args","reference":false,"typehint":["array"],"value":"","phpdoc":"","attributes":[]}]},"saveException":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attempt to save the serialised exception if in debug mode.\n     *\n     * @param \\Exception $exception\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]}}},"ConfigListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Configuration checks at the start of the request cycle.\n *\n * This is a temporary solution to remove the configuration checks from\n * pre-request, until such time as configuration can be refactored.\n *\n * @internal do not extend\/call\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Application *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"onRequestEarly":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Early functions.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"onRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Normal functions.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"setVersionChangeNotice":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * If required set a notification of version change, for admin users.\n     *\/","attributes":[]},"setGlobals":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Get the parameters that will be used to update Bolt's registered Twig\n     * globals.\n     *\n     * This is here as a transitory measure.\n     *\/","attributes":[]}}},"NotFoundListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Renders the not found page in the event of an HTTP exception.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$notFoundPage":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]},"$storage":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var Storage *\/","attributes":[]},"$templateChooser":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var TemplateChooser *\/","attributes":[]},"$twig":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Environment *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param string|array    $notFoundPage\n     * @param Storage         $storage\n     * @param TemplateChooser $templateChooser\n     * @param Environment     $twig\n     *\/","attributes":[],"arguments":[{"name":"$notFoundPage","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$storage","reference":false,"typehint":["Storage"],"value":"","phpdoc":"","attributes":[]},{"name":"$templateChooser","reference":false,"typehint":["TemplateChooser"],"value":"","phpdoc":"","attributes":[]},{"name":"$twig","reference":false,"typehint":["Environment"],"value":"","phpdoc":"","attributes":[]}]},"onKernelException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render the not found page if on frontend and http exception.\n     *\n     * @param GetResponseForExceptionEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseForExceptionEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]},"renderNotFound":{"visibility":"private","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Render a not found template.\n     *\n     * @param GetResponseForExceptionEvent $event\n     * @param string|string[]              $template\n     * @param array                        $context\n     *\n     * @throws RuntimeException\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseForExceptionEvent"],"value":"","phpdoc":"","attributes":[]},{"name":"$template","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$context","reference":false,"typehint":["array"],"value":"[ ]","phpdoc":"","attributes":[]}]}}},"ProfilerListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":["\\bolt\\request\\profilerawaretrait"],"useoptions":[""],"phpdoc":"\/**\n * Symfony Profiler listener.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$session":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var SessionInterface *\/","attributes":[]},"$debug":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$debugLoggedOff":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param SessionInterface $session\n     * @param bool             $debug\n     * @param bool             $debugLoggedOff\n     *\/","attributes":[],"arguments":[{"name":"$session","reference":false,"typehint":["SessionInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$debug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$debugLoggedOff","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"onKernelRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Request listener to prevent access to profiler routes when debugging is\n     * not enabled, or the user is logged off & debugging is not configured to\n     * show when logged off.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"ZoneGuesser":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Determine what zone a request is relative to.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application $app *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"onKernelRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Kernel request listener callback.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"setZone":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Sets the request's zone if needed and returns it.\n     *\n     * @param Request $request\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"determineZone":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine the zone and return it.\n     *\n     * @param Request $request\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"isPathApplicable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check is a request applies to a zone.\n     *\n     * @param Request $request\n     * @param string  $zone\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$zone","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"startsWith":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Check if a path string starts with a given prefix.\n     *\n     * @param string $path\n     * @param string $prefix\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$path","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$prefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the events to subscribe to.\n     *\n     * @return array\n     *\/","attributes":[]}}},"DoctrineListener":{"abstract":false,"final":false,"extends":"","implements":["\\doctrine\\common\\eventsubscriber"],"use":["\\psr\\log\\loggerawaretrait"],"useoptions":[""],"phpdoc":"\/**\n * Listener for Doctrine events.\n *\n * @author Carson Full <carsonfull@gmail.com>\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$config":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var Config *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param Config          $config\n     * @param LoggerInterface $logger\n     *\/","attributes":[],"arguments":[{"name":"$config","reference":false,"typehint":["Config"],"value":"","phpdoc":"","attributes":[]},{"name":"$logger","reference":false,"typehint":["LoggerInterface"],"value":"","phpdoc":"","attributes":[]}]},"failConnect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Event fired on database connection failure.\n     *\n     * @param FailedConnectionEvent $args\n     *\n     * @throws DatabaseConnectionException\n     *\/","attributes":[],"arguments":[{"name":"$args","reference":false,"typehint":["FailedConnectionEvent"],"value":"","phpdoc":"","attributes":[]}]},"postConnect":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * After connecting, update this connection's database settings.\n     *\n     * Note: Doctrine expects this method to be called postConnect\n     *\n     * @param ConnectionEventArgs $args\n     *\n     * @throws \\Doctrine\\DBAL\\DBALException\n     *\/","attributes":[],"arguments":[{"name":"$args","reference":false,"typehint":["ConnectionEventArgs"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[]}}},"ExceptionToJsonListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * Converts HTTP exceptions to JSON responses.\n *\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$pathResolver":{"value":"","visibility":"private","static":false,"typehint":[""],"phpdoc":"\/** @var PathResolver *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param PathResolver $pathResolver\n     *\/","attributes":[],"arguments":[{"name":"$pathResolver","reference":false,"typehint":["PathResolver"],"value":"","phpdoc":"","attributes":[]}]},"onException":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Listen for exceptions and convert them to JSON responses if necessary.\n     *\n     * @param GetResponseForExceptionEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseForExceptionEvent"],"value":"","phpdoc":"","attributes":[]}]},"isApplicable":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Determine if the request is applicable to receive a JSON response.\n     *\n     * @param Request $request\n     *\n     * @return bool\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]}]},"convert":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert the exception to a response.\n     *\n     * @param \\Exception $exception\n     *\n     * @return JsonResponse\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]},"getErrorType":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Convert the exception to an error type.\n     *\n     * @param \\Exception $exception\n     *\n     * @return string\n     *\/","attributes":[],"arguments":[{"name":"$exception","reference":false,"typehint":["\\Exception"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"FlashLoggerListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n * @author Carson Full <carsonfull@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$flashLogger":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var FlashBagAttachableInterface *\/","attributes":[]},"$debug":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var bool *\/","attributes":[]},"$profilerMountPrefix":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var string *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor.\n     *\n     * @param FlashBagAttachableInterface $flashLogger\n     * @param bool                        $debug\n     * @param string                      $profilerMountPrefix\n     *\/","attributes":[],"arguments":[{"name":"$flashLogger","reference":false,"typehint":["FlashBagAttachableInterface"],"value":"","phpdoc":"","attributes":[]},{"name":"$debug","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]},{"name":"$profilerMountPrefix","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"onRequest":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Resume the session if it has been started previously or debugging is enabled.\n     *\n     * @param GetResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["GetResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"onEvent":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Attach session's flash bag to flash logger if it is started.\n     *\n     * @param GetResponseEvent|FilterResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":[""],"value":"","phpdoc":"","attributes":[]}]},"attachFlashBag":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"","attributes":[],"arguments":[{"name":"$session","reference":false,"typehint":["SessionInterface"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * {@inheritdoc}\n     *\/","attributes":[]}}},"GeneralListener":{"abstract":false,"final":false,"extends":"","implements":["\\symfony\\component\\eventdispatcher\\eventsubscriberinterface"],"use":[],"useoptions":[],"phpdoc":"\/**\n * General routing listeners.\n *\n * @author Gawain Lynch <gawain.lynch@gmail.com>\n *\/","attributes":[],"php":false,"properties":{"$app":{"value":"","visibility":"protected","static":false,"typehint":[""],"phpdoc":"\/** @var \\Silex\\Application $app *\/","attributes":[]}},"methods":{"__construct":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Constructor function.\n     *\n     * @param Application $app\n     *\/","attributes":[],"arguments":[{"name":"$app","reference":false,"typehint":["Application"],"value":"","phpdoc":"","attributes":[]}]},"onResponse":{"visibility":"public","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Kernel response listener callback.\n     *\n     * @param FilterResponseEvent $event\n     *\/","attributes":[],"arguments":[{"name":"$event","reference":false,"typehint":["FilterResponseEvent"],"value":"","phpdoc":"","attributes":[]}]},"setFrameOptions":{"visibility":"protected","static":false,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Set the 'X-Frame-Options' headers to prevent click-jacking, unless\n     * specifically disabled. Backend only!\n     *\n     * @param Request  $request\n     * @param Response $response\n     *\/","attributes":[],"arguments":[{"name":"$request","reference":false,"typehint":["Request"],"value":"","phpdoc":"","attributes":[]},{"name":"$response","reference":false,"typehint":["Response"],"value":"","phpdoc":"","attributes":[]}]},"getSubscribedEvents":{"visibility":"public","static":true,"abstract":false,"reference":false,"returntypes":[""],"phpdoc":"\/**\n     * Return the events to subscribe to.\n     *\n     * @return array\n     *\/","attributes":[]}}}}}}}