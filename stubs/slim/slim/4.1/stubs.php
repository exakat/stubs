<?php
/**
  * Generated by Exakat 2.1.6 (Build 1091)
  * On 2020-08-25T06:44:38+00:00
  * See https://www.exakat.io/
  */

namespace  {
}

namespace Slim {
    class App extends \slim\routing\routecollectorproxy implements \psr\http\server\requesthandlerinterface {
        public const VERSION = '4.1.0';

        /**
         * @var MiddlewareDispatcher
         */
        protected $middlewareDispatcher;
        /**
         * @var RouteResolverInterface
         */
        protected $routeResolver;

        public function __construct(ResponseFactoryInterface $responseFactory, ?ContainerInterface $container = null, ?CallableResolverInterface $callableResolver = null, ?RouteCollectorInterface $routeCollector = null, ?RouteResolverInterface $routeResolver = null) {}
        /**
         * @return RouteResolverInterface
         */
        public function getRouteResolver() : RouteResolverInterface {}
        public function add($middleware) : self {}
        public function addMiddleware(MiddlewareInterface $middleware) : self {}
        /**
         * Add the slim built-in routing middleware to the app middleware stack
         *
         * @return RoutingMiddleware
         */
        public function addRoutingMiddleware() : RoutingMiddleware {}
        public function addErrorMiddleware(bool $displayErrorDetails, bool $logErrors, bool $logErrorDetails) : ErrorMiddleware {}
        public function run(?ServerRequestInterface $request = null) : void {}
/**
 * This is to be in compliance with RFC 2616, Section 9.
 * If the incoming request method is HEAD, we need to ensure that the response body
 * is empty as the request may fall back on a GET route handler due to FastRoute's
 * routing logic which could potentially append content to the response body
 * https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4
 */
        public function handle(/**
 * This is to be in compliance with RFC 2616, Section 9.
 * If the incoming request method is HEAD, we need to ensure that the response body
 * is empty as the request may fall back on a GET route handler due to FastRoute's
 * routing logic which could potentially append content to the response body
 * https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4
 */
ServerRequestInterface $request) : ResponseInterface {}
    }

    class DeferredCallable {
        /**
         * @var callable|string
         */
        protected $callable;
        /**
         * @var CallableResolverInterface|null
         */
        protected $callableResolver;

        public function __construct($callable, ?CallableResolverInterface $resolver = null) {}
/** @var callable $callable */
        public function __invoke(/** @var callable $callable */
$args) {}
    }

    class MiddlewareDispatcher implements \psr\http\server\requesthandlerinterface {
        /**
         * Tip of the middleware call stack
         *
         * @var RequestHandlerInterface
         */
        protected $tip;
        /**
         * @var ContainerInterface|null
         */
        protected $container;

        public function __construct(RequestHandlerInterface $kernel, ?ContainerInterface $container = null) {}
        protected function seedMiddlewareStack(RequestHandlerInterface $kernel) : void {}
        public function handle(ServerRequestInterface $request) : ResponseInterface {}
        public function add($middleware) : self {}
        public function addMiddleware(MiddlewareInterface $middleware) : self {}
        public function addDeferred(string $middleware) : self {}
        public function addCallable(callable $middleware) : self {}
    }

    class ResponseEmitter {
        /**
         * @var int
         */
        private $responseChunkSize;

        public function __construct(int $responseChunkSize = 4096) {}
        public function emit(ResponseInterface $response) : void {}
        private function emitHeaders(ResponseInterface $response) : void {}
        private function emitStatusLine(ResponseInterface $response) : void {}
        private function emitBody(ResponseInterface $response) : void {}
        public function isResponseEmpty(ResponseInterface $response) : bool {}
    }

    /**
     * This class resolves a string of the format 'class:method' into a closure
     * that can be dispatched.
     */
    final class CallableResolver implements \slim\interfaces\callableresolverinterface {
        /**
         * @var string
         */
        static public $callablePattern;
        /**
         * @var ContainerInterface|null
         */
        private $container;

        public function __construct(?ContainerInterface $container = null) {}
        public function resolve($toResolve) : callable {}
    }

}

namespace Slim\Middleware {
    class RoutingMiddleware implements \psr\http\server\middlewareinterface {
        /**
         * @var RouteResolverInterface
         */
        protected $routeResolver;
        /**
         * @var RouteParserInterface
         */
        protected $routeParser;

        public function __construct(RouteResolverInterface $routeResolver, RouteParserInterface $routeParser) {}
        public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface {}
        public function performRouting(ServerRequestInterface $request) : ServerRequestInterface {}
    }

    class ContentLengthMiddleware implements \psr\http\server\middlewareinterface {
/** @var ResponseInterface $response */
        public function process(/** @var ResponseInterface $response */
ServerRequestInterface $request, /** @var ResponseInterface $response */
RequestHandlerInterface $handler) : ResponseInterface {}
    }

    class MethodOverrideMiddleware implements \psr\http\server\middlewareinterface {
        public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface {}
    }

    class OutputBufferingMiddleware implements \psr\http\server\middlewareinterface {
        public const PREPEND = 'prepend';
        public const APPEND = 'append';

        /**
         * @var StreamFactoryInterface
         */
        protected $streamFactory;
        /**
         * @var string
         */
        protected $style;

        public function __construct(StreamFactoryInterface $streamFactory, string $style = 'append') {}
/** @var ResponseInterface $response */
        public function process(/** @var ResponseInterface $response */
ServerRequestInterface $request, /** @var ResponseInterface $response */
RequestHandlerInterface $handler) : ResponseInterface {}
    }

    class ErrorMiddleware implements \psr\http\server\middlewareinterface {
        /**
         * @var CallableResolverInterface
         */
        protected $callableResolver;
        /**
         * @var ResponseFactoryInterface
         */
        protected $responseFactory;
        /**
         * @var bool
         */
        protected $displayErrorDetails;
        /**
         * @var bool
         */
        protected $logErrors;
        /**
         * @var bool
         */
        protected $logErrorDetails;
        /**
         * @var array
         */
        protected $handlers;
        /**
         * @var ErrorHandlerInterface|callable|null
         */
        protected $defaultErrorHandler;

        public function __construct(CallableResolverInterface $callableResolver, ResponseFactoryInterface $responseFactory, bool $displayErrorDetails, bool $logErrors, bool $logErrorDetails) {}
        public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface {}
        public function handleException(ServerRequestInterface $request, Throwable $exception) : ResponseInterface {}
        public function getErrorHandler(string $type) {}
        /**
         * Get default error handler
         *
         * @return ErrorHandler|callable
         */
        public function getDefaultErrorHandler() {}
        public function setDefaultErrorHandler($handler) : self {}
        public function setErrorHandler(string $type, $handler) : self {}
    }

}

namespace Slim\Routing {
    class RouteCollectorProxy implements \slim\interfaces\routecollectorproxyinterface {
        /**
         * @var ResponseFactoryInterface
         */
        protected $responseFactory;
        /**
         * @var CallableResolverInterface
         */
        protected $callableResolver;
        /**
         * @var ContainerInterface|null
         */
        protected $container;
        /**
         * @var RouteCollectorInterface
         */
        protected $routeCollector;
        /**
         * @var string
         */
        protected $basePath;

        public function __construct(ResponseFactoryInterface $responseFactory, CallableResolverInterface $callableResolver, ?ContainerInterface $container = null, ?RouteCollectorInterface $routeCollector = null, string $basePath = '') {}
        /**
         * {@inheritdoc}
         */
        public function getResponseFactory() : ResponseFactoryInterface {}
        /**
         * {@inheritdoc}
         */
        public function getCallableResolver() : CallableResolverInterface {}
        /**
         * {@inheritdoc}
         */
        public function getContainer() : ?ContainerInterface {}
        /**
         * {@inheritdoc}
         */
        public function getRouteCollector() : RouteCollectorInterface {}
        /**
         * {@inheritdoc}
         */
        public function getBasePath() : string {}
        public function setBasePath(string $basePath) : RouteCollectorProxyInterface {}
        public function get(string $pattern, $callable) : RouteInterface {}
        public function post(string $pattern, $callable) : RouteInterface {}
        public function put(string $pattern, $callable) : RouteInterface {}
        public function patch(string $pattern, $callable) : RouteInterface {}
        public function delete(string $pattern, $callable) : RouteInterface {}
        public function options(string $pattern, $callable) : RouteInterface {}
        public function any(string $pattern, $callable) : RouteInterface {}
        public function map(array $methods, string $pattern, $callable) : RouteInterface {}
        public function group(string $pattern, $callable) : RouteGroupInterface {}
        public function redirect(string $from, $to, int $status = 302) : RouteInterface {}
    }

    class RoutingResults {
        public const NOT_FOUND = 0;
        public const FOUND = 1;
        public const METHOD_NOT_ALLOWED = 2;

        /**
         * @var DispatcherInterface
         */
        protected $dispatcher;
        /**
         * @var string
         */
        protected $method;
        /**
         * @var string
         */
        protected $uri;
        /**
         * @var int
         * The status is one of the constants shown above
         * NOT_FOUND = 0
         * FOUND = 1
         * METHOD_NOT_ALLOWED = 2
         */
        protected $routeStatus;
        /**
         * @var null|string
         */
        protected $routeIdentifier;
        /**
         * @var array
         */
        protected $routeArguments;

        public function __construct(DispatcherInterface $dispatcher, string $method, string $uri, int $routeStatus, ?string $routeIdentifier = null, array $routeArguments = [ ]) {}
        /**
         * @return DispatcherInterface
         */
        public function getDispatcher() : DispatcherInterface {}
        /**
         * @return string
         */
        public function getMethod() : string {}
        /**
         * @return string
         */
        public function getUri() : string {}
        /**
         * @return int
         */
        public function getRouteStatus() : int {}
        /**
         * @return null|string
         */
        public function getRouteIdentifier() : ?string {}
        public function getRouteArguments(bool $urlDecode = true) : array {}
        /**
         * @return array
         */
        public function getAllowedMethods() : array {}
    }

    class FastRouteDispatcher extends \fastroute\dispatcher\groupcountbased {
        /**
         * @var array
         */
        private $allowedMethods;

        public function dispatch($httpMethod, $uri) : array {}
        protected function routingResultsFromVariableRouteResults(array $result) : array {}
        public function getAllowedMethods(string $uri) : array {}
    }

    class Dispatcher implements \slim\interfaces\dispatcherinterface {
        /**
         * @var RouteCollectorInterface
         */
        private $routeCollector;
        /**
         * @var FastRouteDispatcher|null
         */
        private $dispatcher;

        public function __construct(RouteCollectorInterface $routeCollector) {}
        /**
         * @return FastRouteDispatcher
         */
        protected function createDispatcher() : FastRouteDispatcher {}
        public function dispatch(string $method, string $uri) : RoutingResults {}
        public function getAllowedMethods(string $uri) : array {}
    }

    final class RouteContext {
        /**
         * @var RouteInterface|null
         */
        private $route;
        /**
         * @var RouteParserInterface
         */
        private $routeParser;
        /**
         * @var RoutingResults
         */
        private $routingResults;

        public static function fromRequest(ServerRequestInterface $serverRequest) : self {}
        private function __construct(?RouteInterface $route, RouteParserInterface $routeParser, RoutingResults $routingResults) {}
        /**
         * @return RouteInterface|null
         */
        public function getRoute() : ?RouteInterface {}
        /**
         * @return RouteParserInterface
         */
        public function getRouteParser() : RouteParserInterface {}
        /**
         * @return RoutingResults
         */
        public function getRoutingResults() : RoutingResults {}
    }

    class RouteRunner implements \psr\http\server\requesthandlerinterface {
        /**
         * @var RouteResolverInterface
         */
        private $routeResolver;
        /**
         * @var RouteParserInterface
         */
        private $routeParser;

        public function __construct(RouteResolverInterface $routeResolver, RouteParserInterface $routeParser) {}
/** @var Route $route */
        public function handle(/** @var Route $route */
ServerRequestInterface $request) : ResponseInterface {}
    }

    class RouteGroup implements \slim\interfaces\routegroupinterface {
        /**
         * @var callable|string
         */
        protected $callable;
        /**
         * @var CallableResolverInterface
         */
        protected $callableResolver;
        /**
         * @var RouteCollectorProxyInterface
         */
        protected $routeCollectorProxy;
        /**
         * @var MiddlewareInterface[]|string[]|callable[]
         */
        protected $middleware;
        /**
         * @var string
         */
        protected $pattern;

        public function __construct(string $pattern, $callable, CallableResolverInterface $callableResolver, RouteCollectorProxyInterface $routeCollectorProxy) {}
        /**
         * {@inheritdoc}
         */
        public function collectRoutes() : RouteGroupInterface {}
        public function add($middleware) : RouteGroupInterface {}
        public function addMiddleware(MiddlewareInterface $middleware) : RouteGroupInterface {}
        public function appendMiddlewareToDispatcher(MiddlewareDispatcher $dispatcher) : RouteGroupInterface {}
        /**
         * {@inheritdoc}
         */
        public function getPattern() : string {}
    }

    class Route implements \slim\interfaces\routeinterface, \psr\http\server\requesthandlerinterface {
        /**
         * HTTP methods supported by this route
         *
         * @var string[]
         */
        protected $methods;
        /**
         * Route identifier
         *
         * @var string
         */
        protected $identifier;
        /**
         * Route name
         *
         * @var null|string
         */
        protected $name;
        /**
         * Parent route groups
         *
         * @var RouteGroupInterface[]
         */
        protected $groups;
        /**
         * @var InvocationStrategyInterface
         */
        protected $invocationStrategy;
        /**
         * Route parameters
         *
         * @var array
         */
        protected $arguments;
        /**
         * Route arguments parameters
         *
         * @var array
         */
        protected $savedArguments;
        /**
         * Container
         *
         * @var ContainerInterface|null
         */
        protected $container;
        /**
         * @var MiddlewareDispatcher
         */
        protected $middlewareDispatcher;
        /**
         * Route callable
         *
         * @var callable|string
         */
        protected $callable;
        /**
         * @var CallableResolverInterface
         */
        protected $callableResolver;
        /**
         * @var ResponseFactoryInterface
         */
        protected $responseFactory;
        /**
         * Route pattern
         *
         * @var string
         */
        protected $pattern;
        /**
         * @var bool
         */
        protected $groupMiddlewareAppended;

        public function __construct(array $methods, string $pattern, $callable, ResponseFactoryInterface $responseFactory, CallableResolverInterface $callableResolver, ?ContainerInterface $container = null, ?InvocationStrategyInterface $invocationStrategy = null, array $groups = [ ], int $identifier = 0) {}
        /**
         * @return CallableResolverInterface
         */
        public function getCallableResolver() : CallableResolverInterface {}
        /**
         * {@inheritdoc}
         */
        public function getInvocationStrategy() : InvocationStrategyInterface {}
        public function setInvocationStrategy(InvocationStrategyInterface $invocationStrategy) : RouteInterface {}
        /**
         * {@inheritdoc}
         */
        public function getMethods() : array {}
        /**
         * {@inheritdoc}
         */
        public function getPattern() : string {}
        public function setPattern(string $pattern) : RouteInterface {}
        /**
         * {@inheritdoc}
         */
        public function getCallable() {}
        public function setCallable($callable) : RouteInterface {}
        /**
         * {@inheritdoc}
         */
        public function getName() : ?string {}
        public function setName(string $name) : RouteInterface {}
        /**
         * {@inheritdoc}
         */
        public function getIdentifier() : string {}
        public function getArgument(string $name, ?string $default = null) : ?string {}
        /**
         * {@inheritdoc}
         */
        public function getArguments() : array {}
        public function setArguments(array $arguments, bool $includeInSavedArguments = true) : RouteInterface {}
        /**
         * @return RouteGroupInterface[]
         */
        public function getGroups() : array {}
        public function add($middleware) : RouteInterface {}
        public function addMiddleware(MiddlewareInterface $middleware) : RouteInterface {}
        public function prepare(array $arguments) : RouteInterface {}
        public function setArgument(string $name, string $value, bool $includeInSavedArguments = true) : RouteInterface {}
        public function run(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * @return void
         */
        protected function appendGroupMiddlewareToRoute() : void {}
        public function handle(ServerRequestInterface $request) : ResponseInterface {}
    }

    /**
     * RouteCollector is used to collect routes and route groups
     * as well as generate paths and URLs relative to its environment
     */
    class RouteCollector implements \slim\interfaces\routecollectorinterface {
        /**
         * @var RouteParserInterface
         */
        protected $routeParser;
        /**
         * @var CallableResolverInterface
         */
        protected $callableResolver;
        /**
         * @var ContainerInterface|null
         */
        protected $container;
        /**
         * @var InvocationStrategyInterface
         */
        protected $defaultInvocationStrategy;
        /**
         * Base path used in pathFor()
         *
         * @var string
         */
        protected $basePath;
        /**
         * Path to fast route cache file. Set to false to disable route caching
         *
         * @var string|null
         */
        protected $cacheFile;
        /**
         * Routes
         *
         * @var RouteInterface[]
         */
        protected $routes;
        /**
         * Route groups
         *
         * @var RouteGroup[]
         */
        protected $routeGroups;
        /**
         * Route counter incrementer
         *
         * @var int
         */
        protected $routeCounter;
        /**
         * @var ResponseFactoryInterface
         */
        protected $responseFactory;

        public function __construct(ResponseFactoryInterface $responseFactory, CallableResolverInterface $callableResolver, ?ContainerInterface $container = null, ?InvocationStrategyInterface $defaultInvocationStrategy = null, ?RouteParserInterface $routeParser = null, ?string $cacheFile = null) {}
        /**
         * @return RouteParserInterface
         */
        public function getRouteParser() : RouteParserInterface {}
        /**
         * Get default route invocation strategy
         *
         * @return InvocationStrategyInterface
         */
        public function getDefaultInvocationStrategy() : InvocationStrategyInterface {}
        public function setDefaultInvocationStrategy(InvocationStrategyInterface $strategy) : RouteCollectorInterface {}
        /**
         * {@inheritdoc}
         */
        public function getCacheFile() : ?string {}
        public function setCacheFile(string $cacheFile) : RouteCollectorInterface {}
        /**
         * {@inheritdoc}
         */
        public function getBasePath() : string {}
        public function setBasePath(string $basePath) : RouteCollectorInterface {}
        /**
         * {@inheritdoc}
         */
        public function getRoutes() : array {}
/** @var Route $route */
        public function removeNamedRoute(/** @var Route $route */
string $name) : RouteCollectorInterface {}
        public function getNamedRoute(string $name) : RouteInterface {}
        public function lookupRoute(string $identifier) : RouteInterface {}
        public function group(string $pattern, $callable) : RouteGroupInterface {}
        public function map(array $methods, string $pattern, $handler) : RouteInterface {}
        protected function createRoute(array $methods, string $pattern, $callable) : RouteInterface {}
    }

    class RouteParser implements \slim\interfaces\routeparserinterface {
        /**
         * @var RouteCollectorInterface
         */
        private $routeCollector;
        /**
         * @var Std
         */
        private $routeParser;

        public function __construct(RouteCollectorInterface $routeCollector) {}
        public function relativeUrlFor(string $routeName, array $data = [ ], array $queryParams = [ ]) : string {}
        public function urlFor(string $routeName, array $data = [ ], array $queryParams = [ ]) : string {}
        public function fullUrlFor(UriInterface $uri, string $routeName, array $data = [ ], array $queryParams = [ ]) : string {}
    }

    /**
     * RouteResolver instantiates the FastRoute dispatcher
     * and computes the routing results of a given URI and request method
     */
    class RouteResolver implements \slim\interfaces\routeresolverinterface {
        /**
         * @var RouteCollectorInterface
         */
        protected $routeCollector;
        /**
         * @var DispatcherInterface
         */
        private $dispatcher;

        public function __construct(RouteCollectorInterface $routeCollector, ?DispatcherInterface $dispatcher = null) {}
        public function computeRoutingResults(string $uri, string $method) : RoutingResults {}
        public function resolveRoute(string $identifier) : RouteInterface {}
    }

}

namespace Slim\Error {
    /**
     * Abstract Slim application error renderer
     *
     * It outputs the error message and diagnostic information in one of the following formats:
     * JSON, XML, Plain Text or HTML
     */
    abstract class AbstractErrorRenderer implements \slim\interfaces\errorrendererinterface {}

}

namespace Slim\Error\Renderers {
    /**
     * Default Slim application Plain Text Error Renderer
     */
    class PlainTextErrorRenderer extends \slim\error\abstracterrorrenderer {
        public function __invoke(Throwable $exception, bool $displayErrorDetails) : string {}
        private function formatExceptionFragment(Throwable $exception) : string {}
    }

    /**
     * Default Slim application HTML Error Renderer
     */
    class HtmlErrorRenderer extends \slim\error\abstracterrorrenderer {
        public function __invoke(Throwable $exception, bool $displayErrorDetails) : string {}
        private function renderExceptionFragment(Throwable $exception) : string {}
        public function renderHtmlBody(string $title = '', string $html = '') : string {}
    }

    /**
     * Default Slim application JSON Error Renderer
     */
    class JsonErrorRenderer extends \slim\error\abstracterrorrenderer {
        public function __invoke(Throwable $exception, bool $displayErrorDetails) : string {}
        private function formatExceptionFragment(Throwable $exception) : array {}
    }

    /**
     * Default Slim application XML Error Renderer
     */
    class XmlErrorRenderer extends \slim\error\abstracterrorrenderer {
        public function __invoke(Throwable $exception, bool $displayErrorDetails) : string {}
        private function createCdataSection(string $content) : string {}
    }

}

namespace Slim\Exception {
    class HttpNotFoundException extends \slim\exception\httpspecializedexception {
        protected $code;
        protected $message;
        protected $title;
        protected $description;

    }

    class HttpMethodNotAllowedException extends \slim\exception\httpspecializedexception {
        /**
         * @var array
         */
        protected $allowedMethods;
        protected $code;
        protected $message;
        protected $title;
        protected $description;

        /**
         * @return array
         */
        public function getAllowedMethods() : array {}
        public function setAllowedMethods(array $methods) : HttpMethodNotAllowedException {}
    }

    class HttpException extends \exception {
        /**
         * @var ServerRequestInterface
         */
        protected $request;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $description;

        public function __construct(ServerRequestInterface $request, string $message = '', int $code = 0, ?Throwable $previous = null) {}
        /**
         * @return ServerRequestInterface
         */
        public function getRequest() : ServerRequestInterface {}
        /**
         * @return string
         */
        public function getTitle() : string {}
        public function setTitle(string $title) : self {}
        /**
         * @return string
         */
        public function getDescription() : string {}
        public function setDescription(string $description) : self {}
    }

    class HttpBadRequestException extends \slim\exception\httpspecializedexception {
        protected $code;
        protected $message;
        protected $title;
        protected $description;

    }

    class HttpForbiddenException extends \slim\exception\httpspecializedexception {
        protected $code;
        protected $message;
        protected $title;
        protected $description;

    }

    class HttpNotImplementedException extends \slim\exception\httpspecializedexception {
        protected $code;
        protected $message;
        protected $title;
        protected $description;

    }

    abstract class HttpSpecializedException extends \slim\exception\httpexception {
        public function __construct(ServerRequestInterface $request, ?string $message = null, ?Throwable $previous = null) {}
    }

    class HttpInternalServerErrorException extends \slim\exception\httpspecializedexception {
        protected $code;
        protected $message;
        protected $title;
        protected $description;

    }

    class HttpUnauthorizedException extends \slim\exception\httpspecializedexception {
        protected $code;
        protected $message;
        protected $title;
        protected $description;

    }

}

namespace Slim\Handlers {
    /**
     * Default Slim application error handler
     *
     * It outputs the error message and diagnostic information in one of the following formats:
     * JSON, XML, Plain Text or HTML based on the Accept header.
     */
    class ErrorHandler implements \slim\interfaces\errorhandlerinterface {
        /**
         * @var string
         */
        protected $defaultErrorRendererContentType;
        /**
         * @var ErrorRendererInterface|string|callable
         */
        protected $defaultErrorRenderer;
        /**
         * @var array
         */
        protected $errorRenderers;
        /**
         * @var bool
         */
        protected $displayErrorDetails;
        /**
         * @var bool
         */
        protected $logErrors;
        /**
         * @var bool
         */
        protected $logErrorDetails;
        /**
         * @var string|null
         */
        protected $contentType;
        /**
         * @var string
         */
        protected $method;
        /**
         * @var ServerRequestInterface
         */
        protected $request;
        /**
         * @var Throwable
         */
        protected $exception;
        /**
         * @var int
         */
        protected $statusCode;
        /**
         * @var CallableResolverInterface
         */
        protected $callableResolver;
        /**
         * @var ResponseFactoryInterface
         */
        protected $responseFactory;

        public function __construct(CallableResolverInterface $callableResolver, ResponseFactoryInterface $responseFactory) {}
        public function __invoke(ServerRequestInterface $request, Throwable $exception, bool $displayErrorDetails, bool $logErrors, bool $logErrorDetails) : ResponseInterface {}
        public function forceContentType(?string $contentType) : void {}
        /**
         * @return int
         */
        protected function determineStatusCode() : int {}
/**
 * Ensure other supported content types take precedence over text/plain
 * when multiple content types are provided via Accept header.
 */
        protected function determineContentType(/**
 * Ensure other supported content types take precedence over text/plain
 * when multiple content types are provided via Accept header.
 */
ServerRequestInterface $request) : ?string {}
        /**
         * Determine which renderer to use based on content type
         *
         * @return callable
         *
         * @throws RuntimeException
         */
        protected function determineRenderer() : callable {}
        public function registerErrorRenderer(string $contentType, $errorRenderer) : void {}
        public function setDefaultErrorRenderer(string $contentType, $errorRenderer) : void {}
        /**
         * Write to the error log if $logErrors has been set to true
         *
         * @return void
         */
        protected function writeToErrorLog() : void {}
        protected function logError(string $error) : void {}
        /**
         * @return ResponseInterface
         */
        protected function respond() : ResponseInterface {}
    }

}

namespace Slim\Handlers\Strategies {
    /**
     * Default route callback strategy with route parameters as an array of arguments.
     */
    class RequestResponse implements \slim\interfaces\invocationstrategyinterface {
        public function __invoke(callable $callable, ServerRequestInterface $request, ResponseInterface $response, array $routeArguments) : ResponseInterface {}
    }

    /**
     * Route callback strategy with route parameters as individual arguments.
     */
    class RequestResponseArgs implements \slim\interfaces\invocationstrategyinterface {
        public function __invoke(callable $callable, ServerRequestInterface $request, ResponseInterface $response, array $routeArguments) : ResponseInterface {}
    }

    /**
     * PSR-15 RequestHandler invocation strategy
     */
    class RequestHandler implements \slim\interfaces\requesthandlerinvocationstrategyinterface {
        /**
         * @var bool
         */
        protected $appendRouteArgumentsToRequestAttributes;

        public function __construct(bool $appendRouteArgumentsToRequestAttributes = false) {}
        public function __invoke(callable $callable, ServerRequestInterface $request, ResponseInterface $response, array $routeArguments) : ResponseInterface {}
    }

}

namespace Slim\Factory {
    class AppFactory {
        /**
         * @var Psr17FactoryProviderInterface|null
         */
        static protected $psr17FactoryProvider;
        /**
         * @var ResponseFactoryInterface|null
         */
        static protected $responseFactory;
        /**
         * @var StreamFactoryInterface|null
         */
        static protected $streamFactory;
        /**
         * @var ContainerInterface|null
         */
        static protected $container;
        /**
         * @var CallableResolverInterface|null
         */
        static protected $callableResolver;
        /**
         * @var RouteCollectorInterface|null
         */
        static protected $routeCollector;
        /**
         * @var RouteResolverInterface|null
         */
        static protected $routeResolver;
        /**
         * @var bool
         */
        static protected $slimHttpDecoratorsAutomaticDetectionEnabled;

        public static function create(?ResponseFactoryInterface $responseFactory = null, ?ContainerInterface $container = null, ?CallableResolverInterface $callableResolver = null, ?RouteCollectorInterface $routeCollector = null, ?RouteResolverInterface $routeResolver = null) : App {}
        /**
         * @return ResponseFactoryInterface
         * @throws RuntimeException
         */
        public static function determineResponseFactory() : ResponseFactoryInterface {}
        protected static function attemptResponseFactoryDecoration(ResponseFactoryInterface $responseFactory, StreamFactoryInterface $streamFactory) : ResponseFactoryInterface {}
        public static function setPsr17FactoryProvider(Psr17FactoryProviderInterface $psr17FactoryProvider) : void {}
        public static function setResponseFactory(ResponseFactoryInterface $responseFactory) : void {}
        public static function setStreamFactory(StreamFactoryInterface $streamFactory) : void {}
        public static function setContainer(ContainerInterface $container) : void {}
        public static function setCallableResolver(CallableResolverInterface $callableResolver) : void {}
        public static function setRouteCollector(RouteCollectorInterface $routeCollector) : void {}
        public static function setRouteResolver(RouteResolverInterface $routeResolver) : void {}
        public static function setSlimHttpDecoratorsAutomaticDetection(bool $enabled) : void {}
    }

    class ServerRequestCreatorFactory {
        /**
         * @var Psr17FactoryProviderInterface|null
         */
        static protected $psr17FactoryProvider;
        /**
         * @var ServerRequestCreatorInterface|null
         */
        static protected $serverRequestCreator;
        /**
         * @var bool
         */
        static protected $slimHttpDecoratorsAutomaticDetectionEnabled;

        /**
         * @return ServerRequestCreatorInterface
         */
        public static function create() : ServerRequestCreatorInterface {}
        /**
         * @return ServerRequestCreatorInterface
         * @throws RuntimeException
         */
        public static function determineServerRequestCreator() : ServerRequestCreatorInterface {}
        protected static function attemptServerRequestCreatorDecoration(ServerRequestCreatorInterface $serverRequestCreator) : ServerRequestCreatorInterface {}
        public static function setPsr17FactoryProvider(Psr17FactoryProviderInterface $psr17FactoryProvider) : void {}
        public static function setServerRequestCreator(ServerRequestCreatorInterface $serverRequestCreator) : void {}
        public static function setSlimHttpDecoratorsAutomaticDetection(bool $enabled) : void {}
    }

}

namespace Slim\Factory\Psr17 {
    class NyholmPsr17Factory extends \slim\factory\psr17\psr17factory {
        static protected $responseFactoryClass;
        static protected $streamFactoryClass;
        static protected $serverRequestCreatorClass;
        static protected $serverRequestCreatorMethod;

        /**
         * {@inheritdoc}
         */
        public static function getServerRequestCreator() : ServerRequestCreatorInterface {}
    }

    class ZendDiactorosPsr17Factory extends \slim\factory\psr17\psr17factory {
        static protected $responseFactoryClass;
        static protected $streamFactoryClass;
        static protected $serverRequestCreatorClass;
        static protected $serverRequestCreatorMethod;

    }

    class ServerRequestCreator implements \slim\interfaces\serverrequestcreatorinterface {
        /**
         * @var object|string
         */
        protected $serverRequestCreator;
        /**
         * @var string
         */
        protected $serverRequestCreatorMethod;

        public function __construct($serverRequestCreator, string $serverRequestCreatorMethod) {}
        /**
         * {@inheritdoc}
         */
        public function createServerRequestFromGlobals() : ServerRequestInterface {}
    }

    class GuzzlePsr17Factory extends \slim\factory\psr17\psr17factory {
        static protected $responseFactoryClass;
        static protected $streamFactoryClass;
        static protected $serverRequestCreatorClass;
        static protected $serverRequestCreatorMethod;

    }

    class SlimHttpServerRequestCreator implements \slim\interfaces\serverrequestcreatorinterface {
        /**
         * @var ServerRequestCreatorInterface
         */
        protected $serverRequestCreator;
        /**
         * @var string
         */
        static protected $serverRequestDecoratorClass;

        public function __construct(ServerRequestCreatorInterface $serverRequestCreator) {}
        /**
         * {@inheritdoc}
         */
        public function createServerRequestFromGlobals() : ServerRequestInterface {}
        /**
         * @return bool
         */
        public static function isServerRequestDecoratorAvailable() : bool {}
    }

    class SlimHttpPsr17Factory extends \slim\factory\psr17\psr17factory {
        static protected $responseFactoryClass;

        public static function createDecoratedResponseFactory(ResponseFactoryInterface $responseFactory, StreamFactoryInterface $streamFactory) : ResponseFactoryInterface {}
    }

    class SlimPsr17Factory extends \slim\factory\psr17\psr17factory {
        static protected $responseFactoryClass;
        static protected $streamFactoryClass;
        static protected $serverRequestCreatorClass;
        static protected $serverRequestCreatorMethod;

    }

    abstract class Psr17Factory implements \slim\interfaces\psr17factoryinterface {
        /**
         * @var string
         */
        static protected $responseFactoryClass;
        /**
         * @var string
         */
        static protected $streamFactoryClass;
        /**
         * @var string
         */
        static protected $serverRequestCreatorClass;
        /**
         * @var string
         */
        static protected $serverRequestCreatorMethod;

        /**
         * {@inheritdoc}
         */
        public static function getResponseFactory() : ResponseFactoryInterface {}
        /**
         * {@inheritdoc}
         */
        public static function getStreamFactory() : StreamFactoryInterface {}
        /**
         * {@inheritdoc}
         */
        public static function getServerRequestCreator() : ServerRequestCreatorInterface {}
        /**
         * {@inheritdoc}
         */
        public static function isResponseFactoryAvailable() : bool {}
        /**
         * {@inheritdoc}
         */
        public static function isStreamFactoryAvailable() : bool {}
        /**
         * {@inheritdoc}
         */
        public static function isServerRequestCreatorAvailable() : bool {}
    }

    class Psr17FactoryProvider implements \slim\interfaces\psr17factoryproviderinterface {
        /**
         * @var string[]
         */
        static protected $factories;

        /**
         * {@inheritdoc}
         */
        public static function getFactories() : array {}
        public static function setFactories(array $factories) : void {}
        public static function addFactory(string $factory) : void {}
    }

}

namespace Slim\Interfaces {
    interface RequestHandlerInvocationStrategyInterface extends \slim\interfaces\invocationstrategyinterface {}

    interface RouteResolverInterface {
        function computeRoutingResults(string $uri, string $method) : RoutingResults ;
        function resolveRoute(string $identifier) : RouteInterface ;
    }

    /**
     * Defines a contract for invoking a route callable.
     */
    interface InvocationStrategyInterface {
        function __invoke(callable $callable, ServerRequestInterface $request, ResponseInterface $response, array $routeArguments) : ResponseInterface ;
    }

    interface RouteParserInterface {
        function relativeUrlFor(string $routeName, array $data = [ ], array $queryParams = [ ]) : string ;
        function urlFor(string $routeName, array $data = [ ], array $queryParams = [ ]) : string ;
        function fullUrlFor(UriInterface $uri, string $routeName, array $data = [ ], array $queryParams = [ ]) : string ;
    }

    interface DispatcherInterface {
        function dispatch(string $method, string $uri) : RoutingResults ;
        function getAllowedMethods(string $uri) : array ;
    }

    interface RouteCollectorInterface {
        /**
         * Get the route parser
         *
         * @return RouteParserInterface
         */
        function getRouteParser() : RouteParserInterface ;
        /**
         * Get default route invocation strategy
         *
         * @return InvocationStrategyInterface
         */
        function getDefaultInvocationStrategy() : InvocationStrategyInterface ;
        function setDefaultInvocationStrategy(InvocationStrategyInterface $strategy) : RouteCollectorInterface ;
        /**
         * Get path to FastRoute cache file
         *
         * @return null|string
         */
        function getCacheFile() : ?string ;
        function setCacheFile(string $cacheFile) : RouteCollectorInterface ;
        /**
         * Get the base path used in pathFor()
         *
         * @return string
         */
        function getBasePath() : string ;
        function setBasePath(string $basePath) : RouteCollectorInterface ;
        /**
         * Get route objects
         *
         * @return RouteInterface[]
         */
        function getRoutes() : array ;
        function getNamedRoute(string $name) : RouteInterface ;
        function removeNamedRoute(string $name) : RouteCollectorInterface ;
        function lookupRoute(string $identifier) : RouteInterface ;
        function group(string $pattern, $callable) : RouteGroupInterface ;
        function map(array $methods, string $pattern, $handler) : RouteInterface ;
    }

    interface ErrorRendererInterface {
        function __invoke(Throwable $exception, bool $displayErrorDetails) : string ;
    }

    interface ServerRequestCreatorInterface {
        /**
         * @return ServerRequestInterface
         */
        function createServerRequestFromGlobals() : ServerRequestInterface ;
    }

    interface RouteGroupInterface {
        /**
         * @return RouteGroupInterface
         */
        function collectRoutes() : RouteGroupInterface ;
        function add($middleware) : RouteGroupInterface ;
        function addMiddleware(MiddlewareInterface $middleware) : RouteGroupInterface ;
        function appendMiddlewareToDispatcher(MiddlewareDispatcher $dispatcher) : RouteGroupInterface ;
        /**
         * Get the RouteGroup's pattern
         *
         * @return string
         */
        function getPattern() : string ;
    }

    interface ErrorHandlerInterface {
        function __invoke(ServerRequestInterface $request, Throwable $exception, bool $displayErrorDetails, bool $logErrors, bool $logErrorDetails) : ResponseInterface ;
    }

    interface RouteInterface {
        /**
         * Get route invocation strategy
         *
         * @return InvocationStrategyInterface
         */
        function getInvocationStrategy() : InvocationStrategyInterface ;
        function setInvocationStrategy(InvocationStrategyInterface $invocationStrategy) : RouteInterface ;
        /**
         * Get route methods
         *
         * @return string[]
         */
        function getMethods() : array ;
        /**
         * Get route pattern
         *
         * @return string
         */
        function getPattern() : string ;
        function setPattern(string $pattern) : RouteInterface ;
        /**
         * Get route callable
         *
         * @return callable|string
         */
        function getCallable() ;
        function setCallable($callable) : RouteInterface ;
        /**
         * Get route name
         *
         * @return null|string
         */
        function getName() : ?string ;
        function setName(string $name) : RouteInterface ;
        /**
         * Get the route's unique identifier
         *
         * @return string
         */
        function getIdentifier() : string ;
        function getArgument(string $name, ?string $default = null) : ?string ;
        /**
         * Get route arguments
         *
         * @return string[]
         */
        function getArguments() : array ;
        function setArgument(string $name, string $value) : RouteInterface ;
        function setArguments(array $arguments) : RouteInterface ;
        function add($middleware) : RouteInterface ;
        function addMiddleware(MiddlewareInterface $middleware) : RouteInterface ;
        function prepare(array $arguments) : RouteInterface ;
        function run(ServerRequestInterface $request) : ResponseInterface ;
    }

    interface CallableResolverInterface {
        function resolve($toResolve) : callable ;
    }

    interface Psr17FactoryInterface {
        /**
         * @return ResponseFactoryInterface
         *
         * @throws RuntimeException when the factory could not be instantiated
         */
        static function getResponseFactory() : ResponseFactoryInterface ;
        /**
         * @return StreamFactoryInterface
         *
         * @throws RuntimeException when the factory could not be instantiated
         */
        static function getStreamFactory() : StreamFactoryInterface ;
        /**
         * @return ServerRequestCreatorInterface
         *
         * @throws RuntimeException when the factory could not be instantiated
         */
        static function getServerRequestCreator() : ServerRequestCreatorInterface ;
        /**
         * Is the PSR-17 ResponseFactory available
         *
         * @return bool
         */
        static function isResponseFactoryAvailable() : bool ;
        /**
         * Is the PSR-17 StreamFactory available
         *
         * @return bool
         */
        static function isStreamFactoryAvailable() : bool ;
        /**
         * Is the ServerRequest creator available
         *
         * @return bool
         */
        static function isServerRequestCreatorAvailable() : bool ;
    }

    interface RouteCollectorProxyInterface {
        /**
         * @return ResponseFactoryInterface
         */
        function getResponseFactory() : ResponseFactoryInterface ;
        /**
         * @return CallableResolverInterface
         */
        function getCallableResolver() : CallableResolverInterface ;
        /**
         * @return ContainerInterface|null
         */
        function getContainer() : ?ContainerInterface ;
        /**
         * @return RouteCollectorInterface
         */
        function getRouteCollector() : RouteCollectorInterface ;
        /**
         * Get the RouteCollectorProxy's base path
         *
         * @return string
         */
        function getBasePath() : string ;
        function setBasePath(string $basePath) : RouteCollectorProxyInterface ;
        function get(string $pattern, $callable) : RouteInterface ;
        function post(string $pattern, $callable) : RouteInterface ;
        function put(string $pattern, $callable) : RouteInterface ;
        function patch(string $pattern, $callable) : RouteInterface ;
        function delete(string $pattern, $callable) : RouteInterface ;
        function options(string $pattern, $callable) : RouteInterface ;
        function any(string $pattern, $callable) : RouteInterface ;
        function map(array $methods, string $pattern, $callable) : RouteInterface ;
        function group(string $pattern, $callable) : RouteGroupInterface ;
        function redirect(string $from, $to, int $status = 302) : RouteInterface ;
    }

    interface Psr17FactoryProviderInterface {
        /**
         * @return string[]
         */
        static function getFactories() : array ;
        static function setFactories(array $factories) : void ;
        static function addFactory(string $factory) : void ;
    }

}

?>
