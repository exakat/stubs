<?php
/**
  * Generated by Exakat 2.1.6 (Build 1091)
  * On 2020-08-25T06:13:14+00:00
  * See https://www.exakat.io/
  */

namespace  {
    /**
     * Tell WordPress we are doing the CRON task.
     *
     * @var bool
     */
    define('DOING_CRON', true);
    /**
     * Tells WordPress to load the WordPress theme and output it.
     *
     * @var bool
     */
    define('WP_USE_THEMES', true);
    /**
     * We are upgrading WordPress.
     *
     * @since 1.5.1
     * @var bool
     */
    define('WP_INSTALLING', true);
    /**
     * Whether this is an XML-RPC Request
     *
     * @var bool
     */
    define('XMLRPC_REQUEST', true);
    /** The name of the database for WordPress */
    define('DB_NAME', 'database_name_here');
    /** MySQL database username */
    define('DB_USER', 'username_here');
    /** MySQL database password */
    define('DB_PASSWORD', 'password_here');
    /** MySQL hostname */
    define('DB_HOST', 'localhost');
    /** Database Charset to use in creating database tables. */
    define('DB_CHARSET', 'utf8');
    /** The Database Collate type. Don't change this if in doubt. */
    define('DB_COLLATE', '');
    define('AUTH_KEY', 'put your unique phrase here');
    define('SECURE_AUTH_KEY', 'put your unique phrase here');
    define('LOGGED_IN_KEY', 'put your unique phrase here');
    define('NONCE_KEY', 'put your unique phrase here');
    define('AUTH_SALT', 'put your unique phrase here');
    define('SECURE_AUTH_SALT', 'put your unique phrase here');
    define('LOGGED_IN_SALT', 'put your unique phrase here');
    define('NONCE_SALT', 'put your unique phrase here');
    define('WP_DEBUG', false);
    /** Only check at this interval for new messages. */
    define('WP_MAIL_INTERVAL', 300);
    define('WPINC', 'wp-includes');
    define('WP_CONTENT_DIR', ABSPATH . 'wp-content');
    define('MULTISITE', false);
    /**
     * Install plugin network administration panel.
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 3.1.0
     */
    define('IFRAME_REQUEST', true);
    define('WP_LOAD_IMPORTERS', true);
    /**
     * Executing Ajax process.
     *
     * @since 2.1.0
     */
    define('DOING_AJAX', true);
    /**
     * In WordPress Administration Screens
     *
     * @since 2.3.2
     */
    define('WP_ADMIN', true);
    /**
     * We are blissfully unaware of anything.
     */
    define('WP_SETUP_CONFIG', true);
    /**
     * This is a profile page.
     *
     * @since 2.5.0
     * @var bool
     */
    define('IS_PROFILE_PAGE', true);
    define('WP_INSTALLING_NETWORK', true);
    /**
     * WordPress Network Administration Bootstrap
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 3.1.0
     */
    define('WP_NETWORK_ADMIN', true);
    /**
     * WordPress User Administration Bootstrap
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    define('WP_USER_ADMIN', true);
    define('WP_BLOG_ADMIN', true);
    /**
     * Fires before an importer screen is loaded.
     *
     * The dynamic portion of the hook name, `$importer`, refers to the importer slug.
     *
     * @since 3.5.0
     */
    define('WP_IMPORTING', true);
    define('DOING_AUTOSAVE', true);
    define('PCLZIP_READ_BLOCK_SIZE', 2048);
    define('PCLZIP_SEPARATOR', ',');
    define('PCLZIP_ERROR_EXTERNAL', 0);
    define('PCLZIP_TEMPORARY_DIR', '');
    define('PCLZIP_TEMPORARY_FILE_RATIO', 0.47);
    define('PCLZIP_ERR_USER_ABORTED', 2);
    define('PCLZIP_ERR_NO_ERROR', 0);
    define('PCLZIP_ERR_WRITE_OPEN_FAIL', -1);
    define('PCLZIP_ERR_READ_OPEN_FAIL', -2);
    define('PCLZIP_ERR_INVALID_PARAMETER', -3);
    define('PCLZIP_ERR_MISSING_FILE', -4);
    define('PCLZIP_ERR_FILENAME_TOO_LONG', -5);
    define('PCLZIP_ERR_INVALID_ZIP', -6);
    define('PCLZIP_ERR_BAD_EXTRACTED_FILE', -7);
    define('PCLZIP_ERR_DIR_CREATE_FAIL', -8);
    define('PCLZIP_ERR_BAD_EXTENSION', -9);
    define('PCLZIP_ERR_BAD_FORMAT', -10);
    define('PCLZIP_ERR_DELETE_FILE_FAIL', -11);
    define('PCLZIP_ERR_RENAME_FILE_FAIL', -12);
    define('PCLZIP_ERR_BAD_CHECKSUM', -13);
    define('PCLZIP_ERR_INVALID_ARCHIVE_ZIP', -14);
    define('PCLZIP_ERR_MISSING_OPTION_VALUE', -15);
    define('PCLZIP_ERR_INVALID_OPTION_VALUE', -16);
    define('PCLZIP_ERR_ALREADY_A_DIRECTORY', -17);
    define('PCLZIP_ERR_UNSUPPORTED_COMPRESSION', -18);
    define('PCLZIP_ERR_UNSUPPORTED_ENCRYPTION', -19);
    define('PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE', -20);
    define('PCLZIP_ERR_DIRECTORY_RESTRICTION', -21);
    define('PCLZIP_OPT_PATH', 77001);
    define('PCLZIP_OPT_ADD_PATH', 77002);
    define('PCLZIP_OPT_REMOVE_PATH', 77003);
    define('PCLZIP_OPT_REMOVE_ALL_PATH', 77004);
    define('PCLZIP_OPT_SET_CHMOD', 77005);
    define('PCLZIP_OPT_EXTRACT_AS_STRING', 77006);
    define('PCLZIP_OPT_NO_COMPRESSION', 77007);
    define('PCLZIP_OPT_BY_NAME', 77008);
    define('PCLZIP_OPT_BY_INDEX', 77009);
    define('PCLZIP_OPT_BY_EREG', 77010);
    define('PCLZIP_OPT_BY_PREG', 77011);
    define('PCLZIP_OPT_COMMENT', 77012);
    define('PCLZIP_OPT_ADD_COMMENT', 77013);
    define('PCLZIP_OPT_PREPEND_COMMENT', 77014);
    define('PCLZIP_OPT_EXTRACT_IN_OUTPUT', 77015);
    define('PCLZIP_OPT_REPLACE_NEWER', 77016);
    define('PCLZIP_OPT_STOP_ON_ERROR', 77017);
    define('PCLZIP_OPT_EXTRACT_DIR_RESTRICTION', 77019);
    define('PCLZIP_OPT_TEMP_FILE_THRESHOLD', 77020);
    define('PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD', 77020);
    define('PCLZIP_OPT_TEMP_FILE_ON', 77021);
    define('PCLZIP_OPT_ADD_TEMP_FILE_ON', 77021);
    define('PCLZIP_OPT_TEMP_FILE_OFF', 77022);
    define('PCLZIP_OPT_ADD_TEMP_FILE_OFF', 77022);
    define('PCLZIP_ATT_FILE_NAME', 79001);
    define('PCLZIP_ATT_FILE_NEW_SHORT_NAME', 79002);
    define('PCLZIP_ATT_FILE_NEW_FULL_NAME', 79003);
    define('PCLZIP_ATT_FILE_MTIME', 79004);
    define('PCLZIP_ATT_FILE_CONTENT', 79005);
    define('PCLZIP_ATT_FILE_COMMENT', 79006);
    define('PCLZIP_CB_PRE_EXTRACT', 78001);
    define('PCLZIP_CB_POST_EXTRACT', 78002);
    define('PCLZIP_CB_PRE_ADD', 78003);
    define('PCLZIP_CB_POST_ADD', 78004);
    /**
     * Filters the path for a specific filesystem method class file.
     *
     * @since 2.6.0
     *
     * @see get_filesystem_method()
     *
     * @param string $path   Path to the specific filesystem method class file.
     * @param string $method The filesystem method to use.
     */
    define('FS_CONNECT_TIMEOUT', 30);
    define('FS_TIMEOUT', 240);
    /**
     * Version number for the export format.
     *
     * Bump this when something changes that might affect compatibility.
     *
     * @since 2.5.0
     */
    define('WXR_VERSION', '1.2');
    /**
     * Defines the newline characters, if not defined already.
     *
     * This can be redefined.
     *
     * @since 2.5
     * @var string
     */
    define('CRLF', "\r\n");
    /**
     * Sets whatever to autodetect ASCII mode.
     *
     * This can be redefined.
     *
     * @since 2.5
     * @var int
     */
    define('FTP_AUTOASCII', -1);
    /**
     *
     * This can be redefined.
     * @since 2.5
     * @var int
     */
    define('FTP_BINARY', 1);
    /**
     *
     * This can be redefined.
     * @since 2.5
     * @var int
     */
    define('FTP_ASCII', 0);
    /**
     * Whether to force FTP.
     *
     * This can be redefined.
     *
     * @since 2.5
     * @var bool
     */
    define('FTP_FORCE', true);
    /**
     * @since 2.5
     * @var string
     */
    define('FTP_OS_Unix', 'u');
    /**
     * @since 2.5
     * @var string
     */
    define('FTP_OS_Windows', 'w');
    /**
     * @since 2.5
     * @var string
     */
    define('FTP_OS_Mac', 'm');
    /**
     * Database Repair and Optimization Script.
     *
     * @package WordPress
     * @subpackage Database
     */
    define('WP_REPAIRING', true);
    /** RSS feed constant. */
    define('RSS', 'RSS');
    define('ATOM', 'Atom');
    define('MAGPIE_INITALIZED', 1);
    define('MAGPIE_CACHE_ON', 1);
    define('MAGPIE_CACHE_DIR', './cache');
    define('MAGPIE_CACHE_AGE', 60 * 60);
    define('MAGPIE_CACHE_FRESH_ONLY', 0);
    define('MAGPIE_DEBUG', 0);
    define('MAGPIE_FETCH_TIME_OUT', 2);
    define('MAGPIE_USE_GZIP', true);
    /**
     * Filters the comments array.
     *
     * @since 2.1.0
     *
     * @param array $comments Array of comments supplied to the comments template.
     * @param int   $post_ID  Post ID.
     */
    define('COMMENTS_TEMPLATE', true);
    /**
     * Server path of the language directory.
     *
     * No leading slash, no trailing slash, full path, not relative to `ABSPATH`.
     *
     * @since 2.1.0
     */
    define('WP_LANG_DIR', ABSPATH . WPINC . '/languages');
    define('LANGDIR', WPINC . '/languages');
    /**
     * Specifies the default allowable HTML tags.
     *
     * Using `CUSTOM_TAGS` is not recommended and should be considered deprecated. The
     * {@see 'wp_kses_allowed_html'} filter is more powerful and supplies context.
     *
     * @see wp_kses_allowed_html()
     * @since 1.2.0
     *
     * @var array[]|bool Array of default allowable HTML tags, or false to use the defaults.
     */
    define('CUSTOM_TAGS', false);
    /**
     * Marker constant for Services_JSON::decode(), used to flag stack state
     */
    define('SERVICES_JSON_SLICE', 1);
    /**
     * Marker constant for Services_JSON::decode(), used to flag stack state
     */
    define('SERVICES_JSON_IN_STR', 2);
    /**
     * Marker constant for Services_JSON::decode(), used to flag stack state
     */
    define('SERVICES_JSON_IN_ARR', 3);
    /**
     * Marker constant for Services_JSON::decode(), used to flag stack state
     */
    define('SERVICES_JSON_IN_OBJ', 4);
    /**
     * Marker constant for Services_JSON::decode(), used to flag stack state
     */
    define('SERVICES_JSON_IN_CMT', 5);
    /**
     * Behavior switch for Services_JSON::decode()
     */
    define('SERVICES_JSON_LOOSE_TYPE', 16);
    /**
     * Behavior switch for Services_JSON::decode()
     */
    define('SERVICES_JSON_SUPPRESS_ERRORS', 32);
    /**
     * Behavior switch for Services_JSON::decode()
     */
    define('SERVICES_JSON_USE_TO_JSON', 64);
    /**
     * SimplePie Name
     */
    define('SIMPLEPIE_NAME', 'SimplePie');
    /**
     * SimplePie Version
     */
    define('SIMPLEPIE_VERSION', '1.3.1');
    /**
     * SimplePie Website URL
     */
    define('SIMPLEPIE_URL', 'http://simplepie.org');
    /**
     * SimplePie Useragent
     * @see SimplePie::set_useragent()
     */
    define('SIMPLEPIE_USERAGENT', SIMPLEPIE_NAME . '/' . SIMPLEPIE_VERSION . ' (Feed Parser; ' . SIMPLEPIE_URL . '; Allow like Gecko) Build/' . SIMPLEPIE_BUILD);
    /**
     * SimplePie Linkback
     */
    define('SIMPLEPIE_LINKBACK', '<a href="' . SIMPLEPIE_URL . '" title="' . SIMPLEPIE_NAME . ' ' . SIMPLEPIE_VERSION . '">' . SIMPLEPIE_NAME . '</a>');
    /**
     * No Autodiscovery
     * @see SimplePie::set_autodiscovery_level()
     */
    define('SIMPLEPIE_LOCATOR_NONE', 0);
    /**
     * Feed Link Element Autodiscovery
     * @see SimplePie::set_autodiscovery_level()
     */
    define('SIMPLEPIE_LOCATOR_AUTODISCOVERY', 1);
    /**
     * Local Feed Extension Autodiscovery
     * @see SimplePie::set_autodiscovery_level()
     */
    define('SIMPLEPIE_LOCATOR_LOCAL_EXTENSION', 2);
    /**
     * Local Feed Body Autodiscovery
     * @see SimplePie::set_autodiscovery_level()
     */
    define('SIMPLEPIE_LOCATOR_LOCAL_BODY', 4);
    /**
     * Remote Feed Extension Autodiscovery
     * @see SimplePie::set_autodiscovery_level()
     */
    define('SIMPLEPIE_LOCATOR_REMOTE_EXTENSION', 8);
    /**
     * Remote Feed Body Autodiscovery
     * @see SimplePie::set_autodiscovery_level()
     */
    define('SIMPLEPIE_LOCATOR_REMOTE_BODY', 16);
    /**
     * All Feed Autodiscovery
     * @see SimplePie::set_autodiscovery_level()
     */
    define('SIMPLEPIE_LOCATOR_ALL', 31);
    /**
     * No known feed type
     */
    define('SIMPLEPIE_TYPE_NONE', 0);
    /**
     * RSS 0.90
     */
    define('SIMPLEPIE_TYPE_RSS_090', 1);
    /**
     * RSS 0.91 (Netscape)
     */
    define('SIMPLEPIE_TYPE_RSS_091_NETSCAPE', 2);
    /**
     * RSS 0.91 (Userland)
     */
    define('SIMPLEPIE_TYPE_RSS_091_USERLAND', 4);
    /**
     * RSS 0.91 (both Netscape and Userland)
     */
    define('SIMPLEPIE_TYPE_RSS_091', 6);
    /**
     * RSS 0.92
     */
    define('SIMPLEPIE_TYPE_RSS_092', 8);
    /**
     * RSS 0.93
     */
    define('SIMPLEPIE_TYPE_RSS_093', 16);
    /**
     * RSS 0.94
     */
    define('SIMPLEPIE_TYPE_RSS_094', 32);
    /**
     * RSS 1.0
     */
    define('SIMPLEPIE_TYPE_RSS_10', 64);
    /**
     * RSS 2.0
     */
    define('SIMPLEPIE_TYPE_RSS_20', 128);
    /**
     * RDF-based RSS
     */
    define('SIMPLEPIE_TYPE_RSS_RDF', 65);
    /**
     * Non-RDF-based RSS (truly intended as syndication format)
     */
    define('SIMPLEPIE_TYPE_RSS_SYNDICATION', 190);
    /**
     * All RSS
     */
    define('SIMPLEPIE_TYPE_RSS_ALL', 255);
    /**
     * Atom 0.3
     */
    define('SIMPLEPIE_TYPE_ATOM_03', 256);
    /**
     * Atom 1.0
     */
    define('SIMPLEPIE_TYPE_ATOM_10', 512);
    /**
     * All Atom
     */
    define('SIMPLEPIE_TYPE_ATOM_ALL', 768);
    /**
     * All feed types
     */
    define('SIMPLEPIE_TYPE_ALL', 1023);
    /**
     * No construct
     */
    define('SIMPLEPIE_CONSTRUCT_NONE', 0);
    /**
     * Text construct
     */
    define('SIMPLEPIE_CONSTRUCT_TEXT', 1);
    /**
     * HTML construct
     */
    define('SIMPLEPIE_CONSTRUCT_HTML', 2);
    /**
     * XHTML construct
     */
    define('SIMPLEPIE_CONSTRUCT_XHTML', 4);
    /**
     * base64-encoded construct
     */
    define('SIMPLEPIE_CONSTRUCT_BASE64', 8);
    /**
     * IRI construct
     */
    define('SIMPLEPIE_CONSTRUCT_IRI', 16);
    /**
     * A construct that might be HTML
     */
    define('SIMPLEPIE_CONSTRUCT_MAYBE_HTML', 32);
    /**
     * All constructs
     */
    define('SIMPLEPIE_CONSTRUCT_ALL', 63);
    /**
     * Don't change case
     */
    define('SIMPLEPIE_SAME_CASE', 1);
    /**
     * Change to lowercase
     */
    define('SIMPLEPIE_LOWERCASE', 2);
    /**
     * Change to uppercase
     */
    define('SIMPLEPIE_UPPERCASE', 4);
    /**
     * PCRE for HTML attributes
     */
    define('SIMPLEPIE_PCRE_HTML_ATTRIBUTE', '((?:[\x09\x0A\x0B\x0C\x0D\x20]+[^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?)*)[\x09\x0A\x0B\x0C\x0D\x20]*');
    /**
     * PCRE for XML attributes
     */
    define('SIMPLEPIE_PCRE_XML_ATTRIBUTE', '((?:\s+(?:(?:[^\s:]+:)?[^\s:]+)\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'))*)\s*');
    /**
     * XML Namespace
     */
    define('SIMPLEPIE_NAMESPACE_XML', 'http://www.w3.org/XML/1998/namespace');
    /**
     * Atom 1.0 Namespace
     */
    define('SIMPLEPIE_NAMESPACE_ATOM_10', 'http://www.w3.org/2005/Atom');
    /**
     * Atom 0.3 Namespace
     */
    define('SIMPLEPIE_NAMESPACE_ATOM_03', 'http://purl.org/atom/ns#');
    /**
     * RDF Namespace
     */
    define('SIMPLEPIE_NAMESPACE_RDF', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
    /**
     * RSS 0.90 Namespace
     */
    define('SIMPLEPIE_NAMESPACE_RSS_090', 'http://my.netscape.com/rdf/simple/0.9/');
    /**
     * RSS 1.0 Namespace
     */
    define('SIMPLEPIE_NAMESPACE_RSS_10', 'http://purl.org/rss/1.0/');
    /**
     * RSS 1.0 Content Module Namespace
     */
    define('SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT', 'http://purl.org/rss/1.0/modules/content/');
    /**
     * RSS 2.0 Namespace
     * (Stupid, I know, but I'm certain it will confuse people less with support.)
     */
    define('SIMPLEPIE_NAMESPACE_RSS_20', '');
    /**
     * DC 1.0 Namespace
     */
    define('SIMPLEPIE_NAMESPACE_DC_10', 'http://purl.org/dc/elements/1.0/');
    /**
     * DC 1.1 Namespace
     */
    define('SIMPLEPIE_NAMESPACE_DC_11', 'http://purl.org/dc/elements/1.1/');
    /**
     * W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace
     */
    define('SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO', 'http://www.w3.org/2003/01/geo/wgs84_pos#');
    /**
     * GeoRSS Namespace
     */
    define('SIMPLEPIE_NAMESPACE_GEORSS', 'http://www.georss.org/georss');
    /**
     * Media RSS Namespace
     */
    define('SIMPLEPIE_NAMESPACE_MEDIARSS', 'http://search.yahoo.com/mrss/');
    /**
     * Wrong Media RSS Namespace. Caused by a long-standing typo in the spec.
     */
    define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG', 'http://search.yahoo.com/mrss');
    /**
     * Wrong Media RSS Namespace #2. New namespace introduced in Media RSS 1.5.
     */
    define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2', 'http://video.search.yahoo.com/mrss');
    /**
     * Wrong Media RSS Namespace #3. A possible typo of the Media RSS 1.5 namespace.
     */
    define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3', 'http://video.search.yahoo.com/mrss/');
    /**
     * Wrong Media RSS Namespace #4. New spec location after the RSS Advisory Board takes it over, but not a valid namespace.
     */
    define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4', 'http://www.rssboard.org/media-rss');
    /**
     * Wrong Media RSS Namespace #5. A possible typo of the RSS Advisory Board URL.
     */
    define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5', 'http://www.rssboard.org/media-rss/');
    /**
     * iTunes RSS Namespace
     */
    define('SIMPLEPIE_NAMESPACE_ITUNES', 'http://www.itunes.com/dtds/podcast-1.0.dtd');
    /**
     * XHTML Namespace
     */
    define('SIMPLEPIE_NAMESPACE_XHTML', 'http://www.w3.org/1999/xhtml');
    /**
     * IANA Link Relations Registry
     */
    define('SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY', 'http://www.iana.org/assignments/relation/');
    /**
     * No file source
     */
    define('SIMPLEPIE_FILE_SOURCE_NONE', 0);
    /**
     * Remote file source
     */
    define('SIMPLEPIE_FILE_SOURCE_REMOTE', 1);
    /**
     * Local file source
     */
    define('SIMPLEPIE_FILE_SOURCE_LOCAL', 2);
    /**
     * fsockopen() file source
     */
    define('SIMPLEPIE_FILE_SOURCE_FSOCKOPEN', 4);
    /**
     * cURL file source
     */
    define('SIMPLEPIE_FILE_SOURCE_CURL', 8);
    /**
     * file_get_contents() file source
     */
    define('SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS', 16);
    /**
     * Version number for our API.
     *
     * @var string
     */
    define('REST_API_VERSION', '2.0');
    /**
     * Whether this is a REST Request.
     *
     * @since 4.4.0
     * @var bool
     */
    define('REST_REQUEST', true);
    /**
     * Endpoint Mask for default, which is nothing.
     *
     * @since 2.1.0
     */
    define('EP_NONE', 0);
    /**
     * Endpoint Mask for Permalink.
     *
     * @since 2.1.0
     */
    define('EP_PERMALINK', 1);
    /**
     * Endpoint Mask for Attachment.
     *
     * @since 2.1.0
     */
    define('EP_ATTACHMENT', 2);
    /**
     * Endpoint Mask for date.
     *
     * @since 2.1.0
     */
    define('EP_DATE', 4);
    /**
     * Endpoint Mask for year
     *
     * @since 2.1.0
     */
    define('EP_YEAR', 8);
    /**
     * Endpoint Mask for month.
     *
     * @since 2.1.0
     */
    define('EP_MONTH', 16);
    /**
     * Endpoint Mask for day.
     *
     * @since 2.1.0
     */
    define('EP_DAY', 32);
    /**
     * Endpoint Mask for root.
     *
     * @since 2.1.0
     */
    define('EP_ROOT', 64);
    /**
     * Endpoint Mask for comments.
     *
     * @since 2.1.0
     */
    define('EP_COMMENTS', 128);
    /**
     * Endpoint Mask for searches.
     *
     * @since 2.1.0
     */
    define('EP_SEARCH', 256);
    /**
     * Endpoint Mask for categories.
     *
     * @since 2.1.0
     */
    define('EP_CATEGORIES', 512);
    /**
     * Endpoint Mask for tags.
     *
     * @since 2.3.0
     */
    define('EP_TAGS', 1024);
    /**
     * Endpoint Mask for authors.
     *
     * @since 2.1.0
     */
    define('EP_AUTHORS', 2048);
    /**
     * Endpoint Mask for pages.
     *
     * @since 2.1.0
     */
    define('EP_PAGES', 4096);
    /**
     * @since 0.71
     */
    define('EZSQL_VERSION', 'WP1.25');
    /**
     * @since 0.71
     */
    define('OBJECT', 'OBJECT');
    define('object', 'OBJECT');
    /**
     * @since 2.5.0
     */
    define('OBJECT_K', 'OBJECT_K');
    /**
     * @since 0.71
     */
    define('ARRAY_A', 'ARRAY_A');
    /**
     * @since 0.71
     */
    define('ARRAY_N', 'ARRAY_N');
    define('UPLOADBLOGSDIR', 'wp-content/blogs.dir');
    /**
     * @since 2.6.0
     */
    define('ADMIN_COOKIE_PATH', SITECOOKIEPATH . 'wp-admin');
    /**
     * Optional support for X-Sendfile header
     *
     * @since 3.0.0
     */
    define('WPMU_SENDFILE', false);
    /**
     * Optional support for X-Accel-Redirect header
     *
     * @since 3.0.0
     */
    define('WPMU_ACCEL_REDIRECT', false);
    define('VHOST', 'no');
    define('SUBDOMAIN_INSTALL', false);
    define('KB_IN_BYTES', 1024);
    define('MB_IN_BYTES', 1024 * KB_IN_BYTES);
    define('GB_IN_BYTES', 1024 * MB_IN_BYTES);
    define('TB_IN_BYTES', 1024 * GB_IN_BYTES);
    define('WP_MEMORY_LIMIT', '40M');
    define('WP_MAX_MEMORY_LIMIT', '256M');
    define('WP_DEBUG_DISPLAY', true);
    define('WP_DEBUG_LOG', false);
    define('WP_CACHE', false);
    /**
     * Private
     */
    define('MEDIA_TRASH', false);
    /**
     * Multisite upload handler.
     *
     * @since 3.0.0
     *
     * @package WordPress
     * @subpackage Multisite
     */
    define('SHORTINIT', true);
    define('WP_FEATURE_BETTER_PASSWORDS', true);
    define('MINUTE_IN_SECONDS', 60);
    define('HOUR_IN_SECONDS', 60 * MINUTE_IN_SECONDS);
    define('DAY_IN_SECONDS', 24 * HOUR_IN_SECONDS);
    define('WEEK_IN_SECONDS', 7 * DAY_IN_SECONDS);
    define('MONTH_IN_SECONDS', 30 * DAY_IN_SECONDS);
    define('YEAR_IN_SECONDS', 365 * DAY_IN_SECONDS);
    /**
     * Allows for the plugins directory to be moved from the default location.
     *
     * @since 2.6.0
     */
    define('WP_PLUGIN_DIR', WP_CONTENT_DIR . '/plugins');
    /**
     * Allows for the plugins directory to be moved from the default location.
     *
     * @since 2.6.0
     */
    define('WP_PLUGIN_URL', WP_CONTENT_URL . '/plugins');
    /**
     * Allows for the plugins directory to be moved from the default location.
     *
     * @since 2.1.0
     * @deprecated
     */
    define('PLUGINDIR', 'wp-content/plugins');
    /**
     * Allows for the mu-plugins directory to be moved from the default location.
     *
     * @since 2.8.0
     */
    define('WPMU_PLUGIN_DIR', WP_CONTENT_DIR . '/mu-plugins');
    /**
     * Allows for the mu-plugins directory to be moved from the default location.
     *
     * @since 2.8.0
     */
    define('WPMU_PLUGIN_URL', WP_CONTENT_URL . '/mu-plugins');
    /**
     * Allows for the mu-plugins directory to be moved from the default location.
     *
     * @since 2.8.0
     * @deprecated
     */
    define('MUPLUGINDIR', 'wp-content/mu-plugins');
    define('COOKIEHASH', '');
    /**
     * @since 2.0.0
     */
    define('USER_COOKIE', 'wordpressuser_' . COOKIEHASH);
    /**
     * @since 2.0.0
     */
    define('PASS_COOKIE', 'wordpresspass_' . COOKIEHASH);
    /**
     * @since 2.5.0
     */
    define('AUTH_COOKIE', 'wordpress_' . COOKIEHASH);
    /**
     * @since 2.6.0
     */
    define('SECURE_AUTH_COOKIE', 'wordpress_sec_' . COOKIEHASH);
    /**
     * @since 2.6.0
     */
    define('LOGGED_IN_COOKIE', 'wordpress_logged_in_' . COOKIEHASH);
    /**
     * @since 2.3.0
     */
    define('TEST_COOKIE', 'wordpress_test_cookie');
    /**
     * @since 2.0.0
     */
    define('COOKIE_DOMAIN', false);
    define('FORCE_SSL_ADMIN', false);
    /**
     * @since 2.5.0
     */
    define('AUTOSAVE_INTERVAL', 60);
    /**
     * @since 2.9.0
     */
    define('EMPTY_TRASH_DAYS', 30);
    define('WP_POST_REVISIONS', true);
    /**
     * @since 3.3.0
     */
    define('WP_CRON_LOCK_TIMEOUT', 60);
    /**
     * Slug of the default theme for this installation.
     * Used as the default theme when installing new sites.
     * It will be used as the fallback if the current theme doesn't exist.
     *
     * @since 3.0.0
     * @see WP_Theme::get_core_default_theme()
     */
    define('WP_DEFAULT_THEME', 'twentynineteen');
    define('JSON_PRETTY_PRINT', 128);
    define('WP_JSON_SERIALIZE_COMPATIBLE', true);
    define('IMG_JPG', IMAGETYPE_JPEG);
    define('ENT_SUBSTITUTE', (defined('ENT_IGNORE') ? ENT_IGNORE : 8));
    define('GETID3_MP3_VALID_CHECK_FRAMES', 35);
    define('EBML_ID_CHAPTERS', 0x0043A770);
    define('EBML_ID_SEEKHEAD', 0x014D9B74);
    define('EBML_ID_TAGS', 0x0254C367);
    define('EBML_ID_INFO', 0x0549A966);
    define('EBML_ID_TRACKS', 0x0654AE6B);
    define('EBML_ID_SEGMENT', 0x08538067);
    define('EBML_ID_ATTACHMENTS', 0x0941A469);
    define('EBML_ID_EBML', 0x0A45DFA3);
    define('EBML_ID_CUES', 0x0C53BB6B);
    define('EBML_ID_CLUSTER', 0x0F43B675);
    define('EBML_ID_LANGUAGE', 0x02B59C);
    define('EBML_ID_TRACKTIMECODESCALE', 0x03314F);
    define('EBML_ID_DEFAULTDURATION', 0x03E383);
    define('EBML_ID_CODECNAME', 0x058688);
    define('EBML_ID_CODECDOWNLOADURL', 0x06B240);
    define('EBML_ID_TIMECODESCALE', 0x0AD7B1);
    define('EBML_ID_COLOURSPACE', 0x0EB524);
    define('EBML_ID_GAMMAVALUE', 0x0FB523);
    define('EBML_ID_CODECSETTINGS', 0x1A9697);
    define('EBML_ID_CODECINFOURL', 0x1B4040);
    define('EBML_ID_PREVFILENAME', 0x1C83AB);
    define('EBML_ID_PREVUID', 0x1CB923);
    define('EBML_ID_NEXTFILENAME', 0x1E83BB);
    define('EBML_ID_NEXTUID', 0x1EB923);
    define('EBML_ID_CONTENTCOMPALGO', 0x0254);
    define('EBML_ID_CONTENTCOMPSETTINGS', 0x0255);
    define('EBML_ID_DOCTYPE', 0x0282);
    define('EBML_ID_DOCTYPEREADVERSION', 0x0285);
    define('EBML_ID_EBMLVERSION', 0x0286);
    define('EBML_ID_DOCTYPEVERSION', 0x0287);
    define('EBML_ID_EBMLMAXIDLENGTH', 0x02F2);
    define('EBML_ID_EBMLMAXSIZELENGTH', 0x02F3);
    define('EBML_ID_EBMLREADVERSION', 0x02F7);
    define('EBML_ID_CHAPLANGUAGE', 0x037C);
    define('EBML_ID_CHAPCOUNTRY', 0x037E);
    define('EBML_ID_SEGMENTFAMILY', 0x0444);
    define('EBML_ID_DATEUTC', 0x0461);
    define('EBML_ID_TAGLANGUAGE', 0x047A);
    define('EBML_ID_TAGDEFAULT', 0x0484);
    define('EBML_ID_TAGBINARY', 0x0485);
    define('EBML_ID_TAGSTRING', 0x0487);
    define('EBML_ID_DURATION', 0x0489);
    define('EBML_ID_CHAPPROCESSPRIVATE', 0x050D);
    define('EBML_ID_CHAPTERFLAGENABLED', 0x0598);
    define('EBML_ID_TAGNAME', 0x05A3);
    define('EBML_ID_EDITIONENTRY', 0x05B9);
    define('EBML_ID_EDITIONUID', 0x05BC);
    define('EBML_ID_EDITIONFLAGHIDDEN', 0x05BD);
    define('EBML_ID_EDITIONFLAGDEFAULT', 0x05DB);
    define('EBML_ID_EDITIONFLAGORDERED', 0x05DD);
    define('EBML_ID_FILEDATA', 0x065C);
    define('EBML_ID_FILEMIMETYPE', 0x0660);
    define('EBML_ID_FILENAME', 0x066E);
    define('EBML_ID_FILEREFERRAL', 0x0675);
    define('EBML_ID_FILEDESCRIPTION', 0x067E);
    define('EBML_ID_FILEUID', 0x06AE);
    define('EBML_ID_CONTENTENCALGO', 0x07E1);
    define('EBML_ID_CONTENTENCKEYID', 0x07E2);
    define('EBML_ID_CONTENTSIGNATURE', 0x07E3);
    define('EBML_ID_CONTENTSIGKEYID', 0x07E4);
    define('EBML_ID_CONTENTSIGALGO', 0x07E5);
    define('EBML_ID_CONTENTSIGHASHALGO', 0x07E6);
    define('EBML_ID_MUXINGAPP', 0x0D80);
    define('EBML_ID_SEEK', 0x0DBB);
    define('EBML_ID_CONTENTENCODINGORDER', 0x1031);
    define('EBML_ID_CONTENTENCODINGSCOPE', 0x1032);
    define('EBML_ID_CONTENTENCODINGTYPE', 0x1033);
    define('EBML_ID_CONTENTCOMPRESSION', 0x1034);
    define('EBML_ID_CONTENTENCRYPTION', 0x1035);
    define('EBML_ID_CUEREFNUMBER', 0x135F);
    define('EBML_ID_NAME', 0x136E);
    define('EBML_ID_CUEBLOCKNUMBER', 0x1378);
    define('EBML_ID_TRACKOFFSET', 0x137F);
    define('EBML_ID_SEEKID', 0x13AB);
    define('EBML_ID_SEEKPOSITION', 0x13AC);
    define('EBML_ID_STEREOMODE', 0x13B8);
    define('EBML_ID_OLDSTEREOMODE', 0x13B9);
    define('EBML_ID_PIXELCROPBOTTOM', 0x14AA);
    define('EBML_ID_DISPLAYWIDTH', 0x14B0);
    define('EBML_ID_DISPLAYUNIT', 0x14B2);
    define('EBML_ID_ASPECTRATIOTYPE', 0x14B3);
    define('EBML_ID_DISPLAYHEIGHT', 0x14BA);
    define('EBML_ID_PIXELCROPTOP', 0x14BB);
    define('EBML_ID_PIXELCROPLEFT', 0x14CC);
    define('EBML_ID_PIXELCROPRIGHT', 0x14DD);
    define('EBML_ID_FLAGFORCED', 0x15AA);
    define('EBML_ID_MAXBLOCKADDITIONID', 0x15EE);
    define('EBML_ID_WRITINGAPP', 0x1741);
    define('EBML_ID_CLUSTERSILENTTRACKS', 0x1854);
    define('EBML_ID_CLUSTERSILENTTRACKNUMBER', 0x18D7);
    define('EBML_ID_ATTACHEDFILE', 0x21A7);
    define('EBML_ID_CONTENTENCODING', 0x2240);
    define('EBML_ID_BITDEPTH', 0x2264);
    define('EBML_ID_CODECPRIVATE', 0x23A2);
    define('EBML_ID_TARGETS', 0x23C0);
    define('EBML_ID_CHAPTERPHYSICALEQUIV', 0x23C3);
    define('EBML_ID_TAGCHAPTERUID', 0x23C4);
    define('EBML_ID_TAGTRACKUID', 0x23C5);
    define('EBML_ID_TAGATTACHMENTUID', 0x23C6);
    define('EBML_ID_TAGEDITIONUID', 0x23C9);
    define('EBML_ID_TARGETTYPE', 0x23CA);
    define('EBML_ID_TRACKTRANSLATE', 0x2624);
    define('EBML_ID_TRACKTRANSLATETRACKID', 0x26A5);
    define('EBML_ID_TRACKTRANSLATECODEC', 0x26BF);
    define('EBML_ID_TRACKTRANSLATEEDITIONUID', 0x26FC);
    define('EBML_ID_SIMPLETAG', 0x27C8);
    define('EBML_ID_TARGETTYPEVALUE', 0x28CA);
    define('EBML_ID_CHAPPROCESSCOMMAND', 0x2911);
    define('EBML_ID_CHAPPROCESSTIME', 0x2922);
    define('EBML_ID_CHAPTERTRANSLATE', 0x2924);
    define('EBML_ID_CHAPPROCESSDATA', 0x2933);
    define('EBML_ID_CHAPPROCESS', 0x2944);
    define('EBML_ID_CHAPPROCESSCODECID', 0x2955);
    define('EBML_ID_CHAPTERTRANSLATEID', 0x29A5);
    define('EBML_ID_CHAPTERTRANSLATECODEC', 0x29BF);
    define('EBML_ID_CHAPTERTRANSLATEEDITIONUID', 0x29FC);
    define('EBML_ID_CONTENTENCODINGS', 0x2D80);
    define('EBML_ID_MINCACHE', 0x2DE7);
    define('EBML_ID_MAXCACHE', 0x2DF8);
    define('EBML_ID_CHAPTERSEGMENTUID', 0x2E67);
    define('EBML_ID_CHAPTERSEGMENTEDITIONUID', 0x2EBC);
    define('EBML_ID_TRACKOVERLAY', 0x2FAB);
    define('EBML_ID_TAG', 0x3373);
    define('EBML_ID_SEGMENTFILENAME', 0x3384);
    define('EBML_ID_SEGMENTUID', 0x33A4);
    define('EBML_ID_CHAPTERUID', 0x33C4);
    define('EBML_ID_TRACKUID', 0x33C5);
    define('EBML_ID_ATTACHMENTLINK', 0x3446);
    define('EBML_ID_CLUSTERBLOCKADDITIONS', 0x35A1);
    define('EBML_ID_CHANNELPOSITIONS', 0x347B);
    define('EBML_ID_OUTPUTSAMPLINGFREQUENCY', 0x38B5);
    define('EBML_ID_TITLE', 0x3BA9);
    define('EBML_ID_CHAPTERDISPLAY', 0x00);
    define('EBML_ID_TRACKTYPE', 0x03);
    define('EBML_ID_CHAPSTRING', 0x05);
    define('EBML_ID_CODECID', 0x06);
    define('EBML_ID_FLAGDEFAULT', 0x08);
    define('EBML_ID_CHAPTERTRACKNUMBER', 0x09);
    define('EBML_ID_CLUSTERSLICES', 0x0E);
    define('EBML_ID_CHAPTERTRACK', 0x0F);
    define('EBML_ID_CHAPTERTIMESTART', 0x11);
    define('EBML_ID_CHAPTERTIMEEND', 0x12);
    define('EBML_ID_CUEREFTIME', 0x16);
    define('EBML_ID_CUEREFCLUSTER', 0x17);
    define('EBML_ID_CHAPTERFLAGHIDDEN', 0x18);
    define('EBML_ID_FLAGINTERLACED', 0x1A);
    define('EBML_ID_CLUSTERBLOCKDURATION', 0x1B);
    define('EBML_ID_FLAGLACING', 0x1C);
    define('EBML_ID_CHANNELS', 0x1F);
    define('EBML_ID_CLUSTERBLOCKGROUP', 0x20);
    define('EBML_ID_CLUSTERBLOCK', 0x21);
    define('EBML_ID_CLUSTERBLOCKVIRTUAL', 0x22);
    define('EBML_ID_CLUSTERSIMPLEBLOCK', 0x23);
    define('EBML_ID_CLUSTERCODECSTATE', 0x24);
    define('EBML_ID_CLUSTERBLOCKADDITIONAL', 0x25);
    define('EBML_ID_CLUSTERBLOCKMORE', 0x26);
    define('EBML_ID_CLUSTERPOSITION', 0x27);
    define('EBML_ID_CODECDECODEALL', 0x2A);
    define('EBML_ID_CLUSTERPREVSIZE', 0x2B);
    define('EBML_ID_TRACKENTRY', 0x2E);
    define('EBML_ID_CLUSTERENCRYPTEDBLOCK', 0x2F);
    define('EBML_ID_PIXELWIDTH', 0x30);
    define('EBML_ID_CUETIME', 0x33);
    define('EBML_ID_SAMPLINGFREQUENCY', 0x35);
    define('EBML_ID_CHAPTERATOM', 0x36);
    define('EBML_ID_CUETRACKPOSITIONS', 0x37);
    define('EBML_ID_FLAGENABLED', 0x39);
    define('EBML_ID_PIXELHEIGHT', 0x3A);
    define('EBML_ID_CUEPOINT', 0x3B);
    define('EBML_ID_CRC32', 0x3F);
    define('EBML_ID_CLUSTERBLOCKADDITIONID', 0x4B);
    define('EBML_ID_CLUSTERLACENUMBER', 0x4C);
    define('EBML_ID_CLUSTERFRAMENUMBER', 0x4D);
    define('EBML_ID_CLUSTERDELAY', 0x4E);
    define('EBML_ID_CLUSTERDURATION', 0x4F);
    define('EBML_ID_TRACKNUMBER', 0x57);
    define('EBML_ID_CUEREFERENCE', 0x5B);
    define('EBML_ID_VIDEO', 0x60);
    define('EBML_ID_AUDIO', 0x61);
    define('EBML_ID_CLUSTERTIMESLICE', 0x68);
    define('EBML_ID_CUECODECSTATE', 0x6A);
    define('EBML_ID_CUEREFCODECSTATE', 0x6B);
    define('EBML_ID_VOID', 0x6C);
    define('EBML_ID_CLUSTERTIMECODE', 0x67);
    define('EBML_ID_CLUSTERBLOCKADDID', 0x6E);
    define('EBML_ID_CUECLUSTERPOSITION', 0x71);
    define('EBML_ID_CUETRACK', 0x77);
    define('EBML_ID_CLUSTERREFERENCEPRIORITY', 0x7A);
    define('EBML_ID_CLUSTERREFERENCEBLOCK', 0x7B);
    define('EBML_ID_CLUSTERREFERENCEVIRTUAL', 0x7D);
    define('PHP_INT_MIN', ~PHP_INT_MAX);
    define('GETID3_FLV_TAG_AUDIO', 8);
    define('GETID3_FLV_TAG_VIDEO', 9);
    define('GETID3_FLV_TAG_META', 18);
    define('GETID3_FLV_VIDEO_H263', 2);
    define('GETID3_FLV_VIDEO_SCREEN', 3);
    define('GETID3_FLV_VIDEO_VP6FLV', 4);
    define('GETID3_FLV_VIDEO_VP6FLV_ALPHA', 5);
    define('GETID3_FLV_VIDEO_SCREENV2', 6);
    define('GETID3_FLV_VIDEO_H264', 7);
    define('H264_AVC_SEQUENCE_HEADER', 0);
    define('H264_PROFILE_BASELINE', 66);
    define('H264_PROFILE_MAIN', 77);
    define('H264_PROFILE_EXTENDED', 88);
    define('H264_PROFILE_HIGH', 100);
    define('H264_PROFILE_HIGH10', 110);
    define('H264_PROFILE_HIGH422', 122);
    define('H264_PROFILE_HIGH444', 144);
    define('H264_PROFILE_HIGH444_PREDICTIVE', 244);
    /**
     * PHP 7.0.0 and newer have these functions natively.
     */
    define('RANDOM_COMPAT_READ_BUFFER', 8);
    /**
     * Class for working with PO files
     *
     * @version $Id: po.php 1158 2015-11-20 04:31:23Z dd32 $
     * @package pomo
     * @subpackage po
     */
    define('PO_MAX_LINE_LEN', 79);
    define('HEADER_IMAGE', '');
    /**
     * Filter the Twenty Ten defaul header image height.
     *
     * @since Twenty Ten 1.0
     *
     * @param int The default header image height in pixels. Default 198.
     */
    define('HEADER_TEXTCOLOR', '');
    define('NO_HEADER_TEXT', true);

    function trackback_response($error = 0, $error_message = '') {}
    /**
     * Retrieves the cron lock.
     *
     * Returns the uncached `doing_cron` transient.
     *
     * @ignore
     * @since 3.3.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return string|false Value of the `doing_cron` transient, 0|false otherwise.
     */
    function _get_cron_lock() {}
    /**
     * Adds an action hook specific to this page.
     *
     * Fires on {@see 'wp_head'}.
     *
     * @since MU (3.0.0)
     */
    function do_activate_header() {}
    /**
     * Loads styles specific to this page.
     *
     * @since MU (3.0.0)
     */
    function wpmu_activate_stylesheet() {}
    function logIO($io, $msg) {}
    function login_header($title = 'Log In', $message = '', $wp_error = null) {}
    function login_footer($input_id = '') {}
    /**
     * Outputs the Javascript to handle the form shaking.
     *
     * @since 3.0.0
     */
    function wp_shake_js() {}
    /**
     * Outputs the viewport meta tag.
     *
     * @since 3.7.0
     */
    function wp_login_viewport_meta() {}
    /**
     * Handles sending password retrieval email to user.
     *
     * @since 2.5.0
     *
     * @return bool|WP_Error True: when finish. WP_Error on error
     */
    function retrieve_password() {}
    /**
     * Prints signup_header via wp_head
     *
     * @since MU (3.0.0)
     */
    function do_signup_header() {}
    /**
     * Prints styles for front-end Multisite signup pages
     *
     * @since MU (3.0.0)
     */
    function wpmu_signup_stylesheet() {}
    function show_blog_form($blogname = '', $blog_title = '', $errors = '') {}
    /**
     * Validate the new site signup
     *
     * @since MU (3.0.0)
     *
     * @return array Contains the new site data and error messages.
     */
    function validate_blog_form() {}
    function show_user_form($user_name = '', $user_email = '', $errors = '') {}
    /**
     * Validate user signup name and email
     *
     * @since MU (3.0.0)
     *
     * @return array Contains username, email, and error messages.
     */
    function validate_user_form() {}
    function signup_another_blog($blogname = '', $blog_title = '', $errors = '') {}
    /**
     * Validate a new site signup for an existing user.
     *
     * @global string          $blogname   The new site's subdomain or directory name.
     * @global string          $blog_title The new site's title.
     * @global WP_Error        $errors     Existing errors in the global scope.
     * @global string          $domain     The new site's domain.
     * @global string          $path       The new site's path.
     *
     * @since MU (3.0.0)
     *
     * @return null|bool True if site signup was validated, false if error.
     *                   The function halts all execution if the user is not logged in.
     */
    function validate_another_blog_signup() {}
    function confirm_another_blog_signup($domain, $path, $blog_title, $user_name, $user_email = '', $meta = array( ), $blog_id = 0) {}
    function signup_user($user_name = '', $user_email = '', $errors = '') {}
    /**
     * Validate the new user signup
     *
     * @since MU (3.0.0)
     *
     * @return bool True if new user signup was validated, false if error
     */
    function validate_user_signup() {}
    function confirm_user_signup($user_name, $user_email) {}
    function signup_blog($user_name = '', $user_email = '', $blogname = '', $blog_title = '', $errors = '') {}
    /**
     * Validate new site signup
     *
     * @since MU (3.0.0)
     *
     * @return bool True if the site signup was validated, false if error
     */
    function validate_blog_signup() {}
    function confirm_blog_signup($domain, $path, $blog_title, $user_name = '', $user_email = '', $meta = array( )) {}
    /**
     * Retrieves languages available during the site/user signup process.
     *
     * @since 4.4.0
     *
     * @see get_available_languages()
     *
     * @return array List of available languages.
     */
    function signup_get_available_languages() {}
    function display_header($body_classes = '') {}
    function display_setup_form($error = null) {}
    function maybe_create_table($table_name, $create_ddl) {}
    function maybe_add_column($table_name, $column_name, $create_ddl) {}
    function maybe_drop_column($table_name, $column_name, $drop_ddl) {}
    function check_column($table_name, $col_name, $col_type, $is_null = null, $key = null, $default = null, $extra = null) {}
    /**
     * Display JavaScript on the page.
     *
     * @since 3.5.0
     */
    function export_add_js() {}
    function export_date_options($post_type = 'post') {}
    function wp_nav_menu_max_depth($classes) {}
    function _wp_menu_output($menu, $submenu, $submenu_as_parent = true) {}
    function list_core_update($update) {}
    /**
     * @since 2.7.0
     */
    function dismissed_updates() {}
    /**
     * Display upgrade WordPress for downloading latest or upgrading automatically form.
     *
     * @since 2.7.0
     *
     * @global string $required_php_version
     * @global string $required_mysql_version
     */
    function core_upgrade_preamble() {}
    function list_plugin_updates() {}
    /**
     * @since 2.9.0
     */
    function list_theme_updates() {}
    /**
     * @since 3.7.0
     */
    function list_translation_updates() {}
    function do_core_upgrade($reinstall = false) {}
    /**
     * @since 2.7.0
     */
    function do_dismiss_core_update() {}
    /**
     * @since 2.7.0
     */
    function do_undismiss_core_update() {}
    function setup_config_display_header($body_classes = array( )) {}
    /** WordPress Administration Bootstrap */
    function wp_load_press_this() {}
    /**
     * Adds the (theme) 'Editor' link to the bottom of the Appearance menu.
     *
     * @access private
     * @since 3.0.0
     */
    function _add_themes_utility_last() {}
    function startElement($parser, $tagName, $attrs) {}
    function endElement($parser, $tagName) {}
    /**
     * Display list of the available widgets.
     *
     * @since 2.5.0
     *
     * @global array $wp_registered_widgets
     * @global array $wp_registered_widget_controls
     */
    function wp_list_widgets() {}
    function _sort_name_callback($a, $b) {}
    function wp_list_widget_controls($sidebar, $sidebar_name = '') {}
    function wp_list_widget_controls_dynamic_sidebar($params) {}
    function next_widget_id_number($id_base) {}
    function wp_widget_control($sidebar_args) {}
    function wp_widgets_access_body_class($classes) {}
    function check_upload_size($file) {}
    function wpmu_delete_blog($blog_id, $drop = false) {}
    function wpmu_delete_user($id) {}
    function upload_is_user_over_quota($echo = true) {}
    /**
     * Displays the amount of disk space used by the current site. Not used in core.
     *
     * @since MU (3.0.0)
     */
    function display_space_usage() {}
    function fix_import_form_size($size) {}
    function upload_space_setting($id) {}
    function update_user_status($id, $pref, $value, $deprecated = null) {}
    function refresh_user_details($id) {}
    function format_code_lang($code = '') {}
    function sync_category_tag_slugs($term, $taxonomy) {}
    /**
     * Displays an access denied message when a user tries to view a site's dashboard they
     * do not have access to.
     *
     * @since 3.2.0
     * @access private
     */
    function _access_denied_splash() {}
    function check_import_new_users($permission) {}
    function mu_dropdown_languages($lang_files = array( ), $current = '') {}
    /**
     * Displays an admin notice to upgrade all sites after a core upgrade.
     *
     * @since 3.0.0
     *
     * @global int    $wp_db_version The version number of the database.
     * @global string $pagenow
     *
     * @return false False if the current user is not a super admin.
     */
    function site_admin_notice() {}
    function avoid_blog_page_permalink_collision($data, $postarr) {}
    /**
     * Handles the display of choosing a user's primary site.
     *
     * This displays the user's primary site and allows the user to choose
     * which site is primary.
     *
     * @since 3.0.0
     */
    function choose_primary_blog() {}
    function can_edit_network($network_id) {}
    /**
     * Thickbox image paths for Network Admin.
     *
     * @since 3.1.0
     *
     * @access private
     */
    function _thickbox_path_admin_subfolder() {}
    function confirm_delete_users($users) {}
    /**
     * Print JavaScript in the header on the Network Settings screen.
     *
     * @since 4.1.0
     */
    function network_settings_add_js() {}
    function network_edit_site_nav($args = array( )) {}
    /**
     * Returns the arguments for the help tab on the Edit Site screens.
     *
     * @since 4.9.0
     *
     * @return array Help tab arguments.
     */
    function get_site_screen_help_tab_args() {}
    /**
     * Returns the content for the help sidebar on the Edit Site screens.
     *
     * @since 4.9.0
     *
     * @return string Help sidebar content.
     */
    function get_site_screen_help_sidebar_content() {}
    function wp_get_revision_ui_diff($post, $compare_from, $compare_to) {}
    function wp_prepare_revisions_for_js($post, $selected_revision_id, $from = null) {}
    /**
     * Print JavaScript templates required for the revisions experience.
     *
     * @since 4.1.0
     *
     * @global WP_Post $post The global `$post` object.
     */
    function wp_print_revision_templates() {}
    function category_exists($cat_name, $parent = null) {}
    function get_category_to_edit($id) {}
    function wp_create_category($cat_name, $parent = 0) {}
    function wp_create_categories($categories, $post_id = '') {}
    function wp_insert_category($catarr, $wp_error = false) {}
    function wp_update_category($catarr) {}
    function tag_exists($tag_name) {}
    function wp_create_tag($tag_name) {}
    function get_tags_to_edit($post_id, $taxonomy = 'post_tag') {}
    function get_terms_to_edit($post_id, $taxonomy = 'post_tag') {}
    function wp_create_term($tag_name, $taxonomy = 'post_tag') {}
    /**
     * Selects the first update version from the update_core option.
     *
     * @return object|array|false The response from the API on success, false on failure.
     */
    function get_preferred_from_update_core() {}
    function get_core_updates($options = array( )) {}
    /**
     * Gets the best available (and enabled) Auto-Update for WordPress Core.
     *
     * If there's 1.2.3 and 1.3 on offer, it'll choose 1.3 if the installation allows it, else, 1.2.3
     *
     * @since 3.7.0
     *
     * @return array|false False on failure, otherwise the core update offering.
     */
    function find_core_auto_update() {}
    function get_core_checksums($version, $locale) {}
    function dismiss_core_update($update) {}
    function undismiss_core_update($version, $locale) {}
    function find_core_update($version, $locale) {}
    function core_update_footer($msg = '') {}
    /**
     * @global string $pagenow
     * @return false|void
     */
    function update_nag() {}
    function update_right_now_message() {}
    /**
     * @since 2.9.0
     *
     * @return array
     */
    function get_plugin_updates() {}
    /**
     * @since 2.9.0
     */
    function wp_plugin_update_rows() {}
    function wp_plugin_update_row($file, $plugin_data) {}
    /**
     * @return array
     */
    function get_theme_updates() {}
    /**
     * @since 3.1.0
     */
    function wp_theme_update_rows() {}
    function wp_theme_update_row($theme_key, $theme) {}
    /**
     * @global int $upgrading
     * @return false|void
     */
    function maintenance_nag() {}
    /**
     * Prints the JavaScript templates for update admin notices.
     *
     * Template takes one argument with four values:
     *
     *     param {object} data {
     *         Arguments for admin notice.
     *
     *         @type string id        ID of the notice.
     *         @type string className Class names for the notice.
     *         @type string message   The notice's message.
     *         @type string type      The type of update the notice is for. Either 'plugin' or 'theme'.
     *     }
     *
     * @since 4.6.0
     */
    function wp_print_admin_notice_templates() {}
    /**
     * Prints the JavaScript templates for update and deletion rows in list tables.
     *
     * The update template takes one argument with four values:
     *
     *     param {object} data {
     *         Arguments for the update row
     *
     *         @type string slug    Plugin slug.
     *         @type string plugin  Plugin base name.
     *         @type string colspan The number of table columns this row spans.
     *         @type string content The row content.
     *     }
     *
     * The delete template takes one argument with four values:
     *
     *     param {object} data {
     *         Arguments for the update row
     *
     *         @type string slug    Plugin slug.
     *         @type string plugin  Plugin base name.
     *         @type string name    Plugin name.
     *         @type string colspan The number of table columns this row spans.
     *     }
     *
     * @since 4.6.0
     */
    function wp_print_update_row_templates() {}
    /**
     * Registers dashboard widgets.
     *
     * Handles POST data, sets up filters.
     *
     * @since 2.5.0
     *
     * @global array $wp_registered_widgets
     * @global array $wp_registered_widget_controls
     * @global array $wp_dashboard_control_callbacks
     */
    function wp_dashboard_setup() {}
    function wp_add_dashboard_widget($widget_id, $widget_name, $callback, $control_callback = null, $callback_args = null) {}
    function _wp_dashboard_control_callback($dashboard, $meta_box) {}
    /**
     * Displays the dashboard.
     *
     * @since 2.5.0
     */
    function wp_dashboard() {}
    /**
     * Dashboard widget that displays some basic stats about the site.
     *
     * Formerly 'Right Now'. A streamlined 'At a Glance' as of 3.8.
     *
     * @since 2.7.0
     */
    function wp_dashboard_right_now() {}
    /**
     * @since 3.1.0
     */
    function wp_network_dashboard_right_now() {}
    function wp_dashboard_quick_press($error_msg = false) {}
    function wp_dashboard_recent_drafts($drafts = false) {}
    function _wp_dashboard_recent_comments_row($comment, $show_date = true) {}
    /**
     * Callback function for Activity widget.
     *
     * @since 3.8.0
     */
    function wp_dashboard_site_activity() {}
    function wp_dashboard_recent_posts($args) {}
    function wp_dashboard_recent_comments($total_items = 5) {}
    function wp_dashboard_rss_output($widget_id) {}
    function wp_dashboard_cached_rss_widget($widget_id, $callback, $check_urls = array( )) {}
    function wp_dashboard_trigger_widget_control($widget_control_id = false) {}
    function wp_dashboard_rss_control($widget_id, $form_inputs = array( )) {}
    /**
     * Renders the Events and News dashboard widget.
     *
     * @since 4.8.0
     */
    function wp_dashboard_events_news() {}
    /**
     * Prints the markup for the Community Events section of the Events and News Dashboard widget.
     *
     * @since 4.8.0
     */
    function wp_print_community_events_markup() {}
    /**
     * Renders the events templates for the Event and News widget.
     *
     * @since 4.8.0
     */
    function wp_print_community_events_templates() {}
    /**
     * 'WordPress Events and News' dashboard widget.
     *
     * @since 2.7.0
     * @since 4.8.0 Removed popular plugins feed.
     */
    function wp_dashboard_primary() {}
    function wp_dashboard_primary_output($widget_id, $feeds) {}
    /**
     * Display file upload quota on dashboard.
     *
     * Runs on the {@see 'activity_box_end'} hook in wp_dashboard_right_now().
     *
     * @since 3.0.0
     *
     * @return bool|null True if not multisite, user can't upload files, or the space check option is disabled.
     */
    function wp_dashboard_quota() {}
    function wp_dashboard_browser_nag() {}
    function dashboard_browser_nag_class($classes) {}
    /**
     * Check if the user needs a browser update
     *
     * @since 3.2.0
     *
     * @return array|bool False on failure, array of browser data on success.
     */
    function wp_check_browser_version() {}
    /**
     * Displays the PHP update nag.
     *
     * @since 5.1.0
     */
    function wp_dashboard_php_nag() {}
    function dashboard_php_nag_class($classes) {}
    /**
     * Empty function usable by plugins to output empty dashboard widget (to be populated later by JS).
     */
    function wp_dashboard_empty() {}
    /**
     * Displays a welcome panel to introduce users to WordPress.
     *
     * @since 3.3.0
     */
    function wp_welcome_panel() {}
    /**
     * Retrieve list of importers.
     *
     * @since 2.0.0
     *
     * @global array $wp_importers
     * @return array
     */
    function get_importers() {}
    function _usort_by_first_member($a, $b) {}
    function register_importer($id, $name, $description, $callback) {}
    function wp_import_cleanup($id) {}
    /**
     * Handle importer uploading and add attachment.
     *
     * @since 2.0.0
     *
     * @return array Uploaded file's details on success, error message on failure
     */
    function wp_import_handle_upload() {}
    /**
     * Returns a list from WordPress.org of popular importer plugins.
     *
     * @since 3.5.0
     *
     * @return array Importers with metadata for each.
     */
    function wp_get_popular_importers() {}
    function _wp_translate_postdata($update = false, $post_data = null) {}
    function _wp_get_allowed_postdata($post_data = null) {}
    function edit_post($post_data = null) {}
    function bulk_edit_posts($post_data = null) {}
    function get_default_post_to_edit($post_type = 'post', $create_in_db = false) {}
    function post_exists($title, $content = '', $date = '') {}
    /**
     * Creates a new post from the "Write Post" form using $_POST information.
     *
     * @since 2.1.0
     *
     * @global WP_User $current_user
     *
     * @return int|WP_Error
     */
    function wp_write_post() {}
    /**
     * Calls wp_write_post() and handles the errors.
     *
     * @since 2.0.0
     *
     * @return int|null
     */
    function write_post() {}
    function add_meta($post_ID) {}
    function delete_meta($mid) {}
    /**
     * Get a list of previously defined keys.
     *
     * @since 1.2.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return mixed
     */
    function get_meta_keys() {}
    function get_post_meta_by_id($mid) {}
    function has_meta($postid) {}
    function update_meta($meta_id, $meta_key, $meta_value) {}
    function _fix_attachment_links($post) {}
    function get_available_post_statuses($type = 'post') {}
    function wp_edit_posts_query($q = false) {}
    function get_available_post_mime_types($type = 'attachment') {}
    function wp_edit_attachments_query_vars($q = false) {}
    function wp_edit_attachments_query($q = false) {}
    function postbox_classes($id, $page) {}
    function get_sample_permalink($id, $title = null, $name = null) {}
    function get_sample_permalink_html($id, $new_title = null, $new_slug = null) {}
    function _wp_post_thumbnail_html($thumbnail_id = null, $post = null) {}
    function wp_check_post_lock($post_id) {}
    function wp_set_post_lock($post_id) {}
    /**
     * Outputs the HTML for the notice to say that someone else is editing or has taken over editing of this post.
     *
     * @since 2.8.5
     * @return none
     */
    function _admin_notice_post_locked() {}
    function wp_create_post_autosave($post_data) {}
    /**
     * Saves a draft or manually autosaves for the purpose of showing a post preview.
     *
     * @since 2.7.0
     *
     * @return string URL to redirect to show the preview.
     */
    function post_preview() {}
    function wp_autosave($post_data) {}
    function redirect_post($post_id = '') {}
    function taxonomy_meta_box_sanitize_cb_checkboxes($taxonomy, $terms) {}
    function taxonomy_meta_box_sanitize_cb_input($taxonomy, $terms) {}
    function use_block_editor_for_post($post) {}
    function use_block_editor_for_post_type($post_type) {}
    function get_block_categories($post) {}
    /**
     * Prepares server-registered blocks for the block editor.
     *
     * Returns an associative array of registered block data keyed by block name. Data includes properties
     * of a block relevant for client registration.
     *
     * @since 5.0.0
     *
     * @return array An associative array of registered block data.
     */
    function get_block_editor_server_block_settings() {}
    /**
     * Renders the meta boxes forms.
     *
     * @since 5.0.0
     */
    function the_block_editor_meta_boxes() {}
    function the_block_editor_meta_box_post_form_hidden_fields($post) {}
    function PclZipUtilPathReduction($p_dir) {}
    function PclZipUtilPathInclusion($p_dir, $p_path) {}
    function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode = 0) {}
    function PclZipUtilRename($p_src, $p_dest) {}
    function PclZipUtilOptionText($p_option) {}
    function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter = true) {}
    function get_file_description($file) {}
    /**
     * Get the absolute filesystem path to the root of the WordPress installation
     *
     * @since 1.5.0
     *
     * @return string Full filesystem path to the root of the WordPress installation
     */
    function get_home_path() {}
    function list_files($folder = '', $levels = 100, $exclusions = array( )) {}
    function wp_get_plugin_file_editable_extensions($plugin) {}
    function wp_get_theme_file_editable_extensions($theme) {}
    /**
     * Print file editor templates (for plugins and themes).
     *
     * @since 4.9.0
     */
    function wp_print_file_editor_templates() {}
    function wp_edit_theme_plugin_file($args) {}
    function wp_tempnam($filename = '', $dir = '') {}
    function validate_file_to_edit($file, $allowed_files = array( )) {}
    function _wp_handle_upload($file, $overrides, $time, $action) {}
    function wp_handle_upload_error($file, $message) {}
    function wp_handle_upload($file, $overrides = false, $time = null) {}
    function wp_handle_sideload($file, $overrides = false, $time = null) {}
    function download_url($url, $timeout = 300) {}
    function verify_file_md5($filename, $expected_md5) {}
    function unzip_file($file, $to) {}
    function _unzip_file_ziparchive($file, $to, $needed_dirs = array( )) {}
    function _unzip_file_pclzip($file, $to, $needed_dirs = array( )) {}
    function copy_dir($from, $to, $skip_list = array( )) {}
    function WP_Filesystem($args = false, $context = false, $allow_relaxed_file_ownership = false) {}
    function get_filesystem_method($args = array( ), $context = '', $allow_relaxed_file_ownership = false) {}
    function request_filesystem_credentials($form_post, $type = '', $error = false, $context = '', $extra_fields = null, $allow_relaxed_file_ownership = false) {}
    /**
     * Print the filesystem credentials modal when needed.
     *
     * @since 4.2.0
     */
    function wp_print_request_filesystem_credentials_modal() {}
    function wp_privacy_generate_personal_data_export_group_html($group_data) {}
    function wp_privacy_generate_personal_data_export_file($request_id) {}
    function wp_privacy_send_personal_data_export_email($request_id) {}
    function wp_privacy_process_personal_data_export_page($response, $exporter_index, $email_address, $page, $request_id, $send_as_email, $exporter_key) {}
    function export_wp($args = array( )) {}
    function wxr_cdata($str) {}
    /**
     * Return the URL of the site
     *
     * @since 2.5.0
     *
     * @return string Site URL.
     */
    function wxr_site_url() {}
    function wxr_cat_name($category) {}
    function wxr_category_description($category) {}
    function wxr_tag_name($tag) {}
    function wxr_tag_description($tag) {}
    function wxr_term_name($term) {}
    function wxr_term_description($term) {}
    function wxr_term_meta($term) {}
    function wxr_authors_list(array $post_ids = null) {}
    /**
     * Output all navigation menu terms
     *
     * @since 3.1.0
     */
    function wxr_nav_menu_terms() {}
    /**
     * Output list of taxonomy terms, in XML tag format, associated with a post
     *
     * @since 2.3.0
     */
    function wxr_post_taxonomy() {}
    function wxr_filter_postmeta($return_me, $meta_key) {}
    function get_plugin_data($plugin_file, $markup = true, $translate = true) {}
    function _get_plugin_data_markup_translate($plugin_file, $plugin_data, $markup = true, $translate = true) {}
    function get_plugin_files($plugin) {}
    function get_plugins($plugin_folder = '') {}
    /**
     * Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data.
     *
     * WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content/mu-plugins).
     *
     * @since 3.0.0
     * @return array Key is the mu-plugin file path and the value is an array of the mu-plugin data.
     */
    function get_mu_plugins() {}
    function _sort_uname_callback($a, $b) {}
    /**
     * Check the wp-content directory and retrieve all drop-ins with any plugin data.
     *
     * @since 3.0.0
     * @return array Key is the file path and the value is an array of the plugin data.
     */
    function get_dropins() {}
    /**
     * Returns drop-ins that WordPress uses.
     *
     * Includes Multisite drop-ins only when is_multisite()
     *
     * @since 3.0.0
     * @return array Key is file name. The value is an array, with the first value the
     *  purpose of the drop-in and the second value the name of the constant that must be
     *  true for the drop-in to be used, or true if no constant is required.
     */
    function _get_dropins() {}
    function is_plugin_active($plugin) {}
    function is_plugin_inactive($plugin) {}
    function is_plugin_active_for_network($plugin) {}
    function is_network_only_plugin($plugin) {}
    function activate_plugin($plugin, $redirect = '', $network_wide = false, $silent = false) {}
    function deactivate_plugins($plugins, $silent = false, $network_wide = null) {}
    function activate_plugins($plugins, $redirect = '', $network_wide = false, $silent = false) {}
    function delete_plugins($plugins, $deprecated = '') {}
    /**
     * Validate active plugins
     *
     * Validate all active plugins, deactivates invalid and
     * returns an array of deactivated ones.
     *
     * @since 2.5.0
     * @return array invalid plugins, plugin as key, error as value
     */
    function validate_active_plugins() {}
    function validate_plugin($plugin) {}
    function is_uninstallable_plugin($plugin) {}
    function uninstall_plugin($plugin) {}
    function add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = null) {}
    function add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_management_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_options_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_theme_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_plugins_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_users_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_dashboard_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_posts_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_media_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_links_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_pages_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function add_comments_page($page_title, $menu_title, $capability, $menu_slug, $function = '') {}
    function remove_menu_page($menu_slug) {}
    function remove_submenu_page($menu_slug, $submenu_slug) {}
    function menu_page_url($menu_slug, $echo = true) {}
    function get_admin_page_parent($parent = '') {}
    /**
     * @global string $title
     * @global array $menu
     * @global array $submenu
     * @global string $pagenow
     * @global string $plugin_page
     * @global string $typenow
     */
    function get_admin_page_title() {}
    function get_plugin_page_hook($plugin_page, $parent_page) {}
    function get_plugin_page_hookname($plugin_page, $parent_page) {}
    /**
     * @global string $pagenow
     * @global array $menu
     * @global array $submenu
     * @global array $_wp_menu_nopriv
     * @global array $_wp_submenu_nopriv
     * @global string $plugin_page
     * @global array $_registered_pages
     */
    function user_can_access_admin_page() {}
    function option_update_filter($options) {}
    function add_option_whitelist($new_options, $options = '') {}
    function remove_option_whitelist($del_options, $options = '') {}
    function settings_fields($option_group) {}
    function wp_clean_plugins_cache($clear_update_cache = true) {}
    function plugin_sandbox_scrape($plugin) {}
    function wp_add_privacy_policy_content($plugin_name, $policy_text) {}
    function delete_theme($stylesheet, $redirect = '') {}
    function get_page_templates($post = null, $post_type = 'page') {}
    function _get_template_edit_filename($fullpath, $containingfolder) {}
    function theme_update_available($theme) {}
    function get_theme_update_available($theme) {}
    function get_theme_feature_list($api = true) {}
    function themes_api($action, $args = array( )) {}
    function wp_prepare_themes_for_js($themes = null) {}
    /**
     * Print JS templates for the theme-browsing UI in the Customizer.
     *
     * @since 4.2.0
     */
    function customize_themes_print_templates() {}
    /**
     * Creates a new user from the "Users" form using $_POST information.
     *
     * @since 2.0.0
     *
     * @return int|WP_Error WP_Error or User ID.
     */
    function add_user() {}
    function edit_user($user_id = 0) {}
    /**
     * Fetch a filtered list of user roles that the current user is
     * allowed to edit.
     *
     * Simple function whose main purpose is to allow filtering of the
     * list of roles in the $wp_roles object so that plugins can remove
     * inappropriate ones depending on the situation or user making edits.
     * Specifically because without filtering anyone with the edit_users
     * capability can edit others to be administrators, even if they are
     * only editors or authors. This filter allows admins to delegate
     * user management.
     *
     * @since 2.8.0
     *
     * @return array[] Array of arrays containing role information.
     */
    function get_editable_roles() {}
    function get_user_to_edit($user_id) {}
    function get_users_drafts($user_id) {}
    function wp_delete_user($id, $reassign = null) {}
    function wp_revoke_user($id) {}
    function default_password_nag_handler($errors = false) {}
    function default_password_nag_edit_user($user_ID, $old_data) {}
    /**
     * @since 2.8.0
     *
     * @global string $pagenow
     */
    function default_password_nag() {}
    /**
     * @since 3.5.0
     * @access private
     */
    function delete_users_add_js() {}
    function use_ssl_preference($user) {}
    function admin_created_user_email($text) {}
    function _wp_privacy_resend_request($request_id) {}
    function _wp_privacy_completed_request($request_id) {}
    /**
     * Handle list table actions.
     *
     * @since 4.9.6
     * @access private
     */
    function _wp_personal_data_handle_actions() {}
    /**
     * Cleans up failed and expired requests before displaying the list table.
     *
     * @since 4.9.6
     * @access private
     */
    function _wp_personal_data_cleanup_requests() {}
    /**
     * Personal data export.
     *
     * @since 4.9.6
     * @access private
     */
    function _wp_personal_data_export_page() {}
    /**
     * Personal data anonymization.
     *
     * @since 4.9.6
     * @access private
     */
    function _wp_personal_data_removal_page() {}
    function wp_privacy_process_personal_data_erasure_page($response, $eraser_index, $email_address, $page, $request_id) {}
    /**
     * Add requests pages.
     *
     * @since 4.9.6
     * @access private
     */
    function _wp_privacy_hook_requests_page() {}
    /**
     * Add options for the privacy requests screens.
     *
     * @since 4.9.8
     * @access private
     */
    function _wp_privacy_requests_screen_options() {}
    function update_core($from, $to) {}
    function _copy_dir($from, $to, $skip_list = array( )) {}
    function _redirect_to_about_wordpress($new_version) {}
    /**
     * Cleans up Genericons example files.
     *
     * @since 4.2.2
     *
     * @global array              $wp_theme_directories
     * @global WP_Filesystem_Base $wp_filesystem
     */
    function _upgrade_422_remove_genericons() {}
    function _upgrade_422_find_genericons_files_in_folder($directory) {}
    /**
     * @ignore
     * @since 4.4.0
     */
    function _upgrade_440_force_deactivate_incompatible_plugins() {}
    function _get_list_table($class, $args = array( )) {}
    function register_column_headers($screen, $columns) {}
    function print_column_headers($screen, $with_id = true) {}
    /**
     * Outputs the WPMU menu.
     *
     * @deprecated 3.0.0
     */
    function wpmu_menu() {}
    /**
     * Determines if the available space defined by the admin has been exceeded by the user.
     *
     * @deprecated 3.0.0 Use is_upload_space_available()
     * @see is_upload_space_available()
     */
    function wpmu_checkAvailableSpace() {}
    function mu_options($options) {}
    /**
     * Deprecated functionality for activating a network-only plugin.
     *
     * @deprecated 3.0.0 Use activate_plugin()
     * @see activate_plugin()
     */
    function activate_sitewide_plugin() {}
    function deactivate_sitewide_plugin($plugin = false) {}
    function is_wpmu_sitewide_plugin($file) {}
    /**
     * Deprecated functionality for getting themes network-enabled themes.
     *
     * @deprecated 3.4.0 Use WP_Theme::get_allowed_on_network()
     * @see WP_Theme::get_allowed_on_network()
     */
    function get_site_allowed_themes() {}
    function wpmu_get_blog_allowedthemes($blog_id = 0) {}
    /**
     * Deprecated functionality for determining whether a file is deprecated.
     *
     * @deprecated 3.5.0
     */
    function ms_deprecated_blogs_file() {}
    function post_submit_meta_box($post, $args = array( )) {}
    function attachment_submit_meta_box($post) {}
    function post_format_meta_box($post, $box) {}
    function post_tags_meta_box($post, $box) {}
    function post_categories_meta_box($post, $box) {}
    function post_excerpt_meta_box($post) {}
    function post_trackback_meta_box($post) {}
    function post_custom_meta_box($post) {}
    function post_comment_status_meta_box($post) {}
    function post_comment_meta_box_thead($result) {}
    function post_comment_meta_box($post) {}
    function post_slug_meta_box($post) {}
    function post_author_meta_box($post) {}
    function post_revisions_meta_box($post) {}
    function page_attributes_meta_box($post) {}
    function link_submit_meta_box($link) {}
    function link_categories_meta_box($link) {}
    function link_target_meta_box($link) {}
    function xfn_check($class, $value = '', $deprecated = '') {}
    function link_xfn_meta_box($link) {}
    function link_advanced_meta_box($link) {}
    function post_thumbnail_meta_box($post) {}
    function attachment_id3_data_meta_box($post) {}
    function register_and_do_post_meta_boxes($post) {}
    function wp_install($blog_title, $user_name, $user_email, $public, $deprecated = '', $user_password = '', $language = '') {}
    function wp_install_defaults($user_id) {}
    /**
     * Maybe enable pretty permalinks on installation.
     *
     * If after enabling pretty permalinks don't work, fallback to query-string permalinks.
     *
     * @since 4.2.0
     *
     * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
     *
     * @return bool Whether pretty permalinks are enabled. False otherwise.
     */
    function wp_install_maybe_enable_pretty_permalinks() {}
    function wp_new_blog_notification($blog_title, $blog_url, $user_id, $password) {}
    /**
     * Runs WordPress Upgrade functions.
     *
     * Upgrades the database if needed during a site update.
     *
     * @since 2.1.0
     *
     * @global int  $wp_current_db_version
     * @global int  $wp_db_version
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function wp_upgrade() {}
    /**
     * Functions to be called in installation and upgrade scripts.
     *
     * Contains conditional checks to determine which upgrade scripts to run,
     * based on database version and WP version being updated-to.
     *
     * @ignore
     * @since 1.0.1
     *
     * @global int $wp_current_db_version
     * @global int $wp_db_version
     */
    function upgrade_all() {}
    /**
     * Execute changes made in WordPress 1.0.
     *
     * @ignore
     * @since 1.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_100() {}
    /**
     * Execute changes made in WordPress 1.0.1.
     *
     * @ignore
     * @since 1.0.1
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_101() {}
    /**
     * Execute changes made in WordPress 1.2.
     *
     * @ignore
     * @since 1.2.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_110() {}
    /**
     * Execute changes made in WordPress 1.5.
     *
     * @ignore
     * @since 1.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_130() {}
    /**
     * Execute changes made in WordPress 2.0.
     *
     * @ignore
     * @since 2.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     * @global int  $wp_current_db_version
     */
    function upgrade_160() {}
    /**
     * Execute changes made in WordPress 2.1.
     *
     * @ignore
     * @since 2.1.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     * @global int  $wp_current_db_version
     */
    function upgrade_210() {}
    /**
     * Execute changes made in WordPress 2.3.
     *
     * @ignore
     * @since 2.3.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     * @global int  $wp_current_db_version
     */
    function upgrade_230() {}
    /**
     * Remove old options from the database.
     *
     * @ignore
     * @since 2.3.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_230_options_table() {}
    /**
     * Remove old categories, link2cat, and post2cat database tables.
     *
     * @ignore
     * @since 2.3.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_230_old_tables() {}
    /**
     * Upgrade old slugs made in version 2.2.
     *
     * @ignore
     * @since 2.2.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_old_slugs() {}
    /**
     * Execute changes made in WordPress 2.5.0.
     *
     * @ignore
     * @since 2.5.0
     *
     * @global int $wp_current_db_version
     */
    function upgrade_250() {}
    /**
     * Execute changes made in WordPress 2.5.2.
     *
     * @ignore
     * @since 2.5.2
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_252() {}
    /**
     * Execute changes made in WordPress 2.6.
     *
     * @ignore
     * @since 2.6.0
     *
     * @global int $wp_current_db_version
     */
    function upgrade_260() {}
    /**
     * Execute changes made in WordPress 2.7.
     *
     * @ignore
     * @since 2.7.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     * @global int  $wp_current_db_version
     */
    function upgrade_270() {}
    /**
     * Execute changes made in WordPress 2.8.
     *
     * @ignore
     * @since 2.8.0
     *
     * @global int  $wp_current_db_version
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_280() {}
    /**
     * Execute changes made in WordPress 2.9.
     *
     * @ignore
     * @since 2.9.0
     *
     * @global int $wp_current_db_version
     */
    function upgrade_290() {}
    /**
     * Execute changes made in WordPress 3.0.
     *
     * @ignore
     * @since 3.0.0
     *
     * @global int  $wp_current_db_version
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function upgrade_300() {}
    /**
     * Execute changes made in WordPress 3.3.
     *
     * @ignore
     * @since 3.3.0
     *
     * @global int   $wp_current_db_version
     * @global wpdb  $wpdb
     * @global array $wp_registered_widgets
     * @global array $sidebars_widgets
     */
    function upgrade_330() {}
    /**
     * Execute changes made in WordPress 3.4.
     *
     * @ignore
     * @since 3.4.0
     *
     * @global int   $wp_current_db_version
     * @global wpdb  $wpdb
     */
    function upgrade_340() {}
    /**
     * Execute changes made in WordPress 3.5.
     *
     * @ignore
     * @since 3.5.0
     *
     * @global int   $wp_current_db_version
     * @global wpdb  $wpdb
     */
    function upgrade_350() {}
    /**
     * Execute changes made in WordPress 3.7.
     *
     * @ignore
     * @since 3.7.0
     *
     * @global int $wp_current_db_version
     */
    function upgrade_370() {}
    /**
     * Execute changes made in WordPress 3.7.2.
     *
     * @ignore
     * @since 3.7.2
     * @since 3.8.0
     *
     * @global int $wp_current_db_version
     */
    function upgrade_372() {}
    /**
     * Execute changes made in WordPress 3.8.0.
     *
     * @ignore
     * @since 3.8.0
     *
     * @global int $wp_current_db_version
     */
    function upgrade_380() {}
    /**
     * Execute changes made in WordPress 4.0.0.
     *
     * @ignore
     * @since 4.0.0
     *
     * @global int $wp_current_db_version
     */
    function upgrade_400() {}
    /**
     * Execute changes made in WordPress 4.2.0.
     *
     * @ignore
     * @since 4.2.0
     *
     * @global int   $wp_current_db_version
     * @global wpdb  $wpdb
     */
    function upgrade_420() {}
    /**
     * Executes changes made in WordPress 4.3.0.
     *
     * @ignore
     * @since 4.3.0
     *
     * @global int  $wp_current_db_version Current version.
     * @global wpdb $wpdb                  WordPress database abstraction object.
     */
    function upgrade_430() {}
    /**
     * Executes comments changes made in WordPress 4.3.0.
     *
     * @ignore
     * @since 4.3.0
     *
     * @global int  $wp_current_db_version Current version.
     * @global wpdb $wpdb                  WordPress database abstraction object.
     */
    function upgrade_430_fix_comments() {}
    /**
     * Executes changes made in WordPress 4.3.1.
     *
     * @ignore
     * @since 4.3.1
     */
    function upgrade_431() {}
    /**
     * Executes changes made in WordPress 4.4.0.
     *
     * @ignore
     * @since 4.4.0
     *
     * @global int  $wp_current_db_version Current version.
     * @global wpdb $wpdb                  WordPress database abstraction object.
     */
    function upgrade_440() {}
    /**
     * Executes changes made in WordPress 4.5.0.
     *
     * @ignore
     * @since 4.5.0
     *
     * @global int  $wp_current_db_version Current database version.
     * @global wpdb $wpdb                  WordPress database abstraction object.
     */
    function upgrade_450() {}
    /**
     * Executes changes made in WordPress 4.6.0.
     *
     * @ignore
     * @since 4.6.0
     *
     * @global int $wp_current_db_version Current database version.
     */
    function upgrade_460() {}
    /**
     * Executes changes made in WordPress 5.0.0.
     *
     * @ignore
     * @since 5.0.0
     * @deprecated 5.1.0
     */
    function upgrade_500() {}
    /**
     * Executes changes made in WordPress 5.1.0.
     *
     * @ignore
     * @since 5.1.0
     */
    function upgrade_510() {}
    /**
     * Executes network-level upgrade routines.
     *
     * @since 3.0.0
     *
     * @global int   $wp_current_db_version
     * @global wpdb  $wpdb
     */
    function upgrade_network() {}
    function drop_index($table, $index) {}
    function add_clean_index($table, $index) {}
    function maybe_convert_table_to_utf8mb4($table) {}
    /**
     * Retrieve all options as it was for 1.2.
     *
     * @since 1.2.0
     *
     * @global wpdb  $wpdb
     *
     * @return stdClass List of options.
     */
    function get_alloptions_110() {}
    function __get_option($setting) {}
    function deslash($content) {}
    function dbDelta($queries = '', $execute = true) {}
    function make_db_current($tables = 'all') {}
    function make_db_current_silent($tables = 'all') {}
    function make_site_theme_from_oldschool($theme_name, $template) {}
    function make_site_theme_from_default($theme_name, $template) {}
    /**
     * Creates a site theme.
     *
     * {@internal Missing Long Description}}
     *
     * @since 1.5.0
     *
     * @return false|string
     */
    function make_site_theme() {}
    function translate_level_to_role($level) {}
    /**
     * Checks the version of the installed MySQL binary.
     *
     * @since 2.1.0
     *
     * @global wpdb  $wpdb
     */
    function wp_check_mysql_version() {}
    /**
     * Disables the Automattic widgets plugin, which was merged into core.
     *
     * @since 2.2.0
     */
    function maybe_disable_automattic_widgets() {}
    /**
     * Disables the Link Manager on upgrade if, at the time of upgrade, no links exist in the DB.
     *
     * @since 3.5.0
     *
     * @global int  $wp_current_db_version
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function maybe_disable_link_manager() {}
    /**
     * Runs before the schema is upgraded.
     *
     * @since 2.9.0
     *
     * @global int  $wp_current_db_version
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function pre_schema_upgrade() {}
    /**
     * Install global terms.
     *
     * @since 3.0.0
     *
     * @global wpdb   $wpdb
     * @global string $charset_collate
     */
    function install_global_terms() {}
    /**
     * Determine if global tables should be upgraded.
     *
     * This function performs a series of checks to ensure the environment allows
     * for the safe upgrading of global WordPress database tables. It is necessary
     * because global tables will commonly grow to millions of rows on large
     * installations, and the ability to control their upgrade routines can be
     * critical to the operation of large networks.
     *
     * In a future iteration, this function may use `wp_is_large_network()` to more-
     * intelligently prevent global table upgrades. Until then, we make sure
     * WordPress is on the main site of the main network, to avoid running queries
     * more than once in multi-site or multi-network environments.
     *
     * @since 4.3.0
     *
     * @return bool Whether to run the upgrade routines on global tables.
     */
    function wp_should_upgrade_global_tables() {}
    function get_column_headers($screen) {}
    function get_hidden_columns($screen) {}
    function meta_box_prefs($screen) {}
    function get_hidden_meta_boxes($screen) {}
    function add_screen_option($option, $args = array( )) {}
    /**
     * Get the current screen object
     *
     * @since 3.1.0
     *
     * @global WP_Screen $current_screen
     *
     * @return WP_Screen|null Current screen object or null when screen not defined.
     */
    function get_current_screen() {}
    function set_current_screen($hook_name = '') {}
    function add_cssclass($add, $class) {}
    function add_menu_classes($menu) {}
    function sort_menu($a, $b) {}
    /**
     * Ajax handler for the Heartbeat API in
     * the no-privilege context.
     *
     * Runs when the user is not logged in.
     *
     * @since 3.6.0
     */
    function wp_ajax_nopriv_heartbeat() {}
    /**
     * Ajax handler for fetching a list table.
     *
     * @since 3.1.0
     */
    function wp_ajax_fetch_list() {}
    /**
     * Ajax handler for tag search.
     *
     * @since 3.1.0
     */
    function wp_ajax_ajax_tag_search() {}
    /**
     * Ajax handler for compression testing.
     *
     * @since 3.1.0
     */
    function wp_ajax_wp_compression_test() {}
    /**
     * Ajax handler for image editor previews.
     *
     * @since 3.1.0
     */
    function wp_ajax_imgedit_preview() {}
    /**
     * Ajax handler for oEmbed caching.
     *
     * @since 3.1.0
     *
     * @global WP_Embed $wp_embed
     */
    function wp_ajax_oembed_cache() {}
    /**
     * Ajax handler for user autocomplete.
     *
     * @since 3.4.0
     */
    function wp_ajax_autocomplete_user() {}
    /**
     * Handles AJAX requests for community events
     *
     * @since 4.8.0
     */
    function wp_ajax_get_community_events() {}
    /**
     * Ajax handler for dashboard widgets.
     *
     * @since 3.4.0
     */
    function wp_ajax_dashboard_widgets() {}
    /**
     * Ajax handler for Customizer preview logged-in status.
     *
     * @since 3.4.0
     */
    function wp_ajax_logged_in() {}
    function _wp_ajax_delete_comment_response($comment_id, $delta = -1) {}
    /**
     * Ajax handler for adding a hierarchical term.
     *
     * @access private
     * @since 3.1.0
     */
    function _wp_ajax_add_hierarchical_term() {}
    /**
     * Ajax handler for deleting a comment.
     *
     * @since 3.1.0
     */
    function wp_ajax_delete_comment() {}
    /**
     * Ajax handler for deleting a tag.
     *
     * @since 3.1.0
     */
    function wp_ajax_delete_tag() {}
    /**
     * Ajax handler for deleting a link.
     *
     * @since 3.1.0
     */
    function wp_ajax_delete_link() {}
    /**
     * Ajax handler for deleting meta.
     *
     * @since 3.1.0
     */
    function wp_ajax_delete_meta() {}
    function wp_ajax_delete_post($action) {}
    function wp_ajax_trash_post($action) {}
    function wp_ajax_untrash_post($action) {}
    function wp_ajax_delete_page($action) {}
    /**
     * Ajax handler to dim a comment.
     *
     * @since 3.1.0
     */
    function wp_ajax_dim_comment() {}
    function wp_ajax_add_link_category($action) {}
    /**
     * Ajax handler to add a tag.
     *
     * @since 3.1.0
     */
    function wp_ajax_add_tag() {}
    /**
     * Ajax handler for getting a tagcloud.
     *
     * @since 3.1.0
     */
    function wp_ajax_get_tagcloud() {}
    function wp_ajax_get_comments($action) {}
    function wp_ajax_replyto_comment($action) {}
    /**
     * Ajax handler for editing a comment.
     *
     * @since 3.1.0
     */
    function wp_ajax_edit_comment() {}
    /**
     * Ajax handler for adding a menu item.
     *
     * @since 3.1.0
     */
    function wp_ajax_add_menu_item() {}
    /**
     * Ajax handler for adding meta.
     *
     * @since 3.1.0
     */
    function wp_ajax_add_meta() {}
    function wp_ajax_add_user($action) {}
    /**
     * Ajax handler for closed post boxes.
     *
     * @since 3.1.0
     */
    function wp_ajax_closed_postboxes() {}
    /**
     * Ajax handler for hidden columns.
     *
     * @since 3.1.0
     */
    function wp_ajax_hidden_columns() {}
    /**
     * Ajax handler for updating whether to display the welcome panel.
     *
     * @since 3.1.0
     */
    function wp_ajax_update_welcome_panel() {}
    /**
     * Ajax handler for retrieving menu meta boxes.
     *
     * @since 3.1.0
     */
    function wp_ajax_menu_get_metabox() {}
    /**
     * Ajax handler for internal linking.
     *
     * @since 3.1.0
     */
    function wp_ajax_wp_link_ajax() {}
    /**
     * Ajax handler for menu locations save.
     *
     * @since 3.1.0
     */
    function wp_ajax_menu_locations_save() {}
    /**
     * Ajax handler for saving the meta box order.
     *
     * @since 3.1.0
     */
    function wp_ajax_meta_box_order() {}
    /**
     * Ajax handler for menu quick searching.
     *
     * @since 3.1.0
     */
    function wp_ajax_menu_quick_search() {}
    /**
     * Ajax handler to retrieve a permalink.
     *
     * @since 3.1.0
     */
    function wp_ajax_get_permalink() {}
    /**
     * Ajax handler to retrieve a sample permalink.
     *
     * @since 3.1.0
     */
    function wp_ajax_sample_permalink() {}
    /**
     * Ajax handler for Quick Edit saving a post from a list table.
     *
     * @since 3.1.0
     *
     * @global string $mode List table view mode.
     */
    function wp_ajax_inline_save() {}
    /**
     * Ajax handler for quick edit saving for a term.
     *
     * @since 3.1.0
     */
    function wp_ajax_inline_save_tax() {}
    /**
     * Ajax handler for querying posts for the Find Posts modal.
     *
     * @see window.findPosts
     *
     * @since 3.1.0
     */
    function wp_ajax_find_posts() {}
    /**
     * Ajax handler for saving the widgets order.
     *
     * @since 3.1.0
     */
    function wp_ajax_widgets_order() {}
    /**
     * Ajax handler for saving a widget.
     *
     * @since 3.1.0
     *
     * @global array $wp_registered_widgets
     * @global array $wp_registered_widget_controls
     * @global array $wp_registered_widget_updates
     */
    function wp_ajax_save_widget() {}
    /**
     * Ajax handler for saving a widget.
     *
     * @since 3.9.0
     *
     * @global WP_Customize_Manager $wp_customize
     */
    function wp_ajax_update_widget() {}
    /**
     * Ajax handler for removing inactive widgets.
     *
     * @since 4.4.0
     */
    function wp_ajax_delete_inactive_widgets() {}
    /**
     * Ajax handler for uploading attachments
     *
     * @since 3.3.0
     */
    function wp_ajax_upload_attachment() {}
    /**
     * Ajax handler for image editing.
     *
     * @since 3.1.0
     */
    function wp_ajax_image_editor() {}
    /**
     * Ajax handler for setting the featured image.
     *
     * @since 3.1.0
     */
    function wp_ajax_set_post_thumbnail() {}
    /**
     * Ajax handler for retrieving HTML for the featured image.
     *
     * @since 4.6.0
     */
    function wp_ajax_get_post_thumbnail_html() {}
    /**
     * Ajax handler for setting the featured image for an attachment.
     *
     * @since 4.0.0
     *
     * @see set_post_thumbnail()
     */
    function wp_ajax_set_attachment_thumbnail() {}
    /**
     * Ajax handler for date formatting.
     *
     * @since 3.1.0
     */
    function wp_ajax_date_format() {}
    /**
     * Ajax handler for time formatting.
     *
     * @since 3.1.0
     */
    function wp_ajax_time_format() {}
    /**
     * Ajax handler for saving posts from the fullscreen editor.
     *
     * @since 3.1.0
     * @deprecated 4.3.0
     */
    function wp_ajax_wp_fullscreen_save_post() {}
    /**
     * Ajax handler for removing a post lock.
     *
     * @since 3.1.0
     */
    function wp_ajax_wp_remove_post_lock() {}
    /**
     * Ajax handler for dismissing a WordPress pointer.
     *
     * @since 3.1.0
     */
    function wp_ajax_dismiss_wp_pointer() {}
    /**
     * Ajax handler for getting an attachment.
     *
     * @since 3.5.0
     */
    function wp_ajax_get_attachment() {}
    /**
     * Ajax handler for querying attachments.
     *
     * @since 3.5.0
     */
    function wp_ajax_query_attachments() {}
    /**
     * Ajax handler for updating attachment attributes.
     *
     * @since 3.5.0
     */
    function wp_ajax_save_attachment() {}
    /**
     * Ajax handler for saving backward compatible attachment attributes.
     *
     * @since 3.5.0
     */
    function wp_ajax_save_attachment_compat() {}
    /**
     * Ajax handler for saving the attachment order.
     *
     * @since 3.5.0
     */
    function wp_ajax_save_attachment_order() {}
    /**
     * Ajax handler for sending an attachment to the editor.
     *
     * Generates the HTML to send an attachment to the editor.
     * Backward compatible with the {@see 'media_send_to_editor'} filter
     * and the chain of filters that follow.
     *
     * @since 3.5.0
     */
    function wp_ajax_send_attachment_to_editor() {}
    /**
     * Ajax handler for sending a link to the editor.
     *
     * Generates the HTML to send a non-image embed link to the editor.
     *
     * Backward compatible with the following filters:
     * - file_send_to_editor_url
     * - audio_send_to_editor_url
     * - video_send_to_editor_url
     *
     * @since 3.5.0
     *
     * @global WP_Post  $post
     * @global WP_Embed $wp_embed
     */
    function wp_ajax_send_link_to_editor() {}
    /**
     * Ajax handler for the Heartbeat API.
     *
     * Runs when the user is logged in.
     *
     * @since 3.6.0
     */
    function wp_ajax_heartbeat() {}
    /**
     * Ajax handler for getting revision diffs.
     *
     * @since 3.6.0
     */
    function wp_ajax_get_revision_diffs() {}
    /**
     * Ajax handler for auto-saving the selected color scheme for
     * a user's own profile.
     *
     * @since 3.8.0
     *
     * @global array $_wp_admin_css_colors
     */
    function wp_ajax_save_user_color_scheme() {}
    /**
     * Ajax handler for getting themes from themes_api().
     *
     * @since 3.9.0
     *
     * @global array $themes_allowedtags
     * @global array $theme_field_defaults
     */
    function wp_ajax_query_themes() {}
    /**
     * Apply [embed] Ajax handlers to a string.
     *
     * @since 4.0.0
     *
     * @global WP_Post    $post       Global $post.
     * @global WP_Embed   $wp_embed   Embed API instance.
     * @global WP_Scripts $wp_scripts
     * @global int        $content_width
     */
    function wp_ajax_parse_embed() {}
    /**
     * @since 4.0.0
     *
     * @global WP_Post    $post
     * @global WP_Scripts $wp_scripts
     */
    function wp_ajax_parse_media_shortcode() {}
    /**
     * Ajax handler for destroying multiple open sessions for a user.
     *
     * @since 4.1.0
     */
    function wp_ajax_destroy_sessions() {}
    /**
     * Ajax handler for cropping an image.
     *
     * @since 4.3.0
     */
    function wp_ajax_crop_image() {}
    /**
     * Ajax handler for generating a password.
     *
     * @since 4.4.0
     */
    function wp_ajax_generate_password() {}
    /**
     * Ajax handler for saving the user's WordPress.org username.
     *
     * @since 4.4.0
     */
    function wp_ajax_save_wporg_username() {}
    /**
     * Ajax handler for installing a theme.
     *
     * @since 4.6.0
     *
     * @see Theme_Upgrader
     *
     * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
     */
    function wp_ajax_install_theme() {}
    /**
     * Ajax handler for updating a theme.
     *
     * @since 4.6.0
     *
     * @see Theme_Upgrader
     *
     * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
     */
    function wp_ajax_update_theme() {}
    /**
     * Ajax handler for deleting a theme.
     *
     * @since 4.6.0
     *
     * @see delete_theme()
     *
     * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
     */
    function wp_ajax_delete_theme() {}
    /**
     * Ajax handler for installing a plugin.
     *
     * @since 4.6.0
     *
     * @see Plugin_Upgrader
     *
     * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
     */
    function wp_ajax_install_plugin() {}
    /**
     * Ajax handler for updating a plugin.
     *
     * @since 4.2.0
     *
     * @see Plugin_Upgrader
     *
     * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
     */
    function wp_ajax_update_plugin() {}
    /**
     * Ajax handler for deleting a plugin.
     *
     * @since 4.6.0
     *
     * @see delete_plugins()
     *
     * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
     */
    function wp_ajax_delete_plugin() {}
    /**
     * Ajax handler for searching plugins.
     *
     * @since 4.6.0
     *
     * @global string $s Search term.
     */
    function wp_ajax_search_plugins() {}
    /**
     * Ajax handler for searching plugins to install.
     *
     * @since 4.6.0
     */
    function wp_ajax_search_install_plugins() {}
    /**
     * Ajax handler for editing a theme or plugin file.
     *
     * @since 4.9.0
     * @see wp_edit_theme_plugin_file()
     */
    function wp_ajax_edit_theme_plugin_file() {}
    /**
     * Ajax handler for exporting a user's personal data.
     *
     * @since 4.9.6
     */
    function wp_ajax_wp_privacy_export_personal_data() {}
    /**
     * Ajax handler for erasing personal data.
     *
     * @since 4.9.6
     */
    function wp_ajax_wp_privacy_erase_personal_data() {}
    /**
     * Add a link to using values provided in $_POST.
     *
     * @since 2.0.0
     *
     * @return int|WP_Error Value 0 or WP_Error on failure. The link ID on success.
     */
    function add_link() {}
    function edit_link($link_id = 0) {}
    /**
     * Retrieves the default link for editing.
     *
     * @since 2.0.0
     *
     * @return stdClass Default link object.
     */
    function get_default_link_to_edit() {}
    function wp_delete_link($link_id) {}
    function wp_get_link_cats($link_id = 0) {}
    function get_link_to_edit($link) {}
    function wp_insert_link($linkdata, $wp_error = false) {}
    function wp_set_link_cats($link_id = 0, $link_categories = array( )) {}
    function wp_update_link($linkdata) {}
    /**
     * Outputs the 'disabled' message for the WordPress Link Manager.
     *
     * @since 3.5.0
     * @access private
     *
     * @global string $pagenow
     */
    function wp_link_manager_disabled_message() {}
    /**
     * Retrieve list of WordPress theme features (aka theme tags).
     *
     * @since 2.8.0
     *
     * @deprecated since 3.1.0 Use get_theme_feature_list() instead.
     *
     * @return array
     */
    function install_themes_feature_list() {}
    function install_theme_search_form($type_selector = true) {}
    /**
     * Display tags filter for themes.
     *
     * @since 2.8.0
     */
    function install_themes_dashboard() {}
    /**
     * @since 2.8.0
     */
    function install_themes_upload() {}
    function display_theme($theme) {}
    /**
     * Display theme content based on theme list.
     *
     * @since 2.8.0
     *
     * @global WP_Theme_Install_List_Table $wp_list_table
     */
    function display_themes() {}
    /**
     * Display theme information in dialog box form.
     *
     * @since 2.8.0
     *
     * @global WP_Theme_Install_List_Table $wp_list_table
     */
    function install_theme_information() {}
    function plugins_api($action, $args = array( )) {}
    function install_popular_tags($args = array( )) {}
    /**
     * @since 2.7.0
     */
    function install_dashboard() {}
    function install_search_form($deprecated = true) {}
    /**
     * Upload from zip
     *
     * @since 2.8.0
     */
    function install_plugins_upload() {}
    /**
     * Show a username form for the favorites page
     *
     * @since 3.5.0
     */
    function install_plugins_favorites_form() {}
    /**
     * Display plugin content based on plugin list.
     *
     * @since 2.7.0
     *
     * @global WP_List_Table $wp_list_table
     */
    function display_plugins_table() {}
    function install_plugin_install_status($api, $loop = false) {}
    /**
     * Display plugin information in dialog box form.
     *
     * @since 2.7.0
     *
     * @global string $tab
     */
    function install_plugin_information() {}
    function comment_exists($comment_author, $comment_date, $timezone = 'blog') {}
    /**
     * Update a comment with values provided in $_POST.
     *
     * @since 2.0.0
     */
    function edit_comment() {}
    function get_comment_to_edit($id) {}
    function get_pending_comments_num($post_id) {}
    function floated_admin_avatar($name) {}
    /**
     * @since 2.7.0
     */
    function enqueue_comment_hotkeys_js() {}
    function comment_footer_die($msg) {}
    function _wp_ajax_menu_quick_search($request = array( )) {}
    /**
     * Register nav menu meta boxes and advanced menu items.
     *
     * @since 3.0.0
     */
    function wp_nav_menu_setup() {}
    /**
     * Limit the amount of meta boxes to pages, posts, links, and categories for first time users.
     *
     * @since 3.0.0
     *
     * @global array $wp_meta_boxes
     */
    function wp_initial_nav_menu_meta_boxes() {}
    /**
     * Creates meta boxes for any post type menu item..
     *
     * @since 3.0.0
     */
    function wp_nav_menu_post_type_meta_boxes() {}
    /**
     * Creates meta boxes for any taxonomy menu item.
     *
     * @since 3.0.0
     */
    function wp_nav_menu_taxonomy_meta_boxes() {}
    function wp_nav_menu_disabled_check($nav_menu_selected_id) {}
    /**
     * Displays a meta box for the custom links menu item.
     *
     * @since 3.0.0
     *
     * @global int        $_nav_menu_placeholder
     * @global int|string $nav_menu_selected_id
     */
    function wp_nav_menu_item_link_meta_box() {}
    function wp_nav_menu_item_post_type_meta_box($object, $box) {}
    function wp_nav_menu_item_taxonomy_meta_box($object, $box) {}
    function wp_save_nav_menu_items($menu_id = 0, $menu_data = array( )) {}
    function _wp_nav_menu_meta_box_object($object = null) {}
    function wp_get_nav_menu_to_edit($menu_id = 0) {}
    /**
     * Returns the columns for the nav menus page.
     *
     * @since 3.0.0
     *
     * @return array Columns.
     */
    function wp_nav_menu_manage_columns() {}
    /**
     * Deletes orphaned draft menu items
     *
     * @access private
     * @since 3.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function _wp_delete_orphaned_draft_menu_items() {}
    function wp_nav_menu_update_menu_items($nav_menu_selected_id, $nav_menu_selected_title) {}
    /**
     * If a JSON blob of navigation menu data is in POST data, expand it and inject
     * it into `$_POST` to avoid PHP `max_input_vars` limitations. See #14134.
     *
     * @ignore
     * @since 4.5.3
     * @access private
     */
    function _wp_expand_nav_menu_post_data() {}
    /**
     * Output JavaScript to toggle display of additional settings if avatars are disabled.
     *
     * @since 4.2.0
     */
    function options_discussion_add_js() {}
    /**
     * Display JavaScript on the page.
     *
     * @since 3.5.0
     */
    function options_general_add_js() {}
    /**
     * Display JavaScript on the page.
     *
     * @since 3.5.0
     */
    function options_reading_add_js() {}
    /**
     * Render the site charset setting.
     *
     * @since 3.5.0
     */
    function options_reading_blog_charset() {}
    function translations_api($type, $args = null) {}
    /**
     * Get available translations from the WordPress.org API.
     *
     * @since 4.0.0
     *
     * @see translations_api()
     *
     * @return array Array of translations, each an array of data. If the API response results
     *               in an error, an empty array will be returned.
     */
    function wp_get_available_translations() {}
    function wp_install_language_form($languages) {}
    function wp_download_language_pack($download) {}
    /**
     * Check if WordPress has access to the filesystem without asking for
     * credentials.
     *
     * @since 4.0.0
     *
     * @return bool Returns true on success, false on failure.
     */
    function wp_can_install_language_pack() {}
    function get_cli_args($param, $required = false) {}
    function wp_get_db_schema($scope = 'all', $blog_id = null) {}
    function populate_options(array $options = array( )) {}
    /**
     * Execute WordPress role creation for the various WordPress versions.
     *
     * @since 2.0.0
     */
    function populate_roles() {}
    /**
     * Create the roles for WordPress 2.0
     *
     * @since 2.0.0
     */
    function populate_roles_160() {}
    /**
     * Create and modify WordPress roles for WordPress 2.1.
     *
     * @since 2.1.0
     */
    function populate_roles_210() {}
    /**
     * Create and modify WordPress roles for WordPress 2.3.
     *
     * @since 2.3.0
     */
    function populate_roles_230() {}
    /**
     * Create and modify WordPress roles for WordPress 2.5.
     *
     * @since 2.5.0
     */
    function populate_roles_250() {}
    /**
     * Create and modify WordPress roles for WordPress 2.6.
     *
     * @since 2.6.0
     */
    function populate_roles_260() {}
    /**
     * Create and modify WordPress roles for WordPress 2.7.
     *
     * @since 2.7.0
     */
    function populate_roles_270() {}
    /**
     * Create and modify WordPress roles for WordPress 2.8.
     *
     * @since 2.8.0
     */
    function populate_roles_280() {}
    /**
     * Create and modify WordPress roles for WordPress 3.0.
     *
     * @since 3.0.0
     */
    function populate_roles_300() {}
    /**
     * Install Network.
     *
     * @since 3.0.0
     */
    function install_network() {}
    function populate_network($network_id = 1, $domain = '', $email = '', $site_name = '', $path = '/', $subdomain_install = false) {}
    function populate_network_meta($network_id, array $meta = array( )) {}
    function populate_site_meta($site_id, array $meta = array( )) {}
    /**
     * Retrieve the contributor credits.
     *
     * @since 3.2.0
     *
     * @return array|false A list of all of the contributors, or false on error.
     */
    function wp_credits() {}
    function _wp_credits_add_profile_link($display_name, $username, $profiles) {}
    function _wp_credits_build_object_link($data) {}
    /**
     * Check for an existing network.
     *
     * @since 3.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return string|false Base domain if network exists, otherwise false.
     */
    function network_domain_check() {}
    /**
     * Allow subdomain installation
     *
     * @since 3.0.0
     * @return bool Whether subdomain installation is allowed
     */
    function allow_subdomain_install() {}
    /**
     * Allow subdirectory installation.
     *
     * @since 3.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return bool Whether subdirectory installation is allowed
     */
    function allow_subdirectory_install() {}
    /**
     * Get base domain of network.
     *
     * @since 3.0.0
     * @return string Base domain.
     */
    function get_clean_basedomain() {}
    function network_step1($errors = false) {}
    function network_step2($errors = false) {}
    function wp_image_editor($post_id, $msg = false) {}
    function wp_stream_image($image, $mime_type, $attachment_id) {}
    function wp_save_image_file($filename, $image, $mime_type, $post_id) {}
    function _image_get_preview_ratio($w, $h) {}
    function _rotate_image_resource($img, $angle) {}
    function _flip_image_resource($img, $horz, $vert) {}
    function _crop_image_resource($img, $x, $y, $w, $h) {}
    function image_edit_apply_changes($image, $changes) {}
    function stream_preview_image($post_id) {}
    function wp_restore_image($post_id) {}
    function wp_save_image($post_id) {}
    function wp_category_checklist($post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true) {}
    function wp_terms_checklist($post_id = 0, $args = array( )) {}
    function wp_popular_terms_checklist($taxonomy, $default = 0, $number = 10, $echo = true) {}
    function wp_link_category_checklist($link_id = 0) {}
    function get_inline_data($post) {}
    function wp_comment_reply($position = 1, $checkbox = false, $mode = 'single', $table_row = true) {}
    /**
     * Output 'undo move to trash' text for comments
     *
     * @since 2.9.0
     */
    function wp_comment_trashnotice() {}
    function list_meta($meta) {}
    function _list_meta_row($entry, $count) {}
    function meta_form($post = null) {}
    function touch_time($edit = 1, $for_post = 1, $tab_index = 0, $multi = 0) {}
    function page_template_dropdown($default = '', $post_type = 'page') {}
    function parent_dropdown($default = 0, $parent = 0, $level = 0, $post = null) {}
    function wp_dropdown_roles($selected = '') {}
    function wp_import_upload_form($action) {}
    function add_meta_box($id, $title, $callback, $screen = null, $context = 'advanced', $priority = 'default', $callback_args = null) {}
    function do_block_editor_incompatible_meta_box($object, $box) {}
    function _get_plugin_from_callback($callback) {}
    function do_meta_boxes($screen, $context, $object) {}
    function remove_meta_box($id, $screen, $context) {}
    function do_accordion_sections($screen, $context, $object) {}
    function add_settings_section($id, $title, $callback, $page) {}
    function add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array( )) {}
    function do_settings_sections($page) {}
    function do_settings_fields($page, $section) {}
    function add_settings_error($setting, $code, $message, $type = 'error') {}
    function get_settings_errors($setting = '', $sanitize = false) {}
    function settings_errors($setting = '', $sanitize = false, $hide_on_update = false) {}
    function find_posts_div($found_action = '') {}
    /**
     * Displays the post password.
     *
     * The password is passed through esc_attr() to ensure that it is safe for placing in an html attribute.
     *
     * @since 2.7.0
     */
    function the_post_password() {}
    function _draft_or_post_title($post = 0) {}
    /**
     * Displays the search query.
     *
     * A simple wrapper to display the "s" parameter in a `GET` URI. This function
     * should only be used when the_search_query() cannot.
     *
     * @since 2.7.0
     */
    function _admin_search_query() {}
    function iframe_header($title = '', $deprecated = false) {}
    /**
     * Generic Iframe footer for use with Thickbox
     *
     * @since 2.7.0
     */
    function iframe_footer() {}
    function _post_states($post) {}
    function _media_states($post) {}
    /**
     * Test support for compressing JavaScript from PHP
     *
     * Outputs JavaScript that tests if compression from PHP works as expected
     * and sets an option with the result. Has no effect when the current user
     * is not an administrator. To run the test again the option 'can_compress_scripts'
     * has to be deleted.
     *
     * @since 2.8.0
     */
    function compression_test() {}
    function submit_button($text = null, $type = 'primary', $name = 'submit', $wrap = true, $other_attributes = null) {}
    function get_submit_button($text = '', $type = 'primary large', $name = 'submit', $wrap = true, $other_attributes = '') {}
    /**
     * @global bool $is_IE
     */
    function _wp_admin_html_begin() {}
    function convert_to_screen($hook_name) {}
    /**
     * Output the HTML for restoring the post data from DOM storage
     *
     * @since 3.6.0
     * @access private
     */
    function _local_storage_notice() {}
    function wp_star_rating($args = array( )) {}
    /**
     * Output a notice when editing the page for posts (internal use only).
     *
     * @ignore
     * @since 4.2.0
     */
    function _wp_posts_page_notice() {}
    /**
     * Defines the default media upload tabs
     *
     * @since 2.5.0
     *
     * @return array default tabs
     */
    function media_upload_tabs() {}
    function update_gallery_tab($tabs) {}
    /**
     * Outputs the legacy media upload tabs UI.
     *
     * @since 2.5.0
     *
     * @global string $redir_tab
     */
    function the_media_upload_tabs() {}
    function get_image_send_to_editor($id, $caption, $title, $align, $url = '', $rel = false, $size = 'medium', $alt = '') {}
    function image_add_caption($html, $id, $caption, $title, $align, $url, $size, $alt = '') {}
    function _cleanup_image_add_caption($matches) {}
    function media_send_to_editor($html) {}
    function media_handle_upload($file_id, $post_id, $post_data = array( ), $overrides = array('test_form' => false)) {}
    function media_handle_sideload($file_array, $post_id, $desc = null, $post_data = array( )) {}
    function wp_iframe($content_func) {}
    function media_buttons($editor_id = 'content') {}
    function get_upload_iframe_src($type = null, $post_id = null, $tab = null) {}
    /**
     * Handles form submissions for the legacy media uploader.
     *
     * @since 2.5.0
     *
     * @return mixed void|object WP_Error on failure
     */
    function media_upload_form_handler() {}
    /**
     * Handles the process of uploading media.
     *
     * @since 2.5.0
     *
     * @return null|string
     */
    function wp_media_upload_handler() {}
    function media_sideload_image($file, $post_id, $desc = null, $return = 'html') {}
    /**
     * Retrieves the legacy media uploader form in an iframe.
     *
     * @since 2.5.0
     *
     * @return string|null
     */
    function media_upload_gallery() {}
    /**
     * Retrieves the legacy media library form in an iframe.
     *
     * @since 2.5.0
     *
     * @return string|null
     */
    function media_upload_library() {}
    function image_align_input_fields($post, $checked = '') {}
    function image_size_input_fields($post, $check = '') {}
    function image_link_input_fields($post, $url_type = '') {}
    function wp_caption_input_textarea($edit_post) {}
    function image_attachment_fields_to_edit($form_fields, $post) {}
    function media_single_attachment_fields_to_edit($form_fields, $post) {}
    function media_post_single_attachment_fields_to_edit($form_fields, $post) {}
    function image_attachment_fields_to_save($post, $attachment) {}
    function image_media_send_to_editor($html, $attachment_id, $attachment) {}
    function get_attachment_fields_to_edit($post, $errors = null) {}
    function get_media_items($post_id, $errors) {}
    function get_media_item($attachment_id, $args = null) {}
    function get_compat_media_markup($attachment_id, $args = null) {}
    /**
     * Outputs the legacy media upload header.
     *
     * @since 2.5.0
     */
    function media_upload_header() {}
    function media_upload_form($errors = null) {}
    function media_upload_type_form($type = 'file', $errors = null, $id = null) {}
    function media_upload_type_url_form($type = null, $errors = null, $id = null) {}
    function media_upload_gallery_form($errors) {}
    function media_upload_library_form($errors) {}
    function wp_media_insert_url_form($default_view = 'image') {}
    /**
     * Displays the multi-file uploader message.
     *
     * @since 2.6.0
     *
     * @global int $post_ID
     */
    function media_upload_flash_bypass() {}
    /**
     * Displays the browser's built-in uploader message.
     *
     * @since 2.6.0
     */
    function media_upload_html_bypass() {}
    /**
     * Used to display a "After a file has been uploaded..." help message.
     *
     * @since 3.3.0
     */
    function media_upload_text_after() {}
    /**
     * Displays the checkbox to scale images.
     *
     * @since 3.3.0
     */
    function media_upload_max_image_resize() {}
    /**
     * Displays the out of storage quota message in Multisite.
     *
     * @since 3.5.0
     */
    function multisite_over_quota_message() {}
    function edit_form_image_editor($post) {}
    /**
     * Displays non-editable attachment metadata in the publish meta box.
     *
     * @since 3.5.0
     */
    function attachment_submitbox_metadata() {}
    function wp_add_id3_tag_data($metadata, $data) {}
    function wp_read_video_metadata($file) {}
    function wp_read_audio_metadata($file) {}
    function wp_get_media_creation_timestamp($metadata) {}
    function wp_media_attach_action($parent_id, $action = 'attach') {}
    /**
     * Returns whether the server is running Apache with the mod_rewrite module loaded.
     *
     * @since 2.0.0
     *
     * @return bool
     */
    function got_mod_rewrite() {}
    /**
     * Returns whether the server supports URL rewriting.
     *
     * Detects Apache's mod_rewrite, IIS 7.0+ permalink support, and nginx.
     *
     * @since 3.7.0
     *
     * @global bool $is_nginx
     *
     * @return bool Whether the server supports URL rewriting.
     */
    function got_url_rewrite() {}
    function extract_from_markers($filename, $marker) {}
    function insert_with_markers($filename, $marker, $insertion) {}
    /**
     * Updates the htaccess file with the current rules if it is writable.
     *
     * Always writes to the file if it exists and is writable to ensure that we
     * blank out old rules.
     *
     * @since 1.5.0
     *
     * @global WP_Rewrite $wp_rewrite
     *
     * @return bool|null True on write success, false on failure. Null in multisite.
     */
    function save_mod_rewrite_rules() {}
    /**
     * Updates the IIS web.config file with the current rules if it is writable.
     * If the permalinks do not require rewrite rules then the rules are deleted from the web.config file.
     *
     * @since 2.8.0
     *
     * @global WP_Rewrite $wp_rewrite
     *
     * @return bool|null True on write success, false on failure. Null in multisite.
     */
    function iis7_save_url_rewrite_rules() {}
    function update_recently_edited($file) {}
    function wp_make_theme_file_tree($allowed_files) {}
    function wp_print_theme_file_tree($tree, $level = 2, $size = 1, $index = 1) {}
    function wp_make_plugin_file_tree($plugin_editable_files) {}
    function wp_print_plugin_file_tree($tree, $label = '', $level = 2, $size = 1, $index = 1) {}
    function update_home_siteurl($old_value, $value) {}
    function wp_reset_vars($vars) {}
    function show_message($message) {}
    function wp_doc_link_parse($content) {}
    /**
     * Saves option for number of rows when listing posts, pages, comments, etc.
     *
     * @since 2.8.0
     */
    function set_screen_options() {}
    function iis7_rewrite_rule_exists($filename) {}
    function iis7_delete_rewrite_rule($filename) {}
    function iis7_add_rewrite_rule($filename, $rewrite_rule) {}
    function saveDomDocument($doc, $filename) {}
    function admin_color_scheme_picker($user_id) {}
    /**
     *
     * @global array $_wp_admin_css_colors
     */
    function wp_color_scheme_settings() {}
    /**
     * @since 3.3.0
     */
    function _ipad_meta() {}
    function wp_check_locked_posts($response, $data, $screen_id) {}
    function wp_refresh_post_lock($response, $data, $screen_id) {}
    function wp_refresh_post_nonces($response, $data, $screen_id) {}
    function wp_refresh_heartbeat_nonces($response) {}
    function wp_heartbeat_set_suspension($settings) {}
    function heartbeat_autosave($response, $data) {}
    /**
     * Remove single-use URL parameters and create canonical link based on new URL.
     *
     * Remove specific query string parameters from a URL, create the canonical link,
     * put it in the admin header, and change the current URL to match.
     *
     * @since 4.2.0
     */
    function wp_admin_canonical_url() {}
    /**
     * Send a referrer policy header so referrers are not sent externally from administration screens.
     *
     * @since 4.9.0
     */
    function wp_admin_headers() {}
    /**
     * Outputs JS that reloads the page if the user navigated to it with the Back or Forward button.
     *
     * Used on the Edit Post and Add New Post screens. Needed to ensure the page is not loaded from browser cache,
     * so the post title and editor content are the last saved versions. Ideally this script should run first in the head.
     *
     * @since 4.6.0
     */
    function wp_page_reload_on_back_button_js() {}
    function update_option_new_admin_email($old_value, $value) {}
    function _wp_privacy_settings_filter_draft_page_titles($title, $page) {}
    /**
     * Checks if the user needs to update PHP.
     *
     * @since 5.1.0
     * @since 5.1.1 Added the {@see 'wp_is_php_version_acceptable'} filter.
     *
     * @return array|false $response Array of PHP version data. False on failure.
     */
    function wp_check_php_version() {}
    function __($text, $domain = 'default') {}
    function _x($text, $context, $domain = 'default') {}
    function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1) {}
    function esc_attr($text) {}
    function apply_filters($tag, $value) {}
    function get_option($option, $default = false) {}
    /**
     * Is the server running earlier than 1.5.0 version of lighttpd?
     *
     * @since 2.5.0
     *
     * @return bool Whether the server is running lighttpd < 1.5.0.
     */
    function is_lighttpd_before_150() {}
    function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1) {}
    function did_action($tag) {}
    function do_action_ref_array($tag, $args) {}
    function get_bloginfo($show = '', $filter = 'raw') {}
    /**
     * Determines whether the current request is for an administrative interface page.
     *
     * Does not check if the user is an administrator; use current_user_can()
     * for checking roles and capabilities.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.1
     *
     * @global WP_Screen $current_screen
     *
     * @return bool True if inside WordPress administration interface, false otherwise.
     */
    function is_admin() {}
    function site_url($path = '', $scheme = null) {}
    function admin_url($path = '', $scheme = 'admin') {}
    function home_url($path = '', $scheme = null) {}
    function includes_url($path = '', $scheme = null) {}
    /**
     * Guess the URL for the site.
     *
     * Will remove wp-admin links to retrieve only return URLs not in the wp-admin
     * directory.
     *
     * @since 2.6.0
     *
     * @return string The guessed URL.
     */
    function wp_guess_url() {}
    function json_encode($string) {}
    function get_file($path) {}
    function wp_crop_image($src, $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h, $src_abs = false, $dst_file = false) {}
    function wp_generate_attachment_metadata($attachment_id, $file) {}
    function wp_exif_frac2dec($str) {}
    function wp_exif_date2ts($str) {}
    function wp_read_image_metadata($file) {}
    function file_is_valid_image($path) {}
    function file_is_displayable_image($path) {}
    function load_image_to_edit($attachment_id, $mime_type, $size = 'full') {}
    function _load_image_to_edit_path($attachment_id, $size = 'full') {}
    function _copy_image_file($attachment_id) {}
    /**
     * @since 2.1.0
     * @deprecated 2.1.0 Use wp_editor()
     * @see wp_editor()
     */
    function tinymce_include() {}
    /**
     * Unused Admin function.
     *
     * @since 2.0.0
     * @deprecated 2.5.0
     *
     */
    function documentation_link() {}
    function wp_shrink_dimensions($width, $height, $wmax = 128, $hmax = 96) {}
    function get_udims($width, $height) {}
    function dropdown_categories($default = 0, $parent = 0, $popular_ids = array( )) {}
    function dropdown_link_categories($default = 0) {}
    function get_real_file_to_edit($file) {}
    function wp_dropdown_cats($currentcat = 0, $currentparent = 0, $parent = 0, $level = 0, $categories = 0) {}
    function add_option_update_handler($option_group, $option_name, $sanitize_callback = '') {}
    function remove_option_update_handler($option_group, $option_name, $sanitize_callback = '') {}
    function codepress_get_lang($filename) {}
    /**
     * Adds JavaScript required to make CodePress work on the theme/plugin editors.
     *
     * @since 2.8.0
     * @deprecated 3.0.0
**/
    function codepress_footer_js() {}
    /**
     * Determine whether to use CodePress.
     *
     * @since 2.8.0
     * @deprecated 3.0.0
**/
    function use_codepress() {}
    /**
     * Get all user IDs.
     *
     * @deprecated 3.1.0 Use get_users()
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return array List of user IDs.
     */
    function get_author_user_ids() {}
    function get_editable_authors($user_id) {}
    function get_editable_user_ids($user_id, $exclude_zeros = true, $post_type = 'post') {}
    /**
     * Gets all users who are not authors.
     *
     * @deprecated 3.1.0 Use get_users()
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function get_nonauthor_user_ids() {}
    function get_others_unpublished_posts($user_id, $type = 'any') {}
    function get_others_drafts($user_id) {}
    function get_others_pending($user_id) {}
    /**
     * Output the QuickPress dashboard widget.
     *
     * @since 3.0.0
     * @deprecated 3.2.0 Use wp_dashboard_quick_press()
     * @see wp_dashboard_quick_press()
     */
    function wp_dashboard_quick_press_output() {}
    function wp_tiny_mce($teeny = false, $settings = false) {}
    /**
     * Preloads TinyMCE dialogs.
     *
     * @deprecated 3.3.0 Use wp_editor()
     * @see wp_editor()
     */
    function wp_preload_dialogs() {}
    /**
     * Prints TinyMCE editor JS.
     *
     * @deprecated 3.3.0 Use wp_editor()
     * @see wp_editor()
     */
    function wp_print_editor_js() {}
    /**
     * Handles quicktags.
     *
     * @deprecated 3.3.0 Use wp_editor()
     * @see wp_editor()
     */
    function wp_quicktags() {}
    function screen_layout($screen) {}
    function screen_options($screen) {}
    function screen_meta($screen) {}
    /**
     * Favorite actions were deprecated in version 3.2. Use the admin bar instead.
     *
     * @since 2.7.0
     * @deprecated 3.2.0 Use WP_Admin_Bar
     * @see WP_Admin_Bar
     */
    function favorite_actions() {}
    /**
     * Handles uploading an image.
     *
     * @deprecated 3.3.0 Use wp_media_upload_handler()
     * @see wp_media_upload_handler()
     *
     * @return null|string
     */
    function media_upload_image() {}
    /**
     * Handles uploading an audio file.
     *
     * @deprecated 3.3.0 Use wp_media_upload_handler()
     * @see wp_media_upload_handler()
     *
     * @return null|string
     */
    function media_upload_audio() {}
    /**
     * Handles uploading a video file.
     *
     * @deprecated 3.3.0 Use wp_media_upload_handler()
     * @see wp_media_upload_handler()
     *
     * @return null|string
     */
    function media_upload_video() {}
    /**
     * Handles uploading a generic file.
     *
     * @deprecated 3.3.0 Use wp_media_upload_handler()
     * @see wp_media_upload_handler()
     *
     * @return null|string
     */
    function media_upload_file() {}
    /**
     * Handles retrieving the insert-from-URL form for an image.
     *
     * @deprecated 3.3.0 Use wp_media_insert_url_form()
     * @see wp_media_insert_url_form()
     *
     * @return string
     */
    function type_url_form_image() {}
    /**
     * Handles retrieving the insert-from-URL form for an audio file.
     *
     * @deprecated 3.3.0 Use wp_media_insert_url_form()
     * @see wp_media_insert_url_form()
     *
     * @return string
     */
    function type_url_form_audio() {}
    /**
     * Handles retrieving the insert-from-URL form for a video file.
     *
     * @deprecated 3.3.0 Use wp_media_insert_url_form()
     * @see wp_media_insert_url_form()
     *
     * @return string
     */
    function type_url_form_video() {}
    /**
     * Handles retrieving the insert-from-URL form for a generic file.
     *
     * @deprecated 3.3.0 Use wp_media_insert_url_form()
     * @see wp_media_insert_url_form()
     *
     * @return string
     */
    function type_url_form_file() {}
    function add_contextual_help($screen, $help) {}
    /**
     * Get the allowed themes for the current site.
     *
     * @since 3.0.0
     * @deprecated 3.4.0 Use wp_get_themes()
     * @see wp_get_themes()
     *
     * @return array $themes Array of allowed themes.
     */
    function get_allowed_themes() {}
    /**
     * Retrieves a list of broken themes.
     *
     * @since 1.5.0
     * @deprecated 3.4.0 Use wp_get_themes()
     * @see wp_get_themes()
     *
     * @return array
     */
    function get_broken_themes() {}
    /**
     * Retrieves information on the current active theme.
     *
     * @since 2.0.0
     * @deprecated 3.4.0 Use wp_get_theme()
     * @see wp_get_theme()
     *
     * @return WP_Theme
     */
    function current_theme_info() {}
    function _insert_into_post_button($type) {}
    function _media_button($title, $icon, $type, $id) {}
    function get_post_to_edit($id) {}
    /**
     * Gets the default page information to use.
     *
     * @since 2.5.0
     * @deprecated 3.5.0 Use get_default_post_to_edit()
     * @see get_default_post_to_edit()
     *
     * @return WP_Post Post object containing all the default post data as attributes
     */
    function get_default_page_to_edit() {}
    function wp_create_thumbnail($file, $max_side, $deprecated = '') {}
    /**
     * This was once used to display a meta box for the nav menu theme locations.
     *
     * Deprecated in favor of a 'Manage Locations' tab added to nav menus management screen.
     *
     * @since 3.0.0
     * @deprecated 3.6.0
     */
    function wp_nav_menu_locations_meta_box() {}
    function wp_update_core($current, $feedback = '') {}
    function wp_update_plugin($plugin, $feedback = '') {}
    function wp_update_theme($theme, $feedback = '') {}
    function the_attachment_links($id = false) {}
    /**
     * Displays a screen icon.
     *
     * @since 2.7.0
     * @deprecated 3.8.0
     */
    function screen_icon() {}
    /**
     * Retrieves the screen icon (no longer used in 3.8+).
     *
     * @since 3.2.0
     * @deprecated 3.8.0
     *
     * @return string An HTML comment explaining that icons are no longer used.
     */
    function get_screen_icon() {}
    /**
     * Deprecated dashboard widget controls.
     *
     * @since 2.5.0
     * @deprecated 3.8.0
     */
    function wp_dashboard_incoming_links_output() {}
    /**
     * Deprecated dashboard secondary output.
     *
     * @deprecated 3.8.0
     */
    function wp_dashboard_secondary_output() {}
    /**
     * Deprecated dashboard widget controls.
     *
     * @since 2.7.0
     * @deprecated 3.8.0
     */
    function wp_dashboard_incoming_links() {}
    /**
     * Deprecated dashboard incoming links control.
     *
     * @deprecated 3.8.0
     */
    function wp_dashboard_incoming_links_control() {}
    /**
     * Deprecated dashboard plugins control.
     *
     * @deprecated 3.8.0
     */
    function wp_dashboard_plugins() {}
    /**
     * Deprecated dashboard primary control.
     *
     * @deprecated 3.8.0
     */
    function wp_dashboard_primary_control() {}
    /**
     * Deprecated dashboard recent comments control.
     *
     * @deprecated 3.8.0
     */
    function wp_dashboard_recent_comments_control() {}
    /**
     * Deprecated dashboard secondary section.
     *
     * @deprecated 3.8.0
     */
    function wp_dashboard_secondary() {}
    /**
     * Deprecated dashboard secondary control.
     *
     * @deprecated 3.8.0
     */
    function wp_dashboard_secondary_control() {}
    function wp_dashboard_plugins_output($rss, $args = array( )) {}
    function _relocate_children($old_ID, $new_ID) {}
    function add_object_page($page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {}
    function add_utility_page($page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {}
    /**
     * Disables autocomplete on the 'post' form (Add/Edit Post screens) for WebKit browsers,
     * as they disregard the autocomplete setting on the editor textarea. That can break the editor
     * when the user navigates to it with the browser's Back button. See #28037
     *
     * Replaced with wp_page_reload_on_back_button_js() that also fixes this problem.
     *
     * @since 4.0.0
     * @deprecated 4.6.0
     *
     * @link https://core.trac.wordpress.org/ticket/35852
     *
     * @global bool $is_safari
     * @global bool $is_chrome
     */
    function post_form_autocomplete_off() {}
    /**
     * Display JavaScript on the page.
     *
     * @since 3.5.0
     * @deprecated 4.9.0
     */
    function options_permalink_add_js() {}
    function mysql2date($format, $date, $translate = true) {}
    function current_time($type, $gmt = 0) {}
    function date_i18n($dateformatstring, $timestamp_with_offset = false, $gmt = false) {}
    function wp_maybe_decline_date($date) {}
    function number_format_i18n($number, $decimals = 0) {}
    function size_format($bytes, $decimals = 0) {}
    function human_readable_duration($duration = '') {}
    function get_weekstartend($mysqlstring, $start_of_week = '') {}
    function maybe_unserialize($original) {}
    function is_serialized($data, $strict = true) {}
    function is_serialized_string($data) {}
    function maybe_serialize($data) {}
    function xmlrpc_getposttitle($content) {}
    function xmlrpc_getpostcategory($content) {}
    function xmlrpc_removepostdata($content) {}
    function wp_extract_urls($content) {}
    function do_enclose($content, $post_ID) {}
    function wp_get_http_headers($url, $deprecated = false) {}
    /**
     * Determines whether the publish date of the current post in the loop is different
     * from the publish date of the previous post in the loop.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 0.71
     *
     * @global string $currentday  The day of the current post in the loop.
     * @global string $previousday The day of the previous post in the loop.
     *
     * @return int 1 when new day, 0 if not a new day.
     */
    function is_new_day() {}
    function build_query($data) {}
    function _http_build_query($data, $prefix = null, $sep = null, $key = '', $urlencode = true) {}
    /**
     * Retrieves a modified URL query string.
     *
     * You can rebuild the URL and append query variables to the URL query by using this function.
     * There are two ways to use this function; either a single key and value, or an associative array.
     *
     * Using a single key and value:
     *
     *     add_query_arg( 'key', 'value', 'http://example.com' );
     *
     * Using an associative array:
     *
     *     add_query_arg( array(
     *         'key1' => 'value1',
     *         'key2' => 'value2',
     *     ), 'http://example.com' );
     *
     * Omitting the URL from either use results in the current URL being used
     * (the value of `$_SERVER['REQUEST_URI']`).
     *
     * Values are expected to be encoded appropriately with urlencode() or rawurlencode().
     *
     * Setting any query variable's value to boolean false removes the key (see remove_query_arg()).
     *
     * Important: The return value of add_query_arg() is not escaped by default. Output should be
     * late-escaped with esc_url() or similar to help prevent vulnerability to cross-site scripting
     * (XSS) attacks.
     *
     * @since 1.5.0
     *
     * @param string|array $key   Either a query variable key, or an associative array of query variables.
     * @param string       $value Optional. Either a query variable value, or a URL to act upon.
     * @param string       $url   Optional. A URL to act upon.
     * @return string New URL query string (unescaped).
     */
    function add_query_arg() {}
    function remove_query_arg($key, $query = false) {}
    /**
     * Returns an array of single-use query variable names that can be removed from a URL.
     *
     * @since 4.4.0
     *
     * @return array An array of parameters to remove from the URL.
     */
    function wp_removable_query_args() {}
    function add_magic_quotes($array) {}
    function wp_remote_fopen($uri) {}
    function wp($query_vars = '') {}
    function get_status_header_desc($code) {}
    function status_header($code, $description = '') {}
    /**
     * Get the header information to prevent caching.
     *
     * The several different headers cover the different ways cache prevention
     * is handled by different browsers
     *
     * @since 2.8.0
     *
     * @return array The associative array of header names and field values.
     */
    function wp_get_nocache_headers() {}
    /**
     * Set the headers to prevent caching for the different browsers.
     *
     * Different browsers support different nocache headers, so several
     * headers must be sent so that all of them get the point that no
     * caching should occur.
     *
     * @since 2.0.0
     *
     * @see wp_get_nocache_headers()
     */
    function nocache_headers() {}
    /**
     * Set the headers for caching for 10 days with JavaScript content type.
     *
     * @since 2.1.0
     */
    function cache_javascript_headers() {}
    /**
     * Retrieve the number of database queries during the WordPress execution.
     *
     * @since 2.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return int Number of database queries.
     */
    function get_num_queries() {}
    function bool_from_yn($yn) {}
    /**
     * Load the feed template from the use of an action hook.
     *
     * If the feed action does not have a hook, then the function will die with a
     * message telling the visitor that the feed is not valid.
     *
     * It is better to only have one hook for each feed.
     *
     * @since 2.1.0
     *
     * @global WP_Query $wp_query Used to tell if the use a comment feed.
     */
    function do_feed() {}
    /**
     * Load the RDF RSS 0.91 Feed template.
     *
     * @since 2.1.0
     *
     * @see load_template()
     */
    function do_feed_rdf() {}
    /**
     * Load the RSS 1.0 Feed Template.
     *
     * @since 2.1.0
     *
     * @see load_template()
     */
    function do_feed_rss() {}
    function do_feed_rss2($for_comments) {}
    function do_feed_atom($for_comments) {}
    /**
     * Display the robots.txt file content.
     *
     * The echo content should be with usage of the permalinks or for creating the
     * robots.txt file.
     *
     * @since 2.1.0
     */
    function do_robots() {}
    /**
     * Determines whether WordPress is already installed.
     *
     * The cache will be checked first. If you have a cache plugin, which saves
     * the cache values, then this will work. If you use the default WordPress
     * cache, and the database goes away, then you might have problems.
     *
     * Checks for the 'siteurl' option for whether WordPress is installed.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 2.1.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return bool Whether the site is already installed.
     */
    function is_blog_installed() {}
    function wp_nonce_url($actionurl, $action = -1, $name = '_wpnonce') {}
    function wp_nonce_field($action = -1, $name = '_wpnonce', $referer = true, $echo = true) {}
    function wp_referer_field($echo = true) {}
    function wp_original_referer_field($echo = true, $jump_back_to = 'current') {}
    /**
     * Retrieve referer from '_wp_http_referer' or HTTP referer.
     *
     * If it's the same as the current request URL, will return false.
     *
     * @since 2.0.4
     *
     * @return false|string False on failure. Referer URL on success.
     */
    function wp_get_referer() {}
    /**
     * Retrieves unvalidated referer from '_wp_http_referer' or HTTP referer.
     *
     * Do not use for redirects, use wp_get_referer() instead.
     *
     * @since 4.5.0
     *
     * @return string|false Referer URL on success, false on failure.
     */
    function wp_get_raw_referer() {}
    /**
     * Retrieve original referer that was posted, if it exists.
     *
     * @since 2.0.4
     *
     * @return string|false False if no original referer or original referer if set.
     */
    function wp_get_original_referer() {}
    function wp_mkdir_p($target) {}
    function path_is_absolute($path) {}
    function path_join($base, $path) {}
    function wp_normalize_path($path) {}
    /**
     * Determine a writable directory for temporary files.
     *
     * Function's preference is the return value of sys_get_temp_dir(),
     * followed by your PHP temporary upload directory, followed by WP_CONTENT_DIR,
     * before finally defaulting to /tmp/
     *
     * In the event that this function does not find a writable location,
     * It may be overridden by the WP_TEMP_DIR constant in your wp-config.php file.
     *
     * @since 2.5.0
     *
     * @staticvar string $temp
     *
     * @return string Writable temporary directory.
     */
    function get_temp_dir() {}
    function wp_is_writable($path) {}
    function win_is_writable($path) {}
    /**
     * Retrieves uploads directory information.
     *
     * Same as wp_upload_dir() but "light weight" as it doesn't attempt to create the uploads directory.
     * Intended for use in themes, when only 'basedir' and 'baseurl' are needed, generally in all cases
     * when not uploading files.
     *
     * @since 4.5.0
     *
     * @see wp_upload_dir()
     *
     * @return array See wp_upload_dir() for description.
     */
    function wp_get_upload_dir() {}
    function wp_upload_dir($time = null, $create_dir = true, $refresh_cache = false) {}
    function _wp_upload_dir($time = null) {}
    function wp_unique_filename($dir, $filename, $unique_filename_callback = null) {}
    function wp_upload_bits($name, $deprecated, $bits, $time = null) {}
    function wp_ext2type($ext) {}
    function wp_check_filetype($filename, $mimes = null) {}
    function wp_check_filetype_and_ext($file, $filename, $mimes = null) {}
    function wp_get_image_mime($file) {}
    /**
     * Retrieve list of mime types and file extensions.
     *
     * @since 3.5.0
     * @since 4.2.0 Support was added for GIMP (xcf) files.
     *
     * @return array Array of mime types keyed by the file extension regex corresponding to those types.
     */
    function wp_get_mime_types() {}
    /**
     * Retrieves the list of common file extensions and their types.
     *
     * @since 4.6.0
     *
     * @return array Array of file extensions types keyed by the type of file.
     */
    function wp_get_ext_types() {}
    function get_allowed_mime_types($user = null) {}
    function wp_nonce_ays($action) {}
    function wp_die($message = '', $title = '', $args = array( )) {}
    function _default_wp_die_handler($message, $title = '', $args = array( )) {}
    function _json_wp_die_handler($message, $title = '', $args = array( )) {}
    function _xmlrpc_wp_die_handler($message, $title = '', $args = array( )) {}
    function _ajax_wp_die_handler($message, $title = '', $args = array( )) {}
    function _scalar_wp_die_handler($message = '', $title = '', $args = array( )) {}
    function _wp_die_process_input($message, $title = '', $args = array( )) {}
    function wp_json_encode($data, $options = 0, $depth = 512) {}
    function _wp_json_sanity_check($data, $depth) {}
    function _wp_json_convert_string($string) {}
    function _wp_json_prepare_data($data) {}
    function wp_send_json($response, $status_code = null) {}
    function wp_send_json_success($data = null, $status_code = null) {}
    function wp_send_json_error($data = null, $status_code = null) {}
    function wp_check_jsonp_callback($callback) {}
    function _config_wp_home($url = '') {}
    function _config_wp_siteurl($url = '') {}
    /**
     * Delete the fresh site option.
     *
     * @since 4.7.0
     * @access private
     */
    function _delete_option_fresh_site() {}
    function _mce_set_direction($mce_init) {}
    /**
     * Convert smiley code to the icon graphic file equivalent.
     *
     * You can turn off smilies, by going to the write setting screen and unchecking
     * the box, or by setting 'use_smilies' option to false or removing the option.
     *
     * Plugins may override the default smiley list by setting the $wpsmiliestrans
     * to an array, with the key the code the blogger types in and the value the
     * image file.
     *
     * The $wp_smiliessearch global is for the regular expression and is set each
     * time the function is called.
     *
     * The full list of smilies can be found in the function and won't be listed in
     * the description. Probably should create a Codex page for it, so that it is
     * available.
     *
     * @global array $wpsmiliestrans
     * @global array $wp_smiliessearch
     *
     * @since 2.2.0
     */
    function smilies_init() {}
    function wp_parse_args($args, $defaults = '') {}
    function wp_parse_list($list) {}
    function wp_parse_id_list($list) {}
    function wp_parse_slug_list($list) {}
    function wp_array_slice_assoc($array, $keys) {}
    function wp_is_numeric_array($data) {}
    function wp_filter_object_list($list, $args = array( ), $operator = 'and', $field = false) {}
    function wp_list_filter($list, $args = array( ), $operator = 'AND') {}
    function wp_list_pluck($list, $field, $index_key = null) {}
    function wp_list_sort($list, $orderby = array( ), $order = 'ASC', $preserve_keys = false) {}
    /**
     * Determines if Widgets library should be loaded.
     *
     * Checks to make sure that the widgets library hasn't already been loaded.
     * If it hasn't, then it will load the widgets library and run an action hook.
     *
     * @since 2.2.0
     */
    function wp_maybe_load_widgets() {}
    /**
     * Append the Widgets menu to the themes main menu.
     *
     * @since 2.2.0
     *
     * @global array $submenu
     */
    function wp_widgets_add_menu() {}
    /**
     * Flush all output buffers for PHP 5.2.
     *
     * Make sure all output buffers are flushed before our singletons are destroyed.
     *
     * @since 2.2.0
     */
    function wp_ob_end_flush_all() {}
    /**
     * Load custom DB error or display WordPress DB error.
     *
     * If a file exists in the wp-content directory named db-error.php, then it will
     * be loaded instead of displaying the WordPress DB error. If it is not found,
     * then the WordPress DB error will be displayed instead.
     *
     * The WordPress DB error sets the HTTP status header to 500 to try to prevent
     * search engines from caching the message. Custom DB messages should do the
     * same.
     *
     * This function was backported to WordPress 2.3.2, but originally was added
     * in WordPress 2.5.0.
     *
     * @since 2.3.2
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function dead_db() {}
    function absint($maybeint) {}
    function _deprecated_function($function, $version, $replacement = null) {}
    function _deprecated_constructor($class, $version, $parent_class = '') {}
    function _deprecated_file($file, $version, $replacement = null, $message = '') {}
    function _deprecated_argument($function, $version, $message = null) {}
    function _deprecated_hook($hook, $version, $replacement = null, $message = null) {}
    function _doing_it_wrong($function, $message, $version) {}
    function apache_mod_loaded($mod, $default = false) {}
    /**
     * Check if IIS 7+ supports pretty permalinks.
     *
     * @since 2.8.0
     *
     * @global bool $is_iis7
     *
     * @return bool Whether IIS7 supports permalinks.
     */
    function iis7_supports_permalinks() {}
    function validate_file($file, $allowed_files = array( )) {}
    function force_ssl_admin($force = null) {}
    function wp_suspend_cache_addition($suspend = null) {}
    function wp_suspend_cache_invalidation($suspend = true) {}
    function is_main_site($site_id = null, $network_id = null) {}
    function get_main_site_id($network_id = null) {}
    function is_main_network($network_id = null) {}
    /**
     * Get the main network ID.
     *
     * @since 4.3.0
     *
     * @return int The ID of the main network.
     */
    function get_main_network_id() {}
    /**
     * Determine whether global terms are enabled.
     *
     * @since 3.0.0
     *
     * @staticvar bool $global_terms
     *
     * @return bool True if multisite and global terms enabled.
     */
    function global_terms_enabled() {}
    /**
     * Determines whether site meta is enabled.
     *
     * This function checks whether the 'blogmeta' database table exists. The result is saved as
     * a setting for the main network, making it essentially a global setting. Subsequent requests
     * will refer to this setting instead of running the query.
     *
     * @since 5.1.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return bool True if site meta is supported, false otherwise.
     */
    function is_site_meta_supported() {}
    /**
     * gmt_offset modification for smart timezone handling.
     *
     * Overrides the gmt_offset option if we have a timezone_string available.
     *
     * @since 2.8.0
     *
     * @return float|false Timezone GMT offset, false otherwise.
     */
    function wp_timezone_override_offset() {}
    function _wp_timezone_choice_usort_callback($a, $b) {}
    function wp_timezone_choice($selected_zone, $locale = null) {}
    function _cleanup_header_comment($str) {}
    /**
     * Permanently delete comments or posts of any type that have held a status
     * of 'trash' for the number of days defined in EMPTY_TRASH_DAYS.
     *
     * The default value of `EMPTY_TRASH_DAYS` is 30 (days).
     *
     * @since 2.9.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function wp_scheduled_delete() {}
    function get_file_data($file, $default_headers, $context = '') {}
    /**
     * Returns true.
     *
     * Useful for returning true to filters easily.
     *
     * @since 3.0.0
     *
     * @see __return_false()
     *
     * @return true True.
     */
    function __return_true() {}
    /**
     * Returns false.
     *
     * Useful for returning false to filters easily.
     *
     * @since 3.0.0
     *
     * @see __return_true()
     *
     * @return false False.
     */
    function __return_false() {}
    /**
     * Returns 0.
     *
     * Useful for returning 0 to filters easily.
     *
     * @since 3.0.0
     *
     * @return int 0.
     */
    function __return_zero() {}
    /**
     * Returns an empty array.
     *
     * Useful for returning an empty array to filters easily.
     *
     * @since 3.0.0
     *
     * @return array Empty array.
     */
    function __return_empty_array() {}
    /**
     * Returns null.
     *
     * Useful for returning null to filters easily.
     *
     * @since 3.4.0
     *
     * @return null Null value.
     */
    function __return_null() {}
    /**
     * Returns an empty string.
     *
     * Useful for returning an empty string to filters easily.
     *
     * @since 3.7.0
     *
     * @see __return_null()
     *
     * @return string Empty string.
     */
    function __return_empty_string() {}
    /**
     * Send a HTTP header to disable content type sniffing in browsers which support it.
     *
     * @since 3.0.0
     *
     * @see https://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx
     * @see https://src.chromium.org/viewvc/chrome?view=rev&revision=6985
     */
    function send_nosniff_header() {}
    function _wp_mysql_week($column) {}
    function wp_find_hierarchy_loop($callback, $start, $start_parent, $callback_args = array( )) {}
    function wp_find_hierarchy_loop_tortoise_hare($callback, $start, $override = array( ), $callback_args = array( ), $_return_loop = false) {}
    /**
     * Send a HTTP header to limit rendering of pages to same origin iframes.
     *
     * @since 3.1.3
     *
     * @see https://developer.mozilla.org/en/the_x-frame-options_response_header
     */
    function send_frame_options_header() {}
    /**
     * Retrieve a list of protocols to allow in HTML attributes.
     *
     * @since 3.3.0
     * @since 4.3.0 Added 'webcal' to the protocols array.
     * @since 4.7.0 Added 'urn' to the protocols array.
     *
     * @see wp_kses()
     * @see esc_url()
     *
     * @staticvar array $protocols
     *
     * @return string[] Array of allowed protocols. Defaults to an array containing 'http', 'https',
     *                  'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet',
     *                  'mms', 'rtsp', 'svn', 'tel', 'fax', 'xmpp', 'webcal', and 'urn'. This covers
     *                  all common link protocols, except for 'javascript' which should not be
     *                  allowed for untrusted users.
     */
    function wp_allowed_protocols() {}
    function wp_debug_backtrace_summary($ignore_class = null, $skip_frames = 0, $pretty = true) {}
    function _get_non_cached_ids($object_ids, $cache_key) {}
    /**
     * Test if the current device has the capability to upload files.
     *
     * @since 3.4.0
     * @access private
     *
     * @return bool Whether the device is able to upload files.
     */
    function _device_can_upload() {}
    function wp_is_stream($path) {}
    function wp_checkdate($month, $day, $year, $source_date) {}
    /**
     * Load the auth check for monitoring whether the user is still logged in.
     *
     * Can be disabled with remove_action( 'admin_enqueue_scripts', 'wp_auth_check_load' );
     *
     * This is disabled for certain screens where a login screen could cause an
     * inconvenient interruption. A filter called {@see 'wp_auth_check_load'} can be used
     * for fine-grained control.
     *
     * @since 3.6.0
     */
    function wp_auth_check_load() {}
    /**
     * Output the HTML that shows the wp-login dialog when the user is no longer logged in.
     *
     * @since 3.6.0
     */
    function wp_auth_check_html() {}
    function wp_auth_check($response) {}
    function get_tag_regex($tag) {}
    function _canonical_charset($charset) {}
    function mbstring_binary_safe_encoding($reset = false) {}
    /**
     * Reset the mbstring internal encoding to a users previously set encoding.
     *
     * @see mbstring_binary_safe_encoding()
     *
     * @since 3.7.0
     */
    function reset_mbstring_encoding() {}
    function wp_validate_boolean($var) {}
    function wp_delete_file($file) {}
    function wp_delete_file_from_directory($file, $directory) {}
    /**
     * Outputs a small JS snippet on preview tabs/windows to remove `window.name` on unload.
     *
     * This prevents reusing the same tab for a preview when the user has navigated away.
     *
     * @since 4.3.0
     *
     * @global WP_Post $post
     */
    function wp_post_preview_js() {}
    function mysql_to_rfc3339($date_string) {}
    function wp_raise_memory_limit($context = 'admin') {}
    /**
     * Generate a random UUID (version 4).
     *
     * @since 4.7.0
     *
     * @return string UUID.
     */
    function wp_generate_uuid4() {}
    function wp_is_uuid($uuid, $version = null) {}
    function wp_unique_id($prefix = '') {}
    function wp_cache_get_last_changed($group) {}
    function wp_site_admin_email_change_notification($old_email, $new_email, $option_name) {}
    function wp_privacy_anonymize_ip($ip_addr, $ipv6_fallback = false) {}
    function wp_privacy_anonymize_data($type, $data = '') {}
    /**
     * Returns the directory used to store personal data export files.
     *
     * @since 4.9.6
     *
     * @see wp_privacy_exports_url
     *
     * @return string Exports directory.
     */
    function wp_privacy_exports_dir() {}
    /**
     * Returns the URL of the directory used to store personal data export files.
     *
     * @since 4.9.6
     *
     * @see wp_privacy_exports_dir
     *
     * @return string Exports directory URL.
     */
    function wp_privacy_exports_url() {}
    /**
     * Schedule a `WP_Cron` job to delete expired export files.
     *
     * @since 4.9.6
     */
    function wp_schedule_delete_old_privacy_export_files() {}
    /**
     * Cleans up export files older than three days old.
     *
     * The export files are stored in `wp-content/uploads`, and are therefore publicly
     * accessible. A CSPRN is appended to the filename to mitigate the risk of an
     * unauthorized person downloading the file, but it is still possible. Deleting
     * the file after the data subject has had a chance to delete it adds an additional
     * layer of protection.
     *
     * @since 4.9.6
     */
    function wp_privacy_delete_old_export_files() {}
    /**
     * Gets the URL to learn more about updating the PHP version the site is running on.
     *
     * This URL can be overridden by specifying an environment variable `WP_UPDATE_PHP_URL` or by using the
     * {@see 'wp_update_php_url'} filter. Providing an empty string is not allowed and will result in the
     * default URL being used. Furthermore the page the URL links to should preferably be localized in the
     * site language.
     *
     * @since 5.1.0
     *
     * @return string URL to learn more about updating PHP.
     */
    function wp_get_update_php_url() {}
    /**
     * Gets the default URL to learn more about updating the PHP version the site is running on.
     *
     * Do not use this function to retrieve this URL. Instead, use {@see wp_get_update_php_url()} when relying on the URL.
     * This function does not allow modifying the returned URL, and is only used to compare the actually used URL with the
     * default one.
     *
     * @since 5.1.0
     * @access private
     *
     * @return string Default URL to learn more about updating PHP.
     */
    function wp_get_default_update_php_url() {}
    /**
     * Prints the default annotation for the web host altering the "Update PHP" page URL.
     *
     * This function is to be used after {@see wp_get_update_php_url()} to display a consistent
     * annotation if the web host has altered the default "Update PHP" page URL.
     *
     * @since 5.1.0
     */
    function wp_update_php_annotation() {}
    /**
     * Gets the URL for directly updating the PHP version the site is running on.
     *
     * A URL will only be returned if the `WP_DIRECT_UPDATE_PHP_URL` environment variable is specified or
     * by using the {@see 'wp_direct_php_update_url'} filter. This allows hosts to send users directly to
     * the page where they can update PHP to a newer version.
     *
     * @since 5.1.1
     *
     * @return string URL for directly updating PHP or empty string.
     */
    function wp_get_direct_php_update_url() {}
    /**
     * Display a button directly linking to a PHP update process.
     *
     * This provides hosts with a way for users to be sent directly to their PHP update process.
     *
     * The button is only displayed if a URL is returned by `wp_get_direct_php_update_url()`.
     *
     * @since 5.1.1
     */
    function wp_direct_php_update_button() {}
    function fetch_rss($url) {}
    function _fetch_remote_file($url, $headers = "") {}
    function _response_to_rss($resp) {}
    /**
     * Set up constants with default values, unless user overrides.
     *
     * @since 1.5.0
     * @package External
     * @subpackage MagpieRSS
     */
    function init() {}
    function is_info($sc) {}
    function is_success($sc) {}
    function is_redirect($sc) {}
    function is_error($sc) {}
    function is_client_error($sc) {}
    function is_server_error($sc) {}
    function parse_w3cdtf($date_str) {}
    function wp_rss($url, $num_items = -1) {}
    function get_rss($url, $num_items = 5) {}
    function add_shortcode($tag, $callback) {}
    function remove_shortcode($tag) {}
    /**
     * Clear all shortcodes.
     *
     * This function is simple, it clears all of the shortcode tags by replacing the
     * shortcodes global by a empty array. This is actually a very efficient method
     * for removing all shortcodes.
     *
     * @since 2.5.0
     *
     * @global array $shortcode_tags
     */
    function remove_all_shortcodes() {}
    function shortcode_exists($tag) {}
    function has_shortcode($content, $tag) {}
    function do_shortcode($content, $ignore_html = false) {}
    function get_shortcode_regex($tagnames = null) {}
    function do_shortcode_tag($m) {}
    function do_shortcodes_in_html_tags($content, $ignore_html, $tagnames) {}
    function unescape_invalid_shortcodes($content) {}
    /**
     * Retrieve the shortcode attributes regex.
     *
     * @since 4.4.0
     *
     * @return string The shortcode attribute regular expression
     */
    function get_shortcode_atts_regex() {}
    function shortcode_parse_atts($text) {}
    function shortcode_atts($pairs, $atts, $shortcode = '') {}
    function strip_shortcodes($content) {}
    function strip_shortcode_tag($m) {}
    function register_block_type($name, $args = array( )) {}
    function unregister_block_type($name) {}
    function has_blocks($post = null) {}
    function has_block($block_name, $post = null) {}
    /**
     * Returns an array of the names of all registered dynamic block types.
     *
     * @since 5.0.0
     *
     * @return array Array of dynamic block names.
     */
    function get_dynamic_block_names() {}
    function serialize_block_attributes($block_attributes) {}
    function strip_core_block_namespace($block_name = null) {}
    function get_comment_delimited_block_content($block_name = null, $block_attributes, $block_content) {}
    function serialize_block($block) {}
    function serialize_blocks($blocks) {}
    function filter_block_content($text, $allowed_html = 'post', $allowed_protocols = array( )) {}
    function filter_block_kses($block, $allowed_html, $allowed_protocols = array( )) {}
    function filter_block_kses_value($value, $allowed_html, $allowed_protocols = array( )) {}
    function excerpt_remove_blocks($content) {}
    function render_block($block) {}
    function parse_blocks($content) {}
    function do_blocks($content) {}
    function _restore_wpautop_hook($content) {}
    function block_version($content) {}
    function register_widget($widget) {}
    function unregister_widget($widget) {}
    function register_sidebars($number = 1, $args = array( )) {}
    function register_sidebar($args = array( )) {}
    function unregister_sidebar($sidebar_id) {}
    function is_registered_sidebar($sidebar_id) {}
    function wp_register_sidebar_widget($id, $name, $output_callback, $options = array( )) {}
    function wp_widget_description($id) {}
    function wp_sidebar_description($id) {}
    function wp_unregister_sidebar_widget($id) {}
    function wp_register_widget_control($id, $name, $control_callback, $options = array( )) {}
    function _register_widget_update_callback($id_base, $update_callback, $options = array( )) {}
    function _register_widget_form_callback($id, $name, $form_callback, $options = array( )) {}
    function wp_unregister_widget_control($id) {}
    function dynamic_sidebar($index = 1) {}
    function is_active_widget($callback = false, $widget_id = false, $id_base = false, $skip_inactive = true) {}
    /**
     * Determines whether the dynamic sidebar is enabled and used by the theme.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 2.2.0
     *
     * @global array $wp_registered_widgets
     * @global array $wp_registered_sidebars Registered sidebars.
     *
     * @return bool True, if using widgets. False, if not using widgets.
     */
    function is_dynamic_sidebar() {}
    function is_active_sidebar($index) {}
    function wp_get_sidebars_widgets($deprecated = true) {}
    function wp_set_sidebars_widgets($sidebars_widgets) {}
    /**
     * Retrieve default registered sidebars list.
     *
     * @since 2.2.0
     * @access private
     *
     * @global array $wp_registered_sidebars Registered sidebars.
     *
     * @return array
     */
    function wp_get_widget_defaults() {}
    function wp_convert_widget_settings($base_name, $option_name, $settings) {}
    function the_widget($widget, $instance = array( ), $args = array( )) {}
    function _get_widget_id_base($id) {}
    /**
     * Handle sidebars config after theme change
     *
     * @access private
     * @since 3.3.0
     *
     * @global array $sidebars_widgets
     */
    function _wp_sidebars_changed() {}
    function retrieve_widgets($theme_changed = false) {}
    function wp_map_sidebars_widgets($existing_sidebars_widgets) {}
    function _wp_remove_unregistered_widgets($sidebars_widgets, $whitelist = array( )) {}
    function wp_widget_rss_output($rss, $args = array( )) {}
    function wp_widget_rss_form($args, $inputs = null) {}
    function wp_widget_rss_process($widget_rss, $check_feed = true) {}
    /**
     * Registers all of the default WordPress widgets on startup.
     *
     * Calls {@see 'widgets_init'} action after all of the WordPress widgets have been registered.
     *
     * @since 2.2.0
     */
    function wp_widgets_init() {}
    function get_comment_author($comment_ID = 0) {}
    function comment_author($comment_ID = 0) {}
    function get_comment_author_email($comment_ID = 0) {}
    function comment_author_email($comment_ID = 0) {}
    function comment_author_email_link($linktext = '', $before = '', $after = '', $comment = null) {}
    function get_comment_author_email_link($linktext = '', $before = '', $after = '', $comment = null) {}
    function get_comment_author_link($comment_ID = 0) {}
    function comment_author_link($comment_ID = 0) {}
    function get_comment_author_IP($comment_ID = 0) {}
    function comment_author_IP($comment_ID = 0) {}
    function get_comment_author_url($comment_ID = 0) {}
    function comment_author_url($comment_ID = 0) {}
    function get_comment_author_url_link($linktext = '', $before = '', $after = '', $comment = 0) {}
    function comment_author_url_link($linktext = '', $before = '', $after = '', $comment = 0) {}
    function comment_class($class = '', $comment = null, $post_id = null, $echo = true) {}
    function get_comment_class($class = '', $comment_id = null, $post_id = null) {}
    function get_comment_date($d = '', $comment_ID = 0) {}
    function comment_date($d = '', $comment_ID = 0) {}
    function get_comment_excerpt($comment_ID = 0) {}
    function comment_excerpt($comment_ID = 0) {}
    /**
     * Retrieve the comment id of the current comment.
     *
     * @since 1.5.0
     *
     * @return int The comment ID.
     */
    function get_comment_ID() {}
    /**
     * Display the comment id of the current comment.
     *
     * @since 0.71
     */
    function comment_ID() {}
    function get_comment_link($comment = null, $args = array( )) {}
    function get_comments_link($post_id = 0) {}
    function comments_link($deprecated = '', $deprecated_2 = '') {}
    function get_comments_number($post_id = 0) {}
    function comments_number($zero = false, $one = false, $more = false, $deprecated = '') {}
    function get_comments_number_text($zero = false, $one = false, $more = false) {}
    function get_comment_text($comment_ID = 0, $args = array( )) {}
    function comment_text($comment_ID = 0, $args = array( )) {}
    function get_comment_time($d = '', $gmt = false, $translate = true) {}
    function comment_time($d = '') {}
    function get_comment_type($comment_ID = 0) {}
    function comment_type($commenttxt = false, $trackbacktxt = false, $pingbacktxt = false) {}
    /**
     * Retrieve The current post's trackback URL.
     *
     * There is a check to see if permalink's have been enabled and if so, will
     * retrieve the pretty path. If permalinks weren't enabled, the ID of the
     * current post is used and appended to the correct page to go to.
     *
     * @since 1.5.0
     *
     * @return string The trackback URL after being filtered.
     */
    function get_trackback_url() {}
    function trackback_url($deprecated_echo = true) {}
    function trackback_rdf($deprecated = '') {}
    function comments_open($post_id = null) {}
    function pings_open($post_id = null) {}
    /**
     * Display form token for unfiltered comments.
     *
     * Will only display nonce token if the current user has permissions for
     * unfiltered html. Won't display the token for other users.
     *
     * The function was backported to 2.0.10 and was added to versions 2.1.3 and
     * above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in
     * the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0.
     *
     * Backported to 2.0.10.
     *
     * @since 2.1.3
     */
    function wp_comment_form_unfiltered_html_nonce() {}
    function comments_template($file = '/comments.php', $separate_comments = false) {}
    function comments_popup_link($zero = false, $one = false, $more = false, $css_class = '', $none = false) {}
    function get_comment_reply_link($args = array( ), $comment = null, $post = null) {}
    function comment_reply_link($args = array( ), $comment = null, $post = null) {}
    function get_post_reply_link($args = array( ), $post = null) {}
    function post_reply_link($args = array( ), $post = null) {}
    function get_cancel_comment_reply_link($text = '') {}
    function cancel_comment_reply_link($text = '') {}
    function get_comment_id_fields($id = 0) {}
    function comment_id_fields($id = 0) {}
    function comment_form_title($noreplytext = false, $replytext = false, $linktoparent = true) {}
    function wp_list_comments($args = array( ), $comments = null) {}
    function comment_form($args = array( ), $post_id = null) {}
    function _wp_post_revision_fields($post = array( ), $deprecated = false) {}
    function _wp_post_revision_data($post = array( ), $autosave = false) {}
    function wp_save_post_revision($post_id) {}
    function wp_get_post_autosave($post_id, $user_id = 0) {}
    function wp_is_post_revision($post) {}
    function wp_is_post_autosave($post) {}
    function _wp_put_post_revision($post = null, $autosave = false) {}
    function wp_get_post_revision($post, $output = OBJECT, $filter = 'raw') {}
    function wp_restore_post_revision($revision_id, $fields = null) {}
    function wp_delete_post_revision($revision_id) {}
    function wp_get_post_revisions($post_id = 0, $args = null) {}
    function wp_revisions_enabled($post) {}
    function wp_revisions_to_keep($post) {}
    function _set_preview($post) {}
    /**
     * Filters the latest content for preview from the post autosave.
     *
     * @since 2.7.0
     * @access private
     */
    function _show_post_preview() {}
    function _wp_preview_terms_filter($terms, $post_id, $taxonomy) {}
    function _wp_preview_post_thumbnail_filter($value, $post_id, $meta_key) {}
    function _wp_get_post_revision_version($revision) {}
    function _wp_upgrade_revisions_of_post($post, $revisions) {}
    /**
     * Creates the initial taxonomies.
     *
     * This function fires twice: in wp-settings.php before plugins are loaded (for
     * backward compatibility reasons), and again on the {@see 'init'} action. We must
     * avoid registering rewrite rules before the {@see 'init'} action.
     *
     * @since 2.8.0
     *
     * @global WP_Rewrite $wp_rewrite The WordPress rewrite class.
     */
    function create_initial_taxonomies() {}
    function get_taxonomies($args = array( ), $output = 'names', $operator = 'and') {}
    function get_object_taxonomies($object, $output = 'names') {}
    function get_taxonomy($taxonomy) {}
    function taxonomy_exists($taxonomy) {}
    function is_taxonomy_hierarchical($taxonomy) {}
    function register_taxonomy($taxonomy, $object_type, $args = array( )) {}
    function unregister_taxonomy($taxonomy) {}
    function get_taxonomy_labels($tax) {}
    function register_taxonomy_for_object_type($taxonomy, $object_type) {}
    function unregister_taxonomy_for_object_type($taxonomy, $object_type) {}
    function get_objects_in_term($term_ids, $taxonomies, $args = array( )) {}
    function get_tax_sql($tax_query, $primary_table, $primary_id_column) {}
    function get_term($term, $taxonomy = '', $output = OBJECT, $filter = 'raw') {}
    function get_term_by($field, $value, $taxonomy = '', $output = OBJECT, $filter = 'raw') {}
    function get_term_children($term_id, $taxonomy) {}
    function get_term_field($field, $term, $taxonomy = '', $context = 'display') {}
    function get_term_to_edit($id, $taxonomy) {}
    function get_terms($args = array( ), $deprecated = '') {}
    function add_term_meta($term_id, $meta_key, $meta_value, $unique = false) {}
    function delete_term_meta($term_id, $meta_key, $meta_value = '') {}
    function get_term_meta($term_id, $key = '', $single = false) {}
    function update_term_meta($term_id, $meta_key, $meta_value, $prev_value = '') {}
    function update_termmeta_cache($term_ids) {}
    function has_term_meta($term_id) {}
    function register_term_meta($taxonomy, $meta_key, array $args) {}
    function unregister_term_meta($taxonomy, $meta_key) {}
    function term_exists($term, $taxonomy = '', $parent = null) {}
    function term_is_ancestor_of($term1, $term2, $taxonomy) {}
    function sanitize_term($term, $taxonomy, $context = 'display') {}
    function sanitize_term_field($field, $value, $term_id, $taxonomy, $context) {}
    function wp_count_terms($taxonomy, $args = array( )) {}
    function wp_delete_object_term_relationships($object_id, $taxonomies) {}
    function wp_delete_term($term, $taxonomy, $args = array( )) {}
    function wp_delete_category($cat_ID) {}
    function wp_get_object_terms($object_ids, $taxonomies, $args = array( )) {}
    function wp_insert_term($term, $taxonomy, $args = array( )) {}
    function wp_set_object_terms($object_id, $terms, $taxonomy, $append = false) {}
    function wp_add_object_terms($object_id, $terms, $taxonomy) {}
    function wp_remove_object_terms($object_id, $terms, $taxonomy) {}
    function wp_unique_term_slug($slug, $term) {}
    function wp_update_term($term_id, $taxonomy, $args = array( )) {}
    function wp_defer_term_counting($defer = null) {}
    function wp_update_term_count($terms, $taxonomy, $do_deferred = false) {}
    function wp_update_term_count_now($terms, $taxonomy) {}
    function clean_object_term_cache($object_ids, $object_type) {}
    function clean_term_cache($ids, $taxonomy = '', $clean_taxonomy = true) {}
    function clean_taxonomy_cache($taxonomy) {}
    function get_object_term_cache($id, $taxonomy) {}
    function update_object_term_cache($object_ids, $object_type) {}
    function update_term_cache($terms, $taxonomy = '') {}
    function _get_term_hierarchy($taxonomy) {}
    function _get_term_children($term_id, $terms, $taxonomy, $ancestors = array( )) {}
    function _pad_term_counts($terms, $taxonomy) {}
    function _prime_term_caches($term_ids, $update_meta_cache = true) {}
    function _update_post_term_count($terms, $taxonomy) {}
    function _update_generic_term_count($terms, $taxonomy) {}
    function _split_shared_term($term_id, $term_taxonomy_id, $record = true) {}
    /**
     * Splits a batch of shared taxonomy terms.
     *
     * @since 4.3.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function _wp_batch_split_terms() {}
    /**
     * In order to avoid the _wp_batch_split_terms() job being accidentally removed,
     * check that it's still scheduled while we haven't finished splitting terms.
     *
     * @ignore
     * @since 4.3.0
     */
    function _wp_check_for_scheduled_split_terms() {}
    function _wp_check_split_default_terms($term_id, $new_term_id, $term_taxonomy_id, $taxonomy) {}
    function _wp_check_split_terms_in_menus($term_id, $new_term_id, $term_taxonomy_id, $taxonomy) {}
    function _wp_check_split_nav_menu_terms($term_id, $new_term_id, $term_taxonomy_id, $taxonomy) {}
    function wp_get_split_terms($old_term_id) {}
    function wp_get_split_term($old_term_id, $taxonomy) {}
    function wp_term_is_shared($term_id) {}
    function get_term_link($term, $taxonomy = '') {}
    function the_taxonomies($args = array( )) {}
    function get_the_taxonomies($post = 0, $args = array( )) {}
    function get_post_taxonomies($post = 0) {}
    function is_object_in_term($object_id, $taxonomy, $terms = null) {}
    function is_object_in_taxonomy($object_type, $taxonomy) {}
    function get_ancestors($object_id = 0, $object_type = '', $resource_type = '') {}
    function wp_get_term_taxonomy_parent_id($term_id, $taxonomy) {}
    function wp_check_term_hierarchy_for_loops($parent, $term_id, $taxonomy) {}
    function is_taxonomy_viewable($taxonomy) {}
    /**
     * Sets the last changed time for the 'terms' cache group.
     *
     * @since 5.0.0
     */
    function wp_cache_set_terms_last_changed() {}
    function wp_check_term_meta_support_prefilter($check) {}
    function get_categories($args = '') {}
    function get_category($category, $output = OBJECT, $filter = 'raw') {}
    function get_category_by_path($category_path, $full_match = true, $output = OBJECT) {}
    function get_category_by_slug($slug) {}
    function get_cat_ID($cat_name) {}
    function get_cat_name($cat_id) {}
    function cat_is_ancestor_of($cat1, $cat2) {}
    function sanitize_category($category, $context = 'display') {}
    function sanitize_category_field($field, $value, $cat_id, $context) {}
    function get_tags($args = '') {}
    function get_tag($tag, $output = OBJECT, $filter = 'raw') {}
    function clean_category_cache($id) {}
    function _make_cat_compat($category) {}
    function get_bloginfo_rss($show = '') {}
    function bloginfo_rss($show = '') {}
    /**
     * Retrieve the default feed.
     *
     * The default feed is 'rss2', unless a plugin changes it through the
     * {@see 'default_feed'} filter.
     *
     * @since 2.5.0
     *
     * @return string Default feed, or for example 'rss2', 'atom', etc.
     */
    function get_default_feed() {}
    function get_wp_title_rss($deprecated = '&#8211;') {}
    function wp_title_rss($deprecated = '&#8211;') {}
    /**
     * Retrieve the current post title for the feed.
     *
     * @since 2.0.0
     *
     * @return string Current post title.
     */
    function get_the_title_rss() {}
    /**
     * Display the post title in the feed.
     *
     * @since 0.71
     */
    function the_title_rss() {}
    function get_the_content_feed($feed_type = null) {}
    function the_content_feed($feed_type = null) {}
    /**
     * Display the post excerpt for the feed.
     *
     * @since 0.71
     */
    function the_excerpt_rss() {}
    /**
     * Display the permalink to the post for use in feeds.
     *
     * @since 2.3.0
     */
    function the_permalink_rss() {}
    /**
     * Outputs the link to the comments for the current post in an xml safe way
     *
     * @since 3.0.0
     * @return none
     */
    function comments_link_feed() {}
    function comment_guid($comment_id = null) {}
    function get_comment_guid($comment_id = null) {}
    function comment_link($comment = null) {}
    /**
     * Retrieve the current comment author for use in the feeds.
     *
     * @since 2.0.0
     *
     * @return string Comment Author
     */
    function get_comment_author_rss() {}
    /**
     * Display the current comment author in the feed.
     *
     * @since 1.0.0
     */
    function comment_author_rss() {}
    /**
     * Display the current comment content for use in the feeds.
     *
     * @since 1.0.0
     */
    function comment_text_rss() {}
    function get_the_category_rss($type = null) {}
    function the_category_rss($type = null) {}
    /**
     * Display the HTML type based on the blog setting.
     *
     * The two possible values are either 'xhtml' or 'html'.
     *
     * @since 2.2.0
     */
    function html_type_rss() {}
    /**
     * Display the rss enclosure for the current post.
     *
     * Uses the global $post to check whether the post requires a password and if
     * the user has the password for the post. If not then it will return before
     * displaying.
     *
     * Also uses the function get_post_custom() to get the post's 'enclosure'
     * metadata field and parses the value to display the enclosure(s). The
     * enclosure(s) consist of enclosure HTML tag(s) with a URI and other
     * attributes.
     *
     * @since 1.5.0
     */
    function rss_enclosure() {}
    /**
     * Display the atom enclosure for the current post.
     *
     * Uses the global $post to check whether the post requires a password and if
     * the user has the password for the post. If not then it will return before
     * displaying.
     *
     * Also uses the function get_post_custom() to get the post's 'enclosure'
     * metadata field and parses the value to display the enclosure(s). The
     * enclosure(s) consist of link HTML tag(s) with a URI and other attributes.
     *
     * @since 2.2.0
     */
    function atom_enclosure() {}
    function prep_atom_text_construct($data) {}
    /**
     * Displays Site Icon in atom feeds.
     *
     * @since 4.3.0
     *
     * @see get_site_icon_url()
     */
    function atom_site_icon() {}
    /**
     * Displays Site Icon in RSS2.
     *
     * @since 4.3.0
     */
    function rss2_site_icon() {}
    /**
     * Display the link for the currently displayed feed in a XSS safe way.
     *
     * Generate a correct link for the atom:self element.
     *
     * @since 2.5.0
     */
    function self_link() {}
    function feed_content_type($type = '') {}
    function fetch_feed($url) {}
    function wp_version_check($extra_stats = array( ), $force_check = false) {}
    function wp_update_plugins($extra_stats = array( )) {}
    function wp_update_themes($extra_stats = array( )) {}
    /**
     * Performs WordPress automatic background updates.
     *
     * @since 3.7.0
     */
    function wp_maybe_auto_update() {}
    /**
     * Retrieves a list of all language updates available.
     *
     * @since 3.7.0
     *
     * @return object[] Array of translation objects that have available updates.
     */
    function wp_get_translation_updates() {}
    /**
     * Collect counts and UI strings for available updates
     *
     * @since 3.3.0
     *
     * @return array
     */
    function wp_get_update_data() {}
    /**
     * Determines whether core should be updated.
     *
     * @since 2.8.0
     *
     * @global string $wp_version
     */
    function _maybe_update_core() {}
    /**
     * Check the last time plugins were run before checking plugin versions.
     *
     * This might have been backported to WordPress 2.6.1 for performance reasons.
     * This is used for the wp-admin to check only so often instead of every page
     * load.
     *
     * @since 2.7.0
     * @access private
     */
    function _maybe_update_plugins() {}
    /**
     * Check themes versions only after a duration of time.
     *
     * This is for performance reasons to make sure that on the theme version
     * checker is not run on every page load.
     *
     * @since 2.7.0
     * @access private
     */
    function _maybe_update_themes() {}
    /**
     * Schedule core, theme, and plugin update checks.
     *
     * @since 3.1.0
     */
    function wp_schedule_update_checks() {}
    /**
     * Clear existing update caches for plugins, themes, and core.
     *
     * @since 4.1.0
     */
    function wp_clean_update_cache() {}
    /**
     * Return the HTTP protocol sent by the server.
     *
     * @since 4.4.0
     *
     * @return string The HTTP protocol. Default: HTTP/1.0.
     */
    function wp_get_server_protocol() {}
    /**
     * Turn register globals off.
     *
     * @since 2.1.0
     * @access private
     */
    function wp_unregister_GLOBALS() {}
    /**
     * Fix `$_SERVER` variables for various setups.
     *
     * @since 3.0.0
     * @access private
     *
     * @global string $PHP_SELF The filename of the currently executing script,
     *                          relative to the document root.
     */
    function wp_fix_server_vars() {}
    /**
     * Check for the required PHP version, and the MySQL extension or
     * a database drop-in.
     *
     * Dies if requirements are not met.
     *
     * @since 3.0.0
     * @access private
     *
     * @global string $required_php_version The required PHP version string.
     * @global string $wp_version           The WordPress version string.
     */
    function wp_check_php_mysql_versions() {}
    /**
     * Don't load all of WordPress when handling a favicon.ico request.
     *
     * Instead, send the headers for a zero-length favicon and bail.
     *
     * @since 3.0.0
     */
    function wp_favicon_request() {}
    /**
     * Die with a maintenance message when conditions are met.
     *
     * Checks for a file in the WordPress root directory named ".maintenance".
     * This file will contain the variable $upgrading, set to the time the file
     * was created. If the file was created less than 10 minutes ago, WordPress
     * enters maintenance mode and displays a message.
     *
     * The default message can be replaced by using a drop-in (maintenance.php in
     * the wp-content directory).
     *
     * @since 3.0.0
     * @access private
     *
     * @global int $upgrading the unix timestamp marking when upgrading WordPress began.
     */
    function wp_maintenance() {}
    /**
     * Start the WordPress micro-timer.
     *
     * @since 0.71
     * @access private
     *
     * @global float $timestart Unix timestamp set at the beginning of the page load.
     * @see timer_stop()
     *
     * @return bool Always returns true.
     */
    function timer_start() {}
    function timer_stop($display = 0, $precision = 3) {}
    /**
     * Set PHP error reporting based on WordPress debug settings.
     *
     * Uses three constants: `WP_DEBUG`, `WP_DEBUG_DISPLAY`, and `WP_DEBUG_LOG`.
     * All three can be defined in wp-config.php. By default, `WP_DEBUG` and
     * `WP_DEBUG_LOG` are set to false, and `WP_DEBUG_DISPLAY` is set to true.
     *
     * When `WP_DEBUG` is true, all PHP notices are reported. WordPress will also
     * display internal notices: when a deprecated WordPress function, function
     * argument, or file is used. Deprecated code may be removed from a later
     * version.
     *
     * It is strongly recommended that plugin and theme developers use `WP_DEBUG`
     * in their development environments.
     *
     * `WP_DEBUG_DISPLAY` and `WP_DEBUG_LOG` perform no function unless `WP_DEBUG`
     * is true.
     *
     * When `WP_DEBUG_DISPLAY` is true, WordPress will force errors to be displayed.
     * `WP_DEBUG_DISPLAY` defaults to true. Defining it as null prevents WordPress
     * from changing the global configuration setting. Defining `WP_DEBUG_DISPLAY`
     * as false will force errors to be hidden.
     *
     * When `WP_DEBUG_LOG` is true, errors will be logged to `wp-content/debug.log`.
     * When `WP_DEBUG_LOG` is a valid path, errors will be logged to the specified file.
     *
     * Errors are never displayed for XML-RPC, REST, and Ajax requests.
     *
     * @since 3.0.0
     * @since 5.1.0 `WP_DEBUG_LOG` can be a file path.
     * @access private
     */
    function wp_debug_mode() {}
    /**
     * Set the location of the language directory.
     *
     * To set directory manually, define the `WP_LANG_DIR` constant
     * in wp-config.php.
     *
     * If the language directory exists within `WP_CONTENT_DIR`, it
     * is used. Otherwise the language directory is assumed to live
     * in `WPINC`.
     *
     * @since 3.0.0
     * @access private
     */
    function wp_set_lang_dir() {}
    /**
     * Load the database class file and instantiate the `$wpdb` global.
     *
     * @since 2.5.0
     *
     * @global wpdb $wpdb The WordPress database class.
     */
    function require_wp_db() {}
    /**
     * Set the database table prefix and the format specifiers for database
     * table columns.
     *
     * Columns not listed here default to `%s`.
     *
     * @since 3.0.0
     * @access private
     *
     * @global wpdb   $wpdb         The WordPress database class.
     * @global string $table_prefix The database table prefix.
     */
    function wp_set_wpdb_vars() {}
    function wp_using_ext_object_cache($using = null) {}
    /**
     * Start the WordPress object cache.
     *
     * If an object-cache.php file exists in the wp-content directory,
     * it uses that drop-in as an external object cache.
     *
     * @since 3.0.0
     * @access private
     *
     * @global array $wp_filter Stores all of the filters.
     */
    function wp_start_object_cache() {}
    /**
     * Redirect to the installer if WordPress is not installed.
     *
     * Dies with an error message when Multisite is enabled.
     *
     * @since 3.0.0
     * @access private
     */
    function wp_not_installed() {}
    /**
     * Retrieve an array of must-use plugin files.
     *
     * The default directory is wp-content/mu-plugins. To change the default
     * directory manually, define `WPMU_PLUGIN_DIR` and `WPMU_PLUGIN_URL`
     * in wp-config.php.
     *
     * @since 3.0.0
     * @access private
     *
     * @return array Files to include.
     */
    function wp_get_mu_plugins() {}
    /**
     * Retrieve an array of active and valid plugin files.
     *
     * While upgrading or installing WordPress, no plugins are returned.
     *
     * The default directory is `wp-content/plugins`. To change the default
     * directory manually, define `WP_PLUGIN_DIR` and `WP_PLUGIN_URL`
     * in `wp-config.php`.
     *
     * @since 3.0.0
     * @access private
     *
     * @return string[] $plugin_file Array of paths to plugin files relative to the plugins directory.
     */
    function wp_get_active_and_valid_plugins() {}
    /**
     * Retrieves an array of active and valid themes.
     *
     * While upgrading or installing WordPress, no themes are returned.
     *
     * @since 5.1.0
     * @access private
     *
     * @return array Array of paths to theme directories.
     */
    function wp_get_active_and_valid_themes() {}
    /**
     * Set internal encoding.
     *
     * In most cases the default internal encoding is latin1, which is
     * of no use, since we want to use the `mb_` functions for `utf-8` strings.
     *
     * @since 3.0.0
     * @access private
     */
    function wp_set_internal_encoding() {}
    /**
     * Add magic quotes to `$_GET`, `$_POST`, `$_COOKIE`, and `$_SERVER`.
     *
     * Also forces `$_REQUEST` to be `$_GET + $_POST`. If `$_SERVER`,
     * `$_COOKIE`, or `$_ENV` are needed, use those superglobals directly.
     *
     * @since 3.0.0
     * @access private
     */
    function wp_magic_quotes() {}
    /**
     * Runs just before PHP shuts down execution.
     *
     * @since 1.2.0
     * @access private
     */
    function shutdown_action_hook() {}
    function wp_clone($object) {}
    /**
     * Whether the current request is for a site's admininstrative interface.
     *
     * e.g. `/wp-admin/`
     *
     * Does not check if the user is an administrator; use current_user_can()
     * for checking roles and capabilities.
     *
     * @since 3.1.0
     *
     * @global WP_Screen $current_screen
     *
     * @return bool True if inside WordPress blog administration pages.
     */
    function is_blog_admin() {}
    /**
     * Whether the current request is for the network administrative interface.
     *
     * e.g. `/wp-admin/network/`
     *
     * Does not check if the user is an administrator; use current_user_can()
     * for checking roles and capabilities.
     *
     * @since 3.1.0
     *
     * @global WP_Screen $current_screen
     *
     * @return bool True if inside WordPress network administration pages.
     */
    function is_network_admin() {}
    /**
     * Whether the current request is for a user admin screen.
     *
     * e.g. `/wp-admin/user/`
     *
     * Does not check if the user is an administrator; use current_user_can()
     * for checking roles and capabilities.
     *
     * @since 3.1.0
     *
     * @global WP_Screen $current_screen
     *
     * @return bool True if inside WordPress user administration pages.
     */
    function is_user_admin() {}
    /**
     * If Multisite is enabled.
     *
     * @since 3.0.0
     *
     * @return bool True if Multisite is enabled, false otherwise.
     */
    function is_multisite() {}
    /**
     * Retrieve the current site ID.
     *
     * @since 3.1.0
     *
     * @global int $blog_id
     *
     * @return int Site ID.
     */
    function get_current_blog_id() {}
    /**
     * Retrieves the current network ID.
     *
     * @since 4.6.0
     *
     * @return int The ID of the current network.
     */
    function get_current_network_id() {}
    /**
     * Attempt an early load of translations.
     *
     * Used for errors encountered during the initial loading process, before
     * the locale has been properly detected and loaded.
     *
     * Designed for unusual load sequences (like setup-config.php) or for when
     * the script will then terminate with an error, otherwise there is a risk
     * that a file can be double-included.
     *
     * @since 3.4.0
     * @access private
     *
     * @global WP_Locale $wp_locale The WordPress date and time locale object.
     *
     * @staticvar bool $loaded
     */
    function wp_load_translations_early() {}
    function wp_installing($is_installing = null) {}
    /**
     * Determines if SSL is used.
     *
     * @since 2.6.0
     * @since 4.6.0 Moved from functions.php to load.php.
     *
     * @return bool True if SSL, otherwise false.
     */
    function is_ssl() {}
    function wp_convert_hr_to_bytes($value) {}
    function wp_is_ini_value_changeable($setting) {}
    /**
     * Determines whether the current request is a WordPress Ajax request.
     *
     * @since 4.7.0
     *
     * @return bool True if it's a WordPress Ajax request, false otherwise.
     */
    function wp_doing_ajax() {}
    /**
     * Determines whether the current request should use themes.
     *
     * @since 5.1.0
     *
     * @return bool True if themes should be used, false otherwise.
     */
    function wp_using_themes() {}
    /**
     * Determines whether the current request is a WordPress cron request.
     *
     * @since 4.8.0
     *
     * @return bool True if it's a WordPress cron request, false otherwise.
     */
    function wp_doing_cron() {}
    function is_wp_error($thing) {}
    function wp_is_file_mod_allowed($context) {}
    /**
     * Start scraping edited file errors.
     *
     * @since 4.9.0
     */
    function wp_start_scraping_edited_file_errors() {}
    function wp_finalize_scraping_edited_file_errors($scrape_key) {}
    /**
     * Checks whether current request is a JSON request, or is expecting a JSON response.
     *
     * @since 5.0.0
     *
     * @return bool True if Accepts or Content-Type headers contain application/json, false otherwise.
     */
    function wp_is_json_request() {}
    function wptexturize($text, $reset = false) {}
    function wptexturize_primes($haystack, $needle, $prime, $open_quote, $close_quote) {}
    function _wptexturize_pushpop_element($text, $stack, $disabled_elements) {}
    function wpautop($pee, $br = true) {}
    function wp_html_split($input) {}
    /**
     * Retrieve the regular expression for an HTML element.
     *
     * @since 4.4.0
     *
     * @staticvar string $regex
     *
     * @return string The regular expression
     */
    function get_html_split_regex() {}
    function _get_wptexturize_split_regex($shortcode_regex = '') {}
    function _get_wptexturize_shortcode_regex($tagnames) {}
    function wp_replace_in_html_tags($haystack, $replace_pairs) {}
    function _autop_newline_preservation_helper($matches) {}
    function shortcode_unautop($pee) {}
    function seems_utf8($str) {}
    function _wp_specialchars($string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false) {}
    function wp_specialchars_decode($string, $quote_style = ENT_NOQUOTES) {}
    function wp_check_invalid_utf8($string, $strip = false) {}
    function utf8_uri_encode($utf8_string, $length = 0) {}
    function remove_accents($string) {}
    function sanitize_file_name($filename) {}
    function sanitize_user($username, $strict = false) {}
    function sanitize_key($key) {}
    function sanitize_title($title, $fallback_title = '', $context = 'save') {}
    function sanitize_title_for_query($title) {}
    function sanitize_title_with_dashes($title, $raw_title = '', $context = 'display') {}
    function sanitize_sql_orderby($orderby) {}
    function sanitize_html_class($class, $fallback = '') {}
    function convert_chars($content, $deprecated = '') {}
    function convert_invalid_entities($content) {}
    function balanceTags($text, $force = false) {}
    function force_balance_tags($text) {}
    function format_to_edit($content, $rich_text = false) {}
    function zeroise($number, $threshold) {}
    function backslashit($string) {}
    function trailingslashit($string) {}
    function untrailingslashit($string) {}
    function addslashes_gpc($gpc) {}
    function stripslashes_deep($value) {}
    function stripslashes_from_strings_only($value) {}
    function urlencode_deep($value) {}
    function rawurlencode_deep($value) {}
    function urldecode_deep($value) {}
    function antispambot($email_address, $hex_encoding = 0) {}
    function _make_url_clickable_cb($matches) {}
    function _make_web_ftp_clickable_cb($matches) {}
    function _make_email_clickable_cb($matches) {}
    function make_clickable($text) {}
    function _split_str_by_whitespace($string, $goal) {}
    function wp_rel_nofollow($text) {}
    function wp_rel_nofollow_callback($matches) {}
    function wp_targeted_link_rel($text) {}
    function wp_targeted_link_rel_callback($matches) {}
    /**
     * Adds all filters modifying the rel attribute of targeted links.
     *
     * @since 5.1.0
     */
    function wp_init_targeted_link_rel_filters() {}
    /**
     * Removes all filters modifying the rel attribute of targeted links.
     *
     * @since 5.1.0
     */
    function wp_remove_targeted_link_rel_filters() {}
    function translate_smiley($matches) {}
    function convert_smilies($text) {}
    function is_email($email, $deprecated = false) {}
    function wp_iso_descrambler($string) {}
    function _wp_iso_convert($match) {}
    function get_gmt_from_date($string, $format = 'Y-m-d H:i:s') {}
    function get_date_from_gmt($string, $format = 'Y-m-d H:i:s') {}
    function iso8601_timezone_to_offset($timezone) {}
    function iso8601_to_datetime($date_string, $timezone = 'user') {}
    function sanitize_email($email) {}
    function human_time_diff($from, $to = '') {}
    function wp_trim_excerpt($text = '') {}
    function wp_trim_words($text, $num_words = 55, $more = null) {}
    function ent2ncr($text) {}
    function format_for_editor($text, $default_editor = null) {}
    function _deep_replace($search, $subject) {}
    function esc_sql($data) {}
    function esc_url($url, $protocols = null, $_context = 'display') {}
    function esc_url_raw($url, $protocols = null) {}
    function htmlentities2($myHTML) {}
    function esc_js($text) {}
    function esc_html($text) {}
    function esc_textarea($text) {}
    function tag_escape($tag_name) {}
    function wp_make_link_relative($link) {}
    function sanitize_option($option, $value) {}
    function map_deep($value, $callback) {}
    function wp_parse_str($string, $array) {}
    function wp_pre_kses_less_than($text) {}
    function wp_pre_kses_less_than_callback($matches) {}
    function wp_pre_kses_block_attributes($string, $allowed_html, $allowed_protocols) {}
    function wp_sprintf($pattern) {}
    function wp_sprintf_l($pattern, $args) {}
    function wp_html_excerpt($str, $count, $more = null) {}
    function links_add_base_url($content, $base, $attrs = array('src', 'href')) {}
    function _links_add_base($m) {}
    function links_add_target($content, $target = '_blank', $tags = array('a')) {}
    function _links_add_target($m) {}
    function normalize_whitespace($str) {}
    function wp_strip_all_tags($string, $remove_breaks = false) {}
    function sanitize_text_field($str) {}
    function sanitize_textarea_field($str) {}
    function _sanitize_text_fields($str, $keep_newlines = false) {}
    function wp_basename($path, $suffix = '') {}
    function capital_P_dangit($text) {}
    function sanitize_mime_type($mime_type) {}
    function sanitize_trackback_urls($to_ping) {}
    function wp_slash($value) {}
    function wp_unslash($value) {}
    function get_url_in_content($content) {}
    /**
     * Returns the regexp for common whitespace characters.
     *
     * By default, spaces include new lines, tabs, nbsp entities, and the UTF-8 nbsp.
     * This is designed to replace the PCRE \s sequence.  In ticket #22692, that
     * sequence was found to be unreliable due to random inclusion of the A0 byte.
     *
     * @since 4.0.0
     *
     * @staticvar string $spaces
     *
     * @return string The spaces regexp.
     */
    function wp_spaces_regexp() {}
    /**
     * Print the important emoji-related styles.
     *
     * @since 4.2.0
     *
     * @staticvar bool $printed
     */
    function print_emoji_styles() {}
    /**
     * Print the inline Emoji detection script if it is not already printed.
     *
     * @since 4.2.0
     * @staticvar bool $printed
     */
    function print_emoji_detection_script() {}
    /**
     * Prints inline Emoji dection script
     *
     * @ignore
     * @since 4.6.0
     * @access private
     */
    function _print_emoji_detection_script() {}
    function wp_encode_emoji($content) {}
    function wp_staticize_emoji($text) {}
    function wp_staticize_emoji_for_email($mail) {}
    function _wp_emoji_list($type = 'entities') {}
    function url_shorten($url, $length = 35) {}
    function sanitize_hex_color($color) {}
    function sanitize_hex_color_no_hash($color) {}
    function maybe_hash_hex_color($color) {}
    /**
     * Gets the network's site and user counts.
     *
     * @since MU (3.0.0)
     *
     * @return array Site and user count for the network.
     */
    function get_sitestats() {}
    function get_active_blog_for_user($user_id) {}
    function get_user_count($network_id = null) {}
    function get_blog_count($network_id = null) {}
    function get_blog_post($blog_id, $post_id) {}
    function add_user_to_blog($blog_id, $user_id, $role) {}
    function remove_user_from_blog($user_id, $blog_id = '', $reassign = '') {}
    function get_blog_permalink($blog_id, $post_id) {}
    function get_blog_id_from_url($domain, $path = '/') {}
    function is_email_address_unsafe($user_email) {}
    function wpmu_validate_user_signup($user_name, $user_email) {}
    function wpmu_validate_blog_signup($blogname, $blog_title, $user = '') {}
    function wpmu_signup_blog($domain, $path, $title, $user, $user_email, $meta = array( )) {}
    function wpmu_signup_user($user, $user_email, $meta = array( )) {}
    function wpmu_signup_blog_notification($domain, $path, $title, $user_login, $user_email, $key, $meta = array( )) {}
    function wpmu_signup_user_notification($user_login, $user_email, $key, $meta = array( )) {}
    function wpmu_activate_signup($key) {}
    function wpmu_create_user($user_name, $password, $email) {}
    function wpmu_create_blog($domain, $path, $title, $user_id, $options = array( ), $network_id = 1) {}
    function newblog_notify_siteadmin($blog_id, $deprecated = '') {}
    function newuser_notify_siteadmin($user_id) {}
    function domain_exists($domain, $path, $network_id = 1) {}
    function wpmu_welcome_notification($blog_id, $user_id, $password, $title, $meta = array( )) {}
    function wpmu_welcome_user_notification($user_id, $password, $meta = array( )) {}
    /**
     * Get the current network.
     *
     * Returns an object containing the 'id', 'domain', 'path', and 'site_name'
     * properties of the network being viewed.
     *
     * @see wpmu_current_site()
     *
     * @since MU (3.0.0)
     *
     * @global WP_Network $current_site
     *
     * @return WP_Network
     */
    function get_current_site() {}
    function get_most_recent_post_of_user($user_id) {}
    function get_dirsize($directory) {}
    function recurse_dirsize($directory, $exclude = null) {}
    function check_upload_mimes($mimes) {}
    function update_posts_count($deprecated = '') {}
    function wpmu_log_new_registrations($blog_id, $user_id) {}
    function global_terms($term_id, $deprecated = '') {}
    function redirect_this_site($deprecated = '') {}
    function upload_is_file_too_big($upload) {}
    /**
     * Add a nonce field to the signup page.
     *
     * @since MU (3.0.0)
     */
    function signup_nonce_fields() {}
    function signup_nonce_check($result) {}
    /**
     * Correct 404 redirects when NOBLOGREDIRECT is defined.
     *
     * @since MU (3.0.0)
     */
    function maybe_redirect_404() {}
    /**
     * Add a new user to a blog by visiting /newbloguser/{key}/.
     *
     * This will only work when the user's details are saved as an option
     * keyed as 'new_user_{key}', where '{key}' is a hash generated for the user to be
     * added, as when a user is invited through the regular WP Add User interface.
     *
     * @since MU (3.0.0)
     */
    function maybe_add_existing_user_to_blog() {}
    function add_existing_user_to_blog($details = false) {}
    function add_new_user_to_blog($user_id, $password, $meta) {}
    function fix_phpmailer_messageid($phpmailer) {}
    function is_user_spammy($user = null) {}
    function update_blog_public($old_value, $value) {}
    /**
     * Check whether users can self-register, based on Network settings.
     *
     * @since MU (3.0.0)
     *
     * @return bool
     */
    function users_can_register_signup_filter() {}
    function welcome_user_msg_filter($text) {}
    function force_ssl_content($force = '') {}
    function filter_SSL($url) {}
    /**
     * Schedule update of the network-wide counts for the current network.
     *
     * @since 3.1.0
     */
    function wp_schedule_update_network_counts() {}
    function wp_update_network_counts($network_id = null) {}
    function wp_maybe_update_network_site_counts($network_id = null) {}
    function wp_maybe_update_network_user_counts($network_id = null) {}
    function wp_update_network_site_counts($network_id = null) {}
    function wp_update_network_user_counts($network_id = null) {}
    /**
     * Returns the space used by the current blog.
     *
     * @since 3.5.0
     *
     * @return int Used space in megabytes
     */
    function get_space_used() {}
    /**
     * Returns the upload quota for the current blog.
     *
     * @since MU (3.0.0)
     *
     * @return int Quota in megabytes
     */
    function get_space_allowed() {}
    /**
     * Determines if there is any upload space left in the current blog's quota.
     *
     * @since 3.0.0
     *
     * @return int of upload space available in bytes
     */
    function get_upload_space_available() {}
    /**
     * Determines if there is any upload space left in the current blog's quota.
     *
     * @since 3.0.0
     * @return bool True if space is available, false otherwise.
     */
    function is_upload_space_available() {}
    function upload_size_limit_filter($size) {}
    function wp_is_large_network($using = 'sites', $network_id = null) {}
    /**
     * Retrieves a list of reserved site on a sub-directory Multisite installation.
     *
     * @since 4.4.0
     *
     * @return array $names Array of reserved subdirectory names.
     */
    function get_subdirectory_reserved_names() {}
    function update_network_option_new_admin_email($old_value, $value) {}
    function wp_network_admin_email_change_notification($option_name, $new_email, $old_email, $network_id) {}
    function wp_kses($string, $allowed_html, $allowed_protocols = array( )) {}
    function wp_kses_one_attr($string, $element) {}
    function wp_kses_allowed_html($context = '') {}
    function wp_kses_hook($string, $allowed_html, $allowed_protocols) {}
    /**
     * Returns the version number of KSES.
     *
     * @since 1.0.0
     *
     * @return string KSES version number.
     */
    function wp_kses_version() {}
    function wp_kses_split($string, $allowed_html, $allowed_protocols) {}
    /**
     * Helper function listing HTML attributes containing a URL.
     *
     * This function returns a list of all HTML attributes that must contain
     * a URL according to the HTML specification.
     *
     * This list includes URI attributes both allowed and disallowed by KSES.
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
     *
     * @since 5.0.1
     *
     * @return array HTML attributes that must include a URL.
     */
    function wp_kses_uri_attributes() {}
    function _wp_kses_split_callback($match) {}
    function wp_kses_split2($string, $allowed_html, $allowed_protocols) {}
    function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols) {}
    function wp_kses_attr_check($name, $value, $whole, $vless, $element, $allowed_html) {}
    function wp_kses_hair($attr, $allowed_protocols) {}
    function wp_kses_attr_parse($element) {}
    function wp_kses_hair_parse($attr) {}
    function wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue) {}
    function wp_kses_bad_protocol($string, $allowed_protocols) {}
    function wp_kses_no_null($string, $options = null) {}
    function wp_kses_stripslashes($string) {}
    function wp_kses_array_lc($inarray) {}
    function wp_kses_html_error($string) {}
    function wp_kses_bad_protocol_once($string, $allowed_protocols, $count = 1) {}
    function wp_kses_bad_protocol_once2($string, $allowed_protocols) {}
    function wp_kses_normalize_entities($string) {}
    function wp_kses_named_entities($matches) {}
    function wp_kses_normalize_entities2($matches) {}
    function wp_kses_normalize_entities3($matches) {}
    function valid_unicode($i) {}
    function wp_kses_decode_entities($string) {}
    function _wp_kses_decode_entities_chr($match) {}
    function _wp_kses_decode_entities_chr_hexdec($match) {}
    function wp_filter_kses($data) {}
    function wp_kses_data($data) {}
    function wp_filter_post_kses($data) {}
    function wp_kses_post($data) {}
    function wp_kses_post_deep($data) {}
    function wp_filter_nohtml_kses($data) {}
    /**
     * Adds all KSES input form content filters.
     *
     * All hooks have default priority. The `wp_filter_kses()` function is added to
     * the 'pre_comment_content' and 'title_save_pre' hooks.
     *
     * The `wp_filter_post_kses()` function is added to the 'content_save_pre',
     * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks.
     *
     * @since 2.0.0
     */
    function kses_init_filters() {}
    /**
     * Removes all KSES input form content filters.
     *
     * A quick procedural method to removing all of the filters that KSES uses for
     * content in WordPress Loop.
     *
     * Does not remove the `kses_init()` function from {@see 'init'} hook (priority is
     * default). Also does not remove `kses_init()` function from {@see 'set_current_user'}
     * hook (priority is also default).
     *
     * @since 2.0.6
     */
    function kses_remove_filters() {}
    /**
     * Sets up most of the KSES filters for input form content.
     *
     * First removes all of the KSES filters in case the current user does not need
     * to have KSES filter the content. If the user does not have `unfiltered_html`
     * capability, then KSES filters are added.
     *
     * @since 2.0.0
     */
    function kses_init() {}
    function safecss_filter_attr($css, $deprecated = '') {}
    function _wp_add_global_attributes($value) {}
    /**
     * Creates the initial post types when 'init' action is fired.
     *
     * See {@see 'init'}.
     *
     * @since 2.9.0
     */
    function create_initial_post_types() {}
    function get_attached_file($attachment_id, $unfiltered = false) {}
    function update_attached_file($attachment_id, $file) {}
    function _wp_relative_upload_path($path) {}
    function get_children($args = '', $output = OBJECT) {}
    function get_extended($post) {}
    function get_post($post = null, $output = OBJECT, $filter = 'raw') {}
    function get_post_ancestors($post) {}
    function get_post_field($field, $post = null, $context = 'display') {}
    function get_post_mime_type($post = null) {}
    function get_post_status($post = null) {}
    /**
     * Retrieve all of the WordPress supported post statuses.
     *
     * Posts have a limited set of valid status values, this provides the
     * post_status values and descriptions.
     *
     * @since 2.5.0
     *
     * @return array List of post statuses.
     */
    function get_post_statuses() {}
    /**
     * Retrieve all of the WordPress support page statuses.
     *
     * Pages have a limited set of valid status values, this provides the
     * post_status values and descriptions.
     *
     * @since 2.5.0
     *
     * @return array List of page statuses.
     */
    function get_page_statuses() {}
    /**
     * Return statuses for privacy requests.
     *
     * @since 4.9.6
     * @access private
     *
     * @return array
     */
    function _wp_privacy_statuses() {}
    function register_post_status($post_status, $args = array( )) {}
    function get_post_status_object($post_status) {}
    function get_post_stati($args = array( ), $output = 'names', $operator = 'and') {}
    function is_post_type_hierarchical($post_type) {}
    function post_type_exists($post_type) {}
    function get_post_type($post = null) {}
    function get_post_type_object($post_type) {}
    function get_post_types($args = array( ), $output = 'names', $operator = 'and') {}
    function register_post_type($post_type, $args = array( )) {}
    function unregister_post_type($post_type) {}
    function get_post_type_capabilities($args) {}
    function _post_type_meta_capabilities($capabilities = null) {}
    function get_post_type_labels($post_type_object) {}
    function _get_custom_object_labels($object, $nohier_vs_hier_defaults) {}
    /**
     * Add submenus for post types.
     *
     * @access private
     * @since 3.1.0
     */
    function _add_post_type_submenus() {}
    function add_post_type_support($post_type, $feature) {}
    function remove_post_type_support($post_type, $feature) {}
    function get_all_post_type_supports($post_type) {}
    function post_type_supports($post_type, $feature) {}
    function get_post_types_by_support($feature, $operator = 'and') {}
    function set_post_type($post_id = 0, $post_type = 'post') {}
    function is_post_type_viewable($post_type) {}
    function get_posts($args = null) {}
    function add_post_meta($post_id, $meta_key, $meta_value, $unique = false) {}
    function delete_post_meta($post_id, $meta_key, $meta_value = '') {}
    function get_post_meta($post_id, $key = '', $single = false) {}
    function update_post_meta($post_id, $meta_key, $meta_value, $prev_value = '') {}
    function delete_post_meta_by_key($post_meta_key) {}
    function register_post_meta($post_type, $meta_key, array $args) {}
    function unregister_post_meta($post_type, $meta_key) {}
    function get_post_custom($post_id = 0) {}
    function get_post_custom_keys($post_id = 0) {}
    function get_post_custom_values($key = '', $post_id = 0) {}
    function is_sticky($post_id = 0) {}
    function sanitize_post($post, $context = 'display') {}
    function sanitize_post_field($field, $value, $post_id, $context = 'display') {}
    function stick_post($post_id) {}
    function unstick_post($post_id) {}
    function _count_posts_cache_key($type = 'post', $perm = '') {}
    function wp_count_posts($type = 'post', $perm = '') {}
    function wp_count_attachments($mime_type = '') {}
    /**
     * Get default post mime types.
     *
     * @since 2.9.0
     *
     * @return array List of post mime types.
     */
    function get_post_mime_types() {}
    function wp_match_mime_types($wildcard_mime_types, $real_mime_types) {}
    function wp_post_mime_type_where($post_mime_types, $table_alias = '') {}
    function wp_delete_post($postid = 0, $force_delete = false) {}
    function _reset_front_page_settings_for_post($post_id) {}
    function wp_trash_post($post_id = 0) {}
    function wp_untrash_post($post_id = 0) {}
    function wp_trash_post_comments($post = null) {}
    function wp_untrash_post_comments($post = null) {}
    function wp_get_post_categories($post_id = 0, $args = array( )) {}
    function wp_get_post_tags($post_id = 0, $args = array( )) {}
    function wp_get_post_terms($post_id = 0, $taxonomy = 'post_tag', $args = array( )) {}
    function wp_get_recent_posts($args = array( ), $output = ARRAY_A) {}
    function wp_insert_post($postarr, $wp_error = false) {}
    function wp_update_post($postarr = array( ), $wp_error = false) {}
    function wp_publish_post($post) {}
    function check_and_publish_future_post($post_id) {}
    function wp_unique_post_slug($slug, $post_ID, $post_status, $post_type, $post_parent) {}
    function _truncate_post_slug($slug, $length = 200) {}
    function wp_add_post_tags($post_id = 0, $tags = '') {}
    function wp_set_post_tags($post_id = 0, $tags = '', $append = false) {}
    function wp_set_post_terms($post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false) {}
    function wp_set_post_categories($post_ID = 0, $post_categories = array( ), $append = false) {}
    function wp_transition_post_status($new_status, $old_status, $post) {}
    function add_ping($post_id, $uri) {}
    function get_enclosed($post_id) {}
    function get_pung($post_id) {}
    function get_to_ping($post_id) {}
    function trackback_url_list($tb_list, $post_id) {}
    /**
     * Get a list of page IDs.
     *
     * @since 2.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return array List of page IDs.
     */
    function get_all_page_ids() {}
    function get_page($page, $output = OBJECT, $filter = 'raw') {}
    function get_page_by_path($page_path, $output = OBJECT, $post_type = 'page') {}
    function get_page_by_title($page_title, $output = OBJECT, $post_type = 'page') {}
    function get_page_children($page_id, $pages) {}
    function get_page_hierarchy($pages, $page_id = 0) {}
    function _page_traverse_name($page_id, $children, $result) {}
    function get_page_uri($page = 0) {}
    function get_pages($args = array( )) {}
    function is_local_attachment($url) {}
    function wp_insert_attachment($args, $file = false, $parent = 0, $wp_error = false) {}
    function wp_delete_attachment($post_id, $force_delete = false) {}
    function wp_delete_attachment_files($post_id, $meta, $backup_sizes, $file) {}
    function wp_get_attachment_metadata($attachment_id = 0, $unfiltered = false) {}
    function wp_update_attachment_metadata($attachment_id, $data) {}
    function wp_get_attachment_url($attachment_id = 0) {}
    function wp_get_attachment_caption($post_id = 0) {}
    function wp_get_attachment_thumb_file($post_id = 0) {}
    function wp_get_attachment_thumb_url($post_id = 0) {}
    function wp_attachment_is($type, $post = null) {}
    function wp_attachment_is_image($post = null) {}
    function wp_mime_type_icon($mime = 0) {}
    function wp_check_for_changed_slugs($post_id, $post, $post_before) {}
    function wp_check_for_changed_dates($post_id, $post, $post_before) {}
    function get_private_posts_cap_sql($post_type) {}
    function get_posts_by_author_sql($post_type, $full = true, $post_author = null, $public_only = false) {}
    function get_lastpostdate($timezone = 'server', $post_type = 'any') {}
    function get_lastpostmodified($timezone = 'server', $post_type = 'any') {}
    function _get_last_post_time($timezone, $field, $post_type = 'any') {}
    function update_post_cache($posts) {}
    function clean_post_cache($post) {}
    function update_post_caches($posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true) {}
    function update_postmeta_cache($post_ids) {}
    function clean_attachment_cache($id, $clean_terms = false) {}
    function _transition_post_status($new_status, $old_status, $post) {}
    function _future_post_hook($deprecated, $post) {}
    function _publish_post_hook($post_id) {}
    function wp_get_post_parent_id($post) {}
    function wp_check_post_hierarchy_for_loops($post_parent, $post_ID) {}
    function set_post_thumbnail($post, $thumbnail_id) {}
    function delete_post_thumbnail($post) {}
    /**
     * Delete auto-drafts for new posts that are > 7 days old.
     *
     * @since 3.4.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function wp_delete_auto_drafts() {}
    function wp_queue_posts_for_term_meta_lazyload($posts) {}
    function _update_term_count_on_transition_post_status($new_status, $old_status, $post) {}
    function _prime_post_caches($ids, $update_term_cache = true, $update_meta_cache = true) {}
    function wp_add_trashed_suffix_to_post_name_for_trashed_posts($post_name, $post_ID = 0) {}
    function wp_add_trashed_suffix_to_post_name_for_post($post) {}
    function _filter_query_attachment_filenames($clauses) {}
    /**
     * Sets the last changed time for the 'posts' cache group.
     *
     * @since 5.0.0
     */
    function wp_cache_set_posts_last_changed() {}
    function wp_simplepie_autoload($class) {}
    function register_rest_route($namespace, $route, $args = array( ), $override = false) {}
    function register_rest_field($object_type, $attribute, $args = array( )) {}
    /**
     * Registers rewrite rules for the API.
     *
     * @since 4.4.0
     *
     * @see rest_api_register_rewrites()
     * @global WP $wp Current WordPress environment instance.
     */
    function rest_api_init() {}
    /**
     * Adds REST rewrite rules.
     *
     * @since 4.4.0
     *
     * @see add_rewrite_rule()
     * @global WP_Rewrite $wp_rewrite
     */
    function rest_api_register_rewrites() {}
    /**
     * Registers the default REST API filters.
     *
     * Attached to the {@see 'rest_api_init'} action
     * to make testing and disabling these filters easier.
     *
     * @since 4.4.0
     */
    function rest_api_default_filters() {}
    /**
     * Registers default REST API routes.
     *
     * @since 4.7.0
     */
    function create_initial_rest_routes() {}
    /**
     * Loads the REST API.
     *
     * @since 4.4.0
     *
     * @global WP             $wp             Current WordPress environment instance.
     */
    function rest_api_loaded() {}
    /**
     * Retrieves the URL prefix for any API resource.
     *
     * @since 4.4.0
     *
     * @return string Prefix.
     */
    function rest_get_url_prefix() {}
    function get_rest_url($blog_id = null, $path = '/', $scheme = 'rest') {}
    function rest_url($path = '', $scheme = 'json') {}
    function rest_do_request($request) {}
    /**
     * Retrieves the current REST server instance.
     *
     * Instantiates a new instance if none exists already.
     *
     * @since 4.5.0
     *
     * @global WP_REST_Server $wp_rest_server REST server instance.
     *
     * @return WP_REST_Server REST server instance.
     */
    function rest_get_server() {}
    function rest_ensure_request($request) {}
    function rest_ensure_response($response) {}
    function rest_handle_deprecated_function($function, $replacement, $version) {}
    function rest_handle_deprecated_argument($function, $message, $version) {}
    function rest_send_cors_headers($value) {}
    function rest_handle_options_request($response, $handler, $request) {}
    function rest_send_allow_header($response, $server, $request) {}
    function rest_filter_response_fields($response, $server, $request) {}
    /**
     * Adds the REST API URL to the WP RSD endpoint.
     *
     * @since 4.4.0
     *
     * @see get_rest_url()
     */
    function rest_output_rsd() {}
    /**
     * Outputs the REST API link tag into page header.
     *
     * @since 4.4.0
     *
     * @see get_rest_url()
     */
    function rest_output_link_wp_head() {}
    /**
     * Sends a Link header for the REST API.
     *
     * @since 4.4.0
     */
    function rest_output_link_header() {}
    function rest_cookie_check_errors($result) {}
    /**
     * Collects cookie authentication status.
     *
     * Collects errors from wp_validate_auth_cookie for use by rest_cookie_check_errors.
     *
     * @since 4.4.0
     *
     * @see current_action()
     * @global mixed $wp_rest_auth_cookie
     */
    function rest_cookie_collect_status() {}
    function rest_parse_date($date, $force_utc = false) {}
    function rest_get_date_with_gmt($date, $is_utc = false) {}
    /**
     * Returns a contextual HTTP error code for authorization failure.
     *
     * @since 4.7.0
     *
     * @return integer 401 if the user is not logged in, 403 if the user is logged in.
     */
    function rest_authorization_required_code() {}
    function rest_validate_request_arg($value, $request, $param) {}
    function rest_sanitize_request_arg($value, $request, $param) {}
    function rest_parse_request_arg($value, $request, $param) {}
    function rest_is_ip_address($ip) {}
    function rest_sanitize_boolean($value) {}
    function rest_is_boolean($maybe_bool) {}
    function rest_get_avatar_urls($email) {}
    /**
     * Retrieves the pixel sizes for avatars.
     *
     * @since 4.7.0
     *
     * @return array List of pixel sizes for avatars. Default `[ 24, 48, 96 ]`.
     */
    function rest_get_avatar_sizes() {}
    function rest_validate_value_from_schema($value, $args, $param = '') {}
    function rest_sanitize_value_from_schema($value, $args) {}
    function rest_preload_api_request($memo, $path) {}
    function redirect_canonical($requested_url = null, $do_redirect = true) {}
    function lowercase_octets($matches) {}
    function _remove_qs_args_if_not_in_url($query_string, array $args_to_check, $url) {}
    function strip_fragment_from_url($url) {}
    /**
     * Attempts to guess the correct URL based on query vars
     *
     * @since 2.3.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return false|string The correct URL if one is found. False on failure.
     */
    function redirect_guess_404_permalink() {}
    /**
     * Redirects a variety of shorthand URLs to the admin.
     *
     * If a user visits example.com/admin, they'll be redirected to /wp-admin.
     * Visiting /login redirects to /wp-login.php, and so on.
     *
     * @since 3.4.0
     *
     * @global WP_Rewrite $wp_rewrite
     */
    function wp_redirect_admin_locations() {}
    function wp_cache_add($key, $data, $group = '', $expire = 0) {}
    /**
     * Closes the cache.
     *
     * This function has ceased to do anything since WordPress 2.5. The
     * functionality was removed along with the rest of the persistent cache.
     *
     * This does not mean that plugins can't implement this function when they need
     * to make sure that the cache is cleaned up after WordPress no longer needs it.
     *
     * @since 2.0.0
     *
     * @return true Always returns true.
     */
    function wp_cache_close() {}
    function wp_cache_decr($key, $offset = 1, $group = '') {}
    function wp_cache_delete($key, $group = '') {}
    /**
     * Removes all cache items.
     *
     * @since 2.0.0
     *
     * @see WP_Object_Cache::flush()
     * @global WP_Object_Cache $wp_object_cache Object cache global instance.
     *
     * @return bool False on failure, true on success
     */
    function wp_cache_flush() {}
    function wp_cache_get($key, $group = '', $force = false, $found = null) {}
    function wp_cache_incr($key, $offset = 1, $group = '') {}
    /**
     * Sets up Object Cache Global and assigns it.
     *
     * @since 2.0.0
     *
     * @global WP_Object_Cache $wp_object_cache
     */
    function wp_cache_init() {}
    function wp_cache_replace($key, $data, $group = '', $expire = 0) {}
    function wp_cache_set($key, $data, $group = '', $expire = 0) {}
    function wp_cache_switch_to_blog($blog_id) {}
    function wp_cache_add_global_groups($groups) {}
    function wp_cache_add_non_persistent_groups($groups) {}
    /**
     * Reset internal cache keys and structures.
     *
     * If the cache back end uses global blog or site IDs as part of its cache keys,
     * this function instructs the back end to reset those keys and perform any cleanup
     * since blog or site IDs have changed since cache init.
     *
     * This function is deprecated. Use wp_cache_switch_to_blog() instead of this
     * function when preparing the cache for a blog switch. For clearing the cache
     * during unit tests, consider using wp_cache_init(). wp_cache_init() is not
     * recommended outside of unit tests as the performance penalty for using it is
     * high.
     *
     * @since 2.6.0
     * @deprecated 3.5.0 WP_Object_Cache::reset()
     * @see WP_Object_Cache::reset()
     *
     * @global WP_Object_Cache $wp_object_cache Object cache global instance.
     */
    function wp_cache_reset() {}
    /**
     * Display the ID of the current item in the WordPress Loop.
     *
     * @since 0.71
     */
    function the_ID() {}
    /**
     * Retrieve the ID of the current item in the WordPress Loop.
     *
     * @since 2.1.0
     *
     * @return int|false The ID of the current item in the WordPress Loop. False if $post is not set.
     */
    function get_the_ID() {}
    function the_title($before = '', $after = '', $echo = true) {}
    function the_title_attribute($args = '') {}
    function get_the_title($post = 0) {}
    function the_guid($post = 0) {}
    function get_the_guid($post = 0) {}
    function the_content($more_link_text = null, $strip_teaser = false) {}
    function get_the_content($more_link_text = null, $strip_teaser = false) {}
    /**
     * Display the post excerpt.
     *
     * @since 0.71
     */
    function the_excerpt() {}
    function get_the_excerpt($post = null) {}
    function has_excerpt($post = 0) {}
    function post_class($class = '', $post_id = null) {}
    function get_post_class($class = '', $post_id = null) {}
    function body_class($class = '') {}
    function get_body_class($class = '') {}
    function post_password_required($post = null) {}
    function wp_link_pages($args = '') {}
    function _wp_link_page($i) {}
    function post_custom($key = '') {}
    /**
     * Display a list of post custom fields.
     *
     * @since 1.2.0
     *
     * @internal This will probably change at some point...
     */
    function the_meta() {}
    function wp_dropdown_pages($args = '') {}
    function wp_list_pages($args = '') {}
    function wp_page_menu($args = array( )) {}
    function walk_page_tree($pages, $depth, $current_page, $r) {}
    /**
     * Retrieve HTML dropdown (select) content for page list.
     *
     * @uses Walker_PageDropdown to create HTML dropdown content.
     * @since 2.1.0
     * @see Walker_PageDropdown::walk() for parameters and return description.
     *
     * @return string
     */
    function walk_page_dropdown_tree() {}
    function the_attachment_link($id = 0, $fullsize = false, $deprecated = false, $permalink = false) {}
    function wp_get_attachment_link($id = 0, $size = 'thumbnail', $permalink = false, $icon = false, $text = false, $attr = '') {}
    function prepend_attachment($content) {}
    function get_the_password_form($post = 0) {}
    function is_page_template($template = '') {}
    function get_page_template_slug($post = null) {}
    function wp_post_revision_title($revision, $link = true) {}
    function wp_post_revision_title_expanded($revision, $link = true) {}
    function wp_list_post_revisions($post_id = 0, $type = 'all') {}
    function add_rewrite_rule($regex, $query, $after = 'bottom') {}
    function add_rewrite_tag($tag, $regex, $query = '') {}
    function remove_rewrite_tag($tag) {}
    function add_permastruct($name, $struct, $args = array( )) {}
    function remove_permastruct($name) {}
    function add_feed($feedname, $function) {}
    function flush_rewrite_rules($hard = true) {}
    function add_rewrite_endpoint($name, $places, $query_var = true) {}
    function _wp_filter_taxonomy_base($base) {}
    function wp_resolve_numeric_slug_conflicts($query_vars = array( )) {}
    function url_to_postid($url) {}
    function wp_protect_special_option($option) {}
    function form_option($option) {}
    /**
     * Loads and caches all autoloaded options, if available or all options.
     *
     * @since 2.2.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return array List of all options.
     */
    function wp_load_alloptions() {}
    function wp_load_core_site_options($network_id = null) {}
    function update_option($option, $value, $autoload = null) {}
    function add_option($option, $value = '', $deprecated = '', $autoload = 'yes') {}
    function delete_option($option) {}
    function delete_transient($transient) {}
    function get_transient($transient) {}
    function set_transient($transient, $value, $expiration = 0) {}
    function delete_expired_transients($force_db = false) {}
    /**
     * Saves and restores user interface settings stored in a cookie.
     *
     * Checks if the current user-settings cookie is updated and stores it. When no
     * cookie exists (different browser used), adds the last saved cookie restoring
     * the settings.
     *
     * @since 2.7.0
     */
    function wp_user_settings() {}
    function get_user_setting($name, $default = false) {}
    function set_user_setting($name, $value) {}
    function delete_user_setting($names) {}
    /**
     * Retrieve all user interface settings.
     *
     * @since 2.7.0
     *
     * @global array $_updated_user_settings
     *
     * @return array the last saved user settings or empty array.
     */
    function get_all_user_settings() {}
    function wp_set_all_user_settings($user_settings) {}
    /**
     * Delete the user settings of the current user.
     *
     * @since 2.7.0
     */
    function delete_all_user_settings() {}
    function get_site_option($option, $default = false, $deprecated = true) {}
    function add_site_option($option, $value) {}
    function delete_site_option($option) {}
    function update_site_option($option, $value) {}
    function get_network_option($network_id, $option, $default = false) {}
    function add_network_option($network_id, $option, $value) {}
    function delete_network_option($network_id, $option) {}
    function update_network_option($network_id, $option, $value) {}
    function delete_site_transient($transient) {}
    function get_site_transient($transient) {}
    function set_site_transient($transient, $value, $expiration = 0) {}
    /**
     * Register default settings available in WordPress.
     *
     * The settings registered here are primarily useful for the REST API, so this
     * does not encompass all settings available in WordPress.
     *
     * @since 4.7.0
     */
    function register_initial_settings() {}
    function register_setting($option_group, $option_name, $args = array( )) {}
    function unregister_setting($option_group, $option_name, $deprecated = '') {}
    /**
     * Retrieves an array of registered settings.
     *
     * @since 4.7.0
     *
     * @global array $wp_registered_settings
     *
     * @return array List of registered settings, keyed by option name.
     */
    function get_registered_settings() {}
    function filter_default_option($default, $option, $passed_default) {}
    function has_filter($tag, $function_to_check = false) {}
    function apply_filters_ref_array($tag, $args) {}
    function remove_filter($tag, $function_to_remove, $priority = 10) {}
    function remove_all_filters($tag, $priority = false) {}
    /**
     * Retrieve the name of the current filter or action.
     *
     * @since 2.5.0
     *
     * @global array $wp_current_filter Stores the list of current filters with the current one last
     *
     * @return string Hook name of the current filter or action.
     */
    function current_filter() {}
    /**
     * Retrieve the name of the current action.
     *
     * @since 3.9.0
     *
     * @return string Hook name of the current action.
     */
    function current_action() {}
    function doing_filter($filter = null) {}
    function doing_action($action = null) {}
    function do_action($tag, $arg = '') {}
    function has_action($tag, $function_to_check = false) {}
    function remove_action($tag, $function_to_remove, $priority = 10) {}
    function remove_all_actions($tag, $priority = false) {}
    function apply_filters_deprecated($tag, $args, $version, $replacement = false, $message = null) {}
    function do_action_deprecated($tag, $args, $version, $replacement = false, $message = null) {}
    function plugin_basename($file) {}
    function wp_register_plugin_realpath($file) {}
    function plugin_dir_path($file) {}
    function plugin_dir_url($file) {}
    function register_activation_hook($file, $function) {}
    function register_deactivation_hook($file, $function) {}
    function register_uninstall_hook($file, $callback) {}
    function _wp_call_all_hook($args) {}
    function _wp_filter_build_unique_id($tag, $function, $priority) {}
    function get_category_link($category) {}
    function get_category_parents($id, $link = false, $separator = '/', $nicename = false, $deprecated = array( )) {}
    function get_the_category($id = false) {}
    function get_the_category_by_ID($cat_ID) {}
    function get_the_category_list($separator = '', $parents = '', $post_id = false) {}
    function in_category($category, $post = null) {}
    function the_category($separator = '', $parents = '', $post_id = false) {}
    function category_description($category = 0) {}
    function wp_dropdown_categories($args = '') {}
    function wp_list_categories($args = '') {}
    function wp_tag_cloud($args = '') {}
    function default_topic_count_scale($count) {}
    function wp_generate_tag_cloud($tags, $args = '') {}
    function _wp_object_name_sort_cb($a, $b) {}
    function _wp_object_count_sort_cb($a, $b) {}
    /**
     * Retrieve HTML list content for category list.
     *
     * @uses Walker_Category to create HTML list content.
     * @since 2.1.0
     * @see Walker_Category::walk() for parameters and return description.
     * @return string
     */
    function walk_category_tree() {}
    /**
     * Retrieve HTML dropdown (select) content for category list.
     *
     * @uses Walker_CategoryDropdown to create HTML dropdown content.
     * @since 2.1.0
     * @see Walker_CategoryDropdown::walk() for parameters and return description.
     * @return string
     */
    function walk_category_dropdown_tree() {}
    function get_tag_link($tag) {}
    function get_the_tags($id = 0) {}
    function get_the_tag_list($before = '', $sep = '', $after = '', $id = 0) {}
    function the_tags($before = null, $sep = ', ', $after = '') {}
    function tag_description($tag = 0) {}
    function term_description($term = 0, $deprecated = null) {}
    function get_the_terms($post, $taxonomy) {}
    function get_the_term_list($id, $taxonomy, $before = '', $sep = '', $after = '') {}
    function get_term_parents_list($term_id, $taxonomy, $args = array( )) {}
    function the_terms($id, $taxonomy, $before = '', $sep = ', ', $after = '') {}
    function has_category($category = '', $post = null) {}
    function has_tag($tag = '', $post = null) {}
    function has_term($term = '', $taxonomy = '', $post = null) {}
    function has_post_thumbnail($post = null) {}
    function get_post_thumbnail_id($post = null) {}
    function the_post_thumbnail($size = 'post-thumbnail', $attr = '') {}
    function update_post_thumbnail_cache($wp_query = null) {}
    function get_the_post_thumbnail($post = null, $size = 'post-thumbnail', $attr = '') {}
    function get_the_post_thumbnail_url($post = null, $size = 'post-thumbnail') {}
    function the_post_thumbnail_url($size = 'post-thumbnail') {}
    function get_the_post_thumbnail_caption($post = null) {}
    function the_post_thumbnail_caption($post = null) {}
    function wp_get_themes($args = array( )) {}
    function wp_get_theme($stylesheet = null, $theme_root = null) {}
    function wp_clean_themes_cache($clear_update_cache = true) {}
    /**
     * Whether a child theme is in use.
     *
     * @since 3.0.0
     *
     * @return bool true if a child theme is in use, false otherwise.
     */
    function is_child_theme() {}
    /**
     * Retrieve name of the current stylesheet.
     *
     * The theme name that the administrator has currently set the front end theme
     * as.
     *
     * For all intents and purposes, the template name and the stylesheet name are
     * going to be the same for most cases.
     *
     * @since 1.5.0
     *
     * @return string Stylesheet name.
     */
    function get_stylesheet() {}
    /**
     * Retrieve stylesheet directory path for current theme.
     *
     * @since 1.5.0
     *
     * @return string Path to current theme directory.
     */
    function get_stylesheet_directory() {}
    /**
     * Retrieve stylesheet directory URI.
     *
     * @since 1.5.0
     *
     * @return string
     */
    function get_stylesheet_directory_uri() {}
    /**
     * Retrieves the URI of current theme stylesheet.
     *
     * The stylesheet file name is 'style.css' which is appended to the stylesheet directory URI path.
     * See get_stylesheet_directory_uri().
     *
     * @since 1.5.0
     *
     * @return string
     */
    function get_stylesheet_uri() {}
    /**
     * Retrieves the localized stylesheet URI.
     *
     * The stylesheet directory for the localized stylesheet files are located, by
     * default, in the base theme directory. The name of the locale file will be the
     * locale followed by '.css'. If that does not exist, then the text direction
     * stylesheet will be checked for existence, for example 'ltr.css'.
     *
     * The theme may change the location of the stylesheet directory by either using
     * the {@see 'stylesheet_directory_uri'} or {@see 'locale_stylesheet_uri'} filters.
     *
     * If you want to change the location of the stylesheet files for the entire
     * WordPress workflow, then change the former. If you just have the locale in a
     * separate folder, then change the latter.
     *
     * @since 2.1.0
     *
     * @global WP_Locale $wp_locale
     *
     * @return string
     */
    function get_locale_stylesheet_uri() {}
    /**
     * Retrieve name of the current theme.
     *
     * @since 1.5.0
     *
     * @return string Template name.
     */
    function get_template() {}
    /**
     * Retrieve current theme directory.
     *
     * @since 1.5.0
     *
     * @return string Template directory path.
     */
    function get_template_directory() {}
    /**
     * Retrieve theme directory URI.
     *
     * @since 1.5.0
     *
     * @return string Template directory URI.
     */
    function get_template_directory_uri() {}
    /**
     * Retrieve theme roots.
     *
     * @since 2.9.0
     *
     * @global array $wp_theme_directories
     *
     * @return array|string An array of theme roots keyed by template/stylesheet or a single theme root if all themes have the same root.
     */
    function get_theme_roots() {}
    function register_theme_directory($directory) {}
    function search_theme_directories($force = false) {}
    function get_theme_root($stylesheet_or_template = false) {}
    function get_theme_root_uri($stylesheet_or_template = false, $theme_root = false) {}
    function get_raw_theme_root($stylesheet_or_template, $skip_cache = false) {}
    /**
     * Display localized stylesheet link element.
     *
     * @since 2.1.0
     */
    function locale_stylesheet() {}
    function switch_theme($stylesheet) {}
    /**
     * Checks that current theme files 'index.php' and 'style.css' exists.
     *
     * Does not initially check the default theme, which is the fallback and should always exist.
     * But if it doesn't exist, it'll fall back to the latest core default theme that does exist.
     * Will switch theme to the fallback theme if current theme does not validate.
     *
     * You can use the {@see 'validate_current_theme'} filter to return false to
     * disable this functionality.
     *
     * @since 1.5.0
     * @see WP_DEFAULT_THEME
     *
     * @return bool
     */
    function validate_current_theme() {}
    /**
     * Retrieve all theme modifications.
     *
     * @since 3.1.0
     *
     * @return array|void Theme modifications.
     */
    function get_theme_mods() {}
    function get_theme_mod($name, $default = false) {}
    function set_theme_mod($name, $value) {}
    function remove_theme_mod($name) {}
    /**
     * Remove theme modifications option for current theme.
     *
     * @since 2.1.0
     */
    function remove_theme_mods() {}
    /**
     * Retrieves the custom header text color in 3- or 6-digit hexadecimal form.
     *
     * @since 2.1.0
     *
     * @return string Header text color in 3- or 6-digit hexadecimal form (minus the hash symbol).
     */
    function get_header_textcolor() {}
    /**
     * Displays the custom header text color in 3- or 6-digit hexadecimal form (minus the hash symbol).
     *
     * @since 2.1.0
     */
    function header_textcolor() {}
    /**
     * Whether to display the header text.
     *
     * @since 3.4.0
     *
     * @return bool
     */
    function display_header_text() {}
    /**
     * Check whether a header image is set or not.
     *
     * @since 4.2.0
     *
     * @see get_header_image()
     *
     * @return bool Whether a header image is set or not.
     */
    function has_header_image() {}
    /**
     * Retrieve header image for custom header.
     *
     * @since 2.1.0
     *
     * @return string|false
     */
    function get_header_image() {}
    function get_header_image_tag($attr = array( )) {}
    function the_header_image_tag($attr = array( )) {}
    /**
     * Get random header image data from registered images in theme.
     *
     * @since 3.4.0
     *
     * @access private
     *
     * @global array  $_wp_default_headers
     * @staticvar object $_wp_random_header
     *
     * @return object
     */
    function _get_random_header_data() {}
    /**
     * Get random header image url from registered images in theme.
     *
     * @since 3.2.0
     *
     * @return string Path to header image
     */
    function get_random_header_image() {}
    function is_random_header_image($type = 'any') {}
    /**
     * Display header image URL.
     *
     * @since 2.1.0
     */
    function header_image() {}
    /**
     * Get the header images uploaded for the current theme.
     *
     * @since 3.2.0
     *
     * @return array
     */
    function get_uploaded_header_images() {}
    /**
     * Get the header image data.
     *
     * @since 3.4.0
     *
     * @global array $_wp_default_headers
     *
     * @return object
     */
    function get_custom_header() {}
    function register_default_headers($headers) {}
    function unregister_default_headers($header) {}
    /**
     * Check whether a header video is set or not.
     *
     * @since 4.7.0
     *
     * @see get_header_video_url()
     *
     * @return bool Whether a header video is set or not.
     */
    function has_header_video() {}
    /**
     * Retrieve header video URL for custom header.
     *
     * Uses a local video if present, or falls back to an external video.
     *
     * @since 4.7.0
     *
     * @return string|false Header video URL or false if there is no video.
     */
    function get_header_video_url() {}
    /**
     * Display header video URL.
     *
     * @since 4.7.0
     */
    function the_header_video_url() {}
    /**
     * Retrieve header video settings.
     *
     * @since 4.7.0
     *
     * @return array
     */
    function get_header_video_settings() {}
    /**
     * Check whether a custom header is set or not.
     *
     * @since 4.7.0
     *
     * @return bool True if a custom header is set. False if not.
     */
    function has_custom_header() {}
    /**
     * Checks whether the custom header video is eligible to show on the current page.
     *
     * @since 4.7.0
     *
     * @return bool True if the custom header video should be shown. False if not.
     */
    function is_header_video_active() {}
    /**
     * Retrieve the markup for a custom header.
     *
     * The container div will always be returned in the Customizer preview.
     *
     * @since 4.7.0
     *
     * @return string The markup for a custom header on success.
     */
    function get_custom_header_markup() {}
    /**
     * Print the markup for a custom header.
     *
     * A container div will always be printed in the Customizer preview.
     *
     * @since 4.7.0
     */
    function the_custom_header_markup() {}
    /**
     * Retrieve background image for custom background.
     *
     * @since 3.0.0
     *
     * @return string
     */
    function get_background_image() {}
    /**
     * Display background image path.
     *
     * @since 3.0.0
     */
    function background_image() {}
    /**
     * Retrieve value for custom background color.
     *
     * @since 3.0.0
     *
     * @return string
     */
    function get_background_color() {}
    /**
     * Display background color value.
     *
     * @since 3.0.0
     */
    function background_color() {}
    /**
     * Default custom background callback.
     *
     * @since 3.0.0
     */
    function _custom_background_cb() {}
    /**
     * Render the Custom CSS style element.
     *
     * @since 4.7.0
     */
    function wp_custom_css_cb() {}
    function wp_get_custom_css_post($stylesheet = '') {}
    function wp_get_custom_css($stylesheet = '') {}
    function wp_update_custom_css_post($css, $args = array( )) {}
    function add_editor_style($stylesheet = 'editor-style.css') {}
    /**
     * Removes all visual editor stylesheets.
     *
     * @since 3.1.0
     *
     * @global array $editor_styles
     *
     * @return bool True on success, false if there were no stylesheets to remove.
     */
    function remove_editor_styles() {}
    /**
     * Retrieve any registered editor stylesheets
     *
     * @since 4.0.0
     *
     * @global array $editor_styles Registered editor stylesheets
     *
     * @return array If registered, a list of editor stylesheet URLs.
     */
    function get_editor_stylesheets() {}
    /**
     * Expand a theme's starter content configuration using core-provided data.
     *
     * @since 4.7.0
     *
     * @return array Array of starter content.
     */
    function get_theme_starter_content() {}
    function add_theme_support($feature) {}
    /**
     * Registers the internal custom header and background routines.
     *
     * @since 3.4.0
     * @access private
     *
     * @global Custom_Image_Header $custom_image_header
     * @global Custom_Background   $custom_background
     */
    function _custom_header_background_just_in_time() {}
    /**
     * Adds CSS to hide header text for custom logo, based on Customizer setting.
     *
     * @since 4.5.0
     * @access private
     */
    function _custom_logo_header_styles() {}
    function get_theme_support($feature) {}
    function remove_theme_support($feature) {}
    function _remove_theme_support($feature) {}
    function current_theme_supports($feature) {}
    function require_if_theme_supports($feature, $include) {}
    function _delete_attachment_theme_mod($id) {}
    /**
     * Checks if a theme has been changed and runs 'after_switch_theme' hook on the next WP load.
     *
     * See {@see 'after_switch_theme'}.
     *
     * @since 3.3.0
     */
    function check_theme_switched() {}
    /**
     * Includes and instantiates the WP_Customize_Manager class.
     *
     * Loads the Customizer at plugins_loaded when accessing the customize.php admin
     * page or when any request includes a wp_customize=on param or a customize_changeset
     * param (a UUID). This param is a signal for whether to bootstrap the Customizer when
     * WordPress is loading, especially in the Customizer preview
     * or when making Customizer Ajax requests for widgets or menus.
     *
     * @since 3.4.0
     *
     * @global WP_Customize_Manager $wp_customize
     */
    function _wp_customize_include() {}
    function _wp_customize_publish_changeset($new_status, $old_status, $changeset_post) {}
    function _wp_customize_changeset_filter_insert_post_data($post_data, $supplied_post_data) {}
    /**
     * Adds settings for the customize-loader script.
     *
     * @since 3.4.0
     */
    function _wp_customize_loader_settings() {}
    function wp_customize_url($stylesheet = null) {}
    /**
     * Prints a script to check whether or not the Customizer is supported,
     * and apply either the no-customize-support or customize-support class
     * to the body.
     *
     * This function MUST be called inside the body tag.
     *
     * Ideally, call this function immediately after the body tag is opened.
     * This prevents a flash of unstyled content.
     *
     * It is also recommended that you add the "no-customize-support" class
     * to the body tag by default.
     *
     * @since 3.4.0
     * @since 4.7.0 Support for IE8 and below is explicitly removed via conditional comments.
     */
    function wp_customize_support_script() {}
    /**
     * Add an `is_customize_preview` function if it is missing.
     *
     * Enables installing Twenty Fourteen in WordPress versions before 4.0.0 when the
     * `is_customize_preview` function was introduced.
     */
    function is_customize_preview() {}
    function _wp_keep_alive_customize_changeset_dependent_auto_drafts($new_status, $old_status, $post) {}
    function wp_signon($credentials = array( ), $secure_cookie = '') {}
    function wp_authenticate_username_password($user, $username, $password) {}
    function wp_authenticate_email_password($user, $email, $password) {}
    function wp_authenticate_cookie($user, $username, $password) {}
    function wp_authenticate_spam_check($user) {}
    function wp_validate_logged_in_cookie($user_id) {}
    function count_user_posts($userid, $post_type = 'post', $public_only = false) {}
    function count_many_users_posts($users, $post_type = 'post', $public_only = false) {}
    /**
     * Get the current user's ID
     *
     * @since MU (3.0.0)
     *
     * @return int The current user's ID, or 0 if no user is logged in.
     */
    function get_current_user_id() {}
    function get_user_option($option, $user = 0, $deprecated = '') {}
    function update_user_option($user_id, $option_name, $newvalue, $global = false) {}
    function delete_user_option($user_id, $option_name, $global = false) {}
    function get_users($args = array( )) {}
    function get_blogs_of_user($user_id, $all = false) {}
    function is_user_member_of_blog($user_id = 0, $blog_id = 0) {}
    function add_user_meta($user_id, $meta_key, $meta_value, $unique = false) {}
    function delete_user_meta($user_id, $meta_key, $meta_value = '') {}
    function get_user_meta($user_id, $key = '', $single = false) {}
    function update_user_meta($user_id, $meta_key, $meta_value, $prev_value = '') {}
    function count_users($strategy = 'time', $site_id = null) {}
    function setup_userdata($for_user_id = 0) {}
    function wp_dropdown_users($args = '') {}
    function sanitize_user_field($field, $value, $user_id, $context) {}
    function update_user_caches($user) {}
    function clean_user_cache($user) {}
    function username_exists($username) {}
    function email_exists($email) {}
    function validate_username($username) {}
    function wp_insert_user($userdata) {}
    function wp_update_user($userdata) {}
    function wp_create_user($username, $password, $email = '') {}
    function _get_additional_user_keys($user) {}
    function wp_get_user_contact_methods($user = null) {}
    function _wp_get_user_contactmethods($user = null) {}
    /**
     * Gets the text suggesting how to create strong passwords.
     *
     * @since 4.1.0
     *
     * @return string The password hint text.
     */
    function wp_get_password_hint() {}
    function get_password_reset_key($user) {}
    function check_password_reset_key($key, $login) {}
    function reset_password($user, $new_pass) {}
    function register_new_user($user_login, $user_email) {}
    function wp_send_new_user_notifications($user_id, $notify = 'both') {}
    /**
     * Retrieve the current session token from the logged_in cookie.
     *
     * @since 4.0.0
     *
     * @return string Token.
     */
    function wp_get_session_token() {}
    /**
     * Retrieve a list of sessions for the current user.
     *
     * @since 4.0.0
     * @return array Array of sessions.
     */
    function wp_get_all_sessions() {}
    /**
     * Remove the current session token from the database.
     *
     * @since 4.0.0
     */
    function wp_destroy_current_session() {}
    /**
     * Remove all but the current session token for the current user for the database.
     *
     * @since 4.0.0
     */
    function wp_destroy_other_sessions() {}
    /**
     * Remove all session tokens for the current user from the database.
     *
     * @since 4.0.0
     */
    function wp_destroy_all_sessions() {}
    function wp_get_users_with_no_role($site_id = null) {}
    /**
     * Retrieves the current user object.
     *
     * Will set the current user, if the current user is not set. The current user
     * will be set to the logged-in person. If no user is logged-in, then it will
     * set the current user to 0, which is invalid and won't have any permissions.
     *
     * This function is used by the pluggable functions wp_get_current_user() and
     * get_currentuserinfo(), the latter of which is deprecated but used for backward
     * compatibility.
     *
     * @since 4.5.0
     * @access private
     *
     * @see wp_get_current_user()
     * @global WP_User $current_user Checks if the current user is set.
     *
     * @return WP_User Current WP_User instance.
     */
    function _wp_get_current_user() {}
    /**
     * Send a confirmation request email when a change of user email address is attempted.
     *
     * @since 3.0.0
     * @since 4.9.0 This function was moved from wp-admin/includes/ms.php so it's no longer Multisite specific.
     *
     * @global WP_Error $errors WP_Error object.
     */
    function send_confirmation_on_profile_email() {}
    /**
     * Adds an admin notice alerting the user to check for confirmation request email
     * after email address change.
     *
     * @since 3.0.0
     * @since 4.9.0 This function was moved from wp-admin/includes/ms.php so it's no longer Multisite specific.
     *
     * @global string $pagenow
     */
    function new_user_email_admin_notice() {}
    /**
     * Get all user privacy request types.
     *
     * @since 4.9.6
     * @access private
     *
     * @return array List of core privacy action types.
     */
    function _wp_privacy_action_request_types() {}
    function wp_register_user_personal_data_exporter($exporters) {}
    function wp_user_personal_data_exporter($email_address) {}
    function _wp_privacy_account_request_confirmed($request_id) {}
    function _wp_privacy_send_request_confirmation_notification($request_id) {}
    function _wp_privacy_send_erasure_fulfillment_notification($request_id) {}
    function _wp_privacy_account_request_confirmed_message($request_id) {}
    function wp_create_user_request($email_address = '', $action_name = '', $request_data = array( )) {}
    function wp_user_request_action_description($action_name) {}
    function wp_send_user_request($request_id) {}
    function wp_generate_user_request_key($request_id) {}
    function wp_validate_user_request_key($request_id, $key) {}
    function wp_get_user_request_data($request_id) {}
    /**
     * Returns the initialized WP_Http Object
     *
     * @since 2.7.0
     * @access private
     *
     * @staticvar WP_Http $http
     *
     * @return WP_Http HTTP Transport object.
     */
    function _wp_http_get_object() {}
    function wp_safe_remote_request($url, $args = array( )) {}
    function wp_safe_remote_get($url, $args = array( )) {}
    function wp_safe_remote_post($url, $args = array( )) {}
    function wp_safe_remote_head($url, $args = array( )) {}
    function wp_remote_request($url, $args = array( )) {}
    function wp_remote_get($url, $args = array( )) {}
    function wp_remote_post($url, $args = array( )) {}
    function wp_remote_head($url, $args = array( )) {}
    function wp_remote_retrieve_headers($response) {}
    function wp_remote_retrieve_header($response, $header) {}
    function wp_remote_retrieve_response_code($response) {}
    function wp_remote_retrieve_response_message($response) {}
    function wp_remote_retrieve_body($response) {}
    function wp_remote_retrieve_cookies($response) {}
    function wp_remote_retrieve_cookie($response, $name) {}
    function wp_remote_retrieve_cookie_value($response, $name) {}
    function wp_http_supports($capabilities = array( ), $url = null) {}
    /**
     * Get the HTTP Origin of the current request.
     *
     * @since 3.4.0
     *
     * @return string URL of the origin. Empty string if no origin.
     */
    function get_http_origin() {}
    /**
     * Retrieve list of allowed HTTP origins.
     *
     * @since 3.4.0
     *
     * @return array Array of origin URLs.
     */
    function get_allowed_http_origins() {}
    function is_allowed_http_origin($origin = null) {}
    /**
     * Send Access-Control-Allow-Origin and related headers if the current request
     * is from an allowed origin.
     *
     * If the request is an OPTIONS request, the script exits with either access
     * control headers sent, or a 403 response if the origin is not allowed. For
     * other request methods, you will receive a return value.
     *
     * @since 3.4.0
     *
     * @return string|false Returns the origin URL if headers are sent. Returns false
     *                      if headers are not sent.
     */
    function send_origin_headers() {}
    function wp_http_validate_url($url) {}
    function allowed_http_request_hosts($is_external, $host) {}
    function ms_allowed_http_request_hosts($is_external, $host) {}
    function wp_parse_url($url, $component = -1) {}
    function _get_component_from_parsed_url_array($url_parts, $component = -1) {}
    function _wp_translate_php_url_constant_to_key($constant) {}
    function add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {}
    function update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {}
    function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {}
    function get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {}
    function metadata_exists($meta_type, $object_id, $meta_key) {}
    function get_metadata_by_mid($meta_type, $meta_id) {}
    function update_metadata_by_mid($meta_type, $meta_id, $meta_value, $meta_key = false) {}
    function delete_metadata_by_mid($meta_type, $meta_id) {}
    function update_meta_cache($meta_type, $object_ids) {}
    /**
     * Retrieves the queue for lazy-loading metadata.
     *
     * @since 4.5.0
     *
     * @return WP_Metadata_Lazyloader $lazyloader Metadata lazyloader queue.
     */
    function wp_metadata_lazyloader() {}
    function get_meta_sql($meta_query, $type, $primary_table, $primary_id_column, $context = null) {}
    function _get_meta_table($type) {}
    function is_protected_meta($meta_key, $meta_type = null) {}
    function sanitize_meta($meta_key, $meta_value, $object_type, $object_subtype = '') {}
    function register_meta($object_type, $meta_key, $args, $deprecated = null) {}
    function registered_meta_key_exists($object_type, $meta_key, $object_subtype = '') {}
    function unregister_meta_key($object_type, $meta_key, $object_subtype = '') {}
    function get_registered_meta_keys($object_type, $object_subtype = '') {}
    function get_registered_metadata($object_type, $object_id, $meta_key = '') {}
    function _wp_register_meta_args_whitelist($args, $default_args) {}
    function get_object_subtype($object_type, $object_id) {}
    function wp_insert_site(array $data) {}
    function wp_update_site($site_id, array $data) {}
    function wp_delete_site($site_id) {}
    function get_site($site = null) {}
    function _prime_site_caches($ids, $update_meta_cache = true) {}
    function update_site_cache($sites, $update_meta_cache = true) {}
    function update_sitemeta_cache($site_ids) {}
    function get_sites($args = array( )) {}
    function wp_prepare_site_data($data, $defaults, $old_site = null) {}
    function wp_normalize_site_data($data) {}
    function wp_validate_site_data($errors, $data, $old_site = null) {}
    function wp_initialize_site($site_id, array $args = array( )) {}
    function wp_uninitialize_site($site_id) {}
    function wp_is_site_initialized($site_id) {}
    function clean_blog_cache($blog) {}
    function add_site_meta($site_id, $meta_key, $meta_value, $unique = false) {}
    function delete_site_meta($site_id, $meta_key, $meta_value = '') {}
    function get_site_meta($site_id, $key = '', $single = false) {}
    function update_site_meta($site_id, $meta_key, $meta_value, $prev_value = '') {}
    function delete_site_meta_by_key($meta_key) {}
    function wp_maybe_update_network_site_counts_on_update($new_site, $old_site = null) {}
    function wp_maybe_transition_site_statuses_on_update($new_site, $old_site = null) {}
    function wp_maybe_clean_new_site_cache_on_update($new_site, $old_site) {}
    function wp_update_blog_public_option_on_site_update($site_id, $public) {}
    /**
     * Sets the last changed time for the 'sites' cache group.
     *
     * @since 5.1.0
     */
    function wp_cache_set_sites_last_changed() {}
    function wp_check_site_meta_support_prefilter($check) {}
    /**
     * Update the last_updated field for the current site.
     *
     * @since MU (3.0.0)
     */
    function wpmu_update_blogs_date() {}
    function get_blogaddress_by_id($blog_id) {}
    function get_blogaddress_by_name($blogname) {}
    function get_id_from_blogname($slug) {}
    function get_blog_details($fields = null, $get_all = true) {}
    function refresh_blog_details($blog_id = 0) {}
    function update_blog_details($blog_id, $details = array( )) {}
    function clean_site_details_cache($site_id = 0) {}
    function get_blog_option($id, $option, $default = false) {}
    function add_blog_option($id, $option, $value) {}
    function delete_blog_option($id, $option) {}
    function update_blog_option($id, $option, $value, $deprecated = null) {}
    function switch_to_blog($new_blog, $deprecated = null) {}
    /**
     * Restore the current blog, after calling switch_to_blog()
     *
     * @see switch_to_blog()
     * @since MU (3.0.0)
     *
     * @global wpdb            $wpdb
     * @global array           $_wp_switched_stack
     * @global int             $blog_id
     * @global bool            $switched
     * @global string          $table_prefix
     * @global WP_Object_Cache $wp_object_cache
     *
     * @return bool True on success, false if we're already on the current blog
     */
    function restore_current_blog() {}
    function wp_switch_roles_and_user($new_site_id, $old_site_id) {}
    /**
     * Determines if switch_to_blog() is in effect
     *
     * @since 3.5.0
     *
     * @global array $_wp_switched_stack
     *
     * @return bool True if switched, false otherwise.
     */
    function ms_is_switched() {}
    function is_archived($id) {}
    function update_archived($id, $archived) {}
    function update_blog_status($blog_id, $pref, $value, $deprecated = null) {}
    function get_blog_status($id, $pref) {}
    function get_last_updated($deprecated = '', $start = 0, $quantity = 40) {}
    function _update_blog_date_on_post_publish($new_status, $old_status, $post) {}
    function _update_blog_date_on_post_delete($post_id) {}
    function _update_posts_count_on_delete($post_id) {}
    function _update_posts_count_on_transition_post_status($new_status, $old_status, $post = null) {}
    function get_post_format($post = null) {}
    function has_post_format($format = array( ), $post = null) {}
    function set_post_format($post, $format) {}
    /**
     * Returns an array of post format slugs to their translated and pretty display versions
     *
     * @since 3.1.0
     *
     * @return array The array of translated post format names.
     */
    function get_post_format_strings() {}
    /**
     * Retrieves the array of post format slugs.
     *
     * @since 3.1.0
     *
     * @return array The array of post format slugs as both keys and values.
     */
    function get_post_format_slugs() {}
    function get_post_format_string($slug) {}
    function get_post_format_link($format) {}
    function _post_format_request($qvs) {}
    function _post_format_link($link, $term, $taxonomy) {}
    function _post_format_get_term($term) {}
    function _post_format_get_terms($terms, $taxonomies, $args) {}
    function _post_format_wp_get_object_terms($terms) {}
    /**
     * Get the "dashboard blog", the blog where users without a blog edit their profile data.
     * Dashboard blog functionality was removed in WordPress 3.1, replaced by the user admin.
     *
     * @since MU (3.0.0)
     * @deprecated 3.1.0 Use get_site()
     * @see get_site()
     *
     * @return WP_Site Current site object.
     */
    function get_dashboard_blog() {}
    function generate_random_password($len = 8) {}
    function is_site_admin($user_login = '') {}
    function graceful_fail($message) {}
    function get_user_details($username) {}
    function clear_global_post_cache($post_id) {}
    /**
     * Deprecated functionality to determin if the current site is the main site.
     *
     * @since MU (3.0.0)
     * @deprecated 3.0.0 Use is_main_site()
     * @see is_main_site()
     */
    function is_main_blog() {}
    function validate_email($email, $check_domain = true) {}
    function get_blog_list($start = 0, $num = 10, $deprecated = '') {}
    function get_most_active_blogs($num = 10, $display = true) {}
    function wpmu_admin_do_redirect($url = '') {}
    function wpmu_admin_redirect_add_updated_param($url = '') {}
    function get_user_id_from_string($string) {}
    function get_blogaddress_by_domain($domain, $path) {}
    function create_empty_blog($domain, $path, $weblog_title, $site_id = 1) {}
    function get_admin_users_for_domain($domain = '', $path = '') {}
    function wp_get_sites($args = array( )) {}
    function is_user_option_local($key, $user_id = 0, $blog_id = 0) {}
    function insert_blog($domain, $path, $site_id) {}
    function install_blog($blog_id, $blog_title = '') {}
    function install_blog_defaults($blog_id, $user_id) {}
    /**
     * Initialize $wp_scripts if it has not been set.
     *
     * @global WP_Scripts $wp_scripts
     *
     * @since 4.2.0
     *
     * @return WP_Scripts WP_Scripts instance.
     */
    function wp_scripts() {}
    function _wp_scripts_maybe_doing_it_wrong($function) {}
    function wp_print_scripts($handles = false) {}
    function wp_add_inline_script($handle, $data, $position = 'after') {}
    function wp_register_script($handle, $src, $deps = array( ), $ver = false, $in_footer = false) {}
    function wp_localize_script($handle, $object_name, $l10n) {}
    function wp_set_script_translations($handle, $domain = 'default', $path = null) {}
    function wp_deregister_script($handle) {}
    function wp_enqueue_script($handle, $src = '', $deps = array( ), $ver = false, $in_footer = false) {}
    function wp_dequeue_script($handle) {}
    function wp_script_is($handle, $list = 'enqueued') {}
    function wp_script_add_data($handle, $key, $value) {}
    function get_network($network = null) {}
    function get_networks($args = array( )) {}
    function clean_network_cache($ids) {}
    function update_network_cache($networks) {}
    function _prime_network_caches($network_ids) {}
    function map_meta_cap($cap, $user_id) {}
    function current_user_can($capability) {}
    function current_user_can_for_blog($blog_id, $capability) {}
    function author_can($post, $capability) {}
    function user_can($user, $capability) {}
    /**
     * Retrieves the global WP_Roles instance and instantiates it if necessary.
     *
     * @since 4.3.0
     *
     * @global WP_Roles $wp_roles WP_Roles global instance.
     *
     * @return WP_Roles WP_Roles global instance if not already instantiated.
     */
    function wp_roles() {}
    function get_role($role) {}
    function add_role($role, $display_name, $capabilities = array( )) {}
    function remove_role($role) {}
    /**
     * Retrieve a list of super admins.
     *
     * @since 3.0.0
     *
     * @global array $super_admins
     *
     * @return array List of super admin logins
     */
    function get_super_admins() {}
    function is_super_admin($user_id = false) {}
    function grant_super_admin($user_id) {}
    function revoke_super_admin($user_id) {}
    function wp_maybe_grant_install_languages_cap($allcaps) {}
    function the_permalink($post = 0) {}
    function user_trailingslashit($string, $type_of_url = '') {}
    function permalink_anchor($mode = 'id') {}
    function get_the_permalink($post = 0, $leavename = false) {}
    function get_permalink($post = 0, $leavename = false) {}
    function get_post_permalink($id = 0, $leavename = false, $sample = false) {}
    function get_page_link($post = false, $leavename = false, $sample = false) {}
    function _get_page_link($post = false, $leavename = false, $sample = false) {}
    function get_attachment_link($post = null, $leavename = false) {}
    function get_year_link($year) {}
    function get_month_link($year, $month) {}
    function get_day_link($year, $month, $day) {}
    function the_feed_link($anchor, $feed = '') {}
    function get_feed_link($feed = '') {}
    function get_post_comments_feed_link($post_id = 0, $feed = '') {}
    function post_comments_feed_link($link_text = '', $post_id = '', $feed = '') {}
    function get_author_feed_link($author_id, $feed = '') {}
    function get_category_feed_link($cat_id, $feed = '') {}
    function get_term_feed_link($term_id, $taxonomy = 'category', $feed = '') {}
    function get_tag_feed_link($tag_id, $feed = '') {}
    function get_edit_tag_link($tag_id, $taxonomy = 'post_tag') {}
    function edit_tag_link($link = '', $before = '', $after = '', $tag = null) {}
    function get_edit_term_link($term_id, $taxonomy = '', $object_type = '') {}
    function edit_term_link($link = '', $before = '', $after = '', $term = null, $echo = true) {}
    function get_search_link($query = '') {}
    function get_search_feed_link($search_query = '', $feed = '') {}
    function get_search_comments_feed_link($search_query = '', $feed = '') {}
    function get_post_type_archive_link($post_type) {}
    function get_post_type_archive_feed_link($post_type, $feed = '') {}
    function get_preview_post_link($post = null, $query_args = array( ), $preview_link = '') {}
    function get_edit_post_link($id = 0, $context = 'display') {}
    function edit_post_link($text = null, $before = '', $after = '', $id = 0, $class = 'post-edit-link') {}
    function get_delete_post_link($id = 0, $deprecated = '', $force_delete = false) {}
    function get_edit_comment_link($comment_id = 0) {}
    function edit_comment_link($text = null, $before = '', $after = '') {}
    function get_edit_bookmark_link($link = 0) {}
    function edit_bookmark_link($link = '', $before = '', $after = '', $bookmark = null) {}
    function get_edit_user_link($user_id = null) {}
    function get_previous_post($in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    function get_next_post($in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    function get_adjacent_post($in_same_term = false, $excluded_terms = '', $previous = true, $taxonomy = 'category') {}
    function get_adjacent_post_rel_link($title = '%title', $in_same_term = false, $excluded_terms = '', $previous = true, $taxonomy = 'category') {}
    function adjacent_posts_rel_link($title = '%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    /**
     * Displays relational links for the posts adjacent to the current post for single post pages.
     *
     * This is meant to be attached to actions like 'wp_head'. Do not call this directly in plugins
     * or theme templates.
     *
     * @since 3.0.0
     *
     * @see adjacent_posts_rel_link()
     */
    function adjacent_posts_rel_link_wp_head() {}
    function next_post_rel_link($title = '%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    function prev_post_rel_link($title = '%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    function get_boundary_post($in_same_term = false, $excluded_terms = '', $start = true, $taxonomy = 'category') {}
    function get_previous_post_link($format = '&laquo; %link', $link = '%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    function previous_post_link($format = '&laquo; %link', $link = '%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    function get_next_post_link($format = '%link &raquo;', $link = '%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    function next_post_link($format = '%link &raquo;', $link = '%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category') {}
    function get_adjacent_post_link($format, $link, $in_same_term = false, $excluded_terms = '', $previous = true, $taxonomy = 'category') {}
    function adjacent_post_link($format, $link, $in_same_term = false, $excluded_terms = '', $previous = true, $taxonomy = 'category') {}
    function get_pagenum_link($pagenum = 1, $escape = true) {}
    function get_next_posts_page_link($max_page = 0) {}
    function next_posts($max_page = 0, $echo = true) {}
    function get_next_posts_link($label = null, $max_page = 0) {}
    function next_posts_link($label = null, $max_page = 0) {}
    /**
     * Retrieves the previous posts page link.
     *
     * Will only return string, if not on a single page or post.
     *
     * Backported to 2.0.10 from 2.1.3.
     *
     * @since 2.0.10
     *
     * @global int $paged
     *
     * @return string|void The link for the previous posts page.
     */
    function get_previous_posts_page_link() {}
    function previous_posts($echo = true) {}
    function get_previous_posts_link($label = null) {}
    function previous_posts_link($label = null) {}
    function get_posts_nav_link($args = array( )) {}
    function posts_nav_link($sep = '', $prelabel = '', $nxtlabel = '') {}
    function get_the_post_navigation($args = array( )) {}
    function the_post_navigation($args = array( )) {}
    function get_the_posts_navigation($args = array( )) {}
    function the_posts_navigation($args = array( )) {}
    function get_the_posts_pagination($args = array( )) {}
    function the_posts_pagination($args = array( )) {}
    function _navigation_markup($links, $class = 'posts-navigation', $screen_reader_text = '') {}
    function get_comments_pagenum_link($pagenum = 1, $max_page = 0) {}
    function get_next_comments_link($label = '', $max_page = 0) {}
    function next_comments_link($label = '', $max_page = 0) {}
    function get_previous_comments_link($label = '') {}
    function previous_comments_link($label = '') {}
    function paginate_comments_links($args = array( )) {}
    function get_the_comments_navigation($args = array( )) {}
    function the_comments_navigation($args = array( )) {}
    function get_the_comments_pagination($args = array( )) {}
    function the_comments_pagination($args = array( )) {}
    function get_home_url($blog_id = null, $path = '', $scheme = null) {}
    function get_site_url($blog_id = null, $path = '', $scheme = null) {}
    function get_admin_url($blog_id = null, $path = '', $scheme = 'admin') {}
    function content_url($path = '') {}
    function plugins_url($path = '', $plugin = '') {}
    function network_site_url($path = '', $scheme = null) {}
    function network_home_url($path = '', $scheme = null) {}
    function network_admin_url($path = '', $scheme = 'admin') {}
    function user_admin_url($path = '', $scheme = 'admin') {}
    function self_admin_url($path = '', $scheme = 'admin') {}
    function set_url_scheme($url, $scheme = null) {}
    function get_dashboard_url($user_id = 0, $path = '', $scheme = 'admin') {}
    function get_edit_profile_url($user_id = 0, $scheme = 'admin') {}
    function wp_get_canonical_url($post = null) {}
    /**
     * Outputs rel=canonical for singular queries.
     *
     * @since 2.9.0
     * @since 4.6.0 Adjusted to use `wp_get_canonical_url()`.
     */
    function rel_canonical() {}
    function wp_get_shortlink($id = 0, $context = 'post', $allow_slugs = true) {}
    /**
     * Injects rel=shortlink into the head if a shortlink is defined for the current page.
     *
     * Attached to the {@see 'wp_head'} action.
     *
     * @since 3.0.0
     */
    function wp_shortlink_wp_head() {}
    /**
     * Sends a Link: rel=shortlink header if a shortlink is defined for the current page.
     *
     * Attached to the {@see 'wp'} action.
     *
     * @since 3.0.0
     */
    function wp_shortlink_header() {}
    function the_shortlink($text = '', $title = '', $before = '', $after = '') {}
    function get_avatar_url($id_or_email, $args = null) {}
    function is_avatar_comment_type($comment_type) {}
    function get_avatar_data($id_or_email, $args = null) {}
    function get_theme_file_uri($file = '') {}
    function get_parent_theme_file_uri($file = '') {}
    function get_theme_file_path($file = '') {}
    function get_parent_theme_file_path($file = '') {}
    /**
     * Retrieves the URL to the privacy policy page.
     *
     * @since 4.9.6
     *
     * @return string The URL to the privacy policy page. Empty string if it doesn't exist.
     */
    function get_privacy_policy_url() {}
    function the_privacy_policy_link($before = '', $after = '') {}
    function get_the_privacy_policy_link($before = '', $after = '') {}
    /**
     * Whether a subdomain configuration is enabled.
     *
     * @since 3.0.0
     *
     * @return bool True if subdomain configuration is enabled, false otherwise.
     */
    function is_subdomain_install() {}
    /**
     * Returns array of network plugin files to be included in global scope.
     *
     * The default directory is wp-content/plugins. To change the default directory
     * manually, define `WP_PLUGIN_DIR` and `WP_PLUGIN_URL` in `wp-config.php`.
     *
     * @access private
     * @since 3.1.0
     *
     * @return array Files to include.
     */
    function wp_get_active_network_plugins() {}
    /**
     * Checks status of current blog.
     *
     * Checks if the blog is deleted, inactive, archived, or spammed.
     *
     * Dies with a default message if the blog does not pass the check.
     *
     * To change the default message when a blog does not pass the check,
     * use the wp-content/blog-deleted.php, blog-inactive.php and
     * blog-suspended.php drop-ins.
     *
     * @since 3.0.0
     *
     * @return true|string Returns true on success, or drop-in file to include.
     */
    function ms_site_check() {}
    function get_network_by_path($domain, $path, $segments = null) {}
    function get_site_by_path($domain, $path, $segments = null) {}
    function ms_load_current_site_and_network($domain, $path, $subdomain = false) {}
    function ms_not_installed($domain, $path) {}
    function get_current_site_name($current_site) {}
    /**
     * This deprecated function managed much of the site and network loading in multisite.
     *
     * The current bootstrap code is now responsible for parsing the site and network load as
     * well as setting the global $current_site object.
     *
     * @access private
     * @since 3.0.0
     * @deprecated 3.9.0
     *
     * @global object $current_site
     *
     * @return object
     */
    function wpmu_current_site() {}
    function wp_get_network($network) {}
    /**
     * Test if the current browser runs on a mobile device (smart phone, tablet, etc.)
     *
     * @since 3.4.0
     *
     * @return bool
     */
    function wp_is_mobile() {}
    function wp_embed_register_handler($id, $regex, $callback, $priority = 10) {}
    function wp_embed_unregister_handler($id, $priority = 10) {}
    function wp_embed_defaults($url = '') {}
    function wp_oembed_get($url, $args = '') {}
    /**
     * Returns the initialized WP_oEmbed object.
     *
     * @since 2.9.0
     * @access private
     *
     * @staticvar WP_oEmbed $wp_oembed
     *
     * @return WP_oEmbed object.
     */
    function _wp_oembed_get_object() {}
    function wp_oembed_add_provider($format, $provider, $regex = false) {}
    function wp_oembed_remove_provider($format) {}
    /**
     * Determines if default embed handlers should be loaded.
     *
     * Checks to make sure that the embeds library hasn't already been loaded. If
     * it hasn't, then it will load the embeds library.
     *
     * @since 2.9.0
     *
     * @see wp_embed_register_handler()
     */
    function wp_maybe_load_embeds() {}
    function wp_embed_handler_youtube($matches, $attr, $url, $rawattr) {}
    function wp_embed_handler_audio($matches, $attr, $url, $rawattr) {}
    function wp_embed_handler_video($matches, $attr, $url, $rawattr) {}
    /**
     * Registers the oEmbed REST API route.
     *
     * @since 4.4.0
     */
    function wp_oembed_register_route() {}
    /**
     * Adds oEmbed discovery links in the website <head>.
     *
     * @since 4.4.0
     */
    function wp_oembed_add_discovery_links() {}
    /**
     * Adds the necessary JavaScript to communicate with the embedded iframes.
     *
     * @since 4.4.0
     */
    function wp_oembed_add_host_js() {}
    function get_post_embed_url($post = null) {}
    function get_oembed_endpoint_url($permalink = '', $format = 'json') {}
    function get_post_embed_html($width, $height, $post = null) {}
    function get_oembed_response_data($post, $width) {}
    function get_oembed_response_data_for_url($url, $args) {}
    function get_oembed_response_data_rich($data, $post, $width, $height) {}
    function wp_oembed_ensure_format($format) {}
    function _oembed_rest_pre_serve_request($served, $result, $request, $server) {}
    function _oembed_create_xml($data, $node = null) {}
    function wp_filter_oembed_iframe_title_attribute($result, $data, $url) {}
    function wp_filter_oembed_result($result, $data, $url) {}
    function wp_embed_excerpt_more($more_string) {}
    /**
     * Displays the post excerpt for the embed template.
     *
     * Intended to be used in 'The Loop'.
     *
     * @since 4.4.0
     */
    function the_excerpt_embed() {}
    function wp_embed_excerpt_attachment($content) {}
    /**
     * Enqueue embed iframe default CSS and JS & fire do_action('enqueue_embed_scripts')
     *
     * Enqueue PNG fallback CSS for embed iframe for legacy versions of IE.
     *
     * Allows plugins to queue scripts for the embed iframe end using wp_enqueue_script().
     * Runs first in oembed_head().
     *
     * @since 4.4.0
     */
    function enqueue_embed_scripts() {}
    /**
     * Prints the CSS in the embed iframe header.
     *
     * @since 4.4.0
     */
    function print_embed_styles() {}
    /**
     * Prints the JavaScript in the embed iframe header.
     *
     * @since 4.4.0
     */
    function print_embed_scripts() {}
    function _oembed_filter_feed_content($content) {}
    /**
     * Prints the necessary markup for the embed comments button.
     *
     * @since 4.4.0
     */
    function print_embed_comments_button() {}
    /**
     * Prints the necessary markup for the embed sharing button.
     *
     * @since 4.4.0
     */
    function print_embed_sharing_button() {}
    /**
     * Prints the necessary markup for the embed sharing dialog.
     *
     * @since 4.4.0
     */
    function print_embed_sharing_dialog() {}
    /**
     * Prints the necessary markup for the site title in an embed template.
     *
     * @since 4.5.0
     */
    function the_embed_site_title() {}
    function wp_filter_pre_oembed_result($result, $url, $args) {}
    function wp_schedule_single_event($timestamp, $hook, $args = array( )) {}
    function wp_schedule_event($timestamp, $recurrence, $hook, $args = array( )) {}
    function wp_reschedule_event($timestamp, $recurrence, $hook, $args = array( )) {}
    function wp_unschedule_event($timestamp, $hook, $args = array( )) {}
    function wp_clear_scheduled_hook($hook, $args = array( )) {}
    function wp_unschedule_hook($hook) {}
    function wp_get_scheduled_event($hook, $args = array( ), $timestamp = null) {}
    function wp_next_scheduled($hook, $args = array( )) {}
    function spawn_cron($gmt_time = 0) {}
    /**
     * Run scheduled callbacks or spawn cron for all scheduled events.
     *
     * Warning: This function may return Boolean FALSE, but may also return a non-Boolean
     * value which evaluates to FALSE. For information about casting to booleans see the
     * {@link https://php.net/manual/en/language.types.boolean.php PHP documentation}. Use
     * the `===` operator for testing the return value of this function.
     *
     * @since 2.1.0
     * @since 5.1.0 Return value added to indicate success or failure.
     *
     * @return bool|int On success an integer indicating number of events spawned (0 indicates no
     *                  events needed to be spawned), false if spawning fails for one or more events.
     */
    function wp_cron() {}
    /**
     * Retrieve supported event recurrence schedules.
     *
     * The default supported recurrences are 'hourly', 'twicedaily', and 'daily'. A plugin may
     * add more by hooking into the {@see 'cron_schedules'} filter. The filter accepts an array
     * of arrays. The outer array has a key that is the name of the schedule or for
     * example 'weekly'. The value is an array with two keys, one is 'interval' and
     * the other is 'display'.
     *
     * The 'interval' is a number in seconds of when the cron job should run. So for
     * 'hourly', the time is 3600 or 60*60. For weekly, the value would be
     * 60*60*24*7 or 604800. The value of 'interval' would then be 604800.
     *
     * The 'display' is the description. For the 'weekly' key, the 'display' would
     * be `__( 'Once Weekly' )`.
     *
     * For your plugin, you will be passed an array. you can easily add your
     * schedule by doing the following.
     *
     *     // Filter parameter variable name is 'array'.
     *     $array['weekly'] = array(
     *         'interval' => 604800,
     *         'display'  => __( 'Once Weekly' )
     *     );
     *
     * @since 2.1.0
     *
     * @return array
     */
    function wp_get_schedules() {}
    function wp_get_schedule($hook, $args = array( )) {}
    /**
     * Retrieve cron jobs ready to be run.
     *
     * Returns the results of _get_cron_array() limited to events ready to be run,
     * ie, with a timestamp in the past.
     *
     * @since 5.1.0
     *
     * @return array Cron jobs ready to be run.
     */
    function wp_get_ready_cron_jobs() {}
    /**
     * Retrieve cron info array option.
     *
     * @since 2.1.0
     * @access private
     *
     * @return false|array CRON info array.
     */
    function _get_cron_array() {}
    function _set_cron_array($cron) {}
    function _upgrade_cron_array($cron) {}
    function get_bookmark($bookmark, $output = OBJECT, $filter = 'raw') {}
    function get_bookmark_field($field, $bookmark, $context = 'display') {}
    function get_bookmarks($args = '') {}
    function sanitize_bookmark($bookmark, $context = 'display') {}
    function sanitize_bookmark_field($field, $value, $bookmark_id, $context) {}
    function clean_bookmark_cache($bookmark_id) {}
    /**
     * Defines Multisite upload constants.
     *
     * Exists for backward compatibility with legacy file-serving through
     * wp-includes/ms-files.php (wp-content/blogs.php in MU).
     *
     * @since 3.0.0
     */
    function ms_upload_constants() {}
    /**
     * Defines Multisite cookie constants.
     *
     * @since 3.0.0
     */
    function ms_cookie_constants() {}
    /**
     * Defines Multisite file constants.
     *
     * Exists for backward compatibility with legacy file-serving through
     * wp-includes/ms-files.php (wp-content/blogs.php in MU).
     *
     * @since 3.0.0
     */
    function ms_file_constants() {}
    /**
     * Defines Multisite subdomain constants and handles warnings and notices.
     *
     * VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool.
     *
     * On first call, the constants are checked and defined. On second call,
     * we will have translations loaded and can trigger warnings easily.
     *
     * @since 3.0.0
     *
     * @staticvar bool $subdomain_error
     * @staticvar bool $subdomain_error_warn
     */
    function ms_subdomain_constants() {}
    /**
     * Instantiate the admin bar object and set it up as a global for access elsewhere.
     *
     * UNHOOKING THIS FUNCTION WILL NOT PROPERLY REMOVE THE ADMIN BAR.
     * For that, use show_admin_bar(false) or the {@see 'show_admin_bar'} filter.
     *
     * @since 3.1.0
     * @access private
     *
     * @global WP_Admin_Bar $wp_admin_bar
     *
     * @return bool Whether the admin bar was successfully initialized.
     */
    function _wp_admin_bar_init() {}
    /**
     * Renders the admin bar to the page based on the $wp_admin_bar->menu member var.
     *
     * This is called very late on the footer actions so that it will render after
     * anything else being added to the footer.
     *
     * It includes the {@see 'admin_bar_menu'} action which should be used to hook in and
     * add new menus to the admin bar. That way you can be sure that you are adding at most
     * optimal point, right before the admin bar is rendered. This also gives you access to
     * the `$post` global, among others.
     *
     * @since 3.1.0
     *
     * @global WP_Admin_Bar $wp_admin_bar
     */
    function wp_admin_bar_render() {}
    function wp_admin_bar_wp_menu($wp_admin_bar) {}
    function wp_admin_bar_sidebar_toggle($wp_admin_bar) {}
    function wp_admin_bar_my_account_item($wp_admin_bar) {}
    function wp_admin_bar_my_account_menu($wp_admin_bar) {}
    function wp_admin_bar_site_menu($wp_admin_bar) {}
    function wp_admin_bar_customize_menu($wp_admin_bar) {}
    function wp_admin_bar_my_sites_menu($wp_admin_bar) {}
    function wp_admin_bar_shortlink_menu($wp_admin_bar) {}
    function wp_admin_bar_edit_menu($wp_admin_bar) {}
    function wp_admin_bar_new_content_menu($wp_admin_bar) {}
    function wp_admin_bar_comments_menu($wp_admin_bar) {}
    function wp_admin_bar_appearance_menu($wp_admin_bar) {}
    function wp_admin_bar_updates_menu($wp_admin_bar) {}
    function wp_admin_bar_search_menu($wp_admin_bar) {}
    function wp_admin_bar_add_secondary_groups($wp_admin_bar) {}
    /**
     * Style and scripts for the admin bar.
     *
     * @since 3.1.0
     */
    function wp_admin_bar_header() {}
    /**
     * Default admin bar callback.
     *
     * @since 3.1.0
     */
    function _admin_bar_bump_cb() {}
    function show_admin_bar($show) {}
    /**
     * Determines whether the admin bar should be showing.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 3.1.0
     *
     * @global bool   $show_admin_bar
     * @global string $pagenow
     *
     * @return bool Whether the admin bar should be showing.
     */
    function is_admin_bar_showing() {}
    function _get_admin_bar_pref($context = 'front', $user = 0) {}
    function wp_nav_menu($args = array( )) {}
    function _wp_menu_item_classes_by_context($menu_items) {}
    function walk_nav_menu_tree($items, $depth, $r) {}
    function _nav_menu_item_id_use_once($id, $item) {}
    function check_comment($author, $email, $url, $comment, $user_ip, $user_agent, $comment_type) {}
    function get_approved_comments($post_id, $args = array( )) {}
    function get_comment($comment = null, $output = OBJECT) {}
    function get_comments($args = '') {}
    /**
     * Retrieve all of the WordPress supported comment statuses.
     *
     * Comments have a limited set of valid status values, this provides the comment
     * status values and descriptions.
     *
     * @since 2.7.0
     *
     * @return array List of comment statuses.
     */
    function get_comment_statuses() {}
    function get_default_comment_status($post_type = 'post', $comment_type = 'comment') {}
    function get_lastcommentmodified($timezone = 'server') {}
    function get_comment_count($post_id = 0) {}
    function add_comment_meta($comment_id, $meta_key, $meta_value, $unique = false) {}
    function delete_comment_meta($comment_id, $meta_key, $meta_value = '') {}
    function get_comment_meta($comment_id, $key = '', $single = false) {}
    function update_comment_meta($comment_id, $meta_key, $meta_value, $prev_value = '') {}
    function wp_queue_comments_for_comment_meta_lazyload($comments) {}
    function wp_set_comment_cookies($comment, $user, $cookies_consent = true) {}
    /**
     * Sanitizes the cookies sent to the user already.
     *
     * Will only do anything if the cookies have already been created for the user.
     * Mostly used after cookies had been sent to use elsewhere.
     *
     * @since 2.0.4
     */
    function sanitize_comment_cookies() {}
    function wp_allow_comment($commentdata, $avoid_die = false) {}
    /**
     * Hooks WP's native database-based comment-flood check.
     *
     * This wrapper maintains backward compatibility with plugins that expect to
     * be able to unhook the legacy check_comment_flood_db() function from
     * 'check_comment_flood' using remove_action().
     *
     * @since 2.3.0
     * @since 4.7.0 Converted to be an add_filter() wrapper.
     */
    function check_comment_flood_db() {}
    function wp_check_comment_flood($is_flood, $ip, $email, $date, $avoid_die = false) {}
    function separate_comments($comments) {}
    function get_comment_pages_count($comments = null, $per_page = null, $threaded = null) {}
    function get_page_of_comment($comment_ID, $args = array( )) {}
    /**
     * Retrieves the maximum character lengths for the comment form fields.
     *
     * @since 4.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return array Maximum character length for the comment form fields.
     */
    function wp_get_comment_fields_max_lengths() {}
    function wp_check_comment_data_max_lengths($comment_data) {}
    function wp_blacklist_check($author, $email, $url, $comment, $user_ip, $user_agent) {}
    function wp_count_comments($post_id = 0) {}
    function wp_delete_comment($comment_id, $force_delete = false) {}
    function wp_trash_comment($comment_id) {}
    function wp_untrash_comment($comment_id) {}
    function wp_spam_comment($comment_id) {}
    function wp_unspam_comment($comment_id) {}
    function wp_get_comment_status($comment_id) {}
    function wp_transition_comment_status($new_status, $old_status, $comment) {}
    function _clear_modified_cache_on_transition_comment_status($new_status, $old_status) {}
    /**
     * Get current commenter's name, email, and URL.
     *
     * Expects cookies content to already be sanitized. User of this function might
     * wish to recheck the returned array for validity.
     *
     * @see sanitize_comment_cookies() Use to sanitize cookies
     *
     * @since 2.0.4
     *
     * @return array Comment author, email, url respectively.
     */
    function wp_get_current_commenter() {}
    /**
     * Get unapproved comment author's email.
     *
     * Used to allow the commenter to see their pending comment.
     *
     * @since 5.1.0
     *
     * @return string The unapproved comment author's email (when supplied).
     */
    function wp_get_unapproved_comment_author_email() {}
    function wp_insert_comment($commentdata) {}
    function wp_filter_comment($commentdata) {}
    function wp_throttle_comment_flood($block, $time_lastcomment, $time_newcomment) {}
    function wp_new_comment($commentdata, $avoid_die = false) {}
    function wp_new_comment_notify_moderator($comment_ID) {}
    function wp_new_comment_notify_postauthor($comment_ID) {}
    function wp_set_comment_status($comment_id, $comment_status, $wp_error = false) {}
    function wp_update_comment($commentarr) {}
    function wp_defer_comment_counting($defer = null) {}
    function wp_update_comment_count($post_id, $do_deferred = false) {}
    function wp_update_comment_count_now($post_id) {}
    function discover_pingback_server_uri($url, $deprecated = '') {}
    /**
     * Perform all pingbacks, enclosures, trackbacks, and send to pingback services.
     *
     * @since 2.1.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    function do_all_pings() {}
    function do_trackbacks($post_id) {}
    function generic_ping($post_id = 0) {}
    function pingback($content, $post_id) {}
    function privacy_ping_filter($sites) {}
    function trackback($trackback_url, $title, $excerpt, $ID) {}
    function weblog_ping($server = '', $path = '') {}
    function pingback_ping_source_uri($source_uri) {}
    function xmlrpc_pingback_error($ixr_error) {}
    function clean_comment_cache($ids) {}
    function update_comment_cache($comments, $update_meta_cache = true) {}
    function _prime_comment_caches($comment_ids, $update_meta_cache = true) {}
    function _close_comments_for_old_posts($posts, $query) {}
    function _close_comments_for_old_post($open, $post_id) {}
    function wp_handle_comment_submission($comment_data) {}
    function wp_register_comment_personal_data_exporter($exporters) {}
    function wp_comments_personal_data_exporter($email_address, $page = 1) {}
    function wp_register_comment_personal_data_eraser($erasers) {}
    function wp_comments_personal_data_eraser($email_address, $page = 1) {}
    /**
     * Sets the last changed time for the 'comment' cache group.
     *
     * @since 5.0.0
     */
    function wp_cache_set_comments_last_changed() {}
    function wp_get_nav_menu_object($menu) {}
    function is_nav_menu($menu) {}
    function register_nav_menus($locations = array( )) {}
    function unregister_nav_menu($location) {}
    function register_nav_menu($location, $description) {}
    /**
     * Retrieves all registered navigation menu locations in a theme.
     *
     * @since 3.0.0
     *
     * @global array $_wp_registered_nav_menus
     *
     * @return array Registered navigation menu locations. If none are registered, an empty array.
     */
    function get_registered_nav_menus() {}
    /**
     * Retrieves all registered navigation menu locations and the menus assigned to them.
     *
     * @since 3.0.0
     *
     * @return array Registered navigation menu locations and the menus assigned them.
     *               If none are registered, an empty array.
     */
    function get_nav_menu_locations() {}
    function has_nav_menu($location) {}
    function wp_get_nav_menu_name($location) {}
    function is_nav_menu_item($menu_item_id = 0) {}
    function wp_create_nav_menu($menu_name) {}
    function wp_delete_nav_menu($menu) {}
    function wp_update_nav_menu_object($menu_id = 0, $menu_data = array( )) {}
    function wp_update_nav_menu_item($menu_id = 0, $menu_item_db_id = 0, $menu_item_data = array( )) {}
    function wp_get_nav_menus($args = array( )) {}
    function _is_valid_nav_menu_item($item) {}
    function wp_get_nav_menu_items($menu, $args = array( )) {}
    function wp_setup_nav_menu_item($menu_item) {}
    function wp_get_associated_nav_menu_items($object_id = 0, $object_type = 'post_type', $taxonomy = '') {}
    function _wp_delete_post_menu_item($object_id = 0) {}
    function _wp_delete_tax_menu_item($object_id = 0, $tt_id, $taxonomy) {}
    function _wp_auto_add_pages_to_menu($new_status, $old_status, $post) {}
    function _wp_delete_customize_changeset_dependent_auto_drafts($post_id) {}
    /**
     * Handle menu config after theme change.
     *
     * @access private
     * @since 4.9.0
     */
    function _wp_menus_changed() {}
    function wp_map_nav_menu_locations($new_nav_menu_locations, $old_nav_menu_locations) {}
    /**
     * Output the markup for a audio tag to be used in an Underscore template
     * when data.model is passed.
     *
     * @since 3.9.0
     */
    function wp_underscore_audio_template() {}
    /**
     * Output the markup for a video tag to be used in an Underscore template
     * when data.model is passed.
     *
     * @since 3.9.0
     */
    function wp_underscore_video_template() {}
    /**
     * Prints the templates used in the media manager.
     *
     * @since 3.5.0
     *
     * @global bool $is_IE
     */
    function wp_print_media_templates() {}
    function _walk_bookmarks($bookmarks, $args = '') {}
    function wp_list_bookmarks($args = '') {}
    function wp_set_current_user($id, $name = '') {}
    /**
     * Retrieve the current user object.
     *
     * Will set the current user, if the current user is not set. The current user
     * will be set to the logged-in person. If no user is logged-in, then it will
     * set the current user to 0, which is invalid and won't have any permissions.
     *
     * @since 2.0.3
     *
     * @see _wp_get_current_user()
     * @global WP_User $current_user Checks if the current user is set.
     *
     * @return WP_User Current WP_User instance.
     */
    function wp_get_current_user() {}
    function get_userdata($user_id) {}
    function get_user_by($field, $value) {}
    function cache_users($user_ids) {}
    function wp_mail($to, $subject, $message, $headers = '', $attachments = array( )) {}
    function wp_authenticate($username, $password) {}
    /**
     * Log the current user out.
     *
     * @since 2.5.0
     */
    function wp_logout() {}
    function wp_validate_auth_cookie($cookie = '', $scheme = '') {}
    function wp_generate_auth_cookie($user_id, $expiration, $scheme = 'auth', $token = '') {}
    function wp_parse_auth_cookie($cookie = '', $scheme = '') {}
    function wp_set_auth_cookie($user_id, $remember = false, $secure = '', $token = '') {}
    /**
     * Removes all of the cookies associated with authentication.
     *
     * @since 2.5.0
     */
    function wp_clear_auth_cookie() {}
    /**
     * Determines whether the current visitor is a logged in user.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 2.0.0
     *
     * @return bool True if user is logged in, false if not logged in.
     */
    function is_user_logged_in() {}
    /**
     * Checks if a user is logged in, if not it redirects them to the login page.
     *
     * @since 1.5.0
     */
    function auth_redirect() {}
    function check_admin_referer($action = -1, $query_arg = '_wpnonce') {}
    function check_ajax_referer($action = -1, $query_arg = false, $die = true) {}
    function wp_redirect($location, $status = 302, $x_redirect_by = 'WordPress') {}
    function wp_sanitize_redirect($location) {}
    function _wp_sanitize_utf8_in_redirect($matches) {}
    function wp_safe_redirect($location, $status = 302, $x_redirect_by = 'WordPress') {}
    function wp_validate_redirect($location, $default = '') {}
    function wp_notify_postauthor($comment_id, $deprecated = null) {}
    function wp_notify_moderator($comment_id) {}
    function wp_password_change_notification($user) {}
    function wp_new_user_notification($user_id, $deprecated = null, $notify = '') {}
    /**
     * Get the time-dependent variable for nonce creation.
     *
     * A nonce has a lifespan of two ticks. Nonces in their second tick may be
     * updated, e.g. by autosave.
     *
     * @since 2.5.0
     *
     * @return float Float value rounded up to the next highest integer.
     */
    function wp_nonce_tick() {}
    function wp_verify_nonce($nonce, $action = -1) {}
    function wp_create_nonce($action = -1) {}
    function wp_salt($scheme = 'auth') {}
    function wp_hash($data, $scheme = 'auth') {}
    function wp_hash_password($password) {}
    function wp_check_password($password, $hash, $user_id = '') {}
    function wp_generate_password($length = 12, $special_chars = true, $extra_special_chars = false) {}
    function wp_rand($min = 0, $max = 0) {}
    function wp_set_password($password, $user_id) {}
    function get_avatar($id_or_email, $size = 96, $default = '', $alt = '', $args = null) {}
    function wp_text_diff($left_string, $right_string, $args = null) {}
    /**
     * Defines initial WordPress constants
     *
     * @see wp_debug_mode()
     *
     * @since 3.0.0
     *
     * @global int    $blog_id    The current site ID.
     * @global string $wp_version The WordPress version string.
     */
    function wp_initial_constants() {}
    /**
     * Defines plugin directory WordPress constants
     *
     * Defines must-use plugin directory constants, which may be overridden in the sunrise.php drop-in
     *
     * @since 3.0.0
     */
    function wp_plugin_directory_constants() {}
    /**
     * Defines cookie related WordPress constants
     *
     * Defines constants after multisite is loaded.
     *
     * @since 3.0.0
     */
    function wp_cookie_constants() {}
    /**
     * Defines SSL-related WordPress constants.
     *
     * @since 3.0.0
     */
    function wp_ssl_constants() {}
    /**
     * Defines functionality related WordPress constants
     *
     * @since 3.0.0
     */
    function wp_functionality_constants() {}
    /**
     * Defines templating related WordPress constants
     *
     * @since 3.0.0
     */
    function wp_templating_constants() {}
    function __autoload($classname) {}
    function spl_autoload_register($autoload_function, $throw = true, $prepend = false) {}
    function spl_autoload_unregister($function) {}
    /**
     * Retrieves the registered autoloader functions.
     *
     * @since 4.6.0
     *
     * @return array List of autoloader functions.
     */
    function spl_autoload_functions() {}
    function get_query_var($var, $default = '') {}
    /**
     * Retrieve the currently-queried object.
     *
     * Wrapper for WP_Query::get_queried_object().
     *
     * @since 3.1.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return object Queried object.
     */
    function get_queried_object() {}
    /**
     * Retrieve ID of the current queried object.
     *
     * Wrapper for WP_Query::get_queried_object_id().
     *
     * @since 3.1.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return int ID of the queried object.
     */
    function get_queried_object_id() {}
    function set_query_var($var, $value) {}
    function query_posts($query) {}
    /**
     * Destroys the previous query and sets up a new query.
     *
     * This should be used after query_posts() and before another query_posts().
     * This will remove obscure bugs that occur when the previous WP_Query object
     * is not destroyed properly before another is set up.
     *
     * @since 2.3.0
     *
     * @global WP_Query $wp_query     Global WP_Query instance.
     * @global WP_Query $wp_the_query Copy of the global WP_Query instance created during wp_reset_query().
     */
    function wp_reset_query() {}
    /**
     * After looping through a separate query, this function restores
     * the $post global to the current post in the main query.
     *
     * @since 3.0.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     */
    function wp_reset_postdata() {}
    /**
     * Determines whether the query is for an existing archive page.
     *
     * Month, Year, Category, Author, Post Type archive...
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_archive() {}
    function is_post_type_archive($post_types = '') {}
    function is_attachment($attachment = '') {}
    function is_author($author = '') {}
    function is_category($category = '') {}
    function is_tag($tag = '') {}
    function is_tax($taxonomy = '', $term = '') {}
    /**
     * Determines whether the query is for an existing date archive.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_date() {}
    /**
     * Determines whether the query is for an existing day archive.
     *
     * A conditional check to test whether the page is a date-based archive page displaying posts for the current day.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_day() {}
    function is_feed($feeds = '') {}
    /**
     * Is the query for a comments feed?
     *
     * @since 3.0.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_comment_feed() {}
    /**
     * Determines whether the query is for the front page of the site.
     *
     * This is for what is displayed at your site's main URL.
     *
     * Depends on the site's "Front page displays" Reading Settings 'show_on_front' and 'page_on_front'.
     *
     * If you set a static page for the front page of your site, this function will return
     * true when viewing that page.
     *
     * Otherwise the same as @see is_home()
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 2.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool True, if front of site.
     */
    function is_front_page() {}
    /**
     * Determines whether the query is for the blog homepage.
     *
     * The blog homepage is the page that shows the time-based blog content of the site.
     *
     * is_home() is dependent on the site's "Front page displays" Reading Settings 'show_on_front'
     * and 'page_for_posts'.
     *
     * If a static page is set for the front page of the site, this function will return true only
     * on the page you set as the "Posts page".
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @see is_front_page()
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool True if blog view homepage, otherwise false.
     */
    function is_home() {}
    /**
     * Determines whether the query is for an existing month archive.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_month() {}
    function is_page($page = '') {}
    /**
     * Determines whether the query is for paged results and not for the first page.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_paged() {}
    /**
     * Determines whether the query is for a post or page preview.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 2.0.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_preview() {}
    /**
     * Is the query for the robots file?
     *
     * @since 2.1.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_robots() {}
    /**
     * Determines whether the query is for a search.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_search() {}
    function is_single($post = '') {}
    function is_singular($post_types = '') {}
    /**
     * Determines whether the query is for a specific time.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_time() {}
    /**
     * Determines whether the query is for a trackback endpoint call.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_trackback() {}
    /**
     * Determines whether the query is for an existing year archive.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_year() {}
    /**
     * Determines whether the query has resulted in a 404 (returns no results).
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_404() {}
    /**
     * Is the query for an embedded post?
     *
     * @since 4.4.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool Whether we're in an embedded post or not.
     */
    function is_embed() {}
    /**
     * Determines whether the query is the main query.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 3.3.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function is_main_query() {}
    /**
     * Whether current WordPress query has results to loop over.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function have_posts() {}
    /**
     * Determines whether the caller is in the Loop.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 2.0.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool True if caller is within loop, false if loop hasn't started or ended.
     */
    function in_the_loop() {}
    /**
     * Rewind the loop posts.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     */
    function rewind_posts() {}
    /**
     * Iterate the post index in the loop.
     *
     * @since 1.5.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     */
    function the_post() {}
    /**
     * Whether there are comments to loop over.
     *
     * @since 2.2.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return bool
     */
    function have_comments() {}
    /**
     * Iterate comment index in the comment loop.
     *
     * @since 2.2.0
     *
     * @global WP_Query $wp_query Global WP_Query instance.
     *
     * @return object
     */
    function the_comment() {}
    /**
     * Redirect old slugs to the correct permalink.
     *
     * Attempts to find the current slug from the past slugs.
     *
     * @since 2.1.0
     */
    function wp_old_slug_redirect() {}
    function _find_post_by_old_slug($post_type) {}
    function _find_post_by_old_date($post_type) {}
    function setup_postdata($post) {}
    function _($string) {}
    function _wp_can_use_pcre_u($set = null) {}
    if (!function_exists('mb_substr')) {
        function mb_substr($str, $start, $length = null, $encoding = null) {}
    }

    function _mb_substr($str, $start, $length = null, $encoding = null) {}
    if (!function_exists('mb_strlen')) {
        function mb_strlen($str, $encoding = null) {}
    }

    function _mb_strlen($str, $encoding = null) {}
    function hash_hmac($algo, $data, $key, $raw_output = false) {}
    function _hash_hmac($algo, $data, $key, $raw_output = false) {}
    function json_decode($string, $assoc_array = false) {}
    function _json_decode_object_helper($data) {}
    function hash_equals($a, $b) {}
    /**
     * Retrieves the error string of the last json_encode() or json_decode() call.
     *
     * @since 4.4.0
     *
     * @internal This is a compatibility function for PHP <5.5
     *
     * @return bool|string Returns the error message on success, "No Error" if no error has occurred,
     *                     or false on failure.
     */
    function json_last_error_msg() {}
    if (!function_exists('array_replace_recursive')) {
        function array_replace_recursive($base = array( ), $replacements = array( )) {}
    }

    function is_countable($var) {}
    function is_iterable($var) {}
    function set_current_user($id, $name = '') {}
    /**
     * Populate global variables with information about the currently logged in user.
     *
     * @since 0.71
     * @deprecated 4.5.0 Use wp_get_current_user()
     * @see wp_get_current_user()
     *
     * @return bool|WP_User False on XMLRPC Request and invalid auth cookie, WP_User instance otherwise.
     */
    function get_currentuserinfo() {}
    function get_userdatabylogin($user_login) {}
    function get_user_by_email($email) {}
    function wp_setcookie($username, $password = '', $already_md5 = false, $home = '', $siteurl = '', $remember = false) {}
    /**
     * Clears the authentication cookie, logging the user out. This function is deprecated.
     *
     * @since 1.5.0
     * @deprecated 2.5.0 Use wp_clear_auth_cookie()
     * @see wp_clear_auth_cookie()
     */
    function wp_clearcookie() {}
    /**
     * Gets the user cookie login. This function is deprecated.
     *
     * This function is deprecated and should no longer be extended as it won't be
     * used anywhere in WordPress. Also, plugins shouldn't use it either.
     *
     * @since 2.0.3
     * @deprecated 2.5.0
     *
     * @return bool Always returns false
     */
    function wp_get_cookie_login() {}
    function wp_login($username, $password, $deprecated = '') {}
    /**
     * Retrieves the current locale.
     *
     * If the locale is set, then it will filter the locale in the {@see 'locale'}
     * filter hook and return the value.
     *
     * If the locale is not set already, then the WPLANG constant is used if it is
     * defined. Then it is filtered through the {@see 'locale'} filter hook and
     * the value for the locale global set and the locale is returned.
     *
     * The process to get the locale should only be done once, but the locale will
     * always be filtered using the {@see 'locale'} hook.
     *
     * @since 1.5.0
     *
     * @global string $locale
     * @global string $wp_local_package
     *
     * @return string The locale of the blog or from the {@see 'locale'} hook.
     */
    function get_locale() {}
    function get_user_locale($user_id = 0) {}
    /**
     * Determine the current locale desired for the request.
     *
     * @since 5.0.0
     *
     * @global string $pagenow
     *
     * @return string The determined locale.
     */
    function determine_locale() {}
    function translate($text, $domain = 'default') {}
    function before_last_bar($string) {}
    function translate_with_gettext_context($text, $context, $domain = 'default') {}
    function esc_attr__($text, $domain = 'default') {}
    function esc_html__($text, $domain = 'default') {}
    function _e($text, $domain = 'default') {}
    function esc_attr_e($text, $domain = 'default') {}
    function esc_html_e($text, $domain = 'default') {}
    function _ex($text, $context, $domain = 'default') {}
    function esc_attr_x($text, $context, $domain = 'default') {}
    function esc_html_x($text, $context, $domain = 'default') {}
    function _n($single, $plural, $number, $domain = 'default') {}
    function _nx($single, $plural, $number, $context, $domain = 'default') {}
    function _n_noop($singular, $plural, $domain = null) {}
    function _nx_noop($singular, $plural, $context, $domain = null) {}
    function translate_nooped_plural($nooped_plural, $count, $domain = 'default') {}
    function load_textdomain($domain, $mofile) {}
    function unload_textdomain($domain) {}
    function load_default_textdomain($locale = null) {}
    function load_plugin_textdomain($domain, $deprecated = false, $plugin_rel_path = false) {}
    function load_muplugin_textdomain($domain, $mu_plugin_rel_path = '') {}
    function load_theme_textdomain($domain, $path = false) {}
    function load_child_theme_textdomain($domain, $path = false) {}
    function load_script_textdomain($handle, $domain = 'default', $path = null) {}
    function load_script_translations($file, $handle, $domain) {}
    function _load_textdomain_just_in_time($domain) {}
    function _get_path_to_translation($domain, $reset = false) {}
    function _get_path_to_translation_from_lang_dir($domain) {}
    function get_translations_for_domain($domain) {}
    function is_textdomain_loaded($domain) {}
    function translate_user_role($name) {}
    function get_available_languages($dir = null) {}
    function wp_get_installed_translations($type) {}
    function wp_get_pomo_file_data($po_file) {}
    function wp_dropdown_languages($args = array( )) {}
    /**
     * Determines whether the current locale is right-to-left (RTL).
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 3.0.0
     *
     * @global WP_Locale $wp_locale
     *
     * @return bool Whether locale is RTL.
     */
    function is_rtl() {}
    function switch_to_locale($locale) {}
    /**
     * Restores the translations according to the previous locale.
     *
     * @since 4.7.0
     *
     * @global WP_Locale_Switcher $wp_locale_switcher
     *
     * @return string|false Locale on success, false on error.
     */
    function restore_previous_locale() {}
    /**
     * Restores the translations according to the original locale.
     *
     * @since 4.7.0
     *
     * @global WP_Locale_Switcher $wp_locale_switcher
     *
     * @return string|false Locale on success, false on error.
     */
    function restore_current_locale() {}
    /**
     * Whether switch_to_locale() is in effect.
     *
     * @since 4.7.0
     *
     * @global WP_Locale_Switcher $wp_locale_switcher
     *
     * @return bool True if the locale has been switched, false otherwise.
     */
    function is_locale_switched() {}
    function get_query_template($type, $templates = array( )) {}
    /**
     * Retrieve path of index template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'index'.
     *
     * @since 3.0.0
     *
     * @see get_query_template()
     *
     * @return string Full path to index template file.
     */
    function get_index_template() {}
    /**
     * Retrieve path of 404 template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is '404'.
     *
     * @since 1.5.0
     *
     * @see get_query_template()
     *
     * @return string Full path to 404 template file.
     */
    function get_404_template() {}
    /**
     * Retrieve path of archive template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'archive'.
     *
     * @since 1.5.0
     *
     * @see get_query_template()
     *
     * @return string Full path to archive template file.
     */
    function get_archive_template() {}
    /**
     * Retrieve path of post type archive template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'archive'.
     *
     * @since 3.7.0
     *
     * @see get_archive_template()
     *
     * @return string Full path to archive template file.
     */
    function get_post_type_archive_template() {}
    /**
     * Retrieve path of author template in current or parent template.
     *
     * The hierarchy for this template looks like:
     *
     * 1. author-{nicename}.php
     * 2. author-{id}.php
     * 3. author.php
     *
     * An example of this is:
     *
     * 1. author-john.php
     * 2. author-1.php
     * 3. author.php
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'author'.
     *
     * @since 1.5.0
     *
     * @see get_query_template()
     *
     * @return string Full path to author template file.
     */
    function get_author_template() {}
    /**
     * Retrieve path of category template in current or parent template.
     *
     * The hierarchy for this template looks like:
     *
     * 1. category-{slug}.php
     * 2. category-{id}.php
     * 3. category.php
     *
     * An example of this is:
     *
     * 1. category-news.php
     * 2. category-2.php
     * 3. category.php
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'category'.
     *
     * @since 1.5.0
     * @since 4.7.0 The decoded form of `category-{slug}.php` was added to the top of the
     *              template hierarchy when the category slug contains multibyte characters.
     *
     * @see get_query_template()
     *
     * @return string Full path to category template file.
     */
    function get_category_template() {}
    /**
     * Retrieve path of tag template in current or parent template.
     *
     * The hierarchy for this template looks like:
     *
     * 1. tag-{slug}.php
     * 2. tag-{id}.php
     * 3. tag.php
     *
     * An example of this is:
     *
     * 1. tag-wordpress.php
     * 2. tag-3.php
     * 3. tag.php
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'tag'.
     *
     * @since 2.3.0
     * @since 4.7.0 The decoded form of `tag-{slug}.php` was added to the top of the
     *              template hierarchy when the tag slug contains multibyte characters.
     *
     * @see get_query_template()
     *
     * @return string Full path to tag template file.
     */
    function get_tag_template() {}
    /**
     * Retrieve path of custom taxonomy term template in current or parent template.
     *
     * The hierarchy for this template looks like:
     *
     * 1. taxonomy-{taxonomy_slug}-{term_slug}.php
     * 2. taxonomy-{taxonomy_slug}.php
     * 3. taxonomy.php
     *
     * An example of this is:
     *
     * 1. taxonomy-location-texas.php
     * 2. taxonomy-location.php
     * 3. taxonomy.php
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'taxonomy'.
     *
     * @since 2.5.0
     * @since 4.7.0 The decoded form of `taxonomy-{taxonomy_slug}-{term_slug}.php` was added to the top of the
     *              template hierarchy when the term slug contains multibyte characters.
     *
     * @see get_query_template()
     *
     * @return string Full path to custom taxonomy term template file.
     */
    function get_taxonomy_template() {}
    /**
     * Retrieve path of date template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'date'.
     *
     * @since 1.5.0
     *
     * @see get_query_template()
     *
     * @return string Full path to date template file.
     */
    function get_date_template() {}
    /**
     * Retrieve path of home template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'home'.
     *
     * @since 1.5.0
     *
     * @see get_query_template()
     *
     * @return string Full path to home template file.
     */
    function get_home_template() {}
    /**
     * Retrieve path of front page template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'frontpage'.
     *
     * @since 3.0.0
     *
     * @see get_query_template()
     *
     * @return string Full path to front page template file.
     */
    function get_front_page_template() {}
    /**
     * Retrieve path of page template in current or parent template.
     *
     * The hierarchy for this template looks like:
     *
     * 1. {Page Template}.php
     * 2. page-{page_name}.php
     * 3. page-{id}.php
     * 4. page.php
     *
     * An example of this is:
     *
     * 1. page-templates/full-width.php
     * 2. page-about.php
     * 3. page-4.php
     * 4. page.php
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'page'.
     *
     * @since 1.5.0
     * @since 4.7.0 The decoded form of `page-{page_name}.php` was added to the top of the
     *              template hierarchy when the page name contains multibyte characters.
     *
     * @see get_query_template()
     *
     * @return string Full path to page template file.
     */
    function get_page_template() {}
    /**
     * Retrieve path of search template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'search'.
     *
     * @since 1.5.0
     *
     * @see get_query_template()
     *
     * @return string Full path to search template file.
     */
    function get_search_template() {}
    /**
     * Retrieve path of single template in current or parent template. Applies to single Posts,
     * single Attachments, and single custom post types.
     *
     * The hierarchy for this template looks like:
     *
     * 1. {Post Type Template}.php
     * 2. single-{post_type}-{post_name}.php
     * 3. single-{post_type}.php
     * 4. single.php
     *
     * An example of this is:
     *
     * 1. templates/full-width.php
     * 2. single-post-hello-world.php
     * 3. single-post.php
     * 4. single.php
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'single'.
     *
     * @since 1.5.0
     * @since 4.4.0 `single-{post_type}-{post_name}.php` was added to the top of the template hierarchy.
     * @since 4.7.0 The decoded form of `single-{post_type}-{post_name}.php` was added to the top of the
     *              template hierarchy when the post name contains multibyte characters.
     * @since 4.7.0 `{Post Type Template}.php` was added to the top of the template hierarchy.
     *
     * @see get_query_template()
     *
     * @return string Full path to single template file.
     */
    function get_single_template() {}
    /**
     * Retrieves an embed template path in the current or parent template.
     *
     * The hierarchy for this template looks like:
     *
     * 1. embed-{post_type}-{post_format}.php
     * 2. embed-{post_type}.php
     * 3. embed.php
     *
     * An example of this is:
     *
     * 1. embed-post-audio.php
     * 2. embed-post.php
     * 3. embed.php
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'embed'.
     *
     * @since 4.5.0
     *
     * @see get_query_template()
     *
     * @return string Full path to embed template file.
     */
    function get_embed_template() {}
    /**
     * Retrieves the path of the singular template in current or parent template.
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'singular'.
     *
     * @since 4.3.0
     *
     * @see get_query_template()
     *
     * @return string Full path to singular template file
     */
    function get_singular_template() {}
    /**
     * Retrieve path of attachment template in current or parent template.
     *
     * The hierarchy for this template looks like:
     *
     * 1. {mime_type}-{sub_type}.php
     * 2. {sub_type}.php
     * 3. {mime_type}.php
     * 4. attachment.php
     *
     * An example of this is:
     *
     * 1. image-jpeg.php
     * 2. jpeg.php
     * 3. image.php
     * 4. attachment.php
     *
     * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
     * and {@see '$type_template'} dynamic hooks, where `$type` is 'attachment'.
     *
     * @since 2.0.0
     * @since 4.3.0 The order of the mime type logic was reversed so the hierarchy is more logical.
     *
     * @see get_query_template()
     *
     * @global array $posts
     *
     * @return string Full path to attachment template file.
     */
    function get_attachment_template() {}
    function locate_template($template_names, $load = false, $require_once = true) {}
    function load_template($_template_file, $require_once = true) {}
    /**
     * Retrieve additional image sizes.
     *
     * @since 4.7.0
     *
     * @global array $_wp_additional_image_sizes
     *
     * @return array Additional images size data.
     */
    function wp_get_additional_image_sizes() {}
    function image_constrain_size_for_editor($width, $height, $size = 'medium', $context = null) {}
    function image_hwstring($width, $height) {}
    function image_downsize($id, $size = 'medium') {}
    function add_image_size($name, $width = 0, $height = 0, $crop = false) {}
    function has_image_size($name) {}
    function remove_image_size($name) {}
    function set_post_thumbnail_size($width = 0, $height = 0, $crop = false) {}
    function get_image_tag($id, $alt, $title, $align, $size = 'medium') {}
    function wp_constrain_dimensions($current_width, $current_height, $max_width = 0, $max_height = 0) {}
    function image_resize_dimensions($orig_w, $orig_h, $dest_w, $dest_h, $crop = false) {}
    function image_make_intermediate_size($file, $width, $height, $crop = false) {}
    function wp_image_matches_ratio($source_width, $source_height, $target_width, $target_height) {}
    function image_get_intermediate_size($post_id, $size = 'thumbnail') {}
    /**
     * Gets the available intermediate image sizes.
     *
     * @since 3.0.0
     *
     * @return array Returns a filtered array of image size strings.
     */
    function get_intermediate_image_sizes() {}
    function wp_get_attachment_image_src($attachment_id, $size = 'thumbnail', $icon = false) {}
    function wp_get_attachment_image($attachment_id, $size = 'thumbnail', $icon = false, $attr = '') {}
    function wp_get_attachment_image_url($attachment_id, $size = 'thumbnail', $icon = false) {}
    function _wp_get_attachment_relative_path($file) {}
    function _wp_get_image_size_from_meta($size_name, $image_meta) {}
    function wp_get_attachment_image_srcset($attachment_id, $size = 'medium', $image_meta = null) {}
    function wp_calculate_image_srcset($size_array, $image_src, $image_meta, $attachment_id = 0) {}
    function wp_get_attachment_image_sizes($attachment_id, $size = 'medium', $image_meta = null) {}
    function wp_calculate_image_sizes($size, $image_src = null, $image_meta = null, $attachment_id = 0) {}
    function wp_make_content_images_responsive($content) {}
    function wp_image_add_srcset_and_sizes($image, $image_meta, $attachment_id) {}
    function _wp_post_thumbnail_class_filter($attr) {}
    function _wp_post_thumbnail_class_filter_add($attr) {}
    function _wp_post_thumbnail_class_filter_remove($attr) {}
    function img_caption_shortcode($attr, $content = null) {}
    function gallery_shortcode($attr) {}
    /**
     * Outputs the templates used by playlists.
     *
     * @since 3.9.0
     */
    function wp_underscore_playlist_templates() {}
    function wp_playlist_scripts($type) {}
    function wp_playlist_shortcode($attr) {}
    function wp_mediaelement_fallback($url) {}
    /**
     * Returns a filtered list of WP-supported audio formats.
     *
     * @since 3.6.0
     *
     * @return array Supported audio formats.
     */
    function wp_get_audio_extensions() {}
    function wp_get_attachment_id3_keys($attachment, $context = 'display') {}
    function wp_audio_shortcode($attr, $content = '') {}
    /**
     * Returns a filtered list of WP-supported video formats.
     *
     * @since 3.6.0
     *
     * @return array List of supported video formats.
     */
    function wp_get_video_extensions() {}
    function wp_video_shortcode($attr, $content = '') {}
    function previous_image_link($size = 'thumbnail', $text = false) {}
    function next_image_link($size = 'thumbnail', $text = false) {}
    function adjacent_image_link($prev = true, $size = 'thumbnail', $text = false) {}
    function get_attachment_taxonomies($attachment, $output = 'names') {}
    function get_taxonomies_for_attachments($output = 'names') {}
    function wp_imagecreatetruecolor($width, $height) {}
    function wp_expand_dimensions($example_width, $example_height, $max_width, $max_height) {}
    /**
     * Determines the maximum upload size allowed in php.ini.
     *
     * @since 2.5.0
     *
     * @return int Allowed upload size.
     */
    function wp_max_upload_size() {}
    function wp_get_image_editor($path, $args = array( )) {}
    function wp_image_editor_supports($args = array( )) {}
    function _wp_image_editor_choose($args = array( )) {}
    /**
     * Prints default Plupload arguments.
     *
     * @since 3.4.0
     */
    function wp_plupload_default_settings() {}
    function wp_prepare_attachment_for_js($attachment) {}
    function wp_enqueue_media($args = array( )) {}
    function get_attached_media($type, $post = 0) {}
    function get_media_embedded_in_content($content, $types = null) {}
    function get_post_galleries($post, $html = true) {}
    function get_post_gallery($post = 0, $html = true) {}
    function get_post_galleries_images($post = 0) {}
    function get_post_gallery_images($post = 0) {}
    function wp_maybe_generate_attachment_metadata($attachment) {}
    function attachment_url_to_postid($url) {}
    /**
     * Returns the URLs for CSS files used in an iframe-sandbox'd TinyMCE media view.
     *
     * @since 4.0.0
     *
     * @return array The relevant CSS file URLs.
     */
    function wpview_media_sandbox_styles() {}
    function wp_register_media_personal_data_exporter($exporters) {}
    function wp_media_personal_data_exporter($email_address, $page = 1) {}
    if (!function_exists('stripos')) {
        function stripos($haystack, $needle) {}
    }

    /**
     * Initialize $wp_styles if it has not been set.
     *
     * @global WP_Styles $wp_styles
     *
     * @since 4.2.0
     *
     * @return WP_Styles WP_Styles instance.
     */
    function wp_styles() {}
    function wp_print_styles($handles = false) {}
    function wp_add_inline_style($handle, $data) {}
    function wp_register_style($handle, $src, $deps = array( ), $ver = false, $media = 'all') {}
    function wp_deregister_style($handle) {}
    function wp_enqueue_style($handle, $src = '', $deps = array( ), $ver = false, $media = 'all') {}
    function wp_dequeue_style($handle) {}
    function wp_style_is($handle, $list = 'enqueued') {}
    function wp_style_add_data($handle, $key, $value) {}
    function wp_register_tinymce_scripts($scripts, $force_uncompressed = false) {}
    function wp_default_packages_vendor($scripts) {}
    function wp_get_script_polyfill($scripts, $tests) {}
    function wp_default_packages_scripts($scripts) {}
    function wp_default_packages_inline_scripts($scripts) {}
    /**
     * Adds inline scripts required for the TinyMCE in the block editor.
     *
     * These TinyMCE init settings are used to extend and override the default settings
     * from `_WP_Editors::default_settings()` for the Classic block.
     *
     * @since 5.0.0
     *
     * @global WP_Scripts $wp_scripts
     */
    function wp_tinymce_inline_scripts() {}
    function wp_default_packages($scripts) {}
    function wp_scripts_get_suffix($type = '') {}
    function wp_default_scripts($scripts) {}
    function wp_default_styles($styles) {}
    function wp_prototype_before_jquery($js_array) {}
    /**
     * Load localized data on print rather than initialization.
     *
     * These localizations require information that may not be loaded even by init.
     *
     * @since 2.5.0
     */
    function wp_just_in_time_script_localization() {}
    /**
     * Localizes the jQuery UI datepicker.
     *
     * @since 4.6.0
     *
     * @link https://api.jqueryui.com/datepicker/#options
     *
     * @global WP_Locale $wp_locale The WordPress date and time locale object.
     */
    function wp_localize_jquery_ui_datepicker() {}
    /**
     * Localizes community events data that needs to be passed to dashboard.js.
     *
     * @since 4.8.0
     */
    function wp_localize_community_events() {}
    function wp_style_loader_src($src, $handle) {}
    /**
     * Prints the script queue in the HTML head on admin pages.
     *
     * Postpones the scripts that were queued for the footer.
     * print_footer_scripts() is called in the footer to print these scripts.
     *
     * @since 2.8.0
     *
     * @see wp_print_scripts()
     *
     * @global bool $concatenate_scripts
     *
     * @return array
     */
    function print_head_scripts() {}
    /**
     * Prints the scripts that were queued for the footer or too late for the HTML head.
     *
     * @since 2.8.0
     *
     * @global WP_Scripts $wp_scripts
     * @global bool       $concatenate_scripts
     *
     * @return array
     */
    function print_footer_scripts() {}
    /**
     * Print scripts (internal use only)
     *
     * @ignore
     *
     * @global WP_Scripts $wp_scripts
     * @global bool       $compress_scripts
     */
    function _print_scripts() {}
    /**
     * Prints the script queue in the HTML head on the front end.
     *
     * Postpones the scripts that were queued for the footer.
     * wp_print_footer_scripts() is called in the footer to print these scripts.
     *
     * @since 2.8.0
     *
     * @global WP_Scripts $wp_scripts
     *
     * @return array
     */
    function wp_print_head_scripts() {}
    /**
     * Private, for use in *_footer_scripts hooks
     *
     * @since 3.3.0
     */
    function _wp_footer_scripts() {}
    /**
     * Hooks to print the scripts and styles in the footer.
     *
     * @since 2.8.0
     */
    function wp_print_footer_scripts() {}
    /**
     * Wrapper for do_action('wp_enqueue_scripts')
     *
     * Allows plugins to queue scripts for the front end using wp_enqueue_script().
     * Runs first in wp_head() where all is_home(), is_page(), etc. functions are available.
     *
     * @since 2.8.0
     */
    function wp_enqueue_scripts() {}
    /**
     * Prints the styles queue in the HTML head on admin pages.
     *
     * @since 2.8.0
     *
     * @global bool $concatenate_scripts
     *
     * @return array
     */
    function print_admin_styles() {}
    /**
     * Prints the styles that were queued too late for the HTML head.
     *
     * @since 3.3.0
     *
     * @global WP_Styles $wp_styles
     * @global bool      $concatenate_scripts
     *
     * @return array|void
     */
    function print_late_styles() {}
    /**
     * Print styles (internal use only)
     *
     * @ignore
     * @since 3.3.0
     *
     * @global bool $compress_css
     */
    function _print_styles() {}
    /**
     * Determine the concatenation and compression settings for scripts and styles.
     *
     * @since 2.8.0
     *
     * @global bool $concatenate_scripts
     * @global bool $compress_scripts
     * @global bool $compress_css
     */
    function script_concat_settings() {}
    /**
     * Handles the enqueueing of block scripts and styles that are common to both
     * the editor and the front-end.
     *
     * @since 5.0.0
     *
     * @global WP_Screen $current_screen
     */
    function wp_common_block_scripts_and_styles() {}
    /**
     * Enqueues registered block scripts and styles, depending on current rendered
     * context (only enqueuing editor scripts while in context of the editor).
     *
     * @since 5.0.0
     *
     * @global WP_Screen $current_screen
     */
    function wp_enqueue_registered_block_scripts_and_styles() {}
    function get_header($name = null) {}
    function get_footer($name = null) {}
    function get_sidebar($name = null) {}
    function get_template_part($slug, $name = null) {}
    function get_search_form($echo = true) {}
    function wp_loginout($redirect = '', $echo = true) {}
    function wp_logout_url($redirect = '') {}
    function wp_login_url($redirect = '', $force_reauth = false) {}
    /**
     * Returns the URL that allows the user to register on the site.
     *
     * @since 3.6.0
     *
     * @return string User registration URL.
     */
    function wp_registration_url() {}
    function wp_login_form($args = array( )) {}
    function wp_lostpassword_url($redirect = '') {}
    function wp_register($before = '<li>', $after = '</li>', $echo = true) {}
    /**
     * Theme container function for the 'wp_meta' action.
     *
     * The {@see 'wp_meta'} action can have several purposes, depending on how you use it,
     * but one purpose might have been to allow for theme switching.
     *
     * @since 1.5.0
     *
     * @link https://core.trac.wordpress.org/ticket/1458 Explanation of 'wp_meta' action.
     */
    function wp_meta() {}
    function bloginfo($show = '') {}
    function get_site_icon_url($size = 512, $url = '', $blog_id = 0) {}
    function site_icon_url($size = 512, $url = '', $blog_id = 0) {}
    function has_site_icon($blog_id = 0) {}
    function has_custom_logo($blog_id = 0) {}
    function get_custom_logo($blog_id = 0) {}
    function the_custom_logo($blog_id = 0) {}
    /**
     * Returns document title for the current page.
     *
     * @since 4.4.0
     *
     * @global int $page  Page number of a single post.
     * @global int $paged Page number of a list of posts.
     *
     * @return string Tag with the document title.
     */
    function wp_get_document_title() {}
    /**
     * Displays title tag with content.
     *
     * @ignore
     * @since 4.1.0
     * @since 4.4.0 Improved title output replaced `wp_title()`.
     * @access private
     */
    function _wp_render_title_tag() {}
    function wp_title($sep = '&raquo;', $display = true, $seplocation = '') {}
    function single_post_title($prefix = '', $display = true) {}
    function post_type_archive_title($prefix = '', $display = true) {}
    function single_cat_title($prefix = '', $display = true) {}
    function single_tag_title($prefix = '', $display = true) {}
    function single_term_title($prefix = '', $display = true) {}
    function single_month_title($prefix = '', $display = true) {}
    function the_archive_title($before = '', $after = '') {}
    /**
     * Retrieve the archive title based on the queried object.
     *
     * @since 4.1.0
     *
     * @return string Archive title.
     */
    function get_the_archive_title() {}
    function the_archive_description($before = '', $after = '') {}
    /**
     * Retrieves the description for an author, post type, or term archive.
     *
     * @since 4.1.0
     * @since 4.7.0 Added support for author archives.
     * @since 4.9.0 Added support for post type archives.
     *
     * @see term_description()
     *
     * @return string Archive description.
     */
    function get_the_archive_description() {}
    /**
     * Retrieves the description for a post type archive.
     *
     * @since 4.9.0
     *
     * @return string The post type description.
     */
    function get_the_post_type_description() {}
    function get_archives_link($url, $text, $format = 'html', $before = '', $after = '') {}
    function wp_get_archives($args = '') {}
    function calendar_week_mod($num) {}
    function get_calendar($initial = true, $echo = true) {}
    /**
     * Purge the cached results of get_calendar.
     *
     * @see get_calendar
     * @since 2.1.0
     */
    function delete_get_calendar_cache() {}
    /**
     * Display all of the allowed tags in HTML format with attributes.
     *
     * This is useful for displaying in the comment area, which elements and
     * attributes are supported. As well as any plugins which want to display it.
     *
     * @since 1.0.1
     *
     * @global array $allowedtags
     *
     * @return string HTML allowed tags entity encoded.
     */
    function allowed_tags() {}
    /**
     * Outputs the date in iso8601 format for xml files.
     *
     * @since 1.0.0
     */
    function the_date_xml() {}
    function the_date($d = '', $before = '', $after = '', $echo = true) {}
    function get_the_date($d = '', $post = null) {}
    function the_modified_date($d = '', $before = '', $after = '', $echo = true) {}
    function get_the_modified_date($d = '', $post = null) {}
    function the_time($d = '') {}
    function get_the_time($d = '', $post = null) {}
    function get_post_time($d = 'U', $gmt = false, $post = null, $translate = false) {}
    function the_modified_time($d = '') {}
    function get_the_modified_time($d = '', $post = null) {}
    function get_post_modified_time($d = 'U', $gmt = false, $post = null, $translate = false) {}
    /**
     * Display the weekday on which the post was written.
     *
     * @since 0.71
     *
     * @global WP_Locale $wp_locale
     */
    function the_weekday() {}
    function the_weekday_date($before = '', $after = '') {}
    /**
     * Fire the wp_head action.
     *
     * See {@see 'wp_head'}.
     *
     * @since 1.2.0
     */
    function wp_head() {}
    /**
     * Fire the wp_footer action.
     *
     * See {@see 'wp_footer'}.
     *
     * @since 1.5.1
     */
    function wp_footer() {}
    function feed_links($args = array( )) {}
    function feed_links_extra($args = array( )) {}
    /**
     * Display the link to the Really Simple Discovery service endpoint.
     *
     * @link http://archipelago.phrasewise.com/rsd
     * @since 2.0.0
     */
    function rsd_link() {}
    /**
     * Display the link to the Windows Live Writer manifest file.
     *
     * @link https://msdn.microsoft.com/en-us/library/bb463265.aspx
     * @since 2.3.1
     */
    function wlwmanifest_link() {}
    /**
     * Displays a noindex meta tag if required by the blog configuration.
     *
     * If a blog is marked as not being public then the noindex meta tag will be
     * output to tell web robots not to index the page content. Add this to the
     * {@see 'wp_head'} action.
     *
     * Typical usage is as a {@see 'wp_head'} callback:
     *
     *     add_action( 'wp_head', 'noindex' );
     *
     * @see wp_no_robots
     *
     * @since 2.1.0
     */
    function noindex() {}
    /**
     * Display a noindex meta tag.
     *
     * Outputs a noindex meta tag that tells web robots not to index the page content.
     * Typical usage is as a wp_head callback. add_action( 'wp_head', 'wp_no_robots' );
     *
     * @since 3.3.0
     */
    function wp_no_robots() {}
    /**
     * Display a noindex,noarchive meta tag and referrer origin-when-cross-origin meta tag.
     *
     * Outputs a noindex,noarchive meta tag that tells web robots not to index or cache the page content.
     * Outputs a referrer origin-when-cross-origin meta tag that tells the browser not to send the full
     * url as a referrer to other sites when cross-origin assets are loaded.
     *
     * Typical usage is as a wp_head callback. add_action( 'wp_head', 'wp_sensitive_page_meta' );
     *
     * @since 5.0.1
     */
    function wp_sensitive_page_meta() {}
    /**
     * Display site icon meta tags.
     *
     * @since 4.3.0
     *
     * @link https://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#rel-icon HTML5 specification link icon.
     */
    function wp_site_icon() {}
    /**
     * Prints resource hints to browsers for pre-fetching, pre-rendering
     * and pre-connecting to web sites.
     *
     * Gives hints to browsers to prefetch specific pages or render them
     * in the background, to perform DNS lookups or to begin the connection
     * handshake (DNS, TCP, TLS) in the background.
     *
     * These performance improving indicators work by using `<link rel"…">`.
     *
     * @since 4.6.0
     */
    function wp_resource_hints() {}
    /**
     * Retrieves a list of unique hosts of all enqueued scripts and styles.
     *
     * @since 4.6.0
     *
     * @return array A list of unique hosts of enqueued scripts and styles.
     */
    function wp_dependencies_unique_hosts() {}
    /**
     * Whether the user can access the visual editor.
     *
     * Checks if the user can access the visual editor and that it's supported by the user's browser.
     *
     * @since 2.0.0
     *
     * @global bool $wp_rich_edit Whether the user can access the visual editor.
     * @global bool $is_gecko     Whether the browser is Gecko-based.
     * @global bool $is_opera     Whether the browser is Opera.
     * @global bool $is_safari    Whether the browser is Safari.
     * @global bool $is_chrome    Whether the browser is Chrome.
     * @global bool $is_IE        Whether the browser is Internet Explorer.
     * @global bool $is_edge      Whether the browser is Microsoft Edge.
     *
     * @return bool True if the user can access the visual editor, false otherwise.
     */
    function user_can_richedit() {}
    /**
     * Find out which editor should be displayed by default.
     *
     * Works out which of the two editors to display as the current editor for a
     * user. The 'html' setting is for the "Text" editor tab.
     *
     * @since 2.5.0
     *
     * @return string Either 'tinymce', or 'html', or 'test'
     */
    function wp_default_editor() {}
    function wp_editor($content, $editor_id, $settings = array( )) {}
    /**
     * Outputs the editor scripts, stylesheets, and default settings.
     *
     * The editor can be initialized when needed after page load.
     * See wp.editor.initialize() in wp-admin/js/editor.js for initialization options.
     *
     * @uses _WP_Editors
     * @since 4.8.0
     */
    function wp_enqueue_editor() {}
    function wp_enqueue_code_editor($args) {}
    function wp_get_code_editor_settings($args) {}
    function get_search_query($escaped = true) {}
    /**
     * Displays the contents of the search query variable.
     *
     * The search query string is passed through esc_attr() to ensure that it is safe
     * for placing in an html attribute.
     *
     * @since 2.1.0
     */
    function the_search_query() {}
    function get_language_attributes($doctype = 'html') {}
    function language_attributes($doctype = 'html') {}
    function paginate_links($args = '') {}
    function wp_admin_css_color($key, $name, $url, $colors = array( ), $icons = array( )) {}
    /**
     * Registers the default admin color schemes.
     *
     * Registers the initial set of eight color schemes in the Profile section
     * of the dashboard which allows for styling the admin menu and toolbar.
     *
     * @see wp_admin_css_color()
     *
     * @since 3.0.0
     */
    function register_admin_color_schemes() {}
    function wp_admin_css_uri($file = 'wp-admin') {}
    function wp_admin_css($file = 'wp-admin', $force_echo = false) {}
    /**
     * Enqueues the default ThickBox js and css.
     *
     * If any of the settings need to be changed, this can be done with another js
     * file similar to media-upload.js. That file should
     * require array('thickbox') to ensure it is loaded after.
     *
     * @since 2.5.0
     */
    function add_thickbox() {}
    /**
     * Displays the XHTML generator that is generated on the wp_head hook.
     *
     * See {@see 'wp_head'}.
     *
     * @since 2.5.0
     */
    function wp_generator() {}
    function the_generator($type) {}
    function get_the_generator($type = '') {}
    function checked($checked, $current = true, $echo = true) {}
    function selected($selected, $current = true, $echo = true) {}
    function disabled($disabled, $current = true, $echo = true) {}
    function readonly($readonly, $current = true, $echo = true) {}
    function __checked_selected_helper($helper, $current, $echo, $type) {}
    function wp_heartbeat_settings($settings) {}
    function get_postdata($postid) {}
    /**
     * Sets up the WordPress Loop.
     *
     * Use The Loop instead.
     *
     * @link https://codex.wordpress.org/The_Loop
     *
     * @since 1.0.1
     * @deprecated 1.5.0
     */
    function start_wp() {}
    function the_category_ID($echo = true) {}
    function the_category_head($before = '', $after = '') {}
    function previous_post($format = '%', $previous = 'previous post: ', $title = 'yes', $in_same_cat = 'no', $limitprev = 1, $excluded_categories = '') {}
    function next_post($format = '%', $next = 'next post: ', $title = 'yes', $in_same_cat = 'no', $limitnext = 1, $excluded_categories = '') {}
    function user_can_create_post($user_id, $blog_id = 1, $category_id = 'None') {}
    function user_can_create_draft($user_id, $blog_id = 1, $category_id = 'None') {}
    function user_can_edit_post($user_id, $post_id, $blog_id = 1) {}
    function user_can_delete_post($user_id, $post_id, $blog_id = 1) {}
    function user_can_set_post_date($user_id, $blog_id = 1, $category_id = 'None') {}
    function user_can_edit_post_date($user_id, $post_id, $blog_id = 1) {}
    function user_can_edit_post_comments($user_id, $post_id, $blog_id = 1) {}
    function user_can_delete_post_comments($user_id, $post_id, $blog_id = 1) {}
    function user_can_edit_user($user_id, $other_user) {}
    function get_linksbyname($cat_name = "noname", $before = '', $after = '<br />', $between = " ", $show_images = true, $orderby = 'id', $show_description = true, $show_rating = false, $limit = -1, $show_updated = 0) {}
    function wp_get_linksbyname($category, $args = '') {}
    function get_linkobjectsbyname($cat_name = "noname", $orderby = 'name', $limit = -1) {}
    function get_linkobjects($category = 0, $orderby = 'name', $limit = 0) {}
    function get_linksbyname_withrating($cat_name = "noname", $before = '', $after = '<br />', $between = " ", $show_images = true, $orderby = 'id', $show_description = true, $limit = -1, $show_updated = 0) {}
    function get_links_withrating($category = -1, $before = '', $after = '<br />', $between = " ", $show_images = true, $orderby = 'id', $show_description = true, $limit = -1, $show_updated = 0) {}
    function get_autotoggle($id = 0) {}
    function list_cats($optionall = 1, $all = 'All', $sort_column = 'ID', $sort_order = 'asc', $file = '', $list = true, $optiondates = 0, $optioncount = 0, $hide_empty = 1, $use_desc_for_title = 1, $children = false, $child_of = 0, $categories = 0, $recurse = 0, $feed = '', $feed_image = '', $exclude = '', $hierarchical = false) {}
    function wp_list_cats($args = '') {}
    function dropdown_cats($optionall = 1, $all = 'All', $orderby = 'ID', $order = 'asc', $show_last_update = 0, $show_count = 0, $hide_empty = 1, $optionnone = false, $selected = 0, $exclude = 0) {}
    function list_authors($optioncount = false, $exclude_admin = true, $show_fullname = false, $hide_empty = true, $feed = '', $feed_image = '') {}
    function wp_get_post_cats($blogid = '1', $post_ID = 0) {}
    function wp_set_post_cats($blogid = '1', $post_ID = 0, $post_categories = array( )) {}
    function get_archives($type = '', $limit = '', $format = 'html', $before = '', $after = '', $show_post_count = false) {}
    function get_author_link($echo, $author_id, $author_nicename = '') {}
    function link_pages($before = '<br />', $after = '<br />', $next_or_number = 'number', $nextpagelink = 'next page', $previouspagelink = 'previous page', $pagelink = '%', $more_file = '') {}
    function get_settings($option) {}
    /**
     * Print the permalink of the current post in the loop.
     *
     * @since 0.71
     * @deprecated 1.2.0 Use the_permalink()
     * @see the_permalink()
     */
    function permalink_link() {}
    function permalink_single_rss($deprecated = '') {}
    function wp_get_links($args = '') {}
    function get_links($category = -1, $before = '', $after = '<br />', $between = ' ', $show_images = true, $orderby = 'name', $show_description = true, $show_rating = false, $limit = -1, $show_updated = 1, $echo = true) {}
    function get_links_list($order = 'name') {}
    function links_popup_script($text = 'Links', $width = 400, $height = 400, $file = 'links.all.php', $count = true) {}
    function get_linkrating($link) {}
    function get_linkcatname($id = 0) {}
    function comments_rss_link($link_text = 'Comments RSS') {}
    function get_category_rss_link($echo = false, $cat_ID = 1) {}
    function get_author_rss_link($echo = false, $author_id = 1) {}
    /**
     * Return link to the post RSS feed.
     *
     * @since 1.5.0
     * @deprecated 2.2.0 Use get_post_comments_feed_link()
     * @see get_post_comments_feed_link()
     *
     * @return string
     */
    function comments_rss() {}
    function create_user($username, $password, $email) {}
    /**
     * Unused function.
     *
     * @deprecated 2.5.0
     */
    function gzip_compression() {}
    function get_commentdata($comment_ID, $no_cache = 0, $include_unapproved = false) {}
    function get_catname($cat_ID) {}
    function get_category_children($id, $before = '/', $after = '', $visited = array( )) {}
    /**
     * Retrieves all category IDs.
     *
     * @since 2.0.0
     * @deprecated 4.0.0 Use get_terms()
     * @see get_terms()
     *
     * @link https://codex.wordpress.org/Function_Reference/get_all_category_ids
     *
     * @return object List of all of the category IDs.
     */
    function get_all_category_ids() {}
    /**
     * Retrieve the description of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's description.
     */
    function get_the_author_description() {}
    /**
     * Display the description of the author of the current post.
     *
     * @since 1.0.0
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_description() {}
    /**
     * Retrieve the login name of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's login name (username).
     */
    function get_the_author_login() {}
    /**
     * Display the login name of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_login() {}
    /**
     * Retrieve the first name of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's first name.
     */
    function get_the_author_firstname() {}
    /**
     * Display the first name of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_firstname() {}
    /**
     * Retrieve the last name of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's last name.
     */
    function get_the_author_lastname() {}
    /**
     * Display the last name of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_lastname() {}
    /**
     * Retrieve the nickname of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's nickname.
     */
    function get_the_author_nickname() {}
    /**
     * Display the nickname of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_nickname() {}
    /**
     * Retrieve the email of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's username.
     */
    function get_the_author_email() {}
    /**
     * Display the email of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_email() {}
    /**
     * Retrieve the ICQ number of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's ICQ number.
     */
    function get_the_author_icq() {}
    /**
     * Display the ICQ number of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_icq() {}
    /**
     * Retrieve the Yahoo! IM name of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's Yahoo! IM name.
     */
    function get_the_author_yim() {}
    /**
     * Display the Yahoo! IM name of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_yim() {}
    /**
     * Retrieve the MSN address of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's MSN address.
     */
    function get_the_author_msn() {}
    /**
     * Display the MSN address of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_msn() {}
    /**
     * Retrieve the AIM address of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The author's AIM address.
     */
    function get_the_author_aim() {}
    /**
     * Display the AIM address of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta('aim')
     * @see the_author_meta()
     */
    function the_author_aim() {}
    function get_author_name($auth_id = false) {}
    /**
     * Retrieve the URL to the home page of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string The URL to the author's page.
     */
    function get_the_author_url() {}
    /**
     * Display the URL to the home page of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_url() {}
    /**
     * Retrieve the ID of the author of the current post.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use get_the_author_meta()
     * @see get_the_author_meta()
     *
     * @return string|int The author's ID.
     */
    function get_the_author_ID() {}
    /**
     * Display the ID of the author of the current post.
     *
     * @since 0.71
     * @deprecated 2.8.0 Use the_author_meta()
     * @see the_author_meta()
     */
    function the_author_ID() {}
    function the_content_rss($more_link_text = '(more...)', $stripteaser = 0, $more_file = '', $cut = 0, $encode_html = 0) {}
    function make_url_footnote($content) {}
    function _c($text, $domain = 'default') {}
    function translate_with_context($text, $domain = 'default') {}
    function _nc($single, $plural, $number, $domain = 'default') {}
    /**
     * Retrieve the plural or single form based on the amount.
     *
     * @since 1.2.0
     * @deprecated 2.8.0 Use _n()
     * @see _n()
     */
    function __ngettext() {}
    /**
     * Register plural strings in POT file, but don't translate them.
     *
     * @since 2.5.0
     * @deprecated 2.8.0 Use _n_noop()
     * @see _n_noop()
     */
    function __ngettext_noop() {}
    /**
     * Retrieve all autoload options, or all options if no autoloaded ones exist.
     *
     * @since 1.0.0
     * @deprecated 3.0.0 Use wp_load_alloptions())
     * @see wp_load_alloptions()
     *
     * @return array List of all options.
     */
    function get_alloptions() {}
    function get_the_attachment_link($id = 0, $fullsize = false, $max_dims = false, $permalink = false) {}
    function get_attachment_icon_src($id = 0, $fullsize = false) {}
    function get_attachment_icon($id = 0, $fullsize = false, $max_dims = false) {}
    function get_attachment_innerHTML($id = 0, $fullsize = false, $max_dims = false) {}
    function get_link($bookmark_id, $output = OBJECT, $filter = 'raw') {}
    function sanitize_url($url, $protocols = null) {}
    function clean_url($url, $protocols = null, $context = 'display') {}
    function js_escape($text) {}
    function wp_specialchars($string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false) {}
    function attribute_escape($text) {}
    function register_sidebar_widget($name, $output_callback, $classname = '') {}
    function unregister_sidebar_widget($id) {}
    function register_widget_control($name, $control_callback, $width = '', $height = '') {}
    function unregister_widget_control($id) {}
    function delete_usermeta($user_id, $meta_key, $meta_value = '') {}
    function get_usermeta($user_id, $meta_key = '') {}
    function update_usermeta($user_id, $meta_key, $meta_value) {}
    function get_users_of_blog($id = '') {}
    function automatic_feed_links($add = true) {}
    function get_profile($field, $user = false) {}
    function get_usernumposts($userid) {}
    function funky_javascript_callback($matches) {}
    function funky_javascript_fix($text) {}
    function is_taxonomy($taxonomy) {}
    function is_term($term, $taxonomy = '', $parent = 0) {}
    /**
     * Determines whether the current admin page is generated by a plugin.
     *
     * Use global $plugin_page and/or get_plugin_page_hookname() hooks.
     * 
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/ 
     * Conditional Tags} article in the Theme Developer Handbook.
     * 
     * @since 1.5.0
     * @deprecated 3.1.0
     *
     * @global $plugin_page
     *
     * @return bool
     */
    function is_plugin_page() {}
    /**
     * Update the categories cache.
     *
     * This function does not appear to be used anymore or does not appear to be
     * needed. It might be a legacy function left over from when there was a need
     * for updating the category cache.
     *
     * @since 1.5.0
     * @deprecated 3.1.0
     *
     * @return bool Always return True
     */
    function update_category_cache() {}
    /**
     * Check for PHP timezone support
     *
     * @since 2.9.0
     * @deprecated 3.2.0
     *
     * @return bool
     */
    function wp_timezone_supported() {}
    function the_editor($content, $id = 'content', $prev_id = 'title', $media_buttons = true, $tab_index = 2, $extended = true) {}
    function get_user_metavalues($ids) {}
    function sanitize_user_object($user, $context = 'display') {}
    function get_boundary_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $start = true) {}
    function start_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {}
    /**
     * Get site index relational link.
     *
     * @since 2.8.0
     * @deprecated 3.3.0
     *
     * @return string
     */
    function get_index_rel_link() {}
    /**
     * Display relational link for the site index.
     *
     * @since 2.8.0
     * @deprecated 3.3.0
     */
    function index_rel_link() {}
    function get_parent_post_rel_link($title = '%title') {}
    function parent_post_rel_link($title = '%title') {}
    function wp_admin_bar_dashboard_view_site_menu($wp_admin_bar) {}
    function is_blog_user($blog_id = 0) {}
    function debug_fopen($filename, $mode) {}
    function debug_fwrite($fp, $string) {}
    function debug_fclose($fp) {}
    /**
     * Retrieve list of themes with theme data in theme directory.
     *
     * The theme is broken, if it doesn't have a parent theme and is missing either
     * style.css and, or index.php. If the theme has a parent theme then it is
     * broken, if it is missing style.css; index.php is optional.
     *
     * @since 1.5.0
     * @deprecated 3.4.0 Use wp_get_themes()
     * @see wp_get_themes()
     *
     * @return array Theme list with theme data.
     */
    function get_themes() {}
    function get_theme($theme) {}
    /**
     * Retrieve current theme name.
     *
     * @since 1.5.0
     * @deprecated 3.4.0 Use wp_get_theme()
     * @see wp_get_theme()
     *
     * @return string
     */
    function get_current_theme() {}
    function clean_pre($matches) {}
    function add_custom_image_header($wp_head_callback, $admin_head_callback, $admin_preview_callback = '') {}
    /**
     * Remove image header support.
     *
     * @since 3.1.0
     * @deprecated 3.4.0 Use remove_theme_support()
     * @see remove_theme_support()
     *
     * @return null|bool Whether support was removed.
     */
    function remove_custom_image_header() {}
    function add_custom_background($wp_head_callback = '', $admin_head_callback = '', $admin_preview_callback = '') {}
    /**
     * Remove custom background support.
     *
     * @since 3.1.0
     * @deprecated 3.4.0 Use add_custom_background()
     * @see add_custom_background()
     *
     * @return null|bool Whether support was removed.
     */
    function remove_custom_background() {}
    function get_theme_data($theme_file) {}
    function update_page_cache($pages) {}
    function clean_page_cache($id) {}
    function wp_explain_nonce($action) {}
    function sticky_class($post_id = null) {}
    function _get_post_ancestors($post) {}
    function wp_load_image($file) {}
    function image_resize($file, $max_w, $max_h, $crop = false, $suffix = null, $dest_path = null, $jpeg_quality = 90) {}
    function wp_get_single_post($postid = 0, $mode = OBJECT) {}
    function user_pass_ok($user_login, $user_pass) {}
    /**
     * Callback formerly fired on the save_post hook. No longer needed.
     *
     * @since 2.3.0
     * @deprecated 3.5.0
     */
    function _save_post_hook() {}
    function gd_edit_image_support($mime_type) {}
    function wp_convert_bytes_to_hr($bytes) {}
    function _search_terms_tidy($t) {}
    /**
     * Determine if TinyMCE is available.
     *
     * Checks to see if the user has deleted the tinymce files to slim down
     * their WordPress installation.
     *
     * @since 2.1.0
     * @deprecated 3.9.0
     *
     * @return bool Whether TinyMCE exists.
     */
    function rich_edit_exists() {}
    function default_topic_count_text($count) {}
    function format_to_post($content) {}
    function like_escape($text) {}
    function url_is_accessable_via_ssl($url) {}
    /**
     * Start preview theme output buffer.
     *
     * Will only perform task if the user has permissions and template and preview
     * query variables exist.
     *
     * @since 2.6.0
     * @deprecated 4.3.0
     */
    function preview_theme() {}
    /**
     * Private function to modify the current template when previewing a theme
     *
     * @since 2.9.0
     * @deprecated 4.3.0
     * @access private
     *
     * @return string
     */
    function _preview_theme_template_filter() {}
    /**
     * Private function to modify the current stylesheet when previewing a theme
     *
     * @since 2.9.0
     * @deprecated 4.3.0
     * @access private
     *
     * @return string
     */
    function _preview_theme_stylesheet_filter() {}
    function preview_theme_ob_filter($content) {}
    function preview_theme_ob_filter_callback($matches) {}
    function wp_richedit_pre($text) {}
    function wp_htmledit_pre($output) {}
    function post_permalink($post_id = 0) {}
    function wp_get_http($url, $file_path = false, $red = 1) {}
    function force_ssl_login($force = null) {}
    /**
     * Retrieve path of comment popup template in current or parent template.
     *
     * @since 1.5.0
     * @deprecated 4.5.0
     *
     * @return string Full path to comments popup template file.
     */
    function get_comments_popup_template() {}
    /**
     * Determines whether the current URL is within the comments popup window.
     * 
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/ 
     * Conditional Tags} article in the Theme Developer Handbook.
     * 
     * @since 1.5.0
     * @deprecated 4.5.0
     *
     * @return bool
     */
    function is_comments_popup() {}
    /**
     * Display the JS popup script to show a comment.
     *
     * @since 0.71
     * @deprecated 4.5.0
     */
    function comments_popup_script() {}
    function popuplinks($text) {}
    function wp_embed_handler_googlevideo($matches, $attr, $url, $rawattr) {}
    /**
     * Retrieve path of paged template in current or parent template.
     *
     * @since 1.5.0
     * @deprecated 4.7.0 The paged.php template is no longer part of the theme template hierarchy.
     *
     * @return string Full path to paged template file.
     */
    function get_paged_template() {}
    function wp_kses_js_entities($string) {}
    function _usort_terms_by_ID($a, $b) {}
    function _usort_terms_by_name($a, $b) {}
    function _sort_nav_menu_items($a, $b) {}
    /**
     * Retrieves the Press This bookmarklet link.
     *
     * @since 2.6.0
     * @deprecated 4.9.0
     *
     */
    function get_shortcut_link() {}
    /**
* Ajax handler for saving a post from Press This.
*
* @since 4.2.0
* @deprecated 4.9.0
*/
    function wp_ajax_press_this_save_post() {}
    /**
* Ajax handler for creating new category from Press This.
*
* @since 4.2.0
* @deprecated 4.9.0
*/
    function wp_ajax_press_this_add_category() {}
    function get_the_author($deprecated = '') {}
    function the_author($deprecated = '', $deprecated_echo = true) {}
    /**
     * Retrieve the author who last edited the current post.
     *
     * @since 2.8.0
     *
     * @return string|void The author's display name.
     */
    function get_the_modified_author() {}
    /**
     * Display the name of the author who last edited the current post,
     * if the author's ID is available.
     *
     * @since 2.8.0
     *
     * @see get_the_author()
     */
    function the_modified_author() {}
    function get_the_author_meta($field = '', $user_id = false) {}
    function the_author_meta($field = '', $user_id = false) {}
    /**
     * Retrieve either author's link or author's name.
     *
     * If the author has a home page set, return an HTML link, otherwise just return the
     * author's name.
     *
     * @since 3.0.0
     *
     * @return string|null An HTML link if the author's url exist in user meta,
     *                     else the result of get_the_author().
     */
    function get_the_author_link() {}
    /**
     * Display either author's link or author's name.
     *
     * If the author has a home page set, echo an HTML link, otherwise just echo the
     * author's name.
     *
     * @link https://codex.wordpress.org/Template_Tags/the_author_link
     *
     * @since 2.1.0
     */
    function the_author_link() {}
    /**
     * Retrieve the number of posts by the author of the current post.
     *
     * @since 1.5.0
     *
     * @return int The number of posts by the author.
     */
    function get_the_author_posts() {}
    /**
     * Display the number of posts by the author of the current post.
     *
     * @link https://codex.wordpress.org/Template_Tags/the_author_posts
     * @since 0.71
     */
    function the_author_posts() {}
    /**
     * Retrieves an HTML link to the author page of the current post's author.
     *
     * Returns an HTML-formatted link using get_author_posts_url().
     *
     * @since 4.4.0
     *
     * @global object $authordata The current author's DB object.
     *
     * @return string An HTML link to the author page, or an empty string if $authordata isn't defined.
     */
    function get_the_author_posts_link() {}
    function the_author_posts_link($deprecated = '') {}
    function get_author_posts_url($author_id, $author_nicename = '') {}
    function wp_list_authors($args = '') {}
    /**
     * Determines whether this site has more than one author.
     *
     * Checks to see if more than one author has published posts.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 3.2.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return bool Whether or not we have more than one author
     */
    function is_multi_author() {}
    /**
     * Helper function to clear the cache for number of authors.
     *
     * @since 3.2.0
     * @access private
     */
    function __clear_multi_author_cache() {}
    function render_block_core_archives($attributes) {}
    /**
     * Register archives block.
     */
    function register_block_core_archives() {}
    function render_block_core_latest_posts($attributes) {}
    /**
     * Registers the `core/latest-posts` block on server.
     */
    function register_block_core_latest_posts() {}
    function render_block_core_shortcode($attributes, $content) {}
    /**
     * Registers the `core/shortcode` block on server.
     */
    function register_block_core_shortcode() {}
    function render_block_core_block($attributes) {}
    function wp_latest_comments_draft_or_post_title($post = 0) {}
    function render_block_core_latest_comments($attributes = array( )) {}
    function render_block_core_categories($attributes) {}
    function build_dropdown_script_block_core_categories($dropdown_id) {}
    /**
     * Registers the `core/categories` block on server.
     */
    function register_block_core_categories() {}
    function random_bytes($bytes) {}
    function RandomCompat_strlen($binary_string) {}
    function RandomCompat_substr($binary_string, $start, $length = null) {}
    function RandomCompat_intval($number, $fail_open = false) {}
    function random_int($min, $max) {}
    /**
     * @package Hello_Dolly
     * @version 1.7.1
     */
    function hello_dolly_get_lyric() {}
    /** These are the lyrics to Hello Dolly */
    function hello_dolly() {}
    function dolly_css() {}
    /**
     * Sets up theme defaults and registers support for various WordPress features.
     *
     * Note that this function is hooked into the after_setup_theme hook, which
     * runs before the init hook. The init hook is too late for some features, such
     * as indicating support for post thumbnails.
     */
    function twentyseventeen_setup() {}
    /**
     * Set the content width in pixels, based on the theme's design and stylesheet.
     *
     * Priority 0 to make it available to lower priority callbacks.
     *
     * @global int $content_width
     */
    function twentyseventeen_content_width() {}
    /**
     * Register custom fonts.
     */
    function twentyseventeen_fonts_url() {}
    function twentyseventeen_resource_hints($urls, $relation_type) {}
    /**
     * Register widget area.
     *
     * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar
     */
    function twentyseventeen_widgets_init() {}
    function twentyseventeen_excerpt_more($link) {}
    /**
     * Handles JavaScript detection.
     *
     * Adds a `js` class to the root `<html>` element when JavaScript is detected.
     *
     * @since Twenty Seventeen 1.0
     */
    function twentyseventeen_javascript_detection() {}
    /**
     * Add a pingback url auto-discovery header for singularly identifiable articles.
     */
    function twentyseventeen_pingback_header() {}
    /**
     * Display custom color CSS.
     */
    function twentyseventeen_colors_css_wrap() {}
    /**
     * Enqueues scripts and styles.
     */
    function twentyseventeen_scripts() {}
    /**
     * Enqueues styles for the block-based editor.
     *
     * @since Twenty Seventeen 1.8
     */
    function twentyseventeen_block_editor_styles() {}
    function twentyseventeen_content_image_sizes_attr($sizes, $size) {}
    function twentyseventeen_header_image_tag($html, $header, $attr) {}
    function twentyseventeen_post_thumbnail_sizes_attr($attr, $attachment, $size) {}
    function twentyseventeen_front_page_template($template) {}
    function twentyseventeen_widget_tag_cloud_args($args) {}
    function twentyseventeen_unique_id($prefix = '') {}
    /**
     * Add SVG definitions to the footer.
     */
    function twentyseventeen_include_svg_icons() {}
    function twentyseventeen_get_svg($args = array( )) {}
    function twentyseventeen_nav_menu_social_icons($item_output, $item, $depth, $args) {}
    function twentyseventeen_dropdown_icon_to_menu_link($title, $item, $args, $depth) {}
    /**
     * Returns an array of supported social links (URL and icon name).
     *
     * @return array $social_links_icons
     */
    function twentyseventeen_social_links_icons() {}
    function twentyseventeen_customize_register($wp_customize) {}
    function twentyseventeen_sanitize_page_layout($input) {}
    function twentyseventeen_sanitize_colorscheme($input) {}
    /**
     * Render the site title for the selective refresh partial.
     *
     * @since Twenty Seventeen 1.0
     * @see twentyseventeen_customize_register()
     *
     * @return void
     */
    function twentyseventeen_customize_partial_blogname() {}
    /**
     * Render the site tagline for the selective refresh partial.
     *
     * @since Twenty Seventeen 1.0
     * @see twentyseventeen_customize_register()
     *
     * @return void
     */
    function twentyseventeen_customize_partial_blogdescription() {}
    /**
     * Return whether we're previewing the front page and it's a static page.
     */
    function twentyseventeen_is_static_front_page() {}
    /**
     * Return whether we're on a view that supports a one or two column layout.
     */
    function twentyseventeen_is_view_with_layout_option() {}
    /**
     * Bind JS handlers to instantly live-preview changes.
     */
    function twentyseventeen_customize_preview_js() {}
    /**
     * Load dynamic logic for the customizer controls area.
     */
    function twentyseventeen_panels_js() {}
    /**
     * Set up the WordPress core custom header feature.
     *
     * @uses twentyseventeen_header_style()
     */
    function twentyseventeen_custom_header_setup() {}
    /**
     * Styles the header image and text displayed on the blog.
     *
     * @see twentyseventeen_custom_header_setup().
     */
    function twentyseventeen_header_style() {}
    function twentyseventeen_video_controls($settings) {}
    /**
     * Generate the CSS for the current custom color scheme.
     */
    function twentyseventeen_custom_colors_css() {}
    /**
     * Prints HTML with meta information for the current post-date/time and author.
     */
    function twentyseventeen_posted_on() {}
    /**
     * Gets a nicely formatted string for the published date.
     */
    function twentyseventeen_time_link() {}
    /**
     * Prints HTML with meta information for the categories, tags and comments.
     */
    function twentyseventeen_entry_footer() {}
    /**
     * Returns an accessibility-friendly link to edit a post or page.
     *
     * This also gives us a little context about what exactly we're editing
     * (post or page?) so that users understand a bit more where they are in terms
     * of the template hierarchy and their content. Helpful when/if the single-page
     * layout with multiple posts/pages shown gets confusing.
     */
    function twentyseventeen_edit_link() {}
    function twentyseventeen_front_page_section($partial = null, $id = 0) {}
    /**
     * Returns true if a blog has more than 1 category.
     *
     * @return bool
     */
    function twentyseventeen_categorized_blog() {}
    /**
     * Flush out the transients used in twentyseventeen_categorized_blog.
     */
    function twentyseventeen_category_transient_flusher() {}
    function twentyseventeen_body_classes($classes) {}
    /**
     * Count our number of active panels.
     *
     * Primarily used to see if we have any panels active, duh.
     */
    function twentyseventeen_panel_count() {}
    /**
     * Checks to see if we're on the front page or not.
     */
    function twentyseventeen_is_frontpage() {}
    /**
     * Prevent switching to Twenty Seventeen on old versions of WordPress.
     *
     * Switches to the default theme.
     *
     * @since Twenty Seventeen 1.0
     */
    function twentyseventeen_switch_theme() {}
    /**
     * Adds a message for unsuccessful theme switch.
     *
     * Prints an update nag after an unsuccessful attempt to switch to
     * Twenty Seventeen on WordPress versions prior to 4.7.
     *
     * @since Twenty Seventeen 1.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentyseventeen_upgrade_notice() {}
    /**
     * Prevents the Customizer from being loaded on WordPress versions prior to 4.7.
     *
     * @since Twenty Seventeen 1.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentyseventeen_customize() {}
    /**
     * Prevents the Theme Preview from being loaded on WordPress versions prior to 4.7.
     *
     * @since Twenty Seventeen 1.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentyseventeen_preview() {}
    /**
     * Sets up theme defaults and registers support for various WordPress features.
     *
     * Note that this function is hooked into the after_setup_theme hook, which
     * runs before the init hook. The init hook is too late for some features, such
     * as indicating support for post thumbnails.
     *
     * Create your own twentysixteen_setup() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_setup() {}
    /**
     * Sets the content width in pixels, based on the theme's design and stylesheet.
     *
     * Priority 0 to make it available to lower priority callbacks.
     *
     * @global int $content_width
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_content_width() {}
    function twentysixteen_resource_hints($urls, $relation_type) {}
    /**
     * Registers a widget area.
     *
     * @link https://developer.wordpress.org/reference/functions/register_sidebar/
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_widgets_init() {}
    /**
     * Register Google fonts for Twenty Sixteen.
     *
     * Create your own twentysixteen_fonts_url() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     *
     * @return string Google fonts URL for the theme.
     */
    function twentysixteen_fonts_url() {}
    /**
     * Handles JavaScript detection.
     *
     * Adds a `js` class to the root `<html>` element when JavaScript is detected.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_javascript_detection() {}
    /**
     * Enqueues scripts and styles.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_scripts() {}
    /**
     * Enqueue styles for the block-based editor.
     *
     * @since Twenty Sixteen 1.6
     */
    function twentysixteen_block_editor_styles() {}
    function twentysixteen_body_classes($classes) {}
    function twentysixteen_hex2rgb($color) {}
    function twentysixteen_content_image_sizes_attr($sizes, $size) {}
    function twentysixteen_post_thumbnail_sizes_attr($attr, $attachment, $size) {}
    function twentysixteen_widget_tag_cloud_args($args) {}
    /**
     * Sets up the WordPress core custom header and custom background features.
     *
     * @since Twenty Sixteen 1.0
     *
     * @see twentysixteen_header_style()
     */
    function twentysixteen_custom_header_and_background() {}
    /**
     * Styles the header text displayed on the site.
     *
     * Create your own twentysixteen_header_style() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     *
     * @see twentysixteen_custom_header_and_background().
     */
    function twentysixteen_header_style() {}
    function twentysixteen_customize_register($wp_customize) {}
    /**
     * Render the site title for the selective refresh partial.
     *
     * @since Twenty Sixteen 1.2
     * @see twentysixteen_customize_register()
     *
     * @return void
     */
    function twentysixteen_customize_partial_blogname() {}
    /**
     * Render the site tagline for the selective refresh partial.
     *
     * @since Twenty Sixteen 1.2
     * @see twentysixteen_customize_register()
     *
     * @return void
     */
    function twentysixteen_customize_partial_blogdescription() {}
    /**
     * Registers color schemes for Twenty Sixteen.
     *
     * Can be filtered with {@see 'twentysixteen_color_schemes'}.
     *
     * The order of colors in a colors array:
     * 1. Main Background Color.
     * 2. Page Background Color.
     * 3. Link Color.
     * 4. Main Text Color.
     * 5. Secondary Text Color.
     *
     * @since Twenty Sixteen 1.0
     *
     * @return array An associative array of color scheme options.
     */
    function twentysixteen_get_color_schemes() {}
    /**
     * Retrieves the current Twenty Sixteen color scheme.
     *
     * Create your own twentysixteen_get_color_scheme() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     *
     * @return array An associative array of either the current or default color scheme HEX values.
     */
    function twentysixteen_get_color_scheme() {}
    /**
     * Retrieves an array of color scheme choices registered for Twenty Sixteen.
     *
     * Create your own twentysixteen_get_color_scheme_choices() function to override
     * in a child theme.
     *
     * @since Twenty Sixteen 1.0
     *
     * @return array Array of color schemes.
     */
    function twentysixteen_get_color_scheme_choices() {}
    function twentysixteen_sanitize_color_scheme($value) {}
    /**
     * Enqueues front-end CSS for color scheme.
     *
     * @since Twenty Sixteen 1.0
     *
     * @see wp_add_inline_style()
     */
    function twentysixteen_color_scheme_css() {}
    /**
     * Binds the JS listener to make Customizer color_scheme control.
     *
     * Passes color scheme data as colorScheme global.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_customize_control_js() {}
    /**
     * Binds JS handlers to make the Customizer preview reload changes asynchronously.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_customize_preview_js() {}
    function twentysixteen_get_color_scheme_css($colors) {}
    /**
     * Outputs an Underscore template for generating CSS for the color scheme.
     *
     * The template generates the css dynamically for instant display in the
     * Customizer preview.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_color_scheme_css_template() {}
    /**
     * Enqueues front-end CSS for the page background color.
     *
     * @since Twenty Sixteen 1.0
     *
     * @see wp_add_inline_style()
     */
    function twentysixteen_page_background_color_css() {}
    /**
     * Enqueues front-end CSS for the link color.
     *
     * @since Twenty Sixteen 1.0
     *
     * @see wp_add_inline_style()
     */
    function twentysixteen_link_color_css() {}
    /**
     * Enqueues front-end CSS for the main text color.
     *
     * @since Twenty Sixteen 1.0
     *
     * @see wp_add_inline_style()
     */
    function twentysixteen_main_text_color_css() {}
    /**
     * Enqueues front-end CSS for the secondary text color.
     *
     * @since Twenty Sixteen 1.0
     *
     * @see wp_add_inline_style()
     */
    function twentysixteen_secondary_text_color_css() {}
    /**
     * Prints HTML with meta information for the categories, tags.
     *
     * Create your own twentysixteen_entry_meta() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_entry_meta() {}
    /**
     * Prints HTML with date information for current post.
     *
     * Create your own twentysixteen_entry_date() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_entry_date() {}
    /**
     * Prints HTML with category and tags for current post.
     *
     * Create your own twentysixteen_entry_taxonomies() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_entry_taxonomies() {}
    /**
     * Displays an optional post thumbnail.
     *
     * Wraps the post thumbnail in an anchor element on index views, or a div
     * element when on single views.
     *
     * Create your own twentysixteen_post_thumbnail() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_post_thumbnail() {}
    function twentysixteen_excerpt($class = 'entry-summary') {}
    /**
     * Replaces "[...]" (appended to automatically generated excerpts) with ... and
     * a 'Continue reading' link.
     *
     * Create your own twentysixteen_excerpt_more() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     *
     * @return string 'Continue reading' link prepended with an ellipsis.
     */
    function twentysixteen_excerpt_more() {}
    /**
     * Determines whether blog/site has more than one category.
     *
     * Create your own twentysixteen_categorized_blog() function to override in a child theme.
     *
     * @since Twenty Sixteen 1.0
     *
     * @return bool True if there is more than one category, false otherwise.
     */
    function twentysixteen_categorized_blog() {}
    /**
     * Flushes out the transients used in twentysixteen_categorized_blog().
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_category_transient_flusher() {}
    /**
     * Displays the optional custom logo.
     *
     * Does nothing if the custom logo is not available.
     *
     * @since Twenty Sixteen 1.2
     */
    function twentysixteen_the_custom_logo() {}
    /**
     * Prevent switching to Twenty Sixteen on old versions of WordPress.
     *
     * Switches to the default theme.
     *
     * @since Twenty Sixteen 1.0
     */
    function twentysixteen_switch_theme() {}
    /**
     * Adds a message for unsuccessful theme switch.
     *
     * Prints an update nag after an unsuccessful attempt to switch to
     * Twenty Sixteen on WordPress versions prior to 4.4.
     *
     * @since Twenty Sixteen 1.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentysixteen_upgrade_notice() {}
    /**
     * Prevents the Customizer from being loaded on WordPress versions prior to 4.4.
     *
     * @since Twenty Sixteen 1.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentysixteen_customize() {}
    /**
     * Prevents the Theme Preview from being loaded on WordPress versions prior to 4.4.
     *
     * @since Twenty Sixteen 1.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentysixteen_preview() {}
    /**
     * Set up theme defaults and registers support for various WordPress features.
     *
     * Note that this function is hooked into the after_setup_theme hook, which runs
     * before the init hook. The init hook is too late for some features, such as indicating
     * support post thumbnails.
     *
     * To override twentyeleven_setup() in a child theme, add your own twentyeleven_setup to your child theme's
     * functions.php file.
     *
     * @uses load_theme_textdomain()    For translation/localization support.
     * @uses add_editor_style()         To style the visual editor.
     * @uses add_theme_support()        To add support for post thumbnails, automatic feed links, custom headers
     *                                  and backgrounds, and post formats.
     * @uses register_nav_menus()       To add support for navigation menus.
     * @uses register_default_headers() To register the default custom header images provided with the theme.
     * @uses set_post_thumbnail_size()  To set a custom post thumbnail size.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_setup() {}
    /**
     * Enqueue scripts and styles for front end.
     *
     * @since Twenty Eleven 2.9
     */
    function twentyeleven_scripts_styles() {}
    /**
     * Enqueue styles for the block-based editor.
     *
     * @since Twenty Eleven 2.9
     */
    function twentyeleven_block_editor_styles() {}
    /**
     * Styles the header image and text displayed on the blog.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_header_style() {}
    /**
     * Styles the header image displayed on the Appearance > Header admin panel.
     *
     * Referenced via add_theme_support('custom-header') in twentyeleven_setup().
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_admin_header_style() {}
    /**
     * Custom header image markup displayed on the Appearance > Header admin panel.
     *
     * Referenced via add_theme_support('custom-header') in twentyeleven_setup().
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_admin_header_image() {}
    function twentyeleven_excerpt_length($length) {}
    /**
     * Return a "Continue Reading" link for excerpts
     *
     * @since Twenty Eleven 1.0
     *
     * @return string The "Continue Reading" HTML link.
     */
    function twentyeleven_continue_reading_link() {}
    function twentyeleven_auto_excerpt_more($more) {}
    function twentyeleven_custom_excerpt_more($output) {}
    function twentyeleven_page_menu_args($args) {}
    /**
     * Register sidebars and widgetized areas.
     *
     * Also register the default Epherma widget.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_widgets_init() {}
    function twentyeleven_content_nav($html_id) {}
    /**
     * Return the first link from the post content. If none found, the
     * post permalink is used as a fallback.
     *
     * @since Twenty Eleven 1.0
     *
     * @uses get_url_in_content() to get the first URL from the post content.
     *
     * @return string The first link.
     */
    function twentyeleven_get_first_url() {}
    /**
     * Return the URL for the first link found in the post content.
     *
     * @since Twenty Eleven 1.0
     *
     * @return string|bool URL or false when no link is present.
     */
    function twentyeleven_url_grabber() {}
    /**
     * Count the number of footer sidebars to enable dynamic classes for the footer.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_footer_sidebar_class() {}
    function twentyeleven_comment($comment, $args, $depth) {}
    /**
     * Print HTML with meta information for the current post-date/time and author.
     *
     * Create your own twentyeleven_posted_on to override in a child theme
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_posted_on() {}
    function twentyeleven_body_classes($classes) {}
    /**
     * Retrieve the IDs for images in a gallery.
     *
     * @uses get_post_galleries() First, if available. Falls back to shortcode parsing,
     *                            then as last option uses a get_posts() call.
     *
     * @since Twenty Eleven 1.6
     *
     * @return array List of image IDs from the post gallery.
     */
    function twentyeleven_get_gallery_images() {}
    function twentyeleven_widget_tag_cloud_args($args) {}
    function twentyeleven_admin_enqueue_scripts($hook_suffix) {}
    /**
     * Register the form setting for our twentyeleven_options array.
     *
     * This function is attached to the admin_init action hook.
     *
     * This call to register_setting() registers a validation callback, twentyeleven_theme_options_validate(),
     * which is used when the option is saved, to ensure that our option values are complete, properly
     * formatted, and safe.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_theme_options_init() {}
    function twentyeleven_option_page_capability($capability) {}
    /**
     * Add a theme options page to the admin menu, including some help documentation.
     *
     * This function is attached to the admin_menu action hook.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_theme_options_add_page() {}
    function twentyeleven_theme_options_help() {}
    /**
     * Return an array of color schemes registered for Twenty Eleven.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_color_schemes() {}
    /**
     * Return an array of layout options registered for Twenty Eleven.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_layouts() {}
    /**
     * Return the default options for Twenty Eleven.
     *
     * @since Twenty Eleven 1.0
     *
     * @return array An array of default theme options.
     */
    function twentyeleven_get_default_theme_options() {}
    function twentyeleven_get_default_link_color($color_scheme = null) {}
    /**
     * Return the options array for Twenty Eleven.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_get_theme_options() {}
    /**
     * Render the Color Scheme setting field.
     *
     * @since Twenty Eleven 1.3
     */
    function twentyeleven_settings_field_color_scheme() {}
    /**
     * Render the Link Color setting field.
     *
     * @since Twenty Eleven 1.3
     */
    function twentyeleven_settings_field_link_color() {}
    /**
     * Render the Layout setting field.
     *
     * @since Twenty Eleven 1.3
     */
    function twentyeleven_settings_field_layout() {}
    /**
     * Render the theme options page for Twenty Eleven.
     *
     * @since Twenty Eleven 1.2
     */
    function twentyeleven_theme_options_render_page() {}
    function twentyeleven_theme_options_validate($input) {}
    /**
     * Enqueue the styles for the current color scheme.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_enqueue_color_scheme() {}
    /**
     * Add a style block to the theme for the current link color.
     *
     * This function is attached to the wp_head action hook.
     *
     * @since Twenty Eleven 1.0
     */
    function twentyeleven_print_link_color_style() {}
    function twentyeleven_layout_classes($existing_classes) {}
    function twentyeleven_customize_register($wp_customize) {}
    /**
     * Render the site title for the selective refresh partial.
     *
     * @since Twenty Eleven 2.4
     * @see twentyeleven_customize_register()
     *
     * @return void
     */
    function twentyeleven_customize_partial_blogname() {}
    /**
     * Render the site tagline for the selective refresh partial.
     *
     * @since Twenty Eleven 2.4
     * @see twentyeleven_customize_register()
     *
     * @return void
     */
    function twentyeleven_customize_partial_blogdescription() {}
    /**
     * Bind JS handlers to make Customizer preview reload changes asynchronously.
     *
     * Used with blogname and blogdescription.
     *
     * @since Twenty Eleven 1.3
     */
    function twentyeleven_customize_preview_js() {}
    /**
     * Twenty Thirteen setup.
     *
     * Sets up theme defaults and registers the various WordPress features that
     * Twenty Thirteen supports.
     *
     * @uses load_theme_textdomain() For translation/localization support.
     * @uses add_editor_style() To add Visual Editor stylesheets.
     * @uses add_theme_support() To add support for automatic feed links, post
     * formats, and post thumbnails.
     * @uses register_nav_menu() To add support for a navigation menu.
     * @uses set_post_thumbnail_size() To set a custom post thumbnail size.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_setup() {}
    /**
     * Return the Google font stylesheet URL, if available.
     *
     * The use of Source Sans Pro and Bitter by default is localized. For languages
     * that use characters not supported by the font, the font can be disabled.
     *
     * @since Twenty Thirteen 1.0
     *
     * @return string Font stylesheet or empty string if disabled.
     */
    function twentythirteen_fonts_url() {}
    /**
     * Enqueue scripts and styles for the front end.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_scripts_styles() {}
    function twentythirteen_resource_hints($urls, $relation_type) {}
    /**
     * Enqueue styles for the block-based editor.
     *
     * @since Twenty Thirteen 2.5
     */
    function twentythirteen_block_editor_styles() {}
    function twentythirteen_wp_title($title, $sep) {}
    /**
     * Register two widget areas.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_widgets_init() {}
    /**
     * Display navigation to next/previous set of posts when applicable.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_paging_nav() {}
    /**
     * Display navigation to next/previous post when applicable.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_post_nav() {}
    /**
     * Print HTML with meta information for current post: categories, tags, permalink, author, and date.
     *
     * Create your own twentythirteen_entry_meta() to override in a child theme.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_entry_meta() {}
    function twentythirteen_entry_date($echo = true) {}
    /**
     * Print the attached image with a link to the next attached image.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_the_attached_image() {}
    /**
     * Return the post URL.
     *
     * @uses get_url_in_content() to get the URL in the post meta (if it exists) or
     * the first link found in the post content.
     *
     * Falls back to the post permalink if no URL is found in the post.
     *
     * @since Twenty Thirteen 1.0
     *
     * @return string The Link format URL.
     */
    function twentythirteen_get_link_url() {}
    function twentythirteen_excerpt_more($more) {}
    function twentythirteen_body_class($classes) {}
    /**
     * Adjust content_width value for video post formats and attachment templates.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_content_width() {}
    function twentythirteen_customize_register($wp_customize) {}
    /**
     * Render the site title for the selective refresh partial.
     *
     * @since Twenty Thirteen 1.9
     * @see twentythirteen_customize_register()
     *
     * @return void
     */
    function twentythirteen_customize_partial_blogname() {}
    /**
     * Render the site tagline for the selective refresh partial.
     *
     * @since Twenty Thirteen 1.9
     * @see twentythirteen_customize_register()
     *
     * @return void
     */
    function twentythirteen_customize_partial_blogdescription() {}
    /**
     * Enqueue Javascript postMessage handlers for the Customizer.
     *
     * Binds JavaScript handlers to make the Customizer preview
     * reload changes asynchronously.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_customize_preview_js() {}
    function twentythirteen_widget_tag_cloud_args($args) {}
    /**
     * Set up the WordPress core custom header arguments and settings.
     *
     * @uses add_theme_support() to register support for 3.4 and up.
     * @uses twentythirteen_header_style() to style front end.
     * @uses twentythirteen_admin_header_style() to style wp-admin form.
     * @uses twentythirteen_admin_header_image() to add custom markup to wp-admin form.
     * @uses register_default_headers() to set up the bundled header images.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_custom_header_setup() {}
    /**
     * Load our special font CSS files.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_custom_header_fonts() {}
    /**
     * Style the header text displayed on the blog.
     *
     * get_header_textcolor() options: Hide text (returns 'blank'), or any hex value.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_header_style() {}
    /**
     * Style the header image displayed on the Appearance > Header admin panel.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_admin_header_style() {}
    /**
     * Output markup to be displayed on the Appearance > Header admin panel.
     *
     * This callback overrides the default markup displayed there.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_admin_header_image() {}
    /**
     * Prevent switching to Twenty Thirteen on old versions of WordPress.
     *
     * Switches to the default theme.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_switch_theme() {}
    /**
     * Add message for unsuccessful theme switch.
     *
     * Prints an update nag after an unsuccessful attempt to switch to
     * Twenty Thirteen on WordPress versions prior to 3.6.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_upgrade_notice() {}
    /**
     * Prevent the Customizer from being loaded on WordPress versions prior to 3.6.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_customize() {}
    /**
     * Prevent the Theme Preview from being loaded on WordPress versions prior to 3.4.
     *
     * @since Twenty Thirteen 1.0
     */
    function twentythirteen_preview() {}
    /**
     * Sets up theme defaults and registers support for various WordPress features.
     *
     * Note that this function is hooked into the after_setup_theme hook, which
     * runs before the init hook. The init hook is too late for some features, such
     * as indicating support for post thumbnails.
     */
    function twentynineteen_setup() {}
    /**
     * Register widget area.
     *
     * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar
     */
    function twentynineteen_widgets_init() {}
    /**
     * Set the content width in pixels, based on the theme's design and stylesheet.
     *
     * Priority 0 to make it available to lower priority callbacks.
     *
     * @global int $content_width Content width.
     */
    function twentynineteen_content_width() {}
    /**
     * Enqueue scripts and styles.
     */
    function twentynineteen_scripts() {}
    /**
     * Fix skip link focus in IE11.
     *
     * This does not enqueue the script because it is tiny and because it is only for IE11,
     * thus it does not warrant having an entire dedicated blocking script being loaded.
     *
     * @link https://git.io/vWdr2
     */
    function twentynineteen_skip_link_focus_fix() {}
    /**
     * Enqueue supplemental block editor styles.
     */
    function twentynineteen_editor_customizer_styles() {}
    /**
     * Display custom color CSS in customizer and on frontend.
     */
    function twentynineteen_colors_css_wrap() {}
    function twentynineteen_get_icon_svg($icon, $size = 24) {}
    function twentynineteen_get_social_icon_svg($icon, $size = 24) {}
    function twentynineteen_get_social_link_svg($uri, $size = 24) {}
    function twentynineteen_nav_menu_social_icons($item_output, $item, $depth, $args) {}
    function twentynineteen_customize_register($wp_customize) {}
    /**
     * Render the site title for the selective refresh partial.
     *
     * @return void
     */
    function twentynineteen_customize_partial_blogname() {}
    /**
     * Render the site tagline for the selective refresh partial.
     *
     * @return void
     */
    function twentynineteen_customize_partial_blogdescription() {}
    /**
     * Bind JS handlers to instantly live-preview changes.
     */
    function twentynineteen_customize_preview_js() {}
    /**
     * Load dynamic logic for the customizer controls area.
     */
    function twentynineteen_panels_js() {}
    function twentynineteen_sanitize_color_option($choice) {}
    /**
     * Generate the CSS for the current primary color.
     */
    function twentynineteen_custom_colors_css() {}
    /**
     * Prints HTML with meta information for the current post-date/time.
     */
    function twentynineteen_posted_on() {}
    /**
     * Prints HTML with meta information about theme author.
     */
    function twentynineteen_posted_by() {}
    /**
     * Prints HTML with the comment count for the current post.
     */
    function twentynineteen_comment_count() {}
    /**
     * Prints HTML with meta information for the categories, tags and comments.
     */
    function twentynineteen_entry_footer() {}
    /**
     * Displays an optional post thumbnail.
     *
     * Wraps the post thumbnail in an anchor element on index views, or a div
     * element when on single views.
     */
    function twentynineteen_post_thumbnail() {}
    function twentynineteen_get_user_avatar_markup($id_or_email = null) {}
    function twentynineteen_discussion_avatars_list($comment_authors) {}
    function twentynineteen_comment_form($order) {}
    /**
     * Documentation for function.
     */
    function twentynineteen_the_posts_navigation() {}
    function twentynineteen_body_classes($classes) {}
    function twentynineteen_post_classes($classes, $class, $post_id) {}
    /**
     * Add a pingback url auto-discovery header for single posts, pages, or attachments.
     */
    function twentynineteen_pingback_header() {}
    function twentynineteen_comment_form_defaults($defaults) {}
    /**
     * Filters the default archive titles.
     */
    function twentynineteen_get_the_archive_title() {}
    /**
     * Determines if post thumbnail can be displayed.
     */
    function twentynineteen_can_show_post_thumbnail() {}
    /**
     * Returns true if image filters are enabled on the theme options.
     */
    function twentynineteen_image_filters_enabled() {}
    function twentynineteen_post_thumbnail_sizes_attr($attr) {}
    /**
     * Returns the size for avatars used in the theme.
     */
    function twentynineteen_get_avatar_size() {}
    function twentynineteen_is_comment_by_post_author($comment = null) {}
    /**
     * Returns information about the current post's discussion, with cache support.
     */
    function twentynineteen_get_discussion_data() {}
    function twentynineteen_add_ellipses_to_nav($nav_menu, $args) {}
    function twentynineteen_nav_menu_link_attributes($atts, $item, $args, $depth) {}
    function twentynineteen_add_dropdown_icons($output, $item, $depth, $args) {}
    function twentynineteen_add_mobile_parent_nav_menu_items($sorted_menu_items, $args) {}
    function twentynineteen_hsl_hex($h, $s, $l, $to_hex = true) {}
    /**
     * Prevent switching to Twenty Nineteen on old versions of WordPress.
     *
     * Switches to the default theme.
     *
     * @since Twenty Nineteen 1.0.0
     */
    function twentynineteen_switch_theme() {}
    /**
     * Adds a message for unsuccessful theme switch.
     *
     * Prints an update nag after an unsuccessful attempt to switch to
     * Twenty Nineteen on WordPress versions prior to 4.7.
     *
     * @since Twenty Nineteen 1.0.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentynineteen_upgrade_notice() {}
    /**
     * Prevents the Customizer from being loaded on WordPress versions prior to 4.7.
     *
     * @since Twenty Nineteen 1.0.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentynineteen_customize() {}
    /**
     * Prevents the Theme Preview from being loaded on WordPress versions prior to 4.7.
     *
     * @since Twenty Nineteen 1.0.0
     *
     * @global string $wp_version WordPress version.
     */
    function twentynineteen_preview() {}
    /**
     * Sets up theme defaults and registers support for various WordPress features.
     *
     * Note that this function is hooked into the after_setup_theme hook, which
     * runs before the init hook. The init hook is too late for some features, such
     * as indicating support for post thumbnails.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_setup() {}
    /**
     * Register widget area.
     *
     * @since Twenty Fifteen 1.0
     *
     * @link https://codex.wordpress.org/Function_Reference/register_sidebar
     */
    function twentyfifteen_widgets_init() {}
    /**
     * Register Google fonts for Twenty Fifteen.
     *
     * @since Twenty Fifteen 1.0
     *
     * @return string Google fonts URL for the theme.
     */
    function twentyfifteen_fonts_url() {}
    /**
     * JavaScript Detection.
     *
     * Adds a `js` class to the root `<html>` element when JavaScript is detected.
     *
     * @since Twenty Fifteen 1.1
     */
    function twentyfifteen_javascript_detection() {}
    /**
     * Enqueue scripts and styles.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_scripts() {}
    /**
     * Enqueue styles for the block-based editor.
     *
     * @since Twenty Fifteen 2.1
     */
    function twentyfifteen_block_editor_styles() {}
    function twentyfifteen_resource_hints($urls, $relation_type) {}
    /**
     * Add featured image as background image to post navigation elements.
     *
     * @since Twenty Fifteen 1.0
     *
     * @see wp_add_inline_style()
     */
    function twentyfifteen_post_nav_background() {}
    function twentyfifteen_nav_description($item_output, $item, $depth, $args) {}
    function twentyfifteen_search_form_modify($html) {}
    function twentyfifteen_widget_tag_cloud_args($args) {}
    function twentyfifteen_customize_register($wp_customize) {}
    /**
     * Render the site title for the selective refresh partial.
     *
     * @since Twenty Fifteen 1.5
     * @see twentyfifteen_customize_register()
     *
     * @return void
     */
    function twentyfifteen_customize_partial_blogname() {}
    /**
     * Render the site tagline for the selective refresh partial.
     *
     * @since Twenty Fifteen 1.5
     * @see twentyfifteen_customize_register()
     *
     * @return void
     */
    function twentyfifteen_customize_partial_blogdescription() {}
    /**
     * Register color schemes for Twenty Fifteen.
     *
     * Can be filtered with {@see 'twentyfifteen_color_schemes'}.
     *
     * The order of colors in a colors array:
     * 1. Main Background Color.
     * 2. Sidebar Background Color.
     * 3. Box Background Color.
     * 4. Main Text and Link Color.
     * 5. Sidebar Text and Link Color.
     * 6. Meta Box Background Color.
     *
     * @since Twenty Fifteen 1.0
     *
     * @return array An associative array of color scheme options.
     */
    function twentyfifteen_get_color_schemes() {}
    /**
     * Get the current Twenty Fifteen color scheme.
     *
     * @since Twenty Fifteen 1.0
     *
     * @return array An associative array of either the current or default color scheme hex values.
     */
    function twentyfifteen_get_color_scheme() {}
    /**
     * Returns an array of color scheme choices registered for Twenty Fifteen.
     *
     * @since Twenty Fifteen 1.0
     *
     * @return array Array of color schemes.
     */
    function twentyfifteen_get_color_scheme_choices() {}
    function twentyfifteen_sanitize_color_scheme($value) {}
    /**
     * Enqueues front-end CSS for color scheme.
     *
     * @since Twenty Fifteen 1.0
     *
     * @see wp_add_inline_style()
     */
    function twentyfifteen_color_scheme_css() {}
    /**
     * Binds JS listener to make Customizer color_scheme control.
     *
     * Passes color scheme data as colorScheme global.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_customize_control_js() {}
    /**
     * Binds JS handlers to make the Customizer preview reload changes asynchronously.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_customize_preview_js() {}
    function twentyfifteen_get_color_scheme_css($colors) {}
    /**
     * Output an Underscore template for generating CSS for the color scheme.
     *
     * The template generates the css dynamically for instant display in the Customizer
     * preview.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_color_scheme_css_template() {}
    /**
     * Set up the WordPress core custom header feature.
     *
     * @uses twentyfifteen_header_style()
     */
    function twentyfifteen_custom_header_setup() {}
    function twentyfifteen_hex2rgb($color) {}
    /**
     * Styles the header image and text displayed on the blog.
     *
     * @since Twenty Fifteen 1.0
     *
     * @see twentyfifteen_custom_header_setup()
     */
    function twentyfifteen_header_style() {}
    /**
     * Enqueues front-end CSS for the header background color.
     *
     * @since Twenty Fifteen 1.0
     *
     * @see wp_add_inline_style()
     */
    function twentyfifteen_header_background_color_css() {}
    /**
     * Enqueues front-end CSS for the sidebar text color.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_sidebar_text_color_css() {}
    /**
     * Display navigation to next/previous comments when applicable.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_comment_nav() {}
    /**
     * Prints HTML with meta information for the categories, tags.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_entry_meta() {}
    /**
     * Determine whether blog/site has more than one category.
     *
     * @since Twenty Fifteen 1.0
     *
     * @return bool True of there is more than one category, false otherwise.
     */
    function twentyfifteen_categorized_blog() {}
    /**
     * Flush out the transients used in {@see twentyfifteen_categorized_blog()}.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_category_transient_flusher() {}
    /**
     * Display an optional post thumbnail.
     *
     * Wraps the post thumbnail in an anchor element on index views, or a div
     * element when on single views.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_post_thumbnail() {}
    /**
     * Return the post URL.
     *
     * Falls back to the post permalink if no URL is found in the post.
     *
     * @since Twenty Fifteen 1.0
     *
     * @see get_url_in_content()
     *
     * @return string The Link format URL.
     */
    function twentyfifteen_get_link_url() {}
    function twentyfifteen_excerpt_more($more) {}
    /**
     * Displays the optional custom logo.
     *
     * Does nothing if the custom logo is not available.
     *
     * @since Twenty Fifteen 1.5
     */
    function twentyfifteen_the_custom_logo() {}
    /**
     * Prevent switching to Twenty Fifteen on old versions of WordPress.
     *
     * Switches to the default theme.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_switch_theme() {}
    /**
     * Add message for unsuccessful theme switch.
     *
     * Prints an update nag after an unsuccessful attempt to switch to
     * Twenty Fifteen on WordPress versions prior to 4.1.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_upgrade_notice() {}
    /**
     * Prevent the Customizer from being loaded on WordPress versions prior to 4.1.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_customize() {}
    /**
     * Prevent the Theme Preview from being loaded on WordPress versions prior to 4.1.
     *
     * @since Twenty Fifteen 1.0
     */
    function twentyfifteen_preview() {}
    /**
     * Twenty Fourteen setup.
     *
     * Set up theme defaults and registers support for various WordPress features.
     *
     * Note that this function is hooked into the after_setup_theme hook, which
     * runs before the init hook. The init hook is too late for some features, such
     * as indicating support post thumbnails.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_setup() {}
    /**
     * Adjust content_width value for image attachment template.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_content_width() {}
    /**
     * Getter function for Featured Content Plugin.
     *
     * @since Twenty Fourteen 1.0
     *
     * @return array An array of WP_Post objects.
     */
    function twentyfourteen_get_featured_posts() {}
    /**
     * A helper conditional function that returns a boolean value.
     *
     * @since Twenty Fourteen 1.0
     *
     * @return bool Whether there are featured posts.
     */
    function twentyfourteen_has_featured_posts() {}
    /**
     * Register three Twenty Fourteen widget areas.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_widgets_init() {}
    /**
     * Register Lato Google font for Twenty Fourteen.
     *
     * @since Twenty Fourteen 1.0
     *
     * @return string
     */
    function twentyfourteen_font_url() {}
    /**
     * Enqueue scripts and styles for the front end.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_scripts() {}
    /**
     * Enqueue Google fonts style to admin screen for custom header display.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_admin_fonts() {}
    function twentyfourteen_resource_hints($urls, $relation_type) {}
    /**
     * Enqueue styles for the block-based editor.
     *
     * @since Twenty Fourteen 2.3
     */
    function twentyfourteen_block_editor_styles() {}
    /**
     * Print the attached image with a link to the next attached image.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_the_attached_image() {}
    /**
     * Print a list of all site contributors who published at least one post.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_list_authors() {}
    function twentyfourteen_body_classes($classes) {}
    function twentyfourteen_post_classes($classes) {}
    function twentyfourteen_wp_title($title, $sep) {}
    function twentyfourteen_widget_tag_cloud_args($args) {}
    function twentyfourteen_customize_register($wp_customize) {}
    /**
     * Render the site title for the selective refresh partial.
     *
     * @since Twenty Fourteen 1.7
     * @see twentyfourteen_customize_register()
     *
     * @return void
     */
    function twentyfourteen_customize_partial_blogname() {}
    /**
     * Render the site tagline for the selective refresh partial.
     *
     * @since Twenty Fourteen 1.7
     * @see twentyfourteen_customize_register()
     *
     * @return void
     */
    function twentyfourteen_customize_partial_blogdescription() {}
    function twentyfourteen_sanitize_layout($layout) {}
    /**
     * Bind JS handlers to make Customizer preview reload changes asynchronously.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_customize_preview_js() {}
    /**
     * Add contextual help to the Themes and Post edit screens.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_contextual_help() {}
    /**
     * Set up the WordPress core custom header settings.
     *
     * @since Twenty Fourteen 1.0
     *
     * @uses twentyfourteen_header_style()
     * @uses twentyfourteen_admin_header_style()
     * @uses twentyfourteen_admin_header_image()
     */
    function twentyfourteen_custom_header_setup() {}
    /**
     * Styles the header image and text displayed on the blog
     *
     * @see twentyfourteen_custom_header_setup().
     */
    function twentyfourteen_header_style() {}
    /**
     * Style the header image displayed on the Appearance > Header screen.
     *
     * @see twentyfourteen_custom_header_setup()
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_admin_header_style() {}
    /**
     * Create the custom header image markup displayed on the Appearance > Header screen.
     *
     * @see twentyfourteen_custom_header_setup()
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_admin_header_image() {}
    /**
     * Display navigation to next/previous set of posts when applicable.
     *
     * @since Twenty Fourteen 1.0
     *
     * @global WP_Query   $wp_query   WordPress Query object.
     * @global WP_Rewrite $wp_rewrite WordPress Rewrite object.
     */
    function twentyfourteen_paging_nav() {}
    /**
     * Display navigation to next/previous post when applicable.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_post_nav() {}
    /**
     * Print HTML with meta information for the current post-date/time and author.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_posted_on() {}
    /**
     * Find out if blog has more than one category.
     *
     * @since Twenty Fourteen 1.0
     *
     * @return boolean true if blog has more than 1 category
     */
    function twentyfourteen_categorized_blog() {}
    /**
     * Flush out the transients used in twentyfourteen_categorized_blog.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_category_transient_flusher() {}
    /**
     * Display an optional post thumbnail.
     *
     * Wraps the post thumbnail in an anchor element on index
     * views, or a div element when on single views.
     *
     * @since Twenty Fourteen 1.0
     * @since Twenty Fourteen 1.4 Was made 'pluggable', or overridable.
     */
    function twentyfourteen_post_thumbnail() {}
    function twentyfourteen_excerpt_more($more) {}
    /**
     * Prevent switching to Twenty Fourteen on old versions of WordPress.
     *
     * Switches to the default theme.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_switch_theme() {}
    /**
     * Add message for unsuccessful theme switch.
     *
     * Prints an update nag after an unsuccessful attempt to switch to
     * Twenty Fourteen on WordPress versions prior to 3.6.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_upgrade_notice() {}
    /**
     * Prevent the Customizer from being loaded on WordPress versions prior to 3.6.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_customize() {}
    /**
     * Prevent the Theme Preview from being loaded on WordPress versions prior to 3.4.
     *
     * @since Twenty Fourteen 1.0
     */
    function twentyfourteen_preview() {}
    /**
     * Twenty Twelve setup.
     *
     * Sets up theme defaults and registers the various WordPress features that
     * Twenty Twelve supports.
     *
     * @uses load_theme_textdomain() For translation/localization support.
     * @uses add_editor_style() To add a Visual Editor stylesheet.
     * @uses add_theme_support() To add support for post thumbnails, automatic feed links,
     *  custom background, and post formats.
     * @uses register_nav_menu() To add support for navigation menus.
     * @uses set_post_thumbnail_size() To set a custom post thumbnail size.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_setup() {}
    /**
     * Return the Google font stylesheet URL if available.
     *
     * The use of Open Sans by default is localized. For languages that use
     * characters not supported by the font, the font can be disabled.
     *
     * @since Twenty Twelve 1.2
     *
     * @return string Font stylesheet or empty string if disabled.
     */
    function twentytwelve_get_font_url() {}
    /**
     * Enqueue scripts and styles for front end.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_scripts_styles() {}
    /**
     * Enqueue styles for the block-based editor.
     *
     * @since Twenty Twelve 2.6
     */
    function twentytwelve_block_editor_styles() {}
    function twentytwelve_resource_hints($urls, $relation_type) {}
    function twentytwelve_mce_css($mce_css) {}
    function twentytwelve_wp_title($title, $sep) {}
    function twentytwelve_page_menu_args($args) {}
    /**
     * Register sidebars.
     *
     * Registers our main widget area and the front page widget areas.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_widgets_init() {}
    function twentytwelve_content_nav($html_id) {}
    function twentytwelve_comment($comment, $args, $depth) {}
    /**
     * Set up post entry meta.
     *
     * Prints HTML with meta information for current post: categories, tags, permalink, author, and date.
     *
     * Create your own twentytwelve_entry_meta() to override in a child theme.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_entry_meta() {}
    function twentytwelve_body_class($classes) {}
    /**
     * Adjust content width in certain contexts.
     *
     * Adjusts content_width value for full-width and single image attachment
     * templates, and when there are no active widgets in the sidebar.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_content_width() {}
    function twentytwelve_customize_register($wp_customize) {}
    /**
     * Render the site title for the selective refresh partial.
     *
     * @since Twenty Twelve 2.0
     * @see twentytwelve_customize_register()
     *
     * @return void
     */
    function twentytwelve_customize_partial_blogname() {}
    /**
     * Render the site tagline for the selective refresh partial.
     *
     * @since Twenty Twelve 2.0
     * @see twentytwelve_customize_register()
     *
     * @return void
     */
    function twentytwelve_customize_partial_blogdescription() {}
    /**
     * Enqueue Javascript postMessage handlers for the Customizer.
     *
     * Binds JS handlers to make the Customizer preview reload changes asynchronously.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_customize_preview_js() {}
    function twentytwelve_widget_tag_cloud_args($args) {}
    /**
     * Set up the WordPress core custom header arguments and settings.
     *
     * @uses add_theme_support() to register support for 3.4 and up.
     * @uses twentytwelve_header_style() to style front end.
     * @uses twentytwelve_admin_header_style() to style wp-admin form.
     * @uses twentytwelve_admin_header_image() to add custom markup to wp-admin form.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_custom_header_setup() {}
    /**
     * Load our special font CSS file.
     *
     * @since Twenty Twelve 1.2
     */
    function twentytwelve_custom_header_fonts() {}
    /**
     * Style the header text displayed on the blog.
     *
     * get_header_textcolor() options: 515151 is default, hide text (returns 'blank'), or any hex value.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_header_style() {}
    /**
     * Style the header image displayed on the Appearance > Header admin panel.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_admin_header_style() {}
    /**
     * Output markup to be displayed on the Appearance > Header admin panel.
     *
     * This callback overrides the default markup displayed there.
     *
     * @since Twenty Twelve 1.0
     */
    function twentytwelve_admin_header_image() {}
    /**
     * Set up theme defaults and registers support for various WordPress features.
     *
     * Note that this function is hooked into the after_setup_theme hook, which runs
     * before the init hook. The init hook is too late for some features, such as indicating
     * support post thumbnails.
     *
     * To override twentyten_setup() in a child theme, add your own twentyten_setup to your child theme's
     * functions.php file.
     *
     * @uses add_theme_support()        To add support for post thumbnails, custom headers and backgrounds, and automatic feed links.
     * @uses register_nav_menus()       To add support for navigation menus.
     * @uses add_editor_style()         To style the visual editor.
     * @uses load_theme_textdomain()    For translation/localization support.
     * @uses register_default_headers() To register the default custom header images provided with the theme.
     * @uses set_post_thumbnail_size()  To set a custom post thumbnail size.
     *
     * @since Twenty Ten 1.0
     */
    function twentyten_setup() {}
    /**
     * Style the header image displayed on the Appearance > Header admin panel.
     *
     * Referenced via add_custom_image_header() in twentyten_setup().
     *
     * @since Twenty Ten 1.0
     */
    function twentyten_admin_header_style() {}
    function twentyten_page_menu_args($args) {}
    function twentyten_excerpt_length($length) {}
    /**
     * Return a "Continue Reading" link for excerpts.
     *
     * @since Twenty Ten 1.0
     *
     * @return string "Continue Reading" link.
     */
    function twentyten_continue_reading_link() {}
    function twentyten_auto_excerpt_more($more) {}
    function twentyten_custom_excerpt_more($output) {}
    function twentyten_remove_gallery_css($css) {}
    function twentyten_comment($comment, $args, $depth) {}
    /**
     * Register widgetized areas, including two sidebars and four widget-ready columns in the footer.
     *
     * To override twentyten_widgets_init() in a child theme, remove the action hook and add your own
     * function tied to the init hook.
     *
     * @since Twenty Ten 1.0
     *
     * @uses register_sidebar()
     */
    function twentyten_widgets_init() {}
    /**
     * Remove the default styles that are packaged with the Recent Comments widget.
     *
     * To override this in a child theme, remove the filter and optionally add your own
     * function tied to the widgets_init action hook.
     *
     * This function uses a filter (show_recent_comments_widget_style) new in WordPress 3.1
     * to remove the default style. Using Twenty Ten 1.2 in WordPress 3.0 will show the styles,
     * but they won't have any effect on the widget in default Twenty Ten styling.
     *
     * @since Twenty Ten 1.0
     */
    function twentyten_remove_recent_comments_style() {}
    /**
     * Print HTML with meta information for the current post-date/time and author.
     *
     * @since Twenty Ten 1.0
     */
    function twentyten_posted_on() {}
    /**
     * Print HTML with meta information for the current post (category, tags and permalink).
     *
     * @since Twenty Ten 1.0
     */
    function twentyten_posted_in() {}
    /**
     * Retrieve the IDs for images in a gallery.
     *
     * @uses get_post_galleries() First, if available. Falls back to shortcode parsing,
     *                            then as last option uses a get_posts() call.
     *
     * @since Twenty Ten 1.6.
     *
     * @return array List of image IDs from the post gallery.
     */
    function twentyten_get_gallery_images() {}
    function twentyten_widget_tag_cloud_args($args) {}
    /**
     * Enqueue scripts and styles for front end.
     *
     * @since Twenty Ten 2.6
     */
    function twentyten_scripts_styles() {}
    /**
     * Enqueue styles for the block-based editor.
     *
     * @since Twenty Ten 2.6
     */
    function twentyten_block_editor_styles() {}

    /**
     * The custom header image class.
     *
     * @since 2.1.0
     */
    class Custom_Image_Header {
        /**
         * Callback for administration header.
         *
         * @var callable
         * @since 2.1.0
         */
        public $admin_header_callback;
        /**
         * Callback for header div.
         *
         * @var callable
         * @since 3.0.0
         */
        public $admin_image_div_callback;
        /**
         * Holds default headers.
         *
         * @var array
         * @since 3.0.0
         */
        public $default_headers;
        /**
         * Used to trigger a success message when settings updated and set to true.
         *
         * @since 3.0.0
         * @var bool
         */
        private $updated;

        public function __construct($admin_header_callback, $admin_image_div_callback = '') {}
        /**
         * Set up the hooks for the Custom Header admin page.
         *
         * @since 2.1.0
         */
        public function init() {}
        /**
         * Adds contextual help.
         *
         * @since 3.0.0
         */
        public function help() {}
        /**
         * Get the current step.
         *
         * @since 2.6.0
         *
         * @return int Current step
         */
        public function step() {}
        /**
         * Set up the enqueue for the JavaScript files.
         *
         * @since 2.1.0
         */
        public function js_includes() {}
        /**
         * Set up the enqueue for the CSS files
         *
         * @since 2.7.0
         */
        public function css_includes() {}
        /**
         * Execute custom header modification.
         *
         * @since 2.6.0
         */
        public function take_action() {}
        /**
         * Process the default headers
         *
         * @since 3.0.0
         *
         * @global array $_wp_default_headers
         */
        public function process_default_headers() {}
        public function show_header_selector($type = 'default') {}
        /**
         * Execute JavaScript depending on step.
         *
         * @since 2.1.0
         */
        public function js() {}
        /**
         * Display JavaScript based on Step 1 and 3.
         *
         * @since 2.6.0
         */
        public function js_1() {}
        /**
         * Display JavaScript based on Step 2.
         *
         * @since 2.6.0
         */
        public function js_2() {}
        /**
         * Fires just before the submit button in the custom header options form.
         *
         * @since 3.1.0
         */
        public function step_1() {}
        /** This filter is documented in wp-admin/custom-header.php */
        public function step_2() {}
        /**
         * Upload the file to be cropped in the second step.
         *
         * @since 3.4.0
         */
        public function step_2_manage_upload() {}
        /** This filter is documented in wp-admin/custom-header.php */
        public function step_3() {}
        /**
         * Display last step of custom header image page.
         *
         * @since 2.1.0
         */
        public function finished() {}
        /**
         * Display the page based on the current step.
         *
         * @since 2.1.0
         */
        public function admin_page() {}
        public function attachment_fields_to_edit($form_fields) {}
        public function filter_upload_tabs($tabs) {}
        public function set_header_image($choice) {}
        /**
         * Remove a header image.
         *
         * @since 3.4.0
         */
        public function remove_header_image() {}
        /**
         * Reset a header image to the default image for the theme.
         *
         * This method does not do anything if the theme does not have a default header image.
         *
         * @since 3.4.0
         */
        public function reset_header_image() {}
        public function get_header_dimensions($dimensions) {}
        public function create_attachment_object($cropped, $parent_attachment_id) {}
/**
 * Filters the header image attachment metadata.
 *
 * @since 3.9.0
 *
 * @see wp_generate_attachment_metadata()
 *
 * @param array $metadata Attachment metadata.
 */
        public function insert_attachment(/**
 * Filters the header image attachment metadata.
 *
 * @since 3.9.0
 *
 * @see wp_generate_attachment_metadata()
 *
 * @param array $metadata Attachment metadata.
 */
$object, /**
 * Filters the header image attachment metadata.
 *
 * @since 3.9.0
 *
 * @see wp_generate_attachment_metadata()
 *
 * @param array $metadata Attachment metadata.
 */
$cropped) {}
        /** This filter is documented in wp-admin/custom-header.php */
        public function ajax_header_crop() {}
        /**
         * Given an attachment ID for a header image, updates its "last used"
         * timestamp to now.
         *
         * Triggered when the user tries adds a new header image from the
         * Media Manager, even if s/he doesn't save that change.
         *
         * @since 3.9.0
         */
        public function ajax_header_add() {}
        /**
         * Given an attachment ID for a header image, unsets it as a user-uploaded
         * header image for the current theme.
         *
         * Triggered when the user clicks the overlay "X" button next to each image
         * choice in the Customizer's Header tool.
         *
         * @since 3.9.0
         */
        public function ajax_header_remove() {}
        public function customize_set_last_used($wp_customize) {}
        /**
         * Gets the details of default header images if defined.
         *
         * @since 3.9.0
         *
         * @return array Default header images.
         */
        public function get_default_header_images() {}
        /**
         * Gets the previously uploaded header images.
         *
         * @since 3.9.0
         *
         * @return array Uploaded header images.
         */
        public function get_uploaded_header_images() {}
        public function get_previous_crop($object) {}
    }

    /**
     * The custom background class.
     *
     * @since 3.0.0
     */
    class Custom_Background {
        /**
         * Callback for administration header.
         *
         * @var callable
         * @since 3.0.0
         */
        public $admin_header_callback;
        /**
         * Callback for header div.
         *
         * @var callable
         * @since 3.0.0
         */
        public $admin_image_div_callback;
        /**
         * Used to trigger a success message when settings updated and set to true.
         *
         * @since 3.0.0
         * @var bool
         */
        private $updated;

        public function __construct($admin_header_callback = '', $admin_image_div_callback = '') {}
        /**
         * Set up the hooks for the Custom Background admin page.
         *
         * @since 3.0.0
         */
        public function init() {}
        /**
         * Set up the enqueue for the CSS & JavaScript files.
         *
         * @since 3.0.0
         */
        public function admin_load() {}
        /**
         * Execute custom background modification.
         *
         * @since 3.0.0
         */
        public function take_action() {}
        /**
         * Display the custom background page.
         *
         * @since 3.0.0
         */
        public function admin_page() {}
        /** This action is documented in wp-admin/custom-header.php */
        public function handle_upload() {}
        /**
         * Ajax handler for adding custom background context to an attachment.
         *
         * Triggers when the user adds a new background image from the
         * Media Manager.
         *
         * @since 4.1.0
         */
        public function ajax_background_add() {}
        public function attachment_fields_to_edit($form_fields) {}
        public function filter_upload_tabs($tabs) {}
        /** This filter is documented in wp-admin/includes/media.php */
        public function wp_set_background_image() {}
    }

    /**
     * Core class used to implement displaying post comments in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_Comments_List_Table
     */
    class WP_Post_Comments_List_Table extends \wp_comments_list_table {
        /**
         * @return array
         */
        protected function get_column_info() {}
        /**
         * @return array
         */
        protected function get_table_classes() {}
        public function display($output_empty = false) {}
        public function get_per_page($comment_status = false) {}
    }

    /**
     * Core class used to implement displaying terms in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Terms_List_Table extends \wp_list_table {
        public $callback_args;
        private $level;

        public function __construct($args = array( )) {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * Filters the number of terms displayed per page for the Categories list table.
         *
         * @since 2.8.0
         *
         * @param int $tags_per_page Number of categories to be displayed. Default 20.
         */
        public function prepare_items() {}
        /**
         * @return bool
         */
        public function has_items() {}
        /**
         */
        public function no_items() {}
        /**
         * @return array
         */
        protected function get_bulk_actions() {}
        /**
         * @return string
         */
        public function current_action() {}
        /**
         * @return array
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        /**
         */
        public function display_rows_or_placeholder() {}
        private function _rows($taxonomy, $terms, $children, $start, $per_page, $count, $parent = 0, $level = 0) {}
        public function single_row($tag, $level = 0) {}
        public function column_cb($tag) {}
/** This filter is documented in wp-admin/edit-tag-form.php */
        public function column_name(/** This filter is documented in wp-admin/edit-tag-form.php */
$tag) {}
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'name'.
         */
        protected function get_default_primary_column_name() {}
/**
 * Filters the action links displayed for each term in the terms list table.
 *
 * The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.
 *
 * @since 3.0.0
 *
 * @param string[] $actions An array of action links to be displayed. Default
 *                          'Edit', 'Quick Edit', 'Delete', and 'View'.
 * @param WP_Term  $tag     Term object.
 */
        protected function handle_row_actions(/**
 * Filters the action links displayed for each term in the terms list table.
 *
 * The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.
 *
 * @since 3.0.0
 *
 * @param string[] $actions An array of action links to be displayed. Default
 *                          'Edit', 'Quick Edit', 'Delete', and 'View'.
 * @param WP_Term  $tag     Term object.
 */
$tag, /**
 * Filters the action links displayed for each term in the terms list table.
 *
 * The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.
 *
 * @since 3.0.0
 *
 * @param string[] $actions An array of action links to be displayed. Default
 *                          'Edit', 'Quick Edit', 'Delete', and 'View'.
 * @param WP_Term  $tag     Term object.
 */
$column_name, /**
 * Filters the action links displayed for each term in the terms list table.
 *
 * The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.
 *
 * @since 3.0.0
 *
 * @param string[] $actions An array of action links to be displayed. Default
 *                          'Edit', 'Quick Edit', 'Delete', and 'View'.
 * @param WP_Term  $tag     Term object.
 */
$primary) {}
        public function column_description($tag) {}
/** This filter is documented in wp-admin/edit-tag-form.php */
        public function column_slug(/** This filter is documented in wp-admin/edit-tag-form.php */
$tag) {}
        public function column_posts($tag) {}
        public function column_links($tag) {}
/**
 * Filters the displayed columns in the terms list table.
 *
 * The dynamic portion of the hook name, `$this->screen->taxonomy`,
 * refers to the slug of the current taxonomy.
 *
 * @since 2.8.0
 *
 * @param string $string      Blank string.
 * @param string $column_name Name of the column.
 * @param int    $term_id     Term ID.
 */
        public function column_default(/**
 * Filters the displayed columns in the terms list table.
 *
 * The dynamic portion of the hook name, `$this->screen->taxonomy`,
 * refers to the slug of the current taxonomy.
 *
 * @since 2.8.0
 *
 * @param string $string      Blank string.
 * @param string $column_name Name of the column.
 * @param int    $term_id     Term ID.
 */
$tag, /**
 * Filters the displayed columns in the terms list table.
 *
 * The dynamic portion of the hook name, `$this->screen->taxonomy`,
 * refers to the slug of the current taxonomy.
 *
 * @since 2.8.0
 *
 * @param string $string      Blank string.
 * @param string $column_name Name of the column.
 * @param int    $term_id     Term ID.
 */
$column_name) {}
        /**
         * Outputs the hidden row displayed when inline editing
         *
         * @since 3.1.0
         */
        public function inline_edit() {}
    }

    /**
     * Core class used to implement displaying users in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Users_List_Table extends \wp_list_table {
        /**
         * Site ID to generate the Users list table for.
         *
         * @since 3.1.0
         * @var int
         */
        public $site_id;
        /**
         * Whether or not the current Users list table is for Multisite.
         *
         * @since 3.1.0
         * @var bool
         */
        public $is_site_users;

        public function __construct($args = array( )) {}
        /**
         * Check the current user's permissions.
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * Prepare the users list for display.
         *
         * @since 3.1.0
         *
         * @global string $role
         * @global string $usersearch
         */
        public function prepare_items() {}
        /**
         * Output 'no users' message.
         *
         * @since 3.1.0
         */
        public function no_items() {}
        /**
         * Return an associative array listing all the views that can be used
         * with this table.
         *
         * Provides a list of roles and user count for that role for easy
         * Filtersing of the user table.
         *
         * @since  3.1.0
         *
         * @global string $role
         *
         * @return array An array of HTML links, one for each view.
         */
        protected function get_views() {}
        /**
         * Retrieve an associative array of bulk actions available on this table.
         *
         * @since  3.1.0
         *
         * @return array Array of bulk actions.
         */
        protected function get_bulk_actions() {}
/**
 * Fires immediately following the closing "actions" div in the tablenav for the users
 * list table.
 *
 * @since 4.9.0
 *
 * @param string $which The location of the extra table nav markup: 'top' or 'bottom'.
 */
        protected function extra_tablenav(/**
 * Fires immediately following the closing "actions" div in the tablenav for the users
 * list table.
 *
 * @since 4.9.0
 *
 * @param string $which The location of the extra table nav markup: 'top' or 'bottom'.
 */
$which) {}
        /**
         * Capture the bulk action required, and return it.
         *
         * Overridden from the base class implementation to capture
         * the role change drop-down.
         *
         * @since  3.1.0
         *
         * @return string The bulk action required.
         */
        public function current_action() {}
        /**
         * Get a list of columns for the list table.
         *
         * @since  3.1.0
         *
         * @return array Array in which the key is the ID of the column,
         *               and the value is the description.
         */
        public function get_columns() {}
        /**
         * Get a list of sortable columns for the list table.
         *
         * @since 3.1.0
         *
         * @return array Array of sortable columns.
         */
        protected function get_sortable_columns() {}
        /**
         * Generate the list table rows.
         *
         * @since 3.1.0
         */
        public function display_rows() {}
/**
 * Filters the display output of custom columns in the Users list table.
 *
 * @since 2.8.0
 *
 * @param string $output      Custom column output. Default empty.
 * @param string $column_name Column name.
 * @param int    $user_id     ID of the currently-listed user.
 */
        public function single_row(/**
 * Filters the display output of custom columns in the Users list table.
 *
 * @since 2.8.0
 *
 * @param string $output      Custom column output. Default empty.
 * @param string $column_name Column name.
 * @param int    $user_id     ID of the currently-listed user.
 */
$user_object, /**
 * Filters the display output of custom columns in the Users list table.
 *
 * @since 2.8.0
 *
 * @param string $output      Custom column output. Default empty.
 * @param string $column_name Column name.
 * @param int    $user_id     ID of the currently-listed user.
 */
$style = '', /**
 * Filters the display output of custom columns in the Users list table.
 *
 * @since 2.8.0
 *
 * @param string $output      Custom column output. Default empty.
 * @param string $column_name Column name.
 * @param int    $user_id     ID of the currently-listed user.
 */
$role = '', /**
 * Filters the display output of custom columns in the Users list table.
 *
 * @since 2.8.0
 *
 * @param string $output      Custom column output. Default empty.
 * @param string $column_name Column name.
 * @param int    $user_id     ID of the currently-listed user.
 */
$numposts = 0) {}
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'username'.
         */
        protected function get_default_primary_column_name() {}
/**
 * Filters the returned array of roles for a user.
 *
 * @since 4.4.0
 *
 * @param string[] $role_list   An array of user roles.
 * @param WP_User  $user_object A WP_User object.
 */
        protected function get_role_list(/**
 * Filters the returned array of roles for a user.
 *
 * @since 4.4.0
 *
 * @param string[] $role_list   An array of user roles.
 * @param WP_User  $user_object A WP_User object.
 */
$user_object) {}
    }

    /**
     * Core class used for upgrading/installing plugins.
     *
     * It is designed to upgrade/install plugins from a local zip, remote zip URL,
     * or uploaded zip file.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     *
     * @see WP_Upgrader
     */
    class Plugin_Upgrader extends \wp_upgrader {
        /**
         * Plugin upgrade result.
         *
         * @since 2.8.0
         * @var array|WP_Error $result
         *
         * @see WP_Upgrader::$result
         */
        public $result;
        /**
         * Whether a bulk upgrade/installation is being performed.
         *
         * @since 2.9.0
         * @var bool $bulk
         */
        public $bulk;

        /**
         * Initialize the upgrade strings.
         *
         * @since 2.8.0
         */
        public function upgrade_strings() {}
        /**
         * Initialize the installation strings.
         *
         * @since 2.8.0
         */
        public function install_strings() {}
        public function install($package, $args = array( )) {}
        public function upgrade($plugin, $args = array( )) {}
/** This action is documented in wp-admin/includes/class-wp-upgrader.php */
        public function bulk_upgrade(/** This action is documented in wp-admin/includes/class-wp-upgrader.php */
$plugins, /** This action is documented in wp-admin/includes/class-wp-upgrader.php */
$args = array( )) {}
        public function check_package($source) {}
        /**
         * Retrieve the path to the file that contains the plugin info.
         *
         * This isn't used internally in the class, but is called by the skins.
         *
         * @since 2.8.0
         *
         * @return string|false The full path to the main plugin file, or false.
         */
        public function plugin_info() {}
        public function deactivate_plugin_before_upgrade($return, $plugin) {}
        public function delete_old_plugin($removed, $local_destination, $remote_destination, $plugin) {}
    }

    /**
     * Bulk Plugin Upgrader Skin for WordPress Plugin Upgrades.
     *
     * @since 3.0.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see Bulk_Upgrader_Skin
     */
    class Bulk_Plugin_Upgrader_Skin extends \bulk_upgrader_skin {
        public $plugin_info;

        public function add_strings() {}
        public function before($title = '') {}
        public function after($title = '') {}
        /**
         */
        public function bulk_footer() {}
    }

    /**
     * Core class used to implement displaying themes to install in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_Themes_List_Table
     */
    class WP_Theme_Install_List_Table extends \wp_themes_list_table {
        public $features;

        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * Filters API request arguments for each Install Themes screen tab.
         *
         * The dynamic portion of the hook name, `$tab`, refers to the theme install
         * tabs. Default tabs are 'dashboard', 'search', 'upload', 'featured',
         * 'new', and 'updated'.
         *
         * @since 3.7.0
         *
         * @param array $args An array of themes API arguments.
         */
        public function prepare_items() {}
        /**
         */
        public function no_items() {}
        /**
         * @global array $tabs
         * @global string $tab
         * @return array
         */
        protected function get_views() {}
        /**
         * Fires in the Install Themes list table header.
         *
         * @since 2.8.0
         */
        public function display() {}
        /**
         */
        public function display_rows() {}
/**
 * Filters the install action links for a theme in the Install Themes list table.
 *
 * @since 3.4.0
 *
 * @param string[] $actions An array of theme action links. Defaults are
 *                          links to Install Now, Preview, and Details.
 * @param WP_Theme $theme   Theme object.
 */
        public function single_row(/**
 * Filters the install action links for a theme in the Install Themes list table.
 *
 * @since 3.4.0
 *
 * @param string[] $actions An array of theme action links. Defaults are
 *                          links to Install Now, Preview, and Details.
 * @param WP_Theme $theme   Theme object.
 */
$theme) {}
        /**
         * Prints the wrapper for the theme installer.
         */
        public function theme_installer() {}
        public function theme_installer_single($theme) {}
        public function install_theme_info($theme) {}
        public function _js_vars($extra_args = array( )) {}
        private function _get_theme_status($theme) {}
    }

    /**
     * WordPress Filesystem Class for implementing SSH2
     *
     * To use this class you must follow these steps for PHP 5.2.6+
     *
     * @contrib http://kevin.vanzonneveld.net/techblog/article/make_ssh_connections_with_php/ - Installation Notes
     *
     * Complie libssh2 (Note: Only 0.14 is officaly working with PHP 5.2.6+ right now, But many users have found the latest versions work)
     *
     * cd /usr/src
     * wget http://surfnet.dl.sourceforge.net/sourceforge/libssh2/libssh2-0.14.tar.gz
     * tar -zxvf libssh2-0.14.tar.gz
     * cd libssh2-0.14/
     * ./configure
     * make all install
     *
     * Note: Do not leave the directory yet!
     *
     * Enter: pecl install -f ssh2
     *
     * Copy the ssh.so file it creates to your PHP Module Directory.
     * Open up your PHP.INI file and look for where extensions are placed.
     * Add in your PHP.ini file: extension=ssh2.so
     *
     * Restart Apache!
     * Check phpinfo() streams to confirm that: ssh2.shell, ssh2.exec, ssh2.tunnel, ssh2.scp, ssh2.sftp  exist.
     *
     * Note: as of WordPress 2.8, This utilises the PHP5+ function 'stream_get_contents'
     *
     * @since 2.7.0
     *
     * @package WordPress
     * @subpackage Filesystem
     */
    class WP_Filesystem_SSH2 extends \wp_filesystem_base {
        /**
         */
        public $link;
        /**
         * @var resource
         */
        public $sftp_link;
        public $keys;

        public function __construct($opt = '') {}
        /**
         * @return bool
         */
        public function connect() {}
        public function sftp_path($path) {}
        public function run_command($command, $returnbool = false) {}
        public function get_contents($file) {}
        public function get_contents_array($file) {}
        public function put_contents($file, $contents, $mode = false) {}
        /**
         * @return bool
         */
        public function cwd() {}
        public function chdir($dir) {}
        public function chgrp($file, $group, $recursive = false) {}
        public function chmod($file, $mode = false, $recursive = false) {}
        public function chown($file, $owner, $recursive = false) {}
        public function owner($file) {}
        public function getchmod($file) {}
        public function group($file) {}
        public function copy($source, $destination, $overwrite = false, $mode = false) {}
        public function move($source, $destination, $overwrite = false) {}
        public function delete($file, $recursive = false, $type = false) {}
        public function exists($file) {}
        public function is_file($file) {}
        public function is_dir($path) {}
        public function is_readable($file) {}
        public function is_writable($file) {}
        public function atime($file) {}
        public function mtime($file) {}
        public function size($file) {}
        public function touch($file, $time = 0, $atime = 0) {}
        public function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {}
        public function rmdir($path, $recursive = false) {}
        public function dirlist($path, $include_hidden = true, $recursive = false) {}
    }

    /**
     * Class WP_Community_Events.
     *
     * A client for api.wordpress.org/events.
     *
     * @since 4.8.0
     */
    class WP_Community_Events {
        /**
         * ID for a WordPress user account.
         *
         * @since 4.8.0
         *
         * @var int
         */
        protected $user_id;
        /**
         * Stores location data for the user.
         *
         * @since 4.8.0
         *
         * @var bool|array
         */
        protected $user_location;

        public function __construct($user_id, $user_location = false) {}
        public function get_events($location_search = '', $timezone = '') {}
        protected function get_request_args($search = '', $timezone = '') {}
        /**
         * Determines the user's actual IP address and attempts to partially
         * anonymize an IP address by converting it to a network ID.
         *
         * Geolocating the network ID usually returns a similar location as the
         * actual IP, but provides some privacy for the user.
         *
         * $_SERVER['REMOTE_ADDR'] cannot be used in all cases, such as when the user
         * is making their request through a proxy, or when the web server is behind
         * a proxy. In those cases, $_SERVER['REMOTE_ADDR'] is set to the proxy address rather
         * than the user's actual address.
         *
         * Modified from https://stackoverflow.com/a/2031935/450127, MIT license.
         * Modified from https://github.com/geertw/php-ip-anonymizer, MIT license.
         *
         * SECURITY WARNING: This function is _NOT_ intended to be used in
         * circumstances where the authenticity of the IP address matters. This does
         * _NOT_ guarantee that the returned address is valid or accurate, and it can
         * be easily spoofed.
         *
         * @since 4.8.0
         *
         * @return false|string The anonymized address on success; the given address
         *                      or false on failure.
         */
        public static function get_unsafe_client_ip() {}
        protected function coordinates_match($a, $b) {}
        protected function get_events_transient_key($location) {}
        protected function cache_events($events, $expiration = false) {}
        /**
         * Gets cached events.
         *
         * @since 4.8.0
         *
         * @return false|array false on failure; an array containing `location`
         *                     and `events` items on success.
         */
        public function get_cached_events() {}
        protected function format_event_data_time($response_body) {}
        protected function trim_events($response_body) {}
        protected function maybe_log_events_response($message, $details) {}
    }

    /**
     * Core class used for handling file uploads.
     *
     * This class handles the upload process and passes it as if it's a local file
     * to the Upgrade/Installer functions.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     */
    class File_Upload_Upgrader {
        /**
         * The full path to the file package.
         *
         * @since 2.8.0
         * @var string $package
         */
        public $package;
        /**
         * The name of the file.
         *
         * @since 2.8.0
         * @var string $filename
         */
        public $filename;
        /**
         * The ID of the attachment post for this file.
         *
         * @since 3.3.0
         * @var int $id
         */
        public $id;

        public function __construct($form, $urlholder) {}
        /**
         * Delete the attachment/uploaded file.
         *
         * @since 3.2.2
         *
         * @return bool Whether the cleanup was successful.
         */
        public function cleanup() {}
    }

    /**
     * Translation Upgrader Skin for WordPress Translation Upgrades.
     *
     * @since 3.7.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Language_Pack_Upgrader_Skin extends \wp_upgrader_skin {
        public $language_update;
        public $done_header;
        public $done_footer;
        public $display_footer_actions;

        public function __construct($args = array( )) {}
        /**
         */
        public function before() {}
        public function error($error) {}
        /**
         */
        public function after() {}
        /**
         * Filters the list of action links available following a translations update.
         *
         * @since 3.7.0
         *
         * @param string[] $update_actions Array of translations update links.
         */
        public function bulk_footer() {}
    }

    /**
     * Core class used for updating/installing language packs (translations)
     * for plugins, themes, and core.
     *
     * @since 3.7.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     *
     * @see WP_Upgrader
     */
    class Language_Pack_Upgrader extends \wp_upgrader {
        /**
         * Result of the language pack upgrade.
         *
         * @since 3.7.0
         * @var array|WP_Error $result
         * @see WP_Upgrader::$result
         */
        public $result;
        /**
         * Whether a bulk upgrade/installation is being performed.
         *
         * @since 3.7.0
         * @var bool $bulk
         */
        public $bulk;

/**
 * Filters whether to asynchronously update translation for core, a plugin, or a theme.
 *
 * @since 4.0.0
 *
 * @param bool   $update          Whether to update.
 * @param object $language_update The update offer.
 */
        public static function async_upgrade(/**
 * Filters whether to asynchronously update translation for core, a plugin, or a theme.
 *
 * @since 4.0.0
 *
 * @param bool   $update          Whether to update.
 * @param object $language_update The update offer.
 */
$upgrader = false) {}
        /**
         * Initialize the upgrade strings.
         *
         * @since 3.7.0
         */
        public function upgrade_strings() {}
        public function upgrade($update = false, $args = array( )) {}
/** This action is documented in wp-admin/includes/class-wp-upgrader.php */
        public function bulk_upgrade(/** This action is documented in wp-admin/includes/class-wp-upgrader.php */
$language_updates = array( ), /** This action is documented in wp-admin/includes/class-wp-upgrader.php */
$args = array( )) {}
        public function check_package($source, $remote_source) {}
        public function get_name_for_update($update) {}
        public function clear_destination($remote_destination) {}
    }

    /**
     * Plugin Installer Skin for WordPress Plugin Installer.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Plugin_Installer_Skin extends \wp_upgrader_skin {
        public $api;
        public $type;

        public function __construct($args = array( )) {}
        /**
         */
        public function before() {}
        /**
         * Filters the list of action links available following a single plugin installation.
         *
         * @since 2.7.0
         *
         * @param string[] $install_actions Array of plugin action links.
         * @param object   $api             Object containing WordPress.org API plugin data. Empty
         *                                  for non-API installs, such as when a plugin is installed
         *                                  via upload.
         * @param string   $plugin_file     Path to the plugin file relative to the plugins directory.
         */
        public function after() {}
    }

    class PclZip {
        public $zipname;
        public $zip_fd;
        public $error_code;
        public $error_string;
        public $magic_quotes_status;

        function __construct($p_zipname) {}
        public function PclZip($p_zipname) {}
        function create($p_filelist) {}
        function add($p_filelist) {}
        function listContent() {}
        function extract() {}
        function extractByIndex($p_index) {}
        function delete() {}
        function deleteByIndex($p_index) {}
        function properties() {}
        function duplicate($p_archive) {}
        function merge($p_archive_to_add) {}
        function errorCode() {}
        function errorName($p_with_code = false) {}
        function errorInfo($p_full = false) {}
        function privCheckFormat($p_level = 0) {}
        function privParseOptions($p_options_list, $p_size, $v_result_list, $v_requested_options = false) {}
        function privOptionDefaultThreshold($p_options) {}
        function privFileDescrParseAtt($p_file_list, $p_filedescr, $v_options, $v_requested_options = false) {}
        function privFileDescrExpand($p_filedescr_list, $p_options) {}
        function privCreate($p_filedescr_list, $p_result_list, $p_options) {}
        function privAdd($p_filedescr_list, $p_result_list, $p_options) {}
        function privOpenFd($p_mode) {}
        function privCloseFd() {}
        function privAddList($p_filedescr_list, $p_result_list, $p_options) {}
        function privAddFileList($p_filedescr_list, $p_result_list, $p_options) {}
        function privAddFile($p_filedescr, $p_header, $p_options) {}
        function privAddFileUsingTempFile($p_filedescr, $p_header, $p_options) {}
        function privCalculateStoredFilename($p_filedescr, $p_options) {}
        function privWriteFileHeader($p_header) {}
        function privWriteCentralFileHeader($p_header) {}
        function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment) {}
        function privList($p_list) {}
        function privConvertHeader2FileInfo($p_header, $p_info) {}
        function privExtractByRule($p_file_list, $p_path, $p_remove_path, $p_remove_all_path, $p_options) {}
        function privExtractFile($p_entry, $p_path, $p_remove_path, $p_remove_all_path, $p_options) {}
        function privExtractFileUsingTempFile($p_entry, $p_options) {}
        function privExtractFileInOutput($p_entry, $p_options) {}
        function privExtractFileAsString($p_entry, $p_string, $p_options) {}
        function privReadFileHeader($p_header) {}
        function privReadCentralFileHeader($p_header) {}
        function privCheckFileHeaders($p_local_header, $p_central_header) {}
        function privReadEndCentralDir($p_central_dir) {}
        function privDeleteByRule($p_result_list, $p_options) {}
        function privDirCheck($p_dir, $p_is_dir = false) {}
        function privMerge($p_archive_to_add) {}
        function privDuplicate($p_archive_filename) {}
        function privErrorLog($p_error_code = 0, $p_error_string = '') {}
        function privErrorReset() {}
        function privDisableMagicQuotes() {}
        function privSwapBackMagicQuotes() {}
    }

    /**
     * Upgrader Skin for Ajax WordPress upgrades.
     *
     * This skin is designed to be used for Ajax updates.
     *
     * @since 4.6.0
     *
     * @see Automatic_Upgrader_Skin
     */
    class WP_Ajax_Upgrader_Skin extends \automatic_upgrader_skin {
        /**
         * Holds the WP_Error object.
         *
         * @since 4.6.0
         * @var null|WP_Error
         */
        protected $errors;

        public function __construct($args = array( )) {}
        /**
         * Retrieves the list of errors.
         *
         * @since 4.6.0
         *
         * @return WP_Error Errors during an upgrade.
         */
        public function get_errors() {}
        /**
         * Retrieves a string for error messages.
         *
         * @since 4.6.0
         *
         * @return string Error messages during an upgrade.
         */
        public function get_error_messages() {}
        public function error($errors) {}
        public function feedback($data) {}
    }

    /**
     * Core class used to implement displaying installed themes in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Themes_List_Table extends \wp_list_table {
        protected $search_terms;
        public $features;

        public function __construct($args = array( )) {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         */
        public function prepare_items() {}
        /**
         */
        public function no_items() {}
        public function tablenav($which = 'top') {}
        /**
         */
        public function display() {}
        /**
         * @return array
         */
        public function get_columns() {}
        /**
         */
        public function display_rows_or_placeholder() {}
        /**
         */
        public function display_rows() {}
        public function search_theme($theme) {}
        public function _js_vars($extra_args = array( )) {}
    }

    /**
     * Create HTML list of nav menu input items.
     *
     * @since 3.0.0
     * @uses Walker_Nav_Menu
     */
    class Walker_Nav_Menu_Checklist extends \walker_nav_menu {
        public function __construct($fields = false) {}
        public function start_lvl($output, $depth = 0, $args = array( )) {}
        public function end_lvl($output, $depth = 0, $args = array( )) {}
/** This filter is documented in wp-includes/post-template.php */
        public function start_el(/** This filter is documented in wp-includes/post-template.php */
$output, /** This filter is documented in wp-includes/post-template.php */
$item, /** This filter is documented in wp-includes/post-template.php */
$depth = 0, /** This filter is documented in wp-includes/post-template.php */
$args = array( ), /** This filter is documented in wp-includes/post-template.php */
$id = 0) {}
    }

    /**
     * Core class used to implement displaying sites in a list table for the network admin.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_MS_Sites_List_Table extends \wp_list_table {
        /**
         * Site status list.
         *
         * @since 4.3.0
         * @var array
         */
        public $status_list;

        public function __construct($args = array( )) {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * Prepares the list of sites for display.
         *
         * @since 3.1.0
         *
         * @global string $s
         * @global string $mode
         * @global wpdb   $wpdb
         */
        public function prepare_items() {}
        /**
         */
        public function no_items() {}
        /**
         * @return array
         */
        protected function get_bulk_actions() {}
        protected function pagination($which) {}
        /**
         * Filters the displayed site columns in Sites list table.
         *
         * @since MU (3.0.0)
         *
         * @param string[] $sites_columns An array of displayed site columns. Default 'cb',
         *                               'blogname', 'lastupdated', 'registered', 'users'.
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        public function column_cb($blog) {}
        public function column_id($blog) {}
        public function column_blogname($blog) {}
        public function column_lastupdated($blog) {}
        public function column_registered($blog) {}
        public function column_users($blog) {}
/**
 * Fires inside the auxiliary 'Actions' column of the Sites list table.
 *
 * By default this column is hidden unless something is hooked to the action.
 *
 * @since MU (3.0.0)
 *
 * @param int $blog_id The site ID.
 */
        public function column_plugins(/**
 * Fires inside the auxiliary 'Actions' column of the Sites list table.
 *
 * By default this column is hidden unless something is hooked to the action.
 *
 * @since MU (3.0.0)
 *
 * @param int $blog_id The site ID.
 */
$blog) {}
/**
 * Fires for each registered custom column in the Sites list table.
 *
 * @since 3.1.0
 *
 * @param string $column_name The name of the column to display.
 * @param int    $blog_id     The site ID.
 */
        public function column_default(/**
 * Fires for each registered custom column in the Sites list table.
 *
 * @since 3.1.0
 *
 * @param string $column_name The name of the column to display.
 * @param int    $blog_id     The site ID.
 */
$blog, /**
 * Fires for each registered custom column in the Sites list table.
 *
 * @since 3.1.0
 *
 * @param string $column_name The name of the column to display.
 * @param int    $blog_id     The site ID.
 */
$column_name) {}
        /**
         * @global string $mode
         */
        public function display_rows() {}
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'blogname'.
         */
        protected function get_default_primary_column_name() {}
/**
 * Filters the action links displayed for each site in the Sites list table.
 *
 * The 'Edit', 'Dashboard', 'Delete', and 'Visit' links are displayed by
 * default for each site. The site's status determines whether to show the
 * 'Activate' or 'Deactivate' link, 'Unarchive' or 'Archive' links, and
 * 'Not Spam' or 'Spam' link for each site.
 *
 * @since 3.1.0
 *
 * @param string[] $actions  An array of action links to be displayed.
 * @param int      $blog_id  The site ID.
 * @param string   $blogname Site path, formatted depending on whether it is a sub-domain
 *                           or subdirectory multisite installation.
 */
        protected function handle_row_actions(/**
 * Filters the action links displayed for each site in the Sites list table.
 *
 * The 'Edit', 'Dashboard', 'Delete', and 'Visit' links are displayed by
 * default for each site. The site's status determines whether to show the
 * 'Activate' or 'Deactivate' link, 'Unarchive' or 'Archive' links, and
 * 'Not Spam' or 'Spam' link for each site.
 *
 * @since 3.1.0
 *
 * @param string[] $actions  An array of action links to be displayed.
 * @param int      $blog_id  The site ID.
 * @param string   $blogname Site path, formatted depending on whether it is a sub-domain
 *                           or subdirectory multisite installation.
 */
$blog, /**
 * Filters the action links displayed for each site in the Sites list table.
 *
 * The 'Edit', 'Dashboard', 'Delete', and 'Visit' links are displayed by
 * default for each site. The site's status determines whether to show the
 * 'Activate' or 'Deactivate' link, 'Unarchive' or 'Archive' links, and
 * 'Not Spam' or 'Spam' link for each site.
 *
 * @since 3.1.0
 *
 * @param string[] $actions  An array of action links to be displayed.
 * @param int      $blog_id  The site ID.
 * @param string   $blogname Site path, formatted depending on whether it is a sub-domain
 *                           or subdirectory multisite installation.
 */
$column_name, /**
 * Filters the action links displayed for each site in the Sites list table.
 *
 * The 'Edit', 'Dashboard', 'Delete', and 'Visit' links are displayed by
 * default for each site. The site's status determines whether to show the
 * 'Activate' or 'Deactivate' link, 'Unarchive' or 'Archive' links, and
 * 'Not Spam' or 'Spam' link for each site.
 *
 * @since 3.1.0
 *
 * @param string[] $actions  An array of action links to be displayed.
 * @param int      $blog_id  The site ID.
 * @param string   $blogname Site path, formatted depending on whether it is a sub-domain
 *                           or subdirectory multisite installation.
 */
$primary) {}
    }

    /**
     * Create HTML list of nav menu input items.
     *
     * @since 3.0.0
     *
     * @see Walker_Nav_Menu
     */
    class Walker_Nav_Menu_Edit extends \walker_nav_menu {
        public function start_lvl($output, $depth = 0, $args = array( )) {}
        public function end_lvl($output, $depth = 0, $args = array( )) {}
        public function start_el($output, $item, $depth = 0, $args = array( ), $id = 0) {}
    }

    /**
     * WP_Privacy_Requests_Table class.
     *
     * @since 4.9.6
     */
    abstract class WP_Privacy_Requests_Table extends \wp_list_table {
        /**
         * Action name for the requests this table will work with. Classes
         * which inherit from WP_Privacy_Requests_Table should define this.
         *
         * Example: 'export_personal_data'.
         *
         * @since 4.9.6
         *
         * @var string $request_type Name of action.
         */
        protected $request_type;
        /**
         * Post type to be used.
         *
         * @since 4.9.6
         *
         * @var string $post_type The post type.
         */
        protected $post_type;

        /**
         * Get columns to show in the list table.
         *
         * @since 4.9.6
         *
         * @return array Array of columns.
         */
        public function get_columns() {}
        /**
         * Get a list of sortable columns.
         *
         * @since 4.9.6
         *
         * @return array Default sortable columns.
         */
        protected function get_sortable_columns() {}
        /**
         * Default primary column.
         *
         * @since 4.9.6
         *
         * @return string Default primary column name.
         */
        protected function get_default_primary_column_name() {}
        /**
         * Count number of requests for each status.
         *
         * @since 4.9.6
         *
         * @return object Number of posts for each status.
         */
        protected function get_request_counts() {}
        /**
         * Get an associative array ( id => link ) with the list of views available on this table.
         *
         * @since 4.9.6
         *
         * @return array Associative array of views in the format of $view_name => $view_markup.
         */
        protected function get_views() {}
        /**
         * Get bulk actions.
         *
         * @since 4.9.6
         *
         * @return array List of bulk actions.
         */
        protected function get_bulk_actions() {}
        /**
         * Process bulk actions.
         *
         * @since 4.9.6
         */
        public function process_bulk_action() {}
        /**
         * Prepare items to output.
         *
         * @since 4.9.6
         * @since 5.1.0 Added support for column sorting.
         */
        public function prepare_items() {}
        public function column_cb($item) {}
        public function column_status($item) {}
        protected function get_timestamp_as_date($timestamp) {}
        public function column_default($item, $column_name) {}
        public function column_email($item) {}
        public function column_next_steps($item) {}
        public function single_row($item) {}
        /**
         * Embed scripts used to perform actions. Overridden by children.
         *
         * @since 4.9.6
         */
        public function embed_scripts() {}
    }

    /**
     * WP_Privacy_Data_Export_Requests_Table class.
     *
     * @since 4.9.6
     */
    class WP_Privacy_Data_Export_Requests_Table extends \wp_privacy_requests_table {
        /**
         * Action name for the requests this table will work with.
         *
         * @since 4.9.6
         *
         * @var string $request_type Name of action.
         */
        protected $request_type;
        /**
         * Post type for the requests.
         *
         * @since 4.9.6
         *
         * @var string $post_type The post type.
         */
        protected $post_type;

/** This filter is documented in wp-admin/includes/ajax-actions.php */
        public function column_email(/** This filter is documented in wp-admin/includes/ajax-actions.php */
$item) {}
/** This filter is documented in wp-admin/includes/ajax-actions.php */
        public function column_next_steps(/** This filter is documented in wp-admin/includes/ajax-actions.php */
$item) {}
    }

    /**
     * WP_Privacy_Data_Removal_Requests_Table class.
     *
     * @since 4.9.6
     */
    class WP_Privacy_Data_Removal_Requests_Table extends \wp_privacy_requests_table {
        /**
         * Action name for the requests this table will work with.
         *
         * @since 4.9.6
         *
         * @var string $request_type Name of action.
         */
        protected $request_type;
        /**
         * Post type for the requests.
         *
         * @since 4.9.6
         *
         * @var string $post_type The post type.
         */
        protected $post_type;

/** This filter is documented in wp-admin/includes/ajax-actions.php */
        public function column_email(/** This filter is documented in wp-admin/includes/ajax-actions.php */
$item) {}
/** This filter is documented in wp-admin/includes/ajax-actions.php */
        public function column_next_steps(/** This filter is documented in wp-admin/includes/ajax-actions.php */
$item) {}
    }

    /**
     * Core class used for handling automatic background updates.
     *
     * @since 3.7.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     */
    class WP_Automatic_Updater {
        /**
         * Tracks update results during processing.
         *
         * @var array
         */
        protected $update_results;

        /**
         * Whether the entire automatic updater is disabled.
         *
         * @since 3.7.0
         */
        public function is_disabled() {}
/**
 * Filters whether the automatic updater should consider a filesystem
 * location to be potentially managed by a version control system.
 *
 * @since 3.7.0
 *
 * @param bool $checkout  Whether a VCS checkout was discovered at $context
 *                        or ABSPATH, or anywhere higher.
 * @param string $context The filesystem context (a path) against which
 *                        filesystem status should be checked.
 */
        public function is_vcs_checkout(/**
 * Filters whether the automatic updater should consider a filesystem
 * location to be potentially managed by a version control system.
 *
 * @since 3.7.0
 *
 * @param bool $checkout  Whether a VCS checkout was discovered at $context
 *                        or ABSPATH, or anywhere higher.
 * @param string $context The filesystem context (a path) against which
 *                        filesystem status should be checked.
 */
$context) {}
        public function should_update($type, $item, $context) {}
/**
 * Filters whether to notify the site administrator of a new core update.
 *
 * By default, administrators are notified when the update offer received
 * from WordPress.org sets a particular flag. This allows some discretion
 * in if and when to notify.
 *
 * This filter is only evaluated once per release. If the same email address
 * was already notified of the same new version, WordPress won't repeatedly
 * email the administrator.
 *
 * This filter is also used on about.php to check if a plugin has disabled
 * these notifications.
 *
 * @since 3.7.0
 *
 * @param bool   $notify Whether the site administrator is notified.
 * @param object $item   The update offer.
 */
        protected function send_core_update_notification_email(/**
 * Filters whether to notify the site administrator of a new core update.
 *
 * By default, administrators are notified when the update offer received
 * from WordPress.org sets a particular flag. This allows some discretion
 * in if and when to notify.
 *
 * This filter is only evaluated once per release. If the same email address
 * was already notified of the same new version, WordPress won't repeatedly
 * email the administrator.
 *
 * This filter is also used on about.php to check if a plugin has disabled
 * these notifications.
 *
 * @since 3.7.0
 *
 * @param bool   $notify Whether the site administrator is notified.
 * @param object $item   The update offer.
 */
$item) {}
/**
 * Fires immediately prior to an auto-update.
 *
 * @since 4.4.0
 *
 * @param string $type    The type of update being checked: 'core', 'theme', 'plugin', or 'translation'.
 * @param object $item    The update offer.
 * @param string $context The filesystem context (a path) against which filesystem access and status
 *                        should be checked.
 */
        public function update(/**
 * Fires immediately prior to an auto-update.
 *
 * @since 4.4.0
 *
 * @param string $type    The type of update being checked: 'core', 'theme', 'plugin', or 'translation'.
 * @param object $item    The update offer.
 * @param string $context The filesystem context (a path) against which filesystem access and status
 *                        should be checked.
 */
$type, /**
 * Fires immediately prior to an auto-update.
 *
 * @since 4.4.0
 *
 * @param string $type    The type of update being checked: 'core', 'theme', 'plugin', or 'translation'.
 * @param object $item    The update offer.
 * @param string $context The filesystem context (a path) against which filesystem access and status
 *                        should be checked.
 */
$item) {}
        /**
         * Kicks off the background update process, looping through all pending updates.
         *
         * @since 3.7.0
         */
        public function run() {}
        protected function after_core_update($update_result) {}
/**
 * Filters the email sent following an automatic background core update.
 *
 * @since 3.7.0
 *
 * @param array $email {
 *     Array of email arguments that will be passed to wp_mail().
 *
 *     @type string $to      The email recipient. An array of emails
 *                            can be returned, as handled by wp_mail().
 *     @type string $subject The email's subject.
 *     @type string $body    The email message body.
 *     @type string $headers Any email headers, defaults to no headers.
 * }
 * @param string $type        The type of email being sent. Can be one of
 *                            'success', 'fail', 'manual', 'critical'.
 * @param object $core_update The update offer that was attempted.
 * @param mixed  $result      The result for the core update. Can be WP_Error.
 */
        protected function send_email(/**
 * Filters the email sent following an automatic background core update.
 *
 * @since 3.7.0
 *
 * @param array $email {
 *     Array of email arguments that will be passed to wp_mail().
 *
 *     @type string $to      The email recipient. An array of emails
 *                            can be returned, as handled by wp_mail().
 *     @type string $subject The email's subject.
 *     @type string $body    The email message body.
 *     @type string $headers Any email headers, defaults to no headers.
 * }
 * @param string $type        The type of email being sent. Can be one of
 *                            'success', 'fail', 'manual', 'critical'.
 * @param object $core_update The update offer that was attempted.
 * @param mixed  $result      The result for the core update. Can be WP_Error.
 */
$type, /**
 * Filters the email sent following an automatic background core update.
 *
 * @since 3.7.0
 *
 * @param array $email {
 *     Array of email arguments that will be passed to wp_mail().
 *
 *     @type string $to      The email recipient. An array of emails
 *                            can be returned, as handled by wp_mail().
 *     @type string $subject The email's subject.
 *     @type string $body    The email message body.
 *     @type string $headers Any email headers, defaults to no headers.
 * }
 * @param string $type        The type of email being sent. Can be one of
 *                            'success', 'fail', 'manual', 'critical'.
 * @param object $core_update The update offer that was attempted.
 * @param mixed  $result      The result for the core update. Can be WP_Error.
 */
$core_update, /**
 * Filters the email sent following an automatic background core update.
 *
 * @since 3.7.0
 *
 * @param array $email {
 *     Array of email arguments that will be passed to wp_mail().
 *
 *     @type string $to      The email recipient. An array of emails
 *                            can be returned, as handled by wp_mail().
 *     @type string $subject The email's subject.
 *     @type string $body    The email message body.
 *     @type string $headers Any email headers, defaults to no headers.
 * }
 * @param string $type        The type of email being sent. Can be one of
 *                            'success', 'fail', 'manual', 'critical'.
 * @param object $core_update The update offer that was attempted.
 * @param mixed  $result      The result for the core update. Can be WP_Error.
 */
$result = null) {}
        /**
         * Filters the debug email that can be sent following an automatic
         * background core update.
         *
         * @since 3.8.0
         *
         * @param array $email {
         *     Array of email arguments that will be passed to wp_mail().
         *
         *     @type string $to      The email recipient. An array of emails
         *                           can be returned, as handled by wp_mail().
         *     @type string $subject Email subject.
         *     @type string $body    Email message body.
         *     @type string $headers Any email headers. Default empty.
         * }
         * @param int   $failures The number of failures encountered while upgrading.
         * @param mixed $results  The results of all attempted updates.
         */
        protected function send_debug_email() {}
    }

    /**
     * Plugin Upgrader Skin for WordPress Plugin Upgrades.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Plugin_Upgrader_Skin extends \wp_upgrader_skin {
        public $plugin;
        public $plugin_active;
        public $plugin_network_active;

        public function __construct($args = array( )) {}
        /**
         */
        public function after() {}
    }

    /**
     * Core class used to implement an internal admin pointers API.
     *
     * @since 3.3.0
     */
    final class WP_Internal_Pointers {
        public static function enqueue_scripts($hook_suffix) {}
        private static function print_js($pointer_id, $selector, $args) {}
        public static function pointer_wp330_toolbar() {}
        public static function pointer_wp330_media_uploader() {}
        public static function pointer_wp330_saving_widgets() {}
        public static function pointer_wp340_customize_current_theme_link() {}
        public static function pointer_wp340_choose_image_from_library() {}
        public static function pointer_wp350_media() {}
        public static function pointer_wp360_revisions() {}
        public static function pointer_wp360_locks() {}
        public static function pointer_wp390_widgets() {}
        public static function pointer_wp410_dfw() {}
        /**
         * Display a pointer for the new privacy tools.
         *
         * @since 4.9.6
         */
        public static function pointer_wp496_privacy() {}
        public static function dismiss_pointers_for_new_users($user_id) {}
    }

    /**
     * Bulk Theme Upgrader Skin for WordPress Theme Upgrades.
     *
     * @since 3.0.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see Bulk_Upgrader_Skin
     */
    class Bulk_Theme_Upgrader_Skin extends \bulk_upgrader_skin {
        public $theme_info;

        public function add_strings() {}
        public function before($title = '') {}
        public function after($title = '') {}
        /**
         * Filters the list of action links available following bulk theme updates.
         *
         * @since 3.0.0
         *
         * @param string[] $update_actions Array of theme action links.
         * @param WP_Theme $theme_info     Theme object for the last-updated theme.
         */
        public function bulk_footer() {}
    }

    /**
     * Theme Installer Skin for the WordPress Theme Installer.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Theme_Installer_Skin extends \wp_upgrader_skin {
        public $api;
        public $type;

        public function __construct($args = array( )) {}
        /**
         */
        public function before() {}
        /**
         * Filters the list of action links available following a single theme installation.
         *
         * @since 2.8.0
         *
         * @param string[] $install_actions Array of theme action links.
         * @param object   $api             Object containing WordPress.org API theme data.
         * @param string   $stylesheet      Theme directory name.
         * @param WP_Theme $theme_info      Theme object.
         */
        public function after() {}
    }

    /**
     * Core walker class to output an unordered list of category checkbox input elements.
     *
     * @since 2.5.1
     *
     * @see Walker
     * @see wp_category_checklist()
     * @see wp_terms_checklist()
     */
    class Walker_Category_Checklist extends \walker {
        public $tree_type;
        public $db_fields;

        public function start_lvl($output, $depth = 0, $args = array( )) {}
        public function end_lvl($output, $depth = 0, $args = array( )) {}
/** This filter is documented in wp-includes/category-template.php */
        public function start_el(/** This filter is documented in wp-includes/category-template.php */
$output, /** This filter is documented in wp-includes/category-template.php */
$category, /** This filter is documented in wp-includes/category-template.php */
$depth = 0, /** This filter is documented in wp-includes/category-template.php */
$args = array( ), /** This filter is documented in wp-includes/category-template.php */
$id = 0) {}
        public function end_el($output, $category, $depth = 0, $args = array( )) {}
    }

    /**
     * Core class used for upgrading/installing a local set of files via
     * the Filesystem Abstraction classes from a Zip file.
     *
     * @since 2.8.0
     */
    class WP_Upgrader {
        /**
         * The error/notification strings used to update the user on the progress.
         *
         * @since 2.8.0
         * @var array $strings
         */
        public $strings;
        /**
         * The upgrader skin being used.
         *
         * @since 2.8.0
         * @var Automatic_Upgrader_Skin|WP_Upgrader_Skin $skin
         */
        public $skin;
        /**
         * The result of the installation.
         *
         * This is set by WP_Upgrader::install_package(), only when the package is installed
         * successfully. It will then be an array, unless a WP_Error is returned by the
         * {@see 'upgrader_post_install'} filter. In that case, the WP_Error will be assigned to
         * it.
         *
         * @since 2.8.0
         *
         * @var WP_Error|array $result {
         *      @type string $source             The full path to the source the files were installed from.
         *      @type string $source_files       List of all the files in the source directory.
         *      @type string $destination        The full path to the installation destination folder.
         *      @type string $destination_name   The name of the destination folder, or empty if `$destination`
         *                                       and `$local_destination` are the same.
         *      @type string $local_destination  The full local path to the destination folder. This is usually
         *                                       the same as `$destination`.
         *      @type string $remote_destination The full remote path to the destination folder
         *                                       (i.e., from `$wp_filesystem`).
         *      @type bool   $clear_destination  Whether the destination folder was cleared.
         * }
         */
        public $result;
        /**
         * The total number of updates being performed.
         *
         * Set by the bulk update methods.
         *
         * @since 3.0.0
         * @var int $update_count
         */
        public $update_count;
        /**
         * The current update if multiple updates are being performed.
         *
         * Used by the bulk update methods, and incremented for each update.
         *
         * @since 3.0.0
         * @var int
         */
        public $update_current;

        public function __construct($skin = null) {}
        /**
         * Initialize the upgrader.
         *
         * This will set the relationship between the skin being used and this upgrader,
         * and also add the generic strings to `WP_Upgrader::$strings`.
         *
         * @since 2.8.0
         */
        public function init() {}
        /**
         * Add the generic strings to WP_Upgrader::$strings.
         *
         * @since 2.8.0
         */
        public function generic_strings() {}
        public function fs_connect($directories = array( ), $allow_relaxed_file_ownership = false) {}
/**
 * Filters whether to return the package.
 *
 * @since 3.7.0
 *
 * @param bool        $reply   Whether to bail without returning the package.
 *                             Default false.
 * @param string      $package The package file name.
 * @param WP_Upgrader $this    The WP_Upgrader instance.
 */
        public function download_package(/**
 * Filters whether to return the package.
 *
 * @since 3.7.0
 *
 * @param bool        $reply   Whether to bail without returning the package.
 *                             Default false.
 * @param string      $package The package file name.
 * @param WP_Upgrader $this    The WP_Upgrader instance.
 */
$package) {}
        public function unpack_package($package, $delete_package = true) {}
        protected function flatten_dirlist($nested_files, $path = '') {}
        public function clear_destination($remote_destination) {}
/**
 * Filters the installation response after the installation has finished.
 *
 * @since 2.8.0
 *
 * @param bool  $response   Installation response.
 * @param array $hook_extra Extra arguments passed to hooked filters.
 * @param array $result     Installation result data.
 */
        public function install_package(/**
 * Filters the installation response after the installation has finished.
 *
 * @since 2.8.0
 *
 * @param bool  $response   Installation response.
 * @param array $hook_extra Extra arguments passed to hooked filters.
 * @param array $result     Installation result data.
 */
$args = array( )) {}
/**
 * Fires when the upgrader process is complete.
 *
 * See also {@see 'upgrader_package_options'}.
 *
 * @since 3.6.0
 * @since 3.7.0 Added to WP_Upgrader::run().
 * @since 4.6.0 `$translations` was added as a possible argument to `$hook_extra`.
 *
 * @param WP_Upgrader $this WP_Upgrader instance. In other contexts, $this, might be a
 *                          Theme_Upgrader, Plugin_Upgrader, Core_Upgrade, or Language_Pack_Upgrader instance.
 * @param array       $hook_extra {
 *     Array of bulk item update data.
 *
 *     @type string $action       Type of action. Default 'update'.
 *     @type string $type         Type of update process. Accepts 'plugin', 'theme', 'translation', or 'core'.
 *     @type bool   $bulk         Whether the update process is a bulk update. Default true.
 *     @type array  $plugins      Array of the basename paths of the plugins' main files.
 *     @type array  $themes       The theme slugs.
 *     @type array  $translations {
 *         Array of translations update data.
 *
 *         @type string $language The locale the translation is for.
 *         @type string $type     Type of translation. Accepts 'plugin', 'theme', or 'core'.
 *         @type string $slug     Text domain the translation is for. The slug of a theme/plugin or
 *                                'default' for core translations.
 *         @type string $version  The version of a theme, plugin, or core.
 *     }
 * }
 */
        public function run(/**
 * Fires when the upgrader process is complete.
 *
 * See also {@see 'upgrader_package_options'}.
 *
 * @since 3.6.0
 * @since 3.7.0 Added to WP_Upgrader::run().
 * @since 4.6.0 `$translations` was added as a possible argument to `$hook_extra`.
 *
 * @param WP_Upgrader $this WP_Upgrader instance. In other contexts, $this, might be a
 *                          Theme_Upgrader, Plugin_Upgrader, Core_Upgrade, or Language_Pack_Upgrader instance.
 * @param array       $hook_extra {
 *     Array of bulk item update data.
 *
 *     @type string $action       Type of action. Default 'update'.
 *     @type string $type         Type of update process. Accepts 'plugin', 'theme', 'translation', or 'core'.
 *     @type bool   $bulk         Whether the update process is a bulk update. Default true.
 *     @type array  $plugins      Array of the basename paths of the plugins' main files.
 *     @type array  $themes       The theme slugs.
 *     @type array  $translations {
 *         Array of translations update data.
 *
 *         @type string $language The locale the translation is for.
 *         @type string $type     Type of translation. Accepts 'plugin', 'theme', or 'core'.
 *         @type string $slug     Text domain the translation is for. The slug of a theme/plugin or
 *                                'default' for core translations.
 *         @type string $version  The version of a theme, plugin, or core.
 *     }
 * }
 */
$options) {}
        public function maintenance_mode($enable = false) {}
        public static function create_lock($lock_name, $release_timeout = null) {}
        public static function release_lock($lock_name) {}
    }

    /**
     * Socket Based FTP implementation
     *
     * @package PemFTP
     * @subpackage Socket
     * @since 2.5.0
     *
     * @version 1.0
     * @copyright Alexey Dotsenko
     * @author Alexey Dotsenko
     * @link http://www.phpclasses.org/browse/package/1743.html Site
     * @license LGPL http://www.opensource.org/licenses/lgpl-license.html
     */
    class ftp_sockets extends \ftp_base {
        function __construct($verb = FALSE, $le = FALSE) {}
        function _settimeout($sock) {}
        function _connect($host, $port) {}
        function _readmsg($fnction = "_readmsg") {}
        function _exec($cmd, $fnction = "_exec") {}
        function _data_prepare($mode = FTP_ASCII) {}
        function _data_read($mode = FTP_ASCII, $fp = NULL) {}
        function _data_write($mode = FTP_ASCII, $fp = NULL) {}
        function _data_write_block($mode, $block) {}
        function _data_close() {}
        function _quit() {}
    }

    /**
     * Base WordPress Filesystem class for which Filesystem implementations extend
     *
     * @since 2.5.0
     */
    class WP_Filesystem_Base {
        /**
         * Whether to display debug data for the connection.
         *
         * @since 2.5.0
         * @var bool
         */
        public $verbose;
        /**
         * Cached list of local filepaths to mapped remote filepaths.
         *
         * @since 2.7.0
         * @var array
         */
        public $cache;
        /**
         * The Access method of the current connection, Set automatically.
         *
         * @since 2.5.0
         * @var string
         */
        public $method;
        /**
         * @var WP_Error
         */
        public $errors;
        /**
         */
        public $options;

        /**
         * Return the path on the remote filesystem of ABSPATH.
         *
         * @since 2.7.0
         *
         * @return string The location of the remote path.
         */
        public function abspath() {}
        /**
         * Return the path on the remote filesystem of WP_CONTENT_DIR.
         *
         * @since 2.7.0
         *
         * @return string The location of the remote path.
         */
        public function wp_content_dir() {}
        /**
         * Return the path on the remote filesystem of WP_PLUGIN_DIR.
         *
         * @since 2.7.0
         *
         * @return string The location of the remote path.
         */
        public function wp_plugins_dir() {}
        public function wp_themes_dir($theme = false) {}
        /**
         * Return the path on the remote filesystem of WP_LANG_DIR.
         *
         * @since 3.2.0
         *
         * @return string The location of the remote path.
         */
        public function wp_lang_dir() {}
        public function find_base_dir($base = '.', $echo = false) {}
        public function get_base_dir($base = '.', $echo = false) {}
        public function find_folder($folder) {}
        public function search_for_folder($folder, $base = '.', $loop = false) {}
        public function gethchmod($file) {}
        public function getchmod($file) {}
        public function getnumchmodfromh($mode) {}
        public function is_binary($text) {}
        public function chown($file, $owner, $recursive = false) {}
        /**
         * Connect filesystem.
         *
         * @since 2.5.0
         * @abstract
         *
         * @return bool True on success or false on failure (always true for WP_Filesystem_Direct).
         */
        public function connect() {}
        public function get_contents($file) {}
        public function get_contents_array($file) {}
        public function put_contents($file, $contents, $mode = false) {}
        /**
         * Get the current working directory.
         *
         * @since 2.5.0
         * @abstract
         *
         * @return string|bool The current working directory on success, or false on failure.
         */
        public function cwd() {}
        public function chdir($dir) {}
        public function chgrp($file, $group, $recursive = false) {}
        public function chmod($file, $mode = false, $recursive = false) {}
        public function owner($file) {}
        public function group($file) {}
        public function copy($source, $destination, $overwrite = false, $mode = false) {}
        public function move($source, $destination, $overwrite = false) {}
        public function delete($file, $recursive = false, $type = false) {}
        public function exists($file) {}
        public function is_file($file) {}
        public function is_dir($path) {}
        public function is_readable($file) {}
        public function is_writable($file) {}
        public function atime($file) {}
        public function mtime($file) {}
        public function size($file) {}
        public function touch($file, $time = 0, $atime = 0) {}
        public function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {}
        public function rmdir($path, $recursive = false) {}
        public function dirlist($path, $include_hidden = true, $recursive = false) {}
    }

    /**
     * Core class used to implement displaying plugins to install in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Plugin_Install_List_Table extends \wp_list_table {
        public $order;
        public $orderby;
        public $groups;
        private $error;

        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * Return the list of known plugins.
         *
         * Uses the transient data from the updates API to determine the known
         * installed plugins.
         *
         * @since 4.9.0
         * @access protected
         *
         * @return array
         */
        protected function get_installed_plugins() {}
        /**
         * Return a list of slugs of installed plugins, if known.
         *
         * Uses the transient data from the updates API to determine the slugs of
         * known installed plugins. This might be better elsewhere, perhaps even
         * within get_plugins().
         *
         * @since 4.0.0
         *
         * @return array
         */
        protected function get_installed_plugin_slugs() {}
        /**
         * Filters API request arguments for each Plugin Install screen tab.
         *
         * The dynamic portion of the hook name, `$tab`, refers to the plugin install tabs.
         * Default tabs include 'featured', 'popular', 'recommended', 'favorites', and 'upload'.
         *
         * @since 3.7.0
         *
         * @param array|bool $args Plugin Install API arguments.
         */
        public function prepare_items() {}
        /**
         */
        public function no_items() {}
        /**
         * @global array $tabs
         * @global string $tab
         *
         * @return array
         */
        protected function get_views() {}
        /** This filter is documented in wp-admin/inclues/class-wp-list-table.php */
        public function views() {}
        /**
         * Override the parent display() so we can provide a different container.
         */
        public function display() {}
/**
 * Fires before the Plugin Install table header pagination is displayed.
 *
 * @since 2.7.0
 */
        protected function display_tablenav(/**
 * Fires before the Plugin Install table header pagination is displayed.
 *
 * @since 2.7.0
 */
$which) {}
        /**
         * @return array
         */
        protected function get_table_classes() {}
        /**
         * @return array
         */
        public function get_columns() {}
        private function order_callback($plugin_a, $plugin_b) {}
        /**
         * Filters the install action links for a plugin.
         *
         * @since 2.7.0
         *
         * @param string[] $action_links An array of plugin action links. Defaults are links to Details and Install Now.
         * @param array    $plugin       The plugin currently being listed.
         */
        public function display_rows() {}
    }

    /**
     * Core class used for updating core.
     *
     * It allows for WordPress to upgrade itself in combination with
     * the wp-admin/includes/update-core.php file.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     *
     * @see WP_Upgrader
     */
    class Core_Upgrader extends \wp_upgrader {
        /**
         * Initialize the upgrade strings.
         *
         * @since 2.8.0
         */
        public function upgrade_strings() {}
/** This action is documented in wp-admin/includes/class-wp-upgrader.php */
        public function upgrade(/** This action is documented in wp-admin/includes/class-wp-upgrader.php */
$current, /** This action is documented in wp-admin/includes/class-wp-upgrader.php */
$args = array( )) {}
/**
 * Filters whether to enable major automatic core updates.
 *
 * @since 3.7.0
 *
 * @param bool $upgrade_major Whether to enable major automatic core updates.
 */
        public static function should_update_to_version(/**
 * Filters whether to enable major automatic core updates.
 *
 * @since 3.7.0
 *
 * @param bool $upgrade_major Whether to enable major automatic core updates.
 */
$offered_ver) {}
        /**
         * Compare the disk file checksums against the expected checksums.
         *
         * @since 3.7.0
         *
         * @global string $wp_version
         * @global string $wp_local_package
         *
         * @return bool True if the checksums match, otherwise false.
         */
        public function check_files() {}
    }

    /**
     * WordPress Filesystem Class for direct PHP file and folder manipulation.
     *
     * @since 2.5.0
     *
     * @see WP_Filesystem_Base
     */
    class WP_Filesystem_Direct extends \wp_filesystem_base {
        public function __construct($arg) {}
        public function get_contents($file) {}
        public function get_contents_array($file) {}
        public function put_contents($file, $contents, $mode = false) {}
        /**
         * Gets the current working directory
         *
         * @return string|bool the current working directory on success, or false on failure.
         */
        public function cwd() {}
        public function chdir($dir) {}
        public function chgrp($file, $group, $recursive = false) {}
        public function chmod($file, $mode = false, $recursive = false) {}
        public function chown($file, $owner, $recursive = false) {}
        public function owner($file) {}
        public function getchmod($file) {}
        public function group($file) {}
        public function copy($source, $destination, $overwrite = false, $mode = false) {}
        public function move($source, $destination, $overwrite = false) {}
        public function delete($file, $recursive = false, $type = false) {}
        public function exists($file) {}
        public function is_file($file) {}
        public function is_dir($path) {}
        public function is_readable($file) {}
        public function is_writable($file) {}
        public function atime($file) {}
        public function mtime($file) {}
        public function size($file) {}
        public function touch($file, $time = 0, $atime = 0) {}
        public function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {}
        public function rmdir($path, $recursive = false) {}
        public function dirlist($path, $include_hidden = true, $recursive = false) {}
    }

    /**
     * WordPress Filesystem Class for implementing FTP Sockets.
     *
     * @since 2.5.0
     *
     * @see WP_Filesystem_Base
     */
    class WP_Filesystem_ftpsockets extends \wp_filesystem_base {
        /**
         * @var ftp
         */
        public $ftp;

        public function __construct($opt = '') {}
        /**
         * @return bool
         */
        public function connect() {}
        public function get_contents($file) {}
        public function get_contents_array($file) {}
        public function put_contents($file, $contents, $mode = false) {}
        /**
         * @return string
         */
        public function cwd() {}
        public function chdir($file) {}
        public function chmod($file, $mode = false, $recursive = false) {}
        public function owner($file) {}
        public function getchmod($file) {}
        public function group($file) {}
        public function copy($source, $destination, $overwrite = false, $mode = false) {}
        public function move($source, $destination, $overwrite = false) {}
        public function delete($file, $recursive = false, $type = false) {}
        public function exists($file) {}
        public function is_file($file) {}
        public function is_dir($path) {}
        public function is_readable($file) {}
        public function is_writable($file) {}
        public function atime($file) {}
        public function mtime($file) {}
        public function size($file) {}
        public function touch($file, $time = 0, $atime = 0) {}
        public function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {}
        public function rmdir($path, $recursive = false) {}
        public function dirlist($path = '.', $include_hidden = true, $recursive = false) {}
        /**
         */
        public function __destruct() {}
    }

    /**
     * Core class used for upgrading/installing themes.
     *
     * It is designed to upgrade/install themes from a local zip, remote zip URL,
     * or uploaded zip file.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     *
     * @see WP_Upgrader
     */
    class Theme_Upgrader extends \wp_upgrader {
        /**
         * Result of the theme upgrade offer.
         *
         * @since 2.8.0
         * @var array|WP_Error $result
         * @see WP_Upgrader::$result
         */
        public $result;
        /**
         * Whether multiple themes are being upgraded/installed in bulk.
         *
         * @since 2.9.0
         * @var bool $bulk
         */
        public $bulk;

        /**
         * Initialize the upgrade strings.
         *
         * @since 2.8.0
         */
        public function upgrade_strings() {}
        /**
         * Initialize the installation strings.
         *
         * @since 2.8.0
         */
        public function install_strings() {}
        public function check_parent_theme_filter($install_result, $hook_extra, $child_result) {}
        public function hide_activate_preview_actions($actions) {}
        public function install($package, $args = array( )) {}
        public function upgrade($theme, $args = array( )) {}
/** This action is documented in wp-admin/includes/class-wp-upgrader.php */
        public function bulk_upgrade(/** This action is documented in wp-admin/includes/class-wp-upgrader.php */
$themes, /** This action is documented in wp-admin/includes/class-wp-upgrader.php */
$args = array( )) {}
        public function check_package($source) {}
        public function current_before($return, $theme) {}
        public function current_after($return, $theme) {}
        public function delete_old_theme($removed, $local_destination, $remote_destination, $theme) {}
        public function theme_info($theme = null) {}
    }

    /**
     * Core class used to implement displaying links in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Tsble
     */
    class WP_Links_List_Table extends \wp_list_table {
        public function __construct($args = array( )) {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * @global int    $cat_id
         * @global string $s
         * @global string $orderby
         * @global string $order
         */
        public function prepare_items() {}
        /**
         */
        public function no_items() {}
        /**
         * @return array
         */
        protected function get_bulk_actions() {}
        protected function extra_tablenav($which) {}
        /**
         * @return array
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        /**
         * Get the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'name'.
         */
        protected function get_default_primary_column_name() {}
        public function column_cb($link) {}
        public function column_name($link) {}
        public function column_url($link) {}
        public function column_categories($link) {}
        public function column_rel($link) {}
        public function column_visible($link) {}
        public function column_rating($link) {}
/**
 * Fires for each registered custom link column.
 *
 * @since 2.1.0
 *
 * @param string $column_name Name of the custom column.
 * @param int    $link_id     Link ID.
 */
        public function column_default(/**
 * Fires for each registered custom link column.
 *
 * @since 2.1.0
 *
 * @param string $column_name Name of the custom column.
 * @param int    $link_id     Link ID.
 */
$link, /**
 * Fires for each registered custom link column.
 *
 * @since 2.1.0
 *
 * @param string $column_name Name of the custom column.
 * @param int    $link_id     Link ID.
 */
$column_name) {}
        public function display_rows() {}
        protected function handle_row_actions($link, $column_name, $primary) {}
    }

    /**
     * Generic Skin for the WordPress Upgrader classes. This skin is designed to be extended for specific purposes.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     */
    class WP_Upgrader_Skin {
        public $upgrader;
        public $done_header;
        public $done_footer;
        /**
         * Holds the result of an upgrade.
         *
         * @since 2.8.0
         * @var string|bool|WP_Error
         */
        public $result;
        public $options;

        public function __construct($args = array( )) {}
        public function set_upgrader($upgrader) {}
        /**
         */
        public function add_strings() {}
        public function set_result($result) {}
        public function request_filesystem_credentials($error = false, $context = '', $allow_relaxed_file_ownership = false) {}
        /**
         */
        public function header() {}
        /**
         */
        public function footer() {}
        public function error($errors) {}
        public function feedback($string) {}
        /**
         */
        public function before() {}
        /**
         */
        public function after() {}
        protected function decrement_update_count($type) {}
        /**
         */
        public function bulk_header() {}
        /**
         */
        public function bulk_footer() {}
    }

    /**
     * Core class used to implement displaying users in a list table for the network admin.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_MS_Users_List_Table extends \wp_list_table {
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * @global string $usersearch
         * @global string $role
         * @global wpdb   $wpdb
         * @global string $mode
         */
        public function prepare_items() {}
        /**
         * @return array
         */
        protected function get_bulk_actions() {}
        /**
         */
        public function no_items() {}
        /**
         * @global string $role
         * @return array
         */
        protected function get_views() {}
        protected function pagination($which) {}
        /**
         * @return array
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        public function column_cb($user) {}
        public function column_id($user) {}
        public function column_username($user) {}
        public function column_name($user) {}
        public function column_email($user) {}
        public function column_registered($user) {}
        protected function _column_blogs($user, $classes, $data, $primary) {}
/**
 * Filters the action links displayed next the sites a user belongs to
 * in the Network Admin Users list table.
 *
 * @since 3.1.0
 *
 * @param string[] $actions     An array of action links to be displayed. Default 'Edit', 'View'.
 * @param int      $userblog_id The site ID.
 */
        public function column_blogs(/**
 * Filters the action links displayed next the sites a user belongs to
 * in the Network Admin Users list table.
 *
 * @since 3.1.0
 *
 * @param string[] $actions     An array of action links to be displayed. Default 'Edit', 'View'.
 * @param int      $userblog_id The site ID.
 */
$user) {}
/** This filter is documented in wp-admin/includes/class-wp-users-list-table.php */
        public function column_default(/** This filter is documented in wp-admin/includes/class-wp-users-list-table.php */
$user, /** This filter is documented in wp-admin/includes/class-wp-users-list-table.php */
$column_name) {}
        public function display_rows() {}
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'username'.
         */
        protected function get_default_primary_column_name() {}
/**
 * Filters the action links displayed under each user in the Network Admin Users list table.
 *
 * @since 3.2.0
 *
 * @param string[] $actions An array of action links to be displayed. Default 'Edit', 'Delete'.
 * @param WP_User  $user    WP_User object.
 */
        protected function handle_row_actions(/**
 * Filters the action links displayed under each user in the Network Admin Users list table.
 *
 * @since 3.2.0
 *
 * @param string[] $actions An array of action links to be displayed. Default 'Edit', 'Delete'.
 * @param WP_User  $user    WP_User object.
 */
$user, /**
 * Filters the action links displayed under each user in the Network Admin Users list table.
 *
 * @since 3.2.0
 *
 * @param string[] $actions An array of action links to be displayed. Default 'Edit', 'Delete'.
 * @param WP_User  $user    WP_User object.
 */
$column_name, /**
 * Filters the action links displayed under each user in the Network Admin Users list table.
 *
 * @since 3.2.0
 *
 * @param string[] $actions An array of action links to be displayed. Default 'Edit', 'Delete'.
 * @param WP_User  $user    WP_User object.
 */
$primary) {}
    }

    /**
     * WP_Importer base class
     */
    class WP_Importer {
        /**
         * Class Constructor
         */
        public function __construct() {}
        public function get_imported_posts($importer_name, $bid) {}
        public function count_imported_posts($importer_name, $bid) {}
        public function get_imported_comments($bid) {}
        public function set_blog($blog_id) {}
        public function set_user($user_id) {}
        public function cmpr_strlen($a, $b) {}
        public function get_page($url, $username = '', $password = '', $head = false) {}
        public function bump_request_timeout($val) {}
        /**
         * Check if user has exceeded disk quota
         *
         * @return bool
         */
        public function is_user_over_quota() {}
        public function min_whitespace($string) {}
        /**
         * Resets global variables that grow out of control during imports.
         *
         * @since 3.0.0
         *
         * @global wpdb  $wpdb       WordPress database abstraction object.
         * @global array $wp_actions
         */
        public function stop_the_insanity() {}
    }

    /**
     * Core class used to implement displaying posts in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Posts_List_Table extends \wp_list_table {
        /**
         * Whether the items should be displayed hierarchically or linearly.
         *
         * @since 3.1.0
         * @var bool
         */
        protected $hierarchical_display;
        /**
         * Holds the number of pending comments for each post.
         *
         * @since 3.1.0
         * @var array
         */
        protected $comment_pending_count;
        /**
         * Holds the number of posts for this user.
         *
         * @since 3.1.0
         * @var int
         */
        private $user_posts_count;
        /**
         * Holds the number of posts which are sticky.
         *
         * @since 3.1.0
         * @var int
         */
        private $sticky_posts_count;
        private $is_trash;
        /**
         * Current level for output.
         *
         * @since 4.3.0
         * @var int
         */
        protected $current_level;

        public function __construct($args = array( )) {}
        public function set_hierarchical_display($display) {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /** This filter is documented in wp-admin/includes/post.php */
        public function prepare_items() {}
        /**
         * @return bool
         */
        public function has_items() {}
        /**
         */
        public function no_items() {}
        /**
         * Determine if the current view is the "All" view.
         *
         * @since 4.2.0
         *
         * @return bool Whether the current view is the "All" view.
         */
        protected function is_base_request() {}
        protected function get_edit_link($args, $label, $class = '') {}
        /**
         * @global array $locked_post_status This seems to be deprecated.
         * @global array $avail_post_stati
         * @return array
         */
        protected function get_views() {}
        /**
         * @return array
         */
        protected function get_bulk_actions() {}
/**
 * Filters whether to remove the 'Categories' drop-down from the post list table.
 *
 * @since 4.6.0
 *
 * @param bool   $disable   Whether to disable the categories drop-down. Default false.
 * @param string $post_type Post type slug.
 */
        protected function categories_dropdown(/**
 * Filters whether to remove the 'Categories' drop-down from the post list table.
 *
 * @since 4.6.0
 *
 * @param bool   $disable   Whether to disable the categories drop-down. Default false.
 * @param string $post_type Post type slug.
 */
$post_type) {}
/**
 * Fires immediately following the closing "actions" div in the tablenav for the posts
 * list table.
 *
 * @since 4.4.0
 *
 * @param string $which The location of the extra table nav markup: 'top' or 'bottom'.
 */
        protected function extra_tablenav(/**
 * Fires immediately following the closing "actions" div in the tablenav for the posts
 * list table.
 *
 * @since 4.4.0
 *
 * @param string $which The location of the extra table nav markup: 'top' or 'bottom'.
 */
$which) {}
        /**
         * @return string
         */
        public function current_action() {}
        /**
         * @return array
         */
        protected function get_table_classes() {}
        /**
         * Filters the columns displayed in the Posts list table for a specific post type.
         *
         * The dynamic portion of the hook name, `$post_type`, refers to the post type slug.
         *
         * @since 3.0.0
         *
         * @param string[] $post_columns An associative array of column headings.
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        public function display_rows($posts = array( ), $level = 0) {}
        private function _display_rows($posts, $level = 0) {}
        private function _display_rows_hierarchical($pages, $pagenum = 1, $per_page = 20) {}
        private function _page_rows($children_pages, $count, $parent, $level, $pagenum, $per_page, $to_display) {}
        public function column_cb($post) {}
        protected function _column_title($post, $classes, $data, $primary) {}
/** This filter is documented in wp-includes/post-template.php */
        public function column_title(/** This filter is documented in wp-includes/post-template.php */
$post) {}
/** This filter is documented in wp-admin/includes/class-wp-posts-list-table.php */
        public function column_date(/** This filter is documented in wp-admin/includes/class-wp-posts-list-table.php */
$post) {}
        public function column_comments($post) {}
        public function column_author($post) {}
/**
 * Fires for each custom column of a specific post type in the Posts list table.
 *
 * The dynamic portion of the hook name, `$post->post_type`, refers to the post type.
 *
 * @since 3.1.0
 *
 * @param string $column_name The name of the column to display.
 * @param int    $post_id     The current post ID.
 */
        public function column_default(/**
 * Fires for each custom column of a specific post type in the Posts list table.
 *
 * The dynamic portion of the hook name, `$post->post_type`, refers to the post type.
 *
 * @since 3.1.0
 *
 * @param string $column_name The name of the column to display.
 * @param int    $post_id     The current post ID.
 */
$post, /**
 * Fires for each custom column of a specific post type in the Posts list table.
 *
 * The dynamic portion of the hook name, `$post->post_type`, refers to the post type.
 *
 * @since 3.1.0
 *
 * @param string $column_name The name of the column to display.
 * @param int    $post_id     The current post ID.
 */
$column_name) {}
        public function single_row($post, $level = 0) {}
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'title'.
         */
        protected function get_default_primary_column_name() {}
/**
 * Filters the array of row action links on the Posts list table.
 *
 * The filter is evaluated only for non-hierarchical post types.
 *
 * @since 2.8.0
 *
 * @param string[] $actions An array of row action links. Defaults are
 *                          'Edit', 'Quick Edit', 'Restore', 'Trash',
 *                          'Delete Permanently', 'Preview', and 'View'.
 * @param WP_Post  $post    The post object.
 */
        protected function handle_row_actions(/**
 * Filters the array of row action links on the Posts list table.
 *
 * The filter is evaluated only for non-hierarchical post types.
 *
 * @since 2.8.0
 *
 * @param string[] $actions An array of row action links. Defaults are
 *                          'Edit', 'Quick Edit', 'Restore', 'Trash',
 *                          'Delete Permanently', 'Preview', and 'View'.
 * @param WP_Post  $post    The post object.
 */
$post, /**
 * Filters the array of row action links on the Posts list table.
 *
 * The filter is evaluated only for non-hierarchical post types.
 *
 * @since 2.8.0
 *
 * @param string[] $actions An array of row action links. Defaults are
 *                          'Edit', 'Quick Edit', 'Restore', 'Trash',
 *                          'Delete Permanently', 'Preview', and 'View'.
 * @param WP_Post  $post    The post object.
 */
$column_name, /**
 * Filters the array of row action links on the Posts list table.
 *
 * The filter is evaluated only for non-hierarchical post types.
 *
 * @since 2.8.0
 *
 * @param string[] $actions An array of row action links. Defaults are
 *                          'Edit', 'Quick Edit', 'Restore', 'Trash',
 *                          'Delete Permanently', 'Preview', and 'View'.
 * @param WP_Post  $post    The post object.
 */
$primary) {}
        /**
         * Fires once for each column in Quick Edit mode.
         *
         * @since 2.7.0
         *
         * @param string $column_name Name of the column to edit.
         * @param string $post_type   The post type slug, or current screen name if this is a taxonomy list table.
         * @param string taxonomy     The taxonomy name, if any.
         */
        public function inline_edit() {}
    }

    /**
     * Helper class to be used only by back compat functions
     *
     * @since 3.1.0
     */
    class _WP_List_Table_Compat extends \wp_list_table {
        public $_screen;
        public $_columns;

        public function __construct($screen, $columns = array( )) {}
        /**
         * @return array
         */
        protected function get_column_info() {}
        /**
         * @return array
         */
        public function get_columns() {}
    }

    /**
     * FTP implementation using fsockopen to connect.
     *
     * @package PemFTP
     * @subpackage Pure
     * @since 2.5.0
     *
     * @version 1.0
     * @copyright Alexey Dotsenko
     * @author Alexey Dotsenko
     * @link http://www.phpclasses.org/browse/package/1743.html Site
     * @license LGPL http://www.opensource.org/licenses/lgpl-license.html
     */
    class ftp_pure extends \ftp_base {
        function __construct($verb = FALSE, $le = FALSE) {}
        function _settimeout($sock) {}
        function _connect($host, $port) {}
        function _readmsg($fnction = "_readmsg") {}
        function _exec($cmd, $fnction = "_exec") {}
        function _data_prepare($mode = FTP_ASCII) {}
        function _data_read($mode = FTP_ASCII, $fp = NULL) {}
        function _data_write($mode = FTP_ASCII, $fp = NULL) {}
        function _data_write_block($mode, $block) {}
        function _data_close() {}
        function _quit($force = FALSE) {}
    }

    /**
     * Generic Bulk Upgrader Skin for WordPress Upgrades.
     *
     * @since 3.0.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Bulk_Upgrader_Skin extends \wp_upgrader_skin {
        public $in_loop;
        /**
         * @var string|false
         */
        public $error;

        public function __construct($args = array( )) {}
        /**
         */
        public function add_strings() {}
        public function feedback($string) {}
        /**
         */
        public function header() {}
        /**
         */
        public function footer() {}
        public function error($error) {}
        /**
         */
        public function bulk_header() {}
        /**
         */
        public function bulk_footer() {}
        public function before($title = '') {}
        public function after($title = '') {}
        /**
         */
        public function reset() {}
        /**
         */
        public function flush_output() {}
    }

    /**
     * Core class used to implement displaying comments in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Comments_List_Table extends \wp_list_table {
        public $checkbox;
        public $pending_count;
        public $extra_items;
        private $user_can;

        public function __construct($args = array( )) {}
        public function floated_admin_avatar($name, $comment_ID) {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * @global int    $post_id
         * @global string $comment_status
         * @global string $search
         * @global string $comment_type
         */
        public function prepare_items() {}
/**
 * Filters the number of comments listed per page in the comments list table.
 *
 * @since 2.6.0
 *
 * @param int    $comments_per_page The number of comments to list per page.
 * @param string $comment_status    The comment status name. Default 'All'.
 */
        public function get_per_page(/**
 * Filters the number of comments listed per page in the comments list table.
 *
 * @since 2.6.0
 *
 * @param int    $comments_per_page The number of comments to list per page.
 * @param string $comment_status    The comment status name. Default 'All'.
 */
$comment_status = 'all') {}
        /**
         * @global string $comment_status
         */
        public function no_items() {}
        /**
         * @global int $post_id
         * @global string $comment_status
         * @global string $comment_type
         */
        protected function get_views() {}
        /**
         * @global string $comment_status
         *
         * @return array
         */
        protected function get_bulk_actions() {}
/**
 * Fires after the Filter submit button for comment types.
 *
 * @since 2.5.0
 *
 * @param string $comment_status The comment status name. Default 'All'.
 */
        protected function extra_tablenav(/**
 * Fires after the Filter submit button for comment types.
 *
 * @since 2.5.0
 *
 * @param string $comment_status The comment status name. Default 'All'.
 */
$which) {}
        /**
         * @return string|false
         */
        public function current_action() {}
        /**
         * @global int $post_id
         *
         * @return array
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        /**
         * Get the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'comment'.
         */
        protected function get_default_primary_column_name() {}
        /**
         */
        public function display() {}
        public function single_row($item) {}
/** This filter is documented in wp-admin/includes/dashboard.php */
        protected function handle_row_actions(/** This filter is documented in wp-admin/includes/dashboard.php */
$comment, /** This filter is documented in wp-admin/includes/dashboard.php */
$column_name, /** This filter is documented in wp-admin/includes/dashboard.php */
$primary) {}
        public function column_cb($comment) {}
/** This filter is documented in wp-admin/includes/comment.php */
        public function column_comment(/** This filter is documented in wp-admin/includes/comment.php */
$comment) {}
/** This filter is documented in wp-includes/comment-template.php */
        public function column_author(/** This filter is documented in wp-includes/comment-template.php */
$comment) {}
        public function column_date($comment) {}
        public function column_response($comment) {}
/**
 * Fires when the default column output is displayed for a single row.
 *
 * @since 2.8.0
 *
 * @param string $column_name         The custom column's name.
 * @param int    $comment->comment_ID The custom column's unique ID number.
 */
        public function column_default(/**
 * Fires when the default column output is displayed for a single row.
 *
 * @since 2.8.0
 *
 * @param string $column_name         The custom column's name.
 * @param int    $comment->comment_ID The custom column's unique ID number.
 */
$comment, /**
 * Fires when the default column output is displayed for a single row.
 *
 * @since 2.8.0
 *
 * @param string $column_name         The custom column's name.
 * @param int    $comment->comment_ID The custom column's unique ID number.
 */
$column_name) {}
    }

    /**
     * Core class used to implement displaying themes in a list table for the network admin.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_MS_Themes_List_Table extends \wp_list_table {
        public $site_id;
        public $is_site_themes;
        private $has_items;

        public function __construct($args = array( )) {}
        /**
         * @return array
         */
        protected function get_table_classes() {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * @global string $status
         * @global array $totals
         * @global int $page
         * @global string $orderby
         * @global string $order
         * @global string $s
         */
        public function prepare_items() {}
        public function _search_callback($theme) {}
        public function _order_callback($theme_a, $theme_b) {}
        /**
         */
        public function no_items() {}
        /**
         * @return array
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        /**
         * Gets the name of the primary column.
         *
         * @since 4.3.0
         *
         * @return string Unalterable name of the primary column name, in this case, 'name'.
         */
        protected function get_primary_column_name() {}
        /**
         * @global array $totals
         * @global string $status
         * @return array
         */
        protected function get_views() {}
        /**
         * @global string $status
         *
         * @return array
         */
        protected function get_bulk_actions() {}
        /**
         */
        public function display_rows() {}
        public function column_cb($theme) {}
/**
 * Filters the action links of a specific theme in the Multisite themes
 * list table.
 *
 * The dynamic portion of the hook name, `$stylesheet`, refers to the
 * directory name of the theme, which in most cases is synonymous
 * with the template name.
 *
 * @since 3.1.0
 *
 * @param string[] $actions An array of action links.
 * @param WP_Theme $theme   The current WP_Theme object.
 * @param string   $context Status of the theme, one of 'all', 'enabled', or 'disabled'.
 */
        public function column_name(/**
 * Filters the action links of a specific theme in the Multisite themes
 * list table.
 *
 * The dynamic portion of the hook name, `$stylesheet`, refers to the
 * directory name of the theme, which in most cases is synonymous
 * with the template name.
 *
 * @since 3.1.0
 *
 * @param string[] $actions An array of action links.
 * @param WP_Theme $theme   The current WP_Theme object.
 * @param string   $context Status of the theme, one of 'all', 'enabled', or 'disabled'.
 */
$theme) {}
/**
 * Filters the array of row meta for each theme in the Multisite themes
 * list table.
 *
 * @since 3.1.0
 *
 * @param string[] $theme_meta An array of the theme's metadata,
 *                             including the version, author, and
 *                             theme URI.
 * @param string   $stylesheet Directory name of the theme.
 * @param WP_Theme $theme      WP_Theme object.
 * @param string   $status     Status of the theme.
 */
        public function column_description(/**
 * Filters the array of row meta for each theme in the Multisite themes
 * list table.
 *
 * @since 3.1.0
 *
 * @param string[] $theme_meta An array of the theme's metadata,
 *                             including the version, author, and
 *                             theme URI.
 * @param string   $stylesheet Directory name of the theme.
 * @param WP_Theme $theme      WP_Theme object.
 * @param string   $status     Status of the theme.
 */
$theme) {}
/**
 * Fires inside each custom column of the Multisite themes list table.
 *
 * @since 3.1.0
 *
 * @param string   $column_name Name of the column.
 * @param string   $stylesheet  Directory name of the theme.
 * @param WP_Theme $theme       Current WP_Theme object.
 */
        public function column_default(/**
 * Fires inside each custom column of the Multisite themes list table.
 *
 * @since 3.1.0
 *
 * @param string   $column_name Name of the column.
 * @param string   $stylesheet  Directory name of the theme.
 * @param WP_Theme $theme       Current WP_Theme object.
 */
$theme, /**
 * Fires inside each custom column of the Multisite themes list table.
 *
 * @since 3.1.0
 *
 * @param string   $column_name Name of the column.
 * @param string   $stylesheet  Directory name of the theme.
 * @param WP_Theme $theme       Current WP_Theme object.
 */
$column_name) {}
        public function single_row_columns($item) {}
/**
 * Fires after each specific row in the Multisite themes list table.
 *
 * The dynamic portion of the hook name, `$stylesheet`, refers to the
 * directory name of the theme, most often synonymous with the template
 * name of the theme.
 *
 * @since 3.5.0
 *
 * @param string   $stylesheet Directory name of the theme.
 * @param WP_Theme $theme      Current WP_Theme object.
 * @param string   $status     Status of the theme.
 */
        public function single_row(/**
 * Fires after each specific row in the Multisite themes list table.
 *
 * The dynamic portion of the hook name, `$stylesheet`, refers to the
 * directory name of the theme, most often synonymous with the template
 * name of the theme.
 *
 * @since 3.5.0
 *
 * @param string   $stylesheet Directory name of the theme.
 * @param WP_Theme $theme      Current WP_Theme object.
 * @param string   $status     Status of the theme.
 */
$theme) {}
    }

    /**
     * Base class for displaying a list of items in an ajaxified HTML table.
     *
     * @since 3.1.0
     * @access private
     */
    class WP_List_Table {
        /**
         * The current list of items.
         *
         * @since 3.1.0
         * @var array
         */
        public $items;
        /**
         * Various information about the current table.
         *
         * @since 3.1.0
         * @var array
         */
        protected $_args;
        /**
         * Various information needed for displaying the pagination.
         *
         * @since 3.1.0
         * @var array
         */
        protected $_pagination_args;
        /**
         * The current screen.
         *
         * @since 3.1.0
         * @var object
         */
        protected $screen;
        /**
         * Cached bulk actions.
         *
         * @since 3.1.0
         * @var array
         */
        private $_actions;
        /**
         * Cached pagination output.
         *
         * @since 3.1.0
         * @var string
         */
        private $_pagination;
        /**
         * The view switcher modes.
         *
         * @since 4.1.0
         * @var array
         */
        protected $modes;
        /**
         * Stores the value returned by ->get_column_info().
         *
         * @since 4.1.0
         * @var array
         */
        protected $_column_headers;
        /**
         * {@internal Missing Summary}
         *
         * @var array
         */
        protected $compat_fields;
        /**
         * {@internal Missing Summary}
         *
         * @var array
         */
        protected $compat_methods;

        public function __construct($args = array( )) {}
        public function __get($name) {}
        public function __set($name, $value) {}
        public function __isset($name) {}
        public function __unset($name) {}
        public function __call($name, $arguments) {}
        /**
         * Checks the current user's permissions
         *
         * @since 3.1.0
         * @abstract
         */
        public function ajax_user_can() {}
        /**
         * Prepares the list of items for displaying.
         *
         * @uses WP_List_Table::set_pagination_args()
         *
         * @since 3.1.0
         * @abstract
         */
        public function prepare_items() {}
        protected function set_pagination_args($args) {}
        public function get_pagination_arg($key) {}
        /**
         * Whether the table has items to display or not
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function has_items() {}
        /**
         * Message to be displayed when there are no items
         *
         * @since 3.1.0
         */
        public function no_items() {}
        public function search_box($text, $input_id) {}
        /**
         * Get an associative array ( id => link ) with the list
         * of views available on this table.
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_views() {}
        /**
         * Filters the list of available list table views.
         *
         * The dynamic portion of the hook name, `$this->screen->id`, refers
         * to the ID of the current screen, usually a string.
         *
         * @since 3.5.0
         *
         * @param string[] $views An array of available list table views.
         */
        public function views() {}
        /**
         * Get an associative array ( option_name => option_title ) with the list
         * of bulk actions available on this table.
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_bulk_actions() {}
/**
 * Filters the list table Bulk Actions drop-down.
 *
 * The dynamic portion of the hook name, `$this->screen->id`, refers
 * to the ID of the current screen, usually a string.
 *
 * This filter can currently only be used to remove bulk actions.
 *
 * @since 3.5.0
 *
 * @param string[] $actions An array of the available bulk actions.
 */
        protected function bulk_actions(/**
 * Filters the list table Bulk Actions drop-down.
 *
 * The dynamic portion of the hook name, `$this->screen->id`, refers
 * to the ID of the current screen, usually a string.
 *
 * This filter can currently only be used to remove bulk actions.
 *
 * @since 3.5.0
 *
 * @param string[] $actions An array of the available bulk actions.
 */
$which = '') {}
        /**
         * Get the current action selected from the bulk actions dropdown.
         *
         * @since 3.1.0
         *
         * @return string|false The action name or False if no action was selected
         */
        public function current_action() {}
        protected function row_actions($actions, $always_visible = false) {}
/**
 * Filters the 'Months' drop-down results.
 *
 * @since 3.7.0
 *
 * @param object $months    The months drop-down query results.
 * @param string $post_type The post type.
 */
        protected function months_dropdown(/**
 * Filters the 'Months' drop-down results.
 *
 * @since 3.7.0
 *
 * @param object $months    The months drop-down query results.
 * @param string $post_type The post type.
 */
$post_type) {}
        protected function view_switcher($current_mode) {}
        protected function comments_bubble($post_id, $pending_comments) {}
        /**
         * Get the current page number
         *
         * @since 3.1.0
         *
         * @return int
         */
        public function get_pagenum() {}
/**
 * Filters the number of items to be displayed on each page of the list table.
 *
 * The dynamic hook name, $option, refers to the `per_page` option depending
 * on the type of list table in use. Possible values include: 'edit_comments_per_page',
 * 'sites_network_per_page', 'site_themes_network_per_page', 'themes_network_per_page',
 * 'users_network_per_page', 'edit_post_per_page', 'edit_page_per_page',
 * 'edit_{$post_type}_per_page', etc.
 *
 * @since 2.9.0
 *
 * @param int $per_page Number of items to be displayed. Default 20.
 */
        protected function get_items_per_page(/**
 * Filters the number of items to be displayed on each page of the list table.
 *
 * The dynamic hook name, $option, refers to the `per_page` option depending
 * on the type of list table in use. Possible values include: 'edit_comments_per_page',
 * 'sites_network_per_page', 'site_themes_network_per_page', 'themes_network_per_page',
 * 'users_network_per_page', 'edit_post_per_page', 'edit_page_per_page',
 * 'edit_{$post_type}_per_page', etc.
 *
 * @since 2.9.0
 *
 * @param int $per_page Number of items to be displayed. Default 20.
 */
$option, /**
 * Filters the number of items to be displayed on each page of the list table.
 *
 * The dynamic hook name, $option, refers to the `per_page` option depending
 * on the type of list table in use. Possible values include: 'edit_comments_per_page',
 * 'sites_network_per_page', 'site_themes_network_per_page', 'themes_network_per_page',
 * 'users_network_per_page', 'edit_post_per_page', 'edit_page_per_page',
 * 'edit_{$post_type}_per_page', etc.
 *
 * @since 2.9.0
 *
 * @param int $per_page Number of items to be displayed. Default 20.
 */
$default = 20) {}
        protected function pagination($which) {}
        /**
         * Get a list of columns. The format is:
         * 'internal-name' => 'Title'
         *
         * @since 3.1.0
         * @abstract
         *
         * @return array
         */
        public function get_columns() {}
        /**
         * Get a list of sortable columns. The format is:
         * 'internal-name' => 'orderby'
         * or
         * 'internal-name' => array( 'orderby', true )
         *
         * The second format will make the initial sorting order be descending
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_sortable_columns() {}
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, an empty string.
         */
        protected function get_default_primary_column_name() {}
        /**
         * Public wrapper for WP_List_Table::get_default_primary_column_name().
         *
         * @since 4.4.0
         *
         * @return string Name of the default primary column.
         */
        public function get_primary_column() {}
        /**
         * Gets the name of the primary column.
         *
         * @since 4.3.0
         *
         * @return string The name of the primary column.
         */
        protected function get_primary_column_name() {}
        /**
         * Get a list of all, hidden and sortable columns, with filter applied
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_column_info() {}
        /**
         * Return number of visible columns
         *
         * @since 3.1.0
         *
         * @return int
         */
        public function get_column_count() {}
        public function print_column_headers($with_id = true) {}
        /**
         * Display the table
         *
         * @since 3.1.0
         */
        public function display() {}
        /**
         * Get a list of CSS classes for the WP_List_Table table tag.
         *
         * @since 3.1.0
         *
         * @return array List of CSS classes for the table tag.
         */
        protected function get_table_classes() {}
        protected function display_tablenav($which) {}
        protected function extra_tablenav($which) {}
        /**
         * Generate the tbody element for the list table.
         *
         * @since 3.1.0
         */
        public function display_rows_or_placeholder() {}
        /**
         * Generate the table rows
         *
         * @since 3.1.0
         */
        public function display_rows() {}
        public function single_row($item) {}
        protected function column_default($item, $column_name) {}
        protected function column_cb($item) {}
        protected function single_row_columns($item) {}
        protected function handle_row_actions($item, $column_name, $primary) {}
        /**
         * Handle an incoming ajax request (called from admin-ajax.php)
         *
         * @since 3.1.0
         */
        public function ajax_response() {}
        /**
         * Send required variables to JavaScript land
         */
        public function _js_vars() {}
    }

    /**
     * WP_Privacy_Policy_Content class.
     * TODO: move this to a new file.
     *
     * @since 4.9.6
     */
    final class WP_Privacy_Policy_Content {
        static private $policy_content;

        /**
         * Constructor
         *
         * @since 4.9.6
         */
        private function __construct() {}
        public static function add($plugin_name, $policy_text) {}
        /**
         * Quick check if any privacy info has changed.
         *
         * @since 4.9.6
         */
        public static function text_change_check() {}
        /**
         * Output a warning when some privacy info has changed.
         *
         * @since 4.9.6
         */
        public static function policy_text_changed_notice() {}
        public static function _policy_page_updated($post_id) {}
        /**
         * Check for updated, added or removed privacy policy information from plugins.
         *
         * Caches the current info in post_meta of the policy page.
         *
         * @since 4.9.6
         *
         * @return array The privacy policy text/informtion added by core and plugins.
         */
        public static function get_suggested_policy_text() {}
        public static function notice($post = null) {}
        /**
         * Output the privacy policy guide together with content from the theme and plugins.
         *
         * @since 4.9.6
         */
        public static function privacy_policy_guide() {}
/**
 * Filters the default content suggested for inclusion in a privacy policy.
 *
 * @since 4.9.6
 * @since 5.0.0 Added the `$strings`, `$description`, and `$blocks` parameters.
 *
 * @param string $content     The default policy content.
 * @param array  $strings     An array of privacy policy content strings.
 * @param bool   $description Whether policy descriptions should be included.
 * @param bool   $blocks      Whether the content should be formatted for the block editor.
 */
        public static function get_default_content(/**
 * Filters the default content suggested for inclusion in a privacy policy.
 *
 * @since 4.9.6
 * @since 5.0.0 Added the `$strings`, `$description`, and `$blocks` parameters.
 *
 * @param string $content     The default policy content.
 * @param array  $strings     An array of privacy policy content strings.
 * @param bool   $description Whether policy descriptions should be included.
 * @param bool   $blocks      Whether the content should be formatted for the block editor.
 */
$description = false, /**
 * Filters the default content suggested for inclusion in a privacy policy.
 *
 * @since 4.9.6
 * @since 5.0.0 Added the `$strings`, `$description`, and `$blocks` parameters.
 *
 * @param string $content     The default policy content.
 * @param array  $strings     An array of privacy policy content strings.
 * @param bool   $description Whether policy descriptions should be included.
 * @param bool   $blocks      Whether the content should be formatted for the block editor.
 */
$blocks = true) {}
        /**
         * Add the suggested privacy policy text to the policy postbox.
         *
         * @since 4.9.6
         */
        public static function add_suggested_content() {}
    }

    /**
     * Upgrader Skin for Automatic WordPress Upgrades
     *
     * This skin is designed to be used when no output is intended, all output
     * is captured and stored for the caller to process and log/email/discard.
     *
     * @since 3.7.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see Bulk_Upgrader_Skin
     */
    class Automatic_Upgrader_Skin extends \wp_upgrader_skin {
        protected $messages;

        public function request_filesystem_credentials($error = false, $context = '', $allow_relaxed_file_ownership = false) {}
        /**
         * @return array
         */
        public function get_upgrade_messages() {}
        public function feedback($data) {}
        /**
         */
        public function header() {}
        /**
         */
        public function footer() {}
    }

    /**
     * WordPress Filesystem Class for implementing FTP.
     *
     * @since 2.5.0
     *
     * @see WP_Filesystem_Base
     */
    class WP_Filesystem_FTPext extends \wp_filesystem_base {
        public $link;

        public function __construct($opt = '') {}
        /**
         * @return bool
         */
        public function connect() {}
        public function get_contents($file) {}
        public function get_contents_array($file) {}
        public function put_contents($file, $contents, $mode = false) {}
        /**
         * @return string
         */
        public function cwd() {}
        public function chdir($dir) {}
        public function chmod($file, $mode = false, $recursive = false) {}
        public function owner($file) {}
        public function getchmod($file) {}
        public function group($file) {}
        public function copy($source, $destination, $overwrite = false, $mode = false) {}
        public function move($source, $destination, $overwrite = false) {}
        public function delete($file, $recursive = false, $type = false) {}
        public function exists($file) {}
        public function is_file($file) {}
        public function is_dir($path) {}
        public function is_readable($file) {}
        public function is_writable($file) {}
        public function atime($file) {}
        public function mtime($file) {}
        public function size($file) {}
        public function touch($file, $time = 0, $atime = 0) {}
        public function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {}
        public function rmdir($path, $recursive = false) {}
        public function parselisting($line) {}
        public function dirlist($path = '.', $include_hidden = true, $recursive = false) {}
        /**
         */
        public function __destruct() {}
    }

    /**
     * Core class used to implement displaying installed plugins in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Plugins_List_Table extends \wp_list_table {
        public function __construct($args = array( )) {}
        /**
         * @return array
         */
        protected function get_table_classes() {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * Filters whether to display network-active plugins alongside plugins active for the current site.
         *
         * This also controls the display of inactive network-only plugins (plugins with
         * "Network: true" in the plugin header).
         *
         * Plugins cannot be network-activated or network-deactivated from this screen.
         *
         * @since 4.4.0
         *
         * @param bool $show Whether to show network-active plugins. Default is whether the current
         *                   user can manage network plugins (ie. a Super Admin).
         */
        public function prepare_items() {}
        public function _search_callback($plugin) {}
        public function _order_callback($plugin_a, $plugin_b) {}
        /**
         * @global array $plugins
         */
        public function no_items() {}
        public function search_box($text, $input_id) {}
        /**
         * @global string $status
         * @return array
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        /**
         * @global array $totals
         * @global string $status
         * @return array
         */
        protected function get_views() {}
        /**
         * @global string $status
         * @return array
         */
        protected function get_bulk_actions() {}
        public function bulk_actions($which = '') {}
        protected function extra_tablenav($which) {}
        /**
         * @return string
         */
        public function current_action() {}
        /**
         * @global string $status
         */
        public function display_rows() {}
/**
 * Fires after each specific row in the Plugins list table.
 *
 * The dynamic portion of the hook name, `$plugin_file`, refers to the path
 * to the plugin file, relative to the plugins directory.
 *
 * @since 2.7.0
 *
 * @param string $plugin_file Path to the plugin file relative to the plugins directory.
 * @param array  $plugin_data An array of plugin data.
 * @param string $status      Status of the plugin. Defaults are 'All', 'Active',
 *                            'Inactive', 'Recently Activated', 'Upgrade', 'Must-Use',
 *                            'Drop-ins', 'Search'.
 */
        public function single_row(/**
 * Fires after each specific row in the Plugins list table.
 *
 * The dynamic portion of the hook name, `$plugin_file`, refers to the path
 * to the plugin file, relative to the plugins directory.
 *
 * @since 2.7.0
 *
 * @param string $plugin_file Path to the plugin file relative to the plugins directory.
 * @param array  $plugin_data An array of plugin data.
 * @param string $status      Status of the plugin. Defaults are 'All', 'Active',
 *                            'Inactive', 'Recently Activated', 'Upgrade', 'Must-Use',
 *                            'Drop-ins', 'Search'.
 */
$item) {}
        /**
         * Gets the name of the primary column for this specific list table.
         *
         * @since 4.3.0
         *
         * @return string Unalterable name for the primary column, in this case, 'name'.
         */
        protected function get_primary_column_name() {}
    }

    /**
     * Core class used to implement displaying media items in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Media_List_Table extends \wp_list_table {
        /**
         * Holds the number of pending comments for each post.
         *
         * @since 4.4.0
         * @var array
         */
        protected $comment_pending_count;
        private $detached;
        private $is_trash;

        public function __construct($args = array( )) {}
        /**
         * @return bool
         */
        public function ajax_user_can() {}
        /**
         * @global WP_Query $wp_query
         * @global array    $post_mime_types
         * @global array    $avail_post_mime_types
         * @global string   $mode
         */
        public function prepare_items() {}
        /**
         * @global array $post_mime_types
         * @global array $avail_post_mime_types
         * @return array
         */
        protected function get_views() {}
        /**
         * @return array
         */
        protected function get_bulk_actions() {}
/** This action is documented in wp-admin/includes/class-wp-posts-list-table.php */
        protected function extra_tablenav(/** This action is documented in wp-admin/includes/class-wp-posts-list-table.php */
$which) {}
        /**
         * @return string
         */
        public function current_action() {}
        /**
         * @return bool
         */
        public function has_items() {}
        /**
         */
        public function no_items() {}
        /**
         * Override parent views so we can use the filter bar display.
         *
         * @global string $mode List table view mode.
         */
        public function views() {}
        /**
         * Filters the Media list table columns.
         *
         * @since 2.5.0
         *
         * @param string[] $posts_columns An array of columns displayed in the Media list table.
         * @param bool     $detached      Whether the list table contains media not attached
         *                                to any posts. Default true.
         */
        public function get_columns() {}
        /**
         * @return array
         */
        protected function get_sortable_columns() {}
        public function column_cb($post) {}
        public function column_title($post) {}
        public function column_author($post) {}
        public function column_desc($post) {}
        public function column_date($post) {}
        public function column_parent($post) {}
        public function column_comments($post) {}
/**
 * Fires for each custom column in the Media list table.
 *
 * Custom columns are registered using the {@see 'manage_media_columns'} filter.
 *
 * @since 2.5.0
 *
 * @param string $column_name Name of the custom column.
 * @param int    $post_id     Attachment ID.
 */
        public function column_default(/**
 * Fires for each custom column in the Media list table.
 *
 * Custom columns are registered using the {@see 'manage_media_columns'} filter.
 *
 * @since 2.5.0
 *
 * @param string $column_name Name of the custom column.
 * @param int    $post_id     Attachment ID.
 */
$post, /**
 * Fires for each custom column in the Media list table.
 *
 * Custom columns are registered using the {@see 'manage_media_columns'} filter.
 *
 * @since 2.5.0
 *
 * @param string $column_name Name of the custom column.
 * @param int    $post_id     Attachment ID.
 */
$column_name) {}
        /**
         * @global WP_Post $post
         */
        public function display_rows() {}
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'title'.
         */
        protected function get_default_primary_column_name() {}
/**
 * Filters the action links for each attachment in the Media list table.
 *
 * @since 2.8.0
 *
 * @param string[] $actions  An array of action links for each attachment.
 *                           Default 'Edit', 'Delete Permanently', 'View'.
 * @param WP_Post  $post     WP_Post object for the current attachment.
 * @param bool     $detached Whether the list table contains media not attached
 *                           to any posts. Default true.
 */
        private function _get_row_actions(/**
 * Filters the action links for each attachment in the Media list table.
 *
 * @since 2.8.0
 *
 * @param string[] $actions  An array of action links for each attachment.
 *                           Default 'Edit', 'Delete Permanently', 'View'.
 * @param WP_Post  $post     WP_Post object for the current attachment.
 * @param bool     $detached Whether the list table contains media not attached
 *                           to any posts. Default true.
 */
$post, /**
 * Filters the action links for each attachment in the Media list table.
 *
 * @since 2.8.0
 *
 * @param string[] $actions  An array of action links for each attachment.
 *                           Default 'Edit', 'Delete Permanently', 'View'.
 * @param WP_Post  $post     WP_Post object for the current attachment.
 * @param bool     $detached Whether the list table contains media not attached
 *                           to any posts. Default true.
 */
$att_title) {}
        protected function handle_row_actions($post, $column_name, $primary) {}
    }

    /**
     * Core class used to implement site icon functionality.
     *
     * @since 4.3.0
     */
    class WP_Site_Icon {
        /**
         * The minimum size of the site icon.
         *
         * @since 4.3.0
         * @var int
         */
        public $min_size;
        /**
         * The size to which to crop the image so that we can display it in the UI nicely.
         *
         * @since 4.3.0
         * @var int
         */
        public $page_crop;
        /**
         * List of site icon sizes.
         *
         * @since 4.3.0
         * @var int[]
         */
        public $site_icon_sizes;

        /**
         * Registers actions and filters.
         *
         * @since 4.3.0
         */
        public function __construct() {}
        public function create_attachment_object($cropped, $parent_attachment_id) {}
/**
 * Filters the site icon attachment metadata.
 *
 * @since 4.3.0
 *
 * @see wp_generate_attachment_metadata()
 *
 * @param array $metadata Attachment metadata.
 */
        public function insert_attachment(/**
 * Filters the site icon attachment metadata.
 *
 * @since 4.3.0
 *
 * @see wp_generate_attachment_metadata()
 *
 * @param array $metadata Attachment metadata.
 */
$object, /**
 * Filters the site icon attachment metadata.
 *
 * @since 4.3.0
 *
 * @see wp_generate_attachment_metadata()
 *
 * @param array $metadata Attachment metadata.
 */
$file) {}
/**
 * Filters the different dimensions that a site icon is saved in.
 *
 * @since 4.3.0
 *
 * @param int[] $site_icon_sizes Array of sizes available for the Site Icon.
 */
        public function additional_sizes(/**
 * Filters the different dimensions that a site icon is saved in.
 *
 * @since 4.3.0
 *
 * @param int[] $site_icon_sizes Array of sizes available for the Site Icon.
 */
$sizes = array( )) {}
/** This filter is documented in wp-admin/includes/class-wp-site-icon.php */
        public function intermediate_image_sizes(/** This filter is documented in wp-admin/includes/class-wp-site-icon.php */
$sizes = array( )) {}
        public function delete_attachment_data($post_id) {}
        public function get_post_metadata($value, $post_id, $meta_key, $single) {}
    }

    /**
     * Theme Upgrader Skin for WordPress Theme Upgrades.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Theme_Upgrader_Skin extends \wp_upgrader_skin {
        public $theme;

        public function __construct($args = array( )) {}
        /**
         */
        public function after() {}
    }

    /**
     * Core class used to implement an admin screen API.
     *
     * @since 3.3.0
     */
    final class WP_Screen {
        /**
         * Any action associated with the screen. 'add' for *-add.php and *-new.php screens. Empty otherwise.
         *
         * @since 3.3.0
         * @var string
         */
        public $action;
        /**
         * The base type of the screen. This is typically the same as $id but with any post types and taxonomies stripped.
         * For example, for an $id of 'edit-post' the base is 'edit'.
         *
         * @since 3.3.0
         * @var string
         */
        public $base;
        /**
         * The number of columns to display. Access with get_columns().
         *
         * @since 3.4.0
         * @var int
         */
        private $columns;
        /**
         * The unique ID of the screen.
         *
         * @since 3.3.0
         * @var string
         */
        public $id;
        /**
         * Which admin the screen is in. network | user | site | false
         *
         * @since 3.5.0
         * @var string
         */
        protected $in_admin;
        /**
         * Whether the screen is in the network admin.
         *
         * Deprecated. Use in_admin() instead.
         *
         * @since 3.3.0
         * @deprecated 3.5.0
         * @var bool
         */
        public $is_network;
        /**
         * Whether the screen is in the user admin.
         *
         * Deprecated. Use in_admin() instead.
         *
         * @since 3.3.0
         * @deprecated 3.5.0
         * @var bool
         */
        public $is_user;
        /**
         * The base menu parent.
         * This is derived from $parent_file by removing the query string and any .php extension.
         * $parent_file values of 'edit.php?post_type=page' and 'edit.php?post_type=post' have a $parent_base of 'edit'.
         *
         * @since 3.3.0
         * @var string
         */
        public $parent_base;
        /**
         * The parent_file for the screen per the admin menu system.
         * Some $parent_file values are 'edit.php?post_type=page', 'edit.php', and 'options-general.php'.
         *
         * @since 3.3.0
         * @var string
         */
        public $parent_file;
        /**
         * The post type associated with the screen, if any.
         * The 'edit.php?post_type=page' screen has a post type of 'page'.
         * The 'edit-tags.php?taxonomy=$taxonomy&post_type=page' screen has a post type of 'page'.
         *
         * @since 3.3.0
         * @var string
         */
        public $post_type;
        /**
         * The taxonomy associated with the screen, if any.
         * The 'edit-tags.php?taxonomy=category' screen has a taxonomy of 'category'.
         *
         * @since 3.3.0
         * @var string
         */
        public $taxonomy;
        /**
         * The help tab data associated with the screen, if any.
         *
         * @since 3.3.0
         * @var array
         */
        private $_help_tabs;
        /**
         * The help sidebar data associated with screen, if any.
         *
         * @since 3.3.0
         * @var string
         */
        private $_help_sidebar;
        /**
         * The accessible hidden headings and text associated with the screen, if any.
         *
         * @since 4.4.0
         * @var array
         */
        private $_screen_reader_content;
        /**
         * Stores old string-based help.
         *
         * @var array
         */
        static private $_old_compat_help;
        /**
         * The screen options associated with screen, if any.
         *
         * @since 3.3.0
         * @var array
         */
        private $_options;
        /**
         * The screen object registry.
         *
         * @since 3.3.0
         *
         * @var array
         */
        static private $_registry;
        /**
         * Stores the result of the public show_screen_options function.
         *
         * @since 3.3.0
         * @var bool
         */
        private $_show_screen_options;
        /**
         * Stores the 'screen_settings' section of screen options.
         *
         * @since 3.3.0
         * @var string
         */
        private $_screen_settings;
        /**
         * Whether the screen is using the block editor.
         *
         * @since 5.0.0
         * @var bool
         */
        public $is_block_editor;

        public static function get($hook_name = '') {}
        /**
         * Makes the screen object the current screen.
         *
         * @see set_current_screen()
         * @since 3.3.0
         *
         * @global WP_Screen $current_screen
         * @global string    $taxnow
         * @global string    $typenow
         */
        public function set_current_screen() {}
        /**
         * Constructor
         *
         * @since 3.3.0
         */
        private function __construct() {}
        public function in_admin($admin = null) {}
        public function is_block_editor($set = null) {}
        public static function add_old_compat_help($screen, $help) {}
        public function set_parentage($parent_file) {}
        public function add_option($option, $args = array( )) {}
        public function remove_option($option) {}
        /**
         * Remove all options from the screen.
         *
         * @since 3.8.0
         */
        public function remove_options() {}
        /**
         * Get the options registered for the screen.
         *
         * @since 3.8.0
         *
         * @return array Options with arguments.
         */
        public function get_options() {}
        public function get_option($option, $key = false) {}
        /**
         * Gets the help tabs registered for the screen.
         *
         * @since 3.4.0
         * @since 4.4.0 Help tabs are ordered by their priority.
         *
         * @return array Help tabs with arguments.
         */
        public function get_help_tabs() {}
        public function get_help_tab($id) {}
        public function add_help_tab($args) {}
        public function remove_help_tab($id) {}
        /**
         * Removes all help tabs from the contextual help for the screen.
         *
         * @since 3.3.0
         */
        public function remove_help_tabs() {}
        /**
         * Gets the content from a contextual help sidebar.
         *
         * @since 3.4.0
         *
         * @return string Contents of the help sidebar.
         */
        public function get_help_sidebar() {}
        public function set_help_sidebar($content) {}
        /**
         * Gets the number of layout columns the user has selected.
         *
         * The layout_columns option controls the max number and default number of
         * columns. This method returns the number of columns within that range selected
         * by the user via Screen Options. If no selection has been made, the default
         * provisioned in layout_columns is returned. If the screen does not support
         * selecting the number of layout columns, 0 is returned.
         *
         * @since 3.4.0
         *
         * @return int Number of columns to display.
         */
        public function get_columns() {}
        /**
         * Get the accessible hidden headings and text used in the screen.
         *
         * @since 4.4.0
         *
         * @see set_screen_reader_content() For more information on the array format.
         *
         * @return array An associative array of screen reader text strings.
         */
        public function get_screen_reader_content() {}
        public function get_screen_reader_text($key) {}
        public function set_screen_reader_content($content = array( )) {}
        /**
         * Remove all the accessible hidden headings and text for the screen.
         *
         * @since 4.4.0
         */
        public function remove_screen_reader_content() {}
        /**
         * Render the screen's help section.
         *
         * This will trigger the deprecated filters for backward compatibility.
         *
         * @since 3.3.0
         *
         * @global string $screen_layout_columns
         */
        public function render_screen_meta() {}
        /**
         * Filters whether to show the Screen Options tab.
         *
         * @since 3.2.0
         *
         * @param bool      $show_screen Whether to show Screen Options tab.
         *                               Default true.
         * @param WP_Screen $this        Current WP_Screen instance.
         */
        public function show_screen_options() {}
/**
 * Filters whether to show the Screen Options submit button.
 *
 * @since 4.4.0
 *
 * @param bool      $show_button Whether to show Screen Options submit button.
 *                               Default false.
 * @param WP_Screen $this        Current WP_Screen instance.
 */
        public function render_screen_options(/**
 * Filters whether to show the Screen Options submit button.
 *
 * @since 4.4.0
 *
 * @param bool      $show_button Whether to show Screen Options submit button.
 *                               Default false.
 * @param WP_Screen $this        Current WP_Screen instance.
 */
$options = array( )) {}
        /**
         * Render the meta boxes preferences.
         *
         * @since 4.4.0
         *
         * @global array $wp_meta_boxes
         */
        public function render_meta_boxes_preferences() {}
        /**
         * Render the list table columns preferences.
         *
         * @since 4.4.0
         */
        public function render_list_table_columns_preferences() {}
        /**
         * Render the option for number of columns on the page
         *
         * @since 3.3.0
         */
        public function render_screen_layout() {}
        /** This filter is documented in wp-admin/includes/post.php */
        public function render_per_page_options() {}
        /**
         * Render the list table view mode preferences.
         *
         * @since 4.4.0
         *
         * @global string $mode List table view mode.
         */
        public function render_view_mode() {}
        public function render_screen_reader_content($key = '', $tag = 'h2') {}
    }

    /**
     * PemFTP base class
     *
     */
    class ftp_base {
        public $LocalEcho;
        public $Verbose;
        public $OS_local;
        public $OS_remote;
        public $_lastaction;
        public $_errors;
        public $_type;
        public $_umask;
        public $_timeout;
        public $_passive;
        public $_host;
        public $_fullhost;
        public $_port;
        public $_datahost;
        public $_dataport;
        public $_ftp_control_sock;
        public $_ftp_data_sock;
        public $_ftp_temp_sock;
        public $_ftp_buff_size;
        public $_login;
        public $_password;
        public $_connected;
        public $_ready;
        public $_code;
        public $_message;
        public $_can_restore;
        public $_port_available;
        public $_curtype;
        public $_features;
        public $_error_array;
        public $AuthorizedTransferMode;
        public $OS_FullName;
        public $_eol_code;
        public $AutoAsciiExt;

        function __construct($port_mode = FALSE, $verb = FALSE, $le = FALSE) {}
        function ftp_base($port_mode = FALSE) {}
        function parselisting($line) {}
        function SendMSG($message = "", $crlf = true) {}
        function SetType($mode = FTP_AUTOASCII) {}
        function _settype($mode = FTP_ASCII) {}
        function Passive($pasv = NULL) {}
        function SetServer($host, $port = 21, $reconnect = true) {}
        function SetUmask($umask = 22) {}
        function SetTimeout($timeout = 30) {}
        function connect($server = NULL) {}
        function quit($force = false) {}
        function login($user = NULL, $pass = NULL) {}
        function pwd() {}
        function cdup() {}
        function chdir($pathname) {}
        function rmdir($pathname) {}
        function mkdir($pathname) {}
        function rename($from, $to) {}
        function filesize($pathname) {}
        function abort() {}
        function mdtm($pathname) {}
        function systype() {}
        function delete($pathname) {}
        function site($command, $fnction = "site") {}
        function chmod($pathname, $mode) {}
        function restore($from) {}
        function features() {}
        function rawlist($pathname = "", $arg = "") {}
        function nlist($pathname = "", $arg = "") {}
        function is_exists($pathname) {}
        function file_exists($pathname) {}
        function fget($fp, $remotefile, $rest = 0) {}
        function get($remotefile, $localfile = NULL, $rest = 0) {}
        function fput($remotefile, $fp, $rest = 0) {}
        function put($localfile, $remotefile = NULL, $rest = 0) {}
        function mput($local = ".", $remote = NULL, $continious = false) {}
        function mget($remote, $local = ".", $continious = false) {}
        function mdel($remote, $continious = false) {}
        function mmkdir($dir, $mode = 777) {}
        function glob($pattern, $handle = NULL) {}
        function glob_pattern_match($pattern, $string) {}
        function glob_regexp($pattern, $probe) {}
        function dirlist($remote) {}
        function _checkCode() {}
        function _list($arg = "", $cmd = "LIST", $fnction = "_list") {}
        function PushError($fctname, $msg, $desc = false) {}
        function PopError() {}
    }

    class ftp extends \ftp_pure {}

    /**
     * WordPress User Search class.
     *
     * @since 2.1.0
     * @deprecated 3.1.0 Use WP_User_Query
     */
    class WP_User_Search {
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var mixed
         */
        public $results;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var string
         */
        public $search_term;
        /**
         * Page number.
         *
         * @since 2.1.0
         * @access private
         * @var int
         */
        public $page;
        /**
         * Role name that users have.
         *
         * @since 2.5.0
         * @access private
         * @var string
         */
        public $role;
        /**
         * Raw page number.
         *
         * @since 2.1.0
         * @access private
         * @var int|bool
         */
        public $raw_page;
        /**
         * Amount of users to display per page.
         *
         * @since 2.1.0
         * @access public
         * @var int
         */
        public $users_per_page;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var int
         */
        public $first_user;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var int
         */
        public $last_user;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var string
         */
        public $query_limit;
        /**
         * {@internal Missing Description}}
         *
         * @since 3.0.0
         * @access private
         * @var string
         */
        public $query_orderby;
        /**
         * {@internal Missing Description}}
         *
         * @since 3.0.0
         * @access private
         * @var string
         */
        public $query_from;
        /**
         * {@internal Missing Description}}
         *
         * @since 3.0.0
         * @access private
         * @var string
         */
        public $query_where;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var int
         */
        public $total_users_for_query;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var bool
         */
        public $too_many_total_users;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var WP_Error
         */
        public $search_errors;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.7.0
         * @access private
         * @var string
         */
        public $paging_text;

        function __construct($search_term = '', $page = '', $role = '') {}
        public function WP_User_Search($search_term = '', $page = '', $role = '') {}
        /**
         * Prepares the user search query (legacy).
         *
         * @since 2.1.0
         * @access public
         */
        public function prepare_query() {}
        /**
         * Executes the user search query.
         *
         * @since 2.1.0
         * @access public
         */
        public function query() {}
        /**
         * Prepares variables for use in templates.
         *
         * @since 2.1.0
         * @access public
         */
        function prepare_vars_for_template_usage() {}
        /**
         * Handles paging for the user search query.
         *
         * @since 2.1.0
         * @access public
         */
        public function do_paging() {}
        /**
         * Retrieves the user search query results.
         *
         * @since 2.1.0
         * @access public
         *
         * @return array
         */
        public function get_results() {}
        /**
         * Displaying paging text.
         *
         * @see do_paging() Builds paging text.
         *
         * @since 2.1.0
         * @access public
         */
        function page_links() {}
        /**
         * Whether paging is enabled.
         *
         * @see do_paging() Builds paging text.
         *
         * @since 2.1.0
         * @access public
         *
         * @return bool
         */
        function results_are_paged() {}
        /**
         * Whether there are search terms.
         *
         * @since 2.1.0
         * @access public
         *
         * @return bool
         */
        function is_search() {}
    }

    class MagpieRSS {
        public $parser;
        public $current_item;
        public $items;
        public $channel;
        public $textinput;
        public $image;
        public $feed_type;
        public $feed_version;
        public $stack;
        public $inchannel;
        public $initem;
        public $incontent;
        public $intextinput;
        public $inimage;
        public $current_field;
        public $current_namespace;
        public $_CONTENT_CONSTRUCTS;

        function __construct($source) {}
        public function MagpieRSS($source) {}
        function feed_start_element($p, $element, $attrs) {}
        function feed_cdata($p, $text) {}
        function feed_end_element($p, $el) {}
        function concat($str1, $str2 = "") {}
        function append_content($text) {}
        function append($el, $text) {}
        function normalize() {}
        function is_rss() {}
        function is_atom() {}
        function map_attrs($k, $v) {}
        function error($errormsg, $lvl = E_USER_WARNING) {}
    }

    class RSSCache {
        public $BASE_CACHE;
        public $MAX_AGE;
        public $ERROR;

        function __construct($base = '', $age = '') {}
        public function RSSCache($base = '', $age = '') {}
        function set($url, $rss) {}
        function get($url) {}
        function check_cache($url) {}
        function serialize($rss) {}
        function unserialize($data) {}
        function file_name($url) {}
        function error($errormsg, $lvl = E_USER_WARNING) {}
        function debug($debugmsg, $lvl = E_USER_NOTICE) {}
    }

    /**
     * Customize Setting class.
     *
     * Handles saving and sanitizing of settings.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Manager
     */
    class WP_Customize_Setting {
        /**
         * Customizer bootstrap instance.
         *
         * @since 3.4.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Unique string identifier for the setting.
         *
         * @since 3.4.0
         * @var string
         */
        public $id;
        /**
         * Type of customize settings.
         *
         * @since 3.4.0
         * @var string
         */
        public $type;
        /**
         * Capability required to edit this setting.
         *
         * @since 3.4.0
         * @var string|array
         */
        public $capability;
        /**
         * Feature a theme is required to support to enable this setting.
         *
         * @since 3.4.0
         * @var string
         */
        public $theme_supports;
        /**
         * The default value for the setting.
         *
         * @since 3.4.0
         * @var string
         */
        public $default;
        /**
         * Options for rendering the live preview of changes in Theme Customizer.
         *
         * Set this value to 'postMessage' to enable a custom Javascript handler to render changes to this setting
         * as opposed to reloading the whole page.
         *
         * @link https://developer.wordpress.org/themes/customize-api
         *
         * @since 3.4.0
         * @var string
         */
        public $transport;
        /**
         * Server-side validation callback for the setting's value.
         *
         * @since 4.6.0
         * @var callable
         */
        public $validate_callback;
        /**
         * Callback to filter a Customize setting value in un-slashed form.
         *
         * @since 3.4.0
         * @var callable
         */
        public $sanitize_callback;
        /**
         * Callback to convert a Customize PHP setting value to a value that is JSON serializable.
         *
         * @since 3.4.0
         * @var string
         */
        public $sanitize_js_callback;
        /**
         * Whether or not the setting is initially dirty when created.
         *
         * This is used to ensure that a setting will be sent from the pane to the
         * preview when loading the Customizer. Normally a setting only is synced to
         * the preview if it has been changed. This allows the setting to be sent
         * from the start.
         *
         * @since 4.2.0
         * @var bool
         */
        public $dirty;
        /**
         * ID Data.
         *
         * @since 3.4.0
         * @var array
         */
        protected $id_data;
        /**
         * Whether or not preview() was called.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $is_previewed;
        /**
         * Cache of multidimensional values to improve performance.
         *
         * @since 4.4.0
         * @var array
         */
        static protected $aggregated_multidimensionals;
        /**
         * Whether the multidimensional setting is aggregated.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $is_multidimensional_aggregated;
        /**
         * The ID for the current site when the preview() method was called.
         *
         * @since 4.2.0
         * @var int
         */
        protected $_previewed_blog_id;
        /**
         * Original non-previewed value stored by the preview method.
         *
         * @see WP_Customize_Setting::preview()
         * @since 4.1.1
         * @var mixed
         */
        protected $_original_value;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Get parsed ID data for multidimensional setting.
         *
         * @since 4.4.0
         *
         * @return array {
         *     ID data for multidimensional setting.
         *
         *     @type string $base ID base
         *     @type array  $keys Keys for multidimensional array.
         * }
         */
        public function id_data() {}
        /**
         * Set up the setting for aggregated multidimensional values.
         *
         * When a multidimensional setting gets aggregated, all of its preview and update
         * calls get combined into one call, greatly improving performance.
         *
         * @since 4.4.0
         */
        protected function aggregate_multidimensional() {}
        /**
         * Reset `$aggregated_multidimensionals` static variable.
         *
         * This is intended only for use by unit tests.
         *
         * @since 4.5.0
         * @ignore
         */
        public static function reset_aggregated_multidimensionals() {}
        /**
         * Return true if the current site is not the same as the previewed site.
         *
         * @since 4.2.0
         *
         * @return bool If preview() has been called.
         */
        public function is_current_blog_previewed() {}
        /**
         * Fires when the WP_Customize_Setting::preview() method is called for settings
         * not handled as theme_mods or options.
         *
         * The dynamic portion of the hook name, `$this->type`, refers to the setting type.
         *
         * @since 4.1.0
         *
         * @param WP_Customize_Setting $this WP_Customize_Setting instance.
         */
        public function preview() {}
        /**
         * Clear out the previewed-applied flag for a multidimensional-aggregated value whenever its post value is updated.
         *
         * This ensures that the new value will get sanitized and used the next time
         * that `WP_Customize_Setting::_multidimensional_preview_filter()`
         * is called for this setting.
         *
         * @since 4.4.0
         *
         * @see WP_Customize_Manager::set_post_value()
         * @see WP_Customize_Setting::_multidimensional_preview_filter()
         */
        public function _clear_aggregated_multidimensional_preview_applied_flag() {}
        public function _preview_filter($original) {}
        public function _multidimensional_preview_filter($original) {}
        /**
         * Fires when the WP_Customize_Setting::save() method is called.
         *
         * The dynamic portion of the hook name, `$id_base` refers to
         * the base slug of the setting name.
         *
         * @since 3.4.0
         *
         * @param WP_Customize_Setting $this WP_Customize_Setting instance.
         */
        public function save() {}
        public function post_value($default = null) {}
/**
 * Filters a Customize setting value in un-slashed form.
 *
 * @since 3.4.0
 *
 * @param mixed                $value Value of the setting.
 * @param WP_Customize_Setting $this  WP_Customize_Setting instance.
 */
        public function sanitize(/**
 * Filters a Customize setting value in un-slashed form.
 *
 * @since 3.4.0
 *
 * @param mixed                $value Value of the setting.
 * @param WP_Customize_Setting $this  WP_Customize_Setting instance.
 */
$value) {}
/**
 * Validates a Customize setting value.
 *
 * Plugins should amend the `$validity` object via its `WP_Error::add()` method.
 *
 * The dynamic portion of the hook name, `$this->ID`, refers to the setting ID.
 *
 * @since 4.6.0
 *
 * @param WP_Error             $validity Filtered from `true` to `WP_Error` when invalid.
 * @param mixed                $value    Value of the setting.
 * @param WP_Customize_Setting $this     WP_Customize_Setting instance.
 */
        public function validate(/**
 * Validates a Customize setting value.
 *
 * Plugins should amend the `$validity` object via its `WP_Error::add()` method.
 *
 * The dynamic portion of the hook name, `$this->ID`, refers to the setting ID.
 *
 * @since 4.6.0
 *
 * @param WP_Error             $validity Filtered from `true` to `WP_Error` when invalid.
 * @param mixed                $value    Value of the setting.
 * @param WP_Customize_Setting $this     WP_Customize_Setting instance.
 */
$value) {}
        protected function get_root_value($default = null) {}
        protected function set_root_value($value) {}
/**
 * Fires when the WP_Customize_Setting::update() method is called for settings
 * not handled as theme_mods or options.
 *
 * The dynamic portion of the hook name, `$this->type`, refers to the type of setting.
 *
 * @since 3.4.0
 *
 * @param mixed                $value Value of the setting.
 * @param WP_Customize_Setting $this  WP_Customize_Setting instance.
 */
        protected function update(/**
 * Fires when the WP_Customize_Setting::update() method is called for settings
 * not handled as theme_mods or options.
 *
 * The dynamic portion of the hook name, `$this->type`, refers to the type of setting.
 *
 * @since 3.4.0
 *
 * @param mixed                $value Value of the setting.
 * @param WP_Customize_Setting $this  WP_Customize_Setting instance.
 */
$value) {}
        /**
         * Deprecated method.
         *
         * @since 3.4.0
         * @deprecated 4.4.0 Deprecated in favor of update() method.
         */
        protected function _update_theme_mod() {}
        /**
         * Deprecated method.
         *
         * @since 3.4.0
         * @deprecated 4.4.0 Deprecated in favor of update() method.
         */
        protected function _update_option() {}
        /**
         * Fetch the value of the setting.
         *
         * @since 3.4.0
         *
         * @return mixed The value.
         */
        public function value() {}
        /**
         * Sanitize the setting's value for use in JavaScript.
         *
         * @since 3.4.0
         *
         * @return mixed The requested escaped value.
         */
        public function js_value() {}
        /**
         * Retrieves the data to export to the client via JSON.
         *
         * @since 4.6.0
         *
         * @return array Array of parameters passed to JavaScript.
         */
        public function json() {}
        /**
         * Validate user capabilities whether the theme supports the setting.
         *
         * @since 3.4.0
         *
         * @return bool False if theme doesn't support the setting or user can't change setting, otherwise true.
         */
        public function check_capabilities() {}
        protected function multidimensional($root, $keys, $create = false) {}
        protected function multidimensional_replace($root, $keys, $value) {}
        protected function multidimensional_get($root, $keys, $default = null) {}
        protected function multidimensional_isset($root, $keys) {}
    }

    /**
     * Core class used to implement oEmbed functionality.
     *
     * @since 2.9.0
     */
    class WP_oEmbed {
        /**
         * A list of oEmbed providers.
         *
         * @since 2.9.0
         * @var array
         */
        public $providers;
        /**
         * A list of an early oEmbed providers.
         *
         * @since 4.0.0
         * @var array
         */
        static public $early_providers;
        /**
         * A list of private/protected methods, used for backward compatibility.
         *
         * @since 4.2.0
         * @var array
         */
        private $compat_methods;

        /**
         * Filters the list of whitelisted oEmbed providers.
         *
         * Since WordPress 4.4, oEmbed discovery is enabled for all users and allows embedding of sanitized
         * iframes. The providers in this list are whitelisted, meaning they are trusted and allowed to
         * embed any content, such as iframes, videos, JavaScript, and arbitrary HTML.
         *
         * Supported providers:
         *
         * |   Provider   |                     Flavor                | Supports HTTPS |  Since  |
         * | ------------ | ----------------------------------------- | :------------: | ------- |
         * | Dailymotion  | dailymotion.com                           |      Yes       | 2.9.0   |
         * | Flickr       | flickr.com                                |      Yes       | 2.9.0   |
         * | Hulu         | hulu.com                                  |      Yes       | 2.9.0   |
         * | Scribd       | scribd.com                                |      Yes       | 2.9.0   |
         * | Vimeo        | vimeo.com                                 |      Yes       | 2.9.0   |
         * | WordPress.tv | wordpress.tv                              |      Yes       | 2.9.0   |
         * | YouTube      | youtube.com/watch                         |      Yes       | 2.9.0   |
         * | Crowdsignal  | polldaddy.com                             |      Yes       | 3.0.0   |
         * | SmugMug      | smugmug.com                               |      Yes       | 3.0.0   |
         * | YouTube      | youtu.be                                  |      Yes       | 3.0.0   |
         * | Twitter      | twitter.com                               |      Yes       | 3.4.0   |
         * | Instagram    | instagram.com                             |      Yes       | 3.5.0   |
         * | Instagram    | instagr.am                                |      Yes       | 3.5.0   |
         * | Slideshare   | slideshare.net                            |      Yes       | 3.5.0   |
         * | SoundCloud   | soundcloud.com                            |      Yes       | 3.5.0   |
         * | Dailymotion  | dai.ly                                    |      Yes       | 3.6.0   |
         * | Flickr       | flic.kr                                   |      Yes       | 3.6.0   |
         * | Spotify      | spotify.com                               |      Yes       | 3.6.0   |
         * | Imgur        | imgur.com                                 |      Yes       | 3.9.0   |
         * | Meetup.com   | meetup.com                                |      Yes       | 3.9.0   |
         * | Meetup.com   | meetu.ps                                  |      Yes       | 3.9.0   |
         * | Animoto      | animoto.com                               |      Yes       | 4.0.0   |
         * | Animoto      | video214.com                              |      Yes       | 4.0.0   |
         * | CollegeHumor | collegehumor.com                          |      Yes       | 4.0.0   |
         * | Issuu        | issuu.com                                 |      Yes       | 4.0.0   |
         * | Mixcloud     | mixcloud.com                              |      Yes       | 4.0.0   |
         * | Crowdsignal  | poll.fm                                   |      Yes       | 4.0.0   |
         * | TED          | ted.com                                   |      Yes       | 4.0.0   |
         * | YouTube      | youtube.com/playlist                      |      Yes       | 4.0.0   |
         * | Tumblr       | tumblr.com                                |      Yes       | 4.2.0   |
         * | Kickstarter  | kickstarter.com                           |      Yes       | 4.2.0   |
         * | Kickstarter  | kck.st                                    |      Yes       | 4.2.0   |
         * | Cloudup      | cloudup.com                               |      Yes       | 4.3.0   |
         * | ReverbNation | reverbnation.com                          |      Yes       | 4.4.0   |
         * | VideoPress   | videopress.com                            |      Yes       | 4.4.0   |
         * | Reddit       | reddit.com                                |      Yes       | 4.4.0   |
         * | Speaker Deck | speakerdeck.com                           |      Yes       | 4.4.0   |
         * | Twitter      | twitter.com/timelines                     |      Yes       | 4.5.0   |
         * | Twitter      | twitter.com/moments                       |      Yes       | 4.5.0   |
         * | Facebook     | facebook.com                              |      Yes       | 4.7.0   |
         * | Twitter      | twitter.com/user                          |      Yes       | 4.7.0   |
         * | Twitter      | twitter.com/likes                         |      Yes       | 4.7.0   |
         * | Twitter      | twitter.com/lists                         |      Yes       | 4.7.0   |
         * | Screencast   | screencast.com                            |      Yes       | 4.8.0   |
         * | Amazon       | amazon.com (com.mx, com.br, ca)           |      Yes       | 4.9.0   |
         * | Amazon       | amazon.de (fr, it, es, in, nl, ru, co.uk) |      Yes       | 4.9.0   |
         * | Amazon       | amazon.co.jp (com.au)                     |      Yes       | 4.9.0   |
         * | Amazon       | amazon.cn                                 |      Yes       | 4.9.0   |
         * | Amazon       | a.co                                      |      Yes       | 4.9.0   |
         * | Amazon       | amzn.to (eu, in, asia)                    |      Yes       | 4.9.0   |
         * | Amazon       | z.cn                                      |      Yes       | 4.9.0   |
         * | Someecards   | someecards.com                            |      Yes       | 4.9.0   |
         * | Someecards   | some.ly                                   |      Yes       | 4.9.0   |
         * | Crowdsignal  | survey.fm                                 |      Yes       | 5.1.0   |
         * | Instagram TV | instagram.com                             |      Yes       | 5.1.0   |
         * | Instagram TV | instagr.am                                |      Yes       | 5.1.0   |
         *
         * No longer supported providers:
         *
         * |   Provider   |        Flavor        | Supports HTTPS |   Since   |  Removed  |
         * | ------------ | -------------------- | :------------: | --------- | --------- |
         * | Qik          | qik.com              |      Yes       | 2.9.0     | 3.9.0     |
         * | Viddler      | viddler.com          |      Yes       | 2.9.0     | 4.0.0     |
         * | Revision3    | revision3.com        |      No        | 2.9.0     | 4.2.0     |
         * | Blip         | blip.tv              |      No        | 2.9.0     | 4.4.0     |
         * | Rdio         | rdio.com             |      Yes       | 3.6.0     | 4.4.1     |
         * | Rdio         | rd.io                |      Yes       | 3.6.0     | 4.4.1     |
         * | Vine         | vine.co              |      Yes       | 4.1.0     | 4.9.0     |
         * | Photobucket  | photobucket.com      |      No        | 2.9.0     | 5.1.0     |
         * | Funny or Die | funnyordie.com       |      Yes       | 3.0.0     | 5.1.0     |
         *
         * @see wp_oembed_add_provider()
         *
         * @since 2.9.0
         *
         * @param array[] $providers An array of arrays containing data about popular oEmbed providers.
         */
        public function __construct() {}
        public function __call($name, $arguments) {}
        public function get_provider($url, $args = '') {}
        public static function _add_provider_early($format, $provider, $regex = false) {}
        public static function _remove_provider_early($format) {}
        public function get_data($url, $args = '') {}
/**
 * Filters the HTML returned by the oEmbed provider.
 *
 * @since 2.9.0
 *
 * @param string|false $data The returned oEmbed HTML (false if unsafe).
 * @param string       $url  URL of the content to be embedded.
 * @param array        $args Optional arguments, usually passed from a shortcode.
 */
        public function get_html(/**
 * Filters the HTML returned by the oEmbed provider.
 *
 * @since 2.9.0
 *
 * @param string|false $data The returned oEmbed HTML (false if unsafe).
 * @param string       $url  URL of the content to be embedded.
 * @param array        $args Optional arguments, usually passed from a shortcode.
 */
$url, /**
 * Filters the HTML returned by the oEmbed provider.
 *
 * @since 2.9.0
 *
 * @param string|false $data The returned oEmbed HTML (false if unsafe).
 * @param string       $url  URL of the content to be embedded.
 * @param array        $args Optional arguments, usually passed from a shortcode.
 */
$args = '') {}
/**
 * Filters the link types that contain oEmbed provider URLs.
 *
 * @since 2.9.0
 *
 * @param string[] $format Array of oEmbed link types. Accepts 'application/json+oembed',
 *                         'text/xml+oembed', and 'application/xml+oembed' (incorrect,
 *                         used by at least Vimeo).
 */
        public function discover(/**
 * Filters the link types that contain oEmbed provider URLs.
 *
 * @since 2.9.0
 *
 * @param string[] $format Array of oEmbed link types. Accepts 'application/json+oembed',
 *                         'text/xml+oembed', and 'application/xml+oembed' (incorrect,
 *                         used by at least Vimeo).
 */
$url) {}
/**
 * Filters the oEmbed URL to be fetched.
 *
 * @since 2.9.0
 * @since 4.9.0 The `dnt` (Do Not Track) query parameter was added to all oEmbed provider URLs.
 *
 * @param string $provider URL of the oEmbed provider.
 * @param string $url      URL of the content to be embedded.
 * @param array  $args     Optional arguments, usually passed from a shortcode.
 */
        public function fetch(/**
 * Filters the oEmbed URL to be fetched.
 *
 * @since 2.9.0
 * @since 4.9.0 The `dnt` (Do Not Track) query parameter was added to all oEmbed provider URLs.
 *
 * @param string $provider URL of the oEmbed provider.
 * @param string $url      URL of the content to be embedded.
 * @param array  $args     Optional arguments, usually passed from a shortcode.
 */
$provider, /**
 * Filters the oEmbed URL to be fetched.
 *
 * @since 2.9.0
 * @since 4.9.0 The `dnt` (Do Not Track) query parameter was added to all oEmbed provider URLs.
 *
 * @param string $provider URL of the oEmbed provider.
 * @param string $url      URL of the content to be embedded.
 * @param array  $args     Optional arguments, usually passed from a shortcode.
 */
$url, /**
 * Filters the oEmbed URL to be fetched.
 *
 * @since 2.9.0
 * @since 4.9.0 The `dnt` (Do Not Track) query parameter was added to all oEmbed provider URLs.
 *
 * @param string $provider URL of the oEmbed provider.
 * @param string $url      URL of the content to be embedded.
 * @param array  $args     Optional arguments, usually passed from a shortcode.
 */
$args = '') {}
/** This filter is documented in wp-includes/class-oembed.php */
        private function _fetch_with_format(/** This filter is documented in wp-includes/class-oembed.php */
$provider_url_with_args, /** This filter is documented in wp-includes/class-oembed.php */
$format) {}
        private function _parse_json($response_body) {}
        private function _parse_xml($response_body) {}
        private function _parse_xml_body($response_body) {}
/**
 * Filters the returned oEmbed HTML.
 *
 * Use this filter to add support for custom data types, or to filter the result.
 *
 * @since 2.9.0
 *
 * @param string $return The returned oEmbed HTML.
 * @param object $data   A data object result from an oEmbed provider.
 * @param string $url    The URL of the content to be embedded.
 */
        public function data2html(/**
 * Filters the returned oEmbed HTML.
 *
 * Use this filter to add support for custom data types, or to filter the result.
 *
 * @since 2.9.0
 *
 * @param string $return The returned oEmbed HTML.
 * @param object $data   A data object result from an oEmbed provider.
 * @param string $url    The URL of the content to be embedded.
 */
$data, /**
 * Filters the returned oEmbed HTML.
 *
 * Use this filter to add support for custom data types, or to filter the result.
 *
 * @since 2.9.0
 *
 * @param string $return The returned oEmbed HTML.
 * @param object $data   A data object result from an oEmbed provider.
 * @param string $url    The URL of the content to be embedded.
 */
$url) {}
        public function _strip_newlines($html, $data, $url) {}
    }

    /**
     * Core class used for querying comments.
     *
     * @since 3.1.0
     *
     * @see WP_Comment_Query::__construct() for accepted arguments.
     */
    class WP_Comment_Query {
        /**
         * SQL for database query.
         *
         * @since 4.0.1
         * @var string
         */
        public $request;
        /**
         * Metadata query container
         *
         * @since 3.5.0
         * @var object WP_Meta_Query
         */
        public $meta_query;
        /**
         * Metadata query clauses.
         *
         * @since 4.4.0
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * SQL query clauses.
         *
         * @since 4.4.0
         * @var array
         */
        protected $sql_clauses;
        /**
         * SQL WHERE clause.
         *
         * Stored after the {@see 'comments_clauses'} filter is run on the compiled WHERE sub-clauses.
         *
         * @since 4.4.2
         * @var string
         */
        protected $filtered_where_clause;
        /**
         * Date query container
         *
         * @since 3.7.0
         * @var object WP_Date_Query
         */
        public $date_query;
        /**
         * Query vars set by the user.
         *
         * @since 3.1.0
         * @var array
         */
        public $query_vars;
        /**
         * Default values for query vars.
         *
         * @since 4.2.0
         * @var array
         */
        public $query_var_defaults;
        /**
         * List of comments located by the query.
         *
         * @since 4.0.0
         * @var array
         */
        public $comments;
        /**
         * The amount of found comments for the current query.
         *
         * @since 4.4.0
         * @var int
         */
        public $found_comments;
        /**
         * The number of pages.
         *
         * @since 4.4.0
         * @var int
         */
        public $max_num_pages;

        public function __call($name, $arguments) {}
        public function __construct($query = '') {}
/**
 * Fires after the comment query vars have been parsed.
 *
 * @since 4.2.0
 *
 * @param WP_Comment_Query $this The WP_Comment_Query instance (passed by reference).
 */
        public function parse_query(/**
 * Fires after the comment query vars have been parsed.
 *
 * @since 4.2.0
 *
 * @param WP_Comment_Query $this The WP_Comment_Query instance (passed by reference).
 */
$query = '') {}
        public function query($query) {}
        /**
         * Get a list of comments matching the query vars.
         *
         * @since 4.2.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return int|array List of comments or number of found comments if `$count` argument is true.
         */
        public function get_comments() {}
        /**
         * Used internally to get a list of comment IDs matching the query vars.
         *
         * @since 4.4.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return int|array A single count of comment IDs if a count query. An array of comment IDs if a full query.
         */
        protected function get_comment_ids() {}
        /**
         * Populates found_comments and max_num_pages properties for the current
         * query if the limit clause was used.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        private function set_found_comments() {}
        protected function fill_descendants($comments) {}
        protected function get_search_sql($string, $cols) {}
        protected function parse_orderby($orderby) {}
        protected function parse_order($order) {}
    }

    /**
     * Core class used to create an HTML list of categories.
     *
     * @since 2.1.0
     *
     * @see Walker
     */
    class Walker_Category extends \walker {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type;
        /**
         * Database fields to use.
         *
         * @since 2.1.0
         * @var array
         *
         * @see Walker::$db_fields
         * @todo Decouple this
         */
        public $db_fields;

        public function start_lvl($output, $depth = 0, $args = array( )) {}
        public function end_lvl($output, $depth = 0, $args = array( )) {}
/**
 * Filters the list of CSS classes to include with each category in the list.
 *
 * @since 4.2.0
 *
 * @see wp_list_categories()
 *
 * @param array  $css_classes An array of CSS classes to be applied to each list item.
 * @param object $category    Category data object.
 * @param int    $depth       Depth of page, used for padding.
 * @param array  $args        An array of wp_list_categories() arguments.
 */
        public function start_el(/**
 * Filters the list of CSS classes to include with each category in the list.
 *
 * @since 4.2.0
 *
 * @see wp_list_categories()
 *
 * @param array  $css_classes An array of CSS classes to be applied to each list item.
 * @param object $category    Category data object.
 * @param int    $depth       Depth of page, used for padding.
 * @param array  $args        An array of wp_list_categories() arguments.
 */
$output, /**
 * Filters the list of CSS classes to include with each category in the list.
 *
 * @since 4.2.0
 *
 * @see wp_list_categories()
 *
 * @param array  $css_classes An array of CSS classes to be applied to each list item.
 * @param object $category    Category data object.
 * @param int    $depth       Depth of page, used for padding.
 * @param array  $args        An array of wp_list_categories() arguments.
 */
$category, /**
 * Filters the list of CSS classes to include with each category in the list.
 *
 * @since 4.2.0
 *
 * @see wp_list_categories()
 *
 * @param array  $css_classes An array of CSS classes to be applied to each list item.
 * @param object $category    Category data object.
 * @param int    $depth       Depth of page, used for padding.
 * @param array  $args        An array of wp_list_categories() arguments.
 */
$depth = 0, /**
 * Filters the list of CSS classes to include with each category in the list.
 *
 * @since 4.2.0
 *
 * @see wp_list_categories()
 *
 * @param array  $css_classes An array of CSS classes to be applied to each list item.
 * @param object $category    Category data object.
 * @param int    $depth       Depth of page, used for padding.
 * @param array  $args        An array of wp_list_categories() arguments.
 */
$args = array( ), /**
 * Filters the list of CSS classes to include with each category in the list.
 *
 * @since 4.2.0
 *
 * @see wp_list_categories()
 *
 * @param array  $css_classes An array of CSS classes to be applied to each list item.
 * @param object $category    Category data object.
 * @param int    $depth       Depth of page, used for padding.
 * @param array  $args        An array of wp_list_categories() arguments.
 */
$id = 0) {}
        public function end_el($output, $page, $depth = 0, $args = array( )) {}
    }

    /**
     * Facilitates adding of the WordPress editor as used on the Write and Edit screens.
     *
     * @package WordPress
     * @since 3.3.0
     *
     * Private, not included by default. See wp_editor() in wp-includes/general-template.php.
     */
    final class _WP_Editors {
        static public $mce_locale;
        static private $mce_settings;
        static private $qt_settings;
        static private $plugins;
        static private $qt_buttons;
        static private $ext_plugins;
        static private $baseurl;
        static private $first_init;
        static private $this_tinymce;
        static private $this_quicktags;
        static private $has_tinymce;
        static private $has_quicktags;
        static private $has_medialib;
        static private $editor_buttons_css;
        static private $drag_drop_upload;
        static private $old_dfw_compat;
        static private $translation;
        static private $tinymce_scripts_printed;
        static private $link_dialog_printed;

        private function __construct() {}
/**
 * Filters the wp_editor() settings.
 *
 * @since 4.0.0
 *
 * @see _WP_Editors::parse_settings()
 *
 * @param array  $settings  Array of editor arguments.
 * @param string $editor_id ID for the current editor instance.
 */
        public static function parse_settings(/**
 * Filters the wp_editor() settings.
 *
 * @since 4.0.0
 *
 * @see _WP_Editors::parse_settings()
 *
 * @param array  $settings  Array of editor arguments.
 * @param string $editor_id ID for the current editor instance.
 */
$editor_id, /**
 * Filters the wp_editor() settings.
 *
 * @since 4.0.0
 *
 * @see _WP_Editors::parse_settings()
 *
 * @param array  $settings  Array of editor arguments.
 * @param string $editor_id ID for the current editor instance.
 */
$settings) {}
/** This filter is documented in wp-includes/deprecated.php */
        public static function editor(/** This filter is documented in wp-includes/deprecated.php */
$content, /** This filter is documented in wp-includes/deprecated.php */
$editor_id, /** This filter is documented in wp-includes/deprecated.php */
$settings = array( )) {}
/**
 * Filters the TinyMCE config before init.
 *
 * @since 2.5.0
 *
 * @param array  $mceInit   An array with TinyMCE config.
 * @param string $editor_id Unique editor identifier, e.g. 'content'.
 */
        public static function editor_settings(/**
 * Filters the TinyMCE config before init.
 *
 * @since 2.5.0
 *
 * @param array  $mceInit   An array with TinyMCE config.
 * @param string $editor_id Unique editor identifier, e.g. 'content'.
 */
$editor_id, /**
 * Filters the TinyMCE config before init.
 *
 * @since 2.5.0
 *
 * @param array  $mceInit   An array with TinyMCE config.
 * @param string $editor_id Unique editor identifier, e.g. 'content'.
 */
$set) {}
        private static function _parse_init($init) {}
/**
 * Fires when scripts and styles are enqueued for the editor.
 *
 * @since 3.9.0
 *
 * @param array $to_load An array containing boolean values whether TinyMCE
 *                       and Quicktags are being loaded.
 */
        public static function enqueue_scripts(/**
 * Fires when scripts and styles are enqueued for the editor.
 *
 * @since 3.9.0
 *
 * @param array $to_load An array containing boolean values whether TinyMCE
 *                       and Quicktags are being loaded.
 */
$default_scripts = false) {}
        /**
         * Enqueue all editor scripts.
         * For use when the editor is going to be initialized after page load.
         *
         * @since 4.8.0
         */
        public static function enqueue_default_editor() {}
        /**
         * Fires when the editor scripts are loaded for later initialization,
         * after all scripts and settings are printed.
         *
         * @since 4.8.0
         */
        public static function print_default_editor_scripts() {}
        public static function get_mce_locale() {}
        public static function get_baseurl() {}
        /**
         * Returns the default TinyMCE settings.
         * Doesn't include plugins, buttons, editor selector.
         *
         * @global string $tinymce_version
         *
         * @return array
         */
        private static function default_settings() {}
        private static function get_translation() {}
/**
 * Filters translated strings prepared for TinyMCE.
 *
 * @since 3.9.0
 *
 * @param array  $mce_translation Key/value pairs of strings.
 * @param string $mce_locale      Locale.
 */
        public static function wp_mce_translation(/**
 * Filters translated strings prepared for TinyMCE.
 *
 * @since 3.9.0
 *
 * @param array  $mce_translation Key/value pairs of strings.
 * @param string $mce_locale      Locale.
 */
$mce_locale = '', /**
 * Filters translated strings prepared for TinyMCE.
 *
 * @since 3.9.0
 *
 * @param array  $mce_translation Key/value pairs of strings.
 * @param string $mce_locale      Locale.
 */
$json_only = false) {}
        /**
         * Force uncompressed TinyMCE when a custom theme has been defined.
         *
         * The compressed TinyMCE file cannot deal with custom themes, so this makes
         * sure that we use the uncompressed TinyMCE file if a theme is defined.
         * Even if we are on a production environment.
         */
        public static function force_uncompressed_tinymce() {}
        /**
         * Print (output) the main TinyMCE scripts.
         *
         * @since 4.8.0
         *
         * @global string $tinymce_version
         * @global bool   $concatenate_scripts
         * @global bool   $compress_scripts
         */
        public static function print_tinymce_scripts() {}
        /**
         * Fires after any core TinyMCE editor instances are created.
         *
         * @since 3.2.0
         *
         * @param array $mce_settings TinyMCE settings array.
         */
        public static function editor_js() {}
        /**
         * Outputs the HTML for distraction-free writing mode.
         *
         * @since 3.2.0
         * @deprecated 4.3.0
         */
        public static function wp_fullscreen_html() {}
/**
 * Filters the link query results.
 *
 * Allows modification of the returned link query results.
 *
 * @since 3.7.0
 *
 * @see 'wp_link_query_args' filter
 *
 * @param array $results {
 *     An associative array of query results.
 *
 *     @type array {
 *         @type int    $ID        Post ID.
 *         @type string $title     The trimmed, escaped post title.
 *         @type string $permalink Post permalink.
 *         @type string $info      A 'Y/m/d'-formatted date for 'post' post type,
 *                                 the 'singular_name' post type label otherwise.
 *     }
 * }
 * @param array $query  An array of WP_Query arguments.
 */
        public static function wp_link_query(/**
 * Filters the link query results.
 *
 * Allows modification of the returned link query results.
 *
 * @since 3.7.0
 *
 * @see 'wp_link_query_args' filter
 *
 * @param array $results {
 *     An associative array of query results.
 *
 *     @type array {
 *         @type int    $ID        Post ID.
 *         @type string $title     The trimmed, escaped post title.
 *         @type string $permalink Post permalink.
 *         @type string $info      A 'Y/m/d'-formatted date for 'post' post type,
 *                                 the 'singular_name' post type label otherwise.
 *     }
 * }
 * @param array $query  An array of WP_Query arguments.
 */
$args = array( )) {}
        /**
         * Dialog for internal linking.
         *
         * @since 3.1.0
         */
        public static function wp_link_dialog() {}
    }

    /**
     * Core class used to register scripts.
     *
     * @since 2.1.0
     *
     * @see WP_Dependencies
     */
    class WP_Scripts extends \wp_dependencies {
        /**
         * Base URL for scripts.
         *
         * Full URL with trailing slash.
         *
         * @since 2.6.0
         * @var string
         */
        public $base_url;
        /**
         * URL of the content directory.
         *
         * @since 2.8.0
         * @var string
         */
        public $content_url;
        /**
         * Default version string for scripts.
         *
         * @since 2.6.0
         * @var string
         */
        public $default_version;
        /**
         * Holds handles of scripts which are enqueued in footer.
         *
         * @since 2.8.0
         * @var array
         */
        public $in_footer;
        /**
         * Holds a list of script handles which will be concatenated.
         *
         * @since 2.8.0
         * @var string
         */
        public $concat;
        /**
         * Holds a string which contains script handles and their version.
         *
         * @since 2.8.0
         * @deprecated 3.4.0
         * @var string
         */
        public $concat_version;
        /**
         * Whether to perform concatenation.
         *
         * @since 2.8.0
         * @var bool
         */
        public $do_concat;
        /**
         * Holds HTML markup of scripts and additional data if concatenation
         * is enabled.
         *
         * @since 2.8.0
         * @var string
         */
        public $print_html;
        /**
         * Holds inline code if concatenation is enabled.
         *
         * @since 2.8.0
         * @var string
         */
        public $print_code;
        /**
         * Holds a list of script handles which are not in the default directory
         * if concatenation is enabled.
         *
         * Unused in core.
         *
         * @since 2.8.0
         * @var string
         */
        public $ext_handles;
        /**
         * Holds a string which contains handles and versions of scripts which
         * are not in the default directory if concatenation is enabled.
         *
         * Unused in core.
         *
         * @since 2.8.0
         * @var string
         */
        public $ext_version;
        /**
         * List of default directories.
         *
         * @since 2.8.0
         * @var array
         */
        public $default_dirs;

        /**
         * Constructor.
         *
         * @since 2.6.0
         */
        public function __construct() {}
        /**
         * Fires when the WP_Scripts instance is initialized.
         *
         * @since 2.6.0
         *
         * @param WP_Scripts $this WP_Scripts instance (passed by reference).
         */
        public function init() {}
        public function print_scripts($handles = false, $group = false) {}
        public function print_scripts_l10n($handle, $echo = true) {}
        public function print_extra_script($handle, $echo = true) {}
/**
 * Filters the HTML script tag of an enqueued script.
 *
 * @since 4.1.0
 *
 * @param string $tag    The `<script>` tag for the enqueued script.
 * @param string $handle The script's registered handle.
 * @param string $src    The script's source URL.
 */
        public function do_item(/**
 * Filters the HTML script tag of an enqueued script.
 *
 * @since 4.1.0
 *
 * @param string $tag    The `<script>` tag for the enqueued script.
 * @param string $handle The script's registered handle.
 * @param string $src    The script's source URL.
 */
$handle, /**
 * Filters the HTML script tag of an enqueued script.
 *
 * @since 4.1.0
 *
 * @param string $tag    The `<script>` tag for the enqueued script.
 * @param string $handle The script's registered handle.
 * @param string $src    The script's source URL.
 */
$group = false) {}
        public function add_inline_script($handle, $data, $position = 'after') {}
        public function print_inline_script($handle, $position = 'after', $echo = true) {}
        public function localize($handle, $object_name, $l10n) {}
        public function set_group($handle, $recursion, $group = false) {}
/** @var \_WP_Dependency $obj */
        public function set_translations(/** @var \_WP_Dependency $obj */
$handle, /** @var \_WP_Dependency $obj */
$domain = 'default', /** @var \_WP_Dependency $obj */
$path = null) {}
        public function print_translations($handle, $echo = true) {}
/**
 * Filters the list of script dependencies left to print.
 *
 * @since 2.3.0
 *
 * @param string[] $to_do An array of script dependency handles.
 */
        public function all_deps(/**
 * Filters the list of script dependencies left to print.
 *
 * @since 2.3.0
 *
 * @param string[] $to_do An array of script dependency handles.
 */
$handles, /**
 * Filters the list of script dependencies left to print.
 *
 * @since 2.3.0
 *
 * @param string[] $to_do An array of script dependency handles.
 */
$recursion = false, /**
 * Filters the list of script dependencies left to print.
 *
 * @since 2.3.0
 *
 * @param string[] $to_do An array of script dependency handles.
 */
$group = false) {}
        /**
         * Processes items and dependencies for the head group.
         *
         * @since 2.8.0
         *
         * @see WP_Dependencies::do_items()
         *
         * @return array Handles of items that have been processed.
         */
        public function do_head_items() {}
        /**
         * Processes items and dependencies for the footer group.
         *
         * @since 2.8.0
         *
         * @see WP_Dependencies::do_items()
         *
         * @return array Handles of items that have been processed.
         */
        public function do_footer_items() {}
        public function in_default_dir($src) {}
        /**
         * Resets class properties.
         *
         * @since 2.8.0
         */
        public function reset() {}
    }

    /**
     * Abstract class for managing user session tokens.
     *
     * @since 4.0.0
     */
    abstract class WP_Session_Tokens {
        /**
         * User ID.
         *
         * @since 4.0.0
         * @var int User ID.
         */
        protected $user_id;

        protected function __construct($user_id) {}
/**
 * Filters the class name for the session token manager.
 *
 * @since 4.0.0
 *
 * @param string $session Name of class to use as the manager.
 *                        Default 'WP_User_Meta_Session_Tokens'.
 */
        public static function get_instance(/**
 * Filters the class name for the session token manager.
 *
 * @since 4.0.0
 *
 * @param string $session Name of class to use as the manager.
 *                        Default 'WP_User_Meta_Session_Tokens'.
 */
$user_id) {}
        private function hash_token($token) {}
        public function get($token) {}
        public function verify($token) {}
/**
 * Filters the information attached to the newly created session.
 *
 * Can be used to attach further information to a session.
 *
 * @since 4.0.0
 *
 * @param array $session Array of extra data.
 * @param int   $user_id User ID.
 */
        public function create(/**
 * Filters the information attached to the newly created session.
 *
 * Can be used to attach further information to a session.
 *
 * @since 4.0.0
 *
 * @param array $session Array of extra data.
 * @param int   $user_id User ID.
 */
$expiration) {}
        public function update($token, $session) {}
        public function destroy($token) {}
        public function destroy_others($token_to_keep) {}
        protected function is_still_valid($session) {}
        /**
         * Destroys all sessions for a user.
         *
         * @since 4.0.0
         */
        public function destroy_all() {}
        /** This filter is documented in wp-includes/class-wp-session-tokens.php */
        public static function destroy_all_for_all_users() {}
        /**
         * Retrieves all sessions for a user.
         *
         * @since 4.0.0
         *
         * @return array Sessions for a user.
         */
        public function get_all() {}
        /**
         * Retrieves all sessions of the user.
         *
         * @since 4.0.0
         *
         * @return array Sessions of the user.
         */
        abstract protected function get_sessions() ;
        abstract protected function get_session($verifier) ;
        abstract protected function update_session($verifier, $session = null) ;
        abstract protected function destroy_other_sessions($verifier) ;
        /**
         * Destroys all sessions for the user.
         *
         * @since 4.0.0
         */
        abstract protected function destroy_all_sessions() ;
        /**
         * Destroys all sessions for all users.
         *
         * @since 4.0.0
         */
        public static function drop_sessions() {}
    }

    /**
     * oEmbed API endpoint controller.
     *
     * Registers the API route and delivers the response data.
     * The output format (XML or JSON) is handled by the REST API.
     *
     * @since 4.4.0
     */
    final class WP_oEmbed_Controller {
        /**
         * Register the oEmbed REST API route.
         *
         * @since 4.4.0
         */
        public function register_routes() {}
/**
 * Filters the determined post ID.
 *
 * @since 4.4.0
 *
 * @param int    $post_id The post ID.
 * @param string $url     The requested URL.
 */
        public function get_item(/**
 * Filters the determined post ID.
 *
 * @since 4.4.0
 *
 * @param int    $post_id The post ID.
 * @param string $url     The requested URL.
 */
$request) {}
        /**
         * Checks if current user can make a proxy oEmbed request.
         *
         * @since 4.8.0
         *
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_proxy_item_permissions_check() {}
/**
 * Filters the oEmbed TTL value (time to live).
 *
 * Similar to the {@see 'oembed_ttl'} filter, but for the REST API
 * oEmbed proxy endpoint.
 *
 * @since 4.8.0
 *
 * @param int    $time    Time to live (in seconds).
 * @param string $url     The attempted embed URL.
 * @param array  $args    An array of embed request arguments.
 */
        public function get_proxy_item(/**
 * Filters the oEmbed TTL value (time to live).
 *
 * Similar to the {@see 'oembed_ttl'} filter, but for the REST API
 * oEmbed proxy endpoint.
 *
 * @since 4.8.0
 *
 * @param int    $time    Time to live (in seconds).
 * @param string $url     The attempted embed URL.
 * @param array  $args    An array of embed request arguments.
 */
$request) {}
    }

    /**
     * Core class used to implement a user roles API.
     *
     * The role option is simple, the structure is organized by role name that store
     * the name in value of the 'name' key. The capabilities are stored as an array
     * in the value of the 'capability' key.
     *
     *     array (
     *          'rolename' => array (
     *              'name' => 'rolename',
     *              'capabilities' => array()
     *          )
     *     )
     *
     * @since 2.0.0
     */
    class WP_Roles {
        /**
         * List of roles and capabilities.
         *
         * @since 2.0.0
         * @var array[]
         */
        public $roles;
        /**
         * List of the role objects.
         *
         * @since 2.0.0
         * @var WP_Role[]
         */
        public $role_objects;
        /**
         * List of role names.
         *
         * @since 2.0.0
         * @var string[]
         */
        public $role_names;
        /**
         * Option name for storing role list.
         *
         * @since 2.0.0
         * @var string
         */
        public $role_key;
        /**
         * Whether to use the database for retrieval and storage.
         *
         * @since 2.1.0
         * @var bool
         */
        public $use_db;
        /**
         * The site ID the roles are initialized for.
         *
         * @since 4.9.0
         * @var int
         */
        protected $site_id;

        public function __construct($site_id = null) {}
        public function __call($name, $arguments) {}
        /**
         * Set up the object properties.
         *
         * The role key is set to the current prefix for the $wpdb object with
         * 'user_roles' appended. If the $wp_user_roles global is set, then it will
         * be used and the role option will not be updated or used.
         *
         * @since 2.1.0
         * @deprecated 4.9.0 Use WP_Roles::for_site()
         */
        protected function _init() {}
        /**
         * Reinitialize the object
         *
         * Recreates the role objects. This is typically called only by switch_to_blog()
         * after switching wpdb to a new site ID.
         *
         * @since 3.5.0
         * @deprecated 4.7.0 Use WP_Roles::for_site()
         */
        public function reinit() {}
        public function add_role($role, $display_name, $capabilities = array( )) {}
        public function remove_role($role) {}
        public function add_cap($role, $cap, $grant = true) {}
        public function remove_cap($role, $cap) {}
        public function get_role($role) {}
        /**
         * Retrieve list of role names.
         *
         * @since 2.0.0
         *
         * @return string[] List of role names.
         */
        public function get_names() {}
        public function is_role($role) {}
        /**
         * Initializes all of the available roles.
         *
         * @since 4.9.0
         */
        public function init_roles() {}
        public function for_site($site_id = null) {}
        /**
         * Gets the ID of the site for which roles are currently initialized.
         *
         * @since 4.9.0
         *
         * @return int Site ID.
         */
        public function get_site_id() {}
        /**
         * Gets the available roles data.
         *
         * @since 4.9.0
         *
         * @global array $wp_user_roles Used to set the 'roles' property value.
         *
         * @return array Roles array.
         */
        protected function get_roles_data() {}
    }

    /**
     * Core wrapper object for a Requests_Response for standardisation.
     *
     * @since 4.6.0
     *
     * @see WP_HTTP_Response
     */
    class WP_HTTP_Requests_Response extends \wp_http_response {
        /**
         * Requests Response object.
         *
         * @since 4.6.0
         * @var Requests_Response
         */
        protected $response;
        /**
         * Filename the response was saved to.
         *
         * @since 4.6.0
         * @var string|null
         */
        protected $filename;

        public function __construct(Requests_Response $response, $filename = '') {}
        /**
         * Retrieves the response object for the request.
         *
         * @since 4.6.0
         *
         * @return Requests_Response HTTP response.
         */
        public function get_response_object() {}
        /**
         * Retrieves headers associated with the response.
         *
         * @since 4.6.0
         *
         * @see \Requests_Utility_CaseInsensitiveDictionary
         *
         * @return \Requests_Utility_CaseInsensitiveDictionary Map of header name to header value.
         */
        public function get_headers() {}
        public function set_headers($headers) {}
        public function header($key, $value, $replace = true) {}
        /**
         * Retrieves the HTTP return code for the response.
         *
         * @since 4.6.0
         *
         * @return int The 3-digit HTTP status code.
         */
        public function get_status() {}
        public function set_status($code) {}
        /**
         * Retrieves the response data.
         *
         * @since 4.6.0
         *
         * @return mixed Response data.
         */
        public function get_data() {}
        public function set_data($data) {}
        /**
         * Retrieves cookies from the response.
         *
         * @since 4.6.0
         *
         * @return WP_HTTP_Cookie[] List of cookie objects.
         */
        public function get_cookies() {}
        /**
         * Converts the object to a WP_Http response array.
         *
         * @since 4.6.0
         *
         * @return array WP_Http response array, per WP_Http::request().
         */
        public function to_array() {}
    }

    /**
     * A class for displaying various tree-like structures.
     *
     * Extend the Walker class to use it, see examples below. Child classes
     * do not need to implement all of the abstract methods in the class. The child
     * only needs to implement the methods that are needed.
     *
     * @since 2.1.0
     *
     * @package WordPress
     * @abstract
     */
    class Walker {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         */
        public $tree_type;
        /**
         * DB fields to use.
         *
         * @since 2.1.0
         * @var array
         */
        public $db_fields;
        /**
         * Max number of pages walked by the paged walker
         *
         * @since 2.7.0
         * @var int
         */
        public $max_pages;
        /**
         * Whether the current element has children or not.
         *
         * To be used in start_el().
         *
         * @since 4.0.0
         * @var bool
         */
        public $has_children;

        public function start_lvl($output, $depth = 0, $args = array( )) {}
        public function end_lvl($output, $depth = 0, $args = array( )) {}
        public function start_el($output, $object, $depth = 0, $args = array( ), $current_object_id = 0) {}
        public function end_el($output, $object, $depth = 0, $args = array( )) {}
        public function display_element($element, $children_elements, $max_depth, $depth, $args, $output) {}
        public function walk($elements, $max_depth) {}
        public function paged_walk($elements, $max_depth, $page_num, $per_page) {}
        public function get_number_of_root_elements($elements) {}
        public function unset_children($e, $children_elements) {}
    }

    /**
     * Customize Nav Menus class.
     *
     * Implements menu management in the Customizer.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Manager
     */
    final class WP_Customize_Nav_Menus {
        /**
         * WP_Customize_Manager instance.
         *
         * @since 4.3.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Original nav menu locations before the theme was switched.
         *
         * @since 4.9.0
         * @var array
         */
        protected $original_nav_menu_locations;
        /**
         * Nav menu args used for each instance, keyed by the args HMAC.
         *
         * @since 4.3.0
         * @var array
         */
        public $preview_nav_menu_instance_args;

        public function __construct($manager) {}
        public function filter_nonces($nonces) {}
        /**
         * Ajax handler for loading available menu items.
         *
         * @since 4.3.0
         */
        public function ajax_load_available_items() {}
/**
 * Filters the available menu items.
 *
 * @since 4.3.0
 *
 * @param array  $items  The array of menu items.
 * @param string $type   The object type.
 * @param string $object The object name.
 * @param int    $page   The current page number.
 */
        public function load_available_items_query(/**
 * Filters the available menu items.
 *
 * @since 4.3.0
 *
 * @param array  $items  The array of menu items.
 * @param string $type   The object type.
 * @param string $object The object name.
 * @param int    $page   The current page number.
 */
$type = 'post_type', /**
 * Filters the available menu items.
 *
 * @since 4.3.0
 *
 * @param array  $items  The array of menu items.
 * @param string $type   The object type.
 * @param string $object The object name.
 * @param int    $page   The current page number.
 */
$object = 'page', /**
 * Filters the available menu items.
 *
 * @since 4.3.0
 *
 * @param array  $items  The array of menu items.
 * @param string $type   The object type.
 * @param string $object The object name.
 * @param int    $page   The current page number.
 */
$page = 0) {}
        /**
         * Ajax handler for searching available menu items.
         *
         * @since 4.3.0
         */
        public function ajax_search_available_items() {}
/**
 * Filters the available menu items during a search request.
 *
 * @since 4.5.0
 *
 * @param array $items The array of menu items.
 * @param array $args  Includes 'pagenum' and 's' (search) arguments.
 */
        public function search_available_items_query(/**
 * Filters the available menu items during a search request.
 *
 * @since 4.5.0
 *
 * @param array $items The array of menu items.
 * @param array $args  Includes 'pagenum' and 's' (search) arguments.
 */
$args = array( )) {}
        /**
         * Enqueue scripts and styles for Customizer pane.
         *
         * @since 4.3.0
         */
        public function enqueue_scripts() {}
        public function filter_dynamic_setting_args($setting_args, $setting_id) {}
        public function filter_dynamic_setting_class($setting_class, $setting_id, $setting_args) {}
        /**
         * Add the customizer settings and controls.
         *
         * @since 4.3.0
         */
        public function customize_register() {}
        public function intval_base10($value) {}
        /**
         * Filters the available menu item types.
         *
         * @since 4.3.0
         * @since 4.7.0  Each array item now includes a `$type_label` in addition to `$title`, `$type`, and `$object`.
         *
         * @param array $item_types Navigation menu item types.
         */
        public function available_item_types() {}
        public function insert_auto_draft_post($postarr) {}
        /**
         * Ajax handler for adding a new auto-draft post.
         *
         * @since 4.7.0
         */
        public function ajax_insert_auto_draft_post() {}
        /**
         * Print the JavaScript templates used to render Menu Customizer components.
         *
         * Templates are imported into the JS use wp.template.
         *
         * @since 4.3.0
         */
        public function print_templates() {}
        /**
         * Print the html template used to render the add-menu-item frame.
         *
         * @since 4.3.0
         */
        public function available_items_template() {}
        protected function print_post_type_container($available_item_type) {}
        /**
         * Print the markup for available menu item custom links.
         *
         * @since 4.7.0
         *
         * @return void
         */
        protected function print_custom_links_available_menu_item() {}
        public function customize_dynamic_partial_args($partial_args, $partial_id) {}
        /**
         * Add hooks for the Customizer preview.
         *
         * @since 4.3.0
         */
        public function customize_preview_init() {}
        /**
         * Make the auto-draft status protected so that it can be queried.
         *
         * @since 4.7.0
         *
         * @global array $wp_post_statuses List of post statuses.
         */
        public function make_auto_draft_status_previewable() {}
        public function sanitize_nav_menus_created_posts($value) {}
        public function save_nav_menus_created_posts($setting) {}
        public function filter_wp_nav_menu_args($args) {}
        public function filter_wp_nav_menu($nav_menu_content, $args) {}
        public function hash_nav_menu_args($args) {}
        /**
         * Enqueue scripts for the Customizer preview.
         *
         * @since 4.3.0
         */
        public function customize_preview_enqueue_deps() {}
        /**
         * Exports data from PHP to JS.
         *
         * @since 4.3.0
         */
        public function export_preview_data() {}
        public function export_partial_rendered_nav_menu_instances($response) {}
        public function render_nav_menu_partial($partial, $nav_menu_args) {}
    }

    /**
     * WordPress environment setup class.
     *
     * @package WordPress
     * @since 2.0.0
     */
    class WP {
        /**
         * Public query variables.
         *
         * Long list of public query variables.
         *
         * @since 2.0.0
         * @var string[]
         */
        public $public_query_vars;
        /**
         * Private query variables.
         *
         * Long list of private query variables.
         *
         * @since 2.0.0
         * @var string[]
         */
        public $private_query_vars;
        /**
         * Extra query variables set by the user.
         *
         * @since 2.1.0
         * @var array
         */
        public $extra_query_vars;
        /**
         * Query variables for setting up the WordPress Query Loop.
         *
         * @since 2.0.0
         * @var array
         */
        public $query_vars;
        /**
         * String parsed to set the query variables.
         *
         * @since 2.0.0
         * @var string
         */
        public $query_string;
        /**
         * The request path, e.g. 2015/05/06.
         *
         * @since 2.0.0
         * @var string
         */
        public $request;
        /**
         * Rewrite rule the request matched.
         *
         * @since 2.0.0
         * @var string
         */
        public $matched_rule;
        /**
         * Rewrite query the request matched.
         *
         * @since 2.0.0
         * @var string
         */
        public $matched_query;
        /**
         * Whether already did the permalink.
         *
         * @since 2.0.0
         * @var bool
         */
        public $did_permalink;

        public function add_query_var($qv) {}
        public function remove_query_var($name) {}
        public function set_query_var($key, $value) {}
/**
 * Fires once all query variables for the current request have been parsed.
 *
 * @since 2.1.0
 *
 * @param WP $this Current WordPress environment instance (passed by reference).
 */
        public function parse_request(/**
 * Fires once all query variables for the current request have been parsed.
 *
 * @since 2.1.0
 *
 * @param WP $this Current WordPress environment instance (passed by reference).
 */
$extra_query_vars = '') {}
        /**
         * Sends additional HTTP headers for caching, content type, etc.
         *
         * Sets the Content-Type header. Sets the 'error' status (if passed) and optionally exits.
         * If showing a feed, it will also send Last-Modified, ETag, and 304 status if needed.
         *
         * @since 2.0.0
         * @since 4.4.0 `X-Pingback` header is added conditionally after posts have been queried in handle_404().
         */
        public function send_headers() {}
        /**
         * Filters the query string before parsing.
         *
         * @since 1.5.0
         * @deprecated 2.1.0 Use 'query_vars' or 'request' filters instead.
         *
         * @param string $query_string The query string to modify.
         */
        public function build_query_string() {}
        /**
         * Set up the WordPress Globals.
         *
         * The query_vars property will be extracted to the GLOBALS. So care should
         * be taken when naming global variables that might interfere with the
         * WordPress environment.
         *
         * @since 2.0.0
         *
         * @global WP_Query     $wp_query
         * @global string       $query_string Query string for the loop.
         * @global array        $posts The found posts.
         * @global WP_Post|null $post The current post, if available.
         * @global string       $request The SQL statement for the request.
         * @global int          $more Only set, if single page or post.
         * @global int          $single If single page or post. Only set, if single page or post.
         * @global WP_User      $authordata Only set, if author archive.
         */
        public function register_globals() {}
        /**
         * Set up the current user.
         *
         * @since 2.0.0
         */
        public function init() {}
        /**
         * Set up the Loop based on the query variables.
         *
         * @since 2.0.0
         *
         * @global WP_Query $wp_the_query
         */
        public function query_posts() {}
        /**
         * Set the Headers for 404, if nothing is found for requested URL.
         *
         * Issue a 404 if a request doesn't match any posts and doesn't match
         * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already
         * issued, and if the request was not a search or the homepage.
         *
         * Otherwise, issue a 200.
         *
         * This sets headers after posts have been queried. handle_404() really means "handle status."
         * By inspecting the result of querying posts, seemingly successful requests can be switched to
         * a 404 so that canonical redirection logic can kick in.
         *
         * @since 2.0.0
         *
         * @global WP_Query $wp_query
         */
        public function handle_404() {}
/**
 * Fires once the WordPress environment has been set up.
 *
 * @since 2.1.0
 *
 * @param WP $this Current WordPress environment instance (passed by reference).
 */
        public function main(/**
 * Fires once the WordPress environment has been set up.
 *
 * @since 2.1.0
 *
 * @param WP $this Current WordPress environment instance (passed by reference).
 */
$query_args = '') {}
    }

    /**
     * PHPMailer - PHP email creation and transport class.
     * @package PHPMailer
     * @author Marcus Bointon (Synchro/coolbru) <phpmailer@synchromedia.co.uk>
     * @author Jim Jagielski (jimjag) <jimjag@gmail.com>
     * @author Andy Prevost (codeworxtech) <codeworxtech@users.sourceforge.net>
     * @author Brent R. Matzelle (original founder)
     */
    class PHPMailer {
        const MAX_LINE_LENGTH = 998;
        const STOP_CONTINUE = 1;
        const STOP_MESSAGE = 0;
        const CRLF = "\r\n";
        const STOP_CRITICAL = 2;

        /**
         * The PHPMailer Version number.
         * @var string
         */
        public $Version;
        /**
         * Email priority.
         * Options: null (default), 1 = High, 3 = Normal, 5 = low.
         * When null, the header is not set at all.
         * @var integer
         */
        public $Priority;
        /**
         * The character set of the message.
         * @var string
         */
        public $CharSet;
        /**
         * The MIME Content-type of the message.
         * @var string
         */
        public $ContentType;
        /**
         * The message encoding.
         * Options: "8bit", "7bit", "binary", "base64", and "quoted-printable".
         * @var string
         */
        public $Encoding;
        /**
         * Holds the most recent mailer error message.
         * @var string
         */
        public $ErrorInfo;
        /**
         * The From email address for the message.
         * @var string
         */
        public $From;
        /**
         * The From name of the message.
         * @var string
         */
        public $FromName;
        /**
         * The Sender email (Return-Path) of the message.
         * If not empty, will be sent via -f to sendmail or as 'MAIL FROM' in smtp mode.
         * @var string
         */
        public $Sender;
        /**
         * The Return-Path of the message.
         * If empty, it will be set to either From or Sender.
         * @var string
         * @deprecated Email senders should never set a return-path header;
         * it's the receiver's job (RFC5321 section 4.4), so this no longer does anything.
         * @link https://tools.ietf.org/html/rfc5321#section-4.4 RFC5321 reference
         */
        public $ReturnPath;
        /**
         * The Subject of the message.
         * @var string
         */
        public $Subject;
        /**
         * An HTML or plain text message body.
         * If HTML then call isHTML(true).
         * @var string
         */
        public $Body;
        /**
         * The plain-text message body.
         * This body can be read by mail clients that do not have HTML email
         * capability such as mutt & Eudora.
         * Clients that can read HTML will view the normal Body.
         * @var string
         */
        public $AltBody;
        /**
         * An iCal message part body.
         * Only supported in simple alt or alt_inline message types
         * To generate iCal events, use the bundled extras/EasyPeasyICS.php class or iCalcreator
         * @link http://sprain.ch/blog/downloads/php-class-easypeasyics-create-ical-files-with-php/
         * @link http://kigkonsult.se/iCalcreator/
         * @var string
         */
        public $Ical;
        /**
         * The complete compiled MIME message body.
         * @access protected
         * @var string
         */
        protected $MIMEBody;
        /**
         * The complete compiled MIME message headers.
         * @var string
         * @access protected
         */
        protected $MIMEHeader;
        /**
         * Extra headers that createHeader() doesn't fold in.
         * @var string
         * @access protected
         */
        protected $mailHeader;
        /**
         * Word-wrap the message body to this number of chars.
         * Set to 0 to not wrap. A useful value here is 78, for RFC2822 section 2.1.1 compliance.
         * @var integer
         */
        public $WordWrap;
        /**
         * Which method to use to send mail.
         * Options: "mail", "sendmail", or "smtp".
         * @var string
         */
        public $Mailer;
        /**
         * The path to the sendmail program.
         * @var string
         */
        public $Sendmail;
        /**
         * Whether mail() uses a fully sendmail-compatible MTA.
         * One which supports sendmail's "-oi -f" options.
         * @var boolean
         */
        public $UseSendmailOptions;
        /**
         * Path to PHPMailer plugins.
         * Useful if the SMTP class is not in the PHP include path.
         * @var string
         * @deprecated Should not be needed now there is an autoloader.
         */
        public $PluginDir;
        /**
         * The email address that a reading confirmation should be sent to, also known as read receipt.
         * @var string
         */
        public $ConfirmReadingTo;
        /**
         * The hostname to use in the Message-ID header and as default HELO string.
         * If empty, PHPMailer attempts to find one with, in order,
         * $_SERVER['SERVER_NAME'], gethostname(), php_uname('n'), or the value
         * 'localhost.localdomain'.
         * @var string
         */
        public $Hostname;
        /**
         * An ID to be used in the Message-ID header.
         * If empty, a unique id will be generated.
         * You can set your own, but it must be in the format "<id@domain>",
         * as defined in RFC5322 section 3.6.4 or it will be ignored.
         * @see https://tools.ietf.org/html/rfc5322#section-3.6.4
         * @var string
         */
        public $MessageID;
        /**
         * The message Date to be used in the Date header.
         * If empty, the current date will be added.
         * @var string
         */
        public $MessageDate;
        /**
         * SMTP hosts.
         * Either a single hostname or multiple semicolon-delimited hostnames.
         * You can also specify a different port
         * for each host by using this format: [hostname:port]
         * (e.g. "smtp1.example.com:25;smtp2.example.com").
         * You can also specify encryption type, for example:
         * (e.g. "tls://smtp1.example.com:587;ssl://smtp2.example.com:465").
         * Hosts will be tried in order.
         * @var string
         */
        public $Host;
        /**
         * The default SMTP server port.
         * @var integer
         * @TODO Why is this needed when the SMTP class takes care of it?
         */
        public $Port;
        /**
         * The SMTP HELO of the message.
         * Default is $Hostname. If $Hostname is empty, PHPMailer attempts to find
         * one with the same method described above for $Hostname.
         * @var string
         * @see PHPMailer::$Hostname
         */
        public $Helo;
        /**
         * What kind of encryption to use on the SMTP connection.
         * Options: '', 'ssl' or 'tls'
         * @var string
         */
        public $SMTPSecure;
        /**
         * Whether to enable TLS encryption automatically if a server supports it,
         * even if `SMTPSecure` is not set to 'tls'.
         * Be aware that in PHP >= 5.6 this requires that the server's certificates are valid.
         * @var boolean
         */
        public $SMTPAutoTLS;
        /**
         * Whether to use SMTP authentication.
         * Uses the Username and Password properties.
         * @var boolean
         * @see PHPMailer::$Username
         * @see PHPMailer::$Password
         */
        public $SMTPAuth;
        /**
         * Options array passed to stream_context_create when connecting via SMTP.
         * @var array
         */
        public $SMTPOptions;
        /**
         * SMTP username.
         * @var string
         */
        public $Username;
        /**
         * SMTP password.
         * @var string
         */
        public $Password;
        /**
         * SMTP auth type.
         * Options are CRAM-MD5, LOGIN, PLAIN, attempted in that order if not specified
         * @var string
         */
        public $AuthType;
        /**
         * SMTP realm.
         * Used for NTLM auth
         * @var string
         */
        public $Realm;
        /**
         * SMTP workstation.
         * Used for NTLM auth
         * @var string
         */
        public $Workstation;
        /**
         * The SMTP server timeout in seconds.
         * Default of 5 minutes (300sec) is from RFC2821 section 4.5.3.2
         * @var integer
         */
        public $Timeout;
        /**
         * SMTP class debug output mode.
         * Debug output level.
         * Options:
         * * `0` No output
         * * `1` Commands
         * * `2` Data and commands
         * * `3` As 2 plus connection status
         * * `4` Low-level data output
         * @var integer
         * @see SMTP::$do_debug
         */
        public $SMTPDebug;
        /**
         * How to handle debug output.
         * Options:
         * * `echo` Output plain-text as-is, appropriate for CLI
         * * `html` Output escaped, line breaks converted to `<br>`, appropriate for browser output
         * * `error_log` Output to error log as configured in php.ini
         *
         * Alternatively, you can provide a callable expecting two params: a message string and the debug level:
         * <code>
         * $mail->Debugoutput = function($str, $level) {echo "debug level $level; message: $str";};
         * </code>
         * @var string|callable
         * @see SMTP::$Debugoutput
         */
        public $Debugoutput;
        /**
         * Whether to keep SMTP connection open after each message.
         * If this is set to true then to close the connection
         * requires an explicit call to smtpClose().
         * @var boolean
         */
        public $SMTPKeepAlive;
        /**
         * Whether to split multiple to addresses into multiple messages
         * or send them all in one message.
         * Only supported in `mail` and `sendmail` transports, not in SMTP.
         * @var boolean
         */
        public $SingleTo;
        /**
         * Storage for addresses when SingleTo is enabled.
         * @var array
         * @TODO This should really not be public
         */
        public $SingleToArray;
        /**
         * Whether to generate VERP addresses on send.
         * Only applicable when sending via SMTP.
         * @link https://en.wikipedia.org/wiki/Variable_envelope_return_path
         * @link http://www.postfix.org/VERP_README.html Postfix VERP info
         * @var boolean
         */
        public $do_verp;
        /**
         * Whether to allow sending messages with an empty body.
         * @var boolean
         */
        public $AllowEmpty;
        /**
         * The default line ending.
         * @note The default remains "\n". We force CRLF where we know
         *        it must be used via self::CRLF.
         * @var string
         */
        public $LE;
        /**
         * DKIM selector.
         * @var string
         */
        public $DKIM_selector;
        /**
         * DKIM Identity.
         * Usually the email address used as the source of the email.
         * @var string
         */
        public $DKIM_identity;
        /**
         * DKIM passphrase.
         * Used if your key is encrypted.
         * @var string
         */
        public $DKIM_passphrase;
        /**
         * DKIM signing domain name.
         * @example 'example.com'
         * @var string
         */
        public $DKIM_domain;
        /**
         * DKIM private key file path.
         * @var string
         */
        public $DKIM_private;
        /**
         * DKIM private key string.
         * If set, takes precedence over `$DKIM_private`.
         * @var string
         */
        public $DKIM_private_string;
        /**
         * Callback Action function name.
         *
         * The function that handles the result of the send email action.
         * It is called out by send() for each email sent.
         *
         * Value can be any php callable: http://www.php.net/is_callable
         *
         * Parameters:
         *   boolean $result        result of the send action
         *   string  $to            email address of the recipient
         *   string  $cc            cc email addresses
         *   string  $bcc           bcc email addresses
         *   string  $subject       the subject
         *   string  $body          the email body
         *   string  $from          email address of sender
         * @var string
         */
        public $action_function;
        /**
         * What to put in the X-Mailer header.
         * Options: An empty string for PHPMailer default, whitespace for none, or a string to use
         * @var string
         */
        public $XMailer;
        /**
         * Which validator to use by default when validating email addresses.
         * May be a callable to inject your own validator, but there are several built-in validators.
         * @see PHPMailer::validateAddress()
         * @var string|callable
         * @static
         */
        static public $validator;
        /**
         * An instance of the SMTP sender class.
         * @var SMTP
         * @access protected
         */
        protected $smtp;
        /**
         * The array of 'to' names and addresses.
         * @var array
         * @access protected
         */
        protected $to;
        /**
         * The array of 'cc' names and addresses.
         * @var array
         * @access protected
         */
        protected $cc;
        /**
         * The array of 'bcc' names and addresses.
         * @var array
         * @access protected
         */
        protected $bcc;
        /**
         * The array of reply-to names and addresses.
         * @var array
         * @access protected
         */
        protected $ReplyTo;
        /**
         * An array of all kinds of addresses.
         * Includes all of $to, $cc, $bcc
         * @var array
         * @access protected
         * @see PHPMailer::$to @see PHPMailer::$cc @see PHPMailer::$bcc
         */
        protected $all_recipients;
        /**
         * An array of names and addresses queued for validation.
         * In send(), valid and non duplicate entries are moved to $all_recipients
         * and one of $to, $cc, or $bcc.
         * This array is used only for addresses with IDN.
         * @var array
         * @access protected
         * @see PHPMailer::$to @see PHPMailer::$cc @see PHPMailer::$bcc
         * @see PHPMailer::$all_recipients
         */
        protected $RecipientsQueue;
        /**
         * An array of reply-to names and addresses queued for validation.
         * In send(), valid and non duplicate entries are moved to $ReplyTo.
         * This array is used only for addresses with IDN.
         * @var array
         * @access protected
         * @see PHPMailer::$ReplyTo
         */
        protected $ReplyToQueue;
        /**
         * The array of attachments.
         * @var array
         * @access protected
         */
        protected $attachment;
        /**
         * The array of custom headers.
         * @var array
         * @access protected
         */
        protected $CustomHeader;
        /**
         * The most recent Message-ID (including angular brackets).
         * @var string
         * @access protected
         */
        protected $lastMessageID;
        /**
         * The message's MIME type.
         * @var string
         * @access protected
         */
        protected $message_type;
        /**
         * The array of MIME boundary strings.
         * @var array
         * @access protected
         */
        protected $boundary;
        /**
         * The array of available languages.
         * @var array
         * @access protected
         */
        protected $language;
        /**
         * The number of errors encountered.
         * @var integer
         * @access protected
         */
        protected $error_count;
        /**
         * The S/MIME certificate file path.
         * @var string
         * @access protected
         */
        protected $sign_cert_file;
        /**
         * The S/MIME key file path.
         * @var string
         * @access protected
         */
        protected $sign_key_file;
        /**
         * The optional S/MIME extra certificates ("CA Chain") file path.
         * @var string
         * @access protected
         */
        protected $sign_extracerts_file;
        /**
         * The S/MIME password for the key.
         * Used only if the key is encrypted.
         * @var string
         * @access protected
         */
        protected $sign_key_pass;
        /**
         * Whether to throw exceptions for errors.
         * @var boolean
         * @access protected
         */
        protected $exceptions;
        /**
         * Unique ID used for message ID and boundaries.
         * @var string
         * @access protected
         */
        protected $uniqueid;

        public function __construct($exceptions = null) {}
        /**
         * Destructor.
         */
        public function __destruct() {}
        private function mailPassthru($to, $subject, $body, $header, $params) {}
        protected function edebug($str) {}
        public function isHTML($isHtml = true) {}
        /**
         * Send messages using SMTP.
         * @return void
         */
        public function isSMTP() {}
        /**
         * Send messages using PHP's mail() function.
         * @return void
         */
        public function isMail() {}
        /**
         * Send messages using $Sendmail.
         * @return void
         */
        public function isSendmail() {}
        /**
         * Send messages using qmail.
         * @return void
         */
        public function isQmail() {}
        public function addAddress($address, $name = '') {}
        public function addCC($address, $name = '') {}
        public function addBCC($address, $name = '') {}
        public function addReplyTo($address, $name = '') {}
        protected function addOrEnqueueAnAddress($kind, $address, $name) {}
        protected function addAnAddress($kind, $address, $name = '') {}
        public function parseAddresses($addrstr, $useimap = true) {}
        public function setFrom($address, $name = '', $auto = true) {}
        /**
         * Return the Message-ID header of the last email.
         * Technically this is the value from the last time the headers were created,
         * but it's also the message ID of the last sent message except in
         * pathological cases.
         * @return string
         */
        public function getLastMessageID() {}
/**
 * This is the pattern used in the HTML5 spec for validation of 'email' type form input elements.
 * @link http://www.whatwg.org/specs/web-apps/current-work/#e-mail-state-(type=email)
 */
        public static function validateAddress(/**
 * This is the pattern used in the HTML5 spec for validation of 'email' type form input elements.
 * @link http://www.whatwg.org/specs/web-apps/current-work/#e-mail-state-(type=email)
 */
$address, /**
 * This is the pattern used in the HTML5 spec for validation of 'email' type form input elements.
 * @link http://www.whatwg.org/specs/web-apps/current-work/#e-mail-state-(type=email)
 */
$patternselect = null) {}
        /**
         * Tells whether IDNs (Internationalized Domain Names) are supported or not. This requires the
         * "intl" and "mbstring" PHP extensions.
         * @return bool "true" if required functions for IDN support are present
         */
        public function idnSupported() {}
        public function punyencodeAddress($address) {}
        /**
         * Create a message and send it.
         * Uses the sending method specified by $Mailer.
         * @throws phpmailerException
         * @return boolean false on error - See the ErrorInfo property for details of the error.
         */
        public function send() {}
        /**
         * Prepare a message for sending.
         * @throws phpmailerException
         * @return boolean
         */
        public function preSend() {}
        /**
         * Actually send a message.
         * Send the email via the selected mechanism
         * @throws phpmailerException
         * @return boolean
         */
        public function postSend() {}
        protected function sendmailSend($header, $body) {}
        protected static function isShellSafe($string) {}
        protected function mailSend($header, $body) {}
        /**
         * Get an instance to use for SMTP operations.
         * Override this function to load your own SMTP implementation
         * @return SMTP
         */
        public function getSMTPInstance() {}
        protected function smtpSend($header, $body) {}
        public function smtpConnect($options = null) {}
        /**
         * Close the active SMTP session if one exists.
         * @return void
         */
        public function smtpClose() {}
        public function setLanguage($langcode = 'en', $lang_path = '') {}
        /**
         * Get the array of strings for the current language.
         * @return array
         */
        public function getTranslations() {}
        public function addrAppend($type, $addr) {}
        public function addrFormat($addr) {}
        public function wrapText($message, $length, $qp_mode = false) {}
        public function utf8CharBoundary($encodedText, $maxLength) {}
        /**
         * Apply word wrapping to the message body.
         * Wraps the message body to the number of chars set in the WordWrap property.
         * You should only do this to plain-text bodies as wrapping HTML tags may break them.
         * This is called automatically by createBody(), so you don't need to call it yourself.
         * @access public
         * @return void
         */
        public function setWordWrap() {}
        /**
         * Assemble message headers.
         * @access public
         * @return string The assembled headers
         */
        public function createHeader() {}
        /**
         * Get the message MIME type headers.
         * @access public
         * @return string
         */
        public function getMailMIME() {}
        /**
         * Returns the whole MIME message.
         * Includes complete headers and body.
         * Only valid post preSend().
         * @see PHPMailer::preSend()
         * @access public
         * @return string
         */
        public function getSentMIMEMessage() {}
        /**
         * Create unique ID
         * @return string
         */
        protected function generateId() {}
        /**
         * Assemble the message body.
         * Returns an empty string on failure.
         * @access public
         * @throws phpmailerException
         * @return string The assembled message body
         */
        public function createBody() {}
        protected function getBoundary($boundary, $charSet, $contentType, $encoding) {}
        protected function endBoundary($boundary) {}
        /**
         * Set the message type.
         * PHPMailer only supports some preset message types, not arbitrary MIME structures.
         * @access protected
         * @return void
         */
        protected function setMessageType() {}
        public function headerLine($name, $value) {}
        public function textLine($value) {}
        public function addAttachment($path, $name = '', $encoding = 'base64', $type = '', $disposition = 'attachment') {}
        /**
         * Return the array of attachments.
         * @return array
         */
        public function getAttachments() {}
        protected function attachAll($disposition_type, $boundary) {}
        protected function encodeFile($path, $encoding = 'base64') {}
        public function encodeString($str, $encoding = 'base64') {}
/** @noinspection PhpMissingBreakStatementInspection */
        public function encodeHeader(/** @noinspection PhpMissingBreakStatementInspection */
$str, /** @noinspection PhpMissingBreakStatementInspection */
$position = 'text') {}
        public function hasMultiBytes($str) {}
        public function has8bitChars($text) {}
        public function base64EncodeWrapMB($str, $linebreak = null) {}
        public function encodeQP($string, $line_max = 76) {}
        public function encodeQPphp($string, $line_max = 76, $space_conv = false) {}
/** @noinspection PhpMissingBreakStatementInspection */
        public function encodeQ(/** @noinspection PhpMissingBreakStatementInspection */
$str, /** @noinspection PhpMissingBreakStatementInspection */
$position = 'text') {}
        public function addStringAttachment($string, $filename, $encoding = 'base64', $type = '', $disposition = 'attachment') {}
        public function addEmbeddedImage($path, $cid, $name = '', $encoding = 'base64', $type = '', $disposition = 'inline') {}
        public function addStringEmbeddedImage($string, $cid, $name = '', $encoding = 'base64', $type = '', $disposition = 'inline') {}
        /**
         * Check if an inline attachment is present.
         * @access public
         * @return boolean
         */
        public function inlineImageExists() {}
        /**
         * Check if an attachment (non-inline) is present.
         * @return boolean
         */
        public function attachmentExists() {}
        /**
         * Check if this message has an alternative body set.
         * @return boolean
         */
        public function alternativeExists() {}
        public function clearQueuedAddresses($kind) {}
        /**
         * Clear all To recipients.
         * @return void
         */
        public function clearAddresses() {}
        /**
         * Clear all CC recipients.
         * @return void
         */
        public function clearCCs() {}
        /**
         * Clear all BCC recipients.
         * @return void
         */
        public function clearBCCs() {}
        /**
         * Clear all ReplyTo recipients.
         * @return void
         */
        public function clearReplyTos() {}
        /**
         * Clear all recipient types.
         * @return void
         */
        public function clearAllRecipients() {}
        /**
         * Clear all filesystem, string, and binary attachments.
         * @return void
         */
        public function clearAttachments() {}
        /**
         * Clear all custom headers.
         * @return void
         */
        public function clearCustomHeaders() {}
        protected function setError($msg) {}
        /**
         * Return an RFC 822 formatted date.
         * @access public
         * @return string
         * @static
         */
        public static function rfcDate() {}
        /**
         * Get the server hostname.
         * Returns 'localhost.localdomain' if unknown.
         * @access protected
         * @return string
         */
        protected function serverHostname() {}
        protected function lang($key) {}
        /**
         * Check if an error occurred.
         * @access public
         * @return boolean True if an error did occur.
         */
        public function isError() {}
        public function fixEOL($str) {}
        public function addCustomHeader($name, $value = null) {}
        /**
         * Returns all custom headers.
         * @return array
         */
        public function getCustomHeaders() {}
        public function msgHTML($message, $basedir = '', $advanced = false) {}
        public function html2text($html, $advanced = false) {}
        public static function _mime_types($ext = '') {}
        public static function filenameToType($filename) {}
        public static function mb_pathinfo($path, $options = null) {}
        public function set($name, $value = '') {}
        public function secureHeader($str) {}
        public static function normalizeBreaks($text, $breaktype = "\r\n") {}
        public function sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = '') {}
        public function DKIM_QP($txt) {}
        public function DKIM_Sign($signHeader) {}
        public function DKIM_HeaderC($signHeader) {}
        public function DKIM_BodyC($body) {}
        public function DKIM_Add($headers_line, $subject, $body) {}
        public static function hasLineLongerThanMax($str) {}
        /**
         * Allows for public read access to 'to' property.
         * @note: Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         * @access public
         * @return array
         */
        public function getToAddresses() {}
        /**
         * Allows for public read access to 'cc' property.
         * @note: Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         * @access public
         * @return array
         */
        public function getCcAddresses() {}
        /**
         * Allows for public read access to 'bcc' property.
         * @note: Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         * @access public
         * @return array
         */
        public function getBccAddresses() {}
        /**
         * Allows for public read access to 'ReplyTo' property.
         * @note: Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         * @access public
         * @return array
         */
        public function getReplyToAddresses() {}
        /**
         * Allows for public read access to 'all_recipients' property.
         * @note: Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         * @access public
         * @return array
         */
        public function getAllRecipientAddresses() {}
        protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from) {}
    }

    /**
     * PHPMailer exception handler
     * @package PHPMailer
     */
    class phpmailerException extends \exception {
        /**
         * Prettify error message output
         * @return string
         */
        public function errorMessage() {}
    }

    /**
     * Core class used to create an HTML dropdown list of Categories.
     *
     * @since 2.1.0
     *
     * @see Walker
     */
    class Walker_CategoryDropdown extends \walker {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type;
        /**
         * Database fields to use.
         *
         * @since 2.1.0
         * @todo Decouple this
         * @var array
         *
         * @see Walker::$db_fields
         */
        public $db_fields;

/** This filter is documented in wp-includes/category-template.php */
        public function start_el(/** This filter is documented in wp-includes/category-template.php */
$output, /** This filter is documented in wp-includes/category-template.php */
$category, /** This filter is documented in wp-includes/category-template.php */
$depth = 0, /** This filter is documented in wp-includes/category-template.php */
$args = array( ), /** This filter is documented in wp-includes/category-template.php */
$id = 0) {}
    }

    /**
     * Core class used for querying sites.
     *
     * @since 4.6.0
     *
     * @see WP_Site_Query::__construct() for accepted arguments.
     */
    class WP_Site_Query {
        /**
         * SQL for database query.
         *
         * @since 4.6.0
         * @var string
         */
        public $request;
        /**
         * SQL query clauses.
         *
         * @since 4.6.0
         * @var array
         */
        protected $sql_clauses;
        /**
         * Metadata query container.
         *
         * @since 5.1.0
         * @var WP_Meta_Query
         */
        public $meta_query;
        /**
         * Metadata query clauses.
         *
         * @since 5.1.0
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * Date query container.
         *
         * @since 4.6.0
         * @var object WP_Date_Query
         */
        public $date_query;
        /**
         * Query vars set by the user.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_vars;
        /**
         * Default values for query vars.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_var_defaults;
        /**
         * List of sites located by the query.
         *
         * @since 4.6.0
         * @var array
         */
        public $sites;
        /**
         * The amount of found sites for the current query.
         *
         * @since 4.6.0
         * @var int
         */
        public $found_sites;
        /**
         * The number of pages.
         *
         * @since 4.6.0
         * @var int
         */
        public $max_num_pages;

        public function __construct($query = '') {}
/**
 * Fires after the site query vars have been parsed.
 *
 * @since 4.6.0
 *
 * @param WP_Site_Query $this The WP_Site_Query instance (passed by reference).
 */
        public function parse_query(/**
 * Fires after the site query vars have been parsed.
 *
 * @since 4.6.0
 *
 * @param WP_Site_Query $this The WP_Site_Query instance (passed by reference).
 */
$query = '') {}
        public function query($query) {}
        /**
         * Retrieves a list of sites matching the query vars.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return array|int List of WP_Site objects, a list of site ids when 'fields' is set to 'ids',
         *                   or the number of sites when 'count' is passed as a query var.
         */
        public function get_sites() {}
        /**
         * Filters the site query clauses.
         *
         * @since 4.6.0
         *
         * @param string[]      $pieces An associative array of site query clauses.
         * @param WP_Site_Query $this   Current instance of WP_Site_Query (passed by reference).
         */
        protected function get_site_ids() {}
        /**
         * Populates found_sites and max_num_pages properties for the current query
         * if the limit clause was used.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        private function set_found_sites() {}
        protected function get_search_sql($string, $columns) {}
        protected function parse_orderby($orderby) {}
        protected function parse_order($order) {}
    }

    /**
     * Customize Panel class.
     *
     * A UI container for sections, managed by the WP_Customize_Manager.
     *
     * @since 4.0.0
     *
     * @see WP_Customize_Manager
     */
    class WP_Customize_Panel {
        /**
         * Incremented with each new class instantiation, then stored in $instance_number.
         *
         * Used when sorting two instances whose priorities are equal.
         *
         * @since 4.1.0
         * @var int
         */
        static protected $instance_count;
        /**
         * Order in which this instance was created in relation to other instances.
         *
         * @since 4.1.0
         * @var int
         */
        public $instance_number;
        /**
         * WP_Customize_Manager instance.
         *
         * @since 4.0.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Unique identifier.
         *
         * @since 4.0.0
         * @var string
         */
        public $id;
        /**
         * Priority of the panel, defining the display order of panels and sections.
         *
         * @since 4.0.0
         * @var integer
         */
        public $priority;
        /**
         * Capability required for the panel.
         *
         * @since 4.0.0
         * @var string
         */
        public $capability;
        /**
         * Theme feature support for the panel.
         *
         * @since 4.0.0
         * @var string|array
         */
        public $theme_supports;
        /**
         * Title of the panel to show in UI.
         *
         * @since 4.0.0
         * @var string
         */
        public $title;
        /**
         * Description to show in the UI.
         *
         * @since 4.0.0
         * @var string
         */
        public $description;
        /**
         * Auto-expand a section in a panel when the panel is expanded when the panel only has the one section.
         *
         * @since 4.7.4
         * @var bool
         */
        public $auto_expand_sole_section;
        /**
         * Customizer sections for this panel.
         *
         * @since 4.0.0
         * @var array
         */
        public $sections;
        /**
         * Type of this panel.
         *
         * @since 4.1.0
         * @var string
         */
        public $type;
        /**
         * Active callback.
         *
         * @since 4.1.0
         *
         * @see WP_Customize_Section::active()
         *
         * @var callable Callback is called with one argument, the instance of
         *               WP_Customize_Section, and returns bool to indicate whether
         *               the section is active (such as it relates to the URL currently
         *               being previewed).
         */
        public $active_callback;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Check whether panel is active to current Customizer preview.
         *
         * @since 4.1.0
         *
         * @return bool Whether the panel is active to the current preview.
         */
        public function active() {}
        /**
         * Default callback used when invoking WP_Customize_Panel::active().
         *
         * Subclasses can override this with their specific logic, or they may
         * provide an 'active_callback' argument to the constructor.
         *
         * @since 4.1.0
         *
         * @return bool Always true.
         */
        public function active_callback() {}
        /**
         * Gather the parameters passed to client JavaScript via JSON.
         *
         * @since 4.1.0
         *
         * @return array The array to be exported to the client as JSON.
         */
        public function json() {}
        /**
         * Checks required user capabilities and whether the theme has the
         * feature support required by the panel.
         *
         * @since 4.0.0
         *
         * @return bool False if theme doesn't support the panel or the user doesn't have the capability.
         */
        public function check_capabilities() {}
        /**
         * Get the panel's content template for insertion into the Customizer pane.
         *
         * @since 4.1.0
         *
         * @return string Content for the panel.
         */
        public function get_content() {}
        /**
         * Check capabilities and render the panel.
         *
         * @since 4.0.0
         */
        public function maybe_render() {}
        /**
         * Render the panel container, and then its contents (via `this->render_content()`) in a subclass.
         *
         * Panel containers are now rendered in JS by default, see WP_Customize_Panel::print_template().
         *
         * @since 4.0.0
         */
        protected function render() {}
        /**
         * Render the panel UI in a subclass.
         *
         * Panel contents are now rendered in JS by default, see WP_Customize_Panel::print_template().
         *
         * @since 4.1.0
         */
        protected function render_content() {}
        /**
         * Render the panel's JS templates.
         *
         * This function is only run for panel types that have been registered with
         * WP_Customize_Manager::register_panel_type().
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Manager::register_panel_type()
         */
        public function print_template() {}
        /**
         * An Underscore (JS) template for rendering this panel's container.
         *
         * Class variables for this panel class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Panel::json().
         *
         * @see WP_Customize_Panel::print_template()
         *
         * @since 4.3.0
         */
        protected function render_template() {}
        /**
         * An Underscore (JS) template for this panel's content (but not its container).
         *
         * Class variables for this panel class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Panel::json().
         *
         * @see WP_Customize_Panel::print_template()
         *
         * @since 4.3.0
         */
        protected function content_template() {}
    }

    /**
     * Converts to and from JSON format.
     *
     * Brief example of use:
     *
     * <code>
     * // create a new instance of Services_JSON
     * $json = new Services_JSON();
     *
     * // convert a complexe value to JSON notation, and send it to the browser
     * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4)));
     * $output = $json->encode($value);
     *
     * print($output);
     * // prints: ["foo","bar",[1,2,"baz"],[3,[4]]]
     *
     * // accept incoming POST data, assumed to be in JSON notation
     * $input = file_get_contents('php://input', 1000000);
     * $value = $json->decode($input);
     * </code>
     */
    class Services_JSON {
        public $_mb_strlen;
        public $_mb_substr;
        public $_mb_convert_encoding;

        function __construct($use = 0) {}
        public function Services_JSON($use = 0) {}
        function utf162utf8($utf16) {}
        function utf82utf16($utf8) {}
        function encode($var) {}
        function encodeUnsafe($var) {}
        function _encode($var) {}
        function name_value($name, $value) {}
        function reduce_string($str) {}
        function decode($str) {}
        function isError($data, $code = null) {}
        function strlen8($str) {}
        function substr8($string, $start, $length = false) {}
    }

    /**
     * @todo Ultimately, this class shall be descended from PEAR_Error
     */
    class Services_JSON_Error {
        function __construct($message = 'unknown error', $code = null, $mode = null, $options = null, $userinfo = null) {}
        public function Services_JSON_Error($message = 'unknown error', $code = null, $mode = null, $options = null, $userinfo = null) {}
    }

    /**
     * SimplePie
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie {
        /**
         * @var array Raw data
         * @access private
         */
        public $data;
        /**
         * @var mixed Error string
         * @access private
         */
        public $error;
        /**
         * @var object Instance of SimplePie_Sanitize (or other class)
         * @see SimplePie::set_sanitize_class()
         * @access private
         */
        public $sanitize;
        /**
         * @var string SimplePie Useragent
         * @see SimplePie::set_useragent()
         * @access private
         */
        public $useragent;
        /**
         * @var string Feed URL
         * @see SimplePie::set_feed_url()
         * @access private
         */
        public $feed_url;
        /**
         * @var object Instance of SimplePie_File to use as a feed
         * @see SimplePie::set_file()
         * @access private
         */
        public $file;
        /**
         * @var string Raw feed data
         * @see SimplePie::set_raw_data()
         * @access private
         */
        public $raw_data;
        /**
         * @var int Timeout for fetching remote files
         * @see SimplePie::set_timeout()
         * @access private
         */
        public $timeout;
        /**
         * @var bool Forces fsockopen() to be used for remote files instead
         * of cURL, even if a new enough version is installed
         * @see SimplePie::force_fsockopen()
         * @access private
         */
        public $force_fsockopen;
        /**
         * @var bool Force the given data/URL to be treated as a feed no matter what
         * it appears like
         * @see SimplePie::force_feed()
         * @access private
         */
        public $force_feed;
        /**
         * @var bool Enable/Disable Caching
         * @see SimplePie::enable_cache()
         * @access private
         */
        public $cache;
        /**
         * @var int Cache duration (in seconds)
         * @see SimplePie::set_cache_duration()
         * @access private
         */
        public $cache_duration;
        /**
         * @var int Auto-discovery cache duration (in seconds)
         * @see SimplePie::set_autodiscovery_cache_duration()
         * @access private
         */
        public $autodiscovery_cache_duration;
        /**
         * @var string Cache location (relative to executing script)
         * @see SimplePie::set_cache_location()
         * @access private
         */
        public $cache_location;
        /**
         * @var string Function that creates the cache filename
         * @see SimplePie::set_cache_name_function()
         * @access private
         */
        public $cache_name_function;
        /**
         * @var bool Reorder feed by date descending
         * @see SimplePie::enable_order_by_date()
         * @access private
         */
        public $order_by_date;
        /**
         * @var mixed Force input encoding to be set to the follow value
         * (false, or anything type-cast to false, disables this feature)
         * @see SimplePie::set_input_encoding()
         * @access private
         */
        public $input_encoding;
        /**
         * @var int Feed Autodiscovery Level
         * @see SimplePie::set_autodiscovery_level()
         * @access private
         */
        public $autodiscovery;
        /**
         * Class registry object
         *
         * @var SimplePie_Registry
         */
        public $registry;
        /**
         * @var int Maximum number of feeds to check with autodiscovery
         * @see SimplePie::set_max_checked_feeds()
         * @access private
         */
        public $max_checked_feeds;
        /**
         * @var array All the feeds found during the autodiscovery process
         * @see SimplePie::get_all_discovered_feeds()
         * @access private
         */
        public $all_discovered_feeds;
        /**
         * @var string Web-accessible path to the handler_image.php file.
         * @see SimplePie::set_image_handler()
         * @access private
         */
        public $image_handler;
        /**
         * @var array Stores the URLs when multiple feeds are being initialized.
         * @see SimplePie::set_feed_url()
         * @access private
         */
        public $multifeed_url;
        /**
         * @var array Stores SimplePie objects when multiple feeds initialized.
         * @access private
         */
        public $multifeed_objects;
        /**
         * @var array Stores the get_object_vars() array for use with multifeeds.
         * @see SimplePie::set_feed_url()
         * @access private
         */
        public $config_settings;
        /**
         * @var integer Stores the number of items to return per-feed with multifeeds.
         * @see SimplePie::set_item_limit()
         * @access private
         */
        public $item_limit;
        /**
         * @var array Stores the default attributes to be stripped by strip_attributes().
         * @see SimplePie::strip_attributes()
         * @access private
         */
        public $strip_attributes;
        /**
         * @var array Stores the default tags to be stripped by strip_htmltags().
         * @see SimplePie::strip_htmltags()
         * @access private
         */
        public $strip_htmltags;

        /**
         * The SimplePie class contains feed level data and options
         *
         * To use SimplePie, create the SimplePie object with no parameters. You can
         * then set configuration options using the provided methods. After setting
         * them, you must initialise the feed using $feed->init(). At that point the
         * object's methods and properties will be available to you.
         *
         * Previously, it was possible to pass in the feed URL along with cache
         * options directly into the constructor. This has been removed as of 1.3 as
         * it caused a lot of confusion.
         *
         * @since 1.0 Preview Release
         */
        public function __construct() {}
        /**
         * Used for converting object to a string
         */
        public function __toString() {}
        /**
         * Remove items that link back to this before destroying this object
         */
        public function __destruct() {}
        public function force_feed($enable = false) {}
        public function set_feed_url($url) {}
        public function set_file($file) {}
        public function set_raw_data($data) {}
        public function set_timeout($timeout = 10) {}
        public function force_fsockopen($enable = false) {}
        public function enable_cache($enable = true) {}
        public function set_cache_duration($seconds = 3600) {}
        public function set_autodiscovery_cache_duration($seconds = 604800) {}
        public function set_cache_location($location = './cache') {}
        public function enable_order_by_date($enable = true) {}
        public function set_input_encoding($encoding = false) {}
        public function set_autodiscovery_level($level = SIMPLEPIE_LOCATOR_ALL) {}
        /**
         * Get the class registry
         *
         * Use this to override SimplePie's default classes
         * @see SimplePie_Registry
         * @return SimplePie_Registry
         */
        public function &get_registry() {}
        public function set_cache_class($class = 'SimplePie_Cache') {}
        public function set_locator_class($class = 'SimplePie_Locator') {}
        public function set_parser_class($class = 'SimplePie_Parser') {}
        public function set_file_class($class = 'SimplePie_File') {}
        public function set_sanitize_class($class = 'SimplePie_Sanitize') {}
        public function set_item_class($class = 'SimplePie_Item') {}
        public function set_author_class($class = 'SimplePie_Author') {}
        public function set_category_class($class = 'SimplePie_Category') {}
        public function set_enclosure_class($class = 'SimplePie_Enclosure') {}
        public function set_caption_class($class = 'SimplePie_Caption') {}
        public function set_copyright_class($class = 'SimplePie_Copyright') {}
        public function set_credit_class($class = 'SimplePie_Credit') {}
        public function set_rating_class($class = 'SimplePie_Rating') {}
        public function set_restriction_class($class = 'SimplePie_Restriction') {}
        public function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer') {}
        public function set_source_class($class = 'SimplePie_Source') {}
        public function set_useragent($ua = SIMPLEPIE_USERAGENT) {}
        public function set_cache_name_function($function = 'md5') {}
        public function set_stupidly_fast($set = false) {}
        public function set_max_checked_feeds($max = 10) {}
        public function remove_div($enable = true) {}
        public function strip_htmltags($tags = '', $encode = null) {}
        public function encode_instead_of_strip($enable = true) {}
        public function strip_attributes($attribs = '') {}
        public function set_output_encoding($encoding = 'UTF-8') {}
        public function strip_comments($strip = false) {}
        public function set_url_replacements($element_attribute = null) {}
        public function set_image_handler($page = false, $qs = 'i') {}
        public function set_item_limit($limit = 0) {}
        /**
         * Initialize the feed object
         *
         * This is what makes everything happen.  Period.  This is where all of the
         * configuration options get processed, feeds are fetched, cached, and
         * parsed, and all of that other good stuff.
         *
         * @return boolean True if successful, false otherwise
         */
        public function init() {}
        protected function fetch_data($cache) {}
        /**
         * Get the error message for the occurred error.
         *
         * @return string|array Error message, or array of messages for multifeeds
         */
        public function error() {}
        /**
         * Get the raw XML
         *
         * This is the same as the old `$feed->enable_xml_dump(true)`, but returns
         * the data instead of printing it.
         *
         * @return string|boolean Raw XML data, false if the cache is used
         */
        public function get_raw_data() {}
        /**
         * Get the character encoding used for output
         *
         * @since Preview Release
         * @return string
         */
        public function get_encoding() {}
        public function handle_content_type($mime = 'text/html') {}
        /**
         * Get the type of the feed
         *
         * This returns a SIMPLEPIE_TYPE_* constant, which can be tested against
         * using {@link http://php.net/language.operators.bitwise bitwise operators}
         *
         * @since 0.8 (usage changed to using constants in 1.0)
         * @see SIMPLEPIE_TYPE_NONE Unknown.
         * @see SIMPLEPIE_TYPE_RSS_090 RSS 0.90.
         * @see SIMPLEPIE_TYPE_RSS_091_NETSCAPE RSS 0.91 (Netscape).
         * @see SIMPLEPIE_TYPE_RSS_091_USERLAND RSS 0.91 (Userland).
         * @see SIMPLEPIE_TYPE_RSS_091 RSS 0.91.
         * @see SIMPLEPIE_TYPE_RSS_092 RSS 0.92.
         * @see SIMPLEPIE_TYPE_RSS_093 RSS 0.93.
         * @see SIMPLEPIE_TYPE_RSS_094 RSS 0.94.
         * @see SIMPLEPIE_TYPE_RSS_10 RSS 1.0.
         * @see SIMPLEPIE_TYPE_RSS_20 RSS 2.0.x.
         * @see SIMPLEPIE_TYPE_RSS_RDF RDF-based RSS.
         * @see SIMPLEPIE_TYPE_RSS_SYNDICATION Non-RDF-based RSS (truly intended as syndication format).
         * @see SIMPLEPIE_TYPE_RSS_ALL Any version of RSS.
         * @see SIMPLEPIE_TYPE_ATOM_03 Atom 0.3.
         * @see SIMPLEPIE_TYPE_ATOM_10 Atom 1.0.
         * @see SIMPLEPIE_TYPE_ATOM_ALL Any version of Atom.
         * @see SIMPLEPIE_TYPE_ALL Any known/supported feed type.
         * @return int SIMPLEPIE_TYPE_* constant
         */
        public function get_type() {}
        /**
         * Get the URL for the feed
         *
         * May or may not be different from the URL passed to {@see set_feed_url()},
         * depending on whether auto-discovery was used.
         *
         * @since Preview Release (previously called `get_feed_url()` since SimplePie 0.8.)
         * @todo If we have a perm redirect we should return the new URL
         * @todo When we make the above change, let's support <itunes:new-feed-url> as well
         * @todo Also, |atom:link|@rel=self
         * @return string|null
         */
        public function subscribe_url() {}
        public function get_feed_tags($namespace, $tag) {}
        public function get_channel_tags($namespace, $tag) {}
        public function get_image_tags($namespace, $tag) {}
        public function get_base($element = array( )) {}
        public function sanitize($data, $type, $base = '') {}
        /**
         * Get the title of the feed
         *
         * Uses `<atom:title>`, `<title>` or `<dc:title>`
         *
         * @since 1.0 (previously called `get_feed_title` since 0.8)
         * @return string|null
         */
        public function get_title() {}
        public function get_category($key = 0) {}
        /**
         * Get all categories for the feed
         *
         * Uses `<atom:category>`, `<category>` or `<dc:subject>`
         *
         * @since Unknown
         * @return array|null List of {@see SimplePie_Category} objects
         */
        public function get_categories() {}
        public function get_author($key = 0) {}
        /**
         * Get all authors for the feed
         *
         * Uses `<atom:author>`, `<author>`, `<dc:creator>` or `<itunes:author>`
         *
         * @since 1.1
         * @return array|null List of {@see SimplePie_Author} objects
         */
        public function get_authors() {}
        public function get_contributor($key = 0) {}
        /**
         * Get all contributors for the feed
         *
         * Uses `<atom:contributor>`
         *
         * @since 1.1
         * @return array|null List of {@see SimplePie_Author} objects
         */
        public function get_contributors() {}
        public function get_link($key = 0, $rel = 'alternate') {}
        /**
         * Get the permalink for the item
         *
         * Returns the first link available with a relationship of "alternate".
         * Identical to {@see get_link()} with key 0
         *
         * @see get_link
         * @since 1.0 (previously called `get_feed_link` since Preview Release, `get_feed_permalink()` since 0.8)
         * @internal Added for parity between the parent-level and the item/entry-level.
         * @return string|null Link URL
         */
        public function get_permalink() {}
        public function get_links($rel = 'alternate') {}
        public function get_all_discovered_feeds() {}
        /**
         * Get the content for the item
         *
         * Uses `<atom:subtitle>`, `<atom:tagline>`, `<description>`,
         * `<dc:description>`, `<itunes:summary>` or `<itunes:subtitle>`
         *
         * @since 1.0 (previously called `get_feed_description()` since 0.8)
         * @return string|null
         */
        public function get_description() {}
        /**
         * Get the copyright info for the feed
         *
         * Uses `<atom:rights>`, `<atom:copyright>` or `<dc:rights>`
         *
         * @since 1.0 (previously called `get_feed_copyright()` since 0.8)
         * @return string|null
         */
        public function get_copyright() {}
        /**
         * Get the language for the feed
         *
         * Uses `<language>`, `<dc:language>`, or @xml_lang
         *
         * @since 1.0 (previously called `get_feed_language()` since 0.8)
         * @return string|null
         */
        public function get_language() {}
        /**
         * Get the latitude coordinates for the item
         *
         * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications
         *
         * Uses `<geo:lat>` or `<georss:point>`
         *
         * @since 1.0
         * @link http://www.w3.org/2003/01/geo/ W3C WGS84 Basic Geo
         * @link http://www.georss.org/ GeoRSS
         * @return string|null
         */
        public function get_latitude() {}
        /**
         * Get the longitude coordinates for the feed
         *
         * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications
         *
         * Uses `<geo:long>`, `<geo:lon>` or `<georss:point>`
         *
         * @since 1.0
         * @link http://www.w3.org/2003/01/geo/ W3C WGS84 Basic Geo
         * @link http://www.georss.org/ GeoRSS
         * @return string|null
         */
        public function get_longitude() {}
        /**
         * Get the feed logo's title
         *
         * RSS 0.9.0, 1.0 and 2.0 feeds are allowed to have a "feed logo" title.
         *
         * Uses `<image><title>` or `<image><dc:title>`
         *
         * @return string|null
         */
        public function get_image_title() {}
        /**
         * Get the feed logo's URL
         *
         * RSS 0.9.0, 2.0, Atom 1.0, and feeds with iTunes RSS tags are allowed to
         * have a "feed logo" URL. This points directly to the image itself.
         *
         * Uses `<itunes:image>`, `<atom:logo>`, `<atom:icon>`,
         * `<image><title>` or `<image><dc:title>`
         *
         * @return string|null
         */
        public function get_image_url() {}
        /**
         * Get the feed logo's link
         *
         * RSS 0.9.0, 1.0 and 2.0 feeds are allowed to have a "feed logo" link. This
         * points to a human-readable page that the image should link to.
         *
         * Uses `<itunes:image>`, `<atom:logo>`, `<atom:icon>`,
         * `<image><title>` or `<image><dc:title>`
         *
         * @return string|null
         */
        public function get_image_link() {}
        /**
         * Get the feed logo's link
         *
         * RSS 2.0 feeds are allowed to have a "feed logo" width.
         *
         * Uses `<image><width>` or defaults to 88.0 if no width is specified and
         * the feed is an RSS 2.0 feed.
         *
         * @return int|float|null
         */
        public function get_image_width() {}
        /**
         * Get the feed logo's height
         *
         * RSS 2.0 feeds are allowed to have a "feed logo" height.
         *
         * Uses `<image><height>` or defaults to 31.0 if no height is specified and
         * the feed is an RSS 2.0 feed.
         *
         * @return int|float|null
         */
        public function get_image_height() {}
        public function get_item_quantity($max = 0) {}
        public function get_item($key = 0) {}
        public function get_items($start = 0, $end = 0) {}
        public function set_favicon_handler($page = false, $qs = 'i') {}
        /**
         * Get the favicon for the current feed
         *
         * @deprecated Use your own favicon handling instead
         */
        public function get_favicon() {}
        public function __call($method, $args) {}
        public static function sort_items($a, $b) {}
        public static function merge_items($urls, $start = 0, $end = 0, $limit = 0) {}
    }

    /**
     * Class used for querying terms.
     *
     * @since 4.6.0
     *
     * @see WP_Term_Query::__construct() for accepted arguments.
     */
    class WP_Term_Query {
        /**
         * SQL string used to perform database query.
         *
         * @since 4.6.0
         * @var string
         */
        public $request;
        /**
         * Metadata query container.
         *
         * @since 4.6.0
         * @var object WP_Meta_Query
         */
        public $meta_query;
        /**
         * Metadata query clauses.
         *
         * @since 4.6.0
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * SQL query clauses.
         *
         * @since 4.6.0
         * @var array
         */
        protected $sql_clauses;
        /**
         * Query vars set by the user.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_vars;
        /**
         * Default values for query vars.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_var_defaults;
        /**
         * List of terms located by the query.
         *
         * @since 4.6.0
         * @var array
         */
        public $terms;

        public function __construct($query = '') {}
/**
 * Fires after term query vars have been parsed.
 *
 * @since 4.6.0
 *
 * @param WP_Term_Query $this Current instance of WP_Term_Query.
 */
        public function parse_query(/**
 * Fires after term query vars have been parsed.
 *
 * @since 4.6.0
 *
 * @param WP_Term_Query $this Current instance of WP_Term_Query.
 */
$query = '') {}
        public function query($query) {}
        /**
         * Filters the terms query SQL clauses.
         *
         * @since 3.1.0
         *
         * @param string[] $pieces     Array of query SQL clauses.
         * @param string[] $taxonomies An array of taxonomy names.
         * @param array    $args       An array of term query arguments.
         */
        public function get_terms() {}
/**
 * Filters the ORDERBY clause of the terms query.
 *
 * @since 2.8.0
 *
 * @param string   $orderby    `ORDERBY` clause of the terms query.
 * @param array    $args       An array of term query arguments.
 * @param string[] $taxonomies An array of taxonomy names.
 */
        protected function parse_orderby(/**
 * Filters the ORDERBY clause of the terms query.
 *
 * @since 2.8.0
 *
 * @param string   $orderby    `ORDERBY` clause of the terms query.
 * @param array    $args       An array of term query arguments.
 * @param string[] $taxonomies An array of taxonomy names.
 */
$orderby_raw) {}
        protected function parse_orderby_meta($orderby_raw) {}
        protected function parse_order($order) {}
        protected function get_search_sql($string) {}
        protected function populate_terms($term_ids) {}
    }

    /**
     * Core class used for switching locales.
     *
     * @since 4.7.0
     */
    class WP_Locale_Switcher {
        /**
         * Locale stack.
         *
         * @since 4.7.0
         * @var string[]
         */
        private $locales;
        /**
         * Original locale.
         *
         * @since 4.7.0
         * @var string
         */
        private $original_locale;
        /**
         * Holds all available languages.
         *
         * @since 4.7.0
         * @var array An array of language codes (file names without the .mo extension).
         */
        private $available_languages;

        /**
         * Constructor.
         *
         * Stores the original locale as well as a list of all available languages.
         *
         * @since 4.7.0
         */
        public function __construct() {}
        /**
         * Initializes the locale switcher.
         *
         * Hooks into the {@see 'locale'} filter to change the locale on the fly.
         *
         * @since 4.7.0
         */
        public function init() {}
/**
 * Fires when the locale is switched.
 *
 * @since 4.7.0
 *
 * @param string $locale The new locale.
 */
        public function switch_to_locale(/**
 * Fires when the locale is switched.
 *
 * @since 4.7.0
 *
 * @param string $locale The new locale.
 */
$locale) {}
        /**
         * Fires when the locale is restored to the previous one.
         *
         * @since 4.7.0
         *
         * @param string $locale          The new locale.
         * @param string $previous_locale The previous locale.
         */
        public function restore_previous_locale() {}
        /**
         * Restores the translations according to the original locale.
         *
         * @since 4.7.0
         *
         * @return string|false Locale on success, false on failure.
         */
        public function restore_current_locale() {}
        /**
         * Whether switch_to_locale() is in effect.
         *
         * @since 4.7.0
         *
         * @return bool True if the locale has been switched, false otherwise.
         */
        public function is_switched() {}
        public function filter_locale($locale) {}
        private function load_translations($locale) {}
/**
 * Fires when the locale is switched to or restored.
 *
 * @since 4.7.0
 *
 * @param string $locale The new locale.
 */
        private function change_locale(/**
 * Fires when the locale is switched to or restored.
 *
 * @since 4.7.0
 *
 * @param string $locale The new locale.
 */
$locale) {}
    }

    /**
     * Core walker class used to create an HTML list of comments.
     *
     * @since 2.7.0
     *
     * @see Walker
     */
    class Walker_Comment extends \walker {
        /**
         * What the class handles.
         *
         * @since 2.7.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type;
        /**
         * Database fields to use.
         *
         * @since 2.7.0
         * @var array
         *
         * @see Walker::$db_fields
         * @todo Decouple this
         */
        public $db_fields;

        public function start_lvl($output, $depth = 0, $args = array( )) {}
        public function end_lvl($output, $depth = 0, $args = array( )) {}
        public function display_element($element, $children_elements, $max_depth, $depth, $args, $output) {}
        public function start_el($output, $comment, $depth = 0, $args = array( ), $id = 0) {}
        public function end_el($output, $comment, $depth = 0, $args = array( )) {}
        protected function ping($comment, $depth, $args) {}
        public function filter_comment_text($comment_text, $comment) {}
        protected function comment($comment, $depth, $args) {}
        protected function html5_comment($comment, $depth, $args) {}
    }

    /**
     * Core class used to encapsulate a single cookie object for internal use.
     *
     * Returned cookies are represented using this class, and when cookies are set, if they are not
     * already a WP_Http_Cookie() object, then they are turned into one.
     *
     * @todo The WordPress convention is to use underscores instead of camelCase for function and method
     * names. Need to switch to use underscores instead for the methods.
     *
     * @since 2.8.0
     */
    class WP_Http_Cookie {
        /**
         * Cookie name.
         *
         * @since 2.8.0
         * @var string
         */
        public $name;
        /**
         * Cookie value.
         *
         * @since 2.8.0
         * @var string
         */
        public $value;
        /**
         * When the cookie expires.
         *
         * @since 2.8.0
         * @var string
         */
        public $expires;
        /**
         * Cookie URL path.
         *
         * @since 2.8.0
         * @var string
         */
        public $path;
        /**
         * Cookie Domain.
         *
         * @since 2.8.0
         * @var string
         */
        public $domain;

        public function __construct($data, $requested_url = '') {}
        public function test($url) {}
        /**
         * Convert cookie name and value back to header string.
         *
         * @since 2.8.0
         *
         * @return string Header encoded cookie name and value.
         */
        public function getHeaderValue() {}
        /**
         * Retrieve cookie header for usage in the rest of the WordPress HTTP API.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function getFullHeader() {}
        /**
         * Retrieves cookie attributes.
         *
         * @since 4.6.0
         *
         * @return array {
         *    List of attributes.
         *
         *    @type string $expires When the cookie expires.
         *    @type string $path    Cookie URL path.
         *    @type string $domain  Cookie domain.
         * }
         */
        public function get_attributes() {}
    }

    /**
     * Core class used to implement a rewrite component API.
     *
     * The WordPress Rewrite class writes the rewrite module rules to the .htaccess
     * file. It also handles parsing the request to get the correct setup for the
     * WordPress Query class.
     *
     * The Rewrite along with WP class function as a front controller for WordPress.
     * You can add rules to trigger your page view and processing using this
     * component. The full functionality of a front controller does not exist,
     * meaning you can't define how the template files load based on the rewrite
     * rules.
     *
     * @since 1.5.0
     */
    class WP_Rewrite {
        /**
         * Permalink structure for posts.
         *
         * @since 1.5.0
         * @var string
         */
        public $permalink_structure;
        /**
         * Whether to add trailing slashes.
         *
         * @since 2.2.0
         * @var bool
         */
        public $use_trailing_slashes;
        /**
         * Base for the author permalink structure (example.com/$author_base/authorname).
         *
         * @since 1.5.0
         * @var string
         */
        public $author_base;
        /**
         * Permalink structure for author archives.
         *
         * @since 1.5.0
         * @var string
         */
        public $author_structure;
        /**
         * Permalink structure for date archives.
         *
         * @since 1.5.0
         * @var string
         */
        public $date_structure;
        /**
         * Permalink structure for pages.
         *
         * @since 1.5.0
         * @var string
         */
        public $page_structure;
        /**
         * Base of the search permalink structure (example.com/$search_base/query).
         *
         * @since 1.5.0
         * @var string
         */
        public $search_base;
        /**
         * Permalink structure for searches.
         *
         * @since 1.5.0
         * @var string
         */
        public $search_structure;
        /**
         * Comments permalink base.
         *
         * @since 1.5.0
         * @var string
         */
        public $comments_base;
        /**
         * Pagination permalink base.
         *
         * @since 3.1.0
         * @var string
         */
        public $pagination_base;
        /**
         * Comments pagination permalink base.
         *
         * @since 4.2.0
         * @var string
         */
        public $comments_pagination_base;
        /**
         * Feed permalink base.
         *
         * @since 1.5.0
         * @var string
         */
        public $feed_base;
        /**
         * Comments feed permalink structure.
         *
         * @since 1.5.0
         * @var string
         */
        public $comment_feed_structure;
        /**
         * Feed request permalink structure.
         *
         * @since 1.5.0
         * @var string
         */
        public $feed_structure;
        /**
         * The static portion of the post permalink structure.
         *
         * If the permalink structure is "/archive/%post_id%" then the front
         * is "/archive/". If the permalink structure is "/%year%/%postname%/"
         * then the front is "/".
         *
         * @since 1.5.0
         * @var string
         *
         * @see WP_Rewrite::init()
         */
        public $front;
        /**
         * The prefix for all permalink structures.
         *
         * If PATHINFO/index permalinks are in use then the root is the value of
         * `WP_Rewrite::$index` with a trailing slash appended. Otherwise the root
         * will be empty.
         *
         * @since 1.5.0
         * @var string
         *
         * @see WP_Rewrite::init()
         * @see WP_Rewrite::using_index_permalinks()
         */
        public $root;
        /**
         * The name of the index file which is the entry point to all requests.
         *
         * @since 1.5.0
         * @var string
         */
        public $index;
        /**
         * Variable name to use for regex matches in the rewritten query.
         *
         * @since 1.5.0
         * @var string
         */
        public $matches;
        /**
         * Rewrite rules to match against the request to find the redirect or query.
         *
         * @since 1.5.0
         * @var array
         */
        public $rules;
        /**
         * Additional rules added external to the rewrite class.
         *
         * Those not generated by the class, see add_rewrite_rule().
         *
         * @since 2.1.0
         * @var array
         */
        public $extra_rules;
        /**
         * Additional rules that belong at the beginning to match first.
         *
         * Those not generated by the class, see add_rewrite_rule().
         *
         * @since 2.3.0
         * @var array
         */
        public $extra_rules_top;
        /**
         * Rules that don't redirect to WordPress' index.php.
         *
         * These rules are written to the mod_rewrite portion of the .htaccess,
         * and are added by add_external_rule().
         *
         * @since 2.1.0
         * @var array
         */
        public $non_wp_rules;
        /**
         * Extra permalink structures, e.g. categories, added by add_permastruct().
         *
         * @since 2.1.0
         * @var array
         */
        public $extra_permastructs;
        /**
         * Endpoints (like /trackback/) added by add_rewrite_endpoint().
         *
         * @since 2.1.0
         * @var array
         */
        public $endpoints;
        /**
         * Whether to write every mod_rewrite rule for WordPress into the .htaccess file.
         *
         * This is off by default, turning it on might print a lot of rewrite rules
         * to the .htaccess file.
         *
         * @since 2.0.0
         * @var bool
         *
         * @see WP_Rewrite::mod_rewrite_rules()
         */
        public $use_verbose_rules;
        /**
         * Could post permalinks be confused with those of pages?
         *
         * If the first rewrite tag in the post permalink structure is one that could
         * also match a page name (e.g. %postname% or %author%) then this flag is
         * set to true. Prior to WordPress 3.3 this flag indicated that every page
         * would have a set of rules added to the top of the rewrite rules array.
         * Now it tells WP::parse_request() to check if a URL matching the page
         * permastruct is actually a page before accepting it.
         *
         * @since 2.5.0
         * @var bool
         *
         * @see WP_Rewrite::init()
         */
        public $use_verbose_page_rules;
        /**
         * Rewrite tags that can be used in permalink structures.
         *
         * These are translated into the regular expressions stored in
         * `WP_Rewrite::$rewritereplace` and are rewritten to the query
         * variables listed in WP_Rewrite::$queryreplace.
         *
         * Additional tags can be added with add_rewrite_tag().
         *
         * @since 1.5.0
         * @var array
         */
        public $rewritecode;
        /**
         * Regular expressions to be substituted into rewrite rules in place
         * of rewrite tags, see WP_Rewrite::$rewritecode.
         *
         * @since 1.5.0
         * @var array
         */
        public $rewritereplace;
        /**
         * Query variables that rewrite tags map to, see WP_Rewrite::$rewritecode.
         *
         * @since 1.5.0
         * @var array
         */
        public $queryreplace;
        /**
         * Supported default feeds.
         *
         * @since 1.5.0
         * @var array
         */
        public $feeds;

        /**
         * Determines whether permalinks are being used.
         *
         * This can be either rewrite module or permalink in the HTTP query string.
         *
         * @since 1.5.0
         *
         * @return bool True, if permalinks are enabled.
         */
        public function using_permalinks() {}
        /**
         * Determines whether permalinks are being used and rewrite module is not enabled.
         *
         * Means that permalink links are enabled and index.php is in the URL.
         *
         * @since 1.5.0
         *
         * @return bool Whether permalink links are enabled and index.php is in the URL.
         */
        public function using_index_permalinks() {}
        /**
         * Determines whether permalinks are being used and rewrite module is enabled.
         *
         * Using permalinks and index.php is not in the URL.
         *
         * @since 1.5.0
         *
         * @return bool Whether permalink links are enabled and index.php is NOT in the URL.
         */
        public function using_mod_rewrite_permalinks() {}
        public function preg_index($number) {}
        /**
         * Retrieves all page and attachments for pages URIs.
         *
         * The attachments are for those that have pages as parents and will be
         * retrieved.
         *
         * @since 2.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return array Array of page URIs as first element and attachment URIs as second element.
         */
        public function page_uri_index() {}
        /**
         * Retrieves all of the rewrite rules for pages.
         *
         * @since 1.5.0
         *
         * @return array Page rewrite rules.
         */
        public function page_rewrite_rules() {}
        /**
         * Retrieves date permalink structure, with year, month, and day.
         *
         * The permalink structure for the date, if not set already depends on the
         * permalink structure. It can be one of three formats. The first is year,
         * month, day; the second is day, month, year; and the last format is month,
         * day, year. These are matched against the permalink structure for which
         * one is used. If none matches, then the default will be used, which is
         * year, month, day.
         *
         * Prevents post ID and date permalinks from overlapping. In the case of
         * post_id, the date permalink will be prepended with front permalink with
         * 'date/' before the actual permalink to form the complete date permalink
         * structure.
         *
         * @since 1.5.0
         *
         * @return string|false False on no permalink structure. Date permalink structure.
         */
        public function get_date_permastruct() {}
        /**
         * Retrieves the year permalink structure without month and day.
         *
         * Gets the date permalink structure and strips out the month and day
         * permalink structures.
         *
         * @since 1.5.0
         *
         * @return false|string False on failure. Year structure on success.
         */
        public function get_year_permastruct() {}
        /**
         * Retrieves the month permalink structure without day and with year.
         *
         * Gets the date permalink structure and strips out the day permalink
         * structures. Keeps the year permalink structure.
         *
         * @since 1.5.0
         *
         * @return false|string False on failure. Year/Month structure on success.
         */
        public function get_month_permastruct() {}
        /**
         * Retrieves the day permalink structure with month and year.
         *
         * Keeps date permalink structure with all year, month, and day.
         *
         * @since 1.5.0
         *
         * @return string|false False on failure. Year/Month/Day structure on success.
         */
        public function get_day_permastruct() {}
        /**
         * Retrieves the permalink structure for categories.
         *
         * If the category_base property has no value, then the category structure
         * will have the front property value, followed by 'category', and finally
         * '%category%'. If it does, then the root property will be used, along with
         * the category_base property value.
         *
         * @since 1.5.0
         *
         * @return string|false False on failure. Category permalink structure.
         */
        public function get_category_permastruct() {}
        /**
         * Retrieve the permalink structure for tags.
         *
         * If the tag_base property has no value, then the tag structure will have
         * the front property value, followed by 'tag', and finally '%tag%'. If it
         * does, then the root property will be used, along with the tag_base
         * property value.
         *
         * @since 2.3.0
         *
         * @return string|false False on failure. Tag permalink structure.
         */
        public function get_tag_permastruct() {}
        public function get_extra_permastruct($name) {}
        /**
         * Retrieves the author permalink structure.
         *
         * The permalink structure is front property, author base, and finally
         * '/%author%'. Will set the author_structure property and then return it
         * without attempting to set the value again.
         *
         * @since 1.5.0
         *
         * @return string|false False if not found. Permalink structure string.
         */
        public function get_author_permastruct() {}
        /**
         * Retrieves the search permalink structure.
         *
         * The permalink structure is root property, search base, and finally
         * '/%search%'. Will set the search_structure property and then return it
         * without attempting to set the value again.
         *
         * @since 1.5.0
         *
         * @return string|false False if not found. Permalink structure string.
         */
        public function get_search_permastruct() {}
        /**
         * Retrieves the page permalink structure.
         *
         * The permalink structure is root property, and '%pagename%'. Will set the
         * page_structure property and then return it without attempting to set the
         * value again.
         *
         * @since 1.5.0
         *
         * @return string|false False if not found. Permalink structure string.
         */
        public function get_page_permastruct() {}
        /**
         * Retrieves the feed permalink structure.
         *
         * The permalink structure is root property, feed base, and finally
         * '/%feed%'. Will set the feed_structure property and then return it
         * without attempting to set the value again.
         *
         * @since 1.5.0
         *
         * @return string|false False if not found. Permalink structure string.
         */
        public function get_feed_permastruct() {}
        /**
         * Retrieves the comment feed permalink structure.
         *
         * The permalink structure is root property, comment base property, feed
         * base and finally '/%feed%'. Will set the comment_feed_structure property
         * and then return it without attempting to set the value again.
         *
         * @since 1.5.0
         *
         * @return string|false False if not found. Permalink structure string.
         */
        public function get_comment_feed_permastruct() {}
        public function add_rewrite_tag($tag, $regex, $query) {}
        public function remove_rewrite_tag($tag) {}
        public function generate_rewrite_rules($permalink_structure, $ep_mask = EP_NONE, $paged = true, $feed = true, $forcomments = false, $walk_dirs = true, $endpoints = true) {}
        public function generate_rewrite_rule($permalink_structure, $walk_dirs = false) {}
        /**
         * Filters the full set of generated rewrite rules.
         *
         * @since 1.5.0
         *
         * @param array $this->rules The compiled array of rewrite rules.
         */
        public function rewrite_rules() {}
        /**
         * Retrieves the rewrite rules.
         *
         * The difference between this method and WP_Rewrite::rewrite_rules() is that
         * this method stores the rewrite rules in the 'rewrite_rules' option and retrieves
         * it. This prevents having to process all of the permalinks to get the rewrite rules
         * in the form of caching.
         *
         * @since 1.5.0
         *
         * @return array Rewrite rules.
         */
        public function wp_rewrite_rules() {}
        /**
         * Filters the list of rewrite rules formatted for output to an .htaccess file.
         *
         * @since 1.5.0
         * @deprecated 1.5.0 Use the mod_rewrite_rules filter instead.
         *
         * @param string $rules mod_rewrite Rewrite rules formatted for .htaccess.
         */
        public function mod_rewrite_rules() {}
/**
 * Filters the list of rewrite rules formatted for output to a web.config.
 *
 * @since 2.8.0
 *
 * @param string $rules Rewrite rules formatted for IIS web.config.
 */
        public function iis7_url_rewrite_rules(/**
 * Filters the list of rewrite rules formatted for output to a web.config.
 *
 * @since 2.8.0
 *
 * @param string $rules Rewrite rules formatted for IIS web.config.
 */
$add_parent_tags = false) {}
        public function add_rule($regex, $query, $after = 'bottom') {}
        public function add_external_rule($regex, $query) {}
        public function add_endpoint($name, $places, $query_var = true) {}
        public function add_permastruct($name, $struct, $args = array( )) {}
        public function remove_permastruct($name) {}
/**
 * Filters whether a "hard" rewrite rule flush should be performed when requested.
 *
 * A "hard" flush updates .htaccess (Apache) or web.config (IIS).
 *
 * @since 3.7.0
 *
 * @param bool $hard Whether to flush rewrite rules "hard". Default true.
 */
        public function flush_rules(/**
 * Filters whether a "hard" rewrite rule flush should be performed when requested.
 *
 * A "hard" flush updates .htaccess (Apache) or web.config (IIS).
 *
 * @since 3.7.0
 *
 * @param bool $hard Whether to flush rewrite rules "hard". Default true.
 */
$hard = true) {}
        /**
         * Sets up the object's properties.
         *
         * The 'use_verbose_page_rules' object property will be set to true if the
         * permalink structure begins with one of the following: '%postname%', '%category%',
         * '%tag%', or '%author%'.
         *
         * @since 1.5.0
         */
        public function init() {}
/**
 * Fires after the permalink structure is updated.
 *
 * @since 2.8.0
 *
 * @param string $old_permalink_structure The previous permalink structure.
 * @param string $permalink_structure     The new permalink structure.
 */
        public function set_permalink_structure(/**
 * Fires after the permalink structure is updated.
 *
 * @since 2.8.0
 *
 * @param string $old_permalink_structure The previous permalink structure.
 * @param string $permalink_structure     The new permalink structure.
 */
$permalink_structure) {}
        public function set_category_base($category_base) {}
        public function set_tag_base($tag_base) {}
        /**
         * Constructor - Calls init(), which runs setup.
         *
         * @since 1.5.0
         */
        public function __construct() {}
    }

    /**
     * Core class used to implement HTTP API proxy support.
     *
     * There are caveats to proxy support. It requires that defines be made in the wp-config.php file to
     * enable proxy support. There are also a few filters that plugins can hook into for some of the
     * constants.
     *
     * Please note that only BASIC authentication is supported by most transports.
     * cURL MAY support more methods (such as NTLM authentication) depending on your environment.
     *
     * The constants are as follows:
     * <ol>
     * <li>WP_PROXY_HOST - Enable proxy support and host for connecting.</li>
     * <li>WP_PROXY_PORT - Proxy port for connection. No default, must be defined.</li>
     * <li>WP_PROXY_USERNAME - Proxy username, if it requires authentication.</li>
     * <li>WP_PROXY_PASSWORD - Proxy password, if it requires authentication.</li>
     * <li>WP_PROXY_BYPASS_HOSTS - Will prevent the hosts in this list from going through the proxy.
     * You do not need to have localhost and the site host in this list, because they will not be passed
     * through the proxy. The list should be presented in a comma separated list, wildcards using * are supported, eg. *.wordpress.org</li>
     * </ol>
     *
     * An example can be as seen below.
     *
     *     define('WP_PROXY_HOST', '192.168.84.101');
     *     define('WP_PROXY_PORT', '8080');
     *     define('WP_PROXY_BYPASS_HOSTS', 'localhost, www.example.com, *.wordpress.org');
     *
     * @link https://core.trac.wordpress.org/ticket/4011 Proxy support ticket in WordPress.
     * @link https://core.trac.wordpress.org/ticket/14636 Allow wildcard domains in WP_PROXY_BYPASS_HOSTS
     *
     * @since 2.8.0
     */
    class WP_HTTP_Proxy {
        /**
         * Whether proxy connection should be used.
         *
         * @since 2.8.0
         *
         * @use WP_PROXY_HOST
         * @use WP_PROXY_PORT
         *
         * @return bool
         */
        public function is_enabled() {}
        /**
         * Whether authentication should be used.
         *
         * @since 2.8.0
         *
         * @use WP_PROXY_USERNAME
         * @use WP_PROXY_PASSWORD
         *
         * @return bool
         */
        public function use_authentication() {}
        /**
         * Retrieve the host for the proxy server.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function host() {}
        /**
         * Retrieve the port for the proxy server.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function port() {}
        /**
         * Retrieve the username for proxy authentication.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function username() {}
        /**
         * Retrieve the password for proxy authentication.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function password() {}
        /**
         * Retrieve authentication string for proxy authentication.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function authentication() {}
        /**
         * Retrieve header string for proxy authentication.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function authentication_header() {}
        public function send_through_proxy($uri) {}
    }

    /**
     * Core class for fetching remote files and reading local files with SimplePie.
     *
     * @since 2.8.0
     *
     * @see SimplePie_File
     */
    class WP_SimplePie_File extends \simplepie_file {
        public function __construct($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false) {}
    }

    /**
     * Core class that implements an object cache.
     *
     * The WordPress Object Cache is used to save on trips to the database. The
     * Object Cache stores all of the cache data to memory and makes the cache
     * contents available by using a key, which is used to name and later retrieve
     * the cache contents.
     *
     * The Object Cache can be replaced by other caching mechanisms by placing files
     * in the wp-content folder which is looked at in wp-settings. If that file
     * exists, then this file will not be included.
     *
     * @since 2.0.0
     */
    class WP_Object_Cache {
        /**
         * Holds the cached objects.
         *
         * @since 2.0.0
         * @var array
         */
        private $cache;
        /**
         * The amount of times the cache data was already stored in the cache.
         *
         * @since 2.5.0
         * @var int
         */
        public $cache_hits;
        /**
         * Amount of times the cache did not have the request in cache.
         *
         * @since 2.0.0
         * @var int
         */
        public $cache_misses;
        /**
         * List of global cache groups.
         *
         * @since 3.0.0
         * @var array
         */
        protected $global_groups;
        /**
         * The blog prefix to prepend to keys in non-global groups.
         *
         * @since 3.5.0
         * @var int
         */
        private $blog_prefix;
        /**
         * Holds the value of is_multisite().
         *
         * @since 3.5.0
         * @var bool
         */
        private $multisite;

        public function __get($name) {}
        public function __set($name, $value) {}
        public function __isset($name) {}
        public function __unset($name) {}
        public function add($key, $data, $group = 'default', $expire = 0) {}
        public function add_global_groups($groups) {}
        public function decr($key, $offset = 1, $group = 'default') {}
        public function delete($key, $group = 'default', $deprecated = false) {}
        /**
         * Clears the object cache of all data.
         *
         * @since 2.0.0
         *
         * @return true Always returns true.
         */
        public function flush() {}
        public function get($key, $group = 'default', $force = false, $found = null) {}
        public function incr($key, $offset = 1, $group = 'default') {}
        public function replace($key, $data, $group = 'default', $expire = 0) {}
        /**
         * Resets cache keys.
         *
         * @since 3.0.0
         *
         * @deprecated 3.5.0 Use switch_to_blog()
         * @see switch_to_blog()
         */
        public function reset() {}
        public function set($key, $data, $group = 'default', $expire = 0) {}
        /**
         * Echoes the stats of the caching.
         *
         * Gives the cache hits, and cache misses. Also prints every cached group,
         * key and the data.
         *
         * @since 2.0.0
         */
        public function stats() {}
        public function switch_to_blog($blog_id) {}
        protected function _exists($key, $group) {}
        /**
         * Sets up object properties; PHP 5 style constructor.
         *
         * @since 2.0.8
         */
        public function __construct() {}
        /**
         * Saves the object cache before object is completely destroyed.
         *
         * Called upon object destruction, which should be when PHP ends.
         *
         * @since 2.0.8
         *
         * @return true Always returns true.
         */
        public function __destruct() {}
    }

    /**
     * Customize Manager class.
     *
     * Bootstraps the Customize experience on the server-side.
     *
     * Sets up the theme-switching process if a theme other than the active one is
     * being previewed and customized.
     *
     * Serves as a factory for Customize Controls and Settings, and
     * instantiates default Customize Controls and Settings.
     *
     * @since 3.4.0
     */
    final class WP_Customize_Manager {
        /**
         * An instance of the theme being previewed.
         *
         * @since 3.4.0
         * @var WP_Theme
         */
        protected $theme;
        /**
         * The directory name of the previously active theme (within the theme_root).
         *
         * @since 3.4.0
         * @var string
         */
        protected $original_stylesheet;
        /**
         * Whether this is a Customizer pageload.
         *
         * @since 3.4.0
         * @var bool
         */
        protected $previewing;
        /**
         * Methods and properties dealing with managing widgets in the Customizer.
         *
         * @since 3.9.0
         * @var WP_Customize_Widgets
         */
        public $widgets;
        /**
         * Methods and properties dealing with managing nav menus in the Customizer.
         *
         * @since 4.3.0
         * @var WP_Customize_Nav_Menus
         */
        public $nav_menus;
        /**
         * Methods and properties dealing with selective refresh in the Customizer preview.
         *
         * @since 4.5.0
         * @var WP_Customize_Selective_Refresh
         */
        public $selective_refresh;
        /**
         * Registered instances of WP_Customize_Setting.
         *
         * @since 3.4.0
         * @var array
         */
        protected $settings;
        /**
         * Sorted top-level instances of WP_Customize_Panel and WP_Customize_Section.
         *
         * @since 4.0.0
         * @var array
         */
        protected $containers;
        /**
         * Registered instances of WP_Customize_Panel.
         *
         * @since 4.0.0
         * @var array
         */
        protected $panels;
        /**
         * List of core components.
         *
         * @since 4.5.0
         * @var array
         */
        protected $components;
        /**
         * Registered instances of WP_Customize_Section.
         *
         * @since 3.4.0
         * @var array
         */
        protected $sections;
        /**
         * Registered instances of WP_Customize_Control.
         *
         * @since 3.4.0
         * @var array
         */
        protected $controls;
        /**
         * Panel types that may be rendered from JS templates.
         *
         * @since 4.3.0
         * @var array
         */
        protected $registered_panel_types;
        /**
         * Section types that may be rendered from JS templates.
         *
         * @since 4.3.0
         * @var array
         */
        protected $registered_section_types;
        /**
         * Control types that may be rendered from JS templates.
         *
         * @since 4.1.0
         * @var array
         */
        protected $registered_control_types;
        /**
         * Initial URL being previewed.
         *
         * @since 4.4.0
         * @var string
         */
        protected $preview_url;
        /**
         * URL to link the user to when closing the Customizer.
         *
         * @since 4.4.0
         * @var string
         */
        protected $return_url;
        /**
         * Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.
         *
         * @since 4.4.0
         * @var array
         */
        protected $autofocus;
        /**
         * Messenger channel.
         *
         * @since 4.7.0
         * @var string
         */
        protected $messenger_channel;
        /**
         * Whether the autosave revision of the changeset should be loaded.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $autosaved;
        /**
         * Whether the changeset branching is allowed.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $branching;
        /**
         * Whether settings should be previewed.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $settings_previewed;
        /**
         * Whether a starter content changeset was saved.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $saved_starter_content_changeset;
        /**
         * Unsanitized values for Customize Settings parsed from $_POST['customized'].
         *
         * @var array
         */
        private $_post_values;
        /**
         * Changeset UUID.
         *
         * @since 4.7.0
         * @var string
         */
        private $_changeset_uuid;
        /**
         * Changeset post ID.
         *
         * @since 4.7.0
         * @var int|false
         */
        private $_changeset_post_id;
        /**
         * Changeset data loaded from a customize_changeset post.
         *
         * @since 4.7.0
         * @var array
         */
        private $_changeset_data;
        /**
         * Starter content setting IDs.
         *
         * @since 4.7.0
         * @var array
         */
        protected $pending_starter_content_settings_ids;
        /**
         * Whether a changeset revision should be made.
         *
         * @since 4.7.0
         * @var bool
         */
        protected $store_changeset_revision;

/**
 * Filters the core Customizer components to load.
 *
 * This allows Core components to be excluded from being instantiated by
 * filtering them out of the array. Note that this filter generally runs
 * during the {@see 'plugins_loaded'} action, so it cannot be added
 * in a theme.
 *
 * @since 4.4.0
 *
 * @see WP_Customize_Manager::__construct()
 *
 * @param string[]             $components Array of core components to load.
 * @param WP_Customize_Manager $this       WP_Customize_Manager instance.
 */
        public function __construct(/**
 * Filters the core Customizer components to load.
 *
 * This allows Core components to be excluded from being instantiated by
 * filtering them out of the array. Note that this filter generally runs
 * during the {@see 'plugins_loaded'} action, so it cannot be added
 * in a theme.
 *
 * @since 4.4.0
 *
 * @see WP_Customize_Manager::__construct()
 *
 * @param string[]             $components Array of core components to load.
 * @param WP_Customize_Manager $this       WP_Customize_Manager instance.
 */
$args = array( )) {}
        public function doing_ajax($action = null) {}
        protected function wp_die($ajax_message, $message = null) {}
        /**
         * Return the Ajax wp_die() handler if it's a customized request.
         *
         * @since 3.4.0
         * @deprecated 4.7.0
         *
         * @return callable Die handler.
         */
        public function wp_die_handler() {}
        /**
         * Start preview and customize theme.
         *
         * Check if customize query variable exist. Init filters to filter the current theme.
         *
         * @since 3.4.0
         *
         * @global string $pagenow
         */
        public function setup_theme() {}
        /**
         * Establish the loaded changeset.
         *
         * This method runs right at after_setup_theme and applies the 'customize_changeset_branching' filter to determine
         * whether concurrent changesets are allowed. Then if the Customizer is not initialized with a `changeset_uuid` param,
         * this method will determine which UUID should be used. If changeset branching is disabled, then the most saved
         * changeset will be loaded by default. Otherwise, if there are no existing saved changesets or if changeset branching is
         * enabled, then a new UUID will be generated.
         *
         * @since 4.9.0
         * @global string $pagenow
         */
        public function establish_loaded_changeset() {}
        /**
         * Callback to validate a theme once it is loaded
         *
         * @since 3.4.0
         */
        public function after_setup_theme() {}
        /**
         * If the theme to be previewed isn't the active theme, add filter callbacks
         * to swap it out at runtime.
         *
         * @since 3.4.0
         */
        public function start_previewing_theme() {}
        /**
         * Stop previewing the selected theme.
         *
         * Removes filters to change the current theme.
         *
         * @since 3.4.0
         */
        public function stop_previewing_theme() {}
        /**
         * Gets whether settings are or will be previewed.
         *
         * @since 4.9.0
         * @see WP_Customize_Setting::preview()
         *
         * @return bool
         */
        public function settings_previewed() {}
        /**
         * Gets whether data from a changeset's autosaved revision should be loaded if it exists.
         *
         * @since 4.9.0
         * @see WP_Customize_Manager::changeset_data()
         *
         * @return bool Is using autosaved changeset revision.
         */
        public function autosaved() {}
        /**
         * Filters whether or not changeset branching is allowed.
         *
         * By default in core, when changeset branching is not allowed, changesets will operate
         * linearly in that only one saved changeset will exist at a time (with a 'draft' or
         * 'future' status). This makes the Customizer operate in a way that is similar to going to
         * "edit" to one existing post: all users will be making changes to the same post, and autosave
         * revisions will be made for that post.
         *
         * By contrast, when changeset branching is allowed, then the model is like users going
         * to "add new" for a page and each user makes changes independently of each other since
         * they are all operating on their own separate pages, each getting their own separate
         * initial auto-drafts and then once initially saved, autosave revisions on top of that
         * user's specific post.
         *
         * Since linear changesets are deemed to be more suitable for the majority of WordPress users,
         * they are the default. For WordPress sites that have heavy site management in the Customizer
         * by multiple users then branching changesets should be enabled by means of this filter.
         *
         * @since 4.9.0
         *
         * @param bool                 $allow_branching Whether branching is allowed. If `false`, the default,
         *                                              then only one saved changeset exists at a time.
         * @param WP_Customize_Manager $wp_customize    Manager instance.
         */
        public function branching() {}
        /**
         * Get the changeset UUID.
         *
         * @since 4.7.0
         * @see WP_Customize_Manager::establish_loaded_changeset()
         *
         * @return string UUID.
         */
        public function changeset_uuid() {}
        /**
         * Get the theme being customized.
         *
         * @since 3.4.0
         *
         * @return WP_Theme
         */
        public function theme() {}
        /**
         * Get the registered settings.
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function settings() {}
        /**
         * Get the registered controls.
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function controls() {}
        /**
         * Get the registered containers.
         *
         * @since 4.0.0
         *
         * @return array
         */
        public function containers() {}
        /**
         * Get the registered sections.
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function sections() {}
        /**
         * Get the registered panels.
         *
         * @since 4.0.0
         *
         * @return array Panels.
         */
        public function panels() {}
        /**
         * Checks if the current theme is active.
         *
         * @since 3.4.0
         *
         * @return bool
         */
        public function is_theme_active() {}
        /**
         * Register styles/scripts and initialize the preview of each setting
         *
         * @since 3.4.0
         */
        public function wp_loaded() {}
        public function wp_redirect_status($status) {}
        public function find_changeset_post_id($uuid) {}
        protected function get_changeset_posts($args = array( )) {}
        /**
         * Dismiss all of the current user's auto-drafts (other than the present one).
         *
         * @since 4.9.0
         * @return int The number of auto-drafts that were dismissed.
         */
        protected function dismiss_user_auto_draft_changesets() {}
        /**
         * Get the changeset post id for the loaded changeset.
         *
         * @since 4.7.0
         *
         * @return int|null Post ID on success or null if there is no post yet saved.
         */
        public function changeset_post_id() {}
        protected function get_changeset_post_data($post_id) {}
        /**
         * Get changeset data.
         *
         * @since 4.7.0
         * @since 4.9.0 This will return the changeset's data with a user's autosave revision merged on top, if one exists and $autosaved is true.
         *
         * @return array Changeset data.
         */
        public function changeset_data() {}
        function import_theme_starter_content($starter_content = array( )) {}
        protected function prepare_starter_content_attachments($attachments) {}
        /**
         * Save starter content changeset.
         *
         * @since 4.7.0
         */
        public function _save_starter_content_changeset() {}
        public function unsanitized_post_values($args = array( )) {}
        public function post_value($setting, $default = null) {}
/**
 * Announce when any setting's unsanitized post value has been set.
 *
 * Fires when the WP_Customize_Manager::set_post_value() method is called.
 *
 * This is useful for `WP_Customize_Setting` instances to watch
 * in order to update a cached previewed value.
 *
 * @since 4.4.0
 *
 * @param string               $setting_id Setting ID.
 * @param mixed                $value      Unsanitized setting post value.
 * @param WP_Customize_Manager $this       WP_Customize_Manager instance.
 */
        public function set_post_value(/**
 * Announce when any setting's unsanitized post value has been set.
 *
 * Fires when the WP_Customize_Manager::set_post_value() method is called.
 *
 * This is useful for `WP_Customize_Setting` instances to watch
 * in order to update a cached previewed value.
 *
 * @since 4.4.0
 *
 * @param string               $setting_id Setting ID.
 * @param mixed                $value      Unsanitized setting post value.
 * @param WP_Customize_Manager $this       WP_Customize_Manager instance.
 */
$setting_id, /**
 * Announce when any setting's unsanitized post value has been set.
 *
 * Fires when the WP_Customize_Manager::set_post_value() method is called.
 *
 * This is useful for `WP_Customize_Setting` instances to watch
 * in order to update a cached previewed value.
 *
 * @since 4.4.0
 *
 * @param string               $setting_id Setting ID.
 * @param mixed                $value      Unsanitized setting post value.
 * @param WP_Customize_Manager $this       WP_Customize_Manager instance.
 */
$value) {}
        /**
         * Fires once the Customizer preview has initialized and JavaScript
         * settings have been printed.
         *
         * @since 3.4.0
         *
         * @param WP_Customize_Manager $this WP_Customize_Manager instance.
         */
        public function customize_preview_init() {}
        public function filter_iframe_security_headers($headers) {}
        public function add_state_query_params($url) {}
        /**
         * Prevent sending a 404 status when returning the response for the customize
         * preview, since it causes the jQuery Ajax to fail. Send 200 instead.
         *
         * @since 4.0.0
         * @deprecated 4.7.0
         */
        public function customize_preview_override_404_status() {}
        /**
         * Print base element for preview frame.
         *
         * @since 3.4.0
         * @deprecated 4.7.0
         */
        public function customize_preview_base() {}
        /**
         * Print a workaround to handle HTML5 tags in IE < 9.
         *
         * @since 3.4.0
         * @deprecated 4.7.0 Customizer no longer supports IE8, so all supported browsers recognize HTML5.
         */
        public function customize_preview_html5() {}
        /**
         * Print CSS for loading indicators for the Customizer preview.
         *
         * @since 4.2.0
         */
        public function customize_preview_loading_style() {}
        /**
         * Remove customize_messenger_channel query parameter from the preview window when it is not in an iframe.
         *
         * This ensures that the admin bar will be shown. It also ensures that link navigation will
         * work as expected since the parent frame is not being sent the URL to navigate to.
         *
         * @since 4.7.0
         */
        public function remove_frameless_preview_messenger_channel() {}
        /**
         * Print JavaScript settings for preview frame.
         *
         * @since 3.4.0
         */
        public function customize_preview_settings() {}
        /**
         * Prints a signature so we can ensure the Customizer was properly executed.
         *
         * @since 3.4.0
         * @deprecated 4.7.0
         */
        public function customize_preview_signature() {}
        public function remove_preview_signature($return = null) {}
        /**
         * Is it a theme preview?
         *
         * @since 3.4.0
         *
         * @return bool True if it's a preview, false if not.
         */
        public function is_preview() {}
        /**
         * Retrieve the template name of the previewed theme.
         *
         * @since 3.4.0
         *
         * @return string Template name.
         */
        public function get_template() {}
        /**
         * Retrieve the stylesheet name of the previewed theme.
         *
         * @since 3.4.0
         *
         * @return string Stylesheet name.
         */
        public function get_stylesheet() {}
        /**
         * Retrieve the template root of the previewed theme.
         *
         * @since 3.4.0
         *
         * @return string Theme root.
         */
        public function get_template_root() {}
        /**
         * Retrieve the stylesheet root of the previewed theme.
         *
         * @since 3.4.0
         *
         * @return string Theme root.
         */
        public function get_stylesheet_root() {}
        public function current_theme($current_theme) {}
/** This filter is documented in wp-includes/class-wp-customize-setting.php */
        public function validate_setting_values(/** This filter is documented in wp-includes/class-wp-customize-setting.php */
$setting_values, /** This filter is documented in wp-includes/class-wp-customize-setting.php */
$options = array( )) {}
        public function prepare_setting_validity_for_js($validity) {}
        /**
         * Handle customize_save WP Ajax request to save/update a changeset.
         *
         * @since 3.4.0
         * @since 4.7.0 The semantics of this method have changed to update a changeset, optionally to also change the status and other attributes.
         */
        public function save() {}
        function save_changeset_post($args = array( )) {}
        public function preserve_insert_changeset_post_content($data, $postarr, $unsanitized_postarr) {}
/** This action is documented in wp-includes/post.php */
        public function trash_changeset_post(/** This action is documented in wp-includes/post.php */
$post) {}
        /**
         * Handle request to trash a changeset.
         *
         * @since 4.9.0
         */
        public function handle_changeset_trash_request() {}
        public function grant_edit_post_capability_for_changeset($caps, $cap, $user_id, $args) {}
        public function set_changeset_lock($changeset_post_id, $take_over = false) {}
        public function refresh_changeset_lock($changeset_post_id) {}
        public function add_customize_screen_to_heartbeat_settings($settings) {}
        protected function get_lock_user_data($user_id) {}
        public function check_changeset_lock_with_heartbeat($response, $data, $screen_id) {}
        /**
         * Removes changeset lock when take over request is sent via Ajax.
         *
         * @since 4.9.0
         */
        public function handle_override_changeset_lock_request() {}
        public function _filter_revision_post_has_changed($post_has_changed, $last_revision, $post) {}
/**
 * Fires after Customize settings have been saved.
 *
 * @since 3.6.0
 *
 * @param WP_Customize_Manager $manager WP_Customize_Manager instance.
 */
        public function _publish_changeset_values(/**
 * Fires after Customize settings have been saved.
 *
 * @since 3.6.0
 *
 * @param WP_Customize_Manager $manager WP_Customize_Manager instance.
 */
$changeset_post_id) {}
        protected function update_stashed_theme_mod_settings($inactive_theme_mod_settings) {}
        /**
         * Refresh nonces for the current preview.
         *
         * @since 4.2.0
         */
        public function refresh_nonces() {}
        /**
         * Delete a given auto-draft changeset or the autosave revision for a given changeset or delete changeset lock.
         *
         * @since 4.9.0
         */
        public function handle_dismiss_autosave_or_lock_request() {}
/** This filter is documented in wp-includes/class-wp-customize-manager.php */
        public function add_setting(/** This filter is documented in wp-includes/class-wp-customize-manager.php */
$id, /** This filter is documented in wp-includes/class-wp-customize-manager.php */
$args = array( )) {}
/**
 * Allow non-statically created settings to be constructed with custom WP_Customize_Setting subclass.
 *
 * @since 4.2.0
 *
 * @param string $setting_class WP_Customize_Setting or a subclass.
 * @param string $setting_id    ID for dynamic setting, usually coming from `$_POST['customized']`.
 * @param array  $setting_args  WP_Customize_Setting or a subclass.
 */
        public function add_dynamic_settings(/**
 * Allow non-statically created settings to be constructed with custom WP_Customize_Setting subclass.
 *
 * @since 4.2.0
 *
 * @param string $setting_class WP_Customize_Setting or a subclass.
 * @param string $setting_id    ID for dynamic setting, usually coming from `$_POST['customized']`.
 * @param array  $setting_args  WP_Customize_Setting or a subclass.
 */
$setting_ids) {}
        public function get_setting($id) {}
        public function remove_setting($id) {}
        public function add_panel($id, $args = array( )) {}
        public function get_panel($id) {}
        public function remove_panel($id) {}
        public function register_panel_type($panel) {}
        /**
         * Render JS templates for all registered panel types.
         *
         * @since 4.3.0
         */
        public function render_panel_templates() {}
        public function add_section($id, $args = array( )) {}
        public function get_section($id) {}
        public function remove_section($id) {}
        public function register_section_type($section) {}
        /**
         * Render JS templates for all registered section types.
         *
         * @since 4.3.0
         */
        public function render_section_templates() {}
        public function add_control($id, $args = array( )) {}
        public function get_control($id) {}
        public function remove_control($id) {}
        public function register_control_type($control) {}
        /**
         * Render JS templates for all registered control types.
         *
         * @since 4.1.0
         */
        public function render_control_templates() {}
        protected function _cmp_priority($a, $b) {}
        /**
         * Prepare panels, sections, and controls.
         *
         * For each, check if required related components exist,
         * whether the user has the necessary capabilities,
         * and sort by priority.
         *
         * @since 3.4.0
         */
        public function prepare_controls() {}
        /**
         * Enqueue scripts for customize controls.
         *
         * @since 3.4.0
         */
        public function enqueue_control_scripts() {}
        /**
         * Determine whether the user agent is iOS.
         *
         * @since 4.4.0
         *
         * @return bool Whether the user agent is iOS.
         */
        public function is_ios() {}
        /**
         * Get the template string for the Customizer pane document title.
         *
         * @since 4.4.0
         *
         * @return string The template string for the document title.
         */
        public function get_document_title_template() {}
        public function set_preview_url($preview_url) {}
        /**
         * Get the initial URL to be previewed.
         *
         * @since 4.4.0
         *
         * @return string URL being previewed.
         */
        public function get_preview_url() {}
        /**
         * Determines whether the admin and the frontend are on different domains.
         *
         * @since 4.7.0
         *
         * @return bool Whether cross-domain.
         */
        public function is_cross_domain() {}
        /**
         * Filters the list of URLs allowed to be clicked and followed in the Customizer preview.
         *
         * @since 3.4.0
         *
         * @param string[] $allowed_urls An array of allowed URLs.
         */
        public function get_allowed_urls() {}
        /**
         * Get messenger channel.
         *
         * @since 4.7.0
         *
         * @return string Messenger channel.
         */
        public function get_messenger_channel() {}
        public function set_return_url($return_url) {}
        /**
         * Get URL to link the user to when closing the Customizer.
         *
         * @since 4.4.0
         *
         * @return string URL for link to close Customizer.
         */
        public function get_return_url() {}
        public function set_autofocus($autofocus) {}
        /**
         * Get the autofocused constructs.
         *
         * @since 4.4.0
         *
         * @return array {
         *     Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.
         *
         *     @type string [$control]  ID for control to be autofocused.
         *     @type string [$section]  ID for section to be autofocused.
         *     @type string [$panel]    ID for panel to be autofocused.
         * }
         */
        public function get_autofocus() {}
        /**
         * Filters nonces for Customizer.
         *
         * @since 4.2.0
         *
         * @param string[]             $nonces Array of refreshed nonces for save and
         *                                     preview actions.
         * @param WP_Customize_Manager $this   WP_Customize_Manager instance.
         */
        public function get_nonces() {}
        /**
         * Print JavaScript settings for parent window.
         *
         * @since 4.4.0
         */
        public function customize_pane_settings() {}
        /**
         * Filters the available devices to allow previewing in the Customizer.
         *
         * @since 4.5.0
         *
         * @see WP_Customize_Manager::get_previewable_devices()
         *
         * @param array $devices List of devices with labels and default setting.
         */
        public function get_previewable_devices() {}
        /**
         * Register some default controls.
         *
         * @since 3.4.0
         */
        public function register_controls() {}
        /**
         * Return whether there are published pages.
         *
         * Used as active callback for static front page section and controls.
         *
         * @since 4.7.0
         *
         * @returns bool Whether there are published (or to be published) pages.
         */
        public function has_published_pages() {}
        /**
         * Add settings from the POST data that were not added with code, e.g. dynamically-created settings for Widgets
         *
         * @since 4.2.0
         *
         * @see add_dynamic_settings()
         */
        public function register_dynamic_settings() {}
        /**
         * Load themes into the theme browsing/installation UI.
         *
         * @since 4.9.0
         */
        public function handle_load_themes_request() {}
        public function _sanitize_header_textcolor($color) {}
        public function _sanitize_background_setting($value, $setting) {}
        public function export_header_video_settings($response, $selective_refresh, $partials) {}
        public function _validate_header_video($validity, $value) {}
        public function _validate_external_header_video($validity, $value) {}
        public function _sanitize_external_header_video($value) {}
        /**
         * Callback for rendering the custom logo, used in the custom_logo partial.
         *
         * This method exists because the partial object and context data are passed
         * into a partial's render_callback so we cannot use get_custom_logo() as
         * the render_callback directly since it expects a blog ID as the first
         * argument. When WP no longer supports PHP 5.3, this method can be removed
         * in favor of an anonymous function.
         *
         * @see WP_Customize_Manager::register_controls()
         *
         * @since 4.5.0
         *
         * @return string Custom logo.
         */
        public function _render_custom_logo_partial() {}
    }

    /**
     * Structure that store common Atom Feed Properties
     *
     * @package AtomLib
     */
    class AtomFeed {
        /**
         * Stores Links
         * @var array
         * @access public
         */
        public $links;
        /**
         * Stores Categories
         * @var array
         * @access public
         */
        public $categories;
        /**
         * Stores Entries
         *
         * @var array
         * @access public
         */
        public $entries;

    }

    /**
     * Structure that store Atom Entry Properties
     *
     * @package AtomLib
     */
    class AtomEntry {
        /**
         * Stores Links
         * @var array
         * @access public
         */
        public $links;
        /**
         * Stores Categories
         * @var array
         * @access public
         */
        public $categories;

    }

    /**
     * AtomLib Atom Parser API
     *
     * @package AtomLib
     */
    class AtomParser {
        public $NS;
        public $ATOM_CONTENT_ELEMENTS;
        public $ATOM_SIMPLE_ELEMENTS;
        public $debug;
        public $depth;
        public $indent;
        public $in_content;
        public $ns_contexts;
        public $ns_decls;
        public $content_ns_decls;
        public $content_ns_contexts;
        public $is_xhtml;
        public $is_html;
        public $is_text;
        public $skipped_div;
        public $FILE;
        public $feed;
        public $current;

        /**
         * PHP5 constructor.
         */
        function __construct() {}
        /**
         * PHP4 constructor.
         */
        public function AtomParser() {}
        public static function map_attrs($k, $v) {}
        public static function map_xmlns($p, $n) {}
        function _p($msg) {}
        function error_handler($log_level, $log_text, $error_file, $error_line) {}
        function parse() {}
        function start_element($parser, $name, $attrs) {}
        function end_element($parser, $name) {}
        function start_ns($parser, $prefix, $uri) {}
        function end_ns($parser, $prefix) {}
        function cdata($parser, $data) {}
        function _default($parser, $data) {}
        function ns_to_prefix($qname, $attr = false) {}
        function is_declared_content_ns($new_mapping) {}
        function xml_escape($string) {}
    }

    /**
     * Table renderer to display the diff lines.
     *
     * @since 2.6.0
     * @uses Text_Diff_Renderer Extends
     */
    class WP_Text_Diff_Renderer_Table extends \text_diff_renderer {
        /**
         * @see Text_Diff_Renderer::_leading_context_lines
         * @var int
         * @since 2.6.0
         */
        public $_leading_context_lines;
        /**
         * @see Text_Diff_Renderer::_trailing_context_lines
         * @var int
         * @since 2.6.0
         */
        public $_trailing_context_lines;
        /**
         * Threshold for when a diff should be saved or omitted.
         *
         * @var float
         * @since 2.6.0
         */
        protected $_diff_threshold;
        /**
         * Inline display helper object name.
         *
         * @var string
         * @since 2.6.0
         */
        protected $inline_diff_renderer;
        /**
         * Should we show the split view or not
         *
         * @var string
         * @since 3.6.0
         */
        protected $_show_split_view;
        protected $compat_fields;
        /**
         * Caches the output of count_chars() in compute_string_distance()
         *
         * @var array
         * @since 5.0.0
         */
        protected $count_cache;
        /**
         * Caches the difference calculation in compute_string_distance()
         *
         * @var array
         * @since 5.0.0
         */
        protected $difference_cache;

        public function __construct($params = array( )) {}
        public function _startBlock($header) {}
        public function _lines($lines, $prefix = ' ') {}
        public function addedLine($line) {}
        public function deletedLine($line) {}
        public function contextLine($line) {}
        /**
         * @ignore
         *
         * @return string
         */
        public function emptyLine() {}
/**
 * Contextually filters a diffed line.
 *
 * Filters TextDiff processing of diffed line. By default, diffs are processed with
 * htmlspecialchars. Use this filter to remove or change the processing. Passes a context
 * indicating if the line is added, deleted or unchanged.
 *
 * @since 4.1.0
 *
 * @param String $processed_line The processed diffed line.
 * @param String $line           The unprocessed diffed line.
 * @param string null            The line context. Values are 'added', 'deleted' or 'unchanged'.
 */
        public function _added(/**
 * Contextually filters a diffed line.
 *
 * Filters TextDiff processing of diffed line. By default, diffs are processed with
 * htmlspecialchars. Use this filter to remove or change the processing. Passes a context
 * indicating if the line is added, deleted or unchanged.
 *
 * @since 4.1.0
 *
 * @param String $processed_line The processed diffed line.
 * @param String $line           The unprocessed diffed line.
 * @param string null            The line context. Values are 'added', 'deleted' or 'unchanged'.
 */
$lines, /**
 * Contextually filters a diffed line.
 *
 * Filters TextDiff processing of diffed line. By default, diffs are processed with
 * htmlspecialchars. Use this filter to remove or change the processing. Passes a context
 * indicating if the line is added, deleted or unchanged.
 *
 * @since 4.1.0
 *
 * @param String $processed_line The processed diffed line.
 * @param String $line           The unprocessed diffed line.
 * @param string null            The line context. Values are 'added', 'deleted' or 'unchanged'.
 */
$encode = true) {}
/** This filter is documented in wp-includes/wp-diff.php */
        public function _deleted(/** This filter is documented in wp-includes/wp-diff.php */
$lines, /** This filter is documented in wp-includes/wp-diff.php */
$encode = true) {}
/** This filter is documented in wp-includes/wp-diff.php */
        public function _context(/** This filter is documented in wp-includes/wp-diff.php */
$lines, /** This filter is documented in wp-includes/wp-diff.php */
$encode = true) {}
        public function _changed($orig, $final) {}
        public function interleave_changed_lines($orig, $final) {}
        public function compute_string_distance($string1, $string2) {}
        public function difference($a, $b) {}
        public function __get($name) {}
        public function __set($name, $value) {}
        public function __isset($name) {}
        public function __unset($name) {}
    }

    /**
     * WordPress XMLRPC server implementation.
     *
     * Implements compatibility for Blogger API, MetaWeblog API, MovableType, and
     * pingback. Additional WordPress API for managing comments, pages, posts,
     * options, etc.
     *
     * As of WordPress 3.5.0, XML-RPC is enabled by default. It can be disabled
     * via the {@see 'xmlrpc_enabled'} filter found in wp_xmlrpc_server::login().
     *
     * @since 1.5.0
     *
     * @see IXR_Server
     */
    class wp_xmlrpc_server extends \ixr_server {
        /**
         * Methods.
         *
         * @var array
         */
        public $methods;
        /**
         * Blog options.
         *
         * @var array
         */
        public $blog_options;
        /**
         * IXR_Error instance.
         *
         * @var IXR_Error
         */
        public $error;
        /**
         * Flags that the user authentication has failed in this instance of wp_xmlrpc_server.
         *
         * @var bool
         */
        protected $auth_failed;

        /**
         * Registers all of the XMLRPC methods that XMLRPC server understands.
         *
         * Sets up server and method property. Passes XMLRPC
         * methods through the {@see 'xmlrpc_methods'} filter to allow plugins to extend
         * or replace XML-RPC methods.
         *
         * @since 1.5.0
         */
        public function __construct() {}
        public function __call($name, $arguments) {}
        /**
         * Serves the XML-RPC request.
         *
         * @since 2.9.0
         */
        public function serve_request() {}
        /**
         * Test XMLRPC API by saying, "Hello!" to client.
         *
         * @since 1.5.0
         *
         * @return string Hello string response.
         */
        public function sayHello() {}
        public function addTwoNumbers($args) {}
/**
 * Filters the XML-RPC user login error message.
 *
 * @since 3.5.0
 *
 * @param string  $error The XML-RPC error message.
 * @param WP_User $user  WP_User object.
 */
        public function login(/**
 * Filters the XML-RPC user login error message.
 *
 * @since 3.5.0
 *
 * @param string  $error The XML-RPC error message.
 * @param WP_User $user  WP_User object.
 */
$username, /**
 * Filters the XML-RPC user login error message.
 *
 * @since 3.5.0
 *
 * @param string  $error The XML-RPC error message.
 * @param WP_User $user  WP_User object.
 */
$password) {}
        public function login_pass_ok($username, $password) {}
        public function escape($data) {}
        public function get_custom_fields($post_id) {}
        public function set_custom_fields($post_id, $fields) {}
        public function get_term_custom_fields($term_id) {}
        public function set_term_custom_fields($term_id, $fields) {}
        /**
         * Set up blog options property.
         *
         * Passes property through {@see 'xmlrpc_blog_options'} filter.
         *
         * @since 2.6.0
         */
        public function initialise_blog_option_info() {}
/**
 * Fires after the XML-RPC user has been authenticated but before the rest of
 * the method logic begins.
 *
 * All built-in XML-RPC methods use the action xmlrpc_call, with a parameter
 * equal to the method's name, e.g., wp.getUsersBlogs, wp.newPost, etc.
 *
 * @since 2.5.0
 *
 * @param string $name The method name.
 */
        public function wp_getUsersBlogs(/**
 * Fires after the XML-RPC user has been authenticated but before the rest of
 * the method logic begins.
 *
 * All built-in XML-RPC methods use the action xmlrpc_call, with a parameter
 * equal to the method's name, e.g., wp.getUsersBlogs, wp.newPost, etc.
 *
 * @since 2.5.0
 *
 * @param string $name The method name.
 */
$args) {}
        protected function minimum_args($args, $count) {}
/**
 * Filters XML-RPC-prepared data for the given taxonomy.
 *
 * @since 3.4.0
 *
 * @param array       $_taxonomy An array of taxonomy data.
 * @param WP_Taxonomy $taxonomy  Taxonomy object.
 * @param array       $fields    The subset of taxonomy fields to return.
 */
        protected function _prepare_taxonomy(/**
 * Filters XML-RPC-prepared data for the given taxonomy.
 *
 * @since 3.4.0
 *
 * @param array       $_taxonomy An array of taxonomy data.
 * @param WP_Taxonomy $taxonomy  Taxonomy object.
 * @param array       $fields    The subset of taxonomy fields to return.
 */
$taxonomy, /**
 * Filters XML-RPC-prepared data for the given taxonomy.
 *
 * @since 3.4.0
 *
 * @param array       $_taxonomy An array of taxonomy data.
 * @param WP_Taxonomy $taxonomy  Taxonomy object.
 * @param array       $fields    The subset of taxonomy fields to return.
 */
$fields) {}
/**
 * Filters XML-RPC-prepared data for the given term.
 *
 * @since 3.4.0
 *
 * @param array        $_term An array of term data.
 * @param array|object $term  Term object or array.
 */
        protected function _prepare_term(/**
 * Filters XML-RPC-prepared data for the given term.
 *
 * @since 3.4.0
 *
 * @param array        $_term An array of term data.
 * @param array|object $term  Term object or array.
 */
$term) {}
        protected function _convert_date($date) {}
        protected function _convert_date_gmt($date_gmt, $date) {}
/**
 * Filters XML-RPC-prepared date for the given post.
 *
 * @since 3.4.0
 *
 * @param array $_post  An array of modified post data.
 * @param array $post   An array of post data.
 * @param array $fields An array of post fields.
 */
        protected function _prepare_post(/**
 * Filters XML-RPC-prepared date for the given post.
 *
 * @since 3.4.0
 *
 * @param array $_post  An array of modified post data.
 * @param array $post   An array of post data.
 * @param array $fields An array of post fields.
 */
$post, /**
 * Filters XML-RPC-prepared date for the given post.
 *
 * @since 3.4.0
 *
 * @param array $_post  An array of modified post data.
 * @param array $post   An array of post data.
 * @param array $fields An array of post fields.
 */
$fields) {}
/**
 * Filters XML-RPC-prepared date for the given post type.
 *
 * @since 3.4.0
 * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.
 *
 * @param array        $_post_type An array of post type data.
 * @param WP_Post_Type $post_type  Post type object.
 */
        protected function _prepare_post_type(/**
 * Filters XML-RPC-prepared date for the given post type.
 *
 * @since 3.4.0
 * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.
 *
 * @param array        $_post_type An array of post type data.
 * @param WP_Post_Type $post_type  Post type object.
 */
$post_type, /**
 * Filters XML-RPC-prepared date for the given post type.
 *
 * @since 3.4.0
 * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.
 *
 * @param array        $_post_type An array of post type data.
 * @param WP_Post_Type $post_type  Post type object.
 */
$fields) {}
/**
 * Filters XML-RPC-prepared data for the given media item.
 *
 * @since 3.4.0
 *
 * @param array  $_media_item    An array of media item data.
 * @param object $media_item     Media item object.
 * @param string $thumbnail_size Image size.
 */
        protected function _prepare_media_item(/**
 * Filters XML-RPC-prepared data for the given media item.
 *
 * @since 3.4.0
 *
 * @param array  $_media_item    An array of media item data.
 * @param object $media_item     Media item object.
 * @param string $thumbnail_size Image size.
 */
$media_item, /**
 * Filters XML-RPC-prepared data for the given media item.
 *
 * @since 3.4.0
 *
 * @param array  $_media_item    An array of media item data.
 * @param object $media_item     Media item object.
 * @param string $thumbnail_size Image size.
 */
$thumbnail_size = 'thumbnail') {}
/**
 * Filters XML-RPC-prepared data for the given page.
 *
 * @since 3.4.0
 *
 * @param array   $_page An array of page data.
 * @param WP_Post $page  Page object.
 */
        protected function _prepare_page(/**
 * Filters XML-RPC-prepared data for the given page.
 *
 * @since 3.4.0
 *
 * @param array   $_page An array of page data.
 * @param WP_Post $page  Page object.
 */
$page) {}
/**
 * Filters XML-RPC-prepared data for the given comment.
 *
 * @since 3.4.0
 *
 * @param array      $_comment An array of prepared comment data.
 * @param WP_Comment $comment  Comment object.
 */
        protected function _prepare_comment(/**
 * Filters XML-RPC-prepared data for the given comment.
 *
 * @since 3.4.0
 *
 * @param array      $_comment An array of prepared comment data.
 * @param WP_Comment $comment  Comment object.
 */
$comment) {}
/**
 * Filters XML-RPC-prepared data for the given user.
 *
 * @since 3.5.0
 *
 * @param array   $_user  An array of user data.
 * @param WP_User $user   User object.
 * @param array   $fields An array of user fields.
 */
        protected function _prepare_user(/**
 * Filters XML-RPC-prepared data for the given user.
 *
 * @since 3.5.0
 *
 * @param array   $_user  An array of user data.
 * @param WP_User $user   User object.
 * @param array   $fields An array of user fields.
 */
$user, /**
 * Filters XML-RPC-prepared data for the given user.
 *
 * @since 3.5.0
 *
 * @param array   $_user  An array of user data.
 * @param WP_User $user   User object.
 * @param array   $fields An array of user fields.
 */
$fields) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_newPost(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
        private function _is_greater_than_one($count) {}
        private function _toggle_sticky($post_data, $update = false) {}
/**
 * Filters post data array to be inserted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param array $post_data      Parsed array of post data.
 * @param array $content_struct Post data array.
 */
        protected function _insert_post(/**
 * Filters post data array to be inserted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param array $post_data      Parsed array of post data.
 * @param array $content_struct Post data array.
 */
$user, /**
 * Filters post data array to be inserted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param array $post_data      Parsed array of post data.
 * @param array $content_struct Post data array.
 */
$content_struct) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_editPost(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_deletePost(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPost(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPosts(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_newTerm(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_editTerm(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_deleteTerm(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getTerm(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getTerms(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getTaxonomy(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getTaxonomies(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getUser(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getUsers(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getProfile(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_editProfile(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPage(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPages(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_newPage(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/**
 * Fires after a page has been successfully deleted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $page_id ID of the deleted page.
 * @param array $args    An array of arguments to delete the page.
 */
        public function wp_deletePage(/**
 * Fires after a page has been successfully deleted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $page_id ID of the deleted page.
 * @param array $args    An array of arguments to delete the page.
 */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_editPage(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPageList(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getAuthors(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getTags(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/**
 * Fires after a new category has been successfully created via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $cat_id ID of the new category.
 * @param array $args   An array of new category arguments.
 */
        public function wp_newCategory(/**
 * Fires after a new category has been successfully created via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $cat_id ID of the new category.
 * @param array $args   An array of new category arguments.
 */
$args) {}
/**
 * Fires after a category has been successfully deleted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $category_id ID of the deleted category.
 * @param array $args        An array of arguments to delete the category.
 */
        public function wp_deleteCategory(/**
 * Fires after a category has been successfully deleted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $category_id ID of the deleted category.
 * @param array $args        An array of arguments to delete the category.
 */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_suggestCategories(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getComment(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getComments(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/**
 * Fires after a comment has been successfully deleted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $comment_ID ID of the deleted comment.
 * @param array $args       An array of arguments to delete the comment.
 */
        public function wp_deleteComment(/**
 * Fires after a comment has been successfully deleted via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $comment_ID ID of the deleted comment.
 * @param array $args       An array of arguments to delete the comment.
 */
$args) {}
/**
 * Fires after a comment has been successfully updated via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $comment_ID ID of the updated comment.
 * @param array $args       An array of arguments to update the comment.
 */
        public function wp_editComment(/**
 * Fires after a comment has been successfully updated via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $comment_ID ID of the updated comment.
 * @param array $args       An array of arguments to update the comment.
 */
$args) {}
/**
 * Fires after a new comment has been successfully created via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $comment_ID ID of the new comment.
 * @param array $args       An array of new comment arguments.
 */
        public function wp_newComment(/**
 * Fires after a new comment has been successfully created via XML-RPC.
 *
 * @since 3.4.0
 *
 * @param int   $comment_ID ID of the new comment.
 * @param array $args       An array of new comment arguments.
 */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getCommentStatusList(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getCommentCount(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPostStatusList(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPageStatusList(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
        public function wp_getPageTemplates($args) {}
        public function wp_getOptions($args) {}
        public function _getOptions($options) {}
        public function wp_setOptions($args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getMediaItem(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getMediaLibrary(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPostFormats(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPostType(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getPostTypes(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_getRevisions(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function wp_restoreRevision(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function blogger_getUsersBlogs(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
        protected function _multisite_getUsersBlogs($args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function blogger_getUserInfo(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function blogger_getPost(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function blogger_getRecentPosts(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
        public function blogger_getTemplate($args) {}
        public function blogger_setTemplate($args) {}
/**
 * Fires after a new post has been successfully created via the XML-RPC Blogger API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the new post.
 * @param array $args    An array of new post arguments.
 */
        public function blogger_newPost(/**
 * Fires after a new post has been successfully created via the XML-RPC Blogger API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the new post.
 * @param array $args    An array of new post arguments.
 */
$args) {}
/**
 * Fires after a post has been successfully updated via the XML-RPC Blogger API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the updated post.
 * @param array $args    An array of arguments for the post to edit.
 */
        public function blogger_editPost(/**
 * Fires after a post has been successfully updated via the XML-RPC Blogger API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the updated post.
 * @param array $args    An array of arguments for the post to edit.
 */
$args) {}
/**
 * Fires after a post has been successfully deleted via the XML-RPC Blogger API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the deleted post.
 * @param array $args    An array of arguments to delete the post.
 */
        public function blogger_deletePost(/**
 * Fires after a post has been successfully deleted via the XML-RPC Blogger API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the deleted post.
 * @param array $args    An array of arguments to delete the post.
 */
$args) {}
/**
 * Fires after a new post has been successfully created via the XML-RPC MovableType API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the new post.
 * @param array $args    An array of arguments to create the new post.
 */
        public function mw_newPost(/**
 * Fires after a new post has been successfully created via the XML-RPC MovableType API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the new post.
 * @param array $args    An array of arguments to create the new post.
 */
$args) {}
        public function add_enclosure_if_new($post_ID, $enclosure) {}
        public function attach_uploads($post_ID, $post_content) {}
/**
 * Fires after a post has been successfully updated via the XML-RPC MovableType API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the updated post.
 * @param array $args    An array of arguments to update the post.
 */
        public function mw_editPost(/**
 * Fires after a post has been successfully updated via the XML-RPC MovableType API.
 *
 * @since 3.4.0
 *
 * @param int   $post_ID ID of the updated post.
 * @param array $args    An array of arguments to update the post.
 */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mw_getPost(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mw_getRecentPosts(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mw_getCategories(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/**
 * Fires after a new attachment has been added via the XML-RPC MovableType API.
 *
 * @since 3.4.0
 *
 * @param int   $id   ID of the new attachment.
 * @param array $args An array of arguments to add the attachment.
 */
        public function mw_newMediaObject(/**
 * Fires after a new attachment has been added via the XML-RPC MovableType API.
 *
 * @since 3.4.0
 *
 * @param int   $id   ID of the new attachment.
 * @param array $args An array of arguments to add the attachment.
 */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mt_getRecentPostTitles(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mt_getCategoryList(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mt_getPostCategories(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mt_setPostCategories(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
        /** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mt_supportedMethods() {}
        /**
         * Filters the MoveableType text filters list for XML-RPC.
         *
         * @since 2.2.0
         *
         * @param array $filters An array of text filters.
         */
        public function mt_supportedTextFilters() {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mt_getTrackbackPings(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$post_ID) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function mt_publishPost(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$args) {}
/**
 * Fires after a post pingback has been sent.
 *
 * @since 0.71
 *
 * @param int $comment_ID Comment ID.
 */
        public function pingback_ping(/**
 * Fires after a post pingback has been sent.
 *
 * @since 0.71
 *
 * @param int $comment_ID Comment ID.
 */
$args) {}
/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
        public function pingback_extensions_getPingbacks(/** This action is documented in wp-includes/class-wp-xmlrpc-server.php */
$url) {}
/**
 * Filters the XML-RPC pingback error return.
 *
 * @since 3.5.1
 *
 * @param IXR_Error $error An IXR_Error object containing the error code and message.
 */
        protected function pingback_error(/**
 * Filters the XML-RPC pingback error return.
 *
 * @since 3.5.1
 *
 * @param IXR_Error $error An IXR_Error object containing the error code and message.
 */
$code, /**
 * Filters the XML-RPC pingback error return.
 *
 * @since 3.5.1
 *
 * @param IXR_Error $error An IXR_Error object containing the error code and message.
 */
$message) {}
    }

    /**
     * Core class used to implement feed cache transients.
     *
     * @since 2.8.0
     */
    class WP_Feed_Cache_Transient {
        /**
         * Holds the transient name.
         *
         * @since 2.8.0
         * @var string
         */
        public $name;
        /**
         * Holds the transient mod name.
         *
         * @since 2.8.0
         * @var string
         */
        public $mod_name;
        /**
         * Holds the cache duration in seconds.
         *
         * Defaults to 43200 seconds (12 hours).
         *
         * @since 2.8.0
         * @var int
         */
        public $lifetime;

/**
 * Filters the transient lifetime of the feed cache.
 *
 * @since 2.8.0
 *
 * @param int    $lifetime Cache duration in seconds. Default is 43200 seconds (12 hours).
 * @param string $filename Unique identifier for the cache object.
 */
        public function __construct(/**
 * Filters the transient lifetime of the feed cache.
 *
 * @since 2.8.0
 *
 * @param int    $lifetime Cache duration in seconds. Default is 43200 seconds (12 hours).
 * @param string $filename Unique identifier for the cache object.
 */
$location, /**
 * Filters the transient lifetime of the feed cache.
 *
 * @since 2.8.0
 *
 * @param int    $lifetime Cache duration in seconds. Default is 43200 seconds (12 hours).
 * @param string $filename Unique identifier for the cache object.
 */
$filename, /**
 * Filters the transient lifetime of the feed cache.
 *
 * @since 2.8.0
 *
 * @param int    $lifetime Cache duration in seconds. Default is 43200 seconds (12 hours).
 * @param string $filename Unique identifier for the cache object.
 */
$extension) {}
        public function save($data) {}
        /**
         * Gets the transient.
         *
         * @since 2.8.0
         *
         * @return mixed Transient value.
         */
        public function load() {}
        /**
         * Gets mod transient.
         *
         * @since 2.8.0
         *
         * @return mixed Transient value.
         */
        public function mtime() {}
        /**
         * Sets mod transient.
         *
         * @since 2.8.0
         *
         * @return bool False if value was not set and true if value was set.
         */
        public function touch() {}
        /**
         * Deletes transients.
         *
         * @since 2.8.0
         *
         * @return true Always true.
         */
        public function unlink() {}
    }

    /**
     * WP_Theme Class
     *
     * @package WordPress
     * @subpackage Theme
     * @since 3.4.0
     */
    final class WP_Theme implements \arrayaccess {
        /**
         * Whether the theme has been marked as updateable.
         *
         * @since 4.4.0
         * @var bool
         *
         * @see WP_MS_Themes_List_Table
         */
        public $update;
        /**
         * Headers for style.css files.
         *
         * @var array
         */
        static private $file_headers;
        /**
         * Default themes.
         *
         * @var array
         */
        static private $default_themes;
        /**
         * Renamed theme tags.
         *
         * @var array
         */
        static private $tag_map;
        /**
         * Absolute path to the theme root, usually wp-content/themes
         *
         * @var string
         */
        private $theme_root;
        /**
         * Header data from the theme's style.css file.
         *
         * @var array
         */
        private $headers;
        /**
         * Header data from the theme's style.css file after being sanitized.
         *
         * @var array
         */
        private $headers_sanitized;
        /**
         * Header name from the theme's style.css after being translated.
         *
         * Cached due to sorting functions running over the translated name.
         *
         * @var string
         */
        private $name_translated;
        /**
         * Errors encountered when initializing the theme.
         *
         * @var WP_Error
         */
        private $errors;
        /**
         * The directory name of the theme's files, inside the theme root.
         *
         * In the case of a child theme, this is directory name of the child theme.
         * Otherwise, 'stylesheet' is the same as 'template'.
         *
         * @var string
         */
        private $stylesheet;
        /**
         * The directory name of the theme's files, inside the theme root.
         *
         * In the case of a child theme, this is the directory name of the parent theme.
         * Otherwise, 'template' is the same as 'stylesheet'.
         *
         * @var string
         */
        private $template;
        /**
         * A reference to the parent theme, in the case of a child theme.
         *
         * @var WP_Theme
         */
        private $parent;
        /**
         * URL to the theme root, usually an absolute URL to wp-content/themes
         *
         * @var string
         */
        private $theme_root_uri;
        /**
         * Flag for whether the theme's textdomain is loaded.
         *
         * @var bool
         */
        private $textdomain_loaded;
        /**
         * Stores an md5 hash of the theme root, to function as the cache key.
         *
         * @var string
         */
        private $cache_hash;
        /**
         * Flag for whether the themes cache bucket should be persistently cached.
         *
         * Default is false. Can be set with the {@see 'wp_cache_themes_persistently'} filter.
         *
         * @var bool
         */
        static private $persistently_cache;
        /**
         * Expiration time for the themes cache bucket.
         *
         * By default the bucket is not cached, so this value is useless.
         *
         * @var bool
         */
        static private $cache_expiration;

/** This action is documented in wp-includes/theme.php */
        public function __construct(/** This action is documented in wp-includes/theme.php */
$theme_dir, /** This action is documented in wp-includes/theme.php */
$theme_root, /** This action is documented in wp-includes/theme.php */
$_child = null) {}
        /**
         * When converting the object to a string, the theme name is returned.
         *
         * @since  3.4.0
         *
         * @return string Theme name, ready for display (translated)
         */
        public function __toString() {}
        public function __isset($offset) {}
        public function __get($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        /**
         * Returns errors property.
         *
         * @since 3.4.0
         *
         * @return WP_Error|false WP_Error if there are errors, or false.
         */
        public function errors() {}
        /**
         * Whether the theme exists.
         *
         * A theme with errors exists. A theme with the error of 'theme_not_found',
         * meaning that the theme's directory was not found, does not exist.
         *
         * @since 3.4.0
         *
         * @return bool Whether the theme exists.
         */
        public function exists() {}
        /**
         * Returns reference to the parent theme.
         *
         * @since 3.4.0
         *
         * @return WP_Theme|false Parent theme, or false if the current theme is not a child theme.
         */
        public function parent() {}
        private function cache_add($key, $data) {}
        private function cache_get($key) {}
        /**
         * Clears the cache for the theme.
         *
         * @since 3.4.0
         */
        public function cache_delete() {}
        public function get($header) {}
        public function display($header, $markup = true, $translate = true) {}
        private function sanitize_header($header, $value) {}
        private function markup_header($header, $value, $translate) {}
        private function translate_header($header, $value) {}
        /**
         * The directory name of the theme's "stylesheet" files, inside the theme root.
         *
         * In the case of a child theme, this is directory name of the child theme.
         * Otherwise, get_stylesheet() is the same as get_template().
         *
         * @since 3.4.0
         *
         * @return string Stylesheet
         */
        public function get_stylesheet() {}
        /**
         * The directory name of the theme's "template" files, inside the theme root.
         *
         * In the case of a child theme, this is the directory name of the parent theme.
         * Otherwise, the get_template() is the same as get_stylesheet().
         *
         * @since 3.4.0
         *
         * @return string Template
         */
        public function get_template() {}
        /**
         * Returns the absolute path to the directory of a theme's "stylesheet" files.
         *
         * In the case of a child theme, this is the absolute path to the directory
         * of the child theme's files.
         *
         * @since 3.4.0
         *
         * @return string Absolute path of the stylesheet directory.
         */
        public function get_stylesheet_directory() {}
        /**
         * Returns the absolute path to the directory of a theme's "template" files.
         *
         * In the case of a child theme, this is the absolute path to the directory
         * of the parent theme's files.
         *
         * @since 3.4.0
         *
         * @return string Absolute path of the template directory.
         */
        public function get_template_directory() {}
        /**
         * Returns the URL to the directory of a theme's "stylesheet" files.
         *
         * In the case of a child theme, this is the URL to the directory of the
         * child theme's files.
         *
         * @since 3.4.0
         *
         * @return string URL to the stylesheet directory.
         */
        public function get_stylesheet_directory_uri() {}
        /**
         * Returns the URL to the directory of a theme's "template" files.
         *
         * In the case of a child theme, this is the URL to the directory of the
         * parent theme's files.
         *
         * @since 3.4.0
         *
         * @return string URL to the template directory.
         */
        public function get_template_directory_uri() {}
        /**
         * The absolute path to the directory of the theme root.
         *
         * This is typically the absolute path to wp-content/themes.
         *
         * @since 3.4.0
         *
         * @return string Theme root.
         */
        public function get_theme_root() {}
        /**
         * Returns the URL to the directory of the theme root.
         *
         * This is typically the absolute URL to wp-content/themes. This forms the basis
         * for all other URLs returned by WP_Theme, so we pass it to the public function
         * get_theme_root_uri() and allow it to run the {@see 'theme_root_uri'} filter.
         *
         * @since 3.4.0
         *
         * @return string Theme root URI.
         */
        public function get_theme_root_uri() {}
        public function get_screenshot($uri = 'uri') {}
        public function get_files($type = null, $depth = 0, $search_parent = false) {}
        /**
         * Returns the theme's post templates.
         *
         * @since 4.7.0
         *
         * @return array Array of page templates, keyed by filename and post type,
         *               with the value of the translated header name.
         */
        public function get_post_templates() {}
/**
 * Filters list of page templates for a theme.
 *
 * The dynamic portion of the hook name, `$post_type`, refers to the post type.
 *
 * @since 3.9.0
 * @since 4.4.0 Converted to allow complete control over the `$page_templates` array.
 * @since 4.7.0 Added the `$post_type` parameter.
 *
 * @param string[]     $post_templates Array of page templates. Keys are filenames,
 *                                     values are translated names.
 * @param WP_Theme     $this           The theme object.
 * @param WP_Post|null $post           The post being edited, provided for context, or null.
 * @param string       $post_type      Post type to get the templates for.
 */
        public function get_page_templates(/**
 * Filters list of page templates for a theme.
 *
 * The dynamic portion of the hook name, `$post_type`, refers to the post type.
 *
 * @since 3.9.0
 * @since 4.4.0 Converted to allow complete control over the `$page_templates` array.
 * @since 4.7.0 Added the `$post_type` parameter.
 *
 * @param string[]     $post_templates Array of page templates. Keys are filenames,
 *                                     values are translated names.
 * @param WP_Theme     $this           The theme object.
 * @param WP_Post|null $post           The post being edited, provided for context, or null.
 * @param string       $post_type      Post type to get the templates for.
 */
$post = null, /**
 * Filters list of page templates for a theme.
 *
 * The dynamic portion of the hook name, `$post_type`, refers to the post type.
 *
 * @since 3.9.0
 * @since 4.4.0 Converted to allow complete control over the `$page_templates` array.
 * @since 4.7.0 Added the `$post_type` parameter.
 *
 * @param string[]     $post_templates Array of page templates. Keys are filenames,
 *                                     values are translated names.
 * @param WP_Theme     $this           The theme object.
 * @param WP_Post|null $post           The post being edited, provided for context, or null.
 * @param string       $post_type      Post type to get the templates for.
 */
$post_type = 'page') {}
/**
 * Filters the array of excluded directories and files while scanning theme folder.
 *
 * @since 4.7.4
 *
 * @param string[] $exclusions Array of excluded directories and files.
 */
        private static function scandir(/**
 * Filters the array of excluded directories and files while scanning theme folder.
 *
 * @since 4.7.4
 *
 * @param string[] $exclusions Array of excluded directories and files.
 */
$path, /**
 * Filters the array of excluded directories and files while scanning theme folder.
 *
 * @since 4.7.4
 *
 * @param string[] $exclusions Array of excluded directories and files.
 */
$extensions = null, /**
 * Filters the array of excluded directories and files while scanning theme folder.
 *
 * @since 4.7.4
 *
 * @param string[] $exclusions Array of excluded directories and files.
 */
$depth = 0, /**
 * Filters the array of excluded directories and files while scanning theme folder.
 *
 * @since 4.7.4
 *
 * @param string[] $exclusions Array of excluded directories and files.
 */
$relative_path = '') {}
        /**
         * Loads the theme's textdomain.
         *
         * Translation files are not inherited from the parent theme. Todo: if this fails for the
         * child theme, it should probably try to load the parent theme's translations.
         *
         * @since 3.4.0
         *
         * @return bool True if the textdomain was successfully loaded or has already been loaded.
         *  False if no textdomain was specified in the file headers, or if the domain could not be loaded.
         */
        public function load_textdomain() {}
        public function is_allowed($check = 'both', $blog_id = null) {}
        /**
         * Determines the latest WordPress default theme that is installed.
         *
         * This hits the filesystem.
         *
         * @since  4.4.0
         *
         * @return WP_Theme|false Object, or false if no theme is installed, which would be bad.
         */
        public static function get_core_default_theme() {}
/**
 * Filters the array of themes allowed on the network.
 *
 * Site is provided as context so that a list of network allowed themes can
 * be filtered further.
 *
 * @since 4.5.0
 *
 * @param string[] $allowed_themes An array of theme stylesheet names.
 * @param int      $blog_id        ID of the site.
 */
        public static function get_allowed(/**
 * Filters the array of themes allowed on the network.
 *
 * Site is provided as context so that a list of network allowed themes can
 * be filtered further.
 *
 * @since 4.5.0
 *
 * @param string[] $allowed_themes An array of theme stylesheet names.
 * @param int      $blog_id        ID of the site.
 */
$blog_id = null) {}
        /**
         * Filters the array of themes allowed on the network.
         *
         * @since MU (3.0.0)
         *
         * @param string[] $allowed_themes An array of theme stylesheet names.
         */
        public static function get_allowed_on_network() {}
/** This filter is documented in wp-includes/class-wp-theme.php */
        public static function get_allowed_on_site(/** This filter is documented in wp-includes/class-wp-theme.php */
$blog_id = null) {}
        public static function network_enable_theme($stylesheets) {}
        public static function network_disable_theme($stylesheets) {}
        public static function sort_by_name($themes) {}
        private static function _name_sort($a, $b) {}
        private static function _name_sort_i18n($a, $b) {}
    }

    /**
     * Better word splitting than the PEAR package provides.
     *
     * @since 2.6.0
     * @uses Text_Diff_Renderer_inline Extends
     */
    class WP_Text_Diff_Renderer_inline extends \text_diff_renderer_inline {
        public function _splitOnWords($string, $newlineEscape = "\n") {}
    }

    /**
     * WordPress Database Access Abstraction Object
     *
     * It is possible to replace this class with your own
     * by setting the $wpdb global variable in wp-content/db.php
     * file to your class. The wpdb class will still be included,
     * so you can extend it or simply use your own.
     *
     * @link https://codex.wordpress.org/Function_Reference/wpdb_Class
     *
     * @since 0.71
     */
    class wpdb {
        /**
         * Whether to show SQL/DB errors.
         *
         * Default behavior is to show errors if both WP_DEBUG and WP_DEBUG_DISPLAY
         * evaluated to true.
         *
         * @since 0.71
         * @var bool
         */
        public $show_errors;
        /**
         * Whether to suppress errors during the DB bootstrapping.
         *
         * @since 2.5.0
         * @var bool
         */
        public $suppress_errors;
        /**
         * The last error during query.
         *
         * @since 2.5.0
         * @var string
         */
        public $last_error;
        /**
         * Amount of queries made
         *
         * @since 1.2.0
         * @var int
         */
        public $num_queries;
        /**
         * Count of rows returned by previous query
         *
         * @since 0.71
         * @var int
         */
        public $num_rows;
        /**
         * Count of affected rows by previous query
         *
         * @since 0.71
         * @var int
         */
        public $rows_affected;
        /**
         * The ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).
         *
         * @since 0.71
         * @var int
         */
        public $insert_id;
        /**
         * Last query made
         *
         * @since 0.71
         * @var array
         */
        public $last_query;
        /**
         * Results of the last query made
         *
         * @since 0.71
         * @var array|null
         */
        public $last_result;
        /**
         * MySQL result, which is either a resource or boolean.
         *
         * @since 0.71
         * @var mixed
         */
        protected $result;
        /**
         * Cached column info, for sanity checking data before inserting
         *
         * @since 4.2.0
         * @var array
         */
        protected $col_meta;
        /**
         * Calculated character sets on tables
         *
         * @since 4.2.0
         * @var array
         */
        protected $table_charset;
        /**
         * Whether text fields in the current query need to be sanity checked.
         *
         * @since 4.2.0
         * @var bool
         */
        protected $check_current_query;
        /**
         * Flag to ensure we don't run into recursion problems when checking the collation.
         *
         * @since 4.2.0
         * @see wpdb::check_safe_collation()
         * @var bool
         */
        private $checking_collation;
        /**
         * Saved info on the table column
         *
         * @since 0.71
         * @var array
         */
        protected $col_info;
        /**
         * Log of queries that were executed, for debugging purposes.
         *
         * @since 1.5.0
         * @since 2.5.0 The third element in each query log was added to record the calling functions.
         * @since 5.1.0 The fourth element in each query log was added to record the start time.
         *
         * @var array[] {
         *     Array of queries that were executed.
         *
         *     @type array ...$0 {
         *         Data for each query.
         *
         *         @type string $0 The query's SQL.
         *         @type float  $1 Total time spent on the query, in seconds.
         *         @type string $2 Comma separated list of the calling functions.
         *         @type float  $3 Unix timestamp of the time at the start of the query.
         *     }
         * }
         */
        public $queries;
        /**
         * The number of times to retry reconnecting before dying.
         *
         * @since 3.9.0
         * @see wpdb::check_connection()
         * @var int
         */
        protected $reconnect_retries;
        /**
         * WordPress table prefix
         *
         * You can set this to have multiple WordPress installations
         * in a single database. The second reason is for possible
         * security precautions.
         *
         * @since 2.5.0
         * @var string
         */
        public $prefix;
        /**
         * WordPress base table prefix.
         *
         * @since 3.0.0
         * @var string
         */
        public $base_prefix;
        /**
         * Whether the database queries are ready to start executing.
         *
         * @since 2.3.2
         * @var bool
         */
        public $ready;
        /**
         * Blog ID.
         *
         * @since 3.0.0
         * @var int
         */
        public $blogid;
        /**
         * Site ID.
         *
         * @since 3.0.0
         * @var int
         */
        public $siteid;
        /**
         * List of WordPress per-blog tables
         *
         * @since 2.5.0
         * @see wpdb::tables()
         * @var array
         */
        public $tables;
        /**
         * List of deprecated WordPress tables
         *
         * categories, post2cat, and link2cat were deprecated in 2.3.0, db version 5539
         *
         * @since 2.9.0
         * @see wpdb::tables()
         * @var array
         */
        public $old_tables;
        /**
         * List of WordPress global tables
         *
         * @since 3.0.0
         * @see wpdb::tables()
         * @var array
         */
        public $global_tables;
        /**
         * List of Multisite global tables
         *
         * @since 3.0.0
         * @see wpdb::tables()
         * @var array
         */
        public $ms_global_tables;
        /**
         * WordPress Comments table
         *
         * @since 1.5.0
         * @var string
         */
        public $comments;
        /**
         * WordPress Comment Metadata table
         *
         * @since 2.9.0
         * @var string
         */
        public $commentmeta;
        /**
         * WordPress Links table
         *
         * @since 1.5.0
         * @var string
         */
        public $links;
        /**
         * WordPress Options table
         *
         * @since 1.5.0
         * @var string
         */
        public $options;
        /**
         * WordPress Post Metadata table
         *
         * @since 1.5.0
         * @var string
         */
        public $postmeta;
        /**
         * WordPress Posts table
         *
         * @since 1.5.0
         * @var string
         */
        public $posts;
        /**
         * WordPress Terms table
         *
         * @since 2.3.0
         * @var string
         */
        public $terms;
        /**
         * WordPress Term Relationships table
         *
         * @since 2.3.0
         * @var string
         */
        public $term_relationships;
        /**
         * WordPress Term Taxonomy table
         *
         * @since 2.3.0
         * @var string
         */
        public $term_taxonomy;
        /**
         * WordPress Term Meta table.
         *
         * @since 4.4.0
         * @var string
         */
        public $termmeta;
        /**
         * WordPress User Metadata table
         *
         * @since 2.3.0
         * @var string
         */
        public $usermeta;
        /**
         * WordPress Users table
         *
         * @since 1.5.0
         * @var string
         */
        public $users;
        /**
         * Multisite Blogs table
         *
         * @since 3.0.0
         * @var string
         */
        public $blogs;
        /**
         * Multisite Blog Metadata table
         *
         * @since 5.1.0
         * @var string
         */
        public $blogmeta;
        /**
         * Multisite Blog Versions table
         *
         * @since 3.0.0
         * @var string
         */
        public $blog_versions;
        /**
         * Multisite Registration Log table
         *
         * @since 3.0.0
         * @var string
         */
        public $registration_log;
        /**
         * Multisite Signups table
         *
         * @since 3.0.0
         * @var string
         */
        public $signups;
        /**
         * Multisite Sites table
         *
         * @since 3.0.0
         * @var string
         */
        public $site;
        /**
         * Multisite Sitewide Terms table
         *
         * @since 3.0.0
         * @var string
         */
        public $sitecategories;
        /**
         * Multisite Site Metadata table
         *
         * @since 3.0.0
         * @var string
         */
        public $sitemeta;
        /**
         * Format specifiers for DB columns. Columns not listed here default to %s. Initialized during WP load.
         *
         * Keys are column names, values are format types: 'ID' => '%d'
         *
         * @since 2.8.0
         * @see wpdb::prepare()
         * @see wpdb::insert()
         * @see wpdb::update()
         * @see wpdb::delete()
         * @see wp_set_wpdb_vars()
         * @var array
         */
        public $field_types;
        /**
         * Database table columns charset
         *
         * @since 2.2.0
         * @var string
         */
        public $charset;
        /**
         * Database table columns collate
         *
         * @since 2.2.0
         * @var string
         */
        public $collate;
        /**
         * Database Username
         *
         * @since 2.9.0
         * @var string
         */
        protected $dbuser;
        /**
         * Database Password
         *
         * @since 3.1.0
         * @var string
         */
        protected $dbpassword;
        /**
         * Database Name
         *
         * @since 3.1.0
         * @var string
         */
        protected $dbname;
        /**
         * Database Host
         *
         * @since 3.1.0
         * @var string
         */
        protected $dbhost;
        /**
         * Database Handle
         *
         * @since 0.71
         * @var string
         */
        protected $dbh;
        /**
         * A textual description of the last query/get_row/get_var call
         *
         * @since 3.0.0
         * @var string
         */
        public $func_call;
        /**
         * Whether MySQL is used as the database engine.
         *
         * Set in WPDB::db_connect() to true, by default. This is used when checking
         * against the required MySQL version for WordPress. Normally, a replacement
         * database drop-in (db.php) will skip these checks, but setting this to true
         * will force the checks to occur.
         *
         * @since 3.3.0
         * @var bool
         */
        public $is_mysql;
        /**
         * A list of incompatible SQL modes.
         *
         * @since 3.9.0
         * @var array
         */
        protected $incompatible_modes;
        /**
         * Whether to use mysqli over mysql.
         *
         * @since 3.9.0
         * @var bool
         */
        private $use_mysqli;
        /**
         * Whether we've managed to successfully connect at some point
         *
         * @since 3.9.0
         * @var bool
         */
        private $has_connected;

        public function __construct($dbuser, $dbpassword, $dbname, $dbhost) {}
        /**
         * PHP5 style destructor and will run when database object is destroyed.
         *
         * @see wpdb::__construct()
         * @since 2.0.8
         * @return true
         */
        public function __destruct() {}
        public function __get($name) {}
        public function __set($name, $value) {}
        public function __isset($name) {}
        public function __unset($name) {}
        /**
         * Set $this->charset and $this->collate
         *
         * @since 3.1.0
         */
        public function init_charset() {}
        public function determine_charset($charset, $collate) {}
        public function set_charset($dbh, $charset = null, $collate = null) {}
/**
 * Filters the list of incompatible SQL modes to exclude.
 *
 * @since 3.9.0
 *
 * @param array $incompatible_modes An array of incompatible modes.
 */
        public function set_sql_mode(/**
 * Filters the list of incompatible SQL modes to exclude.
 *
 * @since 3.9.0
 *
 * @param array $incompatible_modes An array of incompatible modes.
 */
$modes = array( )) {}
        public function set_prefix($prefix, $set_table_names = true) {}
        public function set_blog_id($blog_id, $network_id = 0) {}
        public function get_blog_prefix($blog_id = null) {}
        public function tables($scope = 'all', $prefix = true, $blog_id = 0) {}
        public function select($db, $dbh = null) {}
        function _weak_escape($string) {}
        function _real_escape($string) {}
        public function _escape($data) {}
        public function escape($data) {}
        public function escape_by_ref($string) {}
        public function prepare($query, $args) {}
        public function esc_like($text) {}
        public function print_error($str = '') {}
        public function show_errors($show = true) {}
        /**
         * Disables showing of database errors.
         *
         * By default database errors are not shown.
         *
         * @since 0.71
         * @see wpdb::show_errors()
         *
         * @return bool Whether showing of errors was active
         */
        public function hide_errors() {}
        public function suppress_errors($suppress = true) {}
        /**
         * Kill cached query results.
         *
         * @since 0.71
         */
        public function flush() {}
        public function db_connect($allow_bail = true) {}
        public function parse_db_host($host) {}
        public function check_connection($allow_bail = true) {}
/**
 * Filters the database query.
 *
 * Some queries are made before the plugins have been loaded,
 * and thus cannot be filtered with this method.
 *
 * @since 2.1.0
 *
 * @param string $query Database query.
 */
        public function query(/**
 * Filters the database query.
 *
 * Some queries are made before the plugins have been loaded,
 * and thus cannot be filtered with this method.
 *
 * @since 2.1.0
 *
 * @param string $query Database query.
 */
$query) {}
        private function _do_query($query) {}
        /**
         * Generates and returns a placeholder escape string for use in queries returned by ::prepare().
         *
         * @since 4.8.3
         *
         * @return string String to escape placeholders.
         */
        public function placeholder_escape() {}
        public function add_placeholder_escape($query) {}
        public function remove_placeholder_escape($query) {}
        public function insert($table, $data, $format = null) {}
        public function replace($table, $data, $format = null) {}
        function _insert_replace_helper($table, $data, $format = null, $type = 'INSERT') {}
        public function update($table, $data, $where, $format = null, $where_format = null) {}
        public function delete($table, $where, $where_format = null) {}
        protected function process_fields($table, $data, $format) {}
        protected function process_field_formats($data, $format) {}
        protected function process_field_charsets($data, $table) {}
        protected function process_field_lengths($data, $table) {}
        public function get_var($query = null, $x = 0, $y = 0) {}
        public function get_row($query = null, $output = OBJECT, $y = 0) {}
        public function get_col($query = null, $x = 0) {}
        public function get_results($query = null, $output = OBJECT) {}
/**
 * Filters the table charset value before the DB is checked.
 *
 * Passing a non-null value to the filter will effectively short-circuit
 * checking the DB for the charset, returning that value instead.
 *
 * @since 4.2.0
 *
 * @param string $charset The character set to use. Default null.
 * @param string $table   The name of the table being checked.
 */
        protected function get_table_charset(/**
 * Filters the table charset value before the DB is checked.
 *
 * Passing a non-null value to the filter will effectively short-circuit
 * checking the DB for the charset, returning that value instead.
 *
 * @since 4.2.0
 *
 * @param string $charset The character set to use. Default null.
 * @param string $table   The name of the table being checked.
 */
$table) {}
/**
 * Filters the column charset value before the DB is checked.
 *
 * Passing a non-null value to the filter will short-circuit
 * checking the DB for the charset, returning that value instead.
 *
 * @since 4.2.0
 *
 * @param string $charset The character set to use. Default null.
 * @param string $table   The name of the table being checked.
 * @param string $column  The name of the column being checked.
 */
        public function get_col_charset(/**
 * Filters the column charset value before the DB is checked.
 *
 * Passing a non-null value to the filter will short-circuit
 * checking the DB for the charset, returning that value instead.
 *
 * @since 4.2.0
 *
 * @param string $charset The character set to use. Default null.
 * @param string $table   The name of the table being checked.
 * @param string $column  The name of the column being checked.
 */
$table, /**
 * Filters the column charset value before the DB is checked.
 *
 * Passing a non-null value to the filter will short-circuit
 * checking the DB for the charset, returning that value instead.
 *
 * @since 4.2.0
 *
 * @param string $charset The character set to use. Default null.
 * @param string $table   The name of the table being checked.
 * @param string $column  The name of the column being checked.
 */
$column) {}
        public function get_col_length($table, $column) {}
        protected function check_ascii($string) {}
        protected function check_safe_collation($query) {}
        protected function strip_invalid_text($data) {}
        protected function strip_invalid_text_from_query($query) {}
        public function strip_invalid_text_for_column($table, $column, $value) {}
        protected function get_table_from_query($query) {}
        /**
         * Load the column metadata from the last query.
         *
         * @since 3.5.0
         */
        protected function load_col_info() {}
        public function get_col_info($info_type = 'name', $col_offset = -1) {}
        /**
         * Starts the timer, for debugging purposes.
         *
         * @since 1.5.0
         *
         * @return true
         */
        public function timer_start() {}
        /**
         * Stops the debugging timer.
         *
         * @since 1.5.0
         *
         * @return float Total time spent on the query, in seconds
         */
        public function timer_stop() {}
        public function bail($message, $error_code = '500') {}
        /**
         * Closes the current database connection.
         *
         * @since 4.5.0
         *
         * @return bool True if the connection was successfully closed, false if it wasn't,
         *              or the connection doesn't exist.
         */
        public function close() {}
        /**
         * Whether MySQL database is at least the required minimum version.
         *
         * @since 2.5.0
         *
         * @global string $wp_version
         * @global string $required_mysql_version
         *
         * @return WP_Error|void
         */
        public function check_database_version() {}
        /**
         * Whether the database supports collation.
         *
         * Called when WordPress is generating the table scheme.
         *
         * Use `wpdb::has_cap( 'collation' )`.
         *
         * @since 2.5.0
         * @deprecated 3.5.0 Use wpdb::has_cap()
         *
         * @return bool True if collation is supported, false if version does not
         */
        public function supports_collation() {}
        /**
         * The database character collate.
         *
         * @since 3.5.0
         *
         * @return string The database character collate.
         */
        public function get_charset_collate() {}
        public function has_cap($db_cap) {}
        /**
         * Retrieve the name of the function that called wpdb.
         *
         * Searches up the list of functions until it reaches
         * the one that would most logically had called this method.
         *
         * @since 2.5.0
         *
         * @return string Comma separated list of the calling functions.
         */
        public function get_caller() {}
        /**
         * Retrieves the MySQL server version.
         *
         * @since 2.7.0
         *
         * @return null|string Null on failure, version number on success.
         */
        public function db_version() {}
    }

    /**
     * WP_User_Request class.
     *
     * Represents user request data loaded from a WP_Post object.
     *
     * @since 4.9.6
     */
    final class WP_User_Request {
        /**
         * Request ID.
         *
         * @var int
         */
        public $ID;
        /**
         * User ID.
         *
         * @var int
         */
        public $user_id;
        /**
         * User email.
         *
         * @var int
         */
        public $email;
        /**
         * Action name.
         *
         * @var string
         */
        public $action_name;
        /**
         * Current status.
         *
         * @var string
         */
        public $status;
        /**
         * Timestamp this request was created.
         *
         * @var int|null
         */
        public $created_timestamp;
        /**
         * Timestamp this request was last modified.
         *
         * @var int|null
         */
        public $modified_timestamp;
        /**
         * Timestamp this request was confirmed.
         *
         * @var int
         */
        public $confirmed_timestamp;
        /**
         * Timestamp this request was completed.
         *
         * @var int
         */
        public $completed_timestamp;
        /**
         * Misc data assigned to this request.
         *
         * @var array
         */
        public $request_data;
        /**
         * Key used to confirm this request.
         *
         * @var string
         */
        public $confirm_key;

        public function __construct($post) {}
    }

    /**
     * Bridge to connect Requests internal hooks to WordPress actions.
     *
     * @since 4.7.0
     *
     * @see Requests_Hooks
     */
    class WP_HTTP_Requests_Hooks extends \requests_hooks {
        /**
         * Requested URL.
         *
         * @var string Requested URL.
         */
        protected $url;
        /**
         * WordPress WP_HTTP request data.
         *
         * @var array Request data in WP_Http format.
         */
        protected $request;

        public function __construct($url, $request) {}
/**
 * Transforms a native Request hook to a WordPress actions.
 *
 * This action maps Requests internal hook to a native WordPress action.
 *
 * @see https://github.com/rmccue/Requests/blob/master/docs/hooks.md
 *
 * @param array $parameters Parameters from Requests internal hook.
 * @param array $request Request data in WP_Http format.
 * @param string $url URL to request.
 */
        public function dispatch(/**
 * Transforms a native Request hook to a WordPress actions.
 *
 * This action maps Requests internal hook to a native WordPress action.
 *
 * @see https://github.com/rmccue/Requests/blob/master/docs/hooks.md
 *
 * @param array $parameters Parameters from Requests internal hook.
 * @param array $request Request data in WP_Http format.
 * @param string $url URL to request.
 */
$hook, /**
 * Transforms a native Request hook to a WordPress actions.
 *
 * This action maps Requests internal hook to a native WordPress action.
 *
 * @see https://github.com/rmccue/Requests/blob/master/docs/hooks.md
 *
 * @param array $parameters Parameters from Requests internal hook.
 * @param array $request Request data in WP_Http format.
 * @param string $url URL to request.
 */
$parameters = array( )) {}
    }

    /**
     * Core class used for managing HTTP transports and making HTTP requests.
     *
     * This class is used to consistently make outgoing HTTP requests easy for developers
     * while still being compatible with the many PHP configurations under which
     * WordPress runs.
     *
     * Debugging includes several actions, which pass different variables for debugging the HTTP API.
     *
     * @since 2.7.0
     */
    class WP_Http {
        const EARLY_HINTS = 103;
        const PROCESSING = 102;
        const CREATED = 201;
        const OK = 200;
        const NON_AUTHORITATIVE_INFORMATION = 203;
        const ACCEPTED = 202;
        const RESET_CONTENT = 205;
        const NO_CONTENT = 204;
        const SWITCHING_PROTOCOLS = 101;
        const HTTP_CONTINUE = 100;
        const UNSUPPORTED_MEDIA_TYPE = 415;
        const REQUEST_URI_TOO_LONG = 414;
        const REQUEST_ENTITY_TOO_LARGE = 413;
        const PRECONDITION_FAILED = 412;
        const MISDIRECTED_REQUEST = 421;
        const IM_A_TEAPOT = 418;
        const EXPECTATION_FAILED = 417;
        const REQUESTED_RANGE_NOT_SATISFIABLE = 416;
        const PROXY_AUTHENTICATION_REQUIRED = 407;
        const NOT_ACCEPTABLE = 406;
        const METHOD_NOT_ALLOWED = 405;
        const NOT_FOUND = 404;
        const LENGTH_REQUIRED = 411;
        const GONE = 410;
        const CONFLICT = 409;
        const REQUEST_TIMEOUT = 408;
        const TEMPORARY_REDIRECT = 307;
        const PERMANENT_REDIRECT = 308;
        const USE_PROXY = 305;
        const UPGRADE_REQUIRED = 426;
        const FAILED_DEPENDENCY = 424;
        const LOCKED = 423;
        const UNPROCESSABLE_ENTITY = 422;
        const UNAVAILABLE_FOR_LEGAL_REASONS = 451;
        const REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
        const TOO_MANY_REQUESTS = 429;
        const PRECONDITION_REQUIRED = 428;
        const SERVICE_UNAVAILABLE = 503;
        const BAD_GATEWAY = 502;
        const NOT_IMPLEMENTED = 501;
        const INTERNAL_SERVER_ERROR = 500;
        const INSUFFICIENT_STORAGE = 507;
        const VARIANT_ALSO_NEGOTIATES = 506;
        const HTTP_VERSION_NOT_SUPPORTED = 505;
        const GATEWAY_TIMEOUT = 504;
        const NOT_EXTENDED = 510;
        const NETWORK_AUTHENTICATION_REQUIRED = 511;
        const FOUND = 302;
        const MOVED_PERMANENTLY = 301;
        const NOT_MODIFIED = 304;
        const SEE_OTHER = 303;
        const MULTI_STATUS = 207;
        const PARTIAL_CONTENT = 206;
        const MULTIPLE_CHOICES = 300;
        const IM_USED = 226;
        const UNAUTHORIZED = 401;
        const BAD_REQUEST = 400;
        const FORBIDDEN = 403;
        const PAYMENT_REQUIRED = 402;
        const RESERVED = 306;

/**
 * Filters the HTTP API response immediately before the response is returned.
 *
 * @since 2.9.0
 *
 * @param array  $response HTTP response.
 * @param array  $r        HTTP request arguments.
 * @param string $url      The request URL.
 */
        public function request(/**
 * Filters the HTTP API response immediately before the response is returned.
 *
 * @since 2.9.0
 *
 * @param array  $response HTTP response.
 * @param array  $r        HTTP request arguments.
 * @param string $url      The request URL.
 */
$url, /**
 * Filters the HTTP API response immediately before the response is returned.
 *
 * @since 2.9.0
 *
 * @param array  $response HTTP response.
 * @param array  $r        HTTP request arguments.
 * @param string $url      The request URL.
 */
$args = array( )) {}
        public static function normalize_cookies($cookies) {}
        public static function browser_redirect_compatibility($location, $headers, $data, $options, $original) {}
        public static function validate_redirects($location) {}
/**
 * Filters which HTTP transports are available and in what order.
 *
 * @since 3.7.0
 *
 * @param array  $transports Array of HTTP transports to check. Default array contains
 *                           'curl', and 'streams', in that order.
 * @param array  $args       HTTP request arguments.
 * @param string $url        The URL to request.
 */
        public function _get_first_available_transport(/**
 * Filters which HTTP transports are available and in what order.
 *
 * @since 3.7.0
 *
 * @param array  $transports Array of HTTP transports to check. Default array contains
 *                           'curl', and 'streams', in that order.
 * @param array  $args       HTTP request arguments.
 * @param string $url        The URL to request.
 */
$args, /**
 * Filters which HTTP transports are available and in what order.
 *
 * @since 3.7.0
 *
 * @param array  $transports Array of HTTP transports to check. Default array contains
 *                           'curl', and 'streams', in that order.
 * @param array  $args       HTTP request arguments.
 * @param string $url        The URL to request.
 */
$url = null) {}
/** This filter is documented in wp-includes/class-http.php */
        private function _dispatch_request(/** This filter is documented in wp-includes/class-http.php */
$url, /** This filter is documented in wp-includes/class-http.php */
$args) {}
        public function post($url, $args = array( )) {}
        public function get($url, $args = array( )) {}
        public function head($url, $args = array( )) {}
        public static function processResponse($strResponse) {}
        public static function processHeaders($headers, $url = '') {}
        public static function buildCookieHeader($r) {}
        public static function chunkTransferDecode($body) {}
        public function block_request($uri) {}
        protected static function parse_url($url) {}
        public static function make_absolute_url($maybe_relative_path, $url) {}
        public static function handle_redirects($url, $args, $response) {}
        public static function is_ip_address($maybe_ip) {}
    }

    /**
     * Core class used for interacting with block types.
     *
     * @since 5.0.0
     */
    final class WP_Block_Type_Registry {
        /**
         * Registered block types, as `$name => $instance` pairs.
         *
         * @since 5.0.0
         * @var WP_Block_Type[]
         */
        private $registered_block_types;
        /**
         * Container for the main instance of the class.
         *
         * @since 5.0.0
         * @var WP_Block_Type_Registry|null
         */
        static private $instance;

        public function register($name, $args = array( )) {}
        public function unregister($name) {}
        public function get_registered($name) {}
        /**
         * Retrieves all registered block types.
         *
         * @since 5.0.0
         *
         * @return WP_Block_Type[] Associative array of `$block_type_name => $block_type` pairs.
         */
        public function get_all_registered() {}
        public function is_registered($name) {}
        /**
         * Utility method to retrieve the main instance of the class.
         *
         * The instance will be created if it does not exist yet.
         *
         * @since 5.0.0
         *
         * @return WP_Block_Type_Registry The main instance.
         */
        public static function get_instance() {}
    }

    /**
     * Core class used for interacting with a multisite site.
     *
     * This class is used during load to populate the `$current_blog` global and
     * setup the current site.
     *
     * @since 4.5.0
     *
     * @property int    $id
     * @property int    $network_id
     * @property string $blogname
     * @property string $siteurl
     * @property int    $post_count
     * @property string $home
     */
    final class WP_Site {
        /**
         * Site ID.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $blog_id;
        /**
         * Domain of the site.
         *
         * @since 4.5.0
         * @var string
         */
        public $domain;
        /**
         * Path of the site.
         *
         * @since 4.5.0
         * @var string
         */
        public $path;
        /**
         * The ID of the site's parent network.
         *
         * Named "site" vs. "network" for legacy reasons. An individual site's "site" is
         * its network.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $site_id;
        /**
         * The date on which the site was created or registered.
         *
         * @since 4.5.0
         * @var string Date in MySQL's datetime format.
         */
        public $registered;
        /**
         * The date and time on which site settings were last updated.
         *
         * @since 4.5.0
         * @var string Date in MySQL's datetime format.
         */
        public $last_updated;
        /**
         * Whether the site should be treated as public.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $public;
        /**
         * Whether the site should be treated as archived.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $archived;
        /**
         * Whether the site should be treated as mature.
         *
         * Handling for this does not exist throughout WordPress core, but custom
         * implementations exist that require the property to be present.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $mature;
        /**
         * Whether the site should be treated as spam.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $spam;
        /**
         * Whether the site should be treated as deleted.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $deleted;
        /**
         * The language pack associated with this site.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $lang_id;

        public static function get_instance($site_id) {}
        public function __construct($site) {}
        /**
         * Converts an object to array.
         *
         * @since 4.6.0
         *
         * @return array Object as array.
         */
        public function to_array() {}
        public function __get($key) {}
        public function __isset($key) {}
        public function __set($key, $value) {}
        /**
         * Filters a site's extended properties.
         *
         * @since 4.6.0
         *
         * @param stdClass $details The site details.
         */
        private function get_details() {}
    }

    /**
     * Helper class to remove the need to use eval to replace $matches[] in query strings.
     *
     * @since 2.9.0
     */
    class WP_MatchesMapRegex {
        /**
         * store for matches
         *
         * @var array
         */
        private $_matches;
        /**
         * store for mapping result
         *
         * @var string
         */
        public $output;
        /**
         * subject to perform mapping on (query string containing $matches[] references
         *
         * @var string
         */
        private $_subject;
        /**
         * regexp pattern to match $matches[] references
         *
         * @var string
         */
        public $_pattern;

        public function __construct($subject, $matches) {}
        public static function apply($subject, $matches) {}
        /**
         * do the actual mapping
         *
         * @return string
         */
        private function _map() {}
        public function callback($matches) {}
    }

    /**
     * Core class used to implement meta queries for the Meta API.
     *
     * Used for generating SQL clauses that filter a primary query according to metadata keys and values.
     *
     * WP_Meta_Query is a helper that allows primary query classes, such as WP_Query and WP_User_Query,
     *
     * to filter their results by object metadata, by generating `JOIN` and `WHERE` subclauses to be attached
     * to the primary SQL query string.
     *
     * @since 3.2.0
     */
    class WP_Meta_Query {
        /**
         * Array of metadata queries.
         *
         * See WP_Meta_Query::__construct() for information on meta query arguments.
         *
         * @since 3.2.0
         * @var array
         */
        public $queries;
        /**
         * The relation between the queries. Can be one of 'AND' or 'OR'.
         *
         * @since 3.2.0
         * @var string
         */
        public $relation;
        /**
         * Database table to query for the metadata.
         *
         * @since 4.1.0
         * @var string
         */
        public $meta_table;
        /**
         * Column in meta_table that represents the ID of the object the metadata belongs to.
         *
         * @since 4.1.0
         * @var string
         */
        public $meta_id_column;
        /**
         * Database table that where the metadata's objects are stored (eg $wpdb->users).
         *
         * @since 4.1.0
         * @var string
         */
        public $primary_table;
        /**
         * Column in primary_table that represents the ID of the object.
         *
         * @since 4.1.0
         * @var string
         */
        public $primary_id_column;
        /**
         * A flat list of table aliases used in JOIN clauses.
         *
         * @since 4.1.0
         * @var array
         */
        protected $table_aliases;
        /**
         * A flat list of clauses, keyed by clause 'name'.
         *
         * @since 4.2.0
         * @var array
         */
        protected $clauses;
        /**
         * Whether the query contains any OR relations.
         *
         * @since 4.3.0
         * @var bool
         */
        protected $has_or_relation;

        public function __construct($meta_query = false) {}
        public function sanitize_query($queries) {}
        protected function is_first_order_clause($query) {}
        public function parse_query_vars($qv) {}
        public function get_cast_for_type($type = '') {}
/**
 * Filters the meta query's generated SQL.
 *
 * @since 3.1.0
 *
 * @param array  $sql               Array containing the query's JOIN and WHERE clauses.
 * @param array  $queries           Array of meta queries.
 * @param string $type              Type of meta.
 * @param string $primary_table     Primary table.
 * @param string $primary_id_column Primary column ID.
 * @param object $context           The main query object.
 */
        public function get_sql(/**
 * Filters the meta query's generated SQL.
 *
 * @since 3.1.0
 *
 * @param array  $sql               Array containing the query's JOIN and WHERE clauses.
 * @param array  $queries           Array of meta queries.
 * @param string $type              Type of meta.
 * @param string $primary_table     Primary table.
 * @param string $primary_id_column Primary column ID.
 * @param object $context           The main query object.
 */
$type, /**
 * Filters the meta query's generated SQL.
 *
 * @since 3.1.0
 *
 * @param array  $sql               Array containing the query's JOIN and WHERE clauses.
 * @param array  $queries           Array of meta queries.
 * @param string $type              Type of meta.
 * @param string $primary_table     Primary table.
 * @param string $primary_id_column Primary column ID.
 * @param object $context           The main query object.
 */
$primary_table, /**
 * Filters the meta query's generated SQL.
 *
 * @since 3.1.0
 *
 * @param array  $sql               Array containing the query's JOIN and WHERE clauses.
 * @param array  $queries           Array of meta queries.
 * @param string $type              Type of meta.
 * @param string $primary_table     Primary table.
 * @param string $primary_id_column Primary column ID.
 * @param object $context           The main query object.
 */
$primary_id_column, /**
 * Filters the meta query's generated SQL.
 *
 * @since 3.1.0
 *
 * @param array  $sql               Array containing the query's JOIN and WHERE clauses.
 * @param array  $queries           Array of meta queries.
 * @param string $type              Type of meta.
 * @param string $primary_table     Primary table.
 * @param string $primary_id_column Primary column ID.
 * @param object $context           The main query object.
 */
$context = null) {}
        /**
         * Generate SQL clauses to be appended to a main query.
         *
         * Called by the public WP_Meta_Query::get_sql(), this method is abstracted
         * out to maintain parity with the other Query classes.
         *
         * @since 4.1.0
         *
         * @return array {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_clauses() {}
        protected function get_sql_for_query($query, $depth = 0) {}
        public function get_sql_for_clause($clause, $parent_query, $clause_key = '') {}
        /**
         * Get a flattened list of sanitized meta clauses.
         *
         * This array should be used for clause lookup, as when the table alias and CAST type must be determined for
         * a value of 'orderby' corresponding to a meta clause.
         *
         * @since 4.2.0
         *
         * @return array Meta clauses.
         */
        public function get_clauses() {}
/**
 * Filters the table alias identified as compatible with the current clause.
 *
 * @since 4.1.0
 *
 * @param string|bool $alias        Table alias, or false if none was found.
 * @param array       $clause       First-order query clause.
 * @param array       $parent_query Parent of $clause.
 * @param object      $this         WP_Meta_Query object.
 */
        protected function find_compatible_table_alias(/**
 * Filters the table alias identified as compatible with the current clause.
 *
 * @since 4.1.0
 *
 * @param string|bool $alias        Table alias, or false if none was found.
 * @param array       $clause       First-order query clause.
 * @param array       $parent_query Parent of $clause.
 * @param object      $this         WP_Meta_Query object.
 */
$clause, /**
 * Filters the table alias identified as compatible with the current clause.
 *
 * @since 4.1.0
 *
 * @param string|bool $alias        Table alias, or false if none was found.
 * @param array       $clause       First-order query clause.
 * @param array       $parent_query Parent of $clause.
 * @param object      $this         WP_Meta_Query object.
 */
$parent_query) {}
        /**
         * Checks whether the current query has any OR relations.
         *
         * In some cases, the presence of an OR relation somewhere in the query will require
         * the use of a `DISTINCT` or `GROUP BY` keyword in the `SELECT` clause. The current
         * method can be used in these cases to determine whether such a clause is necessary.
         *
         * @since 4.3.0
         *
         * @return bool True if the query contains any `OR` relations, otherwise false.
         */
        public function has_or_relation() {}
    }

    /**
     * Core class used to store translated data for a locale.
     *
     * @since 2.1.0
     * @since 4.6.0 Moved to its own file from wp-includes/locale.php.
     */
    class WP_Locale {
        /**
         * Stores the translated strings for the full weekday names.
         *
         * @since 2.1.0
         * @var array
         */
        public $weekday;
        /**
         * Stores the translated strings for the one character weekday names.
         *
         * There is a hack to make sure that Tuesday and Thursday, as well
         * as Sunday and Saturday, don't conflict. See init() method for more.
         *
         * @see WP_Locale::init() for how to handle the hack.
         *
         * @since 2.1.0
         * @var array
         */
        public $weekday_initial;
        /**
         * Stores the translated strings for the abbreviated weekday names.
         *
         * @since 2.1.0
         * @var array
         */
        public $weekday_abbrev;
        /**
         * Stores the translated strings for the full month names.
         *
         * @since 2.1.0
         * @var array
         */
        public $month;
        /**
         * Stores the translated strings for the month names in genitive case, if the locale specifies.
         *
         * @since 4.4.0
         * @var array
         */
        public $month_genitive;
        /**
         * Stores the translated strings for the abbreviated month names.
         *
         * @since 2.1.0
         * @var array
         */
        public $month_abbrev;
        /**
         * Stores the translated strings for 'am' and 'pm'.
         *
         * Also the capitalized versions.
         *
         * @since 2.1.0
         * @var array
         */
        public $meridiem;
        /**
         * The text direction of the locale language.
         *
         * Default is left to right 'ltr'.
         *
         * @since 2.1.0
         * @var string
         */
        public $text_direction;
        /**
         * The thousands separator and decimal point values used for localizing numbers.
         *
         * @since 2.3.0
         * @var array
         */
        public $number_format;

        /**
         * Constructor which calls helper methods to set up object variables.
         *
         * @since 2.1.0
         */
        public function __construct() {}
        /**
         * Sets up the translated strings and object properties.
         *
         * The method creates the translatable strings for various
         * calendar elements. Which allows for specifying locale
         * specific calendar names and text direction.
         *
         * @since 2.1.0
         *
         * @global string $text_direction
         */
        public function init() {}
        /**
         * Outputs an admin notice if the /build directory must be used for RTL.
         *
         * @since 3.8.0
         */
        public function rtl_src_admin_notice() {}
        public function get_weekday($weekday_number) {}
        public function get_weekday_initial($weekday_name) {}
        public function get_weekday_abbrev($weekday_name) {}
        public function get_month($month_number) {}
        public function get_month_abbrev($month_name) {}
        public function get_meridiem($meridiem) {}
        /**
         * Global variables are deprecated.
         *
         * For backward compatibility only.
         *
         * @deprecated For backward compatibility only.
         *
         * @global array $weekday
         * @global array $weekday_initial
         * @global array $weekday_abbrev
         * @global array $month
         * @global array $month_abbrev
         *
         * @since 2.1.0
         */
        public function register_globals() {}
        /**
         * Checks if current locale is RTL.
         *
         * @since 3.0.0
         * @return bool Whether locale is RTL.
         */
        public function is_rtl() {}
        /**
         * Register date/time format strings for general POT.
         *
         * Private, unused method to add some date/time formats translated
         * on wp-admin/options-general.php to the general POT that would
         * otherwise be added to the admin POT.
         *
         * @since 3.6.0
         */
        public function _strings_for_pot() {}
    }

    /**
     * Core class used to implement the Toolbar API.
     *
     * @since 3.1.0
     */
    class WP_Admin_Bar {
        private $nodes;
        private $bound;
        public $user;

        public function __get($name) {}
        /**
         */
        public function initialize() {}
        public function add_menu($node) {}
        public function remove_menu($id) {}
        public function add_node($args) {}
        protected function _set_node($args) {}
        public function get_node($id) {}
        protected function _get_node($id) {}
        /**
         * @return array|void
         */
        public function get_nodes() {}
        /**
         * @return array|void
         */
        protected function _get_nodes() {}
        public function add_group($args) {}
        public function remove_node($id) {}
        protected function _unset_node($id) {}
        /**
         */
        public function render() {}
        /**
         * @return object|void
         */
        protected function _bind() {}
        protected function _render($root) {}
        protected function _render_container($node) {}
        protected function _render_group($node) {}
        protected function _render_item($node) {}
        public function recursive_render($id, $node) {}
        /**
         */
        public function add_menus() {}
    }

    /**
     * Class WP_Block_Parser_Block
     *
     * Holds the block structure in memory
     *
     * @since 3.8.0
     */
    class WP_Block_Parser_Block {
        /**
         * Name of block
         *
         * @example "core/paragraph"
         *
         * @since 3.8.0
         * @var string
         */
        public $blockName;
        /**
         * Optional set of attributes from block comment delimiters
         *
         * @example null
         * @example array( 'columns' => 3 )
         *
         * @since 3.8.0
         * @var array|null
         */
        public $attrs;
        /**
         * List of inner blocks (of this same class)
         *
         * @since 3.8.0
         * @var WP_Block_Parser_Block[]
         */
        public $innerBlocks;
        /**
         * Resultant HTML from inside block comment delimiters
         * after removing inner blocks
         *
         * @example "...Just <!-- wp:test /--> testing..." -> "Just testing..."
         *
         * @since 3.8.0
         * @var string
         */
        public $innerHTML;
        /**
         * List of string fragments and null markers where inner blocks were found
         *
         * @example array(
         *   'innerHTML'    => 'BeforeInnerAfter',
         *   'innerBlocks'  => array( block, block ),
         *   'innerContent' => array( 'Before', null, 'Inner', null, 'After' ),
         * )
         *
         * @since 4.2.0
         * @var array
         */
        public $innerContent;

        function __construct($name, $attrs, $innerBlocks, $innerHTML, $innerContent) {}
    }

    /**
     * Class WP_Block_Parser_Frame
     *
     * Holds partial blocks in memory while parsing
     *
     * @internal
     * @since 3.8.0
     */
    class WP_Block_Parser_Frame {
        /**
         * Full or partial block
         *
         * @since 3.8.0
         * @var WP_Block_Parser_Block
         */
        public $block;
        /**
         * Byte offset into document for start of parse token
         *
         * @since 3.8.0
         * @var int
         */
        public $token_start;
        /**
         * Byte length of entire parse token string
         *
         * @since 3.8.0
         * @var int
         */
        public $token_length;
        /**
         * Byte offset into document for after parse token ends
         * (used during reconstruction of stack into parse production)
         *
         * @since 3.8.0
         * @var int
         */
        public $prev_offset;
        /**
         * Byte offset into document where leading HTML before token starts
         *
         * @since 3.8.0
         * @var int
         */
        public $leading_html_start;

        function __construct($block, $token_start, $token_length, $prev_offset = null, $leading_html_start = null) {}
    }

    /**
     * Class WP_Block_Parser
     *
     * Parses a document and constructs a list of parsed block objects
     *
     * @since 3.8.0
     * @since 4.0.0 returns arrays not objects, all attributes are arrays
     */
    class WP_Block_Parser {
        /**
         * Input document being parsed
         *
         * @example "Pre-text\n<!-- wp:paragraph -->This is inside a block!<!-- /wp:paragraph -->"
         *
         * @since 3.8.0
         * @var string
         */
        public $document;
        /**
         * Tracks parsing progress through document
         *
         * @since 3.8.0
         * @var int
         */
        public $offset;
        /**
         * List of parsed blocks
         *
         * @since 3.8.0
         * @var WP_Block_Parser_Block[]
         */
        public $output;
        /**
         * Stack of partially-parsed structures in memory during parse
         *
         * @since 3.8.0
         * @var WP_Block_Parser_Frame[]
         */
        public $stack;
        /**
         * Empty associative array, here due to PHP quirks
         *
         * @since 4.4.0
         * @var array empty associative array
         */
        public $empty_attrs;

        function parse($document) {}
        /**
         * Processes the next token from the input document
         * and returns whether to proceed eating more tokens
         *
         * This is the "next step" function that essentially
         * takes a token as its input and decides what to do
         * with that token before descending deeper into a
         * nested block tree or continuing along the document
         * or breaking out of a level of nesting.
         *
         * @internal
         * @since 3.8.0
         * @return bool
         */
        function proceed() {}
        /**
         * Scans the document from where we last left off
         * and finds the next valid token to parse if it exists
         *
         * Returns the type of the find: kind of find, block information, attributes
         *
         * @internal
         * @since 3.8.0
         * @since 4.6.1 fixed a bug in attribute parsing which caused catastrophic backtracking on invalid block comments
         * @return array
         */
        function next_token() {}
        function freeform($innerHTML) {}
        function add_freeform($length = null) {}
        function add_inner_block(WP_Block_Parser_Block $block, $token_start, $token_length, $last_offset = null) {}
        function add_block_from_stack($end_offset = null) {}
    }

    /**
     * API for easily embedding rich media such as videos and images into content.
     *
     * @package WordPress
     * @subpackage Embed
     * @since 2.9.0
     */
    class WP_Embed {
        public $handlers;
        public $post_ID;
        public $usecache;
        public $linkifunknown;
        public $last_attr;
        public $last_url;
        /**
         * When a URL cannot be embedded, return false instead of returning a link
         * or the URL.
         *
         * Bypasses the {@see 'embed_maybe_make_link'} filter.
         *
         * @var bool
         */
        public $return_false_on_fail;

        /**
         * Constructor
         */
        public function __construct() {}
        public function run_shortcode($content) {}
        /**
         * If a post/page was saved, then output JavaScript to make
         * an Ajax request that will call WP_Embed::cache_oembed().
         */
        public function maybe_run_ajax_cache() {}
        public function register_handler($id, $regex, $callback, $priority = 10) {}
        public function unregister_handler($id, $priority = 10) {}
/** This filter is documented in wp-includes/class-wp-embed.php */
        public function shortcode(/** This filter is documented in wp-includes/class-wp-embed.php */
$attr, /** This filter is documented in wp-includes/class-wp-embed.php */
$url = '') {}
        public function delete_oembed_caches($post_ID) {}
/**
 * Filters the array of post types to cache oEmbed results for.
 *
 * @since 2.9.0
 *
 * @param string[] $post_types Array of post type names to cache oEmbed results for. Defaults to post types with `show_ui` set to true.
 */
        public function cache_oembed(/**
 * Filters the array of post types to cache oEmbed results for.
 *
 * @since 2.9.0
 *
 * @param string[] $post_types Array of post type names to cache oEmbed results for. Defaults to post types with `show_ui` set to true.
 */
$post_ID) {}
        public function autoembed($content) {}
        public function autoembed_callback($match) {}
/**
 * Filters the returned, maybe-linked embed URL.
 *
 * @since 2.9.0
 *
 * @param string $output The linked or original URL.
 * @param string $url    The original URL.
 */
        public function maybe_make_link(/**
 * Filters the returned, maybe-linked embed URL.
 *
 * @since 2.9.0
 *
 * @param string $output The linked or original URL.
 * @param string $url    The original URL.
 */
$url) {}
        public function find_oembed_post_id($cache_key) {}
    }

    /**
     * Core base class extended to register items.
     *
     * @since 2.6.0
     *
     * @see _WP_Dependency
     */
    class WP_Dependencies {
        /**
         * An array of registered handle objects.
         *
         * @since 2.6.8
         * @var array
         */
        public $registered;
        /**
         * An array of queued _WP_Dependency handle objects.
         *
         * @since 2.6.8
         * @var array
         */
        public $queue;
        /**
         * An array of _WP_Dependency handle objects to queue.
         *
         * @since 2.6.0
         * @var array
         */
        public $to_do;
        /**
         * An array of _WP_Dependency handle objects already queued.
         *
         * @since 2.6.0
         * @var array
         */
        public $done;
        /**
         * An array of additional arguments passed when a handle is registered.
         *
         * Arguments are appended to the item query string.
         *
         * @since 2.6.0
         * @var array
         */
        public $args;
        /**
         * An array of handle groups to enqueue.
         *
         * @since 2.8.0
         * @var array
         */
        public $groups;
        /**
         * A handle group to enqueue.
         *
         * @since 2.8.0
         * @deprecated 4.5.0
         * @var int
         */
        public $group;

        public function do_items($handles = false, $group = false) {}
        public function do_item($handle) {}
        public function all_deps($handles, $recursion = false, $group = false) {}
        public function add($handle, $src, $deps = array( ), $ver = false, $args = null) {}
        public function add_data($handle, $key, $value) {}
        public function get_data($handle, $key) {}
        public function remove($handles) {}
        public function enqueue($handles) {}
        public function dequeue($handles) {}
        protected function recurse_deps($queue, $handle) {}
        public function query($handle, $list = 'registered') {}
        public function set_group($handle, $recursion, $group) {}
    }

    /**
     * WordPress Error class.
     *
     * Container for checking for WordPress errors and error messages. Return
     * WP_Error and use is_wp_error() to check if this class is returned. Many
     * core WordPress functions pass this class in the event of an error and
     * if not handled properly will result in code errors.
     *
     * @since 2.1.0
     */
    class WP_Error {
        /**
         * Stores the list of errors.
         *
         * @since 2.1.0
         * @var array
         */
        public $errors;
        /**
         * Stores the list of data for error codes.
         *
         * @since 2.1.0
         * @var array
         */
        public $error_data;

        public function __construct($code = '', $message = '', $data = '') {}
        /**
         * Retrieve all error codes.
         *
         * @since 2.1.0
         *
         * @return array List of error codes, if available.
         */
        public function get_error_codes() {}
        /**
         * Retrieve first error code available.
         *
         * @since 2.1.0
         *
         * @return string|int Empty string, if no error codes.
         */
        public function get_error_code() {}
        public function get_error_messages($code = '') {}
        public function get_error_message($code = '') {}
        public function get_error_data($code = '') {}
        /**
         * Verify if the instance contains errors.
         *
         * @since 5.1.0
         *
         * @return bool
         */
        public function has_errors() {}
        public function add($code, $message, $data = '') {}
        public function add_data($data, $code = '') {}
        public function remove($code) {}
    }

    /**
     * Customize Section class.
     *
     * A UI container for controls, managed by the WP_Customize_Manager class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Manager
     */
    class WP_Customize_Section {
        /**
         * Incremented with each new class instantiation, then stored in $instance_number.
         *
         * Used when sorting two instances whose priorities are equal.
         *
         * @since 4.1.0
         * @var int
         */
        static protected $instance_count;
        /**
         * Order in which this instance was created in relation to other instances.
         *
         * @since 4.1.0
         * @var int
         */
        public $instance_number;
        /**
         * WP_Customize_Manager instance.
         *
         * @since 3.4.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Unique identifier.
         *
         * @since 3.4.0
         * @var string
         */
        public $id;
        /**
         * Priority of the section which informs load order of sections.
         *
         * @since 3.4.0
         * @var integer
         */
        public $priority;
        /**
         * Panel in which to show the section, making it a sub-section.
         *
         * @since 4.0.0
         * @var string
         */
        public $panel;
        /**
         * Capability required for the section.
         *
         * @since 3.4.0
         * @var string
         */
        public $capability;
        /**
         * Theme feature support for the section.
         *
         * @since 3.4.0
         * @var string|array
         */
        public $theme_supports;
        /**
         * Title of the section to show in UI.
         *
         * @since 3.4.0
         * @var string
         */
        public $title;
        /**
         * Description to show in the UI.
         *
         * @since 3.4.0
         * @var string
         */
        public $description;
        /**
         * Customizer controls for this section.
         *
         * @since 3.4.0
         * @var array
         */
        public $controls;
        /**
         * Type of this section.
         *
         * @since 4.1.0
         * @var string
         */
        public $type;
        /**
         * Active callback.
         *
         * @since 4.1.0
         *
         * @see WP_Customize_Section::active()
         *
         * @var callable Callback is called with one argument, the instance of
         *               WP_Customize_Section, and returns bool to indicate whether
         *               the section is active (such as it relates to the URL currently
         *               being previewed).
         */
        public $active_callback;
        /**
         * Show the description or hide it behind the help icon.
         *
         * @since 4.7.0
         *
         * @var bool Indicates whether the Section's description should be
         *           hidden behind a help icon ("?") in the Section header,
         *           similar to how help icons are displayed on Panels.
         */
        public $description_hidden;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Filters response of WP_Customize_Section::active().
         *
         * @since 4.1.0
         *
         * @param bool                 $active  Whether the Customizer section is active.
         * @param WP_Customize_Section $section WP_Customize_Section instance.
         */
        public function active() {}
        /**
         * Default callback used when invoking WP_Customize_Section::active().
         *
         * Subclasses can override this with their specific logic, or they may provide
         * an 'active_callback' argument to the constructor.
         *
         * @since 4.1.0
         *
         * @return true Always true.
         */
        public function active_callback() {}
        /**
         * Gather the parameters passed to client JavaScript via JSON.
         *
         * @since 4.1.0
         *
         * @return array The array to be exported to the client as JSON.
         */
        public function json() {}
        /**
         * Checks required user capabilities and whether the theme has the
         * feature support required by the section.
         *
         * @since 3.4.0
         *
         * @return bool False if theme doesn't support the section or user doesn't have the capability.
         */
        public function check_capabilities() {}
        /**
         * Get the section's content for insertion into the Customizer pane.
         *
         * @since 4.1.0
         *
         * @return string Contents of the section.
         */
        public function get_content() {}
        /**
         * Fires before rendering a specific Customizer section.
         *
         * The dynamic portion of the hook name, `$this->id`, refers to the ID
         * of the specific Customizer section to be rendered.
         *
         * @since 3.4.0
         */
        public function maybe_render() {}
        /**
         * Render the section UI in a subclass.
         *
         * Sections are now rendered in JS by default, see WP_Customize_Section::print_template().
         *
         * @since 3.4.0
         */
        protected function render() {}
        /**
         * Render the section's JS template.
         *
         * This function is only run for section types that have been registered with
         * WP_Customize_Manager::register_section_type().
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Manager::render_template()
         */
        public function print_template() {}
        /**
         * An Underscore (JS) template for rendering this section.
         *
         * Class variables for this section class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Section::json().
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Section::print_template()
         */
        protected function render_template() {}
    }

    /**
     * Class for generating SQL clauses that filter a primary query according to date.
     *
     * WP_Date_Query is a helper that allows primary query classes, such as WP_Query, to filter
     * their results by date columns, by generating `WHERE` subclauses to be attached to the
     * primary SQL query string.
     *
     * Attempting to filter by an invalid date value (eg month=13) will generate SQL that will
     * return no results. In these cases, a _doing_it_wrong() error notice is also thrown.
     * See WP_Date_Query::validate_date_values().
     *
     * @link https://codex.wordpress.org/Function_Reference/WP_Query Codex page.
     *
     * @since 3.7.0
     */
    class WP_Date_Query {
        /**
         * Array of date queries.
         *
         * See WP_Date_Query::__construct() for information on date query arguments.
         *
         * @since 3.7.0
         * @var array
         */
        public $queries;
        /**
         * The default relation between top-level queries. Can be either 'AND' or 'OR'.
         *
         * @since 3.7.0
         * @var string
         */
        public $relation;
        /**
         * The column to query against. Can be changed via the query arguments.
         *
         * @since 3.7.0
         * @var string
         */
        public $column;
        /**
         * The value comparison operator. Can be changed via the query arguments.
         *
         * @since 3.7.0
         * @var array
         */
        public $compare;
        /**
         * Supported time-related parameter keys.
         *
         * @since 4.1.0
         * @var array
         */
        public $time_keys;

        public function __construct($date_query, $default_column = 'post_date') {}
        public function sanitize_query($queries, $parent_query = null) {}
        protected function is_first_order_clause($query) {}
        public function get_compare($query) {}
        public function validate_date_values($date_query = array( )) {}
/**
 * Filters the list of valid date query columns.
 *
 * @since 3.7.0
 * @since 4.1.0 Added 'user_registered' to the default recognized columns.
 *
 * @param string[] $valid_columns An array of valid date query columns. Defaults
 *                                are 'post_date', 'post_date_gmt', 'post_modified',
 *                                'post_modified_gmt', 'comment_date', 'comment_date_gmt',
 *                                'user_registered'
 */
        public function validate_column(/**
 * Filters the list of valid date query columns.
 *
 * @since 3.7.0
 * @since 4.1.0 Added 'user_registered' to the default recognized columns.
 *
 * @param string[] $valid_columns An array of valid date query columns. Defaults
 *                                are 'post_date', 'post_date_gmt', 'post_modified',
 *                                'post_modified_gmt', 'comment_date', 'comment_date_gmt',
 *                                'user_registered'
 */
$column) {}
        /**
         * Generate WHERE clause to be appended to a main query.
         *
         * @since 3.7.0
         *
         * @return string MySQL WHERE clause.
         */
        public function get_sql() {}
        /**
         * Generate SQL clauses to be appended to a main query.
         *
         * Called by the public WP_Date_Query::get_sql(), this method is abstracted
         * out to maintain parity with the other Query classes.
         *
         * @since 4.1.0
         *
         * @return array {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_clauses() {}
        protected function get_sql_for_query($query, $depth = 0) {}
        protected function get_sql_for_subquery($query) {}
        protected function get_sql_for_clause($query, $parent_query) {}
        public function build_value($compare, $value) {}
        public function build_mysql_datetime($datetime, $default_to_max = false) {}
        public function build_time_query($column, $compare, $hour = null, $minute = null, $second = null) {}
    }

    /**
     * Portable PHP password hashing framework.
     *
     * @package phpass
     * @version 0.3 / WordPress
     * @link http://www.openwall.com/phpass/
     * @since 2.5.0
     */
    class PasswordHash {
        public $itoa64;
        public $iteration_count_log2;
        public $portable_hashes;
        public $random_state;

        function __construct($iteration_count_log2, $portable_hashes) {}
        public function PasswordHash($iteration_count_log2, $portable_hashes) {}
        function get_random_bytes($count) {}
        function encode64($input, $count) {}
        function gensalt_private($input) {}
        function crypt_private($password, $setting) {}
        function gensalt_extended($input) {}
        function gensalt_blowfish($input) {}
        function HashPassword($password) {}
        function CheckPassword($password, $stored_hash) {}
    }

    /**
     * Customize Control class.
     *
     * @since 3.4.0
     */
    class WP_Customize_Control {
        /**
         * Incremented with each new class instantiation, then stored in $instance_number.
         *
         * Used when sorting two instances whose priorities are equal.
         *
         * @since 4.1.0
         * @var int
         */
        static protected $instance_count;
        /**
         * Order in which this instance was created in relation to other instances.
         *
         * @since 4.1.0
         * @var int
         */
        public $instance_number;
        /**
         * Customizer manager.
         *
         * @since 3.4.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Control ID.
         *
         * @since 3.4.0
         * @var string
         */
        public $id;
        /**
         * All settings tied to the control.
         *
         * @since 3.4.0
         * @var array
         */
        public $settings;
        /**
         * The primary setting for the control (if there is one).
         *
         * @since 3.4.0
         * @var string
         */
        public $setting;
        /**
         * Capability required to use this control.
         *
         * Normally this is empty and the capability is derived from the capabilities
         * of the associated `$settings`.
         *
         * @since 4.5.0
         * @var string
         */
        public $capability;
        /**
         * Order priority to load the control in Customizer.
         *
         * @since 3.4.0
         * @var int
         */
        public $priority;
        /**
         * Section the control belongs to.
         *
         * @since 3.4.0
         * @var string
         */
        public $section;
        /**
         * Label for the control.
         *
         * @since 3.4.0
         * @var string
         */
        public $label;
        /**
         * Description for the control.
         *
         * @since 4.0.0
         * @var string
         */
        public $description;
        /**
         * List of choices for 'radio' or 'select' type controls, where values are the keys, and labels are the values.
         *
         * @since 3.4.0
         * @var array
         */
        public $choices;
        /**
         * List of custom input attributes for control output, where attribute names are the keys and values are the values.
         *
         * Not used for 'checkbox', 'radio', 'select', 'textarea', or 'dropdown-pages' control types.
         *
         * @since 4.0.0
         * @var array
         */
        public $input_attrs;
        /**
         * Show UI for adding new content, currently only used for the dropdown-pages control.
         *
         * @since 4.7.0
         * @var bool
         */
        public $allow_addition;
        /**
         * @deprecated It is better to just call the json() method
         * @since 3.4.0
         * @var array
         */
        public $json;
        /**
         * Control's Type.
         *
         * @since 3.4.0
         * @var string
         */
        public $type;
        /**
         * Callback.
         *
         * @since 4.0.0
         *
         * @see WP_Customize_Control::active()
         *
         * @var callable Callback is called with one argument, the instance of
         *               WP_Customize_Control, and returns bool to indicate whether
         *               the control is active (such as it relates to the URL
         *               currently being previewed).
         */
        public $active_callback;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Enqueue control related scripts/styles.
         *
         * @since 3.4.0
         */
        public function enqueue() {}
        /**
         * Check whether control is active to current Customizer preview.
         *
         * @since 4.0.0
         *
         * @return bool Whether the control is active to the current preview.
         */
        public function active() {}
        /**
         * Default callback used when invoking WP_Customize_Control::active().
         *
         * Subclasses can override this with their specific logic, or they may
         * provide an 'active_callback' argument to the constructor.
         *
         * @since 4.0.0
         *
         * @return true Always true.
         */
        public function active_callback() {}
        public function value($setting_key = 'default') {}
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 3.4.0
         */
        public function to_json() {}
        /**
         * Get the data to export to the client via JSON.
         *
         * @since 4.1.0
         *
         * @return array Array of parameters passed to the JavaScript.
         */
        public function json() {}
        /**
         * Checks if the user can use this control.
         *
         * Returns false if the user cannot manipulate one of the associated settings,
         * or if one of the associated settings does not exist. Also returns false if
         * the associated section does not exist or if its capability check returns
         * false.
         *
         * @since 3.4.0
         *
         * @return bool False if theme doesn't support the control or user doesn't have the required permissions, otherwise true.
         */
        public function check_capabilities() {}
        /**
         * Get the control's content for insertion into the Customizer pane.
         *
         * @since 4.1.0
         *
         * @return string Contents of the control.
         */
        public function get_content() {}
        /**
         * Check capabilities and render the control.
         *
         * @since 3.4.0
         * @uses WP_Customize_Control::render()
         */
        public function maybe_render() {}
        /**
         * Renders the control wrapper and calls $this->render_content() for the internals.
         *
         * @since 3.4.0
         */
        protected function render() {}
        public function get_link($setting_key = 'default') {}
        public function link($setting_key = 'default') {}
        /**
         * Render the custom attributes for the control's input element.
         *
         * @since 4.0.0
         */
        public function input_attrs() {}
        /**
         * Render the control's content.
         *
         * Allows the content to be overridden without having to rewrite the wrapper in `$this::render()`.
         *
         * Supports basic input types `text`, `checkbox`, `textarea`, `radio`, `select` and `dropdown-pages`.
         * Additional input types such as `email`, `url`, `number`, `hidden` and `date` are supported implicitly.
         *
         * Control content can alternately be rendered in JS. See WP_Customize_Control::print_template().
         *
         * @since 3.4.0
         */
        protected function render_content() {}
        /**
         * Render the control's JS template.
         *
         * This function is only run for control types that have been registered with
         * WP_Customize_Manager::register_control_type().
         *
         * In the future, this will also print the template for the control's container
         * element and be override-able.
         *
         * @since 4.1.0
         */
        public function print_template() {}
        /**
         * An Underscore (JS) template for this control's content (but not its container).
         *
         * Class variables for this control class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Control::to_json().
         *
         * @see WP_Customize_Control::print_template()
         *
         * @since 4.1.0
         */
        protected function content_template() {}
    }

    /**
     * List utility.
     *
     * Utility class to handle operations on an array of objects.
     *
     * @since 4.7.0
     */
    class WP_List_Util {
        /**
         * The input array.
         *
         * @since 4.7.0
         * @var array
         */
        private $input;
        /**
         * The output array.
         *
         * @since 4.7.0
         * @var array
         */
        private $output;
        /**
         * Temporary arguments for sorting.
         *
         * @since 4.7.0
         * @var array
         */
        private $orderby;

        public function __construct($input) {}
        /**
         * Returns the original input array.
         *
         * @since 4.7.0
         *
         * @return array The input array.
         */
        public function get_input() {}
        /**
         * Returns the output array.
         *
         * @since 4.7.0
         *
         * @return array The output array.
         */
        public function get_output() {}
        public function filter($args = array( ), $operator = 'AND') {}
        public function pluck($field, $index_key = null) {}
        public function sort($orderby = array( ), $order = 'ASC', $preserve_keys = false) {}
        private function sort_callback($a, $b) {}
    }

    /**
     * Send XML response back to Ajax request.
     *
     * @package WordPress
     * @since 2.1.0
     */
    class WP_Ajax_Response {
        /**
         * Store XML responses to send.
         *
         * @since 2.1.0
         * @var array
         */
        public $responses;

        public function __construct($args = '') {}
        public function add($args = '') {}
        /**
         * Display XML formatted responses.
         *
         * Sets the content type header to text/xml.
         *
         * @since 2.1.0
         */
        public function send() {}
    }

    /**
     * Core walker class used to create an HTML list of pages.
     *
     * @since 2.1.0
     *
     * @see Walker
     */
    class Walker_Page extends \walker {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type;
        /**
         * Database fields to use.
         *
         * @since 2.1.0
         * @var array
         *
         * @see Walker::$db_fields
         * @todo Decouple this.
         */
        public $db_fields;

        public function start_lvl($output, $depth = 0, $args = array( )) {}
        public function end_lvl($output, $depth = 0, $args = array( )) {}
/** This filter is documented in wp-includes/post-template.php */
        public function start_el(/** This filter is documented in wp-includes/post-template.php */
$output, /** This filter is documented in wp-includes/post-template.php */
$page, /** This filter is documented in wp-includes/post-template.php */
$depth = 0, /** This filter is documented in wp-includes/post-template.php */
$args = array( ), /** This filter is documented in wp-includes/post-template.php */
$current_page = 0) {}
        public function end_el($output, $page, $depth = 0, $args = array( )) {}
    }

    /**
     * Deprecated. Use WP_HTTP (http.php) instead.
     */
    class Snoopy {
        public $host;
        public $port;
        public $proxy_host;
        public $proxy_port;
        public $proxy_user;
        public $proxy_pass;
        public $agent;
        public $referer;
        public $cookies;
        public $rawheaders;
        public $maxredirs;
        public $lastredirectaddr;
        public $offsiteok;
        public $maxframes;
        public $expandlinks;
        public $passcookies;
        public $user;
        public $pass;
        public $accept;
        public $results;
        public $error;
        public $response_code;
        public $headers;
        public $maxlength;
        public $read_timeout;
        public $timed_out;
        public $status;
        public $temp_dir;
        public $curl_path;
        public $_maxlinelen;
        public $_httpmethod;
        public $_httpversion;
        public $_submit_method;
        public $_submit_type;
        public $_mime_boundary;
        public $_redirectaddr;
        public $_redirectdepth;
        public $_frameurls;
        public $_framedepth;
        public $_isproxy;
        public $_fp_timeout;

        function fetch($URI) {}
        function submit($URI, $formvars = "", $formfiles = "") {}
        function fetchlinks($URI) {}
        function fetchform($URI) {}
        function fetchtext($URI) {}
        function submitlinks($URI, $formvars = "", $formfiles = "") {}
        function submittext($URI, $formvars = "", $formfiles = "") {}
        function set_submit_multipart() {}
        function set_submit_normal() {}
        function _striplinks($document) {}
        function _stripform($document) {}
        function _striptext($document) {}
        function _expandlinks($links, $URI) {}
        function _httprequest($url, $fp, $URI, $http_method, $content_type = "", $body = "") {}
        function _httpsrequest($url, $URI, $http_method, $content_type = "", $body = "") {}
        function setcookies() {}
        function _check_timeout($fp) {}
        function _connect($fp) {}
        function _disconnect($fp) {}
        function _prepare_post_body($formvars, $formfiles) {}
    }

    /**
     * Core class used to implement an HTML list of nav menu items.
     *
     * @since 3.0.0
     *
     * @see Walker
     */
    class Walker_Nav_Menu extends \walker {
        /**
         * What the class handles.
         *
         * @since 3.0.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type;
        /**
         * Database fields to use.
         *
         * @since 3.0.0
         * @todo Decouple this.
         * @var array
         *
         * @see Walker::$db_fields
         */
        public $db_fields;

/**
 * Filters the CSS class(es) applied to a menu list element.
 *
 * @since 4.8.0
 *
 * @param string[] $classes Array of the CSS classes that are applied to the menu `<ul>` element.
 * @param stdClass $args    An object of `wp_nav_menu()` arguments.
 * @param int      $depth   Depth of menu item. Used for padding.
 */
        public function start_lvl(/**
 * Filters the CSS class(es) applied to a menu list element.
 *
 * @since 4.8.0
 *
 * @param string[] $classes Array of the CSS classes that are applied to the menu `<ul>` element.
 * @param stdClass $args    An object of `wp_nav_menu()` arguments.
 * @param int      $depth   Depth of menu item. Used for padding.
 */
$output, /**
 * Filters the CSS class(es) applied to a menu list element.
 *
 * @since 4.8.0
 *
 * @param string[] $classes Array of the CSS classes that are applied to the menu `<ul>` element.
 * @param stdClass $args    An object of `wp_nav_menu()` arguments.
 * @param int      $depth   Depth of menu item. Used for padding.
 */
$depth = 0, /**
 * Filters the CSS class(es) applied to a menu list element.
 *
 * @since 4.8.0
 *
 * @param string[] $classes Array of the CSS classes that are applied to the menu `<ul>` element.
 * @param stdClass $args    An object of `wp_nav_menu()` arguments.
 * @param int      $depth   Depth of menu item. Used for padding.
 */
$args = array( )) {}
        public function end_lvl($output, $depth = 0, $args = array( )) {}
/**
 * Filters a menu item's starting output.
 *
 * The menu item's starting output only includes `$args->before`, the opening `<a>`,
 * the menu item's title, the closing `</a>`, and `$args->after`. Currently, there is
 * no filter for modifying the opening and closing `<li>` for a menu item.
 *
 * @since 3.0.0
 *
 * @param string   $item_output The menu item's starting HTML output.
 * @param WP_Post  $item        Menu item data object.
 * @param int      $depth       Depth of menu item. Used for padding.
 * @param stdClass $args        An object of wp_nav_menu() arguments.
 */
        public function start_el(/**
 * Filters a menu item's starting output.
 *
 * The menu item's starting output only includes `$args->before`, the opening `<a>`,
 * the menu item's title, the closing `</a>`, and `$args->after`. Currently, there is
 * no filter for modifying the opening and closing `<li>` for a menu item.
 *
 * @since 3.0.0
 *
 * @param string   $item_output The menu item's starting HTML output.
 * @param WP_Post  $item        Menu item data object.
 * @param int      $depth       Depth of menu item. Used for padding.
 * @param stdClass $args        An object of wp_nav_menu() arguments.
 */
$output, /**
 * Filters a menu item's starting output.
 *
 * The menu item's starting output only includes `$args->before`, the opening `<a>`,
 * the menu item's title, the closing `</a>`, and `$args->after`. Currently, there is
 * no filter for modifying the opening and closing `<li>` for a menu item.
 *
 * @since 3.0.0
 *
 * @param string   $item_output The menu item's starting HTML output.
 * @param WP_Post  $item        Menu item data object.
 * @param int      $depth       Depth of menu item. Used for padding.
 * @param stdClass $args        An object of wp_nav_menu() arguments.
 */
$item, /**
 * Filters a menu item's starting output.
 *
 * The menu item's starting output only includes `$args->before`, the opening `<a>`,
 * the menu item's title, the closing `</a>`, and `$args->after`. Currently, there is
 * no filter for modifying the opening and closing `<li>` for a menu item.
 *
 * @since 3.0.0
 *
 * @param string   $item_output The menu item's starting HTML output.
 * @param WP_Post  $item        Menu item data object.
 * @param int      $depth       Depth of menu item. Used for padding.
 * @param stdClass $args        An object of wp_nav_menu() arguments.
 */
$depth = 0, /**
 * Filters a menu item's starting output.
 *
 * The menu item's starting output only includes `$args->before`, the opening `<a>`,
 * the menu item's title, the closing `</a>`, and `$args->after`. Currently, there is
 * no filter for modifying the opening and closing `<li>` for a menu item.
 *
 * @since 3.0.0
 *
 * @param string   $item_output The menu item's starting HTML output.
 * @param WP_Post  $item        Menu item data object.
 * @param int      $depth       Depth of menu item. Used for padding.
 * @param stdClass $args        An object of wp_nav_menu() arguments.
 */
$args = array( ), /**
 * Filters a menu item's starting output.
 *
 * The menu item's starting output only includes `$args->before`, the opening `<a>`,
 * the menu item's title, the closing `</a>`, and `$args->after`. Currently, there is
 * no filter for modifying the opening and closing `<li>` for a menu item.
 *
 * @since 3.0.0
 *
 * @param string   $item_output The menu item's starting HTML output.
 * @param WP_Post  $item        Menu item data object.
 * @param int      $depth       Depth of menu item. Used for padding.
 * @param stdClass $args        An object of wp_nav_menu() arguments.
 */
$id = 0) {}
        public function end_el($output, $item, $depth = 0, $args = array( )) {}
    }

    /**
     * Core class used to organize comments as instantiated objects with defined members.
     *
     * @since 4.4.0
     */
    final class WP_Comment {
        /**
         * Comment ID.
         *
         * @since 4.4.0
         * @var int
         */
        public $comment_ID;
        /**
         * ID of the post the comment is associated with.
         *
         * @since 4.4.0
         * @var int
         */
        public $comment_post_ID;
        /**
         * Comment author name.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_author;
        /**
         * Comment author email address.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_author_email;
        /**
         * Comment author URL.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_author_url;
        /**
         * Comment author IP address (IPv4 format).
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_author_IP;
        /**
         * Comment date in YYYY-MM-DD HH:MM:SS format.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_date;
        /**
         * Comment GMT date in YYYY-MM-DD HH::MM:SS format.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_date_gmt;
        /**
         * Comment content.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_content;
        /**
         * Comment karma count.
         *
         * @since 4.4.0
         * @var int
         */
        public $comment_karma;
        /**
         * Comment approval status.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_approved;
        /**
         * Comment author HTTP user agent.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_agent;
        /**
         * Comment type.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_type;
        /**
         * Parent comment ID.
         *
         * @since 4.4.0
         * @var int
         */
        public $comment_parent;
        /**
         * Comment author ID.
         *
         * @since 4.4.0
         * @var int
         */
        public $user_id;
        /**
         * Comment children.
         *
         * @since 4.4.0
         * @var array
         */
        protected $children;
        /**
         * Whether children have been populated for this comment object.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $populated_children;
        /**
         * Post fields.
         *
         * @since 4.4.0
         * @var array
         */
        protected $post_fields;

        public static function get_instance($id) {}
        public function __construct($comment) {}
        /**
         * Convert object to array.
         *
         * @since 4.4.0
         *
         * @return array Object as array.
         */
        public function to_array() {}
        public function get_children($args = array( )) {}
        public function add_child(WP_Comment $child) {}
        public function get_child($child_id) {}
        public function populated_children($set) {}
        public function __isset($name) {}
        public function __get($name) {}
    }

    /**
     * Core class used for querying networks.
     *
     * @since 4.6.0
     *
     * @see WP_Network_Query::__construct() for accepted arguments.
     */
    class WP_Network_Query {
        /**
         * SQL for database query.
         *
         * @since 4.6.0
         * @var string
         */
        public $request;
        /**
         * SQL query clauses.
         *
         * @since 4.6.0
         * @var array
         */
        protected $sql_clauses;
        /**
         * Query vars set by the user.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_vars;
        /**
         * Default values for query vars.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_var_defaults;
        /**
         * List of networks located by the query.
         *
         * @since 4.6.0
         * @var array
         */
        public $networks;
        /**
         * The amount of found networks for the current query.
         *
         * @since 4.6.0
         * @var int
         */
        public $found_networks;
        /**
         * The number of pages.
         *
         * @since 4.6.0
         * @var int
         */
        public $max_num_pages;

        public function __construct($query = '') {}
/**
 * Fires after the network query vars have been parsed.
 *
 * @since 4.6.0
 *
 * @param WP_Network_Query $this The WP_Network_Query instance (passed by reference).
 */
        public function parse_query(/**
 * Fires after the network query vars have been parsed.
 *
 * @since 4.6.0
 *
 * @param WP_Network_Query $this The WP_Network_Query instance (passed by reference).
 */
$query = '') {}
        public function query($query) {}
        /**
         * Filters the network query results.
         *
         * @since 4.6.0
         *
         * @param WP_Network[]     $_networks An array of WP_Network objects.
         * @param WP_Network_Query $this      Current instance of WP_Network_Query (passed by reference).
         */
        public function get_networks() {}
        /**
         * Filters the network query clauses.
         *
         * @since 4.6.0
         *
         * @param string[]         $pieces An associative array of network query clauses.
         * @param WP_Network_Query $this   Current instance of WP_Network_Query (passed by reference).
         */
        protected function get_network_ids() {}
        /**
         * Filters the query used to retrieve found network count.
         *
         * @since 4.6.0
         *
         * @param string           $found_networks_query SQL query. Default 'SELECT FOUND_ROWS()'.
         * @param WP_Network_Query $network_query        The `WP_Network_Query` instance.
         */
        private function set_found_networks() {}
        protected function get_search_sql($string, $columns) {}
        protected function parse_orderby($orderby) {}
        protected function parse_order($order) {}
    }

    /**
     * Base image editor class from which implementations extend
     *
     * @since 3.5.0
     */
    abstract class WP_Image_Editor {
        protected $file;
        protected $size;
        protected $mime_type;
        protected $default_mime_type;
        protected $quality;
        protected $default_quality;

        public function __construct($file) {}
        public static function test($args = array( )) {}
        public static function supports_mime_type($mime_type) {}
        /**
         * Loads image from $this->file into editor.
         *
         * @since 3.5.0
         * @abstract
         *
         * @return bool|WP_Error True if loaded; WP_Error on failure.
         */
        abstract public function load() ;
        abstract public function save($destfilename = null, $mime_type = null) ;
        abstract public function resize($max_w, $max_h, $crop = false) ;
        abstract public function multi_resize($sizes) ;
        abstract public function crop($src_x, $src_y, $src_w, $src_h, $dst_w = null, $dst_h = null, $src_abs = false) ;
        abstract public function rotate($angle) ;
        abstract public function flip($horz, $vert) ;
        abstract public function stream($mime_type = null) ;
        /**
         * Gets dimensions of image.
         *
         * @since 3.5.0
         *
         * @return array {'width'=>int, 'height'=>int}
         */
        public function get_size() {}
        protected function update_size($width = null, $height = null) {}
        /**
         * Gets the Image Compression quality on a 1-100% scale.
         *
         * @since 4.0.0
         *
         * @return int $quality Compression Quality. Range: [1,100]
         */
        public function get_quality() {}
/**
 * Filters the JPEG compression quality for backward-compatibility.
 *
 * Applies only during initial editor instantiation, or when set_quality() is run
 * manually without the `$quality` argument.
 *
 * set_quality() has priority over the filter.
 *
 * The filter is evaluated under two contexts: 'image_resize', and 'edit_image',
 * (when a JPEG image is saved to file).
 *
 * @since 2.5.0
 *
 * @param int    $quality Quality level between 0 (low) and 100 (high) of the JPEG.
 * @param string $context Context of the filter.
 */
        public function set_quality(/**
 * Filters the JPEG compression quality for backward-compatibility.
 *
 * Applies only during initial editor instantiation, or when set_quality() is run
 * manually without the `$quality` argument.
 *
 * set_quality() has priority over the filter.
 *
 * The filter is evaluated under two contexts: 'image_resize', and 'edit_image',
 * (when a JPEG image is saved to file).
 *
 * @since 2.5.0
 *
 * @param int    $quality Quality level between 0 (low) and 100 (high) of the JPEG.
 * @param string $context Context of the filter.
 */
$quality = null) {}
/**
 * Filters default mime type prior to getting the file extension.
 *
 * @see wp_get_mime_types()
 *
 * @since 3.5.0
 *
 * @param string $mime_type Mime type string.
 */
        protected function get_output_format(/**
 * Filters default mime type prior to getting the file extension.
 *
 * @see wp_get_mime_types()
 *
 * @since 3.5.0
 *
 * @param string $mime_type Mime type string.
 */
$filename = null, /**
 * Filters default mime type prior to getting the file extension.
 *
 * @see wp_get_mime_types()
 *
 * @since 3.5.0
 *
 * @param string $mime_type Mime type string.
 */
$mime_type = null) {}
        public function generate_filename($suffix = null, $dest_path = null, $extension = null) {}
        /**
         * Builds and returns proper suffix for file based on height and width.
         *
         * @since 3.5.0
         *
         * @return false|string suffix
         */
        public function get_suffix() {}
        protected function make_image($filename, $function, $arguments) {}
        protected static function get_mime_type($extension = null) {}
        protected static function get_extension($mime_type = null) {}
    }

    /**
     * Core class used to implement the WP_Post object.
     *
     * @since 3.5.0
     *
     * @property string $page_template
     *
     * @property-read array  $ancestors
     * @property-read int    $post_category
     * @property-read string $tag_input
     */
    final class WP_Post {
        /**
         * Post ID.
         *
         * @since 3.5.0
         * @var int
         */
        public $ID;
        /**
         * ID of post author.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_author;
        /**
         * The post's local publication time.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_date;
        /**
         * The post's GMT publication time.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_date_gmt;
        /**
         * The post's content.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_content;
        /**
         * The post's title.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_title;
        /**
         * The post's excerpt.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_excerpt;
        /**
         * The post's status.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_status;
        /**
         * Whether comments are allowed.
         *
         * @since 3.5.0
         * @var string
         */
        public $comment_status;
        /**
         * Whether pings are allowed.
         *
         * @since 3.5.0
         * @var string
         */
        public $ping_status;
        /**
         * The post's password in plain text.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_password;
        /**
         * The post's slug.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_name;
        /**
         * URLs queued to be pinged.
         *
         * @since 3.5.0
         * @var string
         */
        public $to_ping;
        /**
         * URLs that have been pinged.
         *
         * @since 3.5.0
         * @var string
         */
        public $pinged;
        /**
         * The post's local modified time.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_modified;
        /**
         * The post's GMT modified time.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_modified_gmt;
        /**
         * A utility DB field for post content.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_content_filtered;
        /**
         * ID of a post's parent post.
         *
         * @since 3.5.0
         * @var int
         */
        public $post_parent;
        /**
         * The unique identifier for a post, not necessarily a URL, used as the feed GUID.
         *
         * @since 3.5.0
         * @var string
         */
        public $guid;
        /**
         * A field used for ordering posts.
         *
         * @since 3.5.0
         * @var int
         */
        public $menu_order;
        /**
         * The post's type, like post or page.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_type;
        /**
         * An attachment's mime type.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_mime_type;
        /**
         * Cached comment count.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 3.5.0
         * @var string
         */
        public $comment_count;
        /**
         * Stores the post object's sanitization level.
         *
         * Does not correspond to a DB field.
         *
         * @since 3.5.0
         * @var string
         */
        public $filter;

        public static function get_instance($post_id) {}
        public function __construct($post) {}
        public function __isset($key) {}
        public function __get($key) {}
        public function filter($filter) {}
        /**
         * Convert object to array.
         *
         * @since 3.5.0
         *
         * @return array Object as array.
         */
        public function to_array() {}
    }

    /**
     * Core base class extended to register widgets.
     *
     * This class must be extended for each widget, and WP_Widget::widget() must be overridden.
     *
     * If adding widget options, WP_Widget::update() and WP_Widget::form() should also be overridden.
     *
     * @since 2.8.0
     * @since 4.4.0 Moved to its own file from wp-includes/widgets.php
     */
    class WP_Widget {
        /**
         * Root ID for all widgets of this type.
         *
         * @since 2.8.0
         * @var mixed|string
         */
        public $id_base;
        /**
         * Name for this widget type.
         *
         * @since 2.8.0
         * @var string
         */
        public $name;
        /**
         * Option name for this widget type.
         *
         * @since 2.8.0
         * @var string
         */
        public $option_name;
        /**
         * Alt option name for this widget type.
         *
         * @since 2.8.0
         * @var string
         */
        public $alt_option_name;
        /**
         * Option array passed to wp_register_sidebar_widget().
         *
         * @since 2.8.0
         * @var array
         */
        public $widget_options;
        /**
         * Option array passed to wp_register_widget_control().
         *
         * @since 2.8.0
         * @var array
         */
        public $control_options;
        /**
         * Unique ID number of the current instance.
         *
         * @since 2.8.0
         * @var bool|int
         */
        public $number;
        /**
         * Unique ID string of the current instance (id_base-number).
         *
         * @since 2.8.0
         * @var bool|string
         */
        public $id;
        /**
         * Whether the widget data has been updated.
         *
         * Set to true when the data is updated after a POST submit - ensures it does
         * not happen twice.
         *
         * @since 2.8.0
         * @var bool
         */
        public $updated;

        public function widget($args, $instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
        public function __construct($id_base, $name, $widget_options = array( ), $control_options = array( )) {}
        public function WP_Widget($id_base, $name, $widget_options = array( ), $control_options = array( )) {}
        public function get_field_name($field_name) {}
        public function get_field_id($field_name) {}
        /**
         * Register all widget instances of this widget class.
         *
         * @since 2.8.0
         */
        public function _register() {}
        public function _set($number) {}
        /**
         * Retrieves the widget display callback.
         *
         * @since 2.8.0
         *
         * @return callable Display callback.
         */
        public function _get_display_callback() {}
        /**
         * Retrieves the widget update callback.
         *
         * @since 2.8.0
         *
         * @return callable Update callback.
         */
        public function _get_update_callback() {}
        /**
         * Retrieves the form callback.
         *
         * @since 2.8.0
         *
         * @return callable Form callback.
         */
        public function _get_form_callback() {}
        /**
         * Determines whether the current request is inside the Customizer preview.
         *
         * If true -- the current request is inside the Customizer preview, then
         * the object cache gets suspended and widgets should check this to decide
         * whether they should store anything persistently to the object cache,
         * to transients, or anywhere else.
         *
         * @since 3.9.0
         *
         * @global WP_Customize_Manager $wp_customize
         *
         * @return bool True if within the Customizer preview, false if not.
         */
        public function is_preview() {}
/**
 * Filters the settings for a particular widget instance.
 *
 * Returning false will effectively short-circuit display of the widget.
 *
 * @since 2.8.0
 *
 * @param array     $instance The current widget instance's settings.
 * @param WP_Widget $this     The current widget instance.
 * @param array     $args     An array of default widget arguments.
 */
        public function display_callback(/**
 * Filters the settings for a particular widget instance.
 *
 * Returning false will effectively short-circuit display of the widget.
 *
 * @since 2.8.0
 *
 * @param array     $instance The current widget instance's settings.
 * @param WP_Widget $this     The current widget instance.
 * @param array     $args     An array of default widget arguments.
 */
$args, /**
 * Filters the settings for a particular widget instance.
 *
 * Returning false will effectively short-circuit display of the widget.
 *
 * @since 2.8.0
 *
 * @param array     $instance The current widget instance's settings.
 * @param WP_Widget $this     The current widget instance.
 * @param array     $args     An array of default widget arguments.
 */
$widget_args = 1) {}
/**
 * Filters a widget's settings before saving.
 *
 * Returning false will effectively short-circuit the widget's ability
 * to update settings.
 *
 * @since 2.8.0
 *
 * @param array     $instance     The current widget instance's settings.
 * @param array     $new_instance Array of new widget settings.
 * @param array     $old_instance Array of old widget settings.
 * @param WP_Widget $this         The current widget instance.
 */
        public function update_callback(/**
 * Filters a widget's settings before saving.
 *
 * Returning false will effectively short-circuit the widget's ability
 * to update settings.
 *
 * @since 2.8.0
 *
 * @param array     $instance     The current widget instance's settings.
 * @param array     $new_instance Array of new widget settings.
 * @param array     $old_instance Array of old widget settings.
 * @param WP_Widget $this         The current widget instance.
 */
$deprecated = 1) {}
/**
 * Fires at the end of the widget control form.
 *
 * Use this hook to add extra fields to the widget form. The hook
 * is only fired if the value passed to the 'widget_form_callback'
 * hook is not false.
 *
 * Note: If the widget has no form, the text echoed from the default
 * form method can be hidden using CSS.
 *
 * @since 2.8.0
 *
 * @param WP_Widget $this     The widget instance (passed by reference).
 * @param null      $return   Return null if new fields are added.
 * @param array     $instance An array of the widget's settings.
 */
        public function form_callback(/**
 * Fires at the end of the widget control form.
 *
 * Use this hook to add extra fields to the widget form. The hook
 * is only fired if the value passed to the 'widget_form_callback'
 * hook is not false.
 *
 * Note: If the widget has no form, the text echoed from the default
 * form method can be hidden using CSS.
 *
 * @since 2.8.0
 *
 * @param WP_Widget $this     The widget instance (passed by reference).
 * @param null      $return   Return null if new fields are added.
 * @param array     $instance An array of the widget's settings.
 */
$widget_args = 1) {}
        public function _register_one($number = -1) {}
        public function save_settings($settings) {}
        /**
         * Retrieves the settings for all instances of the widget class.
         *
         * @since 2.8.0
         *
         * @return array Multi-dimensional array of widget instance settings.
         */
        public function get_settings() {}
    }

    /**
     * Core class used to implement action and filter hook functionality.
     *
     * @since 4.7.0
     *
     * @see Iterator
     * @see ArrayAccess
     */
    final class WP_Hook implements \iterator, \arrayaccess {
        /**
         * Hook callbacks.
         *
         * @since 4.7.0
         * @var array
         */
        public $callbacks;
        /**
         * The priority keys of actively running iterations of a hook.
         *
         * @since 4.7.0
         * @var array
         */
        private $iterations;
        /**
         * The current priority of actively running iterations of a hook.
         *
         * @since 4.7.0
         * @var array
         */
        private $current_priority;
        /**
         * Number of levels this hook can be recursively called.
         *
         * @since 4.7.0
         * @var int
         */
        private $nesting_level;
        /**
         * Flag for if we're current doing an action, rather than a filter.
         *
         * @since 4.7.0
         * @var bool
         */
        private $doing_action;

        public function add_filter($tag, $function_to_add, $priority, $accepted_args) {}
        private function resort_active_iterations($new_priority = false, $priority_existed = false) {}
        public function remove_filter($tag, $function_to_remove, $priority) {}
        public function has_filter($tag = '', $function_to_check = false) {}
        /**
         * Checks if any callbacks have been registered for this hook.
         *
         * @since 4.7.0
         *
         * @return bool True if callbacks have been registered for the current hook, otherwise false.
         */
        public function has_filters() {}
        public function remove_all_filters($priority = false) {}
        public function apply_filters($value, $args) {}
        public function do_action($args) {}
        public function do_all_hook($args) {}
        /**
         * Return the current priority level of the currently running iteration of the hook.
         *
         * @since 4.7.0
         *
         * @return int|false If the hook is running, return the current priority level. If it isn't running, return false.
         */
        public function current_priority() {}
/** @var WP_Hook[] $normalized */
        public static function build_preinitialized_hooks(/** @var WP_Hook[] $normalized */
$filters) {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
        /**
         * Returns the current element.
         *
         * @since 4.7.0
         *
         * @link https://secure.php.net/manual/en/iterator.current.php
         *
         * @return array Of callbacks at current priority.
         */
        public function current() {}
        /**
         * Moves forward to the next element.
         *
         * @since 4.7.0
         *
         * @link https://secure.php.net/manual/en/iterator.next.php
         *
         * @return array Of callbacks at next priority.
         */
        public function next() {}
        /**
         * Returns the key of the current element.
         *
         * @since 4.7.0
         *
         * @link https://secure.php.net/manual/en/iterator.key.php
         *
         * @return mixed Returns current priority on success, or NULL on failure
         */
        public function key() {}
        /**
         * Checks if current position is valid.
         *
         * @since 4.7.0
         *
         * @link https://secure.php.net/manual/en/iterator.valid.php
         *
         * @return boolean
         */
        public function valid() {}
        /**
         * Rewinds the Iterator to the first element.
         *
         * @since 4.7.0
         *
         * @link https://secure.php.net/manual/en/iterator.rewind.php
         */
        public function rewind() {}
    }

    /**
     * Core class used to implement SimpliePie feed sanitization.
     *
     * Extends the SimplePie_Sanitize class to use KSES, because
     * we cannot universally count on DOMDocument being available.
     *
     * @since 3.5.0
     *
     * @see SimplePie_Sanitize
     */
    class WP_SimplePie_Sanitize_KSES extends \simplepie_sanitize {
        public function sanitize($data, $type, $base = '') {}
    }

    /**
     * Meta-based user sessions token manager.
     *
     * @since 4.0.0
     *
     * @see WP_Session_Tokens
     */
    class WP_User_Meta_Session_Tokens extends \wp_session_tokens {
        /**
         * Retrieves all sessions of the user.
         *
         * @since 4.0.0
         *
         * @return array Sessions of the user.
         */
        protected function get_sessions() {}
        protected function prepare_session($session) {}
        protected function get_session($verifier) {}
        protected function update_session($verifier, $session = null) {}
        protected function update_sessions($sessions) {}
        protected function destroy_other_sessions($verifier) {}
        /**
         * Destroys all session tokens for the user.
         *
         * @since 4.0.0
         */
        protected function destroy_all_sessions() {}
        /**
         * Destroys all sessions for all users.
         *
         * @since 4.0.0
         */
        public static function drop_sessions() {}
    }

    /**
     * Core class used to implement deflate and gzip transfer encoding support for HTTP requests.
     *
     * Includes RFC 1950, RFC 1951, and RFC 1952.
     *
     * @since 2.8.0
     */
    class WP_Http_Encoding {
        public static function compress($raw, $level = 9, $supports = null) {}
        public static function decompress($compressed, $length = null) {}
        public static function compatible_gzinflate($gzData) {}
/**
 * Filters the allowed encoding types.
 *
 * @since 3.6.0
 *
 * @param array  $type Encoding types allowed. Accepts 'gzinflate',
 *                     'gzuncompress', 'gzdecode'.
 * @param string $url  URL of the HTTP request.
 * @param array  $args HTTP request arguments.
 */
        public static function accept_encoding(/**
 * Filters the allowed encoding types.
 *
 * @since 3.6.0
 *
 * @param array  $type Encoding types allowed. Accepts 'gzinflate',
 *                     'gzuncompress', 'gzdecode'.
 * @param string $url  URL of the HTTP request.
 * @param array  $args HTTP request arguments.
 */
$url, /**
 * Filters the allowed encoding types.
 *
 * @since 3.6.0
 *
 * @param array  $type Encoding types allowed. Accepts 'gzinflate',
 *                     'gzuncompress', 'gzdecode'.
 * @param string $url  URL of the HTTP request.
 * @param array  $args HTTP request arguments.
 */
$args) {}
        /**
         * What encoding the content used when it was compressed to send in the headers.
         *
         * @since 2.8.0
         *
         * @return string Content-Encoding string to send in the header.
         */
        public static function content_encoding() {}
        public static function should_decode($headers) {}
        /**
         * Whether decompression and compression are supported by the PHP version.
         *
         * Each function is tested instead of checking for the zlib extension, to
         * ensure that the functions all exist in the PHP version and aren't
         * disabled.
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public static function is_available() {}
    }

    /**
     * Core class used for interacting with a multisite network.
     *
     * This class is used during load to populate the `$current_site` global and
     * setup the current network.
     *
     * This class is most useful in WordPress multi-network installations where the
     * ability to interact with any network of sites is required.
     *
     * @since 4.4.0
     *
     * @property int $id
     * @property int $site_id
     */
    class WP_Network {
        /**
         * Network ID.
         *
         * @since 4.4.0
         * @since 4.6.0 Converted from public to private to explicitly enable more intuitive
         *              access via magic methods. As part of the access change, the type was
         *              also changed from `string` to `int`.
         * @var int
         */
        private $id;
        /**
         * Domain of the network.
         *
         * @since 4.4.0
         * @var string
         */
        public $domain;
        /**
         * Path of the network.
         *
         * @since 4.4.0
         * @var string
         */
        public $path;
        /**
         * The ID of the network's main site.
         *
         * Named "blog" vs. "site" for legacy reasons. A main site is mapped to
         * the network when the network is created.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.4.0
         * @var string
         */
        private $blog_id;
        /**
         * Domain used to set cookies for this network.
         *
         * @since 4.4.0
         * @var string
         */
        public $cookie_domain;
        /**
         * Name of this network.
         *
         * Named "site" vs. "network" for legacy reasons.
         *
         * @since 4.4.0
         * @var string
         */
        public $site_name;

        public static function get_instance($network_id) {}
        public function __construct($network) {}
        public function __get($key) {}
        public function __isset($key) {}
        public function __set($key, $value) {}
        /**
         * Returns the main site ID for the network.
         *
         * Internal method used by the magic getter for the 'blog_id' and 'site_id'
         * properties.
         *
         * @since 4.9.0
         *
         * @return int The ID of the main site.
         */
        private function get_main_site_id() {}
        /**
         * Set the site name assigned to the network if one has not been populated.
         *
         * @since 4.4.0
         */
        private function _set_site_name() {}
        /**
         * Set the cookie domain based on the network domain if one has
         * not been populated.
         *
         * @todo What if the domain of the network doesn't match the current site?
         *
         * @since 4.4.0
         */
        private function _set_cookie_domain() {}
/**
 * Determine a network by its domain and path.
 *
 * This allows one to short-circuit the default logic, perhaps by
 * replacing it with a routine that is more optimal for your setup.
 *
 * Return null to avoid the short-circuit. Return false if no network
 * can be found at the requested domain and path. Otherwise, return
 * an object from wp_get_network().
 *
 * @since 3.9.0
 *
 * @param null|bool|WP_Network $network  Network value to return by path.
 * @param string               $domain   The requested domain.
 * @param string               $path     The requested path, in full.
 * @param int|null             $segments The suggested number of paths to consult.
 *                                       Default null, meaning the entire path was to be consulted.
 * @param string[]             $paths    Array of paths to search for, based on `$path` and `$segments`.
 */
        public static function get_by_path(/**
 * Determine a network by its domain and path.
 *
 * This allows one to short-circuit the default logic, perhaps by
 * replacing it with a routine that is more optimal for your setup.
 *
 * Return null to avoid the short-circuit. Return false if no network
 * can be found at the requested domain and path. Otherwise, return
 * an object from wp_get_network().
 *
 * @since 3.9.0
 *
 * @param null|bool|WP_Network $network  Network value to return by path.
 * @param string               $domain   The requested domain.
 * @param string               $path     The requested path, in full.
 * @param int|null             $segments The suggested number of paths to consult.
 *                                       Default null, meaning the entire path was to be consulted.
 * @param string[]             $paths    Array of paths to search for, based on `$path` and `$segments`.
 */
$domain = '', /**
 * Determine a network by its domain and path.
 *
 * This allows one to short-circuit the default logic, perhaps by
 * replacing it with a routine that is more optimal for your setup.
 *
 * Return null to avoid the short-circuit. Return false if no network
 * can be found at the requested domain and path. Otherwise, return
 * an object from wp_get_network().
 *
 * @since 3.9.0
 *
 * @param null|bool|WP_Network $network  Network value to return by path.
 * @param string               $domain   The requested domain.
 * @param string               $path     The requested path, in full.
 * @param int|null             $segments The suggested number of paths to consult.
 *                                       Default null, meaning the entire path was to be consulted.
 * @param string[]             $paths    Array of paths to search for, based on `$path` and `$segments`.
 */
$path = '', /**
 * Determine a network by its domain and path.
 *
 * This allows one to short-circuit the default logic, perhaps by
 * replacing it with a routine that is more optimal for your setup.
 *
 * Return null to avoid the short-circuit. Return false if no network
 * can be found at the requested domain and path. Otherwise, return
 * an object from wp_get_network().
 *
 * @since 3.9.0
 *
 * @param null|bool|WP_Network $network  Network value to return by path.
 * @param string               $domain   The requested domain.
 * @param string               $path     The requested path, in full.
 * @param int|null             $segments The suggested number of paths to consult.
 *                                       Default null, meaning the entire path was to be consulted.
 * @param string[]             $paths    Array of paths to search for, based on `$path` and `$segments`.
 */
$segments = null) {}
    }

    /**
     * Core class used for lazy-loading object metadata.
     *
     * When loading many objects of a given type, such as posts in a WP_Query loop, it often makes
     * sense to prime various metadata caches at the beginning of the loop. This means fetching all
     * relevant metadata with a single database query, a technique that has the potential to improve
     * performance dramatically in some cases.
     *
     * In cases where the given metadata may not even be used in the loop, we can improve performance
     * even more by only priming the metadata cache for affected items the first time a piece of metadata
     * is requested - ie, by lazy-loading it. So, for example, comment meta may not be loaded into the
     * cache in the comments section of a post until the first time get_comment_meta() is called in the
     * context of the comment loop.
     *
     * WP uses the WP_Metadata_Lazyloader class to queue objects for metadata cache priming. The class
     * then detects the relevant get_*_meta() function call, and queries the metadata of all queued objects.
     *
     * Do not access this class directly. Use the wp_metadata_lazyloader() function.
     *
     * @since 4.5.0
     */
    class WP_Metadata_Lazyloader {
        /**
         * Pending objects queue.
         *
         * @since 4.5.0
         * @var array
         */
        protected $pending_objects;
        /**
         * Settings for supported object types.
         *
         * @since 4.5.0
         * @var array
         */
        protected $settings;

        /**
         * Constructor.
         *
         * @since 4.5.0
         */
        public function __construct() {}
/**
 * Fires after objects are added to the metadata lazy-load queue.
 *
 * @since 4.5.0
 *
 * @param array                  $object_ids  Array of object IDs.
 * @param string                 $object_type Type of object being queued.
 * @param WP_Metadata_Lazyloader $lazyloader  The lazy-loader object.
 */
        public function queue_objects(/**
 * Fires after objects are added to the metadata lazy-load queue.
 *
 * @since 4.5.0
 *
 * @param array                  $object_ids  Array of object IDs.
 * @param string                 $object_type Type of object being queued.
 * @param WP_Metadata_Lazyloader $lazyloader  The lazy-loader object.
 */
$object_type, /**
 * Fires after objects are added to the metadata lazy-load queue.
 *
 * @since 4.5.0
 *
 * @param array                  $object_ids  Array of object IDs.
 * @param string                 $object_type Type of object being queued.
 * @param WP_Metadata_Lazyloader $lazyloader  The lazy-loader object.
 */
$object_ids) {}
        public function reset_queue($object_type) {}
        public function lazyload_term_meta($check) {}
        public function lazyload_comment_meta($check) {}
    }

    /**
     * Core class used to integrate Curl as an HTTP transport.
     *
     * HTTP request method uses Curl extension to retrieve the url.
     *
     * Requires the Curl extension to be installed.
     *
     * @since 2.7.0
     */
    class WP_Http_Curl {
        /**
         * Temporary header storage for during requests.
         *
         * @since 3.2.0
         * @var string
         */
        private $headers;
        /**
         * Temporary body storage for during requests.
         *
         * @since 3.6.0
         * @var string
         */
        private $body;
        /**
         * The maximum amount of data to receive from the remote server.
         *
         * @since 3.6.0
         * @var int
         */
        private $max_body_length;
        /**
         * The file resource used for streaming to file.
         *
         * @since 3.6.0
         * @var resource
         */
        private $stream_handle;
        /**
         * The total bytes written in the current request.
         *
         * @since 4.1.0
         * @var int
         */
        private $bytes_written_total;

/**
 * Fires before the cURL request is executed.
 *
 * Cookies are not currently handled by the HTTP API. This action allows
 * plugins to handle cookies themselves.
 *
 * @since 2.8.0
 *
 * @param resource $handle  The cURL handle returned by curl_init() (passed by reference).
 * @param array    $r       The HTTP request arguments.
 * @param string   $url     The request URL.
 */
        public function request(/**
 * Fires before the cURL request is executed.
 *
 * Cookies are not currently handled by the HTTP API. This action allows
 * plugins to handle cookies themselves.
 *
 * @since 2.8.0
 *
 * @param resource $handle  The cURL handle returned by curl_init() (passed by reference).
 * @param array    $r       The HTTP request arguments.
 * @param string   $url     The request URL.
 */
$url, /**
 * Fires before the cURL request is executed.
 *
 * Cookies are not currently handled by the HTTP API. This action allows
 * plugins to handle cookies themselves.
 *
 * @since 2.8.0
 *
 * @param resource $handle  The cURL handle returned by curl_init() (passed by reference).
 * @param array    $r       The HTTP request arguments.
 * @param string   $url     The request URL.
 */
$args = array( )) {}
        private function stream_headers($handle, $headers) {}
        private function stream_body($handle, $data) {}
/**
 * Filters whether cURL can be used as a transport for retrieving a URL.
 *
 * @since 2.7.0
 *
 * @param bool  $use_class Whether the class can be used. Default true.
 * @param array $args      An array of request arguments.
 */
        public static function test(/**
 * Filters whether cURL can be used as a transport for retrieving a URL.
 *
 * @since 2.7.0
 *
 * @param bool  $use_class Whether the class can be used. Default true.
 * @param array $args      An array of request arguments.
 */
$args = array( )) {}
    }

    /**
     * Core class used to implement taxonomy queries for the Taxonomy API.
     *
     * Used for generating SQL clauses that filter a primary query according to object
     * taxonomy terms.
     *
     * WP_Tax_Query is a helper that allows primary query classes, such as WP_Query, to filter
     * their results by object metadata, by generating `JOIN` and `WHERE` subclauses to be
     * attached to the primary SQL query string.
     *
     * @since 3.1.0
     */
    class WP_Tax_Query {
        /**
         * Array of taxonomy queries.
         *
         * See WP_Tax_Query::__construct() for information on tax query arguments.
         *
         * @since 3.1.0
         * @var array
         */
        public $queries;
        /**
         * The relation between the queries. Can be one of 'AND' or 'OR'.
         *
         * @since 3.1.0
         * @var string
         */
        public $relation;
        /**
         * Standard response when the query should not return any rows.
         *
         * @since 3.2.0
         * @var string
         */
        static private $no_results;
        /**
         * A flat list of table aliases used in the JOIN clauses.
         *
         * @since 4.1.0
         * @var array
         */
        protected $table_aliases;
        /**
         * Terms and taxonomies fetched by this query.
         *
         * We store this data in a flat array because they are referenced in a
         * number of places by WP_Query.
         *
         * @since 4.1.0
         * @var array
         */
        public $queried_terms;
        /**
         * Database table that where the metadata's objects are stored (eg $wpdb->users).
         *
         * @since 4.1.0
         * @var string
         */
        public $primary_table;
        /**
         * Column in 'primary_table' that represents the ID of the object.
         *
         * @since 4.1.0
         * @var string
         */
        public $primary_id_column;

        public function __construct($tax_query) {}
        public function sanitize_query($queries) {}
        public function sanitize_relation($relation) {}
        protected static function is_first_order_clause($query) {}
        public function get_sql($primary_table, $primary_id_column) {}
        /**
         * Generate SQL clauses to be appended to a main query.
         *
         * Called by the public WP_Tax_Query::get_sql(), this method
         * is abstracted out to maintain parity with the other Query classes.
         *
         * @since 4.1.0
         *
         * @return array {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_clauses() {}
        protected function get_sql_for_query($query, $depth = 0) {}
        public function get_sql_for_clause($clause, $parent_query) {}
        protected function find_compatible_table_alias($clause, $parent_query) {}
        private function clean_query($query) {}
        public function transform_query($query, $resulting_field) {}
    }

    /**
     * The WordPress Query class.
     *
     * @link https://codex.wordpress.org/Function_Reference/WP_Query Codex page.
     *
     * @since 1.5.0
     * @since 4.5.0 Removed the `$comments_popup` property.
     */
    class WP_Query {
        /**
         * Query vars set by the user
         *
         * @since 1.5.0
         * @var array
         */
        public $query;
        /**
         * Query vars, after parsing
         *
         * @since 1.5.0
         * @var array
         */
        public $query_vars;
        /**
         * Taxonomy query, as passed to get_tax_sql()
         *
         * @since 3.1.0
         * @var object WP_Tax_Query
         */
        public $tax_query;
        /**
         * Metadata query container
         *
         * @since 3.2.0
         * @var object WP_Meta_Query
         */
        public $meta_query;
        /**
         * Date query container
         *
         * @since 3.7.0
         * @var object WP_Date_Query
         */
        public $date_query;
        /**
         * Holds the data for a single object that is queried.
         *
         * Holds the contents of a post, page, category, attachment.
         *
         * @since 1.5.0
         * @var object|array
         */
        public $queried_object;
        /**
         * The ID of the queried object.
         *
         * @since 1.5.0
         * @var int
         */
        public $queried_object_id;
        /**
         * Get post database query.
         *
         * @since 2.0.1
         * @var string
         */
        public $request;
        /**
         * List of posts.
         *
         * @since 1.5.0
         * @var array
         */
        public $posts;
        /**
         * The amount of posts for the current query.
         *
         * @since 1.5.0
         * @var int
         */
        public $post_count;
        /**
         * Index of the current item in the loop.
         *
         * @since 1.5.0
         * @var int
         */
        public $current_post;
        /**
         * Whether the loop has started and the caller is in the loop.
         *
         * @since 2.0.0
         * @var bool
         */
        public $in_the_loop;
        /**
         * The current post.
         *
         * @since 1.5.0
         * @var WP_Post
         */
        public $post;
        /**
         * The list of comments for current post.
         *
         * @since 2.2.0
         * @var array
         */
        public $comments;
        /**
         * The amount of comments for the posts.
         *
         * @since 2.2.0
         * @var int
         */
        public $comment_count;
        /**
         * The index of the comment in the comment loop.
         *
         * @since 2.2.0
         * @var int
         */
        public $current_comment;
        /**
         * Current comment ID.
         *
         * @since 2.2.0
         * @var int
         */
        public $comment;
        /**
         * The amount of found posts for the current query.
         *
         * If limit clause was not used, equals $post_count.
         *
         * @since 2.1.0
         * @var int
         */
        public $found_posts;
        /**
         * The amount of pages.
         *
         * @since 2.1.0
         * @var int
         */
        public $max_num_pages;
        /**
         * The amount of comment pages.
         *
         * @since 2.7.0
         * @var int
         */
        public $max_num_comment_pages;
        /**
         * Signifies whether the current query is for a single post.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_single;
        /**
         * Signifies whether the current query is for a preview.
         *
         * @since 2.0.0
         * @var bool
         */
        public $is_preview;
        /**
         * Signifies whether the current query is for a page.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_page;
        /**
         * Signifies whether the current query is for an archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_archive;
        /**
         * Signifies whether the current query is for a date archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_date;
        /**
         * Signifies whether the current query is for a year archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_year;
        /**
         * Signifies whether the current query is for a month archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_month;
        /**
         * Signifies whether the current query is for a day archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_day;
        /**
         * Signifies whether the current query is for a specific time.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_time;
        /**
         * Signifies whether the current query is for an author archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_author;
        /**
         * Signifies whether the current query is for a category archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_category;
        /**
         * Signifies whether the current query is for a tag archive.
         *
         * @since 2.3.0
         * @var bool
         */
        public $is_tag;
        /**
         * Signifies whether the current query is for a taxonomy archive.
         *
         * @since 2.5.0
         * @var bool
         */
        public $is_tax;
        /**
         * Signifies whether the current query is for a search.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_search;
        /**
         * Signifies whether the current query is for a feed.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_feed;
        /**
         * Signifies whether the current query is for a comment feed.
         *
         * @since 2.2.0
         * @var bool
         */
        public $is_comment_feed;
        /**
         * Signifies whether the current query is for trackback endpoint call.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_trackback;
        /**
         * Signifies whether the current query is for the site homepage.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_home;
        /**
         * Signifies whether the current query couldn't find anything.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_404;
        /**
         * Signifies whether the current query is for an embed.
         *
         * @since 4.4.0
         * @var bool
         */
        public $is_embed;
        /**
         * Signifies whether the current query is for a paged result and not for the first page.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_paged;
        /**
         * Signifies whether the current query is for an administrative interface page.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_admin;
        /**
         * Signifies whether the current query is for an attachment page.
         *
         * @since 2.0.0
         * @var bool
         */
        public $is_attachment;
        /**
         * Signifies whether the current query is for an existing single post of any post type
         * (post, attachment, page, custom post types).
         *
         * @since 2.1.0
         * @var bool
         */
        public $is_singular;
        /**
         * Signifies whether the current query is for the robots.txt file.
         *
         * @since 2.1.0
         * @var bool
         */
        public $is_robots;
        /**
         * Signifies whether the current query is for the page_for_posts page.
         *
         * Basically, the homepage if the option isn't set for the static homepage.
         *
         * @since 2.1.0
         * @var bool
         */
        public $is_posts_page;
        /**
         * Signifies whether the current query is for a post type archive.
         *
         * @since 3.1.0
         * @var bool
         */
        public $is_post_type_archive;
        /**
         * Stores the ->query_vars state like md5(serialize( $this->query_vars ) ) so we know
         * whether we have to re-parse because something has changed
         *
         * @since 3.1.0
         * @var bool|string
         */
        private $query_vars_hash;
        /**
         * Whether query vars have changed since the initial parse_query() call. Used to catch modifications to query vars made
         * via pre_get_posts hooks.
         *
         * @since 3.1.1
         */
        private $query_vars_changed;
        /**
         * Set if post thumbnails are cached
         *
         * @since 3.2.0
         * @var bool
         */
        public $thumbnails_cached;
        /**
         * Cached list of search stopwords.
         *
         * @since 3.7.0
         * @var array
         */
        private $stopwords;
        private $compat_fields;
        private $compat_methods;

        /**
         * Resets query flags to false.
         *
         * The query flags are what page info WordPress was able to figure out.
         *
         * @since 2.0.0
         */
        private function init_query_flags() {}
        /**
         * Initiates object properties and sets default values.
         *
         * @since 1.5.0
         */
        public function init() {}
        /**
         * Reparse the query vars.
         *
         * @since 1.5.0
         */
        public function parse_query_vars() {}
        public function fill_query_vars($array) {}
/**
 * Fires after the main query vars have been parsed.
 *
 * @since 1.5.0
 *
 * @param WP_Query $this The WP_Query instance (passed by reference).
 */
        public function parse_query(/**
 * Fires after the main query vars have been parsed.
 *
 * @since 1.5.0
 *
 * @param WP_Query $this The WP_Query instance (passed by reference).
 */
$query = '') {}
/**
 * Fires after taxonomy-related query vars have been parsed.
 *
 * @since 3.7.0
 *
 * @param WP_Query $this The WP_Query instance.
 */
        public function parse_tax_query(/**
 * Fires after taxonomy-related query vars have been parsed.
 *
 * @since 3.7.0
 *
 * @param WP_Query $this The WP_Query instance.
 */
$q) {}
/**
 * Filters the prefix that indicates that a search term should be excluded from results.
 *
 * @since 4.7.0
 *
 * @param string $exclusion_prefix The prefix. Default '-'. Returning
 *                                 an empty value disables exclusions.
 */
        protected function parse_search(/**
 * Filters the prefix that indicates that a search term should be excluded from results.
 *
 * @since 4.7.0
 *
 * @param string $exclusion_prefix The prefix. Default '-'. Returning
 *                                 an empty value disables exclusions.
 */
$q) {}
        protected function parse_search_terms($terms) {}
        /**
         * Filters stopwords used when parsing search terms.
         *
         * @since 3.7.0
         *
         * @param string[] $stopwords Array of stopwords.
         */
        protected function get_search_stopwords() {}
        protected function parse_search_order($q) {}
        protected function parse_orderby($orderby) {}
        protected function parse_order($order) {}
        /**
         * Sets the 404 property and saves whether query is feed.
         *
         * @since 2.0.0
         */
        public function set_404() {}
        public function get($query_var, $default = '') {}
        public function set($query_var, $value) {}
        /**
         * Filters the array of retrieved posts after they've been fetched and
         * internally processed.
         *
         * @since 1.5.0
         *
         * @param WP_Post[] $posts Array of post objects.
         * @param WP_Query  $this The WP_Query instance (passed by reference).
         */
        public function get_posts() {}
/**
 * Filters the number of found posts for the query.
 *
 * @since 2.1.0
 *
 * @param int      $found_posts The number of posts found.
 * @param WP_Query $this        The WP_Query instance (passed by reference).
 */
        private function set_found_posts(/**
 * Filters the number of found posts for the query.
 *
 * @since 2.1.0
 *
 * @param int      $found_posts The number of posts found.
 * @param WP_Query $this        The WP_Query instance (passed by reference).
 */
$q, /**
 * Filters the number of found posts for the query.
 *
 * @since 2.1.0
 *
 * @param int      $found_posts The number of posts found.
 * @param WP_Query $this        The WP_Query instance (passed by reference).
 */
$limits) {}
        /**
         * Set up the next post and iterate current post index.
         *
         * @since 1.5.0
         *
         * @return WP_Post Next post.
         */
        public function next_post() {}
        /**
         * Sets up the current post.
         *
         * Retrieves the next post, sets up the post, sets the 'in the loop'
         * property to true.
         *
         * @since 1.5.0
         *
         * @global WP_Post $post
         */
        public function the_post() {}
        /**
         * Fires if no results are found in a post query.
         *
         * @since 4.9.0
         *
         * @param WP_Query $this The WP_Query instance.
         */
        public function have_posts() {}
        /**
         * Rewind the posts and reset post index.
         *
         * @since 1.5.0
         */
        public function rewind_posts() {}
        /**
         * Iterate current comment index and return WP_Comment object.
         *
         * @since 2.2.0
         *
         * @return WP_Comment Comment object.
         */
        public function next_comment() {}
        /**
         * Fires once the comment loop is started.
         *
         * @since 2.2.0
         */
        public function the_comment() {}
        /**
         * Whether there are more comments available.
         *
         * Automatically rewinds comments when finished.
         *
         * @since 2.2.0
         *
         * @return bool True, if more comments. False, if no more posts.
         */
        public function have_comments() {}
        /**
         * Rewind the comments, resets the comment index and comment to first.
         *
         * @since 2.2.0
         */
        public function rewind_comments() {}
        public function query($query) {}
        /**
         * Retrieve queried object.
         *
         * If queried object is not set, then the queried object will be set from
         * the category, tag, taxonomy, posts page, single post, page, or author
         * query variable. After it is set up, it will be returned.
         *
         * @since 1.5.0
         *
         * @return object
         */
        public function get_queried_object() {}
        /**
         * Retrieve ID of the current queried object.
         *
         * @since 1.5.0
         *
         * @return int
         */
        public function get_queried_object_id() {}
        public function __construct($query = '') {}
        public function __get($name) {}
        public function __isset($name) {}
        public function __call($name, $arguments) {}
        /**
         * Is the query for an existing archive page?
         *
         * Month, Year, Category, Author, Post Type archive...
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_archive() {}
        public function is_post_type_archive($post_types = '') {}
        public function is_attachment($attachment = '') {}
        public function is_author($author = '') {}
        public function is_category($category = '') {}
        public function is_tag($tag = '') {}
        public function is_tax($taxonomy = '', $term = '') {}
        /**
         * Whether the current URL is within the comments popup window.
         *
         * @since 3.1.0
         * @deprecated 4.5.0
         *
         * @return bool
         */
        public function is_comments_popup() {}
        /**
         * Is the query for an existing date archive?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_date() {}
        /**
         * Is the query for an existing day archive?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_day() {}
        public function is_feed($feeds = '') {}
        /**
         * Is the query for a comments feed?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_comment_feed() {}
        /**
         * Is the query for the front page of the site?
         *
         * This is for what is displayed at your site's main URL.
         *
         * Depends on the site's "Front page displays" Reading Settings 'show_on_front' and 'page_on_front'.
         *
         * If you set a static page for the front page of your site, this function will return
         * true when viewing that page.
         *
         * Otherwise the same as @see WP_Query::is_home()
         *
         * @since 3.1.0
         *
         * @return bool True, if front of site.
         */
        public function is_front_page() {}
        /**
         * Is the query for the blog homepage?
         *
         * This is the page which shows the time based blog content of your site.
         *
         * Depends on the site's "Front page displays" Reading Settings 'show_on_front' and 'page_for_posts'.
         *
         * If you set a static page for the front page of your site, this function will return
         * true only on the page you set as the "Posts page".
         *
         * @see WP_Query::is_front_page()
         *
         * @since 3.1.0
         *
         * @return bool True if blog view homepage.
         */
        public function is_home() {}
        /**
         * Is the query for an existing month archive?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_month() {}
        public function is_page($page = '') {}
        /**
         * Is the query for paged result and not for the first page?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_paged() {}
        /**
         * Is the query for a post or page preview?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_preview() {}
        /**
         * Is the query for the robots file?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_robots() {}
        /**
         * Is the query for a search?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_search() {}
        public function is_single($post = '') {}
        public function is_singular($post_types = '') {}
        /**
         * Is the query for a specific time?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_time() {}
        /**
         * Is the query for a trackback endpoint call?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_trackback() {}
        /**
         * Is the query for an existing year archive?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_year() {}
        /**
         * Is the query a 404 (returns no results)?
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function is_404() {}
        /**
         * Is the query for an embedded post?
         *
         * @since 4.4.0
         *
         * @return bool
         */
        public function is_embed() {}
        /**
         * Is the query the main query?
         *
         * @since 3.3.0
         *
         * @global WP_Query $wp_query Global WP_Query instance.
         *
         * @return bool
         */
        public function is_main_query() {}
/**
 * Fires once the post data has been setup.
 *
 * @since 2.8.0
 * @since 4.1.0 Introduced `$this` parameter.
 *
 * @param WP_Post  $post The Post object (passed by reference).
 * @param WP_Query $this The current Query object (passed by reference).
 */
        public function setup_postdata(/**
 * Fires once the post data has been setup.
 *
 * @since 2.8.0
 * @since 4.1.0 Introduced `$this` parameter.
 *
 * @param WP_Post  $post The Post object (passed by reference).
 * @param WP_Query $this The current Query object (passed by reference).
 */
$post) {}
        /**
         * After looping through a nested query, this function
         * restores the $post global to the current post in this query.
         *
         * @since 3.7.0
         *
         * @global WP_Post $post
         */
        public function reset_postdata() {}
        public function lazyload_term_meta($check, $term_id) {}
        public function lazyload_comment_meta($check, $comment_id) {}
    }

    /**
     * WordPress AtomPub API implementation.
     *
     * Originally stored in wp-app.php, and later wp-includes/class-wp-atom-server.php.
     * It is kept here in case a plugin directly referred to the class.
     *
     * @since 2.2.0
     * @deprecated 3.5.0
     *
     * @link https://wordpress.org/plugins/atom-publishing-protocol/
     */
    class wp_atom_server {
        public function __call($name, $arguments) {}
        public static function __callStatic($name, $arguments) {}
    }

    /**
     * PHPMailer RFC821 SMTP email transport class.
     * Implements RFC 821 SMTP commands and provides some utility methods for sending mail to an SMTP server.
     * @package PHPMailer
     * @author Chris Ryan
     * @author Marcus Bointon <phpmailer@synchromedia.co.uk>
     */
    class SMTP {
        const DEBUG_CONNECTION = 3;
        const DEBUG_LOWLEVEL = 4;
        const DEBUG_CLIENT = 1;
        const DEBUG_SERVER = 2;
        const DEBUG_OFF = 0;
        const DEFAULT_SMTP_PORT = 25;
        const MAX_LINE_LENGTH = 998;
        const CRLF = "\r\n";
        const VERSION = '5.2.22';

        /**
         * The PHPMailer SMTP Version number.
         * @var string
         * @deprecated Use the `VERSION` constant instead
         * @see SMTP::VERSION
         */
        public $Version;
        /**
         * SMTP server port number.
         * @var integer
         * @deprecated This is only ever used as a default value, so use the `DEFAULT_SMTP_PORT` constant instead
         * @see SMTP::DEFAULT_SMTP_PORT
         */
        public $SMTP_PORT;
        /**
         * SMTP reply line ending.
         * @var string
         * @deprecated Use the `CRLF` constant instead
         * @see SMTP::CRLF
         */
        public $CRLF;
        /**
         * Debug output level.
         * Options:
         * * self::DEBUG_OFF (`0`) No debug output, default
         * * self::DEBUG_CLIENT (`1`) Client commands
         * * self::DEBUG_SERVER (`2`) Client commands and server responses
         * * self::DEBUG_CONNECTION (`3`) As DEBUG_SERVER plus connection status
         * * self::DEBUG_LOWLEVEL (`4`) Low-level data output, all messages
         * @var integer
         */
        public $do_debug;
        /**
         * How to handle debug output.
         * Options:
         * * `echo` Output plain-text as-is, appropriate for CLI
         * * `html` Output escaped, line breaks converted to `<br>`, appropriate for browser output
         * * `error_log` Output to error log as configured in php.ini
         *
         * Alternatively, you can provide a callable expecting two params: a message string and the debug level:
         * <code>
         * $smtp->Debugoutput = function($str, $level) {echo "debug level $level; message: $str";};
         * </code>
         * @var string|callable
         */
        public $Debugoutput;
        /**
         * Whether to use VERP.
         * @link http://en.wikipedia.org/wiki/Variable_envelope_return_path
         * @link http://www.postfix.org/VERP_README.html Info on VERP
         * @var boolean
         */
        public $do_verp;
        /**
         * The timeout value for connection, in seconds.
         * Default of 5 minutes (300sec) is from RFC2821 section 4.5.3.2
         * This needs to be quite high to function correctly with hosts using greetdelay as an anti-spam measure.
         * @link http://tools.ietf.org/html/rfc2821#section-4.5.3.2
         * @var integer
         */
        public $Timeout;
        /**
         * How long to wait for commands to complete, in seconds.
         * Default of 5 minutes (300sec) is from RFC2821 section 4.5.3.2
         * @var integer
         */
        public $Timelimit;
        /**
         * @var array patterns to extract smtp transaction id from smtp reply
         * Only first capture group will be use, use non-capturing group to deal with it
         * Extend this class to override this property to fulfil your needs.
         */
        protected $smtp_transaction_id_patterns;
        /**
         * The socket for the server connection.
         * @var resource
         */
        protected $smtp_conn;
        /**
         * Error information, if any, for the last SMTP command.
         * @var array
         */
        protected $error;
        /**
         * The reply the server sent to us for HELO.
         * If null, no HELO string has yet been received.
         * @var string|null
         */
        protected $helo_rply;
        /**
         * The set of SMTP extensions sent in reply to EHLO command.
         * Indexes of the array are extension names.
         * Value at index 'HELO' or 'EHLO' (according to command that was sent)
         * represents the server name. In case of HELO it is the only element of the array.
         * Other values can be boolean TRUE or an array containing extension options.
         * If null, no HELO/EHLO string has yet been received.
         * @var array|null
         */
        protected $server_caps;
        /**
         * The most recent reply received from the server.
         * @var string
         */
        protected $last_reply;

        protected function edebug($str, $level = 0) {}
        public function connect($host, $port = null, $timeout = 30, $options = array( )) {}
        /**
         * Initiate a TLS (encrypted) session.
         * @access public
         * @return boolean
         */
        public function startTLS() {}
        public function authenticate($username, $password, $authtype = null, $realm = '', $workstation = '', $OAuth = null) {}
        protected function hmac($data, $key) {}
        /**
         * Check connection state.
         * @access public
         * @return boolean True if connected.
         */
        public function connected() {}
        /**
         * Close the socket and clean up the state of the class.
         * Don't use this function without first trying to use QUIT.
         * @see quit()
         * @access public
         * @return void
         */
        public function close() {}
        public function data($msg_data) {}
        public function hello($host = '') {}
        protected function sendHello($hello, $host) {}
        protected function parseHelloFields($type) {}
        public function mail($from) {}
        public function quit($close_on_error = true) {}
        public function recipient($address) {}
        /**
         * Send an SMTP RSET command.
         * Abort any transaction that is currently in progress.
         * Implements rfc 821: RSET <CRLF>
         * @access public
         * @return boolean True on success.
         */
        public function reset() {}
        protected function sendCommand($command, $commandstring, $expect) {}
        public function sendAndMail($from) {}
        public function verify($name) {}
        /**
         * Send an SMTP NOOP command.
         * Used to keep keep-alives alive, doesn't actually do anything
         * @access public
         * @return boolean
         */
        public function noop() {}
        /**
         * Send an SMTP TURN command.
         * This is an optional command for SMTP that this class does not support.
         * This method is here to make the RFC821 Definition complete for this class
         * and _may_ be implemented in future
         * Implements from rfc 821: TURN <CRLF>
         * @access public
         * @return boolean
         */
        public function turn() {}
        public function client_send($data) {}
        /**
         * Get the latest error.
         * @access public
         * @return array
         */
        public function getError() {}
        /**
         * Get SMTP extensions available on the server
         * @access public
         * @return array|null
         */
        public function getServerExtList() {}
        public function getServerExt($name) {}
        /**
         * Get the last reply from the server.
         * @access public
         * @return string
         */
        public function getLastReply() {}
        /**
         * Read the SMTP server's response.
         * Either before eof or socket timeout occurs on the operation.
         * With SMTP we can tell if we have more lines to read if the
         * 4th character is '-' symbol. If it is a space then we don't
         * need to read anything else.
         * @access protected
         * @return string
         */
        protected function get_lines() {}
        public function setVerp($enabled = false) {}
        /**
         * Get VERP address generation mode.
         * @return boolean
         */
        public function getVerp() {}
        protected function setError($message, $detail = '', $smtp_code = '', $smtp_code_ex = '') {}
        public function setDebugOutput($method = 'echo') {}
        /**
         * Get debug output method.
         * @return string
         */
        public function getDebugOutput() {}
        public function setDebugLevel($level = 0) {}
        /**
         * Get debug output level.
         * @return integer
         */
        public function getDebugLevel() {}
        public function setTimeout($timeout = 0) {}
        /**
         * Get SMTP timeout.
         * @return integer
         */
        public function getTimeout() {}
        protected function errorHandler($errno, $errmsg) {}
        /**
         * Will return the ID of the last smtp transaction based on a list of patterns provided
         * in SMTP::$smtp_transaction_id_patterns.
         * If no reply has been received yet, it will return null.
         * If no pattern has been matched, it will return false.
         * @return bool|null|string
         */
        public function getLastTransactionID() {}
    }

    /**
     * Core class used to register styles.
     *
     * @since 2.6.0
     *
     * @see WP_Dependencies
     */
    class WP_Styles extends \wp_dependencies {
        /**
         * Base URL for styles.
         *
         * Full URL with trailing slash.
         *
         * @since 2.6.0
         * @var string
         */
        public $base_url;
        /**
         * URL of the content directory.
         *
         * @since 2.8.0
         * @var string
         */
        public $content_url;
        /**
         * Default version string for stylesheets.
         *
         * @since 2.6.0
         * @var string
         */
        public $default_version;
        /**
         * The current text direction.
         *
         * @since 2.6.0
         * @var string
         */
        public $text_direction;
        /**
         * Holds a list of style handles which will be concatenated.
         *
         * @since 2.8.0
         * @var string
         */
        public $concat;
        /**
         * Holds a string which contains style handles and their version.
         *
         * @since 2.8.0
         * @deprecated 3.4.0
         * @var string
         */
        public $concat_version;
        /**
         * Whether to perform concatenation.
         *
         * @since 2.8.0
         * @var bool
         */
        public $do_concat;
        /**
         * Holds HTML markup of styles and additional data if concatenation
         * is enabled.
         *
         * @since 2.8.0
         * @var string
         */
        public $print_html;
        /**
         * Holds inline styles if concatenation is enabled.
         *
         * @since 3.3.0
         * @var string
         */
        public $print_code;
        /**
         * List of default directories.
         *
         * @since 2.8.0
         * @var array
         */
        public $default_dirs;

        /**
         * Constructor.
         *
         * @since 2.6.0
         */
        public function __construct() {}
/** This filter is documented in wp-includes/class.wp-styles.php */
        public function do_item(/** This filter is documented in wp-includes/class.wp-styles.php */
$handle) {}
        public function add_inline_style($handle, $code) {}
        public function print_inline_style($handle, $echo = true) {}
/**
 * Filters the array of enqueued styles before processing for output.
 *
 * @since 2.6.0
 *
 * @param string[] $to_do The list of enqueued style handles about to be processed.
 */
        public function all_deps(/**
 * Filters the array of enqueued styles before processing for output.
 *
 * @since 2.6.0
 *
 * @param string[] $to_do The list of enqueued style handles about to be processed.
 */
$handles, /**
 * Filters the array of enqueued styles before processing for output.
 *
 * @since 2.6.0
 *
 * @param string[] $to_do The list of enqueued style handles about to be processed.
 */
$recursion = false, /**
 * Filters the array of enqueued styles before processing for output.
 *
 * @since 2.6.0
 *
 * @param string[] $to_do The list of enqueued style handles about to be processed.
 */
$group = false) {}
/**
 * Filters an enqueued style's fully-qualified URL.
 *
 * @since 2.6.0
 *
 * @param string $src    The source URL of the enqueued style.
 * @param string $handle The style's registered handle.
 */
        public function _css_href(/**
 * Filters an enqueued style's fully-qualified URL.
 *
 * @since 2.6.0
 *
 * @param string $src    The source URL of the enqueued style.
 * @param string $handle The style's registered handle.
 */
$src, /**
 * Filters an enqueued style's fully-qualified URL.
 *
 * @since 2.6.0
 *
 * @param string $src    The source URL of the enqueued style.
 * @param string $handle The style's registered handle.
 */
$ver, /**
 * Filters an enqueued style's fully-qualified URL.
 *
 * @since 2.6.0
 *
 * @param string $src    The source URL of the enqueued style.
 * @param string $handle The style's registered handle.
 */
$handle) {}
        public function in_default_dir($src) {}
        /**
         * Processes items and dependencies for the footer group.
         *
         * HTML 5 allows styles in the body, grab late enqueued items and output them in the footer.
         *
         * @since 3.3.0
         *
         * @see WP_Dependencies::do_items()
         *
         * @return array Handles of items that have been processed.
         */
        public function do_footer_items() {}
        /**
         * Resets class properties.
         *
         * @since 3.3.0
         */
        public function reset() {}
    }

    /**
     * Requests for PHP
     *
     * Inspired by Requests for Python.
     *
     * Based on concepts from SimplePie_File, RequestCore and WP_Http.
     *
     * @package Requests
     */
    class Requests {
        const POST = 'POST';
        const PUT = 'PUT';
        const GET = 'GET';
        const HEAD = 'HEAD';
        const DELETE = 'DELETE';
        const OPTIONS = 'OPTIONS';
        const TRACE = 'TRACE';
        const PATCH = 'PATCH';
        const BUFFER_SIZE = 1160;
        const VERSION = '1.7';

        /**
         * Registered transport classes
         *
         * @var array
         */
        static protected $transports;
        /**
         * Selected transport name
         *
         * Use {@see get_transport()} instead
         *
         * @var array
         */
        static public $transport;
        /**
         * Default certificate path.
         *
         * @see Requests::get_certificate_path()
         * @see Requests::set_certificate_path()
         *
         * @var string
         */
        static protected $certificate_path;

        /**
         * This is a static class, do not instantiate it
         *
         * @codeCoverageIgnore
         */
        private function __construct() {}
        public static function autoloader($class) {}
        /**
         * Register the built-in autoloader
         *
         * @codeCoverageIgnore
         */
        public static function register_autoloader() {}
        public static function add_transport($transport) {}
        protected static function get_transport($capabilities = array( )) {}
        public static function get($url, $headers = array( ), $options = array( )) {}
        public static function head($url, $headers = array( ), $options = array( )) {}
        public static function delete($url, $headers = array( ), $options = array( )) {}
        public static function trace($url, $headers = array( ), $options = array( )) {}
        public static function post($url, $headers = array( ), $data = array( ), $options = array( )) {}
        public static function put($url, $headers = array( ), $data = array( ), $options = array( )) {}
        public static function options($url, $headers = array( ), $data = array( ), $options = array( )) {}
        public static function patch($url, $headers, $data = array( ), $options = array( )) {}
        public static function request($url, $headers = array( ), $data = array( ), $type = self::GET, $options = array( )) {}
        public static function request_multiple($requests, $options = array( )) {}
        protected static function get_default_options($multirequest = false) {}
        /**
         * Get default certificate path.
         *
         * @return string Default certificate path.
         */
        public static function get_certificate_path() {}
        public static function set_certificate_path($path) {}
        protected static function set_defaults($url, $headers, $data, $type, $options) {}
        protected static function parse_response($headers, $url, $req_headers, $req_data, $options) {}
        public static function parse_multiple($response, $request) {}
        protected static function decode_chunked($data) {}
        public static function flatten($array) {}
        public static function flattern($array) {}
        public static function decompress($data) {}
        public static function compatible_gzinflate($gzData) {}
        public static function match_domain($host, $reference) {}
    }

    /**
     * Core class used to implement the WP_Term object.
     *
     * @since 4.4.0
     *
     * @property-read object $data Sanitized term data.
     */
    final class WP_Term {
        /**
         * Term ID.
         *
         * @since 4.4.0
         * @var int
         */
        public $term_id;
        /**
         * The term's name.
         *
         * @since 4.4.0
         * @var string
         */
        public $name;
        /**
         * The term's slug.
         *
         * @since 4.4.0
         * @var string
         */
        public $slug;
        /**
         * The term's term_group.
         *
         * @since 4.4.0
         * @var string
         */
        public $term_group;
        /**
         * Term Taxonomy ID.
         *
         * @since 4.4.0
         * @var int
         */
        public $term_taxonomy_id;
        /**
         * The term's taxonomy name.
         *
         * @since 4.4.0
         * @var string
         */
        public $taxonomy;
        /**
         * The term's description.
         *
         * @since 4.4.0
         * @var string
         */
        public $description;
        /**
         * ID of a term's parent term.
         *
         * @since 4.4.0
         * @var int
         */
        public $parent;
        /**
         * Cached object count for this term.
         *
         * @since 4.4.0
         * @var int
         */
        public $count;
        /**
         * Stores the term object's sanitization level.
         *
         * Does not correspond to a database field.
         *
         * @since 4.4.0
         * @var string
         */
        public $filter;

        public static function get_instance($term_id, $taxonomy = null) {}
        public function __construct($term) {}
        public function filter($filter) {}
        /**
         * Converts an object to array.
         *
         * @since 4.4.0
         *
         * @return array Object as array.
         */
        public function to_array() {}
        public function __get($key) {}
    }

    /**
     * Singleton that registers and instantiates WP_Widget classes.
     *
     * @since 2.8.0
     * @since 4.4.0 Moved to its own file from wp-includes/widgets.php
     */
    class WP_Widget_Factory {
        /**
         * Widgets array.
         *
         * @since 2.8.0
         * @var array
         */
        public $widgets;
        /**
         * Memory for the number of times unique class instances have been hashed.
         *
         * This can be eliminated in favor of straight spl_object_hash() when 5.3
         * is the minimum requirement for PHP.
         *
         * @since 4.6.0
         * @var array
         *
         * @see WP_Widget_Factory::hash_object()
         */
        private $hashed_class_counts;

        /**
         * PHP5 constructor.
         *
         * @since 4.3.0
         */
        public function __construct() {}
        /**
         * PHP4 constructor.
         *
         * @since 2.8.0
         */
        public function WP_Widget_Factory() {}
        private function hash_object($widget) {}
        public function register($widget) {}
        public function unregister($widget) {}
        /**
         * Serves as a utility method for adding widgets to the registered widgets global.
         *
         * @since 2.8.0
         *
         * @global array $wp_registered_widgets
         */
        public function _register_widgets() {}
    }

    /**
     * Core class used to integrate PHP Streams as an HTTP transport.
     *
     * @since 2.7.0
     * @since 3.7.0 Combined with the fsockopen transport and switched to `stream_socket_client()`.
     */
    class WP_Http_Streams {
/** This filter is documented in wp-includes/class-http.php */
        public function request(/** This filter is documented in wp-includes/class-http.php */
$url, /** This filter is documented in wp-includes/class-http.php */
$args = array( )) {}
        public static function verify_ssl_certificate($stream, $host) {}
/**
 * Filters whether streams can be used as a transport for retrieving a URL.
 *
 * @since 2.7.0
 *
 * @param bool  $use_class Whether the class can be used. Default true.
 * @param array $args      Request arguments.
 */
        public static function test(/**
 * Filters whether streams can be used as a transport for retrieving a URL.
 *
 * @since 2.7.0
 *
 * @param bool  $use_class Whether the class can be used. Default true.
 * @param array $args      Request arguments.
 */
$args = array( )) {}
    }

    /**
     * Deprecated HTTP Transport method which used fsockopen.
     *
     * This class is not used, and is included for backward compatibility only.
     * All code should make use of WP_Http directly through its API.
     *
     * @see WP_HTTP::request
     *
     * @since 2.7.0
     * @deprecated 3.7.0 Please use WP_HTTP::request() directly
     */
    class WP_HTTP_Fsockopen extends \wp_http_streams {}

    /**
     * Customize Widgets class.
     *
     * Implements widget management in the Customizer.
     *
     * @since 3.9.0
     *
     * @see WP_Customize_Manager
     */
    final class WP_Customize_Widgets {
        /**
         * WP_Customize_Manager instance.
         *
         * @since 3.9.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * All id_bases for widgets defined in core.
         *
         * @since 3.9.0
         * @var array
         */
        protected $core_widget_id_bases;
        /**
         * @since 3.9.0
         * @var array
         */
        protected $rendered_sidebars;
        /**
         * @since 3.9.0
         * @var array
         */
        protected $rendered_widgets;
        /**
         * @since 3.9.0
         * @var array
         */
        protected $old_sidebars_widgets;
        /**
         * Mapping of widget ID base to whether it supports selective refresh.
         *
         * @since 4.5.0
         * @var array
         */
        protected $selective_refreshable_widgets;
        /**
         * Mapping of setting type to setting ID pattern.
         *
         * @since 4.2.0
         * @var array
         */
        protected $setting_id_patterns;
        /**
         * List of the tag names seen for before_widget strings.
         *
         * This is used in the {@see 'filter_wp_kses_allowed_html'} filter to ensure that the
         * data-* attributes can be whitelisted.
         *
         * @since 4.5.0
         * @var array
         */
        protected $before_widget_tags_seen;
        /**
         * Keep track of the number of times that dynamic_sidebar() was called for a given sidebar index.
         *
         * This helps facilitate the uncommon scenario where a single sidebar is rendered multiple times on a template.
         *
         * @since 4.5.0
         * @var array
         */
        protected $sidebar_instance_count;
        /**
         * The current request's sidebar_instance_number context.
         *
         * @since 4.5.0
         * @var int
         */
        protected $context_sidebar_instance_number;
        /**
         * Current sidebar ID being rendered.
         *
         * @since 4.5.0
         * @var array
         */
        protected $current_dynamic_sidebar_id_stack;
        /**
         * Current sidebar being rendered.
         *
         * @since 4.5.0
         * @var string
         */
        protected $rendering_widget_id;
        /**
         * Current widget being rendered.
         *
         * @since 4.5.0
         * @var string
         */
        protected $rendering_sidebar_id;
        /**
         * List of captured widget option updates.
         *
         * @since 3.9.0
         * @var array $_captured_options Values updated while option capture is happening.
         */
        protected $_captured_options;
        /**
         * Whether option capture is currently happening.
         *
         * @since 3.9.0
         * @var bool $_is_current Whether option capture is currently happening or not.
         */
        protected $_is_capturing_option_updates;

        public function __construct($manager) {}
        /**
         * List whether each registered widget can be use selective refresh.
         *
         * If the theme does not support the customize-selective-refresh-widgets feature,
         * then this will always return an empty array.
         *
         * @since 4.5.0
         *
         * @global WP_Widget_Factory $wp_widget_factory
         *
         * @return array Mapping of id_base to support. If theme doesn't support
         *               selective refresh, an empty array is returned.
         */
        public function get_selective_refreshable_widgets() {}
        public function is_widget_selective_refreshable($id_base) {}
        protected function get_setting_type($setting_id) {}
        /**
         * Inspects the incoming customized data for any widget settings, and dynamically adds
         * them up-front so widgets will be initialized properly.
         *
         * @since 4.2.0
         */
        public function register_settings() {}
        public function filter_customize_dynamic_setting_args($args, $setting_id) {}
        protected function get_post_value($name, $default = null) {}
        /**
         * Override sidebars_widgets for theme switch.
         *
         * When switching a theme via the Customizer, supply any previously-configured
         * sidebars_widgets from the target theme as the initial sidebars_widgets
         * setting. Also store the old theme's existing settings so that they can
         * be passed along for storing in the sidebars_widgets theme_mod when the
         * theme gets switched.
         *
         * @since 3.9.0
         *
         * @global array $sidebars_widgets
         * @global array $_wp_sidebars_widgets
         */
        public function override_sidebars_widgets_for_theme_switch() {}
        public function filter_customize_value_old_sidebars_widgets_data($old_sidebars_widgets) {}
        public function filter_option_sidebars_widgets_for_theme_switch($sidebars_widgets) {}
        /**
         * Ensures all widgets get loaded into the Customizer.
         *
         * Note: these actions are also fired in wp_ajax_update_widget().
         *
         * @since 3.9.0
         */
        public function customize_controls_init() {}
        /**
         * Ensures widgets are available for all types of previews.
         *
         * When in preview, hook to {@see 'customize_register'} for settings after WordPress is loaded
         * so that all filters have been initialized (e.g. Widget Visibility).
         *
         * @since 3.9.0
         */
        public function schedule_customize_register() {}
        /**
         * Registers Customizer settings and controls for all sidebars and widgets.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widgets
         * @global array $wp_registered_widget_controls
         * @global array $wp_registered_sidebars
         */
        public function customize_register() {}
        /**
         * Determines whether the widgets panel is active, based on whether there are sidebars registered.
         *
         * @since 4.4.0
         *
         * @see WP_Customize_Panel::$active_callback
         *
         * @global array $wp_registered_sidebars
         * @return bool Active.
         */
        public function is_panel_active() {}
        public function get_setting_id($widget_id) {}
/**
 * Filters whether the given widget is considered "wide".
 *
 * @since 3.9.0
 *
 * @param bool   $is_wide   Whether the widget is wide, Default false.
 * @param string $widget_id Widget ID.
 */
        public function is_wide_widget(/**
 * Filters whether the given widget is considered "wide".
 *
 * @since 3.9.0
 *
 * @param bool   $is_wide   Whether the widget is wide, Default false.
 * @param string $widget_id Widget ID.
 */
$widget_id) {}
        public function parse_widget_id($widget_id) {}
        public function parse_widget_setting_id($setting_id) {}
        /**
         * Calls admin_print_styles-widgets.php and admin_print_styles hooks to
         * allow custom styles from plugins.
         *
         * @since 3.9.0
         */
        public function print_styles() {}
        /**
         * Calls admin_print_scripts-widgets.php and admin_print_scripts hooks to
         * allow custom scripts from plugins.
         *
         * @since 3.9.0
         */
        public function print_scripts() {}
        /**
         * Enqueues scripts and styles for Customizer panel and export data to JavaScript.
         *
         * @since 3.9.0
         *
         * @global WP_Scripts $wp_scripts
         * @global array $wp_registered_sidebars
         * @global array $wp_registered_widgets
         */
        public function enqueue_scripts() {}
        /**
         * Renders the widget form control templates into the DOM.
         *
         * @since 3.9.0
         */
        public function output_widget_control_templates() {}
        /** This action is documented in wp-admin/admin-footer.php */
        public function print_footer_scripts() {}
/**
 * Filters the common arguments supplied when constructing a Customizer setting.
 *
 * @since 3.9.0
 *
 * @see WP_Customize_Setting
 *
 * @param array  $args Array of Customizer setting arguments.
 * @param string $id   Widget setting ID.
 */
        public function get_setting_args(/**
 * Filters the common arguments supplied when constructing a Customizer setting.
 *
 * @since 3.9.0
 *
 * @see WP_Customize_Setting
 *
 * @param array  $args Array of Customizer setting arguments.
 * @param string $id   Widget setting ID.
 */
$id, /**
 * Filters the common arguments supplied when constructing a Customizer setting.
 *
 * @since 3.9.0
 *
 * @see WP_Customize_Setting
 *
 * @param array  $args Array of Customizer setting arguments.
 * @param string $id   Widget setting ID.
 */
$overrides = array( )) {}
        public function sanitize_sidebar_widgets($widget_ids) {}
        /**
         * Builds up an index of all available widgets for use in Backbone models.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widgets
         * @global array $wp_registered_widget_controls
         * @staticvar array $available_widgets
         *
         * @see wp_list_widgets()
         *
         * @return array List of available widgets.
         */
        public function get_available_widgets() {}
        protected function _sort_name_callback($widget_a, $widget_b) {}
        public function get_widget_control($args) {}
        public function get_widget_control_parts($args) {}
        /**
         * Adds hooks for the Customizer preview.
         *
         * @since 3.9.0
         */
        public function customize_preview_init() {}
        public function refresh_nonces($nonces) {}
        public function preview_sidebars_widgets($sidebars_widgets) {}
        /**
         * Enqueues scripts for the Customizer preview.
         *
         * @since 3.9.0
         */
        public function customize_preview_enqueue() {}
        /**
         * Inserts default style for highlighted widget at early point so theme
         * stylesheet can override.
         *
         * @since 3.9.0
         */
        public function print_preview_css() {}
        /**
         * Communicates the sidebars that appeared on the page at the very end of the page,
         * and at the very end of the wp_footer,
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_sidebars
         * @global array $wp_registered_widgets
         */
        public function export_preview_data() {}
        public function tally_rendered_widgets($widget) {}
        public function is_widget_rendered($widget_id) {}
        public function is_sidebar_rendered($sidebar_id) {}
        public function tally_sidebars_via_is_active_sidebar_calls($is_active, $sidebar_id) {}
        public function tally_sidebars_via_dynamic_sidebar_calls($has_widgets, $sidebar_id) {}
        protected function get_instance_hash_key($serialized_instance) {}
        public function sanitize_widget_instance($value) {}
        public function sanitize_widget_js_instance($value) {}
        public function sanitize_sidebar_widgets_js_instance($widget_ids) {}
        public function call_widget_update($widget_id) {}
        /** This action is documented in wp-admin/widgets.php */
        public function wp_ajax_update_widget() {}
        public function customize_dynamic_partial_args($partial_args, $partial_id) {}
        /**
         * Adds hooks for selective refresh.
         *
         * @since 4.5.0
         */
        public function selective_refresh_init() {}
        public function filter_dynamic_sidebar_params($params) {}
        public function filter_wp_kses_allowed_data_attributes($allowed_html) {}
        public function start_dynamic_sidebar($index) {}
        public function end_dynamic_sidebar($index) {}
        public function filter_sidebars_widgets_for_rendering_widget($sidebars_widgets) {}
        public function render_widget_partial($partial, $context) {}
        protected function is_option_capture_ignored($option_name) {}
        /**
         * Retrieves captured widget option updates.
         *
         * @since 3.9.0
         *
         * @return array Array of captured options.
         */
        protected function get_captured_options() {}
        protected function get_captured_option($option_name, $default = false) {}
        /**
         * Retrieves the number of captured widget option updates.
         *
         * @since 3.9.0
         *
         * @return int Number of updated options.
         */
        protected function count_captured_options() {}
        /**
         * Begins keeping track of changes to widget options, caching new values.
         *
         * @since 3.9.0
         */
        protected function start_capturing_option_updates() {}
        public function capture_filter_pre_update_option($new_value, $option_name, $old_value) {}
/** This filter is documented in wp-includes/option.php */
        public function capture_filter_pre_get_option(/** This filter is documented in wp-includes/option.php */
$value) {}
        /**
         * Undoes any changes to the options since options capture began.
         *
         * @since 3.9.0
         */
        protected function stop_capturing_option_updates() {}
        /**
         * {@internal Missing Summary}
         *
         * See the {@see 'customize_dynamic_setting_args'} filter.
         *
         * @since 3.9.0
         * @deprecated 4.2.0 Deprecated in favor of the {@see 'customize_dynamic_setting_args'} filter.
         */
        public function setup_widget_addition_previews() {}
        /**
         * {@internal Missing Summary}
         *
         * See the {@see 'customize_dynamic_setting_args'} filter.
         *
         * @since 3.9.0
         * @deprecated 4.2.0 Deprecated in favor of the {@see 'customize_dynamic_setting_args'} filter.
         */
        public function prepreview_added_sidebars_widgets() {}
        /**
         * {@internal Missing Summary}
         *
         * See the {@see 'customize_dynamic_setting_args'} filter.
         *
         * @since 3.9.0
         * @deprecated 4.2.0 Deprecated in favor of the {@see 'customize_dynamic_setting_args'} filter.
         */
        public function prepreview_added_widget_instance() {}
        /**
         * {@internal Missing Summary}
         *
         * See the {@see 'customize_dynamic_setting_args'} filter.
         *
         * @since 3.9.0
         * @deprecated 4.2.0 Deprecated in favor of the {@see 'customize_dynamic_setting_args'} filter.
         */
        public function remove_prepreview_filters() {}
    }

    /**
     * mail_fetch/setup.php
     *
     * Copyright (c) 1999-2011 CDI (cdi@thewebmasters.net) All Rights Reserved
     * Modified by Philippe Mingo 2001-2009 mingo@rotedic.com
     * An RFC 1939 compliant wrapper class for the POP3 protocol.
     *
     * Licensed under the GNU GPL. For full terms see the file COPYING.
     *
     * POP3 class
     *
     * @copyright 1999-2011 The SquirrelMail Project Team
     * @license http://opensource.org/licenses/gpl-license.php GNU Public License
     * @package plugins
     * @subpackage mail_fetch
     */
    class POP3 {
        public $ERROR;
        public $TIMEOUT;
        public $COUNT;
        public $BUFFER;
        public $FP;
        public $MAILSERVER;
        public $DEBUG;
        public $BANNER;
        public $ALLOWAPOP;

        function __construct($server = '', $timeout = '') {}
        public function POP3($server = '', $timeout = '') {}
        function update_timer() {}
        function connect($server, $port = 110) {}
        function user($user = "") {}
        function pass($pass = "") {}
        function apop($login, $pass) {}
        function login($login = "", $pass = "") {}
        function top($msgNum, $numLines = "0") {}
        function pop_list($msgNum = "") {}
        function get($msgNum) {}
        function last($type = "count") {}
        function reset() {}
        function send_cmd($cmd = "") {}
        function quit() {}
        function popstat() {}
        function uidl($msgNum = "") {}
        function delete($msgNum = "") {}
        function is_ok($cmd = "") {}
        function strip_clf($text = "") {}
        function parse_banner($server_text) {}
    }

    /**
     * Core class used for interacting with taxonomies.
     *
     * @since 4.7.0
     */
    final class WP_Taxonomy {
        /**
         * Taxonomy key.
         *
         * @since 4.7.0
         * @var string
         */
        public $name;
        /**
         * Name of the taxonomy shown in the menu. Usually plural.
         *
         * @since 4.7.0
         * @var string
         */
        public $label;
        /**
         * An array of labels for this taxonomy.
         *
         * @since 4.7.0
         * @var object
         */
        public $labels;
        /**
         * A short descriptive summary of what the taxonomy is for.
         *
         * @since 4.7.0
         * @var string
         */
        public $description;
        /**
         * Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users.
         *
         * @since 4.7.0
         * @var bool
         */
        public $public;
        /**
         * Whether the taxonomy is publicly queryable.
         *
         * @since 4.7.0
         * @var bool
         */
        public $publicly_queryable;
        /**
         * Whether the taxonomy is hierarchical.
         *
         * @since 4.7.0
         * @var bool
         */
        public $hierarchical;
        /**
         * Whether to generate and allow a UI for managing terms in this taxonomy in the admin.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_ui;
        /**
         * Whether to show the taxonomy in the admin menu.
         *
         * If true, the taxonomy is shown as a submenu of the object type menu. If false, no menu is shown.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_in_menu;
        /**
         * Whether the taxonomy is available for selection in navigation menus.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_in_nav_menus;
        /**
         * Whether to list the taxonomy in the tag cloud widget controls.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_tagcloud;
        /**
         * Whether to show the taxonomy in the quick/bulk edit panel.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_in_quick_edit;
        /**
         * Whether to display a column for the taxonomy on its post type listing screens.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_admin_column;
        /**
         * The callback function for the meta box display.
         *
         * @since 4.7.0
         * @var bool|callable
         */
        public $meta_box_cb;
        /**
         * The callback function for sanitizing taxonomy data saved from a meta box.
         *
         * @since 5.1.0
         * @var callable
         */
        public $meta_box_sanitize_cb;
        /**
         * An array of object types this taxonomy is registered for.
         *
         * @since 4.7.0
         * @var array
         */
        public $object_type;
        /**
         * Capabilities for this taxonomy.
         *
         * @since 4.7.0
         * @var object
         */
        public $cap;
        /**
         * Rewrites information for this taxonomy.
         *
         * @since 4.7.0
         * @var array|false
         */
        public $rewrite;
        /**
         * Query var string for this taxonomy.
         *
         * @since 4.7.0
         * @var string|false
         */
        public $query_var;
        /**
         * Function that will be called when the count is updated.
         *
         * @since 4.7.0
         * @var callable
         */
        public $update_count_callback;
        /**
         * Whether this taxonomy should appear in the REST API.
         *
         * Default false. If true, standard endpoints will be registered with
         * respect to $rest_base and $rest_controller_class.
         *
         * @since 4.7.4
         * @var bool $show_in_rest
         */
        public $show_in_rest;
        /**
         * The base path for this taxonomy's REST API endpoints.
         *
         * @since 4.7.4
         * @var string|bool $rest_base
         */
        public $rest_base;
        /**
         * The controller for this taxonomy's REST API endpoints.
         *
         * Custom controllers must extend WP_REST_Controller.
         *
         * @since 4.7.4
         * @var string|bool $rest_controller_class
         */
        public $rest_controller_class;
        /**
         * Whether it is a built-in taxonomy.
         *
         * @since 4.7.0
         * @var bool
         */
        public $_builtin;

        public function __construct($taxonomy, $object_type, $args = array( )) {}
/**
 * Filters the arguments for registering a taxonomy.
 *
 * @since 4.4.0
 *
 * @param array    $args        Array of arguments for registering a taxonomy.
 * @param string   $taxonomy    Taxonomy key.
 * @param string[] $object_type Array of names of object types for the taxonomy.
 */
        public function set_props(/**
 * Filters the arguments for registering a taxonomy.
 *
 * @since 4.4.0
 *
 * @param array    $args        Array of arguments for registering a taxonomy.
 * @param string   $taxonomy    Taxonomy key.
 * @param string[] $object_type Array of names of object types for the taxonomy.
 */
$object_type, /**
 * Filters the arguments for registering a taxonomy.
 *
 * @since 4.4.0
 *
 * @param array    $args        Array of arguments for registering a taxonomy.
 * @param string   $taxonomy    Taxonomy key.
 * @param string[] $object_type Array of names of object types for the taxonomy.
 */
$args) {}
        /**
         * Adds the necessary rewrite rules for the taxonomy.
         *
         * @since 4.7.0
         *
         * @global WP $wp Current WordPress environment instance.
         */
        public function add_rewrite_rules() {}
        /**
         * Removes any rewrite rules, permastructs, and rules for the taxonomy.
         *
         * @since 4.7.0
         *
         * @global WP $wp Current WordPress environment instance.
         */
        public function remove_rewrite_rules() {}
        /**
         * Registers the ajax callback for the meta box.
         *
         * @since 4.7.0
         */
        public function add_hooks() {}
        /**
         * Removes the ajax callback for the meta box.
         *
         * @since 4.7.0
         */
        public function remove_hooks() {}
    }

    /**
     * Core class used for interacting with post types.
     *
     * @since 4.6.0
     *
     * @see register_post_type()
     */
    final class WP_Post_Type {
        /**
         * Post type key.
         *
         * @since 4.6.0
         * @var string $name
         */
        public $name;
        /**
         * Name of the post type shown in the menu. Usually plural.
         *
         * @since 4.6.0
         * @var string $label
         */
        public $label;
        /**
         * Labels object for this post type.
         *
         * If not set, post labels are inherited for non-hierarchical types
         * and page labels for hierarchical ones.
         *
         * @see get_post_type_labels()
         *
         * @since 4.6.0
         * @var object $labels
         */
        public $labels;
        /**
         * A short descriptive summary of what the post type is.
         *
         * Default empty.
         *
         * @since 4.6.0
         * @var string $description
         */
        public $description;
        /**
         * Whether a post type is intended for use publicly either via the admin interface or by front-end users.
         *
         * While the default settings of $exclude_from_search, $publicly_queryable, $show_ui, and $show_in_nav_menus
         * are inherited from public, each does not rely on this relationship and controls a very specific intention.
         *
         * Default false.
         *
         * @since 4.6.0
         * @var bool $public
         */
        public $public;
        /**
         * Whether the post type is hierarchical (e.g. page).
         *
         * Default false.
         *
         * @since 4.6.0
         * @var bool $hierarchical
         */
        public $hierarchical;
        /**
         * Whether to exclude posts with this post type from front end search
         * results.
         *
         * Default is the opposite value of $public.
         *
         * @since 4.6.0
         * @var bool $exclude_from_search
         */
        public $exclude_from_search;
        /**
         * Whether queries can be performed on the front end for the post type as part of `parse_request()`.
         *
         * Endpoints would include:
         * - `?post_type={post_type_key}`
         * - `?{post_type_key}={single_post_slug}`
         * - `?{post_type_query_var}={single_post_slug}`
         *
         * Default is the value of $public.
         *
         * @since 4.6.0
         * @var bool $publicly_queryable
         */
        public $publicly_queryable;
        /**
         * Whether to generate and allow a UI for managing this post type in the admin.
         *
         * Default is the value of $public.
         *
         * @since 4.6.0
         * @var bool $show_ui
         */
        public $show_ui;
        /**
         * Where to show the post type in the admin menu.
         *
         * To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is
         * shown. If a string of an existing top level menu (eg. 'tools.php' or 'edit.php?post_type=page'), the post type
         * will be placed as a sub-menu of that.
         *
         * Default is the value of $show_ui.
         *
         * @since 4.6.0
         * @var bool $show_in_menu
         */
        public $show_in_menu;
        /**
         * Makes this post type available for selection in navigation menus.
         *
         * Default is the value $public.
         *
         * @since 4.6.0
         * @var bool $show_in_nav_menus
         */
        public $show_in_nav_menus;
        /**
         * Makes this post type available via the admin bar.
         *
         * Default is the value of $show_in_menu.
         *
         * @since 4.6.0
         * @var bool $show_in_admin_bar
         */
        public $show_in_admin_bar;
        /**
         * The position in the menu order the post type should appear.
         *
         * To work, $show_in_menu must be true. Default null (at the bottom).
         *
         * @since 4.6.0
         * @var int $menu_position
         */
        public $menu_position;
        /**
         * The URL to the icon to be used for this menu.
         *
         * Pass a base64-encoded SVG using a data URI, which will be colored to match the color scheme.
         * This should begin with 'data:image/svg+xml;base64,'. Pass the name of a Dashicons helper class
         * to use a font icon, e.g. 'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty
         * so an icon can be added via CSS.
         *
         * Defaults to use the posts icon.
         *
         * @since 4.6.0
         * @var string $menu_icon
         */
        public $menu_icon;
        /**
         * The string to use to build the read, edit, and delete capabilities.
         *
         * May be passed as an array to allow for alternative plurals when using
         * this argument as a base to construct the capabilities, e.g.
         * array( 'story', 'stories' ). Default 'post'.
         *
         * @since 4.6.0
         * @var string $capability_type
         */
        public $capability_type;
        /**
         * Whether to use the internal default meta capability handling.
         *
         * Default false.
         *
         * @since 4.6.0
         * @var bool $map_meta_cap
         */
        public $map_meta_cap;
        /**
         * Provide a callback function that sets up the meta boxes for the edit form.
         *
         * Do `remove_meta_box()` and `add_meta_box()` calls in the callback. Default null.
         *
         * @since 4.6.0
         * @var string $register_meta_box_cb
         */
        public $register_meta_box_cb;
        /**
         * An array of taxonomy identifiers that will be registered for the post type.
         *
         * Taxonomies can be registered later with `register_taxonomy()` or `register_taxonomy_for_object_type()`.
         *
         * Default empty array.
         *
         * @since 4.6.0
         * @var array $taxonomies
         */
        public $taxonomies;
        /**
         * Whether there should be post type archives, or if a string, the archive slug to use.
         *
         * Will generate the proper rewrite rules if $rewrite is enabled. Default false.
         *
         * @since 4.6.0
         * @var bool|string $has_archive
         */
        public $has_archive;
        /**
         * Sets the query_var key for this post type.
         *
         * Defaults to $post_type key. If false, a post type cannot be loaded at `?{query_var}={post_slug}`.
         * If specified as a string, the query `?{query_var_string}={post_slug}` will be valid.
         *
         * @since 4.6.0
         * @var string|bool $query_var
         */
        public $query_var;
        /**
         * Whether to allow this post type to be exported.
         *
         * Default true.
         *
         * @since 4.6.0
         * @var bool $can_export
         */
        public $can_export;
        /**
         * Whether to delete posts of this type when deleting a user.
         *
         * If true, posts of this type belonging to the user will be moved to trash when then user is deleted.
         * If false, posts of this type belonging to the user will *not* be trashed or deleted.
         * If not set (the default), posts are trashed if post_type_supports( 'author' ).
         * Otherwise posts are not trashed or deleted. Default null.
         *
         * @since 4.6.0
         * @var bool $delete_with_user
         */
        public $delete_with_user;
        /**
         * Whether this post type is a native or "built-in" post_type.
         *
         * Default false.
         *
         * @since 4.6.0
         * @var bool $_builtin
         */
        public $_builtin;
        /**
         * URL segment to use for edit link of this post type.
         *
         * Default 'post.php?post=%d'.
         *
         * @since 4.6.0
         * @var string $_edit_link
         */
        public $_edit_link;
        /**
         * Post type capabilities.
         *
         * @since 4.6.0
         * @var object $cap
         */
        public $cap;
        /**
         * Triggers the handling of rewrites for this post type.
         *
         * Defaults to true, using $post_type as slug.
         *
         * @since 4.6.0
         * @var array|false $rewrite
         */
        public $rewrite;
        /**
         * The features supported by the post type.
         *
         * @since 4.6.0
         * @var array|bool $supports
         */
        public $supports;
        /**
         * Whether this post type should appear in the REST API.
         *
         * Default false. If true, standard endpoints will be registered with
         * respect to $rest_base and $rest_controller_class.
         *
         * @since 4.7.4
         * @var bool $show_in_rest
         */
        public $show_in_rest;
        /**
         * The base path for this post type's REST API endpoints.
         *
         * @since 4.7.4
         * @var string|bool $rest_base
         */
        public $rest_base;
        /**
         * The controller for this post type's REST API endpoints.
         *
         * Custom controllers must extend WP_REST_Controller.
         *
         * @since 4.7.4
         * @var string|bool $rest_controller_class
         */
        public $rest_controller_class;

        public function __construct($post_type, $args = array( )) {}
/**
 * Filters the arguments for registering a post type.
 *
 * @since 4.4.0
 *
 * @param array  $args      Array of arguments for registering a post type.
 * @param string $post_type Post type key.
 */
        public function set_props(/**
 * Filters the arguments for registering a post type.
 *
 * @since 4.4.0
 *
 * @param array  $args      Array of arguments for registering a post type.
 * @param string $post_type Post type key.
 */
$args) {}
        /**
         * Sets the features support for the post type.
         *
         * @since 4.6.0
         */
        public function add_supports() {}
        /**
         * Adds the necessary rewrite rules for the post type.
         *
         * @since 4.6.0
         *
         * @global WP_Rewrite $wp_rewrite WordPress Rewrite Component.
         * @global WP         $wp         Current WordPress environment instance.
         */
        public function add_rewrite_rules() {}
        /**
         * Registers the post type meta box if a custom callback was specified.
         *
         * @since 4.6.0
         */
        public function register_meta_boxes() {}
        /**
         * Adds the future post hook action for the post type.
         *
         * @since 4.6.0
         */
        public function add_hooks() {}
        /**
         * Registers the taxonomies for the post type.
         *
         * @since 4.6.0
         */
        public function register_taxonomies() {}
        /**
         * Removes the features support for the post type.
         *
         * @since 4.6.0
         *
         * @global array $_wp_post_type_features Post type features.
         */
        public function remove_supports() {}
        /**
         * Removes any rewrite rules, permastructs, and rules for the post type.
         *
         * @since 4.6.0
         *
         * @global WP_Rewrite $wp_rewrite          WordPress rewrite component.
         * @global WP         $wp                  Current WordPress environment instance.
         * @global array      $post_type_meta_caps Used to remove meta capabilities.
         */
        public function remove_rewrite_rules() {}
        /**
         * Unregisters the post type meta box if a custom callback was specified.
         *
         * @since 4.6.0
         */
        public function unregister_meta_boxes() {}
        /**
         * Removes the post type from all taxonomies.
         *
         * @since 4.6.0
         */
        public function unregister_taxonomies() {}
        /**
         * Removes the future post hook action for the post type.
         *
         * @since 4.6.0
         */
        public function remove_hooks() {}
    }

    /**
     * Core class used to implement the WP_User object.
     *
     * @since 2.0.0
     *
     * @property string $nickname
     * @property string $description
     * @property string $user_description
     * @property string $first_name
     * @property string $user_firstname
     * @property string $last_name
     * @property string $user_lastname
     * @property string $user_login
     * @property string $user_pass
     * @property string $user_nicename
     * @property string $user_email
     * @property string $user_url
     * @property string $user_registered
     * @property string $user_activation_key
     * @property string $user_status
     * @property int    $user_level
     * @property string $display_name
     * @property string $spam
     * @property string $deleted
     * @property string $locale
     * @property string $rich_editing
     * @property string $syntax_highlighting
     */
    class WP_User {
        /**
         * User data container.
         *
         * @since 2.0.0
         * @var object
         */
        public $data;
        /**
         * The user's ID.
         *
         * @since 2.1.0
         * @var int
         */
        public $ID;
        /**
         * The individual capabilities the user has been given.
         *
         * @since 2.0.0
         * @var array
         */
        public $caps;
        /**
         * User metadata option name.
         *
         * @since 2.0.0
         * @var string
         */
        public $cap_key;
        /**
         * The roles the user is part of.
         *
         * @since 2.0.0
         * @var array
         */
        public $roles;
        /**
         * All capabilities the user has, including individual and role based.
         *
         * @since 2.0.0
         * @var bool[] Array of key/value pairs where keys represent a capability name and boolean values
         *             represent whether the user has that capability.
         */
        public $allcaps;
        /**
         * The filter context applied to user data fields.
         *
         * @since 2.9.0
         * @var string
         */
        public $filter;
        /**
         * The site ID the capabilities of this user are initialized for.
         *
         * @since 4.9.0
         * @var int
         */
        private $site_id;
        /**
         * @since 3.3.0
         * @var array
         */
        static private $back_compat_keys;

        public function __construct($id = 0, $name = '', $site_id = '') {}
        public function init($data, $site_id = '') {}
        public static function get_data_by($field, $value) {}
        public function __isset($key) {}
        public function __get($key) {}
        public function __set($key, $value) {}
        public function __unset($key) {}
        /**
         * Determine whether the user exists in the database.
         *
         * @since 3.4.0
         *
         * @return bool True if user exists in the database, false if not.
         */
        public function exists() {}
        public function get($key) {}
        public function has_prop($key) {}
        /**
         * Return an array representation.
         *
         * @since 3.5.0
         *
         * @return array Array representation.
         */
        public function to_array() {}
        public function __call($name, $arguments) {}
        protected function _init_caps($cap_key = '') {}
        /**
         * Retrieves all of the capabilities of the roles of the user, and merges them with individual user capabilities.
         *
         * All of the capabilities of the roles of the user are merged with the user's individual capabilities. This means
         * that the user can be denied specific capabilities that their role might have, but the user is specifically denied.
         *
         * @since 2.0.0
         *
         * @return bool[] Array of key/value pairs where keys represent a capability name and boolean values
         *                represent whether the user has that capability.
         */
        public function get_role_caps() {}
/**
 * Fires immediately after the user has been given a new role.
 *
 * @since 4.3.0
 *
 * @param int    $user_id The user ID.
 * @param string $role    The new role.
 */
        public function add_role(/**
 * Fires immediately after the user has been given a new role.
 *
 * @since 4.3.0
 *
 * @param int    $user_id The user ID.
 * @param string $role    The new role.
 */
$role) {}
/**
 * Fires immediately after a role as been removed from a user.
 *
 * @since 4.3.0
 *
 * @param int    $user_id The user ID.
 * @param string $role    The removed role.
 */
        public function remove_role(/**
 * Fires immediately after a role as been removed from a user.
 *
 * @since 4.3.0
 *
 * @param int    $user_id The user ID.
 * @param string $role    The removed role.
 */
$role) {}
/**
 * Fires after the user's role has changed.
 *
 * @since 2.9.0
 * @since 3.6.0 Added $old_roles to include an array of the user's previous roles.
 *
 * @param int      $user_id   The user ID.
 * @param string   $role      The new role.
 * @param string[] $old_roles An array of the user's previous roles.
 */
        public function set_role(/**
 * Fires after the user's role has changed.
 *
 * @since 2.9.0
 * @since 3.6.0 Added $old_roles to include an array of the user's previous roles.
 *
 * @param int      $user_id   The user ID.
 * @param string   $role      The new role.
 * @param string[] $old_roles An array of the user's previous roles.
 */
$role) {}
        public function level_reduction($max, $item) {}
        /**
         * Update the maximum user level for the user.
         *
         * Updates the 'user_level' user metadata (includes prefix that is the
         * database table prefix) with the maximum user level. Gets the value from
         * the all of the capabilities that the user has.
         *
         * @since 2.0.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        public function update_user_level_from_caps() {}
        public function add_cap($cap, $grant = true) {}
        public function remove_cap($cap) {}
        /**
         * Remove all of the capabilities of the user.
         *
         * @since 2.1.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        public function remove_all_caps() {}
/**
 * Dynamically filter a user's capabilities.
 *
 * @since 2.0.0
 * @since 3.7.0 Added the `$user` parameter.
 *
 * @param bool[]   $allcaps Array of key/value pairs where keys represent a capability name and boolean values
 *                          represent whether the user has that capability.
 * @param string[] $caps    Required primitive capabilities for the requested capability.
 * @param array    $args {
 *     Arguments that accompany the requested capability check.
 *
 *     @type string    $0 Requested capability.
 *     @type int       $1 Concerned user ID.
 *     @type mixed  ...$2 Optional second and further parameters, typically object ID.
 * }
 * @param WP_User  $user    The user object.
 */
        public function has_cap(/**
 * Dynamically filter a user's capabilities.
 *
 * @since 2.0.0
 * @since 3.7.0 Added the `$user` parameter.
 *
 * @param bool[]   $allcaps Array of key/value pairs where keys represent a capability name and boolean values
 *                          represent whether the user has that capability.
 * @param string[] $caps    Required primitive capabilities for the requested capability.
 * @param array    $args {
 *     Arguments that accompany the requested capability check.
 *
 *     @type string    $0 Requested capability.
 *     @type int       $1 Concerned user ID.
 *     @type mixed  ...$2 Optional second and further parameters, typically object ID.
 * }
 * @param WP_User  $user    The user object.
 */
$cap) {}
        public function translate_level_to_cap($level) {}
        public function for_blog($blog_id = '') {}
        public function for_site($site_id = '') {}
        /**
         * Gets the ID of the site for which the user's capabilities are currently initialized.
         *
         * @since 4.9.0
         *
         * @return int Site ID.
         */
        public function get_site_id() {}
        /**
         * Gets the available user capabilities data.
         *
         * @since 4.9.0
         *
         * @return array User capabilities array.
         */
        private function get_caps_data() {}
    }

    /**
     * Core class used to prepare HTTP responses.
     *
     * @since 4.4.0
     */
    class WP_HTTP_Response {
        /**
         * Response data.
         *
         * @since 4.4.0
         * @var mixed
         */
        public $data;
        /**
         * Response headers.
         *
         * @since 4.4.0
         * @var array
         */
        public $headers;
        /**
         * Response status.
         *
         * @since 4.4.0
         * @var int
         */
        public $status;

        public function __construct($data = null, $status = 200, $headers = array( )) {}
        /**
         * Retrieves headers associated with the response.
         *
         * @since 4.4.0
         *
         * @return array Map of header name to header value.
         */
        public function get_headers() {}
        public function set_headers($headers) {}
        public function header($key, $value, $replace = true) {}
        /**
         * Retrieves the HTTP return code for the response.
         *
         * @since 4.4.0
         *
         * @return int The 3-digit HTTP status code.
         */
        public function get_status() {}
        public function set_status($code) {}
        /**
         * Retrieves the response data.
         *
         * @since 4.4.0
         *
         * @return mixed Response data.
         */
        public function get_data() {}
        public function set_data($data) {}
        /**
         * Retrieves the response data for JSON serialization.
         *
         * It is expected that in most implementations, this will return the same as get_data(),
         * however this may be different if you want to do custom JSON data handling.
         *
         * @since 4.4.0
         *
         * @return mixed Any JSON-serializable value.
         */
        public function jsonSerialize() {}
    }

    /**
     * Core class used to extend the user roles API.
     *
     * @since 2.0.0
     */
    class WP_Role {
        /**
         * Role name.
         *
         * @since 2.0.0
         * @var string
         */
        public $name;
        /**
         * List of capabilities the role contains.
         *
         * @since 2.0.0
         * @var array
         */
        public $capabilities;

        public function __construct($role, $capabilities) {}
        public function add_cap($cap, $grant = true) {}
        public function remove_cap($cap) {}
/**
 * Filters which capabilities a role has.
 *
 * @since 2.0.0
 *
 * @param bool[] $capabilities Associative array of capabilities for the role.
 * @param string $cap          Capability name.
 * @param string $name         Role name.
 */
        public function has_cap(/**
 * Filters which capabilities a role has.
 *
 * @since 2.0.0
 *
 * @param bool[] $capabilities Associative array of capabilities for the role.
 * @param string $cap          Capability name.
 * @param string $name         Role name.
 */
$cap) {}
    }

    /**
     * Class _WP_Dependency
     *
     * Helper class to register a handle and associated data.
     *
     * @access private
     * @since 2.6.0
     */
    class _WP_Dependency {
        /**
         * The handle name.
         *
         * @since 2.6.0
         * @var null
         */
        public $handle;
        /**
         * The handle source.
         *
         * @since 2.6.0
         * @var null
         */
        public $src;
        /**
         * An array of handle dependencies.
         *
         * @since 2.6.0
         * @var array
         */
        public $deps;
        /**
         * The handle version.
         *
         * Used for cache-busting.
         *
         * @since 2.6.0
         * @var bool|string
         */
        public $ver;
        /**
         * Additional arguments for the handle.
         *
         * @since 2.6.0
         * @var null
         */
        public $args;
        /**
         * Extra data to supply to the handle.
         *
         * @since 2.6.0
         * @var array
         */
        public $extra;
        /**
         * Translation textdomain set for this dependency.
         *
         * @since 5.0.0
         * @var string
         */
        public $textdomain;
        /**
         * Translation path set for this dependency.
         *
         * @since 5.0.0
         * @var string
         */
        public $translations_path;

        /**
         * Setup dependencies.
         *
         * @since 2.6.0
         */
        public function __construct() {}
        public function add_data($name, $data) {}
        public function set_translations($domain, $path = null) {}
    }

    /**
     * Core class used to create an HTML drop-down list of pages.
     *
     * @since 2.1.0
     *
     * @see Walker
     */
    class Walker_PageDropdown extends \walker {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type;
        /**
         * Database fields to use.
         *
         * @since 2.1.0
         * @var array
         *
         * @see Walker::$db_fields
         * @todo Decouple this
         */
        public $db_fields;

/**
 * Filters the page title when creating an HTML drop-down list of pages.
 *
 * @since 3.1.0
 *
 * @param string  $title Page title.
 * @param WP_Post $page  Page data object.
 */
        public function start_el(/**
 * Filters the page title when creating an HTML drop-down list of pages.
 *
 * @since 3.1.0
 *
 * @param string  $title Page title.
 * @param WP_Post $page  Page data object.
 */
$output, /**
 * Filters the page title when creating an HTML drop-down list of pages.
 *
 * @since 3.1.0
 *
 * @param string  $title Page title.
 * @param WP_Post $page  Page data object.
 */
$page, /**
 * Filters the page title when creating an HTML drop-down list of pages.
 *
 * @since 3.1.0
 *
 * @param string  $title Page title.
 * @param WP_Post $page  Page data object.
 */
$depth = 0, /**
 * Filters the page title when creating an HTML drop-down list of pages.
 *
 * @since 3.1.0
 *
 * @param string  $title Page title.
 * @param WP_Post $page  Page data object.
 */
$args = array( ), /**
 * Filters the page title when creating an HTML drop-down list of pages.
 *
 * @since 3.1.0
 *
 * @param string  $title Page title.
 * @param WP_Post $page  Page data object.
 */
$id = 0) {}
    }

    /**
     * Core class representing a block type.
     *
     * @since 5.0.0
     *
     * @see register_block_type()
     */
    class WP_Block_Type {
        /**
         * Block type key.
         *
         * @since 5.0.0
         * @var string
         */
        public $name;
        /**
         * Block type render callback.
         *
         * @since 5.0.0
         * @var callable
         */
        public $render_callback;
        /**
         * Block type attributes property schemas.
         *
         * @since 5.0.0
         * @var array
         */
        public $attributes;
        /**
         * Block type editor script handle.
         *
         * @since 5.0.0
         * @var string
         */
        public $editor_script;
        /**
         * Block type front end script handle.
         *
         * @since 5.0.0
         * @var string
         */
        public $script;
        /**
         * Block type editor style handle.
         *
         * @since 5.0.0
         * @var string
         */
        public $editor_style;
        /**
         * Block type front end style handle.
         *
         * @since 5.0.0
         * @var string
         */
        public $style;

        public function __construct($block_type, $args = array( )) {}
        public function render($attributes = array( ), $content = '') {}
        /**
         * Returns true if the block type is dynamic, or false otherwise. A dynamic
         * block is one which defers its rendering to occur on-demand at runtime.
         *
         * @since 5.0.0
         *
         * @return boolean Whether block type is dynamic.
         */
        public function is_dynamic() {}
        public function prepare_attributes_for_render($attributes) {}
        public function set_props($args) {}
        /**
         * Get all available block attributes including possible layout attribute from Columns block.
         *
         * @since 5.0.0
         *
         * @return array Array of attributes.
         */
        public function get_attributes() {}
    }

    /**
     * Core class used to implement a feed cache.
     *
     * @since 2.8.0
     *
     * @see SimplePie_Cache
     */
    class WP_Feed_Cache extends \simplepie_cache {
        public function create($location, $filename, $extension) {}
    }

    /**
     * WordPress Image Editor Class for Image Manipulation through Imagick PHP Module
     *
     * @since 3.5.0
     *
     * @see WP_Image_Editor
     */
    class WP_Image_Editor_Imagick extends \wp_image_editor {
        /**
         * Imagick object.
         *
         * @var Imagick
         */
        protected $image;

        public function __destruct() {}
        public static function test($args = array( )) {}
        public static function supports_mime_type($mime_type) {}
        /**
         * Loads image from $this->file into new Imagick Object.
         *
         * @since 3.5.0
         *
         * @return true|WP_Error True if loaded; WP_Error on failure.
         */
        public function load() {}
        public function set_quality($quality = null) {}
        protected function update_size($width = null, $height = null) {}
        public function resize($max_w, $max_h, $crop = false) {}
/**
 * Filters whether to strip metadata from images when they're resized.
 *
 * This filter only applies when resizing using the Imagick editor since GD
 * always strips profiles by default.
 *
 * @since 4.5.0
 *
 * @param bool $strip_meta Whether to strip image metadata during resizing. Default true.
 */
        protected function thumbnail_image(/**
 * Filters whether to strip metadata from images when they're resized.
 *
 * This filter only applies when resizing using the Imagick editor since GD
 * always strips profiles by default.
 *
 * @since 4.5.0
 *
 * @param bool $strip_meta Whether to strip image metadata during resizing. Default true.
 */
$dst_w, /**
 * Filters whether to strip metadata from images when they're resized.
 *
 * This filter only applies when resizing using the Imagick editor since GD
 * always strips profiles by default.
 *
 * @since 4.5.0
 *
 * @param bool $strip_meta Whether to strip image metadata during resizing. Default true.
 */
$dst_h, /**
 * Filters whether to strip metadata from images when they're resized.
 *
 * This filter only applies when resizing using the Imagick editor since GD
 * always strips profiles by default.
 *
 * @since 4.5.0
 *
 * @param bool $strip_meta Whether to strip image metadata during resizing. Default true.
 */
$filter_name = 'FILTER_TRIANGLE', /**
 * Filters whether to strip metadata from images when they're resized.
 *
 * This filter only applies when resizing using the Imagick editor since GD
 * always strips profiles by default.
 *
 * @since 4.5.0
 *
 * @param bool $strip_meta Whether to strip image metadata during resizing. Default true.
 */
$strip_meta = true) {}
        public function multi_resize($sizes) {}
        public function crop($src_x, $src_y, $src_w, $src_h, $dst_w = null, $dst_h = null, $src_abs = false) {}
/**
 * $angle is 360-$angle because Imagick rotates clockwise
 * (GD rotates counter-clockwise)
 */
        public function rotate(/**
 * $angle is 360-$angle because Imagick rotates clockwise
 * (GD rotates counter-clockwise)
 */
$angle) {}
        public function flip($horz, $vert) {}
        public function save($destfilename = null, $mime_type = null) {}
/** This filter is documented in wp-includes/class-wp-image-editor-gd.php */
        protected function _save(/** This filter is documented in wp-includes/class-wp-image-editor-gd.php */
$image, /** This filter is documented in wp-includes/class-wp-image-editor-gd.php */
$filename = null, /** This filter is documented in wp-includes/class-wp-image-editor-gd.php */
$mime_type = null) {}
        public function stream($mime_type = null) {}
        /**
         * Strips all image meta except color profiles from an image.
         *
         * @since 4.5.0
         *
         * @return true|WP_Error True if stripping metadata was successful. WP_Error object on error.
         */
        protected function strip_meta() {}
        /**
         * Sets up Imagick for PDF processing.
         * Increases rendering DPI and only loads first page.
         *
         * @since 4.7.0
         *
         * @return string|WP_Error File to load or WP_Error on failure.
         */
        protected function pdf_setup() {}
    }

    /**
     * Core class used for querying users.
     *
     * @since 3.1.0
     *
     * @see WP_User_Query::prepare_query() for information on accepted arguments.
     */
    class WP_User_Query {
        /**
         * Query vars, after parsing
         *
         * @since 3.5.0
         * @var array
         */
        public $query_vars;
        /**
         * List of found user ids
         *
         * @since 3.1.0
         * @var array
         */
        private $results;
        /**
         * Total number of found users for the current query
         *
         * @since 3.1.0
         * @var int
         */
        private $total_users;
        /**
         * Metadata query container.
         *
         * @since 4.2.0
         * @var WP_Meta_Query
         */
        public $meta_query;
        /**
         * The SQL query used to fetch matching users.
         *
         * @since 4.4.0
         * @var string
         */
        public $request;
        private $compat_fields;
        public $query_fields;
        public $query_from;
        public $query_where;
        public $query_orderby;
        public $query_limit;

        public function __construct($query = null) {}
        public static function fill_query_vars($args) {}
/**
 * Fires after the WP_User_Query has been parsed, and before
 * the query is executed.
 *
 * The passed WP_User_Query object contains SQL parts formed
 * from parsing the given query.
 *
 * @since 3.1.0
 *
 * @param WP_User_Query $this The current WP_User_Query instance,
 *                            passed by reference.
 */
        public function prepare_query(/**
 * Fires after the WP_User_Query has been parsed, and before
 * the query is executed.
 *
 * The passed WP_User_Query object contains SQL parts formed
 * from parsing the given query.
 *
 * @since 3.1.0
 *
 * @param WP_User_Query $this The current WP_User_Query instance,
 *                            passed by reference.
 */
$query = array( )) {}
        /**
         * Filters SELECT FOUND_ROWS() query for the current WP_User_Query instance.
         *
         * @since 3.2.0
         * @since 5.1.0 Added the `$this` parameter.
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $sql         The SELECT FOUND_ROWS() query for the current WP_User_Query.
         * @param WP_User_Query $this The current WP_User_Query instance.
         */
        public function query() {}
        public function get($query_var) {}
        public function set($query_var, $value) {}
        protected function get_search_sql($string, $cols, $wild = false) {}
        /**
         * Return the list of users.
         *
         * @since 3.1.0
         *
         * @return array Array of results.
         */
        public function get_results() {}
        /**
         * Return the total number of users for the current query.
         *
         * @since 3.1.0
         *
         * @return int Number of total users.
         */
        public function get_total() {}
        protected function parse_orderby($orderby) {}
        protected function parse_order($order) {}
        public function __get($name) {}
        public function __set($name, $value) {}
        public function __isset($name) {}
        public function __unset($name) {}
        public function __call($name, $arguments) {}
    }

    /**
     * WordPress Image Editor Class for Image Manipulation through GD
     *
     * @since 3.5.0
     *
     * @see WP_Image_Editor
     */
    class WP_Image_Editor_GD extends \wp_image_editor {
        /**
         * GD Resource.
         *
         * @var resource
         */
        protected $image;

        public function __destruct() {}
        public static function test($args = array( )) {}
        public static function supports_mime_type($mime_type) {}
        /**
         * Loads image from $this->file into new GD Resource.
         *
         * @since 3.5.0
         *
         * @return bool|WP_Error True if loaded successfully; WP_Error on failure.
         */
        public function load() {}
        protected function update_size($width = false, $height = false) {}
        public function resize($max_w, $max_h, $crop = false) {}
        protected function _resize($max_w, $max_h, $crop = false) {}
        public function multi_resize($sizes) {}
        public function crop($src_x, $src_y, $src_w, $src_h, $dst_w = null, $dst_h = null, $src_abs = false) {}
        public function rotate($angle) {}
        public function flip($horz, $vert) {}
        public function save($filename = null, $mime_type = null) {}
/**
 * Filters the name of the saved image file.
 *
 * @since 2.6.0
 *
 * @param string $filename Name of the file.
 */
        protected function _save(/**
 * Filters the name of the saved image file.
 *
 * @since 2.6.0
 *
 * @param string $filename Name of the file.
 */
$image, /**
 * Filters the name of the saved image file.
 *
 * @since 2.6.0
 *
 * @param string $filename Name of the file.
 */
$filename = null, /**
 * Filters the name of the saved image file.
 *
 * @since 2.6.0
 *
 * @param string $filename Name of the file.
 */
$mime_type = null) {}
        public function stream($mime_type = null) {}
        protected function make_image($filename, $function, $arguments) {}
    }

    /**
     * WP_HTTP_IXR_Client
     *
     * @package WordPress
     * @since 3.1.0
     */
    class WP_HTTP_IXR_Client extends \ixr_client {
        public $scheme;
        /**
         * @var IXR_Error
         */
        public $error;

        public function __construct($server, $path = false, $port = false, $timeout = 15) {}
        /**
         * @return bool
         */
        public function query() {}
    }

    /**
* @todo Parse AC-3/DTS audio inside WAVE correctly
* @todo Rewrite RIFF parser totally
*/
    class getid3_riff extends \getid3_handler {
        protected $container;

        public function Analyze() {}
        public function ParseRIFFAMV($startoffset, $maxoffset) {}
        public function ParseRIFF($startoffset, $maxoffset) {}
        public function ParseRIFFdata($RIFFdata) {}
        public static function parseComments($RIFFinfoArray, $CommentsTargetArray) {}
        public static function parseWAVEFORMATex($WaveFormatExData) {}
        public function parseWavPackHeader($WavPackChunkData) {}
        public static function ParseBITMAPINFOHEADER($BITMAPINFOHEADER, $littleEndian = true) {}
        public static function ParseDIVXTAG($DIVXTAG, $raw = false) {}
/** This is not a comment!

			©kwd	keywords
			©BPM	bpm
			©trt	tracktitle
			©des	description
			©gen	category
			©fin	featuredinstrument
			©LID	longid
			©bex	bwdescription
			©pub	publisher
			©cdt	cdtitle
			©alb	library
			©com	composer
 */
        public static function waveSNDMtagLookup(/** This is not a comment!

			©kwd	keywords
			©BPM	bpm
			©trt	tracktitle
			©des	description
			©gen	category
			©fin	featuredinstrument
			©LID	longid
			©bex	bwdescription
			©pub	publisher
			©cdt	cdtitle
			©alb	library
			©com	composer
 */
$tagshortname) {}
/** This is not a comment!

			0x0000	Microsoft Unknown Wave Format
			0x0001	Pulse Code Modulation (PCM)
			0x0002	Microsoft ADPCM
			0x0003	IEEE Float
			0x0004	Compaq Computer VSELP
			0x0005	IBM CVSD
			0x0006	Microsoft A-Law
			0x0007	Microsoft mu-Law
			0x0008	Microsoft DTS
			0x0010	OKI ADPCM
			0x0011	Intel DVI/IMA ADPCM
			0x0012	Videologic MediaSpace ADPCM
			0x0013	Sierra Semiconductor ADPCM
			0x0014	Antex Electronics G.723 ADPCM
			0x0015	DSP Solutions DigiSTD
			0x0016	DSP Solutions DigiFIX
			0x0017	Dialogic OKI ADPCM
			0x0018	MediaVision ADPCM
			0x0019	Hewlett-Packard CU
			0x0020	Yamaha ADPCM
			0x0021	Speech Compression Sonarc
			0x0022	DSP Group TrueSpeech
			0x0023	Echo Speech EchoSC1
			0x0024	Audiofile AF36
			0x0025	Audio Processing Technology APTX
			0x0026	AudioFile AF10
			0x0027	Prosody 1612
			0x0028	LRC
			0x0030	Dolby AC2
			0x0031	Microsoft GSM 6.10
			0x0032	MSNAudio
			0x0033	Antex Electronics ADPCME
			0x0034	Control Resources VQLPC
			0x0035	DSP Solutions DigiREAL
			0x0036	DSP Solutions DigiADPCM
			0x0037	Control Resources CR10
			0x0038	Natural MicroSystems VBXADPCM
			0x0039	Crystal Semiconductor IMA ADPCM
			0x003A	EchoSC3
			0x003B	Rockwell ADPCM
			0x003C	Rockwell Digit LK
			0x003D	Xebec
			0x0040	Antex Electronics G.721 ADPCM
			0x0041	G.728 CELP
			0x0042	MSG723
			0x0050	MPEG Layer-2 or Layer-1
			0x0052	RT24
			0x0053	PAC
			0x0055	MPEG Layer-3
			0x0059	Lucent G.723
			0x0060	Cirrus
			0x0061	ESPCM
			0x0062	Voxware
			0x0063	Canopus Atrac
			0x0064	G.726 ADPCM
			0x0065	G.722 ADPCM
			0x0066	DSAT
			0x0067	DSAT Display
			0x0069	Voxware Byte Aligned
			0x0070	Voxware AC8
			0x0071	Voxware AC10
			0x0072	Voxware AC16
			0x0073	Voxware AC20
			0x0074	Voxware MetaVoice
			0x0075	Voxware MetaSound
			0x0076	Voxware RT29HW
			0x0077	Voxware VR12
			0x0078	Voxware VR18
			0x0079	Voxware TQ40
			0x0080	Softsound
			0x0081	Voxware TQ60
			0x0082	MSRT24
			0x0083	G.729A
			0x0084	MVI MV12
			0x0085	DF G.726
			0x0086	DF GSM610
			0x0088	ISIAudio
			0x0089	Onlive
			0x0091	SBC24
			0x0092	Dolby AC3 SPDIF
			0x0093	MediaSonic G.723
			0x0094	Aculab PLC    Prosody 8kbps
			0x0097	ZyXEL ADPCM
			0x0098	Philips LPCBB
			0x0099	Packed
			0x00FF	AAC
			0x0100	Rhetorex ADPCM
			0x0101	IBM mu-law
			0x0102	IBM A-law
			0x0103	IBM AVC Adaptive Differential Pulse Code Modulation (ADPCM)
			0x0111	Vivo G.723
			0x0112	Vivo Siren
			0x0123	Digital G.723
			0x0125	Sanyo LD ADPCM
			0x0130	Sipro Lab Telecom ACELP NET
			0x0131	Sipro Lab Telecom ACELP 4800
			0x0132	Sipro Lab Telecom ACELP 8V3
			0x0133	Sipro Lab Telecom G.729
			0x0134	Sipro Lab Telecom G.729A
			0x0135	Sipro Lab Telecom Kelvin
			0x0140	Windows Media Video V8
			0x0150	Qualcomm PureVoice
			0x0151	Qualcomm HalfRate
			0x0155	Ring Zero Systems TUB GSM
			0x0160	Microsoft Audio 1
			0x0161	Windows Media Audio V7 / V8 / V9
			0x0162	Windows Media Audio Professional V9
			0x0163	Windows Media Audio Lossless V9
			0x0200	Creative Labs ADPCM
			0x0202	Creative Labs Fastspeech8
			0x0203	Creative Labs Fastspeech10
			0x0210	UHER Informatic GmbH ADPCM
			0x0220	Quarterdeck
			0x0230	I-link Worldwide VC
			0x0240	Aureal RAW Sport
			0x0250	Interactive Products HSX
			0x0251	Interactive Products RPELP
			0x0260	Consistent Software CS2
			0x0270	Sony SCX
			0x0300	Fujitsu FM Towns Snd
			0x0400	BTV Digital
			0x0401	Intel Music Coder
			0x0450	QDesign Music
			0x0680	VME VMPCM
			0x0681	AT&T Labs TPC
			0x08AE	ClearJump LiteWave
			0x1000	Olivetti GSM
			0x1001	Olivetti ADPCM
			0x1002	Olivetti CELP
			0x1003	Olivetti SBC
			0x1004	Olivetti OPR
			0x1100	Lernout & Hauspie Codec (0x1100)
			0x1101	Lernout & Hauspie CELP Codec (0x1101)
			0x1102	Lernout & Hauspie SBC Codec (0x1102)
			0x1103	Lernout & Hauspie SBC Codec (0x1103)
			0x1104	Lernout & Hauspie SBC Codec (0x1104)
			0x1400	Norris
			0x1401	AT&T ISIAudio
			0x1500	Soundspace Music Compression
			0x181C	VoxWare RT24 Speech
			0x1FC4	NCT Soft ALF2CD (www.nctsoft.com)
			0x2000	Dolby AC3
			0x2001	Dolby DTS
			0x2002	WAVE_FORMAT_14_4
			0x2003	WAVE_FORMAT_28_8
			0x2004	WAVE_FORMAT_COOK
			0x2005	WAVE_FORMAT_DNET
			0x674F	Ogg Vorbis 1
			0x6750	Ogg Vorbis 2
			0x6751	Ogg Vorbis 3
			0x676F	Ogg Vorbis 1+
			0x6770	Ogg Vorbis 2+
			0x6771	Ogg Vorbis 3+
			0x7A21	GSM-AMR (CBR, no SID)
			0x7A22	GSM-AMR (VBR, including SID)
			0xFFFE	WAVE_FORMAT_EXTENSIBLE
			0xFFFF	WAVE_FORMAT_DEVELOPMENT
 */
        public static function wFormatTagLookup(/** This is not a comment!

			0x0000	Microsoft Unknown Wave Format
			0x0001	Pulse Code Modulation (PCM)
			0x0002	Microsoft ADPCM
			0x0003	IEEE Float
			0x0004	Compaq Computer VSELP
			0x0005	IBM CVSD
			0x0006	Microsoft A-Law
			0x0007	Microsoft mu-Law
			0x0008	Microsoft DTS
			0x0010	OKI ADPCM
			0x0011	Intel DVI/IMA ADPCM
			0x0012	Videologic MediaSpace ADPCM
			0x0013	Sierra Semiconductor ADPCM
			0x0014	Antex Electronics G.723 ADPCM
			0x0015	DSP Solutions DigiSTD
			0x0016	DSP Solutions DigiFIX
			0x0017	Dialogic OKI ADPCM
			0x0018	MediaVision ADPCM
			0x0019	Hewlett-Packard CU
			0x0020	Yamaha ADPCM
			0x0021	Speech Compression Sonarc
			0x0022	DSP Group TrueSpeech
			0x0023	Echo Speech EchoSC1
			0x0024	Audiofile AF36
			0x0025	Audio Processing Technology APTX
			0x0026	AudioFile AF10
			0x0027	Prosody 1612
			0x0028	LRC
			0x0030	Dolby AC2
			0x0031	Microsoft GSM 6.10
			0x0032	MSNAudio
			0x0033	Antex Electronics ADPCME
			0x0034	Control Resources VQLPC
			0x0035	DSP Solutions DigiREAL
			0x0036	DSP Solutions DigiADPCM
			0x0037	Control Resources CR10
			0x0038	Natural MicroSystems VBXADPCM
			0x0039	Crystal Semiconductor IMA ADPCM
			0x003A	EchoSC3
			0x003B	Rockwell ADPCM
			0x003C	Rockwell Digit LK
			0x003D	Xebec
			0x0040	Antex Electronics G.721 ADPCM
			0x0041	G.728 CELP
			0x0042	MSG723
			0x0050	MPEG Layer-2 or Layer-1
			0x0052	RT24
			0x0053	PAC
			0x0055	MPEG Layer-3
			0x0059	Lucent G.723
			0x0060	Cirrus
			0x0061	ESPCM
			0x0062	Voxware
			0x0063	Canopus Atrac
			0x0064	G.726 ADPCM
			0x0065	G.722 ADPCM
			0x0066	DSAT
			0x0067	DSAT Display
			0x0069	Voxware Byte Aligned
			0x0070	Voxware AC8
			0x0071	Voxware AC10
			0x0072	Voxware AC16
			0x0073	Voxware AC20
			0x0074	Voxware MetaVoice
			0x0075	Voxware MetaSound
			0x0076	Voxware RT29HW
			0x0077	Voxware VR12
			0x0078	Voxware VR18
			0x0079	Voxware TQ40
			0x0080	Softsound
			0x0081	Voxware TQ60
			0x0082	MSRT24
			0x0083	G.729A
			0x0084	MVI MV12
			0x0085	DF G.726
			0x0086	DF GSM610
			0x0088	ISIAudio
			0x0089	Onlive
			0x0091	SBC24
			0x0092	Dolby AC3 SPDIF
			0x0093	MediaSonic G.723
			0x0094	Aculab PLC    Prosody 8kbps
			0x0097	ZyXEL ADPCM
			0x0098	Philips LPCBB
			0x0099	Packed
			0x00FF	AAC
			0x0100	Rhetorex ADPCM
			0x0101	IBM mu-law
			0x0102	IBM A-law
			0x0103	IBM AVC Adaptive Differential Pulse Code Modulation (ADPCM)
			0x0111	Vivo G.723
			0x0112	Vivo Siren
			0x0123	Digital G.723
			0x0125	Sanyo LD ADPCM
			0x0130	Sipro Lab Telecom ACELP NET
			0x0131	Sipro Lab Telecom ACELP 4800
			0x0132	Sipro Lab Telecom ACELP 8V3
			0x0133	Sipro Lab Telecom G.729
			0x0134	Sipro Lab Telecom G.729A
			0x0135	Sipro Lab Telecom Kelvin
			0x0140	Windows Media Video V8
			0x0150	Qualcomm PureVoice
			0x0151	Qualcomm HalfRate
			0x0155	Ring Zero Systems TUB GSM
			0x0160	Microsoft Audio 1
			0x0161	Windows Media Audio V7 / V8 / V9
			0x0162	Windows Media Audio Professional V9
			0x0163	Windows Media Audio Lossless V9
			0x0200	Creative Labs ADPCM
			0x0202	Creative Labs Fastspeech8
			0x0203	Creative Labs Fastspeech10
			0x0210	UHER Informatic GmbH ADPCM
			0x0220	Quarterdeck
			0x0230	I-link Worldwide VC
			0x0240	Aureal RAW Sport
			0x0250	Interactive Products HSX
			0x0251	Interactive Products RPELP
			0x0260	Consistent Software CS2
			0x0270	Sony SCX
			0x0300	Fujitsu FM Towns Snd
			0x0400	BTV Digital
			0x0401	Intel Music Coder
			0x0450	QDesign Music
			0x0680	VME VMPCM
			0x0681	AT&T Labs TPC
			0x08AE	ClearJump LiteWave
			0x1000	Olivetti GSM
			0x1001	Olivetti ADPCM
			0x1002	Olivetti CELP
			0x1003	Olivetti SBC
			0x1004	Olivetti OPR
			0x1100	Lernout & Hauspie Codec (0x1100)
			0x1101	Lernout & Hauspie CELP Codec (0x1101)
			0x1102	Lernout & Hauspie SBC Codec (0x1102)
			0x1103	Lernout & Hauspie SBC Codec (0x1103)
			0x1104	Lernout & Hauspie SBC Codec (0x1104)
			0x1400	Norris
			0x1401	AT&T ISIAudio
			0x1500	Soundspace Music Compression
			0x181C	VoxWare RT24 Speech
			0x1FC4	NCT Soft ALF2CD (www.nctsoft.com)
			0x2000	Dolby AC3
			0x2001	Dolby DTS
			0x2002	WAVE_FORMAT_14_4
			0x2003	WAVE_FORMAT_28_8
			0x2004	WAVE_FORMAT_COOK
			0x2005	WAVE_FORMAT_DNET
			0x674F	Ogg Vorbis 1
			0x6750	Ogg Vorbis 2
			0x6751	Ogg Vorbis 3
			0x676F	Ogg Vorbis 1+
			0x6770	Ogg Vorbis 2+
			0x6771	Ogg Vorbis 3+
			0x7A21	GSM-AMR (CBR, no SID)
			0x7A22	GSM-AMR (VBR, including SID)
			0xFFFE	WAVE_FORMAT_EXTENSIBLE
			0xFFFF	WAVE_FORMAT_DEVELOPMENT
 */
$wFormatTag) {}
/** This is not a comment!

			swot	http://developer.apple.com/qa/snd/snd07.html
			____	No Codec (____)
			_BIT	BI_BITFIELDS (Raw RGB)
			_JPG	JPEG compressed
			_PNG	PNG compressed W3C/ISO/IEC (RFC-2083)
			_RAW	Full Frames (Uncompressed)
			_RGB	Raw RGB Bitmap
			_RL4	RLE 4bpp RGB
			_RL8	RLE 8bpp RGB
			3IV1	3ivx MPEG-4 v1
			3IV2	3ivx MPEG-4 v2
			3IVX	3ivx MPEG-4
			AASC	Autodesk Animator
			ABYR	Kensington ?ABYR?
			AEMI	Array Microsystems VideoONE MPEG1-I Capture
			AFLC	Autodesk Animator FLC
			AFLI	Autodesk Animator FLI
			AMPG	Array Microsystems VideoONE MPEG
			ANIM	Intel RDX (ANIM)
			AP41	AngelPotion Definitive
			ASV1	Asus Video v1
			ASV2	Asus Video v2
			ASVX	Asus Video 2.0 (audio)
			AUR2	AuraVision Aura 2 Codec - YUV 4:2:2
			AURA	AuraVision Aura 1 Codec - YUV 4:1:1
			AVDJ	Independent JPEG Group\'s codec (AVDJ)
			AVRN	Independent JPEG Group\'s codec (AVRN)
			AYUV	4:4:4 YUV (AYUV)
			AZPR	Quicktime Apple Video (AZPR)
			BGR 	Raw RGB32
			BLZ0	Blizzard DivX MPEG-4
			BTVC	Conexant Composite Video
			BINK	RAD Game Tools Bink Video
			BT20	Conexant Prosumer Video
			BTCV	Conexant Composite Video Codec
			BW10	Data Translation Broadway MPEG Capture
			CC12	Intel YUV12
			CDVC	Canopus DV
			CFCC	Digital Processing Systems DPS Perception
			CGDI	Microsoft Office 97 Camcorder Video
			CHAM	Winnov Caviara Champagne
			CJPG	Creative WebCam JPEG
			CLJR	Cirrus Logic YUV 4:1:1
			CMYK	Common Data Format in Printing (Colorgraph)
			CPLA	Weitek 4:2:0 YUV Planar
			CRAM	Microsoft Video 1 (CRAM)
			cvid	Radius Cinepak
			CVID	Radius Cinepak
			CWLT	Microsoft Color WLT DIB
			CYUV	Creative Labs YUV
			CYUY	ATI YUV
			D261	H.261
			D263	H.263
			DIB 	Device Independent Bitmap
			DIV1	FFmpeg OpenDivX
			DIV2	Microsoft MPEG-4 v1/v2
			DIV3	DivX ;-) MPEG-4 v3.x Low-Motion
			DIV4	DivX ;-) MPEG-4 v3.x Fast-Motion
			DIV5	DivX MPEG-4 v5.x
			DIV6	DivX ;-) (MS MPEG-4 v3.x)
			DIVX	DivX MPEG-4 v4 (OpenDivX / Project Mayo)
			divx	DivX MPEG-4
			DMB1	Matrox Rainbow Runner hardware MJPEG
			DMB2	Paradigm MJPEG
			DSVD	?DSVD?
			DUCK	Duck TrueMotion 1.0
			DPS0	DPS/Leitch Reality Motion JPEG
			DPSC	DPS/Leitch PAR Motion JPEG
			DV25	Matrox DVCPRO codec
			DV50	Matrox DVCPRO50 codec
			DVC 	IEC 61834 and SMPTE 314M (DVC/DV Video)
			DVCP	IEC 61834 and SMPTE 314M (DVC/DV Video)
			DVHD	IEC Standard DV 1125 lines @ 30fps / 1250 lines @ 25fps
			DVMA	Darim Vision DVMPEG (dummy for MPEG compressor) (www.darvision.com)
			DVSL	IEC Standard DV compressed in SD (SDL)
			DVAN	?DVAN?
			DVE2	InSoft DVE-2 Videoconferencing
			dvsd	IEC 61834 and SMPTE 314M DVC/DV Video
			DVSD	IEC 61834 and SMPTE 314M DVC/DV Video
			DVX1	Lucent DVX1000SP Video Decoder
			DVX2	Lucent DVX2000S Video Decoder
			DVX3	Lucent DVX3000S Video Decoder
			DX50	DivX v5
			DXT1	Microsoft DirectX Compressed Texture (DXT1)
			DXT2	Microsoft DirectX Compressed Texture (DXT2)
			DXT3	Microsoft DirectX Compressed Texture (DXT3)
			DXT4	Microsoft DirectX Compressed Texture (DXT4)
			DXT5	Microsoft DirectX Compressed Texture (DXT5)
			DXTC	Microsoft DirectX Compressed Texture (DXTC)
			DXTn	Microsoft DirectX Compressed Texture (DXTn)
			EM2V	Etymonix MPEG-2 I-frame (www.etymonix.com)
			EKQ0	Elsa ?EKQ0?
			ELK0	Elsa ?ELK0?
			ESCP	Eidos Escape
			ETV1	eTreppid Video ETV1
			ETV2	eTreppid Video ETV2
			ETVC	eTreppid Video ETVC
			FLIC	Autodesk FLI/FLC Animation
			FLV1	Sorenson Spark
			FLV4	On2 TrueMotion VP6
			FRWT	Darim Vision Forward Motion JPEG (www.darvision.com)
			FRWU	Darim Vision Forward Uncompressed (www.darvision.com)
			FLJP	D-Vision Field Encoded Motion JPEG
			FPS1	FRAPS v1
			FRWA	SoftLab-Nsk Forward Motion JPEG w/ alpha channel
			FRWD	SoftLab-Nsk Forward Motion JPEG
			FVF1	Iterated Systems Fractal Video Frame
			GLZW	Motion LZW (gabest@freemail.hu)
			GPEG	Motion JPEG (gabest@freemail.hu)
			GWLT	Microsoft Greyscale WLT DIB
			H260	Intel ITU H.260 Videoconferencing
			H261	Intel ITU H.261 Videoconferencing
			H262	Intel ITU H.262 Videoconferencing
			H263	Intel ITU H.263 Videoconferencing
			H264	Intel ITU H.264 Videoconferencing
			H265	Intel ITU H.265 Videoconferencing
			H266	Intel ITU H.266 Videoconferencing
			H267	Intel ITU H.267 Videoconferencing
			H268	Intel ITU H.268 Videoconferencing
			H269	Intel ITU H.269 Videoconferencing
			HFYU	Huffman Lossless Codec
			HMCR	Rendition Motion Compensation Format (HMCR)
			HMRR	Rendition Motion Compensation Format (HMRR)
			I263	FFmpeg I263 decoder
			IF09	Indeo YVU9 ("YVU9 with additional delta-frame info after the U plane")
			IUYV	Interlaced version of UYVY (www.leadtools.com)
			IY41	Interlaced version of Y41P (www.leadtools.com)
			IYU1	12 bit format used in mode 2 of the IEEE 1394 Digital Camera 1.04 spec    IEEE standard
			IYU2	24 bit format used in mode 2 of the IEEE 1394 Digital Camera 1.04 spec    IEEE standard
			IYUV	Planar YUV format (8-bpp Y plane, followed by 8-bpp 2×2 U and V planes)
			i263	Intel ITU H.263 Videoconferencing (i263)
			I420	Intel Indeo 4
			IAN 	Intel Indeo 4 (RDX)
			ICLB	InSoft CellB Videoconferencing
			IGOR	Power DVD
			IJPG	Intergraph JPEG
			ILVC	Intel Layered Video
			ILVR	ITU-T H.263+
			IPDV	I-O Data Device Giga AVI DV Codec
			IR21	Intel Indeo 2.1
			IRAW	Intel YUV Uncompressed
			IV30	Intel Indeo 3.0
			IV31	Intel Indeo 3.1
			IV32	Ligos Indeo 3.2
			IV33	Ligos Indeo 3.3
			IV34	Ligos Indeo 3.4
			IV35	Ligos Indeo 3.5
			IV36	Ligos Indeo 3.6
			IV37	Ligos Indeo 3.7
			IV38	Ligos Indeo 3.8
			IV39	Ligos Indeo 3.9
			IV40	Ligos Indeo Interactive 4.0
			IV41	Ligos Indeo Interactive 4.1
			IV42	Ligos Indeo Interactive 4.2
			IV43	Ligos Indeo Interactive 4.3
			IV44	Ligos Indeo Interactive 4.4
			IV45	Ligos Indeo Interactive 4.5
			IV46	Ligos Indeo Interactive 4.6
			IV47	Ligos Indeo Interactive 4.7
			IV48	Ligos Indeo Interactive 4.8
			IV49	Ligos Indeo Interactive 4.9
			IV50	Ligos Indeo Interactive 5.0
			JBYR	Kensington ?JBYR?
			JPEG	Still Image JPEG DIB
			JPGL	Pegasus Lossless Motion JPEG
			KMVC	Team17 Software Karl Morton\'s Video Codec
			LSVM	Vianet Lighting Strike Vmail (Streaming) (www.vianet.com)
			LEAD	LEAD Video Codec
			Ljpg	LEAD MJPEG Codec
			MDVD	Alex MicroDVD Video (hacked MS MPEG-4) (www.tiasoft.de)
			MJPA	Morgan Motion JPEG (MJPA) (www.morgan-multimedia.com)
			MJPB	Morgan Motion JPEG (MJPB) (www.morgan-multimedia.com)
			MMES	Matrox MPEG-2 I-frame
			MP2v	Microsoft S-Mpeg 4 version 1 (MP2v)
			MP42	Microsoft S-Mpeg 4 version 2 (MP42)
			MP43	Microsoft S-Mpeg 4 version 3 (MP43)
			MP4S	Microsoft S-Mpeg 4 version 3 (MP4S)
			MP4V	FFmpeg MPEG-4
			MPG1	FFmpeg MPEG 1/2
			MPG2	FFmpeg MPEG 1/2
			MPG3	FFmpeg DivX ;-) (MS MPEG-4 v3)
			MPG4	Microsoft MPEG-4
			MPGI	Sigma Designs MPEG
			MPNG	PNG images decoder
			MSS1	Microsoft Windows Screen Video
			MSZH	LCL (Lossless Codec Library) (www.geocities.co.jp/Playtown-Denei/2837/LRC.htm)
			M261	Microsoft H.261
			M263	Microsoft H.263
			M4S2	Microsoft Fully Compliant MPEG-4 v2 simple profile (M4S2)
			m4s2	Microsoft Fully Compliant MPEG-4 v2 simple profile (m4s2)
			MC12	ATI Motion Compensation Format (MC12)
			MCAM	ATI Motion Compensation Format (MCAM)
			MJ2C	Morgan Multimedia Motion JPEG2000
			mJPG	IBM Motion JPEG w/ Huffman Tables
			MJPG	Microsoft Motion JPEG DIB
			MP42	Microsoft MPEG-4 (low-motion)
			MP43	Microsoft MPEG-4 (fast-motion)
			MP4S	Microsoft MPEG-4 (MP4S)
			mp4s	Microsoft MPEG-4 (mp4s)
			MPEG	Chromatic Research MPEG-1 Video I-Frame
			MPG4	Microsoft MPEG-4 Video High Speed Compressor
			MPGI	Sigma Designs MPEG
			MRCA	FAST Multimedia Martin Regen Codec
			MRLE	Microsoft Run Length Encoding
			MSVC	Microsoft Video 1
			MTX1	Matrox ?MTX1?
			MTX2	Matrox ?MTX2?
			MTX3	Matrox ?MTX3?
			MTX4	Matrox ?MTX4?
			MTX5	Matrox ?MTX5?
			MTX6	Matrox ?MTX6?
			MTX7	Matrox ?MTX7?
			MTX8	Matrox ?MTX8?
			MTX9	Matrox ?MTX9?
			MV12	Motion Pixels Codec (old)
			MWV1	Aware Motion Wavelets
			nAVI	SMR Codec (hack of Microsoft MPEG-4) (IRC #shadowrealm)
			NT00	NewTek LightWave HDTV YUV w/ Alpha (www.newtek.com)
			NUV1	NuppelVideo
			NTN1	Nogatech Video Compression 1
			NVS0	nVidia GeForce Texture (NVS0)
			NVS1	nVidia GeForce Texture (NVS1)
			NVS2	nVidia GeForce Texture (NVS2)
			NVS3	nVidia GeForce Texture (NVS3)
			NVS4	nVidia GeForce Texture (NVS4)
			NVS5	nVidia GeForce Texture (NVS5)
			NVT0	nVidia GeForce Texture (NVT0)
			NVT1	nVidia GeForce Texture (NVT1)
			NVT2	nVidia GeForce Texture (NVT2)
			NVT3	nVidia GeForce Texture (NVT3)
			NVT4	nVidia GeForce Texture (NVT4)
			NVT5	nVidia GeForce Texture (NVT5)
			PIXL	MiroXL, Pinnacle PCTV
			PDVC	I-O Data Device Digital Video Capture DV codec
			PGVV	Radius Video Vision
			PHMO	IBM Photomotion
			PIM1	MPEG Realtime (Pinnacle Cards)
			PIM2	Pegasus Imaging ?PIM2?
			PIMJ	Pegasus Imaging Lossless JPEG
			PVEZ	Horizons Technology PowerEZ
			PVMM	PacketVideo Corporation MPEG-4
			PVW2	Pegasus Imaging Wavelet Compression
			Q1.0	Q-Team\'s QPEG 1.0 (www.q-team.de)
			Q1.1	Q-Team\'s QPEG 1.1 (www.q-team.de)
			QPEG	Q-Team QPEG 1.0
			qpeq	Q-Team QPEG 1.1
			RGB 	Raw BGR32
			RGBA	Raw RGB w/ Alpha
			RMP4	REALmagic MPEG-4 (unauthorized XVID copy) (www.sigmadesigns.com)
			ROQV	Id RoQ File Video Decoder
			RPZA	Quicktime Apple Video (RPZA)
			RUD0	Rududu video codec (http://rududu.ifrance.com/rududu/)
			RV10	RealVideo 1.0 (aka RealVideo 5.0)
			RV13	RealVideo 1.0 (RV13)
			RV20	RealVideo G2
			RV30	RealVideo 8
			RV40	RealVideo 9
			RGBT	Raw RGB w/ Transparency
			RLE 	Microsoft Run Length Encoder
			RLE4	Run Length Encoded (4bpp, 16-color)
			RLE8	Run Length Encoded (8bpp, 256-color)
			RT21	Intel Indeo RealTime Video 2.1
			rv20	RealVideo G2
			rv30	RealVideo 8
			RVX 	Intel RDX (RVX )
			SMC 	Apple Graphics (SMC )
			SP54	Logitech Sunplus Sp54 Codec for Mustek GSmart Mini 2
			SPIG	Radius Spigot
			SVQ3	Sorenson Video 3 (Apple Quicktime 5)
			s422	Tekram VideoCap C210 YUV 4:2:2
			SDCC	Sun Communication Digital Camera Codec
			SFMC	CrystalNet Surface Fitting Method
			SMSC	Radius SMSC
			SMSD	Radius SMSD
			smsv	WorldConnect Wavelet Video
			SPIG	Radius Spigot
			SPLC	Splash Studios ACM Audio Codec (www.splashstudios.net)
			SQZ2	Microsoft VXTreme Video Codec V2
			STVA	ST Microelectronics CMOS Imager Data (Bayer)
			STVB	ST Microelectronics CMOS Imager Data (Nudged Bayer)
			STVC	ST Microelectronics CMOS Imager Data (Bunched)
			STVX	ST Microelectronics CMOS Imager Data (Extended CODEC Data Format)
			STVY	ST Microelectronics CMOS Imager Data (Extended CODEC Data Format with Correction Data)
			SV10	Sorenson Video R1
			SVQ1	Sorenson Video
			T420	Toshiba YUV 4:2:0
			TM2A	Duck TrueMotion Archiver 2.0 (www.duck.com)
			TVJP	Pinnacle/Truevision Targa 2000 board (TVJP)
			TVMJ	Pinnacle/Truevision Targa 2000 board (TVMJ)
			TY0N	Tecomac Low-Bit Rate Codec (www.tecomac.com)
			TY2C	Trident Decompression Driver
			TLMS	TeraLogic Motion Intraframe Codec (TLMS)
			TLST	TeraLogic Motion Intraframe Codec (TLST)
			TM20	Duck TrueMotion 2.0
			TM2X	Duck TrueMotion 2X
			TMIC	TeraLogic Motion Intraframe Codec (TMIC)
			TMOT	Horizons Technology TrueMotion S
			tmot	Horizons TrueMotion Video Compression
			TR20	Duck TrueMotion RealTime 2.0
			TSCC	TechSmith Screen Capture Codec
			TV10	Tecomac Low-Bit Rate Codec
			TY2N	Trident ?TY2N?
			U263	UB Video H.263/H.263+/H.263++ Decoder
			UMP4	UB Video MPEG 4 (www.ubvideo.com)
			UYNV	Nvidia UYVY packed 4:2:2
			UYVP	Evans & Sutherland YCbCr 4:2:2 extended precision
			UCOD	eMajix.com ClearVideo
			ULTI	IBM Ultimotion
			UYVY	UYVY packed 4:2:2
			V261	Lucent VX2000S
			VIFP	VFAPI Reader Codec (www.yks.ne.jp/~hori/)
			VIV1	FFmpeg H263+ decoder
			VIV2	Vivo H.263
			VQC2	Vector-quantised codec 2 (research) http://eprints.ecs.soton.ac.uk/archive/00001310/01/VTC97-js.pdf)
			VTLP	Alaris VideoGramPiX
			VYU9	ATI YUV (VYU9)
			VYUY	ATI YUV (VYUY)
			V261	Lucent VX2000S
			V422	Vitec Multimedia 24-bit YUV 4:2:2 Format
			V655	Vitec Multimedia 16-bit YUV 4:2:2 Format
			VCR1	ATI Video Codec 1
			VCR2	ATI Video Codec 2
			VCR3	ATI VCR 3.0
			VCR4	ATI VCR 4.0
			VCR5	ATI VCR 5.0
			VCR6	ATI VCR 6.0
			VCR7	ATI VCR 7.0
			VCR8	ATI VCR 8.0
			VCR9	ATI VCR 9.0
			VDCT	Vitec Multimedia Video Maker Pro DIB
			VDOM	VDOnet VDOWave
			VDOW	VDOnet VDOLive (H.263)
			VDTZ	Darim Vison VideoTizer YUV
			VGPX	Alaris VideoGramPiX
			VIDS	Vitec Multimedia YUV 4:2:2 CCIR 601 for V422
			VIVO	Vivo H.263 v2.00
			vivo	Vivo H.263
			VIXL	Miro/Pinnacle Video XL
			VLV1	VideoLogic/PURE Digital Videologic Capture
			VP30	On2 VP3.0
			VP31	On2 VP3.1
			VP6F	On2 TrueMotion VP6
			VX1K	Lucent VX1000S Video Codec
			VX2K	Lucent VX2000S Video Codec
			VXSP	Lucent VX1000SP Video Codec
			WBVC	Winbond W9960
			WHAM	Microsoft Video 1 (WHAM)
			WINX	Winnov Software Compression
			WJPG	AverMedia Winbond JPEG
			WMV1	Windows Media Video V7
			WMV2	Windows Media Video V8
			WMV3	Windows Media Video V9
			WNV1	Winnov Hardware Compression
			XYZP	Extended PAL format XYZ palette (www.riff.org)
			x263	Xirlink H.263
			XLV0	NetXL Video Decoder
			XMPG	Xing MPEG (I-Frame only)
			XVID	XviD MPEG-4 (www.xvid.org)
			XXAN	?XXAN?
			YU92	Intel YUV (YU92)
			YUNV	Nvidia Uncompressed YUV 4:2:2
			YUVP	Extended PAL format YUV palette (www.riff.org)
			Y211	YUV 2:1:1 Packed
			Y411	YUV 4:1:1 Packed
			Y41B	Weitek YUV 4:1:1 Planar
			Y41P	Brooktree PC1 YUV 4:1:1 Packed
			Y41T	Brooktree PC1 YUV 4:1:1 with transparency
			Y42B	Weitek YUV 4:2:2 Planar
			Y42T	Brooktree UYUV 4:2:2 with transparency
			Y422	ADS Technologies Copy of UYVY used in Pyro WebCam firewire camera
			Y800	Simple, single Y plane for monochrome images
			Y8  	Grayscale video
			YC12	Intel YUV 12 codec
			YUV8	Winnov Caviar YUV8
			YUV9	Intel YUV9
			YUY2	Uncompressed YUV 4:2:2
			YUYV	Canopus YUV
			YV12	YVU12 Planar
			YVU9	Intel YVU9 Planar (8-bpp Y plane, followed by 8-bpp 4x4 U and V planes)
			YVYU	YVYU 4:2:2 Packed
			ZLIB	Lossless Codec Library zlib compression (www.geocities.co.jp/Playtown-Denei/2837/LRC.htm)
			ZPEG	Metheus Video Zipper
 */
        public static function fourccLookup(/** This is not a comment!

			swot	http://developer.apple.com/qa/snd/snd07.html
			____	No Codec (____)
			_BIT	BI_BITFIELDS (Raw RGB)
			_JPG	JPEG compressed
			_PNG	PNG compressed W3C/ISO/IEC (RFC-2083)
			_RAW	Full Frames (Uncompressed)
			_RGB	Raw RGB Bitmap
			_RL4	RLE 4bpp RGB
			_RL8	RLE 8bpp RGB
			3IV1	3ivx MPEG-4 v1
			3IV2	3ivx MPEG-4 v2
			3IVX	3ivx MPEG-4
			AASC	Autodesk Animator
			ABYR	Kensington ?ABYR?
			AEMI	Array Microsystems VideoONE MPEG1-I Capture
			AFLC	Autodesk Animator FLC
			AFLI	Autodesk Animator FLI
			AMPG	Array Microsystems VideoONE MPEG
			ANIM	Intel RDX (ANIM)
			AP41	AngelPotion Definitive
			ASV1	Asus Video v1
			ASV2	Asus Video v2
			ASVX	Asus Video 2.0 (audio)
			AUR2	AuraVision Aura 2 Codec - YUV 4:2:2
			AURA	AuraVision Aura 1 Codec - YUV 4:1:1
			AVDJ	Independent JPEG Group\'s codec (AVDJ)
			AVRN	Independent JPEG Group\'s codec (AVRN)
			AYUV	4:4:4 YUV (AYUV)
			AZPR	Quicktime Apple Video (AZPR)
			BGR 	Raw RGB32
			BLZ0	Blizzard DivX MPEG-4
			BTVC	Conexant Composite Video
			BINK	RAD Game Tools Bink Video
			BT20	Conexant Prosumer Video
			BTCV	Conexant Composite Video Codec
			BW10	Data Translation Broadway MPEG Capture
			CC12	Intel YUV12
			CDVC	Canopus DV
			CFCC	Digital Processing Systems DPS Perception
			CGDI	Microsoft Office 97 Camcorder Video
			CHAM	Winnov Caviara Champagne
			CJPG	Creative WebCam JPEG
			CLJR	Cirrus Logic YUV 4:1:1
			CMYK	Common Data Format in Printing (Colorgraph)
			CPLA	Weitek 4:2:0 YUV Planar
			CRAM	Microsoft Video 1 (CRAM)
			cvid	Radius Cinepak
			CVID	Radius Cinepak
			CWLT	Microsoft Color WLT DIB
			CYUV	Creative Labs YUV
			CYUY	ATI YUV
			D261	H.261
			D263	H.263
			DIB 	Device Independent Bitmap
			DIV1	FFmpeg OpenDivX
			DIV2	Microsoft MPEG-4 v1/v2
			DIV3	DivX ;-) MPEG-4 v3.x Low-Motion
			DIV4	DivX ;-) MPEG-4 v3.x Fast-Motion
			DIV5	DivX MPEG-4 v5.x
			DIV6	DivX ;-) (MS MPEG-4 v3.x)
			DIVX	DivX MPEG-4 v4 (OpenDivX / Project Mayo)
			divx	DivX MPEG-4
			DMB1	Matrox Rainbow Runner hardware MJPEG
			DMB2	Paradigm MJPEG
			DSVD	?DSVD?
			DUCK	Duck TrueMotion 1.0
			DPS0	DPS/Leitch Reality Motion JPEG
			DPSC	DPS/Leitch PAR Motion JPEG
			DV25	Matrox DVCPRO codec
			DV50	Matrox DVCPRO50 codec
			DVC 	IEC 61834 and SMPTE 314M (DVC/DV Video)
			DVCP	IEC 61834 and SMPTE 314M (DVC/DV Video)
			DVHD	IEC Standard DV 1125 lines @ 30fps / 1250 lines @ 25fps
			DVMA	Darim Vision DVMPEG (dummy for MPEG compressor) (www.darvision.com)
			DVSL	IEC Standard DV compressed in SD (SDL)
			DVAN	?DVAN?
			DVE2	InSoft DVE-2 Videoconferencing
			dvsd	IEC 61834 and SMPTE 314M DVC/DV Video
			DVSD	IEC 61834 and SMPTE 314M DVC/DV Video
			DVX1	Lucent DVX1000SP Video Decoder
			DVX2	Lucent DVX2000S Video Decoder
			DVX3	Lucent DVX3000S Video Decoder
			DX50	DivX v5
			DXT1	Microsoft DirectX Compressed Texture (DXT1)
			DXT2	Microsoft DirectX Compressed Texture (DXT2)
			DXT3	Microsoft DirectX Compressed Texture (DXT3)
			DXT4	Microsoft DirectX Compressed Texture (DXT4)
			DXT5	Microsoft DirectX Compressed Texture (DXT5)
			DXTC	Microsoft DirectX Compressed Texture (DXTC)
			DXTn	Microsoft DirectX Compressed Texture (DXTn)
			EM2V	Etymonix MPEG-2 I-frame (www.etymonix.com)
			EKQ0	Elsa ?EKQ0?
			ELK0	Elsa ?ELK0?
			ESCP	Eidos Escape
			ETV1	eTreppid Video ETV1
			ETV2	eTreppid Video ETV2
			ETVC	eTreppid Video ETVC
			FLIC	Autodesk FLI/FLC Animation
			FLV1	Sorenson Spark
			FLV4	On2 TrueMotion VP6
			FRWT	Darim Vision Forward Motion JPEG (www.darvision.com)
			FRWU	Darim Vision Forward Uncompressed (www.darvision.com)
			FLJP	D-Vision Field Encoded Motion JPEG
			FPS1	FRAPS v1
			FRWA	SoftLab-Nsk Forward Motion JPEG w/ alpha channel
			FRWD	SoftLab-Nsk Forward Motion JPEG
			FVF1	Iterated Systems Fractal Video Frame
			GLZW	Motion LZW (gabest@freemail.hu)
			GPEG	Motion JPEG (gabest@freemail.hu)
			GWLT	Microsoft Greyscale WLT DIB
			H260	Intel ITU H.260 Videoconferencing
			H261	Intel ITU H.261 Videoconferencing
			H262	Intel ITU H.262 Videoconferencing
			H263	Intel ITU H.263 Videoconferencing
			H264	Intel ITU H.264 Videoconferencing
			H265	Intel ITU H.265 Videoconferencing
			H266	Intel ITU H.266 Videoconferencing
			H267	Intel ITU H.267 Videoconferencing
			H268	Intel ITU H.268 Videoconferencing
			H269	Intel ITU H.269 Videoconferencing
			HFYU	Huffman Lossless Codec
			HMCR	Rendition Motion Compensation Format (HMCR)
			HMRR	Rendition Motion Compensation Format (HMRR)
			I263	FFmpeg I263 decoder
			IF09	Indeo YVU9 ("YVU9 with additional delta-frame info after the U plane")
			IUYV	Interlaced version of UYVY (www.leadtools.com)
			IY41	Interlaced version of Y41P (www.leadtools.com)
			IYU1	12 bit format used in mode 2 of the IEEE 1394 Digital Camera 1.04 spec    IEEE standard
			IYU2	24 bit format used in mode 2 of the IEEE 1394 Digital Camera 1.04 spec    IEEE standard
			IYUV	Planar YUV format (8-bpp Y plane, followed by 8-bpp 2×2 U and V planes)
			i263	Intel ITU H.263 Videoconferencing (i263)
			I420	Intel Indeo 4
			IAN 	Intel Indeo 4 (RDX)
			ICLB	InSoft CellB Videoconferencing
			IGOR	Power DVD
			IJPG	Intergraph JPEG
			ILVC	Intel Layered Video
			ILVR	ITU-T H.263+
			IPDV	I-O Data Device Giga AVI DV Codec
			IR21	Intel Indeo 2.1
			IRAW	Intel YUV Uncompressed
			IV30	Intel Indeo 3.0
			IV31	Intel Indeo 3.1
			IV32	Ligos Indeo 3.2
			IV33	Ligos Indeo 3.3
			IV34	Ligos Indeo 3.4
			IV35	Ligos Indeo 3.5
			IV36	Ligos Indeo 3.6
			IV37	Ligos Indeo 3.7
			IV38	Ligos Indeo 3.8
			IV39	Ligos Indeo 3.9
			IV40	Ligos Indeo Interactive 4.0
			IV41	Ligos Indeo Interactive 4.1
			IV42	Ligos Indeo Interactive 4.2
			IV43	Ligos Indeo Interactive 4.3
			IV44	Ligos Indeo Interactive 4.4
			IV45	Ligos Indeo Interactive 4.5
			IV46	Ligos Indeo Interactive 4.6
			IV47	Ligos Indeo Interactive 4.7
			IV48	Ligos Indeo Interactive 4.8
			IV49	Ligos Indeo Interactive 4.9
			IV50	Ligos Indeo Interactive 5.0
			JBYR	Kensington ?JBYR?
			JPEG	Still Image JPEG DIB
			JPGL	Pegasus Lossless Motion JPEG
			KMVC	Team17 Software Karl Morton\'s Video Codec
			LSVM	Vianet Lighting Strike Vmail (Streaming) (www.vianet.com)
			LEAD	LEAD Video Codec
			Ljpg	LEAD MJPEG Codec
			MDVD	Alex MicroDVD Video (hacked MS MPEG-4) (www.tiasoft.de)
			MJPA	Morgan Motion JPEG (MJPA) (www.morgan-multimedia.com)
			MJPB	Morgan Motion JPEG (MJPB) (www.morgan-multimedia.com)
			MMES	Matrox MPEG-2 I-frame
			MP2v	Microsoft S-Mpeg 4 version 1 (MP2v)
			MP42	Microsoft S-Mpeg 4 version 2 (MP42)
			MP43	Microsoft S-Mpeg 4 version 3 (MP43)
			MP4S	Microsoft S-Mpeg 4 version 3 (MP4S)
			MP4V	FFmpeg MPEG-4
			MPG1	FFmpeg MPEG 1/2
			MPG2	FFmpeg MPEG 1/2
			MPG3	FFmpeg DivX ;-) (MS MPEG-4 v3)
			MPG4	Microsoft MPEG-4
			MPGI	Sigma Designs MPEG
			MPNG	PNG images decoder
			MSS1	Microsoft Windows Screen Video
			MSZH	LCL (Lossless Codec Library) (www.geocities.co.jp/Playtown-Denei/2837/LRC.htm)
			M261	Microsoft H.261
			M263	Microsoft H.263
			M4S2	Microsoft Fully Compliant MPEG-4 v2 simple profile (M4S2)
			m4s2	Microsoft Fully Compliant MPEG-4 v2 simple profile (m4s2)
			MC12	ATI Motion Compensation Format (MC12)
			MCAM	ATI Motion Compensation Format (MCAM)
			MJ2C	Morgan Multimedia Motion JPEG2000
			mJPG	IBM Motion JPEG w/ Huffman Tables
			MJPG	Microsoft Motion JPEG DIB
			MP42	Microsoft MPEG-4 (low-motion)
			MP43	Microsoft MPEG-4 (fast-motion)
			MP4S	Microsoft MPEG-4 (MP4S)
			mp4s	Microsoft MPEG-4 (mp4s)
			MPEG	Chromatic Research MPEG-1 Video I-Frame
			MPG4	Microsoft MPEG-4 Video High Speed Compressor
			MPGI	Sigma Designs MPEG
			MRCA	FAST Multimedia Martin Regen Codec
			MRLE	Microsoft Run Length Encoding
			MSVC	Microsoft Video 1
			MTX1	Matrox ?MTX1?
			MTX2	Matrox ?MTX2?
			MTX3	Matrox ?MTX3?
			MTX4	Matrox ?MTX4?
			MTX5	Matrox ?MTX5?
			MTX6	Matrox ?MTX6?
			MTX7	Matrox ?MTX7?
			MTX8	Matrox ?MTX8?
			MTX9	Matrox ?MTX9?
			MV12	Motion Pixels Codec (old)
			MWV1	Aware Motion Wavelets
			nAVI	SMR Codec (hack of Microsoft MPEG-4) (IRC #shadowrealm)
			NT00	NewTek LightWave HDTV YUV w/ Alpha (www.newtek.com)
			NUV1	NuppelVideo
			NTN1	Nogatech Video Compression 1
			NVS0	nVidia GeForce Texture (NVS0)
			NVS1	nVidia GeForce Texture (NVS1)
			NVS2	nVidia GeForce Texture (NVS2)
			NVS3	nVidia GeForce Texture (NVS3)
			NVS4	nVidia GeForce Texture (NVS4)
			NVS5	nVidia GeForce Texture (NVS5)
			NVT0	nVidia GeForce Texture (NVT0)
			NVT1	nVidia GeForce Texture (NVT1)
			NVT2	nVidia GeForce Texture (NVT2)
			NVT3	nVidia GeForce Texture (NVT3)
			NVT4	nVidia GeForce Texture (NVT4)
			NVT5	nVidia GeForce Texture (NVT5)
			PIXL	MiroXL, Pinnacle PCTV
			PDVC	I-O Data Device Digital Video Capture DV codec
			PGVV	Radius Video Vision
			PHMO	IBM Photomotion
			PIM1	MPEG Realtime (Pinnacle Cards)
			PIM2	Pegasus Imaging ?PIM2?
			PIMJ	Pegasus Imaging Lossless JPEG
			PVEZ	Horizons Technology PowerEZ
			PVMM	PacketVideo Corporation MPEG-4
			PVW2	Pegasus Imaging Wavelet Compression
			Q1.0	Q-Team\'s QPEG 1.0 (www.q-team.de)
			Q1.1	Q-Team\'s QPEG 1.1 (www.q-team.de)
			QPEG	Q-Team QPEG 1.0
			qpeq	Q-Team QPEG 1.1
			RGB 	Raw BGR32
			RGBA	Raw RGB w/ Alpha
			RMP4	REALmagic MPEG-4 (unauthorized XVID copy) (www.sigmadesigns.com)
			ROQV	Id RoQ File Video Decoder
			RPZA	Quicktime Apple Video (RPZA)
			RUD0	Rududu video codec (http://rududu.ifrance.com/rududu/)
			RV10	RealVideo 1.0 (aka RealVideo 5.0)
			RV13	RealVideo 1.0 (RV13)
			RV20	RealVideo G2
			RV30	RealVideo 8
			RV40	RealVideo 9
			RGBT	Raw RGB w/ Transparency
			RLE 	Microsoft Run Length Encoder
			RLE4	Run Length Encoded (4bpp, 16-color)
			RLE8	Run Length Encoded (8bpp, 256-color)
			RT21	Intel Indeo RealTime Video 2.1
			rv20	RealVideo G2
			rv30	RealVideo 8
			RVX 	Intel RDX (RVX )
			SMC 	Apple Graphics (SMC )
			SP54	Logitech Sunplus Sp54 Codec for Mustek GSmart Mini 2
			SPIG	Radius Spigot
			SVQ3	Sorenson Video 3 (Apple Quicktime 5)
			s422	Tekram VideoCap C210 YUV 4:2:2
			SDCC	Sun Communication Digital Camera Codec
			SFMC	CrystalNet Surface Fitting Method
			SMSC	Radius SMSC
			SMSD	Radius SMSD
			smsv	WorldConnect Wavelet Video
			SPIG	Radius Spigot
			SPLC	Splash Studios ACM Audio Codec (www.splashstudios.net)
			SQZ2	Microsoft VXTreme Video Codec V2
			STVA	ST Microelectronics CMOS Imager Data (Bayer)
			STVB	ST Microelectronics CMOS Imager Data (Nudged Bayer)
			STVC	ST Microelectronics CMOS Imager Data (Bunched)
			STVX	ST Microelectronics CMOS Imager Data (Extended CODEC Data Format)
			STVY	ST Microelectronics CMOS Imager Data (Extended CODEC Data Format with Correction Data)
			SV10	Sorenson Video R1
			SVQ1	Sorenson Video
			T420	Toshiba YUV 4:2:0
			TM2A	Duck TrueMotion Archiver 2.0 (www.duck.com)
			TVJP	Pinnacle/Truevision Targa 2000 board (TVJP)
			TVMJ	Pinnacle/Truevision Targa 2000 board (TVMJ)
			TY0N	Tecomac Low-Bit Rate Codec (www.tecomac.com)
			TY2C	Trident Decompression Driver
			TLMS	TeraLogic Motion Intraframe Codec (TLMS)
			TLST	TeraLogic Motion Intraframe Codec (TLST)
			TM20	Duck TrueMotion 2.0
			TM2X	Duck TrueMotion 2X
			TMIC	TeraLogic Motion Intraframe Codec (TMIC)
			TMOT	Horizons Technology TrueMotion S
			tmot	Horizons TrueMotion Video Compression
			TR20	Duck TrueMotion RealTime 2.0
			TSCC	TechSmith Screen Capture Codec
			TV10	Tecomac Low-Bit Rate Codec
			TY2N	Trident ?TY2N?
			U263	UB Video H.263/H.263+/H.263++ Decoder
			UMP4	UB Video MPEG 4 (www.ubvideo.com)
			UYNV	Nvidia UYVY packed 4:2:2
			UYVP	Evans & Sutherland YCbCr 4:2:2 extended precision
			UCOD	eMajix.com ClearVideo
			ULTI	IBM Ultimotion
			UYVY	UYVY packed 4:2:2
			V261	Lucent VX2000S
			VIFP	VFAPI Reader Codec (www.yks.ne.jp/~hori/)
			VIV1	FFmpeg H263+ decoder
			VIV2	Vivo H.263
			VQC2	Vector-quantised codec 2 (research) http://eprints.ecs.soton.ac.uk/archive/00001310/01/VTC97-js.pdf)
			VTLP	Alaris VideoGramPiX
			VYU9	ATI YUV (VYU9)
			VYUY	ATI YUV (VYUY)
			V261	Lucent VX2000S
			V422	Vitec Multimedia 24-bit YUV 4:2:2 Format
			V655	Vitec Multimedia 16-bit YUV 4:2:2 Format
			VCR1	ATI Video Codec 1
			VCR2	ATI Video Codec 2
			VCR3	ATI VCR 3.0
			VCR4	ATI VCR 4.0
			VCR5	ATI VCR 5.0
			VCR6	ATI VCR 6.0
			VCR7	ATI VCR 7.0
			VCR8	ATI VCR 8.0
			VCR9	ATI VCR 9.0
			VDCT	Vitec Multimedia Video Maker Pro DIB
			VDOM	VDOnet VDOWave
			VDOW	VDOnet VDOLive (H.263)
			VDTZ	Darim Vison VideoTizer YUV
			VGPX	Alaris VideoGramPiX
			VIDS	Vitec Multimedia YUV 4:2:2 CCIR 601 for V422
			VIVO	Vivo H.263 v2.00
			vivo	Vivo H.263
			VIXL	Miro/Pinnacle Video XL
			VLV1	VideoLogic/PURE Digital Videologic Capture
			VP30	On2 VP3.0
			VP31	On2 VP3.1
			VP6F	On2 TrueMotion VP6
			VX1K	Lucent VX1000S Video Codec
			VX2K	Lucent VX2000S Video Codec
			VXSP	Lucent VX1000SP Video Codec
			WBVC	Winbond W9960
			WHAM	Microsoft Video 1 (WHAM)
			WINX	Winnov Software Compression
			WJPG	AverMedia Winbond JPEG
			WMV1	Windows Media Video V7
			WMV2	Windows Media Video V8
			WMV3	Windows Media Video V9
			WNV1	Winnov Hardware Compression
			XYZP	Extended PAL format XYZ palette (www.riff.org)
			x263	Xirlink H.263
			XLV0	NetXL Video Decoder
			XMPG	Xing MPEG (I-Frame only)
			XVID	XviD MPEG-4 (www.xvid.org)
			XXAN	?XXAN?
			YU92	Intel YUV (YU92)
			YUNV	Nvidia Uncompressed YUV 4:2:2
			YUVP	Extended PAL format YUV palette (www.riff.org)
			Y211	YUV 2:1:1 Packed
			Y411	YUV 4:1:1 Packed
			Y41B	Weitek YUV 4:1:1 Planar
			Y41P	Brooktree PC1 YUV 4:1:1 Packed
			Y41T	Brooktree PC1 YUV 4:1:1 with transparency
			Y42B	Weitek YUV 4:2:2 Planar
			Y42T	Brooktree UYUV 4:2:2 with transparency
			Y422	ADS Technologies Copy of UYVY used in Pyro WebCam firewire camera
			Y800	Simple, single Y plane for monochrome images
			Y8  	Grayscale video
			YC12	Intel YUV 12 codec
			YUV8	Winnov Caviar YUV8
			YUV9	Intel YUV9
			YUY2	Uncompressed YUV 4:2:2
			YUYV	Canopus YUV
			YV12	YVU12 Planar
			YVU9	Intel YVU9 Planar (8-bpp Y plane, followed by 8-bpp 4x4 U and V planes)
			YVYU	YVYU 4:2:2 Packed
			ZLIB	Lossless Codec Library zlib compression (www.geocities.co.jp/Playtown-Denei/2837/LRC.htm)
			ZPEG	Metheus Video Zipper
 */
$fourcc) {}
        private function EitherEndian2Int($byteword, $signed = false) {}
    }

    /**
* @tutorial http://flac.sourceforge.net/format.html
*/
    class getid3_flac extends \getid3_handler {
        const syncword = 'fLaC';

        public function Analyze() {}
        public function parseMETAdata() {}
        private function parseSTREAMINFO($BlockData) {}
        private function parseAPPLICATION($BlockData) {}
        private function parseSEEKTABLE($BlockData) {}
        private function parseVORBIS_COMMENT($BlockData) {}
        private function parseCUESHEET($BlockData) {}
        /**
         * Parse METADATA_BLOCK_PICTURE flac structure and extract attachment
         * External usage: audio.ogg
         */
        public function parsePICTURE() {}
        public static function metaBlockTypeLookup($blocktype) {}
        public static function applicationIDLookup($applicationid) {}
        public static function pictureTypeLookup($type_id) {}
    }

    class getid3_apetag extends \getid3_handler {
        public $inline_attachments;
        public $overrideendoffset;

        public function Analyze() {}
        public function parseAPEheaderFooter($APEheaderFooterData) {}
        public function parseAPEtagFlags($rawflagint) {}
        public function APEcontentTypeFlagLookup($contenttypeid) {}
        public function APEtagItemIsUTF8Lookup($itemkey) {}
    }

    class getid3_id3v2 extends \getid3_handler {
        public $StartingOffset;

        public function Analyze() {}
        public function ParseID3v2GenreString($genrestring) {}
        public function ParseID3v2Frame($parsedFrame) {}
        public function DeUnsynchronise($data) {}
        public function LookupExtendedHeaderRestrictionsTagSizeLimits($index) {}
        public function LookupExtendedHeaderRestrictionsTextEncodings($index) {}
        public function LookupExtendedHeaderRestrictionsTextFieldSize($index) {}
        public function LookupExtendedHeaderRestrictionsImageEncoding($index) {}
        public function LookupExtendedHeaderRestrictionsImageSizeSize($index) {}
/** This is not a comment!


			AED	Dirhams
			AFA	Afghanis
			ALL	Leke
			AMD	Drams
			ANG	Guilders
			AOA	Kwanza
			ARS	Pesos
			ATS	Schillings
			AUD	Dollars
			AWG	Guilders
			AZM	Manats
			BAM	Convertible Marka
			BBD	Dollars
			BDT	Taka
			BEF	Francs
			BGL	Leva
			BHD	Dinars
			BIF	Francs
			BMD	Dollars
			BND	Dollars
			BOB	Bolivianos
			BRL	Brazil Real
			BSD	Dollars
			BTN	Ngultrum
			BWP	Pulas
			BYR	Rubles
			BZD	Dollars
			CAD	Dollars
			CDF	Congolese Francs
			CHF	Francs
			CLP	Pesos
			CNY	Yuan Renminbi
			COP	Pesos
			CRC	Colones
			CUP	Pesos
			CVE	Escudos
			CYP	Pounds
			CZK	Koruny
			DEM	Deutsche Marks
			DJF	Francs
			DKK	Kroner
			DOP	Pesos
			DZD	Algeria Dinars
			EEK	Krooni
			EGP	Pounds
			ERN	Nakfa
			ESP	Pesetas
			ETB	Birr
			EUR	Euro
			FIM	Markkaa
			FJD	Dollars
			FKP	Pounds
			FRF	Francs
			GBP	Pounds
			GEL	Lari
			GGP	Pounds
			GHC	Cedis
			GIP	Pounds
			GMD	Dalasi
			GNF	Francs
			GRD	Drachmae
			GTQ	Quetzales
			GYD	Dollars
			HKD	Dollars
			HNL	Lempiras
			HRK	Kuna
			HTG	Gourdes
			HUF	Forints
			IDR	Rupiahs
			IEP	Pounds
			ILS	New Shekels
			IMP	Pounds
			INR	Rupees
			IQD	Dinars
			IRR	Rials
			ISK	Kronur
			ITL	Lire
			JEP	Pounds
			JMD	Dollars
			JOD	Dinars
			JPY	Yen
			KES	Shillings
			KGS	Soms
			KHR	Riels
			KMF	Francs
			KPW	Won
			KWD	Dinars
			KYD	Dollars
			KZT	Tenge
			LAK	Kips
			LBP	Pounds
			LKR	Rupees
			LRD	Dollars
			LSL	Maloti
			LTL	Litai
			LUF	Francs
			LVL	Lati
			LYD	Dinars
			MAD	Dirhams
			MDL	Lei
			MGF	Malagasy Francs
			MKD	Denars
			MMK	Kyats
			MNT	Tugriks
			MOP	Patacas
			MRO	Ouguiyas
			MTL	Liri
			MUR	Rupees
			MVR	Rufiyaa
			MWK	Kwachas
			MXN	Pesos
			MYR	Ringgits
			MZM	Meticais
			NAD	Dollars
			NGN	Nairas
			NIO	Gold Cordobas
			NLG	Guilders
			NOK	Krone
			NPR	Nepal Rupees
			NZD	Dollars
			OMR	Rials
			PAB	Balboa
			PEN	Nuevos Soles
			PGK	Kina
			PHP	Pesos
			PKR	Rupees
			PLN	Zlotych
			PTE	Escudos
			PYG	Guarani
			QAR	Rials
			ROL	Lei
			RUR	Rubles
			RWF	Rwanda Francs
			SAR	Riyals
			SBD	Dollars
			SCR	Rupees
			SDD	Dinars
			SEK	Kronor
			SGD	Dollars
			SHP	Pounds
			SIT	Tolars
			SKK	Koruny
			SLL	Leones
			SOS	Shillings
			SPL	Luigini
			SRG	Guilders
			STD	Dobras
			SVC	Colones
			SYP	Pounds
			SZL	Emalangeni
			THB	Baht
			TJR	Rubles
			TMM	Manats
			TND	Dinars
			TOP	Pa'anga
			TRL	Liras
			TTD	Dollars
			TVD	Tuvalu Dollars
			TWD	New Dollars
			TZS	Shillings
			UAH	Hryvnia
			UGX	Shillings
			USD	Dollars
			UYU	Pesos
			UZS	Sums
			VAL	Lire
			VEB	Bolivares
			VND	Dong
			VUV	Vatu
			WST	Tala
			XAF	Francs
			XAG	Ounces
			XAU	Ounces
			XCD	Dollars
			XDR	Special Drawing Rights
			XPD	Ounces
			XPF	Francs
			XPT	Ounces
			YER	Rials
			YUM	New Dinars
			ZAR	Rand
			ZMK	Kwacha
			ZWD	Zimbabwe Dollars
 */
        public function LookupCurrencyUnits(/** This is not a comment!


			AED	Dirhams
			AFA	Afghanis
			ALL	Leke
			AMD	Drams
			ANG	Guilders
			AOA	Kwanza
			ARS	Pesos
			ATS	Schillings
			AUD	Dollars
			AWG	Guilders
			AZM	Manats
			BAM	Convertible Marka
			BBD	Dollars
			BDT	Taka
			BEF	Francs
			BGL	Leva
			BHD	Dinars
			BIF	Francs
			BMD	Dollars
			BND	Dollars
			BOB	Bolivianos
			BRL	Brazil Real
			BSD	Dollars
			BTN	Ngultrum
			BWP	Pulas
			BYR	Rubles
			BZD	Dollars
			CAD	Dollars
			CDF	Congolese Francs
			CHF	Francs
			CLP	Pesos
			CNY	Yuan Renminbi
			COP	Pesos
			CRC	Colones
			CUP	Pesos
			CVE	Escudos
			CYP	Pounds
			CZK	Koruny
			DEM	Deutsche Marks
			DJF	Francs
			DKK	Kroner
			DOP	Pesos
			DZD	Algeria Dinars
			EEK	Krooni
			EGP	Pounds
			ERN	Nakfa
			ESP	Pesetas
			ETB	Birr
			EUR	Euro
			FIM	Markkaa
			FJD	Dollars
			FKP	Pounds
			FRF	Francs
			GBP	Pounds
			GEL	Lari
			GGP	Pounds
			GHC	Cedis
			GIP	Pounds
			GMD	Dalasi
			GNF	Francs
			GRD	Drachmae
			GTQ	Quetzales
			GYD	Dollars
			HKD	Dollars
			HNL	Lempiras
			HRK	Kuna
			HTG	Gourdes
			HUF	Forints
			IDR	Rupiahs
			IEP	Pounds
			ILS	New Shekels
			IMP	Pounds
			INR	Rupees
			IQD	Dinars
			IRR	Rials
			ISK	Kronur
			ITL	Lire
			JEP	Pounds
			JMD	Dollars
			JOD	Dinars
			JPY	Yen
			KES	Shillings
			KGS	Soms
			KHR	Riels
			KMF	Francs
			KPW	Won
			KWD	Dinars
			KYD	Dollars
			KZT	Tenge
			LAK	Kips
			LBP	Pounds
			LKR	Rupees
			LRD	Dollars
			LSL	Maloti
			LTL	Litai
			LUF	Francs
			LVL	Lati
			LYD	Dinars
			MAD	Dirhams
			MDL	Lei
			MGF	Malagasy Francs
			MKD	Denars
			MMK	Kyats
			MNT	Tugriks
			MOP	Patacas
			MRO	Ouguiyas
			MTL	Liri
			MUR	Rupees
			MVR	Rufiyaa
			MWK	Kwachas
			MXN	Pesos
			MYR	Ringgits
			MZM	Meticais
			NAD	Dollars
			NGN	Nairas
			NIO	Gold Cordobas
			NLG	Guilders
			NOK	Krone
			NPR	Nepal Rupees
			NZD	Dollars
			OMR	Rials
			PAB	Balboa
			PEN	Nuevos Soles
			PGK	Kina
			PHP	Pesos
			PKR	Rupees
			PLN	Zlotych
			PTE	Escudos
			PYG	Guarani
			QAR	Rials
			ROL	Lei
			RUR	Rubles
			RWF	Rwanda Francs
			SAR	Riyals
			SBD	Dollars
			SCR	Rupees
			SDD	Dinars
			SEK	Kronor
			SGD	Dollars
			SHP	Pounds
			SIT	Tolars
			SKK	Koruny
			SLL	Leones
			SOS	Shillings
			SPL	Luigini
			SRG	Guilders
			STD	Dobras
			SVC	Colones
			SYP	Pounds
			SZL	Emalangeni
			THB	Baht
			TJR	Rubles
			TMM	Manats
			TND	Dinars
			TOP	Pa'anga
			TRL	Liras
			TTD	Dollars
			TVD	Tuvalu Dollars
			TWD	New Dollars
			TZS	Shillings
			UAH	Hryvnia
			UGX	Shillings
			USD	Dollars
			UYU	Pesos
			UZS	Sums
			VAL	Lire
			VEB	Bolivares
			VND	Dong
			VUV	Vatu
			WST	Tala
			XAF	Francs
			XAG	Ounces
			XAU	Ounces
			XCD	Dollars
			XDR	Special Drawing Rights
			XPD	Ounces
			XPF	Francs
			XPT	Ounces
			YER	Rials
			YUM	New Dinars
			ZAR	Rand
			ZMK	Kwacha
			ZWD	Zimbabwe Dollars
 */
$currencyid) {}
/** This is not a comment!

			AED	United Arab Emirates
			AFA	Afghanistan
			ALL	Albania
			AMD	Armenia
			ANG	Netherlands Antilles
			AOA	Angola
			ARS	Argentina
			ATS	Austria
			AUD	Australia
			AWG	Aruba
			AZM	Azerbaijan
			BAM	Bosnia and Herzegovina
			BBD	Barbados
			BDT	Bangladesh
			BEF	Belgium
			BGL	Bulgaria
			BHD	Bahrain
			BIF	Burundi
			BMD	Bermuda
			BND	Brunei Darussalam
			BOB	Bolivia
			BRL	Brazil
			BSD	Bahamas
			BTN	Bhutan
			BWP	Botswana
			BYR	Belarus
			BZD	Belize
			CAD	Canada
			CDF	Congo/Kinshasa
			CHF	Switzerland
			CLP	Chile
			CNY	China
			COP	Colombia
			CRC	Costa Rica
			CUP	Cuba
			CVE	Cape Verde
			CYP	Cyprus
			CZK	Czech Republic
			DEM	Germany
			DJF	Djibouti
			DKK	Denmark
			DOP	Dominican Republic
			DZD	Algeria
			EEK	Estonia
			EGP	Egypt
			ERN	Eritrea
			ESP	Spain
			ETB	Ethiopia
			EUR	Euro Member Countries
			FIM	Finland
			FJD	Fiji
			FKP	Falkland Islands (Malvinas)
			FRF	France
			GBP	United Kingdom
			GEL	Georgia
			GGP	Guernsey
			GHC	Ghana
			GIP	Gibraltar
			GMD	Gambia
			GNF	Guinea
			GRD	Greece
			GTQ	Guatemala
			GYD	Guyana
			HKD	Hong Kong
			HNL	Honduras
			HRK	Croatia
			HTG	Haiti
			HUF	Hungary
			IDR	Indonesia
			IEP	Ireland (Eire)
			ILS	Israel
			IMP	Isle of Man
			INR	India
			IQD	Iraq
			IRR	Iran
			ISK	Iceland
			ITL	Italy
			JEP	Jersey
			JMD	Jamaica
			JOD	Jordan
			JPY	Japan
			KES	Kenya
			KGS	Kyrgyzstan
			KHR	Cambodia
			KMF	Comoros
			KPW	Korea
			KWD	Kuwait
			KYD	Cayman Islands
			KZT	Kazakstan
			LAK	Laos
			LBP	Lebanon
			LKR	Sri Lanka
			LRD	Liberia
			LSL	Lesotho
			LTL	Lithuania
			LUF	Luxembourg
			LVL	Latvia
			LYD	Libya
			MAD	Morocco
			MDL	Moldova
			MGF	Madagascar
			MKD	Macedonia
			MMK	Myanmar (Burma)
			MNT	Mongolia
			MOP	Macau
			MRO	Mauritania
			MTL	Malta
			MUR	Mauritius
			MVR	Maldives (Maldive Islands)
			MWK	Malawi
			MXN	Mexico
			MYR	Malaysia
			MZM	Mozambique
			NAD	Namibia
			NGN	Nigeria
			NIO	Nicaragua
			NLG	Netherlands (Holland)
			NOK	Norway
			NPR	Nepal
			NZD	New Zealand
			OMR	Oman
			PAB	Panama
			PEN	Peru
			PGK	Papua New Guinea
			PHP	Philippines
			PKR	Pakistan
			PLN	Poland
			PTE	Portugal
			PYG	Paraguay
			QAR	Qatar
			ROL	Romania
			RUR	Russia
			RWF	Rwanda
			SAR	Saudi Arabia
			SBD	Solomon Islands
			SCR	Seychelles
			SDD	Sudan
			SEK	Sweden
			SGD	Singapore
			SHP	Saint Helena
			SIT	Slovenia
			SKK	Slovakia
			SLL	Sierra Leone
			SOS	Somalia
			SPL	Seborga
			SRG	Suriname
			STD	São Tome and Principe
			SVC	El Salvador
			SYP	Syria
			SZL	Swaziland
			THB	Thailand
			TJR	Tajikistan
			TMM	Turkmenistan
			TND	Tunisia
			TOP	Tonga
			TRL	Turkey
			TTD	Trinidad and Tobago
			TVD	Tuvalu
			TWD	Taiwan
			TZS	Tanzania
			UAH	Ukraine
			UGX	Uganda
			USD	United States of America
			UYU	Uruguay
			UZS	Uzbekistan
			VAL	Vatican City
			VEB	Venezuela
			VND	Viet Nam
			VUV	Vanuatu
			WST	Samoa
			XAF	Communauté Financière Africaine
			XAG	Silver
			XAU	Gold
			XCD	East Caribbean
			XDR	International Monetary Fund
			XPD	Palladium
			XPF	Comptoirs Français du Pacifique
			XPT	Platinum
			YER	Yemen
			YUM	Yugoslavia
			ZAR	South Africa
			ZMK	Zambia
			ZWD	Zimbabwe
 */
        public function LookupCurrencyCountry(/** This is not a comment!

			AED	United Arab Emirates
			AFA	Afghanistan
			ALL	Albania
			AMD	Armenia
			ANG	Netherlands Antilles
			AOA	Angola
			ARS	Argentina
			ATS	Austria
			AUD	Australia
			AWG	Aruba
			AZM	Azerbaijan
			BAM	Bosnia and Herzegovina
			BBD	Barbados
			BDT	Bangladesh
			BEF	Belgium
			BGL	Bulgaria
			BHD	Bahrain
			BIF	Burundi
			BMD	Bermuda
			BND	Brunei Darussalam
			BOB	Bolivia
			BRL	Brazil
			BSD	Bahamas
			BTN	Bhutan
			BWP	Botswana
			BYR	Belarus
			BZD	Belize
			CAD	Canada
			CDF	Congo/Kinshasa
			CHF	Switzerland
			CLP	Chile
			CNY	China
			COP	Colombia
			CRC	Costa Rica
			CUP	Cuba
			CVE	Cape Verde
			CYP	Cyprus
			CZK	Czech Republic
			DEM	Germany
			DJF	Djibouti
			DKK	Denmark
			DOP	Dominican Republic
			DZD	Algeria
			EEK	Estonia
			EGP	Egypt
			ERN	Eritrea
			ESP	Spain
			ETB	Ethiopia
			EUR	Euro Member Countries
			FIM	Finland
			FJD	Fiji
			FKP	Falkland Islands (Malvinas)
			FRF	France
			GBP	United Kingdom
			GEL	Georgia
			GGP	Guernsey
			GHC	Ghana
			GIP	Gibraltar
			GMD	Gambia
			GNF	Guinea
			GRD	Greece
			GTQ	Guatemala
			GYD	Guyana
			HKD	Hong Kong
			HNL	Honduras
			HRK	Croatia
			HTG	Haiti
			HUF	Hungary
			IDR	Indonesia
			IEP	Ireland (Eire)
			ILS	Israel
			IMP	Isle of Man
			INR	India
			IQD	Iraq
			IRR	Iran
			ISK	Iceland
			ITL	Italy
			JEP	Jersey
			JMD	Jamaica
			JOD	Jordan
			JPY	Japan
			KES	Kenya
			KGS	Kyrgyzstan
			KHR	Cambodia
			KMF	Comoros
			KPW	Korea
			KWD	Kuwait
			KYD	Cayman Islands
			KZT	Kazakstan
			LAK	Laos
			LBP	Lebanon
			LKR	Sri Lanka
			LRD	Liberia
			LSL	Lesotho
			LTL	Lithuania
			LUF	Luxembourg
			LVL	Latvia
			LYD	Libya
			MAD	Morocco
			MDL	Moldova
			MGF	Madagascar
			MKD	Macedonia
			MMK	Myanmar (Burma)
			MNT	Mongolia
			MOP	Macau
			MRO	Mauritania
			MTL	Malta
			MUR	Mauritius
			MVR	Maldives (Maldive Islands)
			MWK	Malawi
			MXN	Mexico
			MYR	Malaysia
			MZM	Mozambique
			NAD	Namibia
			NGN	Nigeria
			NIO	Nicaragua
			NLG	Netherlands (Holland)
			NOK	Norway
			NPR	Nepal
			NZD	New Zealand
			OMR	Oman
			PAB	Panama
			PEN	Peru
			PGK	Papua New Guinea
			PHP	Philippines
			PKR	Pakistan
			PLN	Poland
			PTE	Portugal
			PYG	Paraguay
			QAR	Qatar
			ROL	Romania
			RUR	Russia
			RWF	Rwanda
			SAR	Saudi Arabia
			SBD	Solomon Islands
			SCR	Seychelles
			SDD	Sudan
			SEK	Sweden
			SGD	Singapore
			SHP	Saint Helena
			SIT	Slovenia
			SKK	Slovakia
			SLL	Sierra Leone
			SOS	Somalia
			SPL	Seborga
			SRG	Suriname
			STD	São Tome and Principe
			SVC	El Salvador
			SYP	Syria
			SZL	Swaziland
			THB	Thailand
			TJR	Tajikistan
			TMM	Turkmenistan
			TND	Tunisia
			TOP	Tonga
			TRL	Turkey
			TTD	Trinidad and Tobago
			TVD	Tuvalu
			TWD	Taiwan
			TZS	Tanzania
			UAH	Ukraine
			UGX	Uganda
			USD	United States of America
			UYU	Uruguay
			UZS	Uzbekistan
			VAL	Vatican City
			VEB	Venezuela
			VND	Viet Nam
			VUV	Vanuatu
			WST	Samoa
			XAF	Communauté Financière Africaine
			XAG	Silver
			XAU	Gold
			XCD	East Caribbean
			XDR	International Monetary Fund
			XPD	Palladium
			XPF	Comptoirs Français du Pacifique
			XPT	Platinum
			YER	Yemen
			YUM	Yugoslavia
			ZAR	South Africa
			ZMK	Zambia
			ZWD	Zimbabwe
 */
$currencyid) {}
/** This is not a comment!

			XXX	unknown
			xxx	unknown
			aar	Afar
			abk	Abkhazian
			ace	Achinese
			ach	Acoli
			ada	Adangme
			afa	Afro-Asiatic (Other)
			afh	Afrihili
			afr	Afrikaans
			aka	Akan
			akk	Akkadian
			alb	Albanian
			ale	Aleut
			alg	Algonquian Languages
			amh	Amharic
			ang	English, Old (ca. 450-1100)
			apa	Apache Languages
			ara	Arabic
			arc	Aramaic
			arm	Armenian
			arn	Araucanian
			arp	Arapaho
			art	Artificial (Other)
			arw	Arawak
			asm	Assamese
			ath	Athapascan Languages
			ava	Avaric
			ave	Avestan
			awa	Awadhi
			aym	Aymara
			aze	Azerbaijani
			bad	Banda
			bai	Bamileke Languages
			bak	Bashkir
			bal	Baluchi
			bam	Bambara
			ban	Balinese
			baq	Basque
			bas	Basa
			bat	Baltic (Other)
			bej	Beja
			bel	Byelorussian
			bem	Bemba
			ben	Bengali
			ber	Berber (Other)
			bho	Bhojpuri
			bih	Bihari
			bik	Bikol
			bin	Bini
			bis	Bislama
			bla	Siksika
			bnt	Bantu (Other)
			bod	Tibetan
			bra	Braj
			bre	Breton
			bua	Buriat
			bug	Buginese
			bul	Bulgarian
			bur	Burmese
			cad	Caddo
			cai	Central American Indian (Other)
			car	Carib
			cat	Catalan
			cau	Caucasian (Other)
			ceb	Cebuano
			cel	Celtic (Other)
			ces	Czech
			cha	Chamorro
			chb	Chibcha
			che	Chechen
			chg	Chagatai
			chi	Chinese
			chm	Mari
			chn	Chinook jargon
			cho	Choctaw
			chr	Cherokee
			chu	Church Slavic
			chv	Chuvash
			chy	Cheyenne
			cop	Coptic
			cor	Cornish
			cos	Corsican
			cpe	Creoles and Pidgins, English-based (Other)
			cpf	Creoles and Pidgins, French-based (Other)
			cpp	Creoles and Pidgins, Portuguese-based (Other)
			cre	Cree
			crp	Creoles and Pidgins (Other)
			cus	Cushitic (Other)
			cym	Welsh
			cze	Czech
			dak	Dakota
			dan	Danish
			del	Delaware
			deu	German
			din	Dinka
			div	Divehi
			doi	Dogri
			dra	Dravidian (Other)
			dua	Duala
			dum	Dutch, Middle (ca. 1050-1350)
			dut	Dutch
			dyu	Dyula
			dzo	Dzongkha
			efi	Efik
			egy	Egyptian (Ancient)
			eka	Ekajuk
			ell	Greek, Modern (1453-)
			elx	Elamite
			eng	English
			enm	English, Middle (ca. 1100-1500)
			epo	Esperanto
			esk	Eskimo (Other)
			esl	Spanish
			est	Estonian
			eus	Basque
			ewe	Ewe
			ewo	Ewondo
			fan	Fang
			fao	Faroese
			fas	Persian
			fat	Fanti
			fij	Fijian
			fin	Finnish
			fiu	Finno-Ugrian (Other)
			fon	Fon
			fra	French
			fre	French
			frm	French, Middle (ca. 1400-1600)
			fro	French, Old (842- ca. 1400)
			fry	Frisian
			ful	Fulah
			gaa	Ga
			gae	Gaelic (Scots)
			gai	Irish
			gay	Gayo
			gdh	Gaelic (Scots)
			gem	Germanic (Other)
			geo	Georgian
			ger	German
			gez	Geez
			gil	Gilbertese
			glg	Gallegan
			gmh	German, Middle High (ca. 1050-1500)
			goh	German, Old High (ca. 750-1050)
			gon	Gondi
			got	Gothic
			grb	Grebo
			grc	Greek, Ancient (to 1453)
			gre	Greek, Modern (1453-)
			grn	Guarani
			guj	Gujarati
			hai	Haida
			hau	Hausa
			haw	Hawaiian
			heb	Hebrew
			her	Herero
			hil	Hiligaynon
			him	Himachali
			hin	Hindi
			hmo	Hiri Motu
			hun	Hungarian
			hup	Hupa
			hye	Armenian
			iba	Iban
			ibo	Igbo
			ice	Icelandic
			ijo	Ijo
			iku	Inuktitut
			ilo	Iloko
			ina	Interlingua (International Auxiliary language Association)
			inc	Indic (Other)
			ind	Indonesian
			ine	Indo-European (Other)
			ine	Interlingue
			ipk	Inupiak
			ira	Iranian (Other)
			iri	Irish
			iro	Iroquoian uages
			isl	Icelandic
			ita	Italian
			jav	Javanese
			jaw	Javanese
			jpn	Japanese
			jpr	Judeo-Persian
			jrb	Judeo-Arabic
			kaa	Kara-Kalpak
			kab	Kabyle
			kac	Kachin
			kal	Greenlandic
			kam	Kamba
			kan	Kannada
			kar	Karen
			kas	Kashmiri
			kat	Georgian
			kau	Kanuri
			kaw	Kawi
			kaz	Kazakh
			kha	Khasi
			khi	Khoisan (Other)
			khm	Khmer
			kho	Khotanese
			kik	Kikuyu
			kin	Kinyarwanda
			kir	Kirghiz
			kok	Konkani
			kom	Komi
			kon	Kongo
			kor	Korean
			kpe	Kpelle
			kro	Kru
			kru	Kurukh
			kua	Kuanyama
			kum	Kumyk
			kur	Kurdish
			kus	Kusaie
			kut	Kutenai
			lad	Ladino
			lah	Lahnda
			lam	Lamba
			lao	Lao
			lat	Latin
			lav	Latvian
			lez	Lezghian
			lin	Lingala
			lit	Lithuanian
			lol	Mongo
			loz	Lozi
			ltz	Letzeburgesch
			lub	Luba-Katanga
			lug	Ganda
			lui	Luiseno
			lun	Lunda
			luo	Luo (Kenya and Tanzania)
			mac	Macedonian
			mad	Madurese
			mag	Magahi
			mah	Marshall
			mai	Maithili
			mak	Macedonian
			mak	Makasar
			mal	Malayalam
			man	Mandingo
			mao	Maori
			map	Austronesian (Other)
			mar	Marathi
			mas	Masai
			max	Manx
			may	Malay
			men	Mende
			mga	Irish, Middle (900 - 1200)
			mic	Micmac
			min	Minangkabau
			mis	Miscellaneous (Other)
			mkh	Mon-Kmer (Other)
			mlg	Malagasy
			mlt	Maltese
			mni	Manipuri
			mno	Manobo Languages
			moh	Mohawk
			mol	Moldavian
			mon	Mongolian
			mos	Mossi
			mri	Maori
			msa	Malay
			mul	Multiple Languages
			mun	Munda Languages
			mus	Creek
			mwr	Marwari
			mya	Burmese
			myn	Mayan Languages
			nah	Aztec
			nai	North American Indian (Other)
			nau	Nauru
			nav	Navajo
			nbl	Ndebele, South
			nde	Ndebele, North
			ndo	Ndongo
			nep	Nepali
			new	Newari
			nic	Niger-Kordofanian (Other)
			niu	Niuean
			nla	Dutch
			nno	Norwegian (Nynorsk)
			non	Norse, Old
			nor	Norwegian
			nso	Sotho, Northern
			nub	Nubian Languages
			nya	Nyanja
			nym	Nyamwezi
			nyn	Nyankole
			nyo	Nyoro
			nzi	Nzima
			oci	Langue d'Oc (post 1500)
			oji	Ojibwa
			ori	Oriya
			orm	Oromo
			osa	Osage
			oss	Ossetic
			ota	Turkish, Ottoman (1500 - 1928)
			oto	Otomian Languages
			paa	Papuan-Australian (Other)
			pag	Pangasinan
			pal	Pahlavi
			pam	Pampanga
			pan	Panjabi
			pap	Papiamento
			pau	Palauan
			peo	Persian, Old (ca 600 - 400 B.C.)
			per	Persian
			phn	Phoenician
			pli	Pali
			pol	Polish
			pon	Ponape
			por	Portuguese
			pra	Prakrit uages
			pro	Provencal, Old (to 1500)
			pus	Pushto
			que	Quechua
			raj	Rajasthani
			rar	Rarotongan
			roa	Romance (Other)
			roh	Rhaeto-Romance
			rom	Romany
			ron	Romanian
			rum	Romanian
			run	Rundi
			rus	Russian
			sad	Sandawe
			sag	Sango
			sah	Yakut
			sai	South American Indian (Other)
			sal	Salishan Languages
			sam	Samaritan Aramaic
			san	Sanskrit
			sco	Scots
			scr	Serbo-Croatian
			sel	Selkup
			sem	Semitic (Other)
			sga	Irish, Old (to 900)
			shn	Shan
			sid	Sidamo
			sin	Singhalese
			sio	Siouan Languages
			sit	Sino-Tibetan (Other)
			sla	Slavic (Other)
			slk	Slovak
			slo	Slovak
			slv	Slovenian
			smi	Sami Languages
			smo	Samoan
			sna	Shona
			snd	Sindhi
			sog	Sogdian
			som	Somali
			son	Songhai
			sot	Sotho, Southern
			spa	Spanish
			sqi	Albanian
			srd	Sardinian
			srr	Serer
			ssa	Nilo-Saharan (Other)
			ssw	Siswant
			ssw	Swazi
			suk	Sukuma
			sun	Sudanese
			sus	Susu
			sux	Sumerian
			sve	Swedish
			swa	Swahili
			swe	Swedish
			syr	Syriac
			tah	Tahitian
			tam	Tamil
			tat	Tatar
			tel	Telugu
			tem	Timne
			ter	Tereno
			tgk	Tajik
			tgl	Tagalog
			tha	Thai
			tib	Tibetan
			tig	Tigre
			tir	Tigrinya
			tiv	Tivi
			tli	Tlingit
			tmh	Tamashek
			tog	Tonga (Nyasa)
			ton	Tonga (Tonga Islands)
			tru	Truk
			tsi	Tsimshian
			tsn	Tswana
			tso	Tsonga
			tuk	Turkmen
			tum	Tumbuka
			tur	Turkish
			tut	Altaic (Other)
			twi	Twi
			tyv	Tuvinian
			uga	Ugaritic
			uig	Uighur
			ukr	Ukrainian
			umb	Umbundu
			und	Undetermined
			urd	Urdu
			uzb	Uzbek
			vai	Vai
			ven	Venda
			vie	Vietnamese
			vol	Volapük
			vot	Votic
			wak	Wakashan Languages
			wal	Walamo
			war	Waray
			was	Washo
			wel	Welsh
			wen	Sorbian Languages
			wol	Wolof
			xho	Xhosa
			yao	Yao
			yap	Yap
			yid	Yiddish
			yor	Yoruba
			zap	Zapotec
			zen	Zenaga
			zha	Zhuang
			zho	Chinese
			zul	Zulu
			zun	Zuni
 */
        public static function LanguageLookup(/** This is not a comment!

			XXX	unknown
			xxx	unknown
			aar	Afar
			abk	Abkhazian
			ace	Achinese
			ach	Acoli
			ada	Adangme
			afa	Afro-Asiatic (Other)
			afh	Afrihili
			afr	Afrikaans
			aka	Akan
			akk	Akkadian
			alb	Albanian
			ale	Aleut
			alg	Algonquian Languages
			amh	Amharic
			ang	English, Old (ca. 450-1100)
			apa	Apache Languages
			ara	Arabic
			arc	Aramaic
			arm	Armenian
			arn	Araucanian
			arp	Arapaho
			art	Artificial (Other)
			arw	Arawak
			asm	Assamese
			ath	Athapascan Languages
			ava	Avaric
			ave	Avestan
			awa	Awadhi
			aym	Aymara
			aze	Azerbaijani
			bad	Banda
			bai	Bamileke Languages
			bak	Bashkir
			bal	Baluchi
			bam	Bambara
			ban	Balinese
			baq	Basque
			bas	Basa
			bat	Baltic (Other)
			bej	Beja
			bel	Byelorussian
			bem	Bemba
			ben	Bengali
			ber	Berber (Other)
			bho	Bhojpuri
			bih	Bihari
			bik	Bikol
			bin	Bini
			bis	Bislama
			bla	Siksika
			bnt	Bantu (Other)
			bod	Tibetan
			bra	Braj
			bre	Breton
			bua	Buriat
			bug	Buginese
			bul	Bulgarian
			bur	Burmese
			cad	Caddo
			cai	Central American Indian (Other)
			car	Carib
			cat	Catalan
			cau	Caucasian (Other)
			ceb	Cebuano
			cel	Celtic (Other)
			ces	Czech
			cha	Chamorro
			chb	Chibcha
			che	Chechen
			chg	Chagatai
			chi	Chinese
			chm	Mari
			chn	Chinook jargon
			cho	Choctaw
			chr	Cherokee
			chu	Church Slavic
			chv	Chuvash
			chy	Cheyenne
			cop	Coptic
			cor	Cornish
			cos	Corsican
			cpe	Creoles and Pidgins, English-based (Other)
			cpf	Creoles and Pidgins, French-based (Other)
			cpp	Creoles and Pidgins, Portuguese-based (Other)
			cre	Cree
			crp	Creoles and Pidgins (Other)
			cus	Cushitic (Other)
			cym	Welsh
			cze	Czech
			dak	Dakota
			dan	Danish
			del	Delaware
			deu	German
			din	Dinka
			div	Divehi
			doi	Dogri
			dra	Dravidian (Other)
			dua	Duala
			dum	Dutch, Middle (ca. 1050-1350)
			dut	Dutch
			dyu	Dyula
			dzo	Dzongkha
			efi	Efik
			egy	Egyptian (Ancient)
			eka	Ekajuk
			ell	Greek, Modern (1453-)
			elx	Elamite
			eng	English
			enm	English, Middle (ca. 1100-1500)
			epo	Esperanto
			esk	Eskimo (Other)
			esl	Spanish
			est	Estonian
			eus	Basque
			ewe	Ewe
			ewo	Ewondo
			fan	Fang
			fao	Faroese
			fas	Persian
			fat	Fanti
			fij	Fijian
			fin	Finnish
			fiu	Finno-Ugrian (Other)
			fon	Fon
			fra	French
			fre	French
			frm	French, Middle (ca. 1400-1600)
			fro	French, Old (842- ca. 1400)
			fry	Frisian
			ful	Fulah
			gaa	Ga
			gae	Gaelic (Scots)
			gai	Irish
			gay	Gayo
			gdh	Gaelic (Scots)
			gem	Germanic (Other)
			geo	Georgian
			ger	German
			gez	Geez
			gil	Gilbertese
			glg	Gallegan
			gmh	German, Middle High (ca. 1050-1500)
			goh	German, Old High (ca. 750-1050)
			gon	Gondi
			got	Gothic
			grb	Grebo
			grc	Greek, Ancient (to 1453)
			gre	Greek, Modern (1453-)
			grn	Guarani
			guj	Gujarati
			hai	Haida
			hau	Hausa
			haw	Hawaiian
			heb	Hebrew
			her	Herero
			hil	Hiligaynon
			him	Himachali
			hin	Hindi
			hmo	Hiri Motu
			hun	Hungarian
			hup	Hupa
			hye	Armenian
			iba	Iban
			ibo	Igbo
			ice	Icelandic
			ijo	Ijo
			iku	Inuktitut
			ilo	Iloko
			ina	Interlingua (International Auxiliary language Association)
			inc	Indic (Other)
			ind	Indonesian
			ine	Indo-European (Other)
			ine	Interlingue
			ipk	Inupiak
			ira	Iranian (Other)
			iri	Irish
			iro	Iroquoian uages
			isl	Icelandic
			ita	Italian
			jav	Javanese
			jaw	Javanese
			jpn	Japanese
			jpr	Judeo-Persian
			jrb	Judeo-Arabic
			kaa	Kara-Kalpak
			kab	Kabyle
			kac	Kachin
			kal	Greenlandic
			kam	Kamba
			kan	Kannada
			kar	Karen
			kas	Kashmiri
			kat	Georgian
			kau	Kanuri
			kaw	Kawi
			kaz	Kazakh
			kha	Khasi
			khi	Khoisan (Other)
			khm	Khmer
			kho	Khotanese
			kik	Kikuyu
			kin	Kinyarwanda
			kir	Kirghiz
			kok	Konkani
			kom	Komi
			kon	Kongo
			kor	Korean
			kpe	Kpelle
			kro	Kru
			kru	Kurukh
			kua	Kuanyama
			kum	Kumyk
			kur	Kurdish
			kus	Kusaie
			kut	Kutenai
			lad	Ladino
			lah	Lahnda
			lam	Lamba
			lao	Lao
			lat	Latin
			lav	Latvian
			lez	Lezghian
			lin	Lingala
			lit	Lithuanian
			lol	Mongo
			loz	Lozi
			ltz	Letzeburgesch
			lub	Luba-Katanga
			lug	Ganda
			lui	Luiseno
			lun	Lunda
			luo	Luo (Kenya and Tanzania)
			mac	Macedonian
			mad	Madurese
			mag	Magahi
			mah	Marshall
			mai	Maithili
			mak	Macedonian
			mak	Makasar
			mal	Malayalam
			man	Mandingo
			mao	Maori
			map	Austronesian (Other)
			mar	Marathi
			mas	Masai
			max	Manx
			may	Malay
			men	Mende
			mga	Irish, Middle (900 - 1200)
			mic	Micmac
			min	Minangkabau
			mis	Miscellaneous (Other)
			mkh	Mon-Kmer (Other)
			mlg	Malagasy
			mlt	Maltese
			mni	Manipuri
			mno	Manobo Languages
			moh	Mohawk
			mol	Moldavian
			mon	Mongolian
			mos	Mossi
			mri	Maori
			msa	Malay
			mul	Multiple Languages
			mun	Munda Languages
			mus	Creek
			mwr	Marwari
			mya	Burmese
			myn	Mayan Languages
			nah	Aztec
			nai	North American Indian (Other)
			nau	Nauru
			nav	Navajo
			nbl	Ndebele, South
			nde	Ndebele, North
			ndo	Ndongo
			nep	Nepali
			new	Newari
			nic	Niger-Kordofanian (Other)
			niu	Niuean
			nla	Dutch
			nno	Norwegian (Nynorsk)
			non	Norse, Old
			nor	Norwegian
			nso	Sotho, Northern
			nub	Nubian Languages
			nya	Nyanja
			nym	Nyamwezi
			nyn	Nyankole
			nyo	Nyoro
			nzi	Nzima
			oci	Langue d'Oc (post 1500)
			oji	Ojibwa
			ori	Oriya
			orm	Oromo
			osa	Osage
			oss	Ossetic
			ota	Turkish, Ottoman (1500 - 1928)
			oto	Otomian Languages
			paa	Papuan-Australian (Other)
			pag	Pangasinan
			pal	Pahlavi
			pam	Pampanga
			pan	Panjabi
			pap	Papiamento
			pau	Palauan
			peo	Persian, Old (ca 600 - 400 B.C.)
			per	Persian
			phn	Phoenician
			pli	Pali
			pol	Polish
			pon	Ponape
			por	Portuguese
			pra	Prakrit uages
			pro	Provencal, Old (to 1500)
			pus	Pushto
			que	Quechua
			raj	Rajasthani
			rar	Rarotongan
			roa	Romance (Other)
			roh	Rhaeto-Romance
			rom	Romany
			ron	Romanian
			rum	Romanian
			run	Rundi
			rus	Russian
			sad	Sandawe
			sag	Sango
			sah	Yakut
			sai	South American Indian (Other)
			sal	Salishan Languages
			sam	Samaritan Aramaic
			san	Sanskrit
			sco	Scots
			scr	Serbo-Croatian
			sel	Selkup
			sem	Semitic (Other)
			sga	Irish, Old (to 900)
			shn	Shan
			sid	Sidamo
			sin	Singhalese
			sio	Siouan Languages
			sit	Sino-Tibetan (Other)
			sla	Slavic (Other)
			slk	Slovak
			slo	Slovak
			slv	Slovenian
			smi	Sami Languages
			smo	Samoan
			sna	Shona
			snd	Sindhi
			sog	Sogdian
			som	Somali
			son	Songhai
			sot	Sotho, Southern
			spa	Spanish
			sqi	Albanian
			srd	Sardinian
			srr	Serer
			ssa	Nilo-Saharan (Other)
			ssw	Siswant
			ssw	Swazi
			suk	Sukuma
			sun	Sudanese
			sus	Susu
			sux	Sumerian
			sve	Swedish
			swa	Swahili
			swe	Swedish
			syr	Syriac
			tah	Tahitian
			tam	Tamil
			tat	Tatar
			tel	Telugu
			tem	Timne
			ter	Tereno
			tgk	Tajik
			tgl	Tagalog
			tha	Thai
			tib	Tibetan
			tig	Tigre
			tir	Tigrinya
			tiv	Tivi
			tli	Tlingit
			tmh	Tamashek
			tog	Tonga (Nyasa)
			ton	Tonga (Tonga Islands)
			tru	Truk
			tsi	Tsimshian
			tsn	Tswana
			tso	Tsonga
			tuk	Turkmen
			tum	Tumbuka
			tur	Turkish
			tut	Altaic (Other)
			twi	Twi
			tyv	Tuvinian
			uga	Ugaritic
			uig	Uighur
			ukr	Ukrainian
			umb	Umbundu
			und	Undetermined
			urd	Urdu
			uzb	Uzbek
			vai	Vai
			ven	Venda
			vie	Vietnamese
			vol	Volapük
			vot	Votic
			wak	Wakashan Languages
			wal	Walamo
			war	Waray
			was	Washo
			wel	Welsh
			wen	Sorbian Languages
			wol	Wolof
			xho	Xhosa
			yao	Yao
			yap	Yap
			yid	Yiddish
			yor	Yoruba
			zap	Zapotec
			zen	Zenaga
			zha	Zhuang
			zho	Chinese
			zul	Zulu
			zun	Zuni
 */
$languagecode, /** This is not a comment!

			XXX	unknown
			xxx	unknown
			aar	Afar
			abk	Abkhazian
			ace	Achinese
			ach	Acoli
			ada	Adangme
			afa	Afro-Asiatic (Other)
			afh	Afrihili
			afr	Afrikaans
			aka	Akan
			akk	Akkadian
			alb	Albanian
			ale	Aleut
			alg	Algonquian Languages
			amh	Amharic
			ang	English, Old (ca. 450-1100)
			apa	Apache Languages
			ara	Arabic
			arc	Aramaic
			arm	Armenian
			arn	Araucanian
			arp	Arapaho
			art	Artificial (Other)
			arw	Arawak
			asm	Assamese
			ath	Athapascan Languages
			ava	Avaric
			ave	Avestan
			awa	Awadhi
			aym	Aymara
			aze	Azerbaijani
			bad	Banda
			bai	Bamileke Languages
			bak	Bashkir
			bal	Baluchi
			bam	Bambara
			ban	Balinese
			baq	Basque
			bas	Basa
			bat	Baltic (Other)
			bej	Beja
			bel	Byelorussian
			bem	Bemba
			ben	Bengali
			ber	Berber (Other)
			bho	Bhojpuri
			bih	Bihari
			bik	Bikol
			bin	Bini
			bis	Bislama
			bla	Siksika
			bnt	Bantu (Other)
			bod	Tibetan
			bra	Braj
			bre	Breton
			bua	Buriat
			bug	Buginese
			bul	Bulgarian
			bur	Burmese
			cad	Caddo
			cai	Central American Indian (Other)
			car	Carib
			cat	Catalan
			cau	Caucasian (Other)
			ceb	Cebuano
			cel	Celtic (Other)
			ces	Czech
			cha	Chamorro
			chb	Chibcha
			che	Chechen
			chg	Chagatai
			chi	Chinese
			chm	Mari
			chn	Chinook jargon
			cho	Choctaw
			chr	Cherokee
			chu	Church Slavic
			chv	Chuvash
			chy	Cheyenne
			cop	Coptic
			cor	Cornish
			cos	Corsican
			cpe	Creoles and Pidgins, English-based (Other)
			cpf	Creoles and Pidgins, French-based (Other)
			cpp	Creoles and Pidgins, Portuguese-based (Other)
			cre	Cree
			crp	Creoles and Pidgins (Other)
			cus	Cushitic (Other)
			cym	Welsh
			cze	Czech
			dak	Dakota
			dan	Danish
			del	Delaware
			deu	German
			din	Dinka
			div	Divehi
			doi	Dogri
			dra	Dravidian (Other)
			dua	Duala
			dum	Dutch, Middle (ca. 1050-1350)
			dut	Dutch
			dyu	Dyula
			dzo	Dzongkha
			efi	Efik
			egy	Egyptian (Ancient)
			eka	Ekajuk
			ell	Greek, Modern (1453-)
			elx	Elamite
			eng	English
			enm	English, Middle (ca. 1100-1500)
			epo	Esperanto
			esk	Eskimo (Other)
			esl	Spanish
			est	Estonian
			eus	Basque
			ewe	Ewe
			ewo	Ewondo
			fan	Fang
			fao	Faroese
			fas	Persian
			fat	Fanti
			fij	Fijian
			fin	Finnish
			fiu	Finno-Ugrian (Other)
			fon	Fon
			fra	French
			fre	French
			frm	French, Middle (ca. 1400-1600)
			fro	French, Old (842- ca. 1400)
			fry	Frisian
			ful	Fulah
			gaa	Ga
			gae	Gaelic (Scots)
			gai	Irish
			gay	Gayo
			gdh	Gaelic (Scots)
			gem	Germanic (Other)
			geo	Georgian
			ger	German
			gez	Geez
			gil	Gilbertese
			glg	Gallegan
			gmh	German, Middle High (ca. 1050-1500)
			goh	German, Old High (ca. 750-1050)
			gon	Gondi
			got	Gothic
			grb	Grebo
			grc	Greek, Ancient (to 1453)
			gre	Greek, Modern (1453-)
			grn	Guarani
			guj	Gujarati
			hai	Haida
			hau	Hausa
			haw	Hawaiian
			heb	Hebrew
			her	Herero
			hil	Hiligaynon
			him	Himachali
			hin	Hindi
			hmo	Hiri Motu
			hun	Hungarian
			hup	Hupa
			hye	Armenian
			iba	Iban
			ibo	Igbo
			ice	Icelandic
			ijo	Ijo
			iku	Inuktitut
			ilo	Iloko
			ina	Interlingua (International Auxiliary language Association)
			inc	Indic (Other)
			ind	Indonesian
			ine	Indo-European (Other)
			ine	Interlingue
			ipk	Inupiak
			ira	Iranian (Other)
			iri	Irish
			iro	Iroquoian uages
			isl	Icelandic
			ita	Italian
			jav	Javanese
			jaw	Javanese
			jpn	Japanese
			jpr	Judeo-Persian
			jrb	Judeo-Arabic
			kaa	Kara-Kalpak
			kab	Kabyle
			kac	Kachin
			kal	Greenlandic
			kam	Kamba
			kan	Kannada
			kar	Karen
			kas	Kashmiri
			kat	Georgian
			kau	Kanuri
			kaw	Kawi
			kaz	Kazakh
			kha	Khasi
			khi	Khoisan (Other)
			khm	Khmer
			kho	Khotanese
			kik	Kikuyu
			kin	Kinyarwanda
			kir	Kirghiz
			kok	Konkani
			kom	Komi
			kon	Kongo
			kor	Korean
			kpe	Kpelle
			kro	Kru
			kru	Kurukh
			kua	Kuanyama
			kum	Kumyk
			kur	Kurdish
			kus	Kusaie
			kut	Kutenai
			lad	Ladino
			lah	Lahnda
			lam	Lamba
			lao	Lao
			lat	Latin
			lav	Latvian
			lez	Lezghian
			lin	Lingala
			lit	Lithuanian
			lol	Mongo
			loz	Lozi
			ltz	Letzeburgesch
			lub	Luba-Katanga
			lug	Ganda
			lui	Luiseno
			lun	Lunda
			luo	Luo (Kenya and Tanzania)
			mac	Macedonian
			mad	Madurese
			mag	Magahi
			mah	Marshall
			mai	Maithili
			mak	Macedonian
			mak	Makasar
			mal	Malayalam
			man	Mandingo
			mao	Maori
			map	Austronesian (Other)
			mar	Marathi
			mas	Masai
			max	Manx
			may	Malay
			men	Mende
			mga	Irish, Middle (900 - 1200)
			mic	Micmac
			min	Minangkabau
			mis	Miscellaneous (Other)
			mkh	Mon-Kmer (Other)
			mlg	Malagasy
			mlt	Maltese
			mni	Manipuri
			mno	Manobo Languages
			moh	Mohawk
			mol	Moldavian
			mon	Mongolian
			mos	Mossi
			mri	Maori
			msa	Malay
			mul	Multiple Languages
			mun	Munda Languages
			mus	Creek
			mwr	Marwari
			mya	Burmese
			myn	Mayan Languages
			nah	Aztec
			nai	North American Indian (Other)
			nau	Nauru
			nav	Navajo
			nbl	Ndebele, South
			nde	Ndebele, North
			ndo	Ndongo
			nep	Nepali
			new	Newari
			nic	Niger-Kordofanian (Other)
			niu	Niuean
			nla	Dutch
			nno	Norwegian (Nynorsk)
			non	Norse, Old
			nor	Norwegian
			nso	Sotho, Northern
			nub	Nubian Languages
			nya	Nyanja
			nym	Nyamwezi
			nyn	Nyankole
			nyo	Nyoro
			nzi	Nzima
			oci	Langue d'Oc (post 1500)
			oji	Ojibwa
			ori	Oriya
			orm	Oromo
			osa	Osage
			oss	Ossetic
			ota	Turkish, Ottoman (1500 - 1928)
			oto	Otomian Languages
			paa	Papuan-Australian (Other)
			pag	Pangasinan
			pal	Pahlavi
			pam	Pampanga
			pan	Panjabi
			pap	Papiamento
			pau	Palauan
			peo	Persian, Old (ca 600 - 400 B.C.)
			per	Persian
			phn	Phoenician
			pli	Pali
			pol	Polish
			pon	Ponape
			por	Portuguese
			pra	Prakrit uages
			pro	Provencal, Old (to 1500)
			pus	Pushto
			que	Quechua
			raj	Rajasthani
			rar	Rarotongan
			roa	Romance (Other)
			roh	Rhaeto-Romance
			rom	Romany
			ron	Romanian
			rum	Romanian
			run	Rundi
			rus	Russian
			sad	Sandawe
			sag	Sango
			sah	Yakut
			sai	South American Indian (Other)
			sal	Salishan Languages
			sam	Samaritan Aramaic
			san	Sanskrit
			sco	Scots
			scr	Serbo-Croatian
			sel	Selkup
			sem	Semitic (Other)
			sga	Irish, Old (to 900)
			shn	Shan
			sid	Sidamo
			sin	Singhalese
			sio	Siouan Languages
			sit	Sino-Tibetan (Other)
			sla	Slavic (Other)
			slk	Slovak
			slo	Slovak
			slv	Slovenian
			smi	Sami Languages
			smo	Samoan
			sna	Shona
			snd	Sindhi
			sog	Sogdian
			som	Somali
			son	Songhai
			sot	Sotho, Southern
			spa	Spanish
			sqi	Albanian
			srd	Sardinian
			srr	Serer
			ssa	Nilo-Saharan (Other)
			ssw	Siswant
			ssw	Swazi
			suk	Sukuma
			sun	Sudanese
			sus	Susu
			sux	Sumerian
			sve	Swedish
			swa	Swahili
			swe	Swedish
			syr	Syriac
			tah	Tahitian
			tam	Tamil
			tat	Tatar
			tel	Telugu
			tem	Timne
			ter	Tereno
			tgk	Tajik
			tgl	Tagalog
			tha	Thai
			tib	Tibetan
			tig	Tigre
			tir	Tigrinya
			tiv	Tivi
			tli	Tlingit
			tmh	Tamashek
			tog	Tonga (Nyasa)
			ton	Tonga (Tonga Islands)
			tru	Truk
			tsi	Tsimshian
			tsn	Tswana
			tso	Tsonga
			tuk	Turkmen
			tum	Tumbuka
			tur	Turkish
			tut	Altaic (Other)
			twi	Twi
			tyv	Tuvinian
			uga	Ugaritic
			uig	Uighur
			ukr	Ukrainian
			umb	Umbundu
			und	Undetermined
			urd	Urdu
			uzb	Uzbek
			vai	Vai
			ven	Venda
			vie	Vietnamese
			vol	Volapük
			vot	Votic
			wak	Wakashan Languages
			wal	Walamo
			war	Waray
			was	Washo
			wel	Welsh
			wen	Sorbian Languages
			wol	Wolof
			xho	Xhosa
			yao	Yao
			yap	Yap
			yid	Yiddish
			yor	Yoruba
			zap	Zapotec
			zen	Zenaga
			zha	Zhuang
			zho	Chinese
			zul	Zulu
			zun	Zuni
 */
$casesensitive = false) {}
        public static function ETCOEventLookup($index) {}
        public static function SYTLContentTypeLookup($index) {}
        public static function APICPictureTypeLookup($index, $returnarray = false) {}
        public static function COMRReceivedAsLookup($index) {}
        public static function RVA2ChannelTypeLookup($index) {}
/** This is not a comment!

			AENC	Audio encryption
			APIC	Attached picture
			ASPI	Audio seek point index
			BUF	Recommended buffer size
			CNT	Play counter
			COM	Comments
			COMM	Comments
			COMR	Commercial frame
			CRA	Audio encryption
			CRM	Encrypted meta frame
			ENCR	Encryption method registration
			EQU	Equalisation
			EQU2	Equalisation (2)
			EQUA	Equalisation
			ETC	Event timing codes
			ETCO	Event timing codes
			GEO	General encapsulated object
			GEOB	General encapsulated object
			GRID	Group identification registration
			IPL	Involved people list
			IPLS	Involved people list
			LINK	Linked information
			LNK	Linked information
			MCDI	Music CD identifier
			MCI	Music CD Identifier
			MLL	MPEG location lookup table
			MLLT	MPEG location lookup table
			OWNE	Ownership frame
			PCNT	Play counter
			PIC	Attached picture
			POP	Popularimeter
			POPM	Popularimeter
			POSS	Position synchronisation frame
			PRIV	Private frame
			RBUF	Recommended buffer size
			REV	Reverb
			RVA	Relative volume adjustment
			RVA2	Relative volume adjustment (2)
			RVAD	Relative volume adjustment
			RVRB	Reverb
			SEEK	Seek frame
			SIGN	Signature frame
			SLT	Synchronised lyric/text
			STC	Synced tempo codes
			SYLT	Synchronised lyric/text
			SYTC	Synchronised tempo codes
			TAL	Album/Movie/Show title
			TALB	Album/Movie/Show title
			TBP	BPM (Beats Per Minute)
			TBPM	BPM (beats per minute)
			TCM	Composer
			TCMP	Part of a compilation
			TCO	Content type
			TCOM	Composer
			TCON	Content type
			TCOP	Copyright message
			TCP	Part of a compilation
			TCR	Copyright message
			TDA	Date
			TDAT	Date
			TDEN	Encoding time
			TDLY	Playlist delay
			TDOR	Original release time
			TDRC	Recording time
			TDRL	Release time
			TDTG	Tagging time
			TDY	Playlist delay
			TEN	Encoded by
			TENC	Encoded by
			TEXT	Lyricist/Text writer
			TFLT	File type
			TFT	File type
			TIM	Time
			TIME	Time
			TIPL	Involved people list
			TIT1	Content group description
			TIT2	Title/songname/content description
			TIT3	Subtitle/Description refinement
			TKE	Initial key
			TKEY	Initial key
			TLA	Language(s)
			TLAN	Language(s)
			TLE	Length
			TLEN	Length
			TMCL	Musician credits list
			TMED	Media type
			TMOO	Mood
			TMT	Media type
			TOA	Original artist(s)/performer(s)
			TOAL	Original album/movie/show title
			TOF	Original filename
			TOFN	Original filename
			TOL	Original Lyricist(s)/text writer(s)
			TOLY	Original lyricist(s)/text writer(s)
			TOPE	Original artist(s)/performer(s)
			TOR	Original release year
			TORY	Original release year
			TOT	Original album/Movie/Show title
			TOWN	File owner/licensee
			TP1	Lead artist(s)/Lead performer(s)/Soloist(s)/Performing group
			TP2	Band/Orchestra/Accompaniment
			TP3	Conductor/Performer refinement
			TP4	Interpreted, remixed, or otherwise modified by
			TPA	Part of a set
			TPB	Publisher
			TPE1	Lead performer(s)/Soloist(s)
			TPE2	Band/orchestra/accompaniment
			TPE3	Conductor/performer refinement
			TPE4	Interpreted, remixed, or otherwise modified by
			TPOS	Part of a set
			TPRO	Produced notice
			TPUB	Publisher
			TRC	ISRC (International Standard Recording Code)
			TRCK	Track number/Position in set
			TRD	Recording dates
			TRDA	Recording dates
			TRK	Track number/Position in set
			TRSN	Internet radio station name
			TRSO	Internet radio station owner
			TS2	Album-Artist sort order
			TSA	Album sort order
			TSC	Composer sort order
			TSI	Size
			TSIZ	Size
			TSO2	Album-Artist sort order
			TSOA	Album sort order
			TSOC	Composer sort order
			TSOP	Performer sort order
			TSOT	Title sort order
			TSP	Performer sort order
			TSRC	ISRC (international standard recording code)
			TSS	Software/hardware and settings used for encoding
			TSSE	Software/Hardware and settings used for encoding
			TSST	Set subtitle
			TST	Title sort order
			TT1	Content group description
			TT2	Title/Songname/Content description
			TT3	Subtitle/Description refinement
			TXT	Lyricist/text writer
			TXX	User defined text information frame
			TXXX	User defined text information frame
			TYE	Year
			TYER	Year
			UFI	Unique file identifier
			UFID	Unique file identifier
			ULT	Unsychronised lyric/text transcription
			USER	Terms of use
			USLT	Unsynchronised lyric/text transcription
			WAF	Official audio file webpage
			WAR	Official artist/performer webpage
			WAS	Official audio source webpage
			WCM	Commercial information
			WCOM	Commercial information
			WCOP	Copyright/Legal information
			WCP	Copyright/Legal information
			WOAF	Official audio file webpage
			WOAR	Official artist/performer webpage
			WOAS	Official audio source webpage
			WORS	Official Internet radio station homepage
			WPAY	Payment
			WPB	Publishers official webpage
			WPUB	Publishers official webpage
			WXX	User defined URL link frame
			WXXX	User defined URL link frame
			TFEA	Featured Artist
			TSTU	Recording Studio
			rgad	Replay Gain Adjustment
 */
        public static function FrameNameLongLookup(/** This is not a comment!

			AENC	Audio encryption
			APIC	Attached picture
			ASPI	Audio seek point index
			BUF	Recommended buffer size
			CNT	Play counter
			COM	Comments
			COMM	Comments
			COMR	Commercial frame
			CRA	Audio encryption
			CRM	Encrypted meta frame
			ENCR	Encryption method registration
			EQU	Equalisation
			EQU2	Equalisation (2)
			EQUA	Equalisation
			ETC	Event timing codes
			ETCO	Event timing codes
			GEO	General encapsulated object
			GEOB	General encapsulated object
			GRID	Group identification registration
			IPL	Involved people list
			IPLS	Involved people list
			LINK	Linked information
			LNK	Linked information
			MCDI	Music CD identifier
			MCI	Music CD Identifier
			MLL	MPEG location lookup table
			MLLT	MPEG location lookup table
			OWNE	Ownership frame
			PCNT	Play counter
			PIC	Attached picture
			POP	Popularimeter
			POPM	Popularimeter
			POSS	Position synchronisation frame
			PRIV	Private frame
			RBUF	Recommended buffer size
			REV	Reverb
			RVA	Relative volume adjustment
			RVA2	Relative volume adjustment (2)
			RVAD	Relative volume adjustment
			RVRB	Reverb
			SEEK	Seek frame
			SIGN	Signature frame
			SLT	Synchronised lyric/text
			STC	Synced tempo codes
			SYLT	Synchronised lyric/text
			SYTC	Synchronised tempo codes
			TAL	Album/Movie/Show title
			TALB	Album/Movie/Show title
			TBP	BPM (Beats Per Minute)
			TBPM	BPM (beats per minute)
			TCM	Composer
			TCMP	Part of a compilation
			TCO	Content type
			TCOM	Composer
			TCON	Content type
			TCOP	Copyright message
			TCP	Part of a compilation
			TCR	Copyright message
			TDA	Date
			TDAT	Date
			TDEN	Encoding time
			TDLY	Playlist delay
			TDOR	Original release time
			TDRC	Recording time
			TDRL	Release time
			TDTG	Tagging time
			TDY	Playlist delay
			TEN	Encoded by
			TENC	Encoded by
			TEXT	Lyricist/Text writer
			TFLT	File type
			TFT	File type
			TIM	Time
			TIME	Time
			TIPL	Involved people list
			TIT1	Content group description
			TIT2	Title/songname/content description
			TIT3	Subtitle/Description refinement
			TKE	Initial key
			TKEY	Initial key
			TLA	Language(s)
			TLAN	Language(s)
			TLE	Length
			TLEN	Length
			TMCL	Musician credits list
			TMED	Media type
			TMOO	Mood
			TMT	Media type
			TOA	Original artist(s)/performer(s)
			TOAL	Original album/movie/show title
			TOF	Original filename
			TOFN	Original filename
			TOL	Original Lyricist(s)/text writer(s)
			TOLY	Original lyricist(s)/text writer(s)
			TOPE	Original artist(s)/performer(s)
			TOR	Original release year
			TORY	Original release year
			TOT	Original album/Movie/Show title
			TOWN	File owner/licensee
			TP1	Lead artist(s)/Lead performer(s)/Soloist(s)/Performing group
			TP2	Band/Orchestra/Accompaniment
			TP3	Conductor/Performer refinement
			TP4	Interpreted, remixed, or otherwise modified by
			TPA	Part of a set
			TPB	Publisher
			TPE1	Lead performer(s)/Soloist(s)
			TPE2	Band/orchestra/accompaniment
			TPE3	Conductor/performer refinement
			TPE4	Interpreted, remixed, or otherwise modified by
			TPOS	Part of a set
			TPRO	Produced notice
			TPUB	Publisher
			TRC	ISRC (International Standard Recording Code)
			TRCK	Track number/Position in set
			TRD	Recording dates
			TRDA	Recording dates
			TRK	Track number/Position in set
			TRSN	Internet radio station name
			TRSO	Internet radio station owner
			TS2	Album-Artist sort order
			TSA	Album sort order
			TSC	Composer sort order
			TSI	Size
			TSIZ	Size
			TSO2	Album-Artist sort order
			TSOA	Album sort order
			TSOC	Composer sort order
			TSOP	Performer sort order
			TSOT	Title sort order
			TSP	Performer sort order
			TSRC	ISRC (international standard recording code)
			TSS	Software/hardware and settings used for encoding
			TSSE	Software/Hardware and settings used for encoding
			TSST	Set subtitle
			TST	Title sort order
			TT1	Content group description
			TT2	Title/Songname/Content description
			TT3	Subtitle/Description refinement
			TXT	Lyricist/text writer
			TXX	User defined text information frame
			TXXX	User defined text information frame
			TYE	Year
			TYER	Year
			UFI	Unique file identifier
			UFID	Unique file identifier
			ULT	Unsychronised lyric/text transcription
			USER	Terms of use
			USLT	Unsynchronised lyric/text transcription
			WAF	Official audio file webpage
			WAR	Official artist/performer webpage
			WAS	Official audio source webpage
			WCM	Commercial information
			WCOM	Commercial information
			WCOP	Copyright/Legal information
			WCP	Copyright/Legal information
			WOAF	Official audio file webpage
			WOAR	Official artist/performer webpage
			WOAS	Official audio source webpage
			WORS	Official Internet radio station homepage
			WPAY	Payment
			WPB	Publishers official webpage
			WPUB	Publishers official webpage
			WXX	User defined URL link frame
			WXXX	User defined URL link frame
			TFEA	Featured Artist
			TSTU	Recording Studio
			rgad	Replay Gain Adjustment
 */
$framename) {}
/** This is not a comment!

			AENC	audio_encryption
			APIC	attached_picture
			ASPI	audio_seek_point_index
			BUF	recommended_buffer_size
			CNT	play_counter
			COM	comment
			COMM	comment
			COMR	commercial_frame
			CRA	audio_encryption
			CRM	encrypted_meta_frame
			ENCR	encryption_method_registration
			EQU	equalisation
			EQU2	equalisation
			EQUA	equalisation
			ETC	event_timing_codes
			ETCO	event_timing_codes
			GEO	general_encapsulated_object
			GEOB	general_encapsulated_object
			GRID	group_identification_registration
			IPL	involved_people_list
			IPLS	involved_people_list
			LINK	linked_information
			LNK	linked_information
			MCDI	music_cd_identifier
			MCI	music_cd_identifier
			MLL	mpeg_location_lookup_table
			MLLT	mpeg_location_lookup_table
			OWNE	ownership_frame
			PCNT	play_counter
			PIC	attached_picture
			POP	popularimeter
			POPM	popularimeter
			POSS	position_synchronisation_frame
			PRIV	private_frame
			RBUF	recommended_buffer_size
			REV	reverb
			RVA	relative_volume_adjustment
			RVA2	relative_volume_adjustment
			RVAD	relative_volume_adjustment
			RVRB	reverb
			SEEK	seek_frame
			SIGN	signature_frame
			SLT	synchronised_lyric
			STC	synced_tempo_codes
			SYLT	synchronised_lyric
			SYTC	synchronised_tempo_codes
			TAL	album
			TALB	album
			TBP	bpm
			TBPM	bpm
			TCM	composer
			TCMP	part_of_a_compilation
			TCO	genre
			TCOM	composer
			TCON	genre
			TCOP	copyright_message
			TCP	part_of_a_compilation
			TCR	copyright_message
			TDA	date
			TDAT	date
			TDEN	encoding_time
			TDLY	playlist_delay
			TDOR	original_release_time
			TDRC	recording_time
			TDRL	release_time
			TDTG	tagging_time
			TDY	playlist_delay
			TEN	encoded_by
			TENC	encoded_by
			TEXT	lyricist
			TFLT	file_type
			TFT	file_type
			TIM	time
			TIME	time
			TIPL	involved_people_list
			TIT1	content_group_description
			TIT2	title
			TIT3	subtitle
			TKE	initial_key
			TKEY	initial_key
			TLA	language
			TLAN	language
			TLE	length
			TLEN	length
			TMCL	musician_credits_list
			TMED	media_type
			TMOO	mood
			TMT	media_type
			TOA	original_artist
			TOAL	original_album
			TOF	original_filename
			TOFN	original_filename
			TOL	original_lyricist
			TOLY	original_lyricist
			TOPE	original_artist
			TOR	original_year
			TORY	original_year
			TOT	original_album
			TOWN	file_owner
			TP1	artist
			TP2	band
			TP3	conductor
			TP4	remixer
			TPA	part_of_a_set
			TPB	publisher
			TPE1	artist
			TPE2	band
			TPE3	conductor
			TPE4	remixer
			TPOS	part_of_a_set
			TPRO	produced_notice
			TPUB	publisher
			TRC	isrc
			TRCK	track_number
			TRD	recording_dates
			TRDA	recording_dates
			TRK	track_number
			TRSN	internet_radio_station_name
			TRSO	internet_radio_station_owner
			TS2	album_artist_sort_order
			TSA	album_sort_order
			TSC	composer_sort_order
			TSI	size
			TSIZ	size
			TSO2	album_artist_sort_order
			TSOA	album_sort_order
			TSOC	composer_sort_order
			TSOP	performer_sort_order
			TSOT	title_sort_order
			TSP	performer_sort_order
			TSRC	isrc
			TSS	encoder_settings
			TSSE	encoder_settings
			TSST	set_subtitle
			TST	title_sort_order
			TT1	content_group_description
			TT2	title
			TT3	subtitle
			TXT	lyricist
			TXX	text
			TXXX	text
			TYE	year
			TYER	year
			UFI	unique_file_identifier
			UFID	unique_file_identifier
			ULT	unsychronised_lyric
			USER	terms_of_use
			USLT	unsynchronised_lyric
			WAF	url_file
			WAR	url_artist
			WAS	url_source
			WCM	commercial_information
			WCOM	commercial_information
			WCOP	copyright
			WCP	copyright
			WOAF	url_file
			WOAR	url_artist
			WOAS	url_source
			WORS	url_station
			WPAY	url_payment
			WPB	url_publisher
			WPUB	url_publisher
			WXX	url_user
			WXXX	url_user
			TFEA	featured_artist
			TSTU	recording_studio
			rgad	replay_gain_adjustment
 */
        public static function FrameNameShortLookup(/** This is not a comment!

			AENC	audio_encryption
			APIC	attached_picture
			ASPI	audio_seek_point_index
			BUF	recommended_buffer_size
			CNT	play_counter
			COM	comment
			COMM	comment
			COMR	commercial_frame
			CRA	audio_encryption
			CRM	encrypted_meta_frame
			ENCR	encryption_method_registration
			EQU	equalisation
			EQU2	equalisation
			EQUA	equalisation
			ETC	event_timing_codes
			ETCO	event_timing_codes
			GEO	general_encapsulated_object
			GEOB	general_encapsulated_object
			GRID	group_identification_registration
			IPL	involved_people_list
			IPLS	involved_people_list
			LINK	linked_information
			LNK	linked_information
			MCDI	music_cd_identifier
			MCI	music_cd_identifier
			MLL	mpeg_location_lookup_table
			MLLT	mpeg_location_lookup_table
			OWNE	ownership_frame
			PCNT	play_counter
			PIC	attached_picture
			POP	popularimeter
			POPM	popularimeter
			POSS	position_synchronisation_frame
			PRIV	private_frame
			RBUF	recommended_buffer_size
			REV	reverb
			RVA	relative_volume_adjustment
			RVA2	relative_volume_adjustment
			RVAD	relative_volume_adjustment
			RVRB	reverb
			SEEK	seek_frame
			SIGN	signature_frame
			SLT	synchronised_lyric
			STC	synced_tempo_codes
			SYLT	synchronised_lyric
			SYTC	synchronised_tempo_codes
			TAL	album
			TALB	album
			TBP	bpm
			TBPM	bpm
			TCM	composer
			TCMP	part_of_a_compilation
			TCO	genre
			TCOM	composer
			TCON	genre
			TCOP	copyright_message
			TCP	part_of_a_compilation
			TCR	copyright_message
			TDA	date
			TDAT	date
			TDEN	encoding_time
			TDLY	playlist_delay
			TDOR	original_release_time
			TDRC	recording_time
			TDRL	release_time
			TDTG	tagging_time
			TDY	playlist_delay
			TEN	encoded_by
			TENC	encoded_by
			TEXT	lyricist
			TFLT	file_type
			TFT	file_type
			TIM	time
			TIME	time
			TIPL	involved_people_list
			TIT1	content_group_description
			TIT2	title
			TIT3	subtitle
			TKE	initial_key
			TKEY	initial_key
			TLA	language
			TLAN	language
			TLE	length
			TLEN	length
			TMCL	musician_credits_list
			TMED	media_type
			TMOO	mood
			TMT	media_type
			TOA	original_artist
			TOAL	original_album
			TOF	original_filename
			TOFN	original_filename
			TOL	original_lyricist
			TOLY	original_lyricist
			TOPE	original_artist
			TOR	original_year
			TORY	original_year
			TOT	original_album
			TOWN	file_owner
			TP1	artist
			TP2	band
			TP3	conductor
			TP4	remixer
			TPA	part_of_a_set
			TPB	publisher
			TPE1	artist
			TPE2	band
			TPE3	conductor
			TPE4	remixer
			TPOS	part_of_a_set
			TPRO	produced_notice
			TPUB	publisher
			TRC	isrc
			TRCK	track_number
			TRD	recording_dates
			TRDA	recording_dates
			TRK	track_number
			TRSN	internet_radio_station_name
			TRSO	internet_radio_station_owner
			TS2	album_artist_sort_order
			TSA	album_sort_order
			TSC	composer_sort_order
			TSI	size
			TSIZ	size
			TSO2	album_artist_sort_order
			TSOA	album_sort_order
			TSOC	composer_sort_order
			TSOP	performer_sort_order
			TSOT	title_sort_order
			TSP	performer_sort_order
			TSRC	isrc
			TSS	encoder_settings
			TSSE	encoder_settings
			TSST	set_subtitle
			TST	title_sort_order
			TT1	content_group_description
			TT2	title
			TT3	subtitle
			TXT	lyricist
			TXX	text
			TXXX	text
			TYE	year
			TYER	year
			UFI	unique_file_identifier
			UFID	unique_file_identifier
			ULT	unsychronised_lyric
			USER	terms_of_use
			USLT	unsynchronised_lyric
			WAF	url_file
			WAR	url_artist
			WAS	url_source
			WCM	commercial_information
			WCOM	commercial_information
			WCOP	copyright
			WCP	copyright
			WOAF	url_file
			WOAR	url_artist
			WOAS	url_source
			WORS	url_station
			WPAY	url_payment
			WPB	url_publisher
			WPUB	url_publisher
			WXX	url_user
			WXXX	url_user
			TFEA	featured_artist
			TSTU	recording_studio
			rgad	replay_gain_adjustment
 */
$framename) {}
        public static function TextEncodingTerminatorLookup($encoding) {}
        public static function TextEncodingNameLookup($encoding) {}
        public static function IsValidID3v2FrameName($framename, $id3v2majorversion) {}
        public static function IsANumber($numberstring, $allowdecimal = false, $allownegative = false) {}
        public static function IsValidDateStampString($datestamp) {}
        public static function ID3v2HeaderLength($majorversion) {}
        public static function ID3v22iTunesBrokenFrameName($frame_name) {}
    }

    class getid3_quicktime extends \getid3_handler {
        public $ReturnAtomData;
        public $ParseAllPossibleAtoms;

        public function Analyze() {}
        public function QuicktimeParseAtom($atomname, $atomsize, $atom_data, $baseoffset, $atomHierarchy, $ParseAllPossibleAtoms) {}
        public function QuicktimeParseContainerAtom($atom_data, $baseoffset, $atomHierarchy, $ParseAllPossibleAtoms) {}
        public function quicktime_read_mp4_descr_length($data, $offset) {}
        public function QuicktimeLanguageLookup($languageid) {}
        public function QuicktimeVideoCodecLookup($codecid) {}
        public function QuicktimeAudioCodecLookup($codecid) {}
        public function QuicktimeDCOMLookup($compressionid) {}
        public function QuicktimeColorNameLookup($colordepthid) {}
        public function QuicktimeSTIKLookup($stik) {}
        public function QuicktimeIODSaudioProfileName($audio_profile_id) {}
        public function QuicktimeIODSvideoProfileName($video_profile_id) {}
        public function QuicktimeContentRatingLookup($rtng) {}
        public function QuicktimeStoreAccountTypeLookup($akid) {}
        public function QuicktimeStoreFrontCodeLookup($sfid) {}
        public function QuicktimeParseNikonNCTG($atom_data) {}
        public function CopyToAppropriateCommentsSection($keyname, $data, $boxname = '') {}
        public function LociString($lstring, $count) {}
        public function NoNullString($nullterminatedstring) {}
        public function Pascal2String($pascalstring) {}
        public function search_tag_by_key($info, $tag, $history, $result) {}
        public function search_tag_by_pair($info, $k, $v, $history, $result) {}
        public function quicktime_time_to_sample_table($info) {}
        function quicktime_bookmark_time_scale($info) {}
    }

    class getid3_id3v1 extends \getid3_handler {
        public function Analyze() {}
        public static function cutfield($str) {}
        public static function ArrayOfGenres($allowSCMPXextended = false) {}
        public static function LookupGenreName($genreid, $allowSCMPXextended = true) {}
        public static function LookupGenreID($genre, $allowSCMPXextended = false) {}
        public static function StandardiseID3v1GenreName($OriginalGenre) {}
        public static function GenerateID3v1Tag($title, $artist, $album, $year, $genreid, $comment, $track = '') {}
    }

    class getid3_lyrics3 extends \getid3_handler {
        public function Analyze() {}
        public function getLyrics3Data($endoffset, $version, $length) {}
        public function Lyrics3Timestamp2Seconds($rawtimestamp) {}
        public function Lyrics3LyricsTimestampParse($Lyrics3data) {}
        public function IntString2Bool($char) {}
    }

    class getID3 {
        const VERSION = '1.9.14-201706111222';
        const ATTACHMENTS_INLINE = true;
        const FREAD_BUFFER_SIZE = 32768;
        const ATTACHMENTS_NONE = false;

        public $encoding;
        public $encoding_id3v1;
        public $option_tag_id3v1;
        public $option_tag_id3v2;
        public $option_tag_lyrics3;
        public $option_tag_apetag;
        public $option_tags_process;
        public $option_tags_html;
        public $option_extra_info;
        public $option_save_attachments;
        public $option_md5_data;
        public $option_md5_data_source;
        public $option_sha1_data;
        public $option_max_2gb_check;
        public $option_fread_buffer_size;
        public $filename;
        public $fp;
        public $info;
        public $tempdir;
        public $memory_limit;
        protected $startup_error;
        protected $startup_warning;

        public function __construct() {}
        public function version() {}
        public function fread_buffer_size() {}
        public function setOption($optArray) {}
        public function openfile($filename, $filesize = null) {}
        public function analyze($filename, $filesize = null, $original_filename = '') {}
        public function error($message) {}
        public function warning($message) {}
        private function CleanUp() {}
        public function GetFileFormatArray() {}
        public function GetFileFormat($filedata, $filename = '') {}
        public function CharConvert($array, $encoding) {}
        public function HandleAllTags() {}
        public function getHashdata($algorithm) {}
        public function ChannelsBitratePlaytimeCalculations() {}
        public function CalculateCompressionRatioVideo() {}
        public function CalculateCompressionRatioAudio() {}
        public function CalculateReplayGain() {}
        public function ProcessAudioStreams() {}
        public function getid3_tempnam() {}
        public function include_module($name) {}
        public static function is_writable($filename) {}
    }

    abstract class getid3_handler {
        /**
         * @var getID3
         */
        protected $getid3;
        protected $data_string_flag;
        protected $data_string;
        protected $data_string_position;
        protected $data_string_length;
        private $dependency_to;

        public function __construct(getID3 $getid3, $call_module = null) {}
        abstract public function Analyze() ;
        public function AnalyzeString($string) {}
        public function setStringMode($string) {}
        protected function ftell() {}
        protected function fread($bytes) {}
        protected function fseek($bytes, $whence = SEEK_SET) {}
        protected function feof() {}
        protected function isDependencyFor($module) {}
        protected function error($text) {}
        protected function warning($text) {}
        protected function notice($text) {}
        public function saveAttachment($name, $offset, $length, $image_mime = null) {}
    }

    class getid3_exception extends \exception {
        public $message;

    }

    class getid3_mp3 extends \getid3_handler {
        public $allow_bruteforce;

        public function Analyze() {}
        public function GuessEncoderOptions() {}
        public function decodeMPEGaudioHeader($offset, $info, $recursivesearch = true, $ScanAsCBR = false, $FastMPEGheaderScan = false) {}
        public function RecursiveFrameScanning($offset, $nextframetestoffset, $ScanAsCBR) {}
        public function FreeFormatFrameLength($offset, $deepscan = false) {}
        public function getOnlyMPEGaudioInfoBruteForce() {}
        public function getOnlyMPEGaudioInfo($avdataoffset, $BitrateHistogram = false) {}
        public static function MPEGaudioVersionArray() {}
        public static function MPEGaudioLayerArray() {}
        public static function MPEGaudioBitrateArray() {}
        public static function MPEGaudioFrequencyArray() {}
        public static function MPEGaudioChannelModeArray() {}
        public static function MPEGaudioModeExtensionArray() {}
        public static function MPEGaudioEmphasisArray() {}
        public static function MPEGaudioHeaderBytesValid($head4, $allowBitrate15 = false) {}
        public static function MPEGaudioHeaderValid($rawarray, $echoerrors = false, $allowBitrate15 = false) {}
        public static function MPEGaudioHeaderDecode($Header4Bytes) {}
        public static function MPEGaudioFrameLength($bitrate, $version, $layer, $padding, $samplerate) {}
        public static function ClosestStandardMP3Bitrate($bit_rate) {}
        public static function XingVBRidOffset($version, $channelmode) {}
        public static function LAMEvbrMethodLookup($VBRmethodID) {}
        public static function LAMEmiscStereoModeLookup($StereoModeID) {}
        public static function LAMEmiscSourceSampleFrequencyLookup($SourceSampleFrequencyID) {}
        public static function LAMEsurroundInfoLookup($SurroundInfoID) {}
        public static function LAMEpresetUsedLookup($LAMEtag) {}
    }

    /**
* @tutorial http://wiki.multimedia.cx/index.php?title=DTS
*/
    class getid3_dts extends \getid3_handler {
        const syncword = "\x7F\xFE\x80\x01";

        private $readBinDataOffset;
        /**
         * Possible syncwords indicating bitstream encoding
         */
        static public $syncwords;

        public function Analyze() {}
        private function readBinData($bin, $length) {}
        public static function bitrateLookup($index) {}
        public static function sampleRateLookup($index) {}
        public static function bitPerSampleLookup($index) {}
        public static function numChannelsLookup($index) {}
        public static function channelArrangementLookup($index) {}
        public static function dialogNormalization($index, $version) {}
    }

    class getid3_ogg extends \getid3_handler {
        public function Analyze() {}
        public function ParseVorbisPageHeader($filedata, $filedataoffset, $oggpageinfo) {}
/** @todo find a usable way to detect abr (vbr that is padded to be abr) */
        public function ParseOpusPageHeader(/** @todo find a usable way to detect abr (vbr that is padded to be abr) */
$filedata, /** @todo find a usable way to detect abr (vbr that is padded to be abr) */
$filedataoffset, /** @todo find a usable way to detect abr (vbr that is padded to be abr) */
$oggpageinfo) {}
        public function ParseOggPageHeader() {}
        /** @todo use 'coverartmime' where available */
        public function ParseVorbisComments() {}
        public static function SpeexBandModeLookup($mode) {}
        public static function OggPageSegmentLength($OggInfoArray, $SegmentNumber = 1) {}
        public static function get_quality_from_nominal_bitrate($nominal_bitrate) {}
        public static function TheoraColorSpace($colorspace_id) {}
        public static function TheoraPixelFormat($pixelformat_id) {}
    }

    /**
* @tutorial http://www.matroska.org/technical/specs/index.html
*
* @todo Rewrite EBML parser to reduce it's size and honor default element values
* @todo After rewrite implement stream size calculation, that will provide additional useful info and enable AAC/FLAC audio bitrate detection
*/
    class getid3_matroska extends \getid3_handler {
        static public $hide_clusters;
        static public $parse_whole_file;
        private $EBMLbuffer;
        private $EBMLbuffer_offset;
        private $EBMLbuffer_length;
        private $current_offset;
        private $unuseful_elements;

        public function Analyze() {}
        private function parseEBML($info) {}
        private function EnsureBufferHasEnoughData($min_data = 1024) {}
        private function readEBMLint() {}
        private function readEBMLelementData($length, $check_buffer = false) {}
        private function getEBMLelement($element, $parent_end, $get_data = false) {}
        private function unhandledElement($type, $line, $element) {}
        private function ExtractCommentsSimpleTag($SimpleTagArray) {}
        private function HandleEMBLSimpleTag($parent_end) {}
        private function HandleEMBLClusterBlock($element, $block_type, $info) {}
        private static function EBML2Int($EBMLstring) {}
        private static function EBMLdate2unix($EBMLdatestamp) {}
        public static function TargetTypeValue($target_type) {}
        public static function BlockLacingType($lacingtype) {}
        public static function CodecIDtoCommonName($codecid) {}
        private static function EBMLidName($value) {}
        public static function displayUnit($value) {}
        private static function getDefaultStreamInfo($streams) {}
    }

    class getid3_ac3 extends \getid3_handler {
        const syncword = 0x0B77;

        private $AC3header;
        private $BSIoffset;

        public function Analyze() {}
        private function readHeaderBSI($length) {}
        public static function sampleRateCodeLookup($fscod) {}
        public static function sampleRateCodeLookup2($fscod2) {}
        public static function serviceTypeLookup($bsmod, $acmod) {}
        public static function audioCodingModeLookup($acmod) {}
        public static function centerMixLevelLookup($cmixlev) {}
        public static function surroundMixLevelLookup($surmixlev) {}
        public static function dolbySurroundModeLookup($dsurmod) {}
        public static function channelsEnabledLookup($acmod, $lfeon) {}
        public static function heavyCompression($compre) {}
        public static function roomTypeLookup($roomtyp) {}
        public static function frameSizeLookup($frmsizecod, $fscod) {}
        public static function bitrateLookup($frmsizecod) {}
        public static function blocksPerSyncFrame($numblkscod) {}
    }

    class getid3_lib {
        public static function PrintHexBytes($string, $hex = true, $spaces = true, $htmlencoding = 'UTF-8') {}
        public static function trunc($floatnumber) {}
        public static function safe_inc($variable, $increment = 1) {}
        public static function CastAsInt($floatnum) {}
        public static function intValueSupported($num) {}
        public static function DecimalizeFraction($fraction) {}
        public static function DecimalBinary2Float($binarynumerator) {}
        public static function NormalizeBinaryPoint($binarypointnumber, $maxbits = 52) {}
        public static function Float2BinaryDecimal($floatvalue) {}
        public static function Float2String($floatvalue, $bits) {}
        public static function LittleEndian2Float($byteword) {}
        public static function BigEndian2Float($byteword) {}
        public static function BigEndian2Int($byteword, $synchsafe = false, $signed = false) {}
        public static function LittleEndian2Int($byteword, $signed = false) {}
        public static function LittleEndian2Bin($byteword) {}
        public static function BigEndian2Bin($byteword) {}
        public static function BigEndian2String($number, $minbytes = 1, $synchsafe = false, $signed = false) {}
        public static function Dec2Bin($number) {}
        public static function Bin2Dec($binstring, $signed = false) {}
        public static function Bin2String($binstring) {}
        public static function LittleEndian2String($number, $minbytes = 1, $synchsafe = false) {}
        public static function array_merge_clobber($array1, $array2) {}
        public static function array_merge_noclobber($array1, $array2) {}
        public static function flipped_array_merge_noclobber($array1, $array2) {}
        public static function ksort_recursive($theArray) {}
        public static function fileextension($filename, $numextensions = 1) {}
        public static function PlaytimeString($seconds) {}
        public static function DateMac2Unix($macdate) {}
        public static function FixedPoint8_8($rawdata) {}
        public static function FixedPoint16_16($rawdata) {}
        public static function FixedPoint2_30($rawdata) {}
        public static function CreateDeepArray($ArrayPath, $Separator, $Value) {}
        public static function array_max($arraydata, $returnkey = false) {}
        public static function array_min($arraydata, $returnkey = false) {}
        public static function XML2array($XMLstring) {}
        public static function SimpleXMLelement2array($XMLobject) {}
        public static function hash_data($file, $offset, $end, $algorithm) {}
        public static function CopyFileParts($filename_source, $filename_dest, $offset, $length) {}
        public static function iconv_fallback_int_utf8($charval) {}
        public static function iconv_fallback_iso88591_utf8($string, $bom = false) {}
        public static function iconv_fallback_iso88591_utf16be($string, $bom = false) {}
        public static function iconv_fallback_iso88591_utf16le($string, $bom = false) {}
        public static function iconv_fallback_iso88591_utf16($string) {}
        public static function iconv_fallback_utf8_iso88591($string) {}
        public static function iconv_fallback_utf8_utf16be($string, $bom = false) {}
        public static function iconv_fallback_utf8_utf16le($string, $bom = false) {}
        public static function iconv_fallback_utf8_utf16($string) {}
        public static function iconv_fallback_utf16be_utf8($string) {}
        public static function iconv_fallback_utf16le_utf8($string) {}
        public static function iconv_fallback_utf16be_iso88591($string) {}
        public static function iconv_fallback_utf16le_iso88591($string) {}
        public static function iconv_fallback_utf16_iso88591($string) {}
        public static function iconv_fallback_utf16_utf8($string) {}
        public static function iconv_fallback($in_charset, $out_charset, $string) {}
        public static function recursiveMultiByteCharString2HTML($data, $charset = 'ISO-8859-1') {}
        public static function MultiByteCharString2HTML($string, $charset = 'ISO-8859-1') {}
        public static function RGADnameLookup($namecode) {}
        public static function RGADoriginatorLookup($originatorcode) {}
        public static function RGADadjustmentLookup($rawadjustment, $signbit) {}
        public static function RGADgainString($namecode, $originatorcode, $replaygain) {}
        public static function RGADamplitude2dB($amplitude) {}
        public static function GetDataImageSize($imgData, $imageinfo = array( )) {}
        public static function ImageExtFromMime($mime_type) {}
        public static function ImageTypesLookup($imagetypeid) {}
        public static function CopyTagsToComments($ThisFileInfo) {}
        public static function EmbeddedLookup($key, $begin, $end, $file, $name) {}
        public static function IncludeDependency($filename, $sourcefile, $DieOnFailure = false) {}
        public static function trimNullByte($string) {}
        public static function getFileSizeSyscall($path) {}
        public static function mb_basename($path, $suffix = null) {}
    }

    class getid3_asf extends \getid3_handler {
        public function __construct(getID3 $getid3) {}
        public function Analyze() {}
        public static function codecListObjectTypeLookup($CodecListType) {}
        public static function KnownGUIDs() {}
        public static function GUIDname($GUIDstring) {}
        public static function ASFIndexObjectIndexTypeLookup($id) {}
        public static function GUIDtoBytestring($GUIDstring) {}
        public static function BytestringToGUID($Bytestring) {}
        public static function FILETIMEtoUNIXtime($FILETIME, $round = true) {}
        public static function WMpictureTypeLookup($WMpictureType) {}
        public function HeaderExtensionObjectDataParse($asf_header_extension_object_data, $unhandled_sections) {}
        public static function metadataLibraryObjectDataTypeLookup($id) {}
        public function ASF_WMpicture($data) {}
        public static function TrimConvert($string) {}
        public static function TrimTerm($string) {}
    }

    class getid3_flv extends \getid3_handler {
        const magic = 'FLV';

        public $max_frames;

        public function Analyze() {}
        public static function audioFormatLookup($id) {}
        public static function audioRateLookup($id) {}
        public static function audioBitDepthLookup($id) {}
        public static function videoCodecLookup($id) {}
    }

    class AMFStream {
        public $bytes;
        public $pos;

        public function __construct($bytes) {}
        public function readByte() {}
        public function readInt() {}
        public function readLong() {}
        public function readDouble() {}
        public function readUTF() {}
        public function readLongUTF() {}
        public function read($length) {}
        public function peekByte() {}
        public function peekInt() {}
        public function peekLong() {}
        public function peekDouble() {}
        public function peekUTF() {}
        public function peekLongUTF() {}
    }

    class AMFReader {
        public $stream;

        public function __construct($stream) {}
        public function readData() {}
        public function readDouble() {}
        public function readBoolean() {}
        public function readString() {}
        public function readObject() {}
        public function readMixedArray() {}
        public function readArray() {}
        public function readDate() {}
        public function readLongString() {}
        public function readXML() {}
        public function readTypedObject() {}
    }

    class AVCSequenceParameterSetReader {
        public $sps;
        public $start;
        public $currentBytes;
        public $currentBits;
        public $width;
        public $height;

        public function __construct($sps) {}
        public function readData() {}
        public function skipBits($bits) {}
        public function getBit() {}
        public function getBits($bits) {}
        public function expGolombUe() {}
        public function expGolombSe() {}
        public function getWidth() {}
        public function getHeight() {}
    }

    /**
     * Manages all category-related data
     *
     * Used by {@see SimplePie_Item::get_category()} and {@see SimplePie_Item::get_categories()}
     *
     * This class can be overloaded with {@see SimplePie::set_category_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Category {
        /**
         * Category identifier
         *
         * @var string
         * @see get_term
         */
        public $term;
        /**
         * Categorization scheme identifier
         *
         * @var string
         * @see get_scheme()
         */
        public $scheme;
        /**
         * Human readable label
         *
         * @var string
         * @see get_label()
         */
        public $label;

        public function __construct($term = null, $scheme = null, $label = null) {}
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Get the category identifier
         *
         * @return string|null
         */
        public function get_term() {}
        /**
         * Get the categorization scheme identifier
         *
         * @return string|null
         */
        public function get_scheme() {}
        /**
         * Get the human readable label
         *
         * @return string|null
         */
        public function get_label() {}
    }

    /**
     * Parses XML into something sane
     *
     *
     * This class can be overloaded with {@see SimplePie::set_parser_class()}
     *
     * @package SimplePie
     * @subpackage Parsing
     */
    class SimplePie_Parser {
        public $error_code;
        public $error_string;
        public $current_line;
        public $current_column;
        public $current_byte;
        public $separator;
        public $namespace;
        public $element;
        public $xml_base;
        public $xml_base_explicit;
        public $xml_lang;
        public $data;
        public $datas;
        public $current_xhtml_construct;
        public $encoding;
        protected $registry;

        public function set_registry(SimplePie_Registry $registry) {}
        public function parse($data, $encoding) {}
        public function get_error_code() {}
        public function get_error_string() {}
        public function get_current_line() {}
        public function get_current_column() {}
        public function get_current_byte() {}
        public function get_data() {}
        public function tag_open($parser, $tag, $attributes) {}
        public function cdata($parser, $cdata) {}
        public function tag_close($parser, $tag) {}
        public function split_ns($string) {}
    }

    /**
     * Used for data cleanup and post-processing
     *
     *
     * This class can be overloaded with {@see SimplePie::set_sanitize_class()}
     *
     * @package SimplePie
     * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shorten a string while preserving HTML tags
     */
    class SimplePie_Sanitize {
        public $base;
        public $remove_div;
        public $image_handler;
        public $strip_htmltags;
        public $encode_instead_of_strip;
        public $strip_attributes;
        public $strip_comments;
        public $output_encoding;
        public $enable_cache;
        public $cache_location;
        public $cache_name_function;
        public $timeout;
        public $useragent;
        public $force_fsockopen;
        public $replace_url_attributes;

        public function __construct() {}
        public function remove_div($enable = true) {}
        public function set_image_handler($page = false) {}
        public function set_registry(SimplePie_Registry $registry) {}
        public function pass_cache_data($enable_cache = true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache') {}
        public function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = false) {}
        public function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style')) {}
        public function encode_instead_of_strip($encode = false) {}
        public function strip_attributes($attribs = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc')) {}
        public function strip_comments($strip = false) {}
        public function set_output_encoding($encoding = 'UTF-8') {}
        public function set_url_replacements($element_attribute = null) {}
        public function sanitize($data, $type, $base = '') {}
        protected function preprocess($html, $type) {}
        public function replace_urls($document, $tag, $attributes) {}
        public function do_strip_htmltags($match) {}
        protected function strip_tag($tag, $document, $type) {}
        protected function strip_attr($attrib, $document) {}
    }

    /**
     * Used to create cache objects
     *
     * This class can be overloaded with {@see SimplePie::set_cache_class()},
     * although the preferred way is to create your own handler
     * via {@see register()}
     *
     * @package SimplePie
     * @subpackage Caching
     */
    class SimplePie_Cache {
        /**
         * Cache handler classes
         *
         * These receive 3 parameters to their constructor, as documented in
         * {@see register()}
         * @var array
         */
        static protected $handlers;

        /**
         * Don't call the constructor. Please.
         */
        private function __construct() {}
        public static function get_handler($location, $filename, $extension) {}
        public function create($location, $filename, $extension) {}
        public static function register($type, $class) {}
        public static function parse_URL($url) {}
    }

    /**
     * Used for fetching remote files and reading local files
     *
     * Supports HTTP 1.0 via cURL or fsockopen, with spotty HTTP 1.1 support
     *
     * This class can be overloaded with {@see SimplePie::set_file_class()}
     *
     * @package SimplePie
     * @subpackage HTTP
     * @todo Move to properly supporting RFC2616 (HTTP/1.1)
     */
    class SimplePie_File {
        public $url;
        public $useragent;
        public $success;
        public $headers;
        public $body;
        public $status_code;
        public $redirects;
        public $error;
        public $method;

        public function __construct($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false) {}
    }

    /**
     * Handles creating objects and calling methods
     *
     * Access this via {@see SimplePie::get_registry()}
     *
     * @package SimplePie
     */
    class SimplePie_Registry {
        /**
         * Default class mapping
         *
         * Overriding classes *must* subclass these.
         *
         * @var array
         */
        protected $default;
        /**
         * Class mapping
         *
         * @see register()
         * @var array
         */
        protected $classes;
        /**
         * Legacy classes
         *
         * @see register()
         * @var array
         */
        protected $legacy;

        /**
         * Constructor
         *
         * No-op
         */
        public function __construct() {}
        public function register($type, $class, $legacy = false) {}
        public function get_class($type) {}
        public function &create($type, $parameters = array( )) {}
        public function &call($type, $method, $parameters = array( )) {}
    }

    /**
     * Manages `<media:copyright>` copyright tags as defined in Media RSS
     *
     * Used by {@see SimplePie_Enclosure::get_copyright()}
     *
     * This class can be overloaded with {@see SimplePie::set_copyright_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Copyright {
        /**
         * Copyright URL
         *
         * @var string
         * @see get_url()
         */
        public $url;
        /**
         * Attribution
         *
         * @var string
         * @see get_attribution()
         */
        public $label;

        public function __construct($url = null, $label = null) {}
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Get the copyright URL
         *
         * @return string|null URL to copyright information
         */
        public function get_url() {}
        /**
         * Get the attribution text
         *
         * @return string|null
         */
        public function get_attribution() {}
    }

    /**
     * Used for feed auto-discovery
     *
     *
     * This class can be overloaded with {@see SimplePie::set_locator_class()}
     *
     * @package SimplePie
     */
    class SimplePie_Locator {
        public $useragent;
        public $timeout;
        public $file;
        public $local;
        public $elsewhere;
        public $cached_entities;
        public $http_base;
        public $base;
        public $base_location;
        public $checked_feeds;
        public $max_checked_feeds;
        protected $registry;

        public function __construct(SimplePie_File $file, $timeout = 10, $useragent = null, $max_checked_feeds = 10) {}
        public function set_registry(SimplePie_Registry $registry) {}
        public function find($type = SIMPLEPIE_LOCATOR_ALL, $working) {}
        public function is_feed($file) {}
        public function get_base() {}
        public function autodiscovery() {}
        protected function search_elements_by_tag($name, $done, $feeds) {}
        public function get_links() {}
        public function extension($array) {}
        public function body($array) {}
    }

    /**
     * Handles `<media:restriction>` as defined in Media RSS
     *
     * Used by {@see SimplePie_Enclosure::get_restriction()} and {@see SimplePie_Enclosure::get_restrictions()}
     *
     * This class can be overloaded with {@see SimplePie::set_restriction_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Restriction {
        /**
         * Relationship ('allow'/'deny')
         *
         * @var string
         * @see get_relationship()
         */
        public $relationship;
        /**
         * Type of restriction
         *
         * @var string
         * @see get_type()
         */
        public $type;
        /**
         * Restricted values
         *
         * @var string
         * @see get_value()
         */
        public $value;

        public function __construct($relationship = null, $type = null, $value = null) {}
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Get the relationship
         *
         * @return string|null Either 'allow' or 'deny'
         */
        public function get_relationship() {}
        /**
         * Get the type
         *
         * @return string|null
         */
        public function get_type() {}
        /**
         * Get the list of restricted things
         *
         * @return string|null
         */
        public function get_value() {}
    }

    /**
     * Handles `<media:credit>` as defined in Media RSS
     *
     * Used by {@see SimplePie_Enclosure::get_credit()} and {@see SimplePie_Enclosure::get_credits()}
     *
     * This class can be overloaded with {@see SimplePie::set_credit_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Credit {
        /**
         * Credited role
         *
         * @var string
         * @see get_role()
         */
        public $role;
        /**
         * Organizational scheme
         *
         * @var string
         * @see get_scheme()
         */
        public $scheme;
        /**
         * Credited name
         *
         * @var string
         * @see get_name()
         */
        public $name;

        public function __construct($role = null, $scheme = null, $name = null) {}
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Get the role of the person receiving credit
         *
         * @return string|null
         */
        public function get_role() {}
        /**
         * Get the organizational scheme
         *
         * @return string|null
         */
        public function get_scheme() {}
        /**
         * Get the credited person/entity's name
         *
         * @return string|null
         */
        public function get_name() {}
    }

    /**
     * Manages all item-related data
     *
     * Used by {@see SimplePie::get_item()} and {@see SimplePie::get_items()}
     *
     * This class can be overloaded with {@see SimplePie::set_item_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Item {
        /**
         * Parent feed
         *
         * @access private
         * @var SimplePie
         */
        public $feed;
        /**
         * Raw data
         *
         * @access private
         * @var array
         */
        public $data;
        /**
         * Registry object
         *
         * @see set_registry
         * @var SimplePie_Registry
         */
        protected $registry;

        public function __construct($feed, $data) {}
        public function set_registry(SimplePie_Registry $registry) {}
        /**
         * Get a string representation of the item
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Remove items that link back to this before destroying this object
         */
        public function __destruct() {}
        public function get_item_tags($namespace, $tag) {}
        public function get_base($element = array( )) {}
        public function sanitize($data, $type, $base = '') {}
        /**
         * Get the parent feed
         *
         * Note: this may not work as you think for multifeeds!
         *
         * @link http://simplepie.org/faq/typical_multifeed_gotchas#missing_data_from_feed
         * @since 1.0
         * @return SimplePie
         */
        public function get_feed() {}
        public function get_id($hash = false) {}
        /**
         * Get the title of the item
         *
         * Uses `<atom:title>`, `<title>` or `<dc:title>`
         *
         * @since Beta 2 (previously called `get_item_title` since 0.8)
         * @return string|null
         */
        public function get_title() {}
        public function get_description($description_only = false) {}
        public function get_content($content_only = false) {}
        public function get_category($key = 0) {}
        /**
         * Get all categories for the item
         *
         * Uses `<atom:category>`, `<category>` or `<dc:subject>`
         *
         * @since Beta 3
         * @return array|null List of {@see SimplePie_Category} objects
         */
        public function get_categories() {}
        public function get_author($key = 0) {}
        public function get_contributor($key = 0) {}
        /**
         * Get all contributors for the item
         *
         * Uses `<atom:contributor>`
         *
         * @since 1.1
         * @return array|null List of {@see SimplePie_Author} objects
         */
        public function get_contributors() {}
        /**
         * Get all authors for the item
         *
         * Uses `<atom:author>`, `<author>`, `<dc:creator>` or `<itunes:author>`
         *
         * @since Beta 2
         * @return array|null List of {@see SimplePie_Author} objects
         */
        public function get_authors() {}
        /**
         * Get the copyright info for the item
         *
         * Uses `<atom:rights>` or `<dc:rights>`
         *
         * @since 1.1
         * @return string
         */
        public function get_copyright() {}
        public function get_date($date_format = 'j F Y, g:i a') {}
        public function get_updated_date($date_format = 'j F Y, g:i a') {}
        public function get_local_date($date_format = '%c') {}
        public function get_gmdate($date_format = 'j F Y, g:i a') {}
        public function get_updated_gmdate($date_format = 'j F Y, g:i a') {}
        /**
         * Get the permalink for the item
         *
         * Returns the first link available with a relationship of "alternate".
         * Identical to {@see get_link()} with key 0
         *
         * @see get_link
         * @since 0.8
         * @return string|null Permalink URL
         */
        public function get_permalink() {}
        public function get_link($key = 0, $rel = 'alternate') {}
        public function get_links($rel = 'alternate') {}
        public function get_enclosure($key = 0, $prefer = null) {}
        /**
         * Get all available enclosures (podcasts, etc.)
         *
         * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.
         *
         * At this point, we're pretty much assuming that all enclosures for an item
         * are the same content.  Anything else is too complicated to
         * properly support.
         *
         * @since Beta 2
         * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).
         * @todo If an element exists at a level, but it's value is empty, we should fall back to the value from the parent (if it exists).
         * @return array|null List of SimplePie_Enclosure items
         */
        public function get_enclosures() {}
        /**
         * Get the latitude coordinates for the item
         *
         * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications
         *
         * Uses `<geo:lat>` or `<georss:point>`
         *
         * @since 1.0
         * @link http://www.w3.org/2003/01/geo/ W3C WGS84 Basic Geo
         * @link http://www.georss.org/ GeoRSS
         * @return string|null
         */
        public function get_latitude() {}
        /**
         * Get the longitude coordinates for the item
         *
         * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications
         *
         * Uses `<geo:long>`, `<geo:lon>` or `<georss:point>`
         *
         * @since 1.0
         * @link http://www.w3.org/2003/01/geo/ W3C WGS84 Basic Geo
         * @link http://www.georss.org/ GeoRSS
         * @return string|null
         */
        public function get_longitude() {}
        /**
         * Get the `<atom:source>` for the item
         *
         * @since 1.1
         * @return SimplePie_Source|null
         */
        public function get_source() {}
    }

    /**
     * Handles everything related to enclosures (including Media RSS and iTunes RSS)
     *
     * Used by {@see SimplePie_Item::get_enclosure()} and {@see SimplePie_Item::get_enclosures()}
     *
     * This class can be overloaded with {@see SimplePie::set_enclosure_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Enclosure {
        /**
         * @var string
         * @see get_bitrate()
         */
        public $bitrate;
        /**
         * @var array
         * @see get_captions()
         */
        public $captions;
        /**
         * @var array
         * @see get_categories()
         */
        public $categories;
        /**
         * @var int
         * @see get_channels()
         */
        public $channels;
        /**
         * @var SimplePie_Copyright
         * @see get_copyright()
         */
        public $copyright;
        /**
         * @var array
         * @see get_credits()
         */
        public $credits;
        /**
         * @var string
         * @see get_description()
         */
        public $description;
        /**
         * @var int
         * @see get_duration()
         */
        public $duration;
        /**
         * @var string
         * @see get_expression()
         */
        public $expression;
        /**
         * @var string
         * @see get_framerate()
         */
        public $framerate;
        /**
         * @var string
         * @see get_handler()
         */
        public $handler;
        /**
         * @var array
         * @see get_hashes()
         */
        public $hashes;
        /**
         * @var string
         * @see get_height()
         */
        public $height;
        /**
         * @deprecated
         * @var null
         */
        public $javascript;
        /**
         * @var array
         * @see get_keywords()
         */
        public $keywords;
        /**
         * @var string
         * @see get_language()
         */
        public $lang;
        /**
         * @var string
         * @see get_length()
         */
        public $length;
        /**
         * @var string
         * @see get_link()
         */
        public $link;
        /**
         * @var string
         * @see get_medium()
         */
        public $medium;
        /**
         * @var string
         * @see get_player()
         */
        public $player;
        /**
         * @var array
         * @see get_ratings()
         */
        public $ratings;
        /**
         * @var array
         * @see get_restrictions()
         */
        public $restrictions;
        /**
         * @var string
         * @see get_sampling_rate()
         */
        public $samplingrate;
        /**
         * @var array
         * @see get_thumbnails()
         */
        public $thumbnails;
        /**
         * @var string
         * @see get_title()
         */
        public $title;
        /**
         * @var string
         * @see get_type()
         */
        public $type;
        /**
         * @var string
         * @see get_width()
         */
        public $width;

        public function __construct($link = null, $type = null, $length = null, $javascript = null, $bitrate = null, $captions = null, $categories = null, $channels = null, $copyright = null, $credits = null, $description = null, $duration = null, $expression = null, $framerate = null, $hashes = null, $height = null, $keywords = null, $lang = null, $medium = null, $player = null, $ratings = null, $restrictions = null, $samplingrate = null, $thumbnails = null, $title = null, $width = null) {}
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Get the bitrate
         *
         * @return string|null
         */
        public function get_bitrate() {}
        public function get_caption($key = 0) {}
        /**
         * Get all captions
         *
         * @return array|null Array of {@see SimplePie_Caption} objects
         */
        public function get_captions() {}
        public function get_category($key = 0) {}
        /**
         * Get all categories
         *
         * @return array|null Array of {@see SimplePie_Category} objects
         */
        public function get_categories() {}
        /**
         * Get the number of audio channels
         *
         * @return int|null
         */
        public function get_channels() {}
        /**
         * Get the copyright information
         *
         * @return SimplePie_Copyright|null
         */
        public function get_copyright() {}
        public function get_credit($key = 0) {}
        /**
         * Get all credits
         *
         * @return array|null Array of {@see SimplePie_Credit} objects
         */
        public function get_credits() {}
        /**
         * Get the description of the enclosure
         *
         * @return string|null
         */
        public function get_description() {}
        public function get_duration($convert = false) {}
        /**
         * Get the expression
         *
         * @return string Probably one of 'sample', 'full', 'nonstop', 'clip'. Defaults to 'full'
         */
        public function get_expression() {}
        /**
         * Get the file extension
         *
         * @return string|null
         */
        public function get_extension() {}
        /**
         * Get the framerate (in frames-per-second)
         *
         * @return string|null
         */
        public function get_framerate() {}
        /**
         * Get the preferred handler
         *
         * @return string|null One of 'flash', 'fmedia', 'quicktime', 'wmedia', 'mp3'
         */
        public function get_handler() {}
        public function get_hash($key = 0) {}
        /**
         * Get all credits
         *
         * @return array|null Array of strings, see {@see get_hash()}
         */
        public function get_hashes() {}
        /**
         * Get the height
         *
         * @return string|null
         */
        public function get_height() {}
        /**
         * Get the language
         *
         * @link http://tools.ietf.org/html/rfc3066
         * @return string|null Language code as per RFC 3066
         */
        public function get_language() {}
        public function get_keyword($key = 0) {}
        /**
         * Get all keywords
         *
         * @return array|null Array of strings
         */
        public function get_keywords() {}
        /**
         * Get length
         *
         * @return float Length in bytes
         */
        public function get_length() {}
        /**
         * Get the URL
         *
         * @return string|null
         */
        public function get_link() {}
        /**
         * Get the medium
         *
         * @link http://www.rssboard.org/media-rss#media-content
         * @return string|null Should be one of 'image', 'audio', 'video', 'document', 'executable'
         */
        public function get_medium() {}
        /**
         * Get the player URL
         *
         * Typically the same as {@see get_permalink()}
         * @return string|null Player URL
         */
        public function get_player() {}
        public function get_rating($key = 0) {}
        /**
         * Get all ratings
         *
         * @return array|null Array of {@see SimplePie_Rating} objects
         */
        public function get_ratings() {}
        public function get_restriction($key = 0) {}
        /**
         * Get all restrictions
         *
         * @return array|null Array of {@see SimplePie_Restriction} objects
         */
        public function get_restrictions() {}
        /**
         * Get the sampling rate (in kHz)
         *
         * @return string|null
         */
        public function get_sampling_rate() {}
        /**
         * Get the file size (in MiB)
         *
         * @return float|null File size in mebibytes (1048 bytes)
         */
        public function get_size() {}
        public function get_thumbnail($key = 0) {}
        /**
         * Get all thumbnails
         *
         * @return array|null Array of thumbnail URLs
         */
        public function get_thumbnails() {}
        /**
         * Get the title
         *
         * @return string|null
         */
        public function get_title() {}
        /**
         * Get mimetype of the enclosure
         *
         * @see get_real_type()
         * @return string|null MIME type
         */
        public function get_type() {}
        /**
         * Get the width
         *
         * @return string|null
         */
        public function get_width() {}
        public function native_embed($options = '') {}
        public function embed($options = '', $native = false) {}
        public function get_real_type($find_handler = false) {}
    }

    /**
     * IRI parser/serialiser/normaliser
     *
     * @package SimplePie
     * @subpackage HTTP
     * @author Geoffrey Sneddon
     * @author Steve Minutillo
     * @author Ryan McCue
     * @copyright 2007-2012 Geoffrey Sneddon, Steve Minutillo, Ryan McCue
     * @license http://www.opensource.org/licenses/bsd-license.php
     */
    class SimplePie_IRI {
        /**
         * Scheme
         *
         * @var string
         */
        protected $scheme;
        /**
         * User Information
         *
         * @var string
         */
        protected $iuserinfo;
        /**
         * ihost
         *
         * @var string
         */
        protected $ihost;
        /**
         * Port
         *
         * @var string
         */
        protected $port;
        /**
         * ipath
         *
         * @var string
         */
        protected $ipath;
        /**
         * iquery
         *
         * @var string
         */
        protected $iquery;
        /**
         * ifragment
         *
         * @var string
         */
        protected $ifragment;
        /**
         * Normalization database
         *
         * Each key is the scheme, each value is an array with each key as the IRI
         * part and value as the default value for that part.
         */
        protected $normalization;

        /**
         * Return the entire IRI when you try and read the object as a string
         *
         * @return string
         */
        public function __toString() {}
        public function __set($name, $value) {}
        public function __get($name) {}
        public function __isset($name) {}
        public function __unset($name) {}
        public function __construct($iri = null) {}
        public static function absolutize($base, $relative) {}
        protected function parse_iri($iri) {}
        protected function remove_dot_segments($input) {}
        protected function replace_invalid_with_pct_encoding($string, $extra_chars, $iprivate = false) {}
        protected function remove_iunreserved_percent_encoded($match) {}
        protected function scheme_normalization() {}
        /**
         * Check if the object represents a valid IRI. This needs to be done on each
         * call as some things change depending on another part of the IRI.
         *
         * @return bool
         */
        public function is_valid() {}
        public function set_iri($iri) {}
        public function set_scheme($scheme) {}
        public function set_authority($authority) {}
        public function set_userinfo($iuserinfo) {}
        public function set_host($ihost) {}
        public function set_port($port) {}
        public function set_path($ipath) {}
        public function set_query($iquery) {}
        public function set_fragment($ifragment) {}
        public function to_uri($string) {}
        /**
         * Get the complete IRI
         *
         * @return string
         */
        public function get_iri() {}
        /**
         * Get the complete URI
         *
         * @return string
         */
        public function get_uri() {}
        /**
         * Get the complete iauthority
         *
         * @return string
         */
        protected function get_iauthority() {}
        /**
         * Get the complete authority
         *
         * @return string
         */
        protected function get_authority() {}
    }

    /**
     * Handles `<atom:source>`
     *
     * Used by {@see SimplePie_Item::get_source()}
     *
     * This class can be overloaded with {@see SimplePie::set_source_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Source {
        public $item;
        public $data;
        protected $registry;

        public function __construct($item, $data) {}
        public function set_registry(SimplePie_Registry $registry) {}
        public function __toString() {}
        public function get_source_tags($namespace, $tag) {}
        public function get_base($element = array( )) {}
        public function sanitize($data, $type, $base = '') {}
        public function get_item() {}
        public function get_title() {}
        public function get_category($key = 0) {}
        public function get_categories() {}
        public function get_author($key = 0) {}
        public function get_authors() {}
        public function get_contributor($key = 0) {}
        public function get_contributors() {}
        public function get_link($key = 0, $rel = 'alternate') {}
        /**
         * Added for parity between the parent-level and the item/entry-level.
         */
        public function get_permalink() {}
        public function get_links($rel = 'alternate') {}
        public function get_description() {}
        public function get_copyright() {}
        public function get_language() {}
        public function get_latitude() {}
        public function get_longitude() {}
        public function get_image_url() {}
    }

    /**
     * Manages all author-related data
     *
     * Used by {@see SimplePie_Item::get_author()} and {@see SimplePie::get_authors()}
     *
     * This class can be overloaded with {@see SimplePie::set_author_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Author {
        /**
         * Author's name
         *
         * @var string
         * @see get_name()
         */
        public $name;
        /**
         * Author's link
         *
         * @var string
         * @see get_link()
         */
        public $link;
        /**
         * Author's email address
         *
         * @var string
         * @see get_email()
         */
        public $email;

        public function __construct($name = null, $link = null, $email = null) {}
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Author's name
         *
         * @return string|null
         */
        public function get_name() {}
        /**
         * Author's link
         *
         * @return string|null
         */
        public function get_link() {}
        /**
         * Author's email address
         *
         * @return string|null
         */
        public function get_email() {}
    }

    /**
     * General SimplePie exception class
     *
     * @package SimplePie
     */
    class SimplePie_Exception extends \exception {}

    /**
     * Handles `<media:text>` captions as defined in Media RSS.
     *
     * Used by {@see SimplePie_Enclosure::get_caption()} and {@see SimplePie_Enclosure::get_captions()}
     *
     * This class can be overloaded with {@see SimplePie::set_caption_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Caption {
        /**
         * Content type
         *
         * @var string
         * @see get_type()
         */
        public $type;
        /**
         * Language
         *
         * @var string
         * @see get_language()
         */
        public $lang;
        /**
         * Start time
         *
         * @var string
         * @see get_starttime()
         */
        public $startTime;
        /**
         * End time
         *
         * @var string
         * @see get_endtime()
         */
        public $endTime;
        /**
         * Caption text
         *
         * @var string
         * @see get_text()
         */
        public $text;

        public function __construct($type = null, $lang = null, $startTime = null, $endTime = null, $text = null) {}
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Get the end time
         *
         * @return string|null Time in the format 'hh:mm:ss.SSS'
         */
        public function get_endtime() {}
        /**
         * Get the language
         *
         * @link http://tools.ietf.org/html/rfc3066
         * @return string|null Language code as per RFC 3066
         */
        public function get_language() {}
        /**
         * Get the start time
         *
         * @return string|null Time in the format 'hh:mm:ss.SSS'
         */
        public function get_starttime() {}
        /**
         * Get the text of the caption
         *
         * @return string|null
         */
        public function get_text() {}
        /**
         * Get the content type (not MIME type)
         *
         * @return string|null Either 'text' or 'html'
         */
        public function get_type() {}
    }

    /**
     * Miscellanous utilities
     *
     * @package SimplePie
     */
    class SimplePie_Misc {
        public static function time_hms($seconds) {}
        public static function absolutize_url($relative, $base) {}
        public static function get_element($realname, $string) {}
        public static function element_implode($element) {}
        public static function error($message, $level, $file, $line) {}
        public static function fix_protocol($url, $http = 1) {}
        public static function parse_url($url) {}
        public static function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '') {}
        public static function normalize_url($url) {}
        public static function percent_encoding_normalization($match) {}
        public static function windows_1252_to_utf8($string) {}
        public static function change_encoding($data, $input, $output) {}
        protected static function change_encoding_mbstring($data, $input, $output) {}
        protected static function change_encoding_iconv($data, $input, $output) {}
        public static function encoding($charset) {}
        public static function get_curl_version() {}
        public static function strip_comments($data) {}
        public static function parse_date($dt) {}
        public static function entities_decode($data) {}
        public static function uncomment_rfc822($string) {}
        public static function parse_mime($mime) {}
        public static function atom_03_construct_type($attribs) {}
        public static function atom_10_construct_type($attribs) {}
        public static function atom_10_content_construct_type($attribs) {}
        public static function is_isegment_nz_nc($string) {}
        public static function space_seperated_tokens($string) {}
        public static function codepoint_to_utf8($codepoint) {}
        public static function parse_str($str) {}
        public static function xml_encoding($data, $registry) {}
        public static function output_javascript() {}
        /**
         * Get the SimplePie build timestamp
         *
         * Uses the git index if it exists, otherwise uses the modification time
         * of the newest file.
         */
        public static function get_build() {}
        public static function debug($sp) {}
        public static function silence_errors($num, $str) {}
    }

    /**
     * Handles `<media:rating>` or `<itunes:explicit>` tags as defined in Media RSS and iTunes RSS respectively
     *
     * Used by {@see SimplePie_Enclosure::get_rating()} and {@see SimplePie_Enclosure::get_ratings()}
     *
     * This class can be overloaded with {@see SimplePie::set_rating_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Rating {
        /**
         * Rating scheme
         *
         * @var string
         * @see get_scheme()
         */
        public $scheme;
        /**
         * Rating value
         *
         * @var string
         * @see get_value()
         */
        public $value;

        public function __construct($scheme = null, $value = null) {}
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Get the organizational scheme for the rating
         *
         * @return string|null
         */
        public function get_scheme() {}
        /**
         * Get the value of the rating
         *
         * @return string|null
         */
        public function get_value() {}
    }

    /**
     * SimplePie class.
     *
     * Class for backward compatibility.
     *
     * @deprecated Use {@see SimplePie} directly
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Core extends \simplepie {}

    /**
     * Decode 'gzip' encoded HTTP data
     *
     * @package SimplePie
     * @subpackage HTTP
     * @link http://www.gzip.org/format.txt
     */
    class SimplePie_gzdecode {
        /**
         * Compressed data
         *
         * @access private
         * @var string
         * @see gzdecode::$data
         */
        public $compressed_data;
        /**
         * Size of compressed data
         *
         * @access private
         * @var int
         */
        public $compressed_size;
        /**
         * Minimum size of a valid gzip string
         *
         * @access private
         * @var int
         */
        public $min_compressed_size;
        /**
         * Current position of pointer
         *
         * @access private
         * @var int
         */
        public $position;
        /**
         * Flags (FLG)
         *
         * @access private
         * @var int
         */
        public $flags;
        /**
         * Uncompressed data
         *
         * @access public
         * @see gzdecode::$compressed_data
         * @var string
         */
        public $data;
        /**
         * Modified time
         *
         * @access public
         * @var int
         */
        public $MTIME;
        /**
         * Extra Flags
         *
         * @access public
         * @var int
         */
        public $XFL;
        /**
         * Operating System
         *
         * @access public
         * @var int
         */
        public $OS;
        /**
         * Subfield ID 1
         *
         * @access public
         * @see gzdecode::$extra_field
         * @see gzdecode::$SI2
         * @var string
         */
        public $SI1;
        /**
         * Subfield ID 2
         *
         * @access public
         * @see gzdecode::$extra_field
         * @see gzdecode::$SI1
         * @var string
         */
        public $SI2;
        /**
         * Extra field content
         *
         * @access public
         * @see gzdecode::$SI1
         * @see gzdecode::$SI2
         * @var string
         */
        public $extra_field;
        /**
         * Original filename
         *
         * @access public
         * @var string
         */
        public $filename;
        /**
         * Human readable comment
         *
         * @access public
         * @var string
         */
        public $comment;

        public function __set($name, $value) {}
        public function __construct($data) {}
        /**
         * Decode the GZIP stream
         *
         * @return bool Successfulness
         */
        public function parse() {}
    }

    /**
     * Class to validate and to work with IPv6 addresses.
     *
     * @package SimplePie
     * @subpackage HTTP
     * @copyright 2003-2005 The PHP Group
     * @license http://www.opensource.org/licenses/bsd-license.php
     * @link http://pear.php.net/package/Net_IPv6
     * @author Alexander Merz <alexander.merz@web.de>
     * @author elfrink at introweb dot nl
     * @author Josh Peck <jmp at joshpeck dot org>
     * @author Geoffrey Sneddon <geoffers@gmail.com>
     */
    class SimplePie_Net_IPv6 {
        public static function uncompress($ip) {}
        public static function compress($ip) {}
        private static function split_v6_v4($ip) {}
        public static function check_ipv6($ip) {}
        public static function checkIPv6($ip) {}
    }

    /**
     * Caches data to memcache
     *
     * Registered for URLs with the "memcache" protocol
     *
     * For example, `memcache://localhost:11211/?timeout=3600&prefix=sp_` will
     * connect to memcache on `localhost` on port 11211. All tables will be
     * prefixed with `sp_` and data will expire after 3600 seconds
     *
     * @package SimplePie
     * @subpackage Caching
     * @uses Memcache
     */
    class SimplePie_Cache_Memcache implements \simplepie_cache_base {
        /**
         * Memcache instance
         *
         * @var Memcache
         */
        protected $cache;
        /**
         * Options
         *
         * @var array
         */
        protected $options;
        /**
         * Cache name
         *
         * @var string
         */
        protected $name;

        public function __construct($location, $name, $type) {}
        public function save($data) {}
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        public function load() {}
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        public function mtime() {}
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        public function touch() {}
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        public function unlink() {}
    }

    /**
     * Caches data to the filesystem
     *
     * @package SimplePie
     * @subpackage Caching
     */
    class SimplePie_Cache_File implements \simplepie_cache_base {
        /**
         * Location string
         *
         * @see SimplePie::$cache_location
         * @var string
         */
        protected $location;
        /**
         * Filename
         *
         * @var string
         */
        protected $filename;
        /**
         * File extension
         *
         * @var string
         */
        protected $extension;
        /**
         * File path
         *
         * @var string
         */
        protected $name;

        public function __construct($location, $name, $type) {}
        public function save($data) {}
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        public function load() {}
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        public function mtime() {}
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        public function touch() {}
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        public function unlink() {}
    }

    /**
     * Base class for database-based caches
     *
     * @package SimplePie
     * @subpackage Caching
     */
    abstract class SimplePie_Cache_DB implements \simplepie_cache_base {
        protected static function prepare_simplepie_object_for_cache($data) {}
    }

    /**
     * Caches data to a MySQL database
     *
     * Registered for URLs with the "mysql" protocol
     *
     * For example, `mysql://root:password@localhost:3306/mydb?prefix=sp_` will
     * connect to the `mydb` database on `localhost` on port 3306, with the user
     * `root` and the password `password`. All tables will be prefixed with `sp_`
     *
     * @package SimplePie
     * @subpackage Caching
     */
    class SimplePie_Cache_MySQL extends \simplepie_cache_db {
        /**
         * PDO instance
         *
         * @var PDO
         */
        protected $mysql;
        /**
         * Options
         *
         * @var array
         */
        protected $options;
        /**
         * Cache ID
         *
         * @var string
         */
        protected $id;

        public function __construct($location, $name, $type) {}
        public function save($data) {}
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        public function load() {}
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        public function mtime() {}
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        public function touch() {}
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        public function unlink() {}
    }

    /**
     * Date Parser
     *
     * @package SimplePie
     * @subpackage Parsing
     */
    class SimplePie_Parse_Date {
        /**
         * Input data
         *
         * @access protected
         * @var string
         */
        public $date;
        /**
         * List of days, calendar day name => ordinal day number in the week
         *
         * @access protected
         * @var array
         */
        public $day;
        /**
         * List of months, calendar month name => calendar month number
         *
         * @access protected
         * @var array
         */
        public $month;
        /**
         * List of timezones, abbreviation => offset from UTC
         *
         * @access protected
         * @var array
         */
        public $timezone;
        /**
         * Cached PCRE for SimplePie_Parse_Date::$day
         *
         * @access protected
         * @var string
         */
        public $day_pcre;
        /**
         * Cached PCRE for SimplePie_Parse_Date::$month
         *
         * @access protected
         * @var string
         */
        public $month_pcre;
        /**
         * Array of user-added callback methods
         *
         * @access private
         * @var array
         */
        public $built_in;
        /**
         * Array of user-added callback methods
         *
         * @access private
         * @var array
         */
        public $user;

        /**
         * Create new SimplePie_Parse_Date object, and set self::day_pcre,
         * self::month_pcre, and self::built_in
         *
         * @access private
         */
        public function __construct() {}
        /**
         * Get the object
         *
         * @access public
         */
        public static function get() {}
        public function parse($date) {}
        public function add_callback($callback) {}
        public function date_w3cdtf($date) {}
        public function remove_rfc2822_comments($string) {}
        public function date_rfc2822($date) {}
        public function date_rfc850($date) {}
        public function date_asctime($date) {}
        public function date_strtotime($date) {}
    }

    /**
     * Content-type sniffing
     *
     * Based on the rules in http://tools.ietf.org/html/draft-abarth-mime-sniff-06
     *
     * This is used since we can't always trust Content-Type headers, and is based
     * upon the HTML5 parsing rules.
     *
     *
     * This class can be overloaded with {@see SimplePie::set_content_type_sniffer_class()}
     *
     * @package SimplePie
     * @subpackage HTTP
     */
    class SimplePie_Content_Type_Sniffer {
        /**
         * File object
         *
         * @var SimplePie_File
         */
        public $file;

        public function __construct($file) {}
        /**
         * Get the Content-Type of the specified file
         *
         * @return string Actual Content-Type
         */
        public function get_type() {}
        /**
         * Sniff text or binary
         *
         * @return string Actual Content-Type
         */
        public function text_or_binary() {}
        /**
         * Sniff unknown
         *
         * @return string Actual Content-Type
         */
        public function unknown() {}
        /**
         * Sniff images
         *
         * @return string Actual Content-Type
         */
        public function image() {}
        /**
         * Sniff HTML
         *
         * @return string Actual Content-Type
         */
        public function feed_or_html() {}
    }

    /**
     * Parses the XML Declaration
     *
     * @package SimplePie
     * @subpackage Parsing
     */
    class SimplePie_XML_Declaration_Parser {
        /**
         * XML Version
         *
         * @access public
         * @var string
         */
        public $version;
        /**
         * Encoding
         *
         * @access public
         * @var string
         */
        public $encoding;
        /**
         * Standalone
         *
         * @access public
         * @var bool
         */
        public $standalone;
        /**
         * Current state of the state machine
         *
         * @access private
         * @var string
         */
        public $state;
        /**
         * Input data
         *
         * @access private
         * @var string
         */
        public $data;
        /**
         * Input data length (to avoid calling strlen() everytime this is needed)
         *
         * @access private
         * @var int
         */
        public $data_length;
        /**
         * Current position of the pointer
         *
         * @var int
         * @access private
         */
        public $position;

        public function __construct($data) {}
        /**
         * Parse the input data
         *
         * @access public
         * @return bool true on success, false on failure
         */
        public function parse() {}
        /**
         * Check whether there is data beyond the pointer
         *
         * @access private
         * @return bool true if there is further data, false if not
         */
        public function has_data() {}
        /**
         * Advance past any whitespace
         *
         * @return int Number of whitespace characters passed
         */
        public function skip_whitespace() {}
        /**
         * Read value
         */
        public function get_value() {}
        public function before_version_name() {}
        public function version_name() {}
        public function version_equals() {}
        public function version_value() {}
        public function encoding_name() {}
        public function encoding_equals() {}
        public function encoding_value() {}
        public function standalone_name() {}
        public function standalone_equals() {}
        public function standalone_value() {}
    }

    /**
     * Decode HTML Entities
     *
     * This implements HTML5 as of revision 967 (2007-06-28)
     *
     * @deprecated Use DOMDocument instead!
     * @package SimplePie
     */
    class SimplePie_Decode_HTML_Entities {
        /**
         * Data to be parsed
         *
         * @access private
         * @var string
         */
        public $data;
        /**
         * Currently consumed bytes
         *
         * @access private
         * @var string
         */
        public $consumed;
        /**
         * Position of the current byte being parsed
         *
         * @access private
         * @var int
         */
        public $position;

        public function __construct($data) {}
        /**
         * Parse the input data
         *
         * @access public
         * @return string Output data
         */
        public function parse() {}
        /**
         * Consume the next byte
         *
         * @access private
         * @return mixed The next byte, or false, if there is no more data
         */
        public function consume() {}
        public function consume_range($chars) {}
        /**
         * Unconsume one byte
         *
         * @access private
         */
        public function unconsume() {}
        /**
         * Decode an entity
         *
         * @access private
         */
        public function entity() {}
    }

    /**
     * HTTP Response Parser
     *
     * @package SimplePie
     * @subpackage HTTP
     */
    class SimplePie_HTTP_Parser {
        /**
         * HTTP Version
         *
         * @var float
         */
        public $http_version;
        /**
         * Status code
         *
         * @var int
         */
        public $status_code;
        /**
         * Reason phrase
         *
         * @var string
         */
        public $reason;
        /**
         * Key/value pairs of the headers
         *
         * @var array
         */
        public $headers;
        /**
         * Body of the response
         *
         * @var string
         */
        public $body;
        /**
         * Current state of the state machine
         *
         * @var string
         */
        protected $state;
        /**
         * Input data
         *
         * @var string
         */
        protected $data;
        /**
         * Input data length (to avoid calling strlen() everytime this is needed)
         *
         * @var int
         */
        protected $data_length;
        /**
         * Current position of the pointer
         *
         * @var int
         */
        protected $position;
        /**
         * Name of the hedaer currently being parsed
         *
         * @var string
         */
        protected $name;
        /**
         * Value of the hedaer currently being parsed
         *
         * @var string
         */
        protected $value;

        public function __construct($data) {}
        /**
         * Parse the input data
         *
         * @return bool true on success, false on failure
         */
        public function parse() {}
        /**
         * Check whether there is data beyond the pointer
         *
         * @return bool true if there is further data, false if not
         */
        protected function has_data() {}
        /**
         * See if the next character is LWS
         *
         * @return bool true if the next character is LWS, false if not
         */
        protected function is_linear_whitespace() {}
        /**
         * Parse the HTTP version
         */
        protected function http_version() {}
        /**
         * Parse the status code
         */
        protected function status() {}
        /**
         * Parse the reason phrase
         */
        protected function reason() {}
        /**
         * Deal with a new line, shifting data around as needed
         */
        protected function new_line() {}
        /**
         * Parse a header name
         */
        protected function name() {}
        /**
         * Parse LWS, replacing consecutive LWS characters with a single space
         */
        protected function linear_whitespace() {}
        /**
         * See what state to move to while within non-quoted header values
         */
        protected function value() {}
        /**
         * Parse a header value while outside quotes
         */
        protected function value_char() {}
        /**
         * See what state to move to while within quoted header values
         */
        protected function quote() {}
        /**
         * Parse a header value while within quotes
         */
        protected function quote_char() {}
        /**
         * Parse an escaped character within quotes
         */
        protected function quote_escaped() {}
        /**
         * Parse the body
         */
        protected function body() {}
        /**
         * Parsed a "Transfer-Encoding: chunked" body
         */
        protected function chunked() {}
    }

    /**
     * Random_* Compatibility Library 
     * for using the new PHP 7 random_* API in PHP 5 projects
     * 
     * The MIT License (MIT)
     *
     * Copyright (c) 2015 - 2017 Paragon Initiative Enterprises
     * 
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     * 
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     * 
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    if (!class_exists('\Error')) {
        class Error extends \exception {}
    }
    if (!class_exists('\TypeError')) {
        class TypeError extends \exception {}
    }
    /**
     * Handles adding and dispatching events
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_Hooks implements \requests_hooker {
        /**
         * Registered callbacks for each hook
         *
         * @var array
         */
        protected $hooks;

        /**
         * Constructor
         */
        public function __construct() {}
        public function register($hook, $callback, $priority = 0) {}
        public function dispatch($hook, $parameters = array( )) {}
    }

    /**
     * Class to validate and to work with IPv6 addresses
     *
     * This was originally based on the PEAR class of the same name, but has been
     * entirely rewritten.
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_IPv6 {
        public static function uncompress($ip) {}
        public static function compress($ip) {}
        protected static function split_v6_v4($ip) {}
        public static function check_ipv6($ip) {}
    }

    /**
     * HTTP response class
     *
     * Contains a response from Requests::request()
     * @package Requests
     */
    class Requests_Response {
        /**
         * Response body
         *
         * @var string
         */
        public $body;
        /**
         * Raw HTTP data from the transport
         *
         * @var string
         */
        public $raw;
        /**
         * Headers, as an associative array
         *
         * @var Requests_Response_Headers Array-like object representing headers
         */
        public $headers;
        /**
         * Status code, false if non-blocking
         *
         * @var integer|boolean
         */
        public $status_code;
        /**
         * Protocol version, false if non-blocking
         * @var float|boolean
         */
        public $protocol_version;
        /**
         * Whether the request succeeded or not
         *
         * @var boolean
         */
        public $success;
        /**
         * Number of redirects the request used
         *
         * @var integer
         */
        public $redirects;
        /**
         * URL requested
         *
         * @var string
         */
        public $url;
        /**
         * Previous requests (from redirects)
         *
         * @var array Array of Requests_Response objects
         */
        public $history;
        /**
         * Cookies from the request
         *
         * @var Requests_Cookie_Jar Array-like object representing a cookie jar
         */
        public $cookies;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Is the response a redirect?
         *
         * @return boolean True if redirect (3xx status), false if not.
         */
        public function is_redirect() {}
        public function throw_for_status($allow_redirects = true) {}
    }

    /**
     * Session handler for persistent requests and default parameters
     *
     * Allows various options to be set as default values, and merges both the
     * options and URL properties together. A base URL can be set for all requests,
     * with all subrequests resolved from this. Base options can be set (including
     * a shared cookie jar), then overridden for individual requests.
     *
     * @package Requests
     * @subpackage Session Handler
     */
    class Requests_Session {
        /**
         * Base URL for requests
         *
         * URLs will be made absolute using this as the base
         * @var string|null
         */
        public $url;
        /**
         * Base headers for requests
         * @var array
         */
        public $headers;
        /**
         * Base data for requests
         *
         * If both the base data and the per-request data are arrays, the data will
         * be merged before sending the request.
         *
         * @var array
         */
        public $data;
        /**
         * Base options for requests
         *
         * The base options are merged with the per-request data for each request.
         * The only default option is a shared cookie jar between requests.
         *
         * Values here can also be set directly via properties on the Session
         * object, e.g. `$session->useragent = 'X';`
         *
         * @var array
         */
        public $options;

        public function __construct($url = null, $headers = array( ), $data = array( ), $options = array( )) {}
        public function __get($key) {}
        public function __set($key, $value) {}
        public function __isset($key) {}
        public function __unset($key) {}
        public function get($url, $headers = array( ), $options = array( )) {}
        public function head($url, $headers = array( ), $options = array( )) {}
        public function delete($url, $headers = array( ), $options = array( )) {}
        public function post($url, $headers = array( ), $data = array( ), $options = array( )) {}
        public function put($url, $headers = array( ), $data = array( ), $options = array( )) {}
        public function patch($url, $headers, $data = array( ), $options = array( )) {}
        public function request($url, $headers = array( ), $data = array( ), $type = Requests::GET, $options = array( )) {}
        public function request_multiple($requests, $options = array( )) {}
        protected function merge_request($request, $merge_options = true) {}
    }

    /**
     * Cookie storage object
     *
     * @package Requests
     * @subpackage Cookies
     */
    class Requests_Cookie {
        /**
         * Cookie name.
         *
         * @var string
         */
        public $name;
        /**
         * Cookie value.
         *
         * @var string
         */
        public $value;
        /**
         * Cookie attributes
         *
         * Valid keys are (currently) path, domain, expires, max-age, secure and
         * httponly.
         *
         * @var Requests_Utility_CaseInsensitiveDictionary|array Array-like object
         */
        public $attributes;
        /**
         * Cookie flags
         *
         * Valid keys are (currently) creation, last-access, persistent and
         * host-only.
         *
         * @var array
         */
        public $flags;
        /**
         * Reference time for relative calculations
         *
         * This is used in place of `time()` when calculating Max-Age expiration and
         * checking time validity.
         *
         * @var int
         */
        public $reference_time;

        public function __construct($name, $value, $attributes = array( ), $flags = array( ), $reference_time = null) {}
        /**
         * Check if a cookie is expired.
         *
         * Checks the age against $this->reference_time to determine if the cookie
         * is expired.
         *
         * @return boolean True if expired, false if time is valid.
         */
        public function is_expired() {}
        public function uri_matches(Requests_IRI $uri) {}
        public function domain_matches($string) {}
        public function path_matches($request_path) {}
        /**
         * Normalize cookie and attributes
         *
         * @return boolean Whether the cookie was successfully normalized
         */
        public function normalize() {}
        protected function normalize_attribute($name, $value) {}
        /**
         * Format a cookie for a Cookie header
         *
         * This is used when sending cookies to a server.
         *
         * @return string Cookie formatted for Cookie header
         */
        public function format_for_header() {}
        /**
         * Format a cookie for a Cookie header
         *
         * @codeCoverageIgnore
         * @deprecated Use {@see Requests_Cookie::format_for_header}
         * @return string
         */
        public function formatForHeader() {}
        /**
         * Format a cookie for a Set-Cookie header
         *
         * This is used when sending cookies to clients. This isn't really
         * applicable to client-side usage, but might be handy for debugging.
         *
         * @return string Cookie formatted for Set-Cookie header
         */
        public function format_for_set_cookie() {}
        /**
         * Format a cookie for a Set-Cookie header
         *
         * @codeCoverageIgnore
         * @deprecated Use {@see Requests_Cookie::format_for_set_cookie}
         * @return string
         */
        public function formatForSetCookie() {}
        /**
         * Get the cookie value
         *
         * Attributes and other data can be accessed via methods.
         */
        public function __toString() {}
        public static function parse($string, $name = '', $reference_time = null) {}
        public static function parse_from_headers(Requests_Response_Headers $headers, Requests_IRI $origin = null, $time = null) {}
        public static function parseFromHeaders(Requests_Response_Headers $headers) {}
    }

    /**
     * SSL utilities for Requests
     *
     * Collection of utilities for working with and verifying SSL certificates.
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_SSL {
        public static function verify_certificate($host, $cert) {}
        public static function verify_reference_name($reference) {}
        public static function match_domain($host, $reference) {}
    }

    /**
     * IDNA URL encoder
     *
     * Note: Not fully compliant, as nameprep does nothing yet.
     *
     * @package Requests
     * @subpackage Utilities
     * @see https://tools.ietf.org/html/rfc3490 IDNA specification
     * @see https://tools.ietf.org/html/rfc3492 Punycode/Bootstrap specification
     */
    class Requests_IDNAEncoder {
        const BOOTSTRAP_TMIN = 1;
        const BOOTSTRAP_BASE = 36;
        const BOOTSTRAP_SKEW = 38;
        const BOOTSTRAP_TMAX = 26;
        const ACE_PREFIX = 'xn--';
        const BOOTSTRAP_DAMP = 700;
        const BOOTSTRAP_INITIAL_BIAS = 72;
        const BOOTSTRAP_INITIAL_N = 128;

        public static function encode($string) {}
        public static function to_ascii($string) {}
        protected static function is_ascii($string) {}
        protected static function nameprep($string) {}
        protected static function utf8_to_codepoints($input) {}
        public static function punycode_encode($input) {}
        protected static function digit_to_char($digit) {}
        protected static function adapt($delta, $numpoints, $firsttime) {}
    }

    /**
     * IRI parser/serialiser/normaliser
     *
     * Copyright (c) 2007-2010, Geoffrey Sneddon and Steve Minutillo.
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     *  * Redistributions of source code must retain the above copyright notice,
     *       this list of conditions and the following disclaimer.
     *
     *  * Redistributions in binary form must reproduce the above copyright notice,
     *       this list of conditions and the following disclaimer in the documentation
     *       and/or other materials provided with the distribution.
     *
     *  * Neither the name of the SimplePie Team nor the names of its contributors
     *       may be used to endorse or promote products derived from this software
     *       without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package Requests
     * @subpackage Utilities
     * @author Geoffrey Sneddon
     * @author Steve Minutillo
     * @copyright 2007-2009 Geoffrey Sneddon and Steve Minutillo
     * @license http://www.opensource.org/licenses/bsd-license.php
     * @link http://hg.gsnedders.com/iri/
     *
     * @property string $iri IRI we're working with
     * @property-read string $uri IRI in URI form, {@see to_uri}
     * @property string $scheme Scheme part of the IRI
     * @property string $authority Authority part, formatted for a URI (userinfo + host + port)
     * @property string $iauthority Authority part of the IRI (userinfo + host + port)
     * @property string $userinfo Userinfo part, formatted for a URI (after '://' and before '@')
     * @property string $iuserinfo Userinfo part of the IRI (after '://' and before '@')
     * @property string $host Host part, formatted for a URI
     * @property string $ihost Host part of the IRI
     * @property string $port Port part of the IRI (after ':')
     * @property string $path Path part, formatted for a URI (after first '/')
     * @property string $ipath Path part of the IRI (after first '/')
     * @property string $query Query part, formatted for a URI (after '?')
     * @property string $iquery Query part of the IRI (after '?')
     * @property string $fragment Fragment, formatted for a URI (after '#')
     * @property string $ifragment Fragment part of the IRI (after '#')
     */
    class Requests_IRI {
        /**
         * Scheme
         *
         * @var string
         */
        protected $scheme;
        /**
         * User Information
         *
         * @var string
         */
        protected $iuserinfo;
        /**
         * ihost
         *
         * @var string
         */
        protected $ihost;
        /**
         * Port
         *
         * @var string
         */
        protected $port;
        /**
         * ipath
         *
         * @var string
         */
        protected $ipath;
        /**
         * iquery
         *
         * @var string
         */
        protected $iquery;
        /**
         * ifragment
         *
         * @var string
         */
        protected $ifragment;
        /**
         * Normalization database
         *
         * Each key is the scheme, each value is an array with each key as the IRI
         * part and value as the default value for that part.
         */
        protected $normalization;

        /**
         * Return the entire IRI when you try and read the object as a string
         *
         * @return string
         */
        public function __toString() {}
        public function __set($name, $value) {}
        public function __get($name) {}
        public function __isset($name) {}
        public function __unset($name) {}
        public function __construct($iri = null) {}
        public static function absolutize($base, $relative) {}
        protected function parse_iri($iri) {}
        protected function remove_dot_segments($input) {}
        protected function replace_invalid_with_pct_encoding($string, $extra_chars, $iprivate = false) {}
        protected function remove_iunreserved_percent_encoded($match) {}
        protected function scheme_normalization() {}
        /**
         * Check if the object represents a valid IRI. This needs to be done on each
         * call as some things change depending on another part of the IRI.
         *
         * @return bool
         */
        public function is_valid() {}
        protected function set_iri($iri) {}
        protected function set_scheme($scheme) {}
        protected function set_authority($authority) {}
        protected function set_userinfo($iuserinfo) {}
        protected function set_host($ihost) {}
        protected function set_port($port) {}
        protected function set_path($ipath) {}
        protected function set_query($iquery) {}
        protected function set_fragment($ifragment) {}
        protected function to_uri($string) {}
        /**
         * Get the complete IRI
         *
         * @return string
         */
        protected function get_iri() {}
        /**
         * Get the complete URI
         *
         * @return string
         */
        protected function get_uri() {}
        /**
         * Get the complete iauthority
         *
         * @return string
         */
        protected function get_iauthority() {}
        /**
         * Get the complete authority
         *
         * @return string
         */
        protected function get_authority() {}
    }

    /**
     * Exception for HTTP requests
     *
     * @package Requests
     */
    class Requests_Exception extends \exception {
        /**
         * Type of exception
         *
         * @var string
         */
        protected $type;
        /**
         * Data associated with the exception
         *
         * @var mixed
         */
        protected $data;

        public function __construct($message, $type, $data = null, $code = 0) {}
        /**
         * Like {@see getCode()}, but a string code.
         *
         * @codeCoverageIgnore
         * @return string
         */
        public function getType() {}
        /**
         * Gives any relevant data
         *
         * @codeCoverageIgnore
         * @return mixed
         */
        public function getData() {}
    }

    /**
     * fsockopen HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    class Requests_Transport_fsockopen implements \requests_transport {
        const SECOND_IN_MICROSECONDS = 1000000;

        /**
         * Raw HTTP data
         *
         * @var string
         */
        public $headers;
        /**
         * Stream metadata
         *
         * @var array Associative array of properties, see {@see https://secure.php.net/stream_get_meta_data}
         */
        public $info;
        /**
         * What's the maximum number of bytes we should keep?
         *
         * @var int|bool Byte count, or false if no limit.
         */
        protected $max_bytes;
        protected $connect_error;

        public function request($url, $headers = array( ), $data = array( ), $options = array( )) {}
        public function request_multiple($requests, $options) {}
        /**
         * Retrieve the encodings we can accept
         *
         * @return string Accept-Encoding header value
         */
        protected static function accept_encoding() {}
        protected static function format_get($url_parts, $data) {}
        public function connect_error_handler($errno, $errstr) {}
        public function verify_certificate_from_context($host, $context) {}
        public static function test($capabilities = array( )) {}
    }

    /**
     * cURL HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    class Requests_Transport_cURL implements \requests_transport {
        const CURL_7_10_5 = 0x070A05;
        const CURL_7_16_2 = 0x071002;

        /**
         * Raw HTTP data
         *
         * @var string
         */
        public $headers;
        /**
         * Raw body data
         *
         * @var string
         */
        public $response_data;
        /**
         * Information on the current request
         *
         * @var array cURL information array, see {@see https://secure.php.net/curl_getinfo}
         */
        public $info;
        /**
         * Version string
         *
         * @var long
         */
        public $version;
        /**
         * cURL handle
         *
         * @var resource
         */
        protected $handle;
        /**
         * Hook dispatcher instance
         *
         * @var Requests_Hooks
         */
        protected $hooks;
        /**
         * Have we finished the headers yet?
         *
         * @var boolean
         */
        protected $done_headers;
        /**
         * If streaming to a file, keep the file pointer
         *
         * @var resource
         */
        protected $stream_handle;
        /**
         * How many bytes are in the response body?
         *
         * @var int
         */
        protected $response_bytes;
        /**
         * What's the maximum number of bytes we should keep?
         *
         * @var int|bool Byte count, or false if no limit.
         */
        protected $response_byte_limit;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Destructor
         */
        public function __destruct() {}
        public function request($url, $headers = array( ), $data = array( ), $options = array( )) {}
        public function request_multiple($requests, $options) {}
        public function &get_subrequest_handle($url, $headers, $data, $options) {}
        protected function setup_handle($url, $headers, $data, $options) {}
        public function process_response($response, $options) {}
        public function stream_headers($handle, $headers) {}
        public function stream_body($handle, $data) {}
        protected static function format_get($url, $data) {}
        public static function test($capabilities = array( )) {}
    }

    /**
     * Case-insensitive dictionary, suitable for HTTP headers
     *
     * @package Requests
     */
    class Requests_Response_Headers extends \requests_utility_caseinsensitivedictionary {
        public function offsetGet($key) {}
        public function offsetSet($key, $value) {}
        public function getValues($key) {}
        public function flatten($value) {}
        /**
         * Get an iterator for the data
         *
         * Converts the internal
         * @return ArrayIterator
         */
        public function getIterator() {}
    }

    /**
     * HTTP Proxy connection interface
     *
     * Provides a handler for connection via an HTTP proxy
     *
     * @package Requests
     * @subpackage Proxy
     * @since 1.6
     */
    class Requests_Proxy_HTTP implements \requests_proxy {
        /**
         * Proxy host and port
         *
         * Notation: "host:port" (eg 127.0.0.1:8080 or someproxy.com:3128)
         *
         * @var string
         */
        public $proxy;
        /**
         * Username
         *
         * @var string
         */
        public $user;
        /**
         * Password
         *
         * @var string
         */
        public $pass;
        /**
         * Do we need to authenticate? (ie username & password have been provided)
         *
         * @var boolean
         */
        public $use_authentication;

        public function __construct($args = null) {}
        public function register(Requests_Hooks $hooks) {}
        public function curl_before_send($handle) {}
        public function fsockopen_remote_socket($remote_socket) {}
        public function fsockopen_remote_host_path($path, $url) {}
        public function fsockopen_header($out) {}
        /**
         * Get the authentication string (user:pass)
         *
         * @since 1.6
         * @return string
         */
        public function get_auth_string() {}
    }

    /**
     * Basic Authentication provider
     *
     * Provides a handler for Basic HTTP authentication via the Authorization
     * header.
     *
     * @package Requests
     * @subpackage Authentication
     */
    class Requests_Auth_Basic implements \requests_auth {
        /**
         * Username
         *
         * @var string
         */
        public $user;
        /**
         * Password
         *
         * @var string
         */
        public $pass;

        public function __construct($args = null) {}
        public function register(Requests_Hooks $hooks) {}
        public function curl_before_send($handle) {}
        public function fsockopen_header($out) {}
        /**
         * Get the authentication string (user:pass)
         *
         * @return string
         */
        public function getAuthString() {}
    }

    /**
     * Cookie holder object
     *
     * @package Requests
     * @subpackage Cookies
     */
    class Requests_Cookie_Jar implements \arrayaccess, \iteratoraggregate {
        /**
         * Actual item data
         *
         * @var array
         */
        protected $cookies;

        public function __construct($cookies = array( )) {}
        public function normalize_cookie($cookie, $key = null) {}
        public function normalizeCookie($cookie, $key = null) {}
        public function offsetExists($key) {}
        public function offsetGet($key) {}
        public function offsetSet($key, $value) {}
        public function offsetUnset($key) {}
        /**
         * Get an iterator for the data
         *
         * @return ArrayIterator
         */
        public function getIterator() {}
        public function register(Requests_Hooker $hooks) {}
        public function before_request($url, $headers, $data, $type, $options) {}
        public function before_redirect_check(Requests_Response $return) {}
    }

    /**
     * Exception based on HTTP response
     *
     * @package Requests
     */
    class Requests_Exception_HTTP extends \requests_exception {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

        public function __construct($reason = null, $data = null) {}
        /**
         * Get the status message
         */
        public function getReason() {}
        public static function get_class($code) {}
    }

    class Requests_Exception_Transport extends \requests_exception {}

    class Requests_Exception_Transport_cURL extends \requests_exception_transport {
        const MULTI = 'cURLMulti';
        const SHARE = 'cURLShare';
        const EASY = 'cURLEasy';

        /**
         * cURL error code
         *
         * @var integer
         */
        protected $code;
        /**
         * Which type of cURL error
         *
         * EASY|MULTI|SHARE
         *
         * @var string
         */
        protected $type;
        /**
         * Clear text error message
         *
         * @var string
         */
        protected $reason;

        public function __construct($message, $type, $data = null, $code = 0) {}
        /**
         * Get the error message
         */
        public function getReason() {}
    }

    /**
     * Exception for 406 Not Acceptable responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_406 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 412 Precondition Failed responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_412 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 413 Request Entity Too Large responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_413 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 407 Proxy Authentication Required responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_407 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 411 Length Required responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_411 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 405 Method Not Allowed responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_405 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 404 Not Found responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_404 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 410 Gone responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_410 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 428 Precondition Required responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    class Requests_Exception_HTTP_428 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 414 Request-URI Too Large responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_414 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 400 Bad Request responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_400 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 401 Unauthorized responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_401 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 415 Unsupported Media Type responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_415 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 429 Too Many Requests responses
     *
     * @see https://tools.ietf.org/html/draft-nottingham-http-new-status-04
     * @package Requests
     */
    class Requests_Exception_HTTP_429 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 403 Forbidden responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_403 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 417 Expectation Failed responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_417 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 416 Requested Range Not Satisfiable responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_416 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 402 Payment Required responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_402 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 511 Network Authentication Required responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    class Requests_Exception_HTTP_511 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 505 HTTP Version Not Supported responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_505 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 504 Gateway Timeout responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_504 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for unknown status responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_Unknown extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer|bool Code if available, false if an error occurred
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

        public function __construct($reason = null, $data = null) {}
    }

    /**
     * Exception for 503 Service Unavailable responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_503 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 305 Use Proxy responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_305 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 304 Not Modified responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_304 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 502 Bad Gateway responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_502 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 500 Internal Server Error responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_500 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 306 Switch Proxy responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_306 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 501 Not Implemented responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_501 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 418 I'm A Teapot responses
     *
     * @see https://tools.ietf.org/html/rfc2324
     * @package Requests
     */
    class Requests_Exception_HTTP_418 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 431 Request Header Fields Too Large responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    class Requests_Exception_HTTP_431 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 409 Conflict responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_409 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Exception for 408 Request Timeout responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_408 extends \requests_exception_http {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason;

    }

    /**
     * Case-insensitive dictionary, suitable for HTTP headers
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_Utility_CaseInsensitiveDictionary implements \iteratoraggregate, \arrayaccess {
        /**
         * Actual item data
         *
         * @var array
         */
        protected $data;

        public function __construct(array $data = array( )) {}
        public function offsetExists($key) {}
        public function offsetGet($key) {}
        public function offsetSet($key, $value) {}
        public function offsetUnset($key) {}
        /**
         * Get an iterator for the data
         *
         * @return ArrayIterator
         */
        public function getIterator() {}
        /**
         * Get the headers as an array
         *
         * @return array Header data
         */
        public function getAll() {}
    }

    /**
     * Iterator for arrays requiring filtered values
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_Utility_FilteredIterator extends \arrayiterator {
        /**
         * Callback to run as a filter
         *
         * @var callable
         */
        protected $callback;

        public function __construct($data, $callback) {}
        /**
         * Get the current item's value after filtering
         *
         * @return string
         */
        public function current() {}
    }

    /**
     * Routines for working with PO files
     */
    class PO extends \gettext_translations {
        public $comments_before_headers;

        /**
         * Exports headers to a PO entry
         *
         * @return string msgid/msgstr PO entry for this PO file headers, doesn't contain newline at the end
         */
        function export_headers() {}
        /**
         * Exports all entries to PO format
         *
         * @return string sequence of mgsgid/msgstr PO strings, doesn't containt newline at the end
         */
        function export_entries() {}
        function export($include_headers = true) {}
        function export_to_file($filename, $include_headers = true) {}
        function set_comment_before_headers($text) {}
        public static function poify($string) {}
        public static function unpoify($string) {}
        public static function prepend_each_line($string, $with) {}
        public static function comment_block($text, $char = ' ') {}
        public static function export_entry($entry) {}
        public static function match_begin_and_end_newlines($translation, $original) {}
        function import_from_file($filename) {}
        protected static function is_final($context) {}
        function read_entry($f, $lineno = 0) {}
        function read_line($f, $action = 'read') {}
        function add_comment_to_entry($entry, $po_comment_line) {}
        public static function trim_quotes($s) {}
    }

    /**
     * Classes, which help reading streams of data from files.
     * Based on the classes from Danilo Segan <danilo@kvota.net>
     *
     * @version $Id: streams.php 1157 2015-11-20 04:30:11Z dd32 $
     * @package pomo
     * @subpackage streams
     */
    class POMO_Reader {
        public $endian;
        public $_post;

        /**
         * PHP5 constructor.
         */
        function __construct() {}
        /**
         * PHP4 constructor.
         */
        public function POMO_Reader() {}
        function setEndian($endian) {}
        /**
         * Reads a 32bit Integer from the Stream
         *
         * @return mixed The integer, corresponding to the next 32 bits from
         *  the stream of false if there are not enough bytes or on error
         */
        function readint32() {}
        function readint32array($count) {}
        function substr($string, $start, $length) {}
        function strlen($string) {}
        function str_split($string, $chunk_size) {}
        /**
         * @return int
         */
        function pos() {}
        /**
         * @return true
         */
        function is_resource() {}
        /**
         * @return true
         */
        function close() {}
    }

    class POMO_FileReader extends \pomo_reader {
        function __construct($filename) {}
        public function POMO_FileReader($filename) {}
        function read($bytes) {}
        function seekto($pos) {}
        /**
         * @return bool
         */
        function is_resource() {}
        /**
         * @return bool
         */
        function feof() {}
        /**
         * @return bool
         */
        function close() {}
        /**
         * @return string
         */
        function read_all() {}
    }

    /**
     * Provides file-like methods for manipulating a string instead
     * of a physical file.
     */
    class POMO_StringReader extends \pomo_reader {
        public $_str;

        function __construct($str = '') {}
        public function POMO_StringReader($str = '') {}
        function read($bytes) {}
        function seekto($pos) {}
        /**
         * @return int
         */
        function length() {}
        /**
         * @return string
         */
        function read_all() {}
    }

    /**
     * Reads the contents of the file in the beginning.
     */
    class POMO_CachedFileReader extends \pomo_stringreader {
        function __construct($filename) {}
        public function POMO_CachedFileReader($filename) {}
    }

    /**
     * Reads the contents of the file in the beginning.
     */
    class POMO_CachedIntFileReader extends \pomo_cachedfilereader {
        public function __construct($filename) {}
        function POMO_CachedIntFileReader($filename) {}
    }

    /**
     * Translation_Entry class encapsulates a translatable string
     */
    class Translation_Entry {
        /**
         * Whether the entry contains a string and its plural form, default is false
         *
         * @var boolean
         */
        public $is_plural;
        public $context;
        public $singular;
        public $plural;
        public $translations;
        public $translator_comments;
        public $extracted_comments;
        public $references;
        public $flags;

        function __construct($args = array( )) {}
        public function Translation_Entry($args = array( )) {}
        /**
         * Generates a unique key for this entry
         *
         * @return string|bool the key or false if the entry is empty
         */
        function key() {}
        function merge_with($other) {}
    }

    /**
     * A gettext Plural-Forms parser.
     *
     * @since 4.9.0
     */
    class Plural_Forms {
        const OP_CHARS = '|&><!=%?:';
        const NUM_CHARS = '0123456789';

        /**
         * Operator precedence.
         *
         * Operator precedence from highest to lowest. Higher numbers indicate
         * higher precedence, and are executed first.
         *
         * @see https://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#Operator_precedence
         *
         * @since 4.9.0
         * @var array $op_precedence Operator precedence from highest to lowest.
         */
        static protected $op_precedence;
        /**
         * Tokens generated from the string.
         *
         * @since 4.9.0
         * @var array $tokens List of tokens.
         */
        protected $tokens;
        /**
         * Cache for repeated calls to the function.
         *
         * @since 4.9.0
         * @var array $cache Map of $n => $result
         */
        protected $cache;

        public function __construct($str) {}
        protected function parse($str) {}
        public function get($num) {}
        public function execute($n) {}
    }

    /**
     * Class for a set of entries for translation and their associated headers
     *
     * @version $Id: translations.php 1157 2015-11-20 04:30:11Z dd32 $
     * @package pomo
     * @subpackage translations
     */
    class Translations {
        public $entries;
        public $headers;

        function add_entry($entry) {}
        function add_entry_or_merge($entry) {}
        function set_header($header, $value) {}
        function set_headers($headers) {}
        function get_header($header) {}
        function translate_entry($entry) {}
        function translate($singular, $context = null) {}
        function select_plural_form($count) {}
        /**
         * @return int
         */
        function get_plural_forms_count() {}
        function translate_plural($singular, $plural, $count, $context = null) {}
        function merge_with($other) {}
        function merge_originals_with($other) {}
    }

    class Gettext_Translations extends \translations {
        function gettext_select_plural_form($count) {}
        function nplurals_and_expression_from_header($header) {}
        function make_plural_form_function($nplurals, $expression) {}
        function parenthesize_plural_exression($expression) {}
        function make_headers($translation) {}
        function set_header($header, $value) {}
    }

    /**
     * Provides the same interface as Translations, but doesn't do anything
     */
    class NOOP_Translations {
        public $entries;
        public $headers;

        function add_entry($entry) {}
        function set_header($header, $value) {}
        function set_headers($headers) {}
        function get_header($header) {}
        function translate_entry($entry) {}
        function translate($singular, $context = null) {}
        function select_plural_form($count) {}
        /**
         * @return int
         */
        function get_plural_forms_count() {}
        function translate_plural($singular, $plural, $count, $context = null) {}
        function merge_with($other) {}
    }

    /**
     * Class for working with MO files
     *
     * @version $Id: mo.php 1157 2015-11-20 04:30:11Z dd32 $
     * @package pomo
     * @subpackage mo
     */
    class MO extends \gettext_translations {
        public $_nplurals;
        /**
         * Loaded MO file.
         *
         * @var string
         */
        private $filename;

        /**
         * Returns the loaded MO file.
         *
         * @return string The loaded MO file.
         */
        public function get_filename() {}
        function import_from_file($filename) {}
        function export_to_file($filename) {}
        /**
         * @return string|false
         */
        function export() {}
        function is_entry_good_for_export($entry) {}
        function export_to_file_handle($fh) {}
        function export_original($entry) {}
        function export_translations($entry) {}
        /**
         * @return string
         */
        function export_headers() {}
        function get_byteorder($magic) {}
        function import_from_reader($reader) {}
        function &make_entry($original, $translation) {}
        function select_plural_form($count) {}
        /**
         * @return int
         */
        function get_plural_forms_count() {}
    }

    /**
     * General API for generating and formatting diffs - the differences between
     * two sequences of strings.
     *
     * The original PHP version of this code was written by Geoffrey T. Dairiki
     * <dairiki@dairiki.org>, and is used/adapted with his permission.
     *
     * Copyright 2004 Geoffrey T. Dairiki <dairiki@dairiki.org>
     * Copyright 2004-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     */
    class Text_Diff {
        /**
         * Array of changes.
         *
         * @var array
         */
        public $_edits;

        function __construct($engine, $params) {}
        public function Text_Diff($engine, $params) {}
        /**
         * Returns the array of differences.
         */
        function getDiff() {}
        /**
         * returns the number of new (added) lines in a given diff.
         *
         * @since Text_Diff 1.1.0
         *
         * @return integer The number of new lines
         */
        function countAddedLines() {}
        /**
         * Returns the number of deleted (removed) lines in a given diff.
         *
         * @since Text_Diff 1.1.0
         *
         * @return integer The number of deleted lines
         */
        function countDeletedLines() {}
        /**
         * Computes a reversed diff.
         *
         * Example:
         * <code>
         * $diff = new Text_Diff($lines1, $lines2);
         * $rev = $diff->reverse();
         * </code>
         *
         * @return Text_Diff  A Diff object representing the inverse of the
         *                    original diff.  Note that we purposely don't return a
         *                    reference here, since this essentially is a clone()
         *                    method.
         */
        function reverse() {}
        /**
         * Checks for an empty diff.
         *
         * @return boolean  True if two sequences were identical.
         */
        function isEmpty() {}
        /**
         * Computes the length of the Longest Common Subsequence (LCS).
         *
         * This is mostly for diagnostic purposes.
         *
         * @return integer  The length of the LCS.
         */
        function lcs() {}
        /**
         * Gets the original set of lines.
         *
         * This reconstructs the $from_lines parameter passed to the constructor.
         *
         * @return array  The original sequence of strings.
         */
        function getOriginal() {}
        /**
         * Gets the final set of lines.
         *
         * This reconstructs the $to_lines parameter passed to the constructor.
         *
         * @return array  The sequence of strings.
         */
        function getFinal() {}
        static function trimNewlines($line, $key) {}
        /**
         * Determines the location of the system temporary directory.
         *
         * @static
         *
         * @access protected
         *
         * @return string  A directory name which can be used for temp files.
         *                 Returns false if one could not be found.
         */
        function _getTempDir() {}
        function _check($from_lines, $to_lines) {}
    }

    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     */
    class Text_MappedDiff extends \text_diff {
        function __construct($from_lines, $to_lines, $mapped_from_lines, $mapped_to_lines) {}
        public function Text_MappedDiff($from_lines, $to_lines, $mapped_from_lines, $mapped_to_lines) {}
    }

    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op {
        public $orig;
        public $final;

        function &reverse() {}
        function norig() {}
        function nfinal() {}
    }

    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op_copy extends \text_diff_op {
        function __construct($orig, $final = false) {}
        public function Text_Diff_Op_copy($orig, $final = false) {}
        function &reverse() {}
    }

    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op_delete extends \text_diff_op {
        function __construct($lines) {}
        public function Text_Diff_Op_delete($lines) {}
        function &reverse() {}
    }

    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op_add extends \text_diff_op {
        function __construct($lines) {}
        public function Text_Diff_Op_add($lines) {}
        function &reverse() {}
    }

    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op_change extends \text_diff_op {
        function __construct($orig, $final) {}
        public function Text_Diff_Op_change($orig, $final) {}
        function &reverse() {}
    }

    /**
     * A class to render Diffs in different formats.
     *
     * This class renders the diff in classic diff format. It is intended that
     * this class be customized via inheritance, to obtain fancier outputs.
     *
     * Copyright 2004-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @package Text_Diff
     */
    class Text_Diff_Renderer {
        /**
         * Number of leading context "lines" to preserve.
         *
         * This should be left at zero for this class, but subclasses may want to
         * set this to other values.
         */
        public $_leading_context_lines;
        /**
         * Number of trailing context "lines" to preserve.
         *
         * This should be left at zero for this class, but subclasses may want to
         * set this to other values.
         */
        public $_trailing_context_lines;

        function __construct($params = array( )) {}
        public function Text_Diff_Renderer($params = array( )) {}
        /**
         * Get any renderer parameters.
         *
         * @return array  All parameters of this renderer object.
         */
        function getParams() {}
        function render($diff) {}
        function _block($xbeg, $xlen, $ybeg, $ylen, $edits) {}
        function _startDiff() {}
        function _endDiff() {}
        function _blockHeader($xbeg, $xlen, $ybeg, $ylen) {}
        function _startBlock($header) {}
        function _endBlock() {}
        function _lines($lines, $prefix = ' ') {}
        function _context($lines) {}
        function _added($lines) {}
        function _deleted($lines) {}
        function _changed($orig, $final) {}
    }

    /**
     * "Inline" diff renderer.
     *
     * This class renders diffs in the Wiki-style "inline" format.
     *
     * @author  Ciprian Popovici
     * @package Text_Diff
     */
    class Text_Diff_Renderer_inline extends \text_diff_renderer {
        /**
         * Number of leading context "lines" to preserve.
         *
         * @var integer
         */
        public $_leading_context_lines;
        /**
         * Number of trailing context "lines" to preserve.
         *
         * @var integer
         */
        public $_trailing_context_lines;
        /**
         * Prefix for inserted text.
         *
         * @var string
         */
        public $_ins_prefix;
        /**
         * Suffix for inserted text.
         *
         * @var string
         */
        public $_ins_suffix;
        /**
         * Prefix for deleted text.
         *
         * @var string
         */
        public $_del_prefix;
        /**
         * Suffix for deleted text.
         *
         * @var string
         */
        public $_del_suffix;
        /**
         * Header for each change block.
         *
         * @var string
         */
        public $_block_header;
        /**
         * Whether to split down to character-level.
         *
         * @var boolean
         */
        public $_split_characters;
        /**
         * What are we currently splitting on? Used to recurse to show word-level
         * or character-level changes.
         *
         * @var string
         */
        public $_split_level;

        function _blockHeader($xbeg, $xlen, $ybeg, $ylen) {}
        function _startBlock($header) {}
        function _lines($lines, $prefix = ' ', $encode = true) {}
        function _added($lines) {}
        function _deleted($lines, $words = false) {}
        function _changed($orig, $final) {}
        function _splitOnWords($string, $newlineEscape = "\n") {}
        function _encode($string) {}
    }

    /**
     * Class used internally by Diff to actually compute the diffs.
     *
     * This class uses the xdiff PECL package (http://pecl.php.net/package/xdiff)
     * to compute the differences between the two input arrays.
     *
     * Copyright 2004-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @author  Jon Parise <jon@horde.org>
     * @package Text_Diff
     */
    class Text_Diff_Engine_xdiff {
        function diff($from_lines, $to_lines) {}
    }

    /**
     * Class used internally by Diff to actually compute the diffs.
     *
     * This class uses the Unix `diff` program via shell_exec to compute the
     * differences between the two input arrays.
     *
     * Copyright 2007-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @author  Milian Wolff <mail@milianw.de>
     * @package Text_Diff
     * @since   0.3.0
     */
    class Text_Diff_Engine_shell {
        /**
         * Path to the diff executable
         *
         * @var string
         */
        public $_diffCommand;

        function diff($from_lines, $to_lines) {}
        function _getLines($text_lines, $line_no, $end = false) {}
    }

    /**
     * Class used internally by Text_Diff to actually compute the diffs.
     *
     * This class is implemented using native PHP code.
     *
     * The algorithm used here is mostly lifted from the perl module
     * Algorithm::Diff (version 1.06) by Ned Konz, which is available at:
     * http://www.perl.com/CPAN/authors/id/N/NE/NEDKONZ/Algorithm-Diff-1.06.zip
     *
     * More ideas are taken from: http://www.ics.uci.edu/~eppstein/161/960229.html
     *
     * Some ideas (and a bit of code) are taken from analyze.c, of GNU
     * diffutils-2.7, which can be found at:
     * ftp://gnudist.gnu.org/pub/gnu/diffutils/diffutils-2.7.tar.gz
     *
     * Some ideas (subdivision by NCHUNKS > 2, and some optimizations) are from
     * Geoffrey T. Dairiki <dairiki@dairiki.org>. The original PHP version of this
     * code was written by him, and is used/adapted with his permission.
     *
     * Copyright 2004-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     * @package Text_Diff
     */
    class Text_Diff_Engine_native {
        function diff($from_lines, $to_lines) {}
        function _diag($xoff, $xlim, $yoff, $ylim, $nchunks) {}
        function _lcsPos($ypos) {}
        function _compareseq($xoff, $xlim, $yoff, $ylim) {}
        function _shiftBoundaries($lines, $changed, $other_changed) {}
    }

    /**
     * Parses unified or context diffs output from eg. the diff utility.
     *
     * Example:
     * <code>
     * $patch = file_get_contents('example.patch');
     * $diff = new Text_Diff('string', array($patch));
     * $renderer = new Text_Diff_Renderer_inline();
     * echo $renderer->render($diff);
     * </code>
     *
     * Copyright 2005 Örjan Persson <o@42mm.org>
     * Copyright 2005-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @author  Örjan Persson <o@42mm.org>
     * @package Text_Diff
     * @since   0.2.0
     */
    class Text_Diff_Engine_string {
        function diff($diff, $mode = 'autodetect') {}
        function parseUnifiedDiff($diff) {}
        function parseContextDiff($diff) {}
    }

    /**
     * IXR_Server
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Server {
        public $data;
        public $callbacks;
        public $message;
        public $capabilities;

        function __construct($callbacks = false, $data = false, $wait = false) {}
        public function IXR_Server($callbacks = false, $data = false, $wait = false) {}
        function serve($data = false) {}
        function call($methodname, $args) {}
        function error($error, $message = false) {}
        function output($xml) {}
        function hasMethod($method) {}
        function setCapabilities() {}
        function getCapabilities($args) {}
        function setCallbacks() {}
        function listMethods($args) {}
        function multiCall($methodcalls) {}
    }

    /**
     * IXR_ClientMulticall
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_ClientMulticall extends \ixr_client {
        public $calls;

        function __construct($server, $path = false, $port = 80) {}
        public function IXR_ClientMulticall($server, $path = false, $port = 80) {}
        function addCall() {}
        function query() {}
    }

    /**
     * IXR_MESSAGE
     *
     * @package IXR
     * @since 1.5.0
     *
     */
    class IXR_Message {
        public $message;
        public $messageType;
        public $faultCode;
        public $faultString;
        public $methodName;
        public $params;
        public $_arraystructs;
        public $_arraystructstypes;
        public $_currentStructName;
        public $_param;
        public $_value;
        public $_currentTag;
        public $_currentTagContents;
        public $_parser;

        function __construct($message) {}
        public function IXR_Message($message) {}
        function parse() {}
        function tag_open($parser, $tag, $attr) {}
        function cdata($parser, $cdata) {}
        function tag_close($parser, $tag) {}
    }

    /**
     * IXR_Request
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Request {
        public $method;
        public $args;
        public $xml;

        function __construct($method, $args) {}
        public function IXR_Request($method, $args) {}
        function getLength() {}
        function getXml() {}
    }

    /**
     * IXR_Error
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Error {
        public $code;
        public $message;

        function __construct($code, $message) {}
        public function IXR_Error($code, $message) {}
        function getXml() {}
    }

    /**
     * IXR_Date
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Date {
        public $year;
        public $month;
        public $day;
        public $hour;
        public $minute;
        public $second;
        public $timezone;

        function __construct($time) {}
        public function IXR_Date($time) {}
        function parseTimestamp($timestamp) {}
        function parseIso($iso) {}
        function getIso() {}
        function getXml() {}
        function getTimestamp() {}
    }

    /**
     * IXR_IntrospectionServer
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_IntrospectionServer extends \ixr_server {
        public $signatures;
        public $help;

        /**
         * PHP5 constructor.
         */
        function __construct() {}
        /**
         * PHP4 constructor.
         */
        public function IXR_IntrospectionServer() {}
        function addCallback($method, $callback, $args, $help) {}
        function call($methodname, $args) {}
        function methodSignature($method) {}
        function methodHelp($method) {}
    }

    /**
     * IXR_Value
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Value {
        public $data;
        public $type;

        function __construct($data, $type = false) {}
        public function IXR_Value($data, $type = false) {}
        function calculateType() {}
        function getXml() {}
        function isStruct($array) {}
    }

    /**
     * IXR_Client
     *
     * @package IXR
     * @since 1.5.0
     *
     */
    class IXR_Client {
        public $server;
        public $port;
        public $path;
        public $useragent;
        public $response;
        public $message;
        public $debug;
        public $timeout;
        public $headers;
        public $error;

        function __construct($server, $path = false, $port = 80, $timeout = 15) {}
        public function IXR_Client($server, $path = false, $port = 80, $timeout = 15) {}
        function query() {}
        function getResponse() {}
        function isError() {}
        function getErrorCode() {}
        function getErrorMessage() {}
    }

    /**
     * IXR_Base64
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Base64 {
        public $data;

        function __construct($data) {}
        public function IXR_Base64($data) {}
        function getXml() {}
    }

    /**
     * Core class used to implement a Tag cloud widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Tag_Cloud extends \wp_widget {
        /**
         * Sets up a new Tag Cloud widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
        public function widget(/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
$args, /** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
        public function _get_current_taxonomy($instance) {}
    }

    /**
     * Core class used to implement the Archives widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Archives extends \wp_widget {
        /**
         * Sets up a new Archives widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/**
 * Filters the arguments for the Archives widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see wp_get_archives()
 *
 * @param array $args     An array of Archives option arguments.
 * @param array $instance Array of settings for the current widget.
 */
        public function widget(/**
 * Filters the arguments for the Archives widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see wp_get_archives()
 *
 * @param array $args     An array of Archives option arguments.
 * @param array $instance Array of settings for the current widget.
 */
$args, /**
 * Filters the arguments for the Archives widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see wp_get_archives()
 *
 * @param array $args     An array of Archives option arguments.
 * @param array $instance Array of settings for the current widget.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class used to implement a Meta widget.
     *
     * Displays log in/out, RSS feed links, etc.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Meta extends \wp_widget {
        /**
         * Sets up a new Meta widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/**
 * Filters the "Powered by WordPress" text in the Meta widget.
 *
 * @since 3.6.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @param string $title_text Default title text for the WordPress.org link.
 * @param array  $instance   Array of settings for the current widget.
 */
        public function widget(/**
 * Filters the "Powered by WordPress" text in the Meta widget.
 *
 * @since 3.6.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @param string $title_text Default title text for the WordPress.org link.
 * @param array  $instance   Array of settings for the current widget.
 */
$args, /**
 * Filters the "Powered by WordPress" text in the Meta widget.
 *
 * @since 3.6.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @param string $title_text Default title text for the WordPress.org link.
 * @param array  $instance   Array of settings for the current widget.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class that implements a media widget.
     *
     * @since 4.8.0
     *
     * @see WP_Widget
     */
    abstract class WP_Widget_Media extends \wp_widget {
        /**
         * Translation labels.
         *
         * @since 4.8.0
         * @var array
         */
        public $l10n;
        /**
         * Whether or not the widget has been registered yet.
         *
         * @since 4.8.1
         * @var bool
         */
        protected $registered;

        public function __construct($id_base, $name, $widget_options = array( ), $control_options = array( )) {}
        public function _register_one($number = -1) {}
        /**
         * Filters the media widget instance schema to add additional properties.
         *
         * @since 4.9.0
         *
         * @param array           $schema Instance schema.
         * @param WP_Widget_Media $this   Widget object.
         */
        public function get_instance_schema() {}
        public function is_attachment_with_mime_type($attachment, $mime_type) {}
        public function sanitize_token_list($tokens) {}
/**
 * Filters the media widget instance prior to rendering the media.
 *
 * @since 4.8.0
 *
 * @param array           $instance Instance data.
 * @param array           $args     Widget args.
 * @param WP_Widget_Media $this     Widget object.
 */
        public function widget(/**
 * Filters the media widget instance prior to rendering the media.
 *
 * @since 4.8.0
 *
 * @param array           $instance Instance data.
 * @param array           $args     Widget args.
 * @param WP_Widget_Media $this     Widget object.
 */
$args, /**
 * Filters the media widget instance prior to rendering the media.
 *
 * @since 4.8.0
 *
 * @param array           $instance Instance data.
 * @param array           $args     Widget args.
 * @param WP_Widget_Media $this     Widget object.
 */
$instance) {}
        public function update($new_instance, $instance) {}
        abstract public function render_media($instance) ;
        public function form($instance) {}
        public function display_media_state($states, $post = null) {}
        /**
         * Enqueue preview scripts.
         *
         * These scripts normally are enqueued just-in-time when a widget is rendered.
         * In the customizer, however, widgets can be dynamically added and rendered via
         * selective refresh, and so it is important to unconditionally enqueue them in
         * case a widget does get added.
         *
         * @since 4.8.0
         */
        public function enqueue_preview_scripts() {}
        /**
         * Loads the required scripts and styles for the widget control.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts() {}
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         */
        public function render_control_template_scripts() {}
        protected function has_content($instance) {}
    }

    /**
     * Core class used to implement a Recent Posts widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Recent_Posts extends \wp_widget {
        /**
         * Sets up a new Recent Posts widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/**
 * Filters the arguments for the Recent Posts widget.
 *
 * @since 3.4.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see WP_Query::get_posts()
 *
 * @param array $args     An array of arguments used to retrieve the recent posts.
 * @param array $instance Array of settings for the current widget.
 */
        public function widget(/**
 * Filters the arguments for the Recent Posts widget.
 *
 * @since 3.4.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see WP_Query::get_posts()
 *
 * @param array $args     An array of arguments used to retrieve the recent posts.
 * @param array $instance Array of settings for the current widget.
 */
$args, /**
 * Filters the arguments for the Recent Posts widget.
 *
 * @since 3.4.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see WP_Query::get_posts()
 *
 * @param array $args     An array of arguments used to retrieve the recent posts.
 * @param array $instance Array of settings for the current widget.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class used to implement a Links widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Links extends \wp_widget {
        /**
         * Sets up a new Links widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/**
 * Filters the arguments for the Links widget.
 *
 * @since 2.6.0
 * @since 4.4.0 Added the `$instance` parameter.
 *
 * @see wp_list_bookmarks()
 *
 * @param array $widget_links_args An array of arguments to retrieve the links list.
 * @param array $instance          The settings for the particular instance of the widget.
 */
        public function widget(/**
 * Filters the arguments for the Links widget.
 *
 * @since 2.6.0
 * @since 4.4.0 Added the `$instance` parameter.
 *
 * @see wp_list_bookmarks()
 *
 * @param array $widget_links_args An array of arguments to retrieve the links list.
 * @param array $instance          The settings for the particular instance of the widget.
 */
$args, /**
 * Filters the arguments for the Links widget.
 *
 * @since 2.6.0
 * @since 4.4.0 Added the `$instance` parameter.
 *
 * @see wp_list_bookmarks()
 *
 * @param array $widget_links_args An array of arguments to retrieve the links list.
 * @param array $instance          The settings for the particular instance of the widget.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class used to implement a Search widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Search extends \wp_widget {
        /**
         * Sets up a new Search widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
        public function widget(/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
$args, /** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
$instance) {}
        public function form($instance) {}
        public function update($new_instance, $old_instance) {}
    }

    /**
     * Core class used to implement a Pages widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Pages extends \wp_widget {
        /**
         * Sets up a new Pages widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/**
 * Filters the arguments for the Pages widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see wp_list_pages()
 *
 * @param array $args     An array of arguments to retrieve the pages list.
 * @param array $instance Array of settings for the current widget.
 */
        public function widget(/**
 * Filters the arguments for the Pages widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see wp_list_pages()
 *
 * @param array $args     An array of arguments to retrieve the pages list.
 * @param array $instance Array of settings for the current widget.
 */
$args, /**
 * Filters the arguments for the Pages widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see wp_list_pages()
 *
 * @param array $args     An array of arguments to retrieve the pages list.
 * @param array $instance Array of settings for the current widget.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class used to implement a Custom HTML widget.
     *
     * @since 4.8.1
     *
     * @see WP_Widget
     */
    class WP_Widget_Custom_HTML extends \wp_widget {
        /**
         * Whether or not the widget has been registered yet.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $registered;
        /**
         * Default instance.
         *
         * @since 4.8.1
         * @var array
         */
        protected $default_instance;

        /**
         * Sets up a new Custom HTML widget instance.
         *
         * @since 4.8.1
         */
        public function __construct() {}
        public function _register_one($number = -1) {}
        public function _filter_gallery_shortcode_attrs($attrs) {}
/**
 * Filters the content of the Custom HTML widget.
 *
 * @since 4.8.1
 *
 * @param string                $content  The widget content.
 * @param array                 $instance Array of settings for the current widget.
 * @param WP_Widget_Custom_HTML $this     Current Custom HTML widget instance.
 */
        public function widget(/**
 * Filters the content of the Custom HTML widget.
 *
 * @since 4.8.1
 *
 * @param string                $content  The widget content.
 * @param array                 $instance Array of settings for the current widget.
 * @param WP_Widget_Custom_HTML $this     Current Custom HTML widget instance.
 */
$args, /**
 * Filters the content of the Custom HTML widget.
 *
 * @since 4.8.1
 *
 * @param string                $content  The widget content.
 * @param array                 $instance Array of settings for the current widget.
 * @param WP_Widget_Custom_HTML $this     Current Custom HTML widget instance.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        /**
         * Loads the required scripts and styles for the widget control.
         *
         * @since 4.9.0
         */
        public function enqueue_admin_scripts() {}
        public function form($instance) {}
        /**
         * Render form template scripts.
         *
         * @since 4.9.0
         */
        public static function render_control_template_scripts() {}
        /**
         * Add help text to widgets admin screen.
         *
         * @since 4.9.0
         */
        public static function add_help_text() {}
    }

    /**
     * Core class used to implement a Categories widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Categories extends \wp_widget {
        /**
         * Sets up a new Categories widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/**
 * Filters the arguments for the Categories widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @param array $cat_args An array of Categories widget options.
 * @param array $instance Array of settings for the current widget.
 */
        public function widget(/**
 * Filters the arguments for the Categories widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @param array $cat_args An array of Categories widget options.
 * @param array $instance Array of settings for the current widget.
 */
$args, /**
 * Filters the arguments for the Categories widget.
 *
 * @since 2.8.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @param array $cat_args An array of Categories widget options.
 * @param array $instance Array of settings for the current widget.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class that implements a gallery widget.
     *
     * @since 4.9.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Media_Gallery extends \wp_widget_media {
        /**
         * Constructor.
         *
         * @since 4.9.0
         */
        public function __construct() {}
        /** This filter is documented in wp-includes/widgets/class-wp-widget-media.php */
        public function get_instance_schema() {}
        public function render_media($instance) {}
        /**
         * Loads the required media files for the media manager and scripts for media widgets.
         *
         * @since 4.9.0
         */
        public function enqueue_admin_scripts() {}
        /**
         * Render form template scripts.
         *
         * @since 4.9.0
         */
        public function render_control_template_scripts() {}
        protected function has_content($instance) {}
    }

    /**
     * Core class used to implement a Recent Comments widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Recent_Comments extends \wp_widget {
        /**
         * Sets up a new Recent Comments widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
        /**
         * Filters the Recent Comments default widget styles.
         *
         * @since 3.1.0
         *
         * @param bool   $active  Whether the widget is active. Default true.
         * @param string $id_base The widget ID.
         */
        public function recent_comments_style() {}
/**
 * Filters the arguments for the Recent Comments widget.
 *
 * @since 3.4.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see WP_Comment_Query::query() for information on accepted arguments.
 *
 * @param array $comment_args An array of arguments used to retrieve the recent comments.
 * @param array $instance     Array of settings for the current widget.
 */
        public function widget(/**
 * Filters the arguments for the Recent Comments widget.
 *
 * @since 3.4.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see WP_Comment_Query::query() for information on accepted arguments.
 *
 * @param array $comment_args An array of arguments used to retrieve the recent comments.
 * @param array $instance     Array of settings for the current widget.
 */
$args, /**
 * Filters the arguments for the Recent Comments widget.
 *
 * @since 3.4.0
 * @since 4.9.0 Added the `$instance` parameter.
 *
 * @see WP_Comment_Query::query() for information on accepted arguments.
 *
 * @param array $comment_args An array of arguments used to retrieve the recent comments.
 * @param array $instance     Array of settings for the current widget.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
        /**
         * Flushes the Recent Comments widget cache.
         *
         * @since 2.8.0
         *
         * @deprecated 4.4.0 Fragment caching was removed in favor of split queries.
         */
        public function flush_widget_cache() {}
    }

    /**
     * Core class used to implement the Navigation Menu widget.
     *
     * @since 3.0.0
     *
     * @see WP_Widget
     */
    class WP_Nav_Menu_Widget extends \wp_widget {
        /**
         * Sets up a new Navigation Menu widget instance.
         *
         * @since 3.0.0
         */
        public function __construct() {}
/**
 * Filters the arguments for the Navigation Menu widget.
 *
 * @since 4.2.0
 * @since 4.4.0 Added the `$instance` parameter.
 *
 * @param array    $nav_menu_args {
 *     An array of arguments passed to wp_nav_menu() to retrieve a navigation menu.
 *
 *     @type callable|bool $fallback_cb Callback to fire if the menu doesn't exist. Default empty.
 *     @type mixed         $menu        Menu ID, slug, or name.
 * }
 * @param WP_Term  $nav_menu      Nav menu object for the current menu.
 * @param array    $args          Display arguments for the current widget.
 * @param array    $instance      Array of settings for the current widget.
 */
        public function widget(/**
 * Filters the arguments for the Navigation Menu widget.
 *
 * @since 4.2.0
 * @since 4.4.0 Added the `$instance` parameter.
 *
 * @param array    $nav_menu_args {
 *     An array of arguments passed to wp_nav_menu() to retrieve a navigation menu.
 *
 *     @type callable|bool $fallback_cb Callback to fire if the menu doesn't exist. Default empty.
 *     @type mixed         $menu        Menu ID, slug, or name.
 * }
 * @param WP_Term  $nav_menu      Nav menu object for the current menu.
 * @param array    $args          Display arguments for the current widget.
 * @param array    $instance      Array of settings for the current widget.
 */
$args, /**
 * Filters the arguments for the Navigation Menu widget.
 *
 * @since 4.2.0
 * @since 4.4.0 Added the `$instance` parameter.
 *
 * @param array    $nav_menu_args {
 *     An array of arguments passed to wp_nav_menu() to retrieve a navigation menu.
 *
 *     @type callable|bool $fallback_cb Callback to fire if the menu doesn't exist. Default empty.
 *     @type mixed         $menu        Menu ID, slug, or name.
 * }
 * @param WP_Term  $nav_menu      Nav menu object for the current menu.
 * @param array    $args          Display arguments for the current widget.
 * @param array    $instance      Array of settings for the current widget.
 */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class that implements an image widget.
     *
     * @since 4.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Media_Image extends \wp_widget_media {
        /**
         * Constructor.
         *
         * @since  4.8.0
         */
        public function __construct() {}
        /**
         * Get schema for properties of a widget instance (item).
         *
         * @since  4.8.0
         *
         * @see WP_REST_Controller::get_item_schema()
         * @see WP_REST_Controller::get_additional_fields()
         * @link https://core.trac.wordpress.org/ticket/35574
         * @return array Schema for properties.
         */
        public function get_instance_schema() {}
        public function render_media($instance) {}
        /**
         * Loads the required media files for the media manager and scripts for media widgets.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts() {}
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         */
        public function render_control_template_scripts() {}
    }

    /**
     * Core class used to implement the Calendar widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Calendar extends \wp_widget {
        /**
         * Ensure that the ID attribute only appears in the markup once
         *
         * @since 4.4.0
         * @var int
         */
        static private $instance;

        /**
         * Sets up a new Calendar widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
        public function widget(/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
$args, /** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class used to implement a RSS widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_RSS extends \wp_widget {
        /**
         * Sets up a new RSS widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
        public function widget(/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
$args, /** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
$instance) {}
        public function update($new_instance, $old_instance) {}
        public function form($instance) {}
    }

    /**
     * Core class used to implement a Text widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Text extends \wp_widget {
        /**
         * Whether or not the widget has been registered yet.
         *
         * @since 4.8.1
         * @var bool
         */
        protected $registered;

        /**
         * Sets up a new Text widget instance.
         *
         * @since 2.8.0
         */
        public function __construct() {}
        public function _register_one($number = -1) {}
/** @var DOMAttr $attribute */
        public function is_legacy_instance(/** @var DOMAttr $attribute */
$instance) {}
        public function _filter_gallery_shortcode_attrs($attrs) {}
/**
 * Filters the content of the Text widget to apply changes expected from the visual (TinyMCE) editor.
 *
 * By default a subset of the_content filters are applied, including wpautop and wptexturize.
 *
 * @since 4.8.0
 *
 * @param string         $text     The widget content.
 * @param array          $instance Array of settings for the current widget.
 * @param WP_Widget_Text $this     Current Text widget instance.
 */
        public function widget(/**
 * Filters the content of the Text widget to apply changes expected from the visual (TinyMCE) editor.
 *
 * By default a subset of the_content filters are applied, including wpautop and wptexturize.
 *
 * @since 4.8.0
 *
 * @param string         $text     The widget content.
 * @param array          $instance Array of settings for the current widget.
 * @param WP_Widget_Text $this     Current Text widget instance.
 */
$args, /**
 * Filters the content of the Text widget to apply changes expected from the visual (TinyMCE) editor.
 *
 * By default a subset of the_content filters are applied, including wpautop and wptexturize.
 *
 * @since 4.8.0
 *
 * @param string         $text     The widget content.
 * @param array          $instance Array of settings for the current widget.
 * @param WP_Widget_Text $this     Current Text widget instance.
 */
$instance) {}
        public function inject_video_max_width_style($matches) {}
        public function update($new_instance, $old_instance) {}
        /**
         * Enqueue preview scripts.
         *
         * These scripts normally are enqueued just-in-time when a playlist shortcode is used.
         * However, in the customizer, a playlist shortcode may be used in a text widget and
         * dynamically added via selective refresh, so it is important to unconditionally enqueue them.
         *
         * @since 4.9.3
         */
        public function enqueue_preview_scripts() {}
        /**
         * Loads the required scripts and styles for the widget control.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts() {}
/** This filter is documented in wp-includes/class-wp-editor.php */
        public function form(/** This filter is documented in wp-includes/class-wp-editor.php */
$instance) {}
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         * @since 4.9.0 The method is now static.
         */
        public static function render_control_template_scripts() {}
    }

    /**
     * Core class that implements a video widget.
     *
     * @since 4.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Media_Video extends \wp_widget_media {
        /**
         * Constructor.
         *
         * @since  4.8.0
         */
        public function __construct() {}
        /**
         * Get schema for properties of a widget instance (item).
         *
         * @since  4.8.0
         *
         * @see WP_REST_Controller::get_item_schema()
         * @see WP_REST_Controller::get_additional_fields()
         * @link https://core.trac.wordpress.org/ticket/35574
         * @return array Schema for properties.
         */
        public function get_instance_schema() {}
        public function render_media($instance) {}
        public function inject_video_max_width_style($html) {}
        /**
         * Enqueue preview scripts.
         *
         * These scripts normally are enqueued just-in-time when a video shortcode is used.
         * In the customizer, however, widgets can be dynamically added and rendered via
         * selective refresh, and so it is important to unconditionally enqueue them in
         * case a widget does get added.
         *
         * @since 4.8.0
         */
        public function enqueue_preview_scripts() {}
        /**
         * Loads the required scripts and styles for the widget control.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts() {}
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         */
        public function render_control_template_scripts() {}
    }

    /**
     * Core class that implements an audio widget.
     *
     * @since 4.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Media_Audio extends \wp_widget_media {
        /**
         * Constructor.
         *
         * @since  4.8.0
         */
        public function __construct() {}
        /**
         * Get schema for properties of a widget instance (item).
         *
         * @since  4.8.0
         *
         * @see WP_REST_Controller::get_item_schema()
         * @see WP_REST_Controller::get_additional_fields()
         * @link https://core.trac.wordpress.org/ticket/35574
         * @return array Schema for properties.
         */
        public function get_instance_schema() {}
        public function render_media($instance) {}
        /** This filter is documented in wp-includes/media.php */
        public function enqueue_preview_scripts() {}
        /**
         * Loads the required media files for the media manager and scripts for media widgets.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts() {}
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         */
        public function render_control_template_scripts() {}
    }

    /**
     * Core class used to implement the WordPress REST API server.
     *
     * @since 4.4.0
     */
    class WP_REST_Server {
        const DELETABLE = 'DELETE';
        const ALLMETHODS = 'GET, POST, PUT, PATCH, DELETE';
        const CREATABLE = 'POST';
        const EDITABLE = 'POST, PUT, PATCH';
        const READABLE = 'GET';

        /**
         * Namespaces registered to the server.
         *
         * @since 4.4.0
         * @var array
         */
        protected $namespaces;
        /**
         * Endpoints registered to the server.
         *
         * @since 4.4.0
         * @var array
         */
        protected $endpoints;
        /**
         * Options defined for the routes.
         *
         * @since 4.4.0
         * @var array
         */
        protected $route_options;

        /**
         * Instantiates the REST server.
         *
         * @since 4.4.0
         */
        public function __construct() {}
        /**
         * Filters REST authentication errors.
         *
         * This is used to pass a WP_Error from an authentication method back to
         * the API.
         *
         * Authentication methods should check first if they're being used, as
         * multiple authentication methods can be enabled on a site (cookies,
         * HTTP basic auth, OAuth). If the authentication method hooked in is
         * not actually being attempted, null should be returned to indicate
         * another authentication method should check instead. Similarly,
         * callbacks should ensure the value is `null` before checking for
         * errors.
         *
         * A WP_Error instance can be returned if an error occurs, and this should
         * match the format used by API methods internally (that is, the `status`
         * data should be used). A callback can return `true` to indicate that
         * the authentication method was used, and it succeeded.
         *
         * @since 4.4.0
         *
         * @param WP_Error|null|bool WP_Error if authentication error, null if authentication
         *                              method wasn't used, true if authentication succeeded.
         */
        public function check_authentication() {}
        protected function error_to_response($error) {}
        protected function json_error($code, $message, $status = null) {}
/**
 * Filters the API response.
 *
 * Allows modification of the response data after inserting
 * embedded data (if any) and before echoing the response data.
 *
 * @since 4.8.1
 *
 * @param array            $result  Response data to send to the client.
 * @param WP_REST_Server   $this    Server instance.
 * @param WP_REST_Request  $request Request used to generate the response.
 */
        public function serve_request(/**
 * Filters the API response.
 *
 * Allows modification of the response data after inserting
 * embedded data (if any) and before echoing the response data.
 *
 * @since 4.8.1
 *
 * @param array            $result  Response data to send to the client.
 * @param WP_REST_Server   $this    Server instance.
 * @param WP_REST_Request  $request Request used to generate the response.
 */
$path = null) {}
        public function response_to_data($response, $embed) {}
        public static function get_response_links($response) {}
        public static function get_compact_response_links($response) {}
/** This filter is documented in wp-includes/rest-api/class-wp-rest-server.php */
        protected function embed_links(/** This filter is documented in wp-includes/rest-api/class-wp-rest-server.php */
$data) {}
/**
 * Filters the enveloped form of a response.
 *
 * @since 4.4.0
 *
 * @param array            $envelope Envelope data.
 * @param WP_REST_Response $response Original response data.
 */
        public function envelope_response(/**
 * Filters the enveloped form of a response.
 *
 * @since 4.4.0
 *
 * @param array            $envelope Envelope data.
 * @param WP_REST_Response $response Original response data.
 */
$response, /**
 * Filters the enveloped form of a response.
 *
 * @since 4.4.0
 *
 * @param array            $envelope Envelope data.
 * @param WP_REST_Response $response Original response data.
 */
$embed) {}
        public function register_route($namespace, $route, $route_args, $override = false) {}
        /**
         * Retrieves the route map.
         *
         * The route map is an associative array with path regexes as the keys. The
         * value is an indexed array with the callback function/method as the first
         * item, and a bitmask of HTTP methods as the second item (see the class
         * constants).
         *
         * Each route can be mapped to more than one callback by using an array of
         * the indexed arrays. This allows mapping e.g. GET requests to one callback
         * and POST requests to another.
         *
         * Note that the path regexes (array keys) must have @ escaped, as this is
         * used as the delimiter with preg_match()
         *
         * @since 4.4.0
         *
         * @return array `'/path/regex' => array( $callback, $bitmask )` or
         *               `'/path/regex' => array( array( $callback, $bitmask ), ...)`.
         */
        public function get_routes() {}
        /**
         * Retrieves namespaces registered on the server.
         *
         * @since 4.4.0
         *
         * @return array List of registered namespaces.
         */
        public function get_namespaces() {}
        public function get_route_options($route) {}
/**
 * Filters the response immediately after executing any REST API
 * callbacks.
 *
 * Allows plugins to perform any needed cleanup, for example,
 * to undo changes made during the {@see 'rest_request_before_callbacks'}
 * filter.
 *
 * Note that this filter will not be called for requests that
 * fail to authenticate or match to a registered route.
 *
 * Note that an endpoint's `permission_callback` can still be
 * called after this filter - see `rest_send_allow_header()`.
 *
 * @since 4.7.0
 *
 * @param WP_HTTP_Response|WP_Error $response Result to send to the client. Usually a WP_REST_Response or WP_Error.
 * @param array                     $handler  Route handler used for the request.
 * @param WP_REST_Request           $request  Request used to generate the response.
 */
        public function dispatch(/**
 * Filters the response immediately after executing any REST API
 * callbacks.
 *
 * Allows plugins to perform any needed cleanup, for example,
 * to undo changes made during the {@see 'rest_request_before_callbacks'}
 * filter.
 *
 * Note that this filter will not be called for requests that
 * fail to authenticate or match to a registered route.
 *
 * Note that an endpoint's `permission_callback` can still be
 * called after this filter - see `rest_send_allow_header()`.
 *
 * @since 4.7.0
 *
 * @param WP_HTTP_Response|WP_Error $response Result to send to the client. Usually a WP_REST_Response or WP_Error.
 * @param array                     $handler  Route handler used for the request.
 * @param WP_REST_Request           $request  Request used to generate the response.
 */
$request) {}
        /**
         * Returns if an error occurred during most recent JSON encode/decode.
         *
         * Strings to be translated will be in format like
         * "Encoding error: Maximum stack depth exceeded".
         *
         * @since 4.4.0
         *
         * @return bool|string Boolean false or string error message.
         */
        protected function get_json_last_error() {}
/**
 * Filters the API root index data.
 *
 * This contains the data describing the API. This includes information
 * about supported authentication schemes, supported namespaces, routes
 * available on the API, and a small amount of data about the site.
 *
 * @since 4.4.0
 *
 * @param WP_REST_Response $response Response data.
 */
        public function get_index(/**
 * Filters the API root index data.
 *
 * This contains the data describing the API. This includes information
 * about supported authentication schemes, supported namespaces, routes
 * available on the API, and a small amount of data about the site.
 *
 * @since 4.4.0
 *
 * @param WP_REST_Response $response Response data.
 */
$request) {}
/**
 * Filters the namespace index data.
 *
 * This typically is just the route data for the namespace, but you can
 * add any data you'd like here.
 *
 * @since 4.4.0
 *
 * @param WP_REST_Response $response Response data.
 * @param WP_REST_Request  $request  Request data. The namespace is passed as the 'namespace' parameter.
 */
        public function get_namespace_index(/**
 * Filters the namespace index data.
 *
 * This typically is just the route data for the namespace, but you can
 * add any data you'd like here.
 *
 * @since 4.4.0
 *
 * @param WP_REST_Response $response Response data.
 * @param WP_REST_Request  $request  Request data. The namespace is passed as the 'namespace' parameter.
 */
$request) {}
/**
 * Filters the publicly-visible data for routes.
 *
 * This data is exposed on indexes and can be used by clients or
 * developers to investigate the site and find out how to use it. It
 * acts as a form of self-documentation.
 *
 * @since 4.4.0
 *
 * @param array $available Map of route to route data.
 * @param array $routes    Internal route data as an associative array.
 */
        public function get_data_for_routes(/**
 * Filters the publicly-visible data for routes.
 *
 * This data is exposed on indexes and can be used by clients or
 * developers to investigate the site and find out how to use it. It
 * acts as a form of self-documentation.
 *
 * @since 4.4.0
 *
 * @param array $available Map of route to route data.
 * @param array $routes    Internal route data as an associative array.
 */
$routes, /**
 * Filters the publicly-visible data for routes.
 *
 * This data is exposed on indexes and can be used by clients or
 * developers to investigate the site and find out how to use it. It
 * acts as a form of self-documentation.
 *
 * @since 4.4.0
 *
 * @param array $available Map of route to route data.
 * @param array $routes    Internal route data as an associative array.
 */
$context = 'view') {}
        public function get_data_for_route($route, $callbacks, $context = 'view') {}
        protected function set_status($code) {}
        public function send_header($key, $value) {}
        public function send_headers($headers) {}
        public function remove_header($key) {}
        /**
         * Retrieves the raw request entity (body).
         *
         * @since 4.4.0
         *
         * @global string $HTTP_RAW_POST_DATA Raw post data.
         *
         * @return string Raw request data.
         */
        public static function get_raw_data() {}
        public function get_headers($server) {}
    }

    /**
     * Core class used to implement a REST request object.
     *
     * Contains data from the request, to be passed to the callback.
     *
     * Note: This implements ArrayAccess, and acts as an array of parameters when
     * used in that manner. It does not use ArrayObject (as we cannot rely on SPL),
     * so be aware it may have non-array behaviour in some cases.
     *
     * Note: When using features provided by ArrayAccess, be aware that WordPress deliberately
     * does not distinguish between arguments of the same name for different request methods.
     * For instance, in a request with `GET id=1` and `POST id=2`, `$request['id']` will equal
     * 2 (`POST`) not 1 (`GET`). For more precision between request methods, use
     * WP_REST_Request::get_body_params(), WP_REST_Request::get_url_params(), etc.
     *
     * @since 4.4.0
     *
     * @see ArrayAccess
     */
    class WP_REST_Request implements \arrayaccess {
        /**
         * HTTP method.
         *
         * @since 4.4.0
         * @var string
         */
        protected $method;
        /**
         * Parameters passed to the request.
         *
         * These typically come from the `$_GET`, `$_POST` and `$_FILES`
         * superglobals when being created from the global scope.
         *
         * @since 4.4.0
         * @var array Contains GET, POST and FILES keys mapping to arrays of data.
         */
        protected $params;
        /**
         * HTTP headers for the request.
         *
         * @since 4.4.0
         * @var array Map of key to value. Key is always lowercase, as per HTTP specification.
         */
        protected $headers;
        /**
         * Body data.
         *
         * @since 4.4.0
         * @var string Binary data from the request.
         */
        protected $body;
        /**
         * Route matched for the request.
         *
         * @since 4.4.0
         * @var string
         */
        protected $route;
        /**
         * Attributes (options) for the route that was matched.
         *
         * This is the options array used when the route was registered, typically
         * containing the callback as well as the valid methods for the route.
         *
         * @since 4.4.0
         * @var array Attributes for the request.
         */
        protected $attributes;
        /**
         * Used to determine if the JSON data has been parsed yet.
         *
         * Allows lazy-parsing of JSON data where possible.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $parsed_json;
        /**
         * Used to determine if the body data has been parsed yet.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $parsed_body;

        public function __construct($method = '', $route = '', $attributes = array( )) {}
        /**
         * Retrieves the HTTP method for the request.
         *
         * @since 4.4.0
         *
         * @return string HTTP method.
         */
        public function get_method() {}
        public function set_method($method) {}
        /**
         * Retrieves all headers from the request.
         *
         * @since 4.4.0
         *
         * @return array Map of key to value. Key is always lowercase, as per HTTP specification.
         */
        public function get_headers() {}
        public static function canonicalize_header_name($key) {}
        public function get_header($key) {}
        public function get_header_as_array($key) {}
        public function set_header($key, $value) {}
        public function add_header($key, $value) {}
        public function remove_header($key) {}
        public function set_headers($headers, $override = true) {}
        /**
         * Retrieves the content-type of the request.
         *
         * @since 4.4.0
         *
         * @return array Map containing 'value' and 'parameters' keys.
         */
        public function get_content_type() {}
        /**
         * Retrieves the parameter priority order.
         *
         * Used when checking parameters in get_param().
         *
         * @since 4.4.0
         *
         * @return array List of types to check, in order of priority.
         */
        protected function get_parameter_order() {}
        public function get_param($key) {}
        public function set_param($key, $value) {}
        /**
         * Retrieves merged parameters from the request.
         *
         * The equivalent of get_param(), but returns all parameters for the request.
         * Handles merging all the available values into a single array.
         *
         * @since 4.4.0
         *
         * @return array Map of key to value.
         */
        public function get_params() {}
        /**
         * Retrieves parameters from the route itself.
         *
         * These are parsed from the URL using the regex.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value.
         */
        public function get_url_params() {}
        public function set_url_params($params) {}
        /**
         * Retrieves parameters from the query string.
         *
         * These are the parameters you'd typically find in `$_GET`.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value
         */
        public function get_query_params() {}
        public function set_query_params($params) {}
        /**
         * Retrieves parameters from the body.
         *
         * These are the parameters you'd typically find in `$_POST`.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value.
         */
        public function get_body_params() {}
        public function set_body_params($params) {}
        /**
         * Retrieves multipart file parameters from the body.
         *
         * These are the parameters you'd typically find in `$_FILES`.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value
         */
        public function get_file_params() {}
        public function set_file_params($params) {}
        /**
         * Retrieves the default parameters.
         *
         * These are the parameters set in the route registration.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value
         */
        public function get_default_params() {}
        public function set_default_params($params) {}
        /**
         * Retrieves the request body content.
         *
         * @since 4.4.0
         *
         * @return string Binary data from the request body.
         */
        public function get_body() {}
        public function set_body($data) {}
        /**
         * Retrieves the parameters from a JSON-formatted body.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value.
         */
        public function get_json_params() {}
        /**
         * Parses the JSON parameters.
         *
         * Avoids parsing the JSON data until we need to access it.
         *
         * @since 4.4.0
         * @since 4.7.0 Returns error instance if value cannot be decoded.
         * @return true|WP_Error True if the JSON data was passed or no JSON data was provided, WP_Error if invalid JSON was passed.
         */
        protected function parse_json_params() {}
        /**
         * Parses the request body parameters.
         *
         * Parses out URL-encoded bodies for request methods that aren't supported
         * natively by PHP. In PHP 5.x, only POST has these parsed automatically.
         *
         * @since 4.4.0
         */
        protected function parse_body_params() {}
        /**
         * Retrieves the route that matched the request.
         *
         * @since 4.4.0
         *
         * @return string Route matching regex.
         */
        public function get_route() {}
        public function set_route($route) {}
        /**
         * Retrieves the attributes for the request.
         *
         * These are the options for the route that was matched.
         *
         * @since 4.4.0
         *
         * @return array Attributes for the request.
         */
        public function get_attributes() {}
        public function set_attributes($attributes) {}
        /**
         * Sanitizes (where possible) the params on the request.
         *
         * This is primarily based off the sanitize_callback param on each registered
         * argument.
         *
         * @since 4.4.0
         *
         * @return true|WP_Error True if parameters were sanitized, WP_Error if an error occurred during sanitization.
         */
        public function sanitize_params() {}
        /**
         * Checks whether this request is valid according to its attributes.
         *
         * @since 4.4.0
         *
         * @return bool|WP_Error True if there are no parameters to validate or if all pass validation,
         *                       WP_Error if required parameters are missing.
         */
        public function has_valid_params() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
/**
 * Filters the request generated from a URL.
 *
 * @since 4.5.0
 *
 * @param WP_REST_Request|false $request Generated request object, or false if URL
 *                                       could not be parsed.
 * @param string                $url     URL the request was generated from.
 */
        public static function from_url(/**
 * Filters the request generated from a URL.
 *
 * @since 4.5.0
 *
 * @param WP_REST_Request|false $request Generated request object, or false if URL
 *                                       could not be parsed.
 * @param string                $url     URL the request was generated from.
 */
$url) {}
    }

    /**
     * Core class used to implement a REST response object.
     *
     * @since 4.4.0
     *
     * @see WP_HTTP_Response
     */
    class WP_REST_Response extends \wp_http_response {
        /**
         * Links related to the response.
         *
         * @since 4.4.0
         * @var array
         */
        protected $links;
        /**
         * The route that was to create the response.
         *
         * @since 4.4.0
         * @var string
         */
        protected $matched_route;
        /**
         * The handler that was used to create the response.
         *
         * @since 4.4.0
         * @var null|array
         */
        protected $matched_handler;

        public function add_link($rel, $href, $attributes = array( )) {}
        public function remove_link($rel, $href = null) {}
        public function add_links($links) {}
        /**
         * Retrieves links for the response.
         *
         * @since 4.4.0
         *
         * @return array List of links.
         */
        public function get_links() {}
        public function link_header($rel, $link, $other = array( )) {}
        /**
         * Retrieves the route that was used.
         *
         * @since 4.4.0
         *
         * @return string The matched route.
         */
        public function get_matched_route() {}
        public function set_matched_route($route) {}
        /**
         * Retrieves the handler that was used to generate the response.
         *
         * @since 4.4.0
         *
         * @return null|array The handler that was used to create the response.
         */
        public function get_matched_handler() {}
        public function set_matched_handler($handler) {}
        /**
         * Checks if the response is an error, i.e. >= 400 response code.
         *
         * @since 4.4.0
         *
         * @return bool Whether the response is an error.
         */
        public function is_error() {}
        /**
         * Retrieves a WP_Error object from the response.
         *
         * @since 4.4.0
         *
         * @return WP_Error|null WP_Error or null on not an errored response.
         */
        public function as_error() {}
        /**
         * Retrieves the CURIEs (compact URIs) used for relations.
         *
         * @since 4.5.0
         *
         * @return array Compact URIs.
         */
        public function get_curies() {}
    }

    /**
     * Core class to access posts via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Posts_Controller extends \wp_rest_controller {
        /**
         * Post type.
         *
         * @since 4.7.0
         * @var string
         */
        protected $post_type;
        /**
         * Instance of a post meta fields object.
         *
         * @since 4.7.0
         * @var WP_REST_Post_Meta_Fields
         */
        protected $meta;

        public function __construct($post_type) {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function get_items_permissions_check($request) {}
/**
 * Filters the query arguments for a request.
 *
 * Enables adding extra arguments or setting defaults for a post collection request.
 *
 * @since 4.7.0
 *
 * @link https://developer.wordpress.org/reference/classes/wp_query/
 *
 * @param array           $args    Key value array of query var to query value.
 * @param WP_REST_Request $request The request used.
 */
        public function get_items(/**
 * Filters the query arguments for a request.
 *
 * Enables adding extra arguments or setting defaults for a post collection request.
 *
 * @since 4.7.0
 *
 * @link https://developer.wordpress.org/reference/classes/wp_query/
 *
 * @param array           $args    Key value array of query var to query value.
 * @param WP_REST_Request $request The request used.
 */
$request) {}
        protected function get_post($id) {}
        public function get_item_permissions_check($request) {}
        public function can_access_password_content($post, $request) {}
        public function get_item($request) {}
        public function create_item_permissions_check($request) {}
/**
 * Fires after a single post is completely created or updated via the REST API.
 *
 * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 5.0.0
 *
 * @param WP_Post         $post     Inserted or updated post object.
 * @param WP_REST_Request $request  Request object.
 * @param bool            $creating True when creating a post, false when updating.
 */
        public function create_item(/**
 * Fires after a single post is completely created or updated via the REST API.
 *
 * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 5.0.0
 *
 * @param WP_Post         $post     Inserted or updated post object.
 * @param WP_REST_Request $request  Request object.
 * @param bool            $creating True when creating a post, false when updating.
 */
$request) {}
        public function update_item_permissions_check($request) {}
/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */
        public function update_item(/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */
$request) {}
        public function delete_item_permissions_check($request) {}
/**
 * Fires immediately after a single post is deleted or trashed via the REST API.
 *
 * They dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 4.7.0
 *
 * @param object           $post     The deleted or trashed post.
 * @param WP_REST_Response $response The response data.
 * @param WP_REST_Request  $request  The request sent to the API.
 */
        public function delete_item(/**
 * Fires immediately after a single post is deleted or trashed via the REST API.
 *
 * They dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 4.7.0
 *
 * @param object           $post     The deleted or trashed post.
 * @param WP_REST_Response $response The response data.
 * @param WP_REST_Request  $request  The request sent to the API.
 */
$request) {}
/**
 * Filters the query_vars used in get_items() for the constructed query.
 *
 * The dynamic portion of the hook name, `$key`, refers to the query_var key.
 *
 * @since 4.7.0
 *
 * @param string $value The query_var value.
 */
        protected function prepare_items_query(/**
 * Filters the query_vars used in get_items() for the constructed query.
 *
 * The dynamic portion of the hook name, `$key`, refers to the query_var key.
 *
 * @since 4.7.0
 *
 * @param string $value The query_var value.
 */
$prepared_args = array( ), /**
 * Filters the query_vars used in get_items() for the constructed query.
 *
 * The dynamic portion of the hook name, `$key`, refers to the query_var key.
 *
 * @since 4.7.0
 *
 * @param string $value The query_var value.
 */
$request = null) {}
        protected function prepare_date_response($date_gmt, $date = null) {}
/**
 * Filters a post before it is inserted via the REST API.
 *
 * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 4.7.0
 *
 * @param stdClass        $prepared_post An object representing a single post prepared
 *                                       for inserting or updating the database.
 * @param WP_REST_Request $request       Request object.
 */
        protected function prepare_item_for_database(/**
 * Filters a post before it is inserted via the REST API.
 *
 * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 4.7.0
 *
 * @param stdClass        $prepared_post An object representing a single post prepared
 *                                       for inserting or updating the database.
 * @param WP_REST_Request $request       Request object.
 */
$request) {}
        protected function handle_status_param($post_status, $post_type) {}
        protected function handle_featured_media($featured_media, $post_id) {}
        public function check_template($template, $request) {}
        public function handle_template($template, $post_id, $validate = false) {}
        protected function handle_terms($post_id, $request) {}
        protected function check_assign_terms_permission($request) {}
        protected function check_is_post_type_allowed($post_type) {}
        public function check_read_permission($post) {}
        protected function check_update_permission($post) {}
        protected function check_create_permission($post) {}
        protected function check_delete_permission($post) {}
/**
 * Filters the post data for a response.
 *
 * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     Post object.
 * @param WP_REST_Request  $request  Request object.
 */
        public function prepare_item_for_response(/**
 * Filters the post data for a response.
 *
 * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     Post object.
 * @param WP_REST_Request  $request  Request object.
 */
$post, /**
 * Filters the post data for a response.
 *
 * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     Post object.
 * @param WP_REST_Request  $request  Request object.
 */
$request) {}
        /**
         * Overwrites the default protected title format.
         *
         * By default, WordPress will show password protected posts with a title of
         * "Protected: %s", as the REST API communicates the protected status of a post
         * in a machine readable format, we remove the "Protected: " prefix.
         *
         * @since 4.7.0
         *
         * @return string Protected title format.
         */
        public function protected_title_format() {}
        protected function prepare_links($post) {}
        protected function get_available_actions($post, $request) {}
        /**
         * Retrieves the post's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Retrieve Link Description Objects that should be added to the Schema for the posts collection.
         *
         * @since 4.9.8
         *
         * @return array
         */
        protected function get_schema_links() {}
        /**
         * Filter collection parameters for the posts controller.
         *
         * The dynamic part of the filter `$this->post_type` refers to the post
         * type slug for the controller.
         *
         * This filter registers the collection parameter, but does not map the
         * collection parameter to an internal WP_Query parameter. Use the
         * `rest_{$this->post_type}_query` filter to set WP_Query parameters.
         *
         * @since 4.7.0
         *
         * @param array        $query_params JSON Schema-formatted collection parameters.
         * @param WP_Post_Type $post_type    Post type object.
         */
        public function get_collection_params() {}
        public function sanitize_post_statuses($statuses, $request, $parameter) {}
    }

    /**
     * Core class to access post types via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Post_Types_Controller extends \wp_rest_controller {
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct() {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function get_items_permissions_check($request) {}
        public function get_items($request) {}
        public function get_item($request) {}
/**
 * Filters a post type returned from the API.
 *
 * Allows modification of the post type data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $item     The original post type object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
        public function prepare_item_for_response(/**
 * Filters a post type returned from the API.
 *
 * Allows modification of the post type data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $item     The original post type object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$post_type, /**
 * Filters a post type returned from the API.
 *
 * Allows modification of the post type data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $item     The original post type object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$request) {}
        /**
         * Retrieves the post type's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params() {}
    }

    /**
     * Controller which provides REST endpoint for rendering a block.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Block_Renderer_Controller extends \wp_rest_controller {
        /**
         * Constructs the controller.
         *
         * @since 5.0.0
         */
        public function __construct() {}
        /**
         * Registers the necessary REST API routes, one for each dynamic block.
         *
         * @since 5.0.0
         */
        public function register_routes() {}
        public function get_item_permissions_check($request) {}
        public function get_item($request) {}
        /**
         * Retrieves block's output schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
    }

    /**
     * Core base controller for managing and interacting with REST API items.
     *
     * @since 4.7.0
     */
    abstract class WP_REST_Controller {
        /**
         * The namespace of this controller's route.
         *
         * @since 4.7.0
         * @var string
         */
        protected $namespace;
        /**
         * The base of this controller's route.
         *
         * @since 4.7.0
         * @var string
         */
        protected $rest_base;

        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         */
        public function register_routes() {}
        public function get_items_permissions_check($request) {}
        public function get_items($request) {}
        public function get_item_permissions_check($request) {}
        public function get_item($request) {}
        public function create_item_permissions_check($request) {}
        public function create_item($request) {}
        public function update_item_permissions_check($request) {}
        public function update_item($request) {}
        public function delete_item_permissions_check($request) {}
        public function delete_item($request) {}
        protected function prepare_item_for_database($request) {}
        public function prepare_item_for_response($item, $request) {}
        public function prepare_response_for_collection($response) {}
        public function filter_response_by_context($data, $context) {}
        /**
         * Retrieves the item's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Retrieves the item's schema for display / public consumption purposes.
         *
         * @since 4.7.0
         *
         * @return array Public item schema data.
         */
        public function get_public_item_schema() {}
        /**
         * Retrieves the query params for the collections.
         *
         * @since 4.7.0
         *
         * @return array Query parameters for the collection.
         */
        public function get_collection_params() {}
        public function get_context_param($args = array( )) {}
        protected function add_additional_fields_to_object($object, $request) {}
        protected function update_additional_fields_for_object($object, $request) {}
        protected function add_additional_fields_schema($schema) {}
        protected function get_additional_fields($object_type = null) {}
        /**
         * Retrieves the object type this controller is responsible for managing.
         *
         * @since 4.7.0
         *
         * @return string Object type for the controller.
         */
        protected function get_object_type() {}
        public function get_fields_for_response($request) {}
        public function get_endpoint_args_for_item_schema($method = WP_REST_Server::CREATABLE) {}
        public function sanitize_slug($slug) {}
    }

    /**
     * Core class used to access post statuses via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Post_Statuses_Controller extends \wp_rest_controller {
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct() {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function get_items_permissions_check($request) {}
        public function get_items($request) {}
        public function get_item_permissions_check($request) {}
        protected function check_read_permission($status) {}
        public function get_item($request) {}
/**
 * Filters a status returned from the REST API.
 *
 * Allows modification of the status data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $status   The original status object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
        public function prepare_item_for_response(/**
 * Filters a status returned from the REST API.
 *
 * Allows modification of the status data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $status   The original status object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$status, /**
 * Filters a status returned from the REST API.
 *
 * Allows modification of the status data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $status   The original status object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$request) {}
        /**
         * Retrieves the post status' schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params() {}
    }

    /**
     * Core class used to manage themes via the REST API.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Themes_Controller extends \wp_rest_controller {
        /**
         * Constructor.
         *
         * @since 5.0.0
         */
        public function __construct() {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 5.0.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function get_items_permissions_check($request) {}
        public function get_items($request) {}
/**
 * Filters theme data returned from the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Theme         $theme    Theme object used to create response.
 * @param WP_REST_Request  $request  Request object.
 */
        public function prepare_item_for_response(/**
 * Filters theme data returned from the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Theme         $theme    Theme object used to create response.
 * @param WP_REST_Request  $request  Request object.
 */
$theme, /**
 * Filters theme data returned from the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Theme         $theme    Theme object used to create response.
 * @param WP_REST_Request  $request  Request object.
 */
$request) {}
        /**
         * Retrieves the theme's schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Filter collection parameters for the themes controller.
         *
         * @since 5.0.0
         *
         * @param array        $query_params JSON Schema-formatted collection parameters.
         */
        public function get_collection_params() {}
        public function sanitize_theme_status($statuses, $request, $parameter) {}
    }

    /**
     * Controller which provides a REST endpoint for the editor to read, create,
     * edit and delete reusable blocks. Blocks are stored as posts with the wp_block
     * post type.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Posts_Controller
     * @see WP_REST_Controller
     */
    class WP_REST_Blocks_Controller extends \wp_rest_posts_controller {
        public function check_read_permission($post) {}
        public function filter_response_by_context($data, $context) {}
        /**
         * Retrieves the block's schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
    }

    /**
     * Core controller used to access attachments via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Posts_Controller
     */
    class WP_REST_Attachments_Controller extends \wp_rest_posts_controller {
        protected function prepare_items_query($prepared_args = array( ), $request = null) {}
        public function create_item_permissions_check($request) {}
/**
 * Fires after a single attachment is completely created or updated via the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_Post         $attachment Inserted or updated attachment object.
 * @param WP_REST_Request $request    Request object.
 * @param bool            $creating   True when creating an attachment, false when updating.
 */
        public function create_item(/**
 * Fires after a single attachment is completely created or updated via the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_Post         $attachment Inserted or updated attachment object.
 * @param WP_REST_Request $request    Request object.
 * @param bool            $creating   True when creating an attachment, false when updating.
 */
$request) {}
/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-attachments-controller.php */
        public function update_item(/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-attachments-controller.php */
$request) {}
        protected function prepare_item_for_database($request) {}
/**
 * Filters an attachment returned from the REST API.
 *
 * Allows modification of the attachment right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original attachment post.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
        public function prepare_item_for_response(/**
 * Filters an attachment returned from the REST API.
 *
 * Allows modification of the attachment right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original attachment post.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$post, /**
 * Filters an attachment returned from the REST API.
 *
 * Allows modification of the attachment right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original attachment post.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$request) {}
        /**
         * Retrieves the attachment's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema as an array.
         */
        public function get_item_schema() {}
/** Include admin functions to get access to wp_tempnam() and wp_handle_sideload(). */
        protected function upload_from_data(/** Include admin functions to get access to wp_tempnam() and wp_handle_sideload(). */
$data, /** Include admin functions to get access to wp_tempnam() and wp_handle_sideload(). */
$headers) {}
        public static function get_filename_from_disposition($disposition_header) {}
        /**
         * Retrieves the query params for collections of attachments.
         *
         * @since 4.7.0
         *
         * @return array Query parameters for the attachment collection as an array.
         */
        public function get_collection_params() {}
        public function validate_user_can_query_private_statuses($value, $request, $parameter) {}
/** Include admin function to get access to wp_handle_upload(). */
        protected function upload_from_file(/** Include admin function to get access to wp_handle_upload(). */
$files, /** Include admin function to get access to wp_handle_upload(). */
$headers) {}
        /**
         * Retrieves the supported media types.
         *
         * Media types are considered the MIME type category.
         *
         * @since 4.7.0
         *
         * @return array Array of supported media types.
         */
        protected function get_media_types() {}
        protected function check_upload_size($file) {}
    }

    /**
     * Core class used to manage taxonomies via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Taxonomies_Controller extends \wp_rest_controller {
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct() {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function get_items_permissions_check($request) {}
        public function get_items($request) {}
        public function get_item_permissions_check($request) {}
        public function get_item($request) {}
/**
 * Filters a taxonomy returned from the REST API.
 *
 * Allows modification of the taxonomy data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $item     The original taxonomy object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
        public function prepare_item_for_response(/**
 * Filters a taxonomy returned from the REST API.
 *
 * Allows modification of the taxonomy data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $item     The original taxonomy object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$taxonomy, /**
 * Filters a taxonomy returned from the REST API.
 *
 * Allows modification of the taxonomy data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $item     The original taxonomy object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$request) {}
        /**
         * Retrieves the taxonomy's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params() {}
    }

    /**
     * Core class used to manage a site's settings via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Settings_Controller extends \wp_rest_controller {
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct() {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function get_item_permissions_check($request) {}
/**
 * Filters the value of a setting recognized by the REST API.
 *
 * Allow hijacking the setting value and overriding the built-in behavior by returning a
 * non-null value.  The returned value will be presented as the setting value instead.
 *
 * @since 4.7.0
 *
 * @param mixed  $result Value to use for the requested setting. Can be a scalar
 *                       matching the registered schema for the setting, or null to
 *                       follow the default get_option() behavior.
 * @param string $name   Setting name (as shown in REST API responses).
 * @param array  $args   Arguments passed to register_setting() for this setting.
 */
        public function get_item(/**
 * Filters the value of a setting recognized by the REST API.
 *
 * Allow hijacking the setting value and overriding the built-in behavior by returning a
 * non-null value.  The returned value will be presented as the setting value instead.
 *
 * @since 4.7.0
 *
 * @param mixed  $result Value to use for the requested setting. Can be a scalar
 *                       matching the registered schema for the setting, or null to
 *                       follow the default get_option() behavior.
 * @param string $name   Setting name (as shown in REST API responses).
 * @param array  $args   Arguments passed to register_setting() for this setting.
 */
$request) {}
        protected function prepare_value($value, $schema) {}
/**
 * Filters whether to preempt a setting value update.
 *
 * Allows hijacking the setting update logic and overriding the built-in behavior by
 * returning true.
 *
 * @since 4.7.0
 *
 * @param bool   $result Whether to override the default behavior for updating the
 *                       value of a setting.
 * @param string $name   Setting name (as shown in REST API responses).
 * @param mixed  $value  Updated setting value.
 * @param array  $args   Arguments passed to register_setting() for this setting.
 */
        public function update_item(/**
 * Filters whether to preempt a setting value update.
 *
 * Allows hijacking the setting update logic and overriding the built-in behavior by
 * returning true.
 *
 * @since 4.7.0
 *
 * @param bool   $result Whether to override the default behavior for updating the
 *                       value of a setting.
 * @param string $name   Setting name (as shown in REST API responses).
 * @param mixed  $value  Updated setting value.
 * @param array  $args   Arguments passed to register_setting() for this setting.
 */
$request) {}
        /**
         * Retrieves all of the registered options for the Settings API.
         *
         * @since 4.7.0
         *
         * @return array Array of registered options.
         */
        protected function get_registered_options() {}
        /**
         * Retrieves the site setting schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        public function sanitize_callback($value, $request, $param) {}
        protected function set_additional_properties_to_false($schema) {}
    }

    /**
     * Core class used to access revisions via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Revisions_Controller extends \wp_rest_controller {
        /**
         * Parent post type.
         *
         * @since 4.7.0
         * @var string
         */
        private $parent_post_type;
        /**
         * Parent controller.
         *
         * @since 4.7.0
         * @var WP_REST_Controller
         */
        private $parent_controller;
        /**
         * The base of the parent controller's route.
         *
         * @since 4.7.0
         * @var string
         */
        private $parent_base;

        public function __construct($parent_post_type) {}
        /**
         * Registers routes for revisions based on post types supporting revisions.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        protected function get_parent($parent) {}
        public function get_items_permissions_check($request) {}
        protected function get_revision($id) {}
/** This filter is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */
        public function get_items(/** This filter is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */
$request) {}
        public function get_item_permissions_check($request) {}
        public function get_item($request) {}
        public function delete_item_permissions_check($request) {}
/**
 * Fires after a revision is deleted via the REST API.
 *
 * @since 4.7.0
 *
 * @param (mixed) $result The revision object (if it was deleted or moved to the trash successfully)
 *                        or false (failure). If the revision was moved to the trash, $result represents
 *                        its new state; if it was deleted, $result represents its state before deletion.
 * @param WP_REST_Request $request The request sent to the API.
 */
        public function delete_item(/**
 * Fires after a revision is deleted via the REST API.
 *
 * @since 4.7.0
 *
 * @param (mixed) $result The revision object (if it was deleted or moved to the trash successfully)
 *                        or false (failure). If the revision was moved to the trash, $result represents
 *                        its new state; if it was deleted, $result represents its state before deletion.
 * @param WP_REST_Request $request The request sent to the API.
 */
$request) {}
/** This filter is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */
        protected function prepare_items_query(/** This filter is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */
$prepared_args = array( ), /** This filter is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */
$request = null) {}
/**
 * Filters a revision returned from the API.
 *
 * Allows modification of the revision right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original revision object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
        public function prepare_item_for_response(/**
 * Filters a revision returned from the API.
 *
 * Allows modification of the revision right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original revision object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$post, /**
 * Filters a revision returned from the API.
 *
 * Allows modification of the revision right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original revision object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$request) {}
        protected function prepare_date_response($date_gmt, $date = null) {}
        /**
         * Retrieves the revision's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params() {}
/** This filter is documented in wp-includes/post-template.php */
        protected function prepare_excerpt_response(/** This filter is documented in wp-includes/post-template.php */
$excerpt, /** This filter is documented in wp-includes/post-template.php */
$post) {}
    }

    /**
     * Core class to search through all WordPress content via the REST API.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Search_Controller extends \wp_rest_controller {
        const PROP_TITLE = 'title';
        const PROP_ID = 'id';
        const PROP_URL = 'url';
        const PROP_SUBTYPE = 'subtype';
        const PROP_TYPE = 'type';
        const TYPE_ANY = 'any';

        /**
         * Search handlers used by the controller.
         *
         * @since 5.0.0
         * @var array
         */
        protected $search_handlers;

        public function __construct(array $search_handlers) {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 5.0.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function get_items_permission_check($request) {}
        public function get_items($request) {}
        public function prepare_item_for_response($id, $request) {}
        /**
         * Retrieves the item schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Retrieves the query params for the search results collection.
         *
         * @since 5.0.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params() {}
        public function sanitize_subtypes($subtypes, $request, $parameter) {}
        protected function get_search_handler($request) {}
    }

    /**
     * Core class used to manage users via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Users_Controller extends \wp_rest_controller {
        /**
         * Instance of a user meta fields object.
         *
         * @since 4.7.0
         * @var WP_REST_User_Meta_Fields
         */
        protected $meta;

        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct() {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function check_reassign($value, $request, $param) {}
        public function get_items_permissions_check($request) {}
/**
 * Filters WP_User_Query arguments when querying users via the REST API.
 *
 * @link https://developer.wordpress.org/reference/classes/wp_user_query/
 *
 * @since 4.7.0
 *
 * @param array           $prepared_args Array of arguments for WP_User_Query.
 * @param WP_REST_Request $request       The current request.
 */
        public function get_items(/**
 * Filters WP_User_Query arguments when querying users via the REST API.
 *
 * @link https://developer.wordpress.org/reference/classes/wp_user_query/
 *
 * @since 4.7.0
 *
 * @param array           $prepared_args Array of arguments for WP_User_Query.
 * @param WP_REST_Request $request       The current request.
 */
$request) {}
        protected function get_user($id) {}
        public function get_item_permissions_check($request) {}
        public function get_item($request) {}
        public function get_current_item($request) {}
        public function create_item_permissions_check($request) {}
/**
 * Fires after a user is completely created or updated via the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_User         $user     Inserted or updated user object.
 * @param WP_REST_Request $request  Request object.
 * @param bool            $creating True when creating a user, false when updating.
 */
        public function create_item(/**
 * Fires after a user is completely created or updated via the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_User         $user     Inserted or updated user object.
 * @param WP_REST_Request $request  Request object.
 * @param bool            $creating True when creating a user, false when updating.
 */
$request) {}
        public function update_item_permissions_check($request) {}
/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php */
        public function update_item(/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php */
$request) {}
        public function update_current_item_permissions_check($request) {}
        function update_current_item($request) {}
        public function delete_item_permissions_check($request) {}
/**
 * Fires immediately after a user is deleted via the REST API.
 *
 * @since 4.7.0
 *
 * @param WP_User          $user     The user data.
 * @param WP_REST_Response $response The response returned from the API.
 * @param WP_REST_Request  $request  The request sent to the API.
 */
        public function delete_item(/**
 * Fires immediately after a user is deleted via the REST API.
 *
 * @since 4.7.0
 *
 * @param WP_User          $user     The user data.
 * @param WP_REST_Response $response The response returned from the API.
 * @param WP_REST_Request  $request  The request sent to the API.
 */
$request) {}
        public function delete_current_item_permissions_check($request) {}
        function delete_current_item($request) {}
/**
 * Filters user data returned from the REST API.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $user     User object used to create response.
 * @param WP_REST_Request  $request  Request object.
 */
        public function prepare_item_for_response(/**
 * Filters user data returned from the REST API.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $user     User object used to create response.
 * @param WP_REST_Request  $request  Request object.
 */
$user, /**
 * Filters user data returned from the REST API.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response $response The response object.
 * @param object           $user     User object used to create response.
 * @param WP_REST_Request  $request  Request object.
 */
$request) {}
        protected function prepare_links($user) {}
/**
 * Filters user data before insertion via the REST API.
 *
 * @since 4.7.0
 *
 * @param object          $prepared_user User object.
 * @param WP_REST_Request $request       Request object.
 */
        protected function prepare_item_for_database(/**
 * Filters user data before insertion via the REST API.
 *
 * @since 4.7.0
 *
 * @param object          $prepared_user User object.
 * @param WP_REST_Request $request       Request object.
 */
$request) {}
/** Include admin functions to get access to get_editable_roles() */
        protected function check_role_update(/** Include admin functions to get access to get_editable_roles() */
$user_id, /** Include admin functions to get access to get_editable_roles() */
$roles) {}
/** This filter is documented in wp-includes/user.php */
        public function check_username(/** This filter is documented in wp-includes/user.php */
$value, /** This filter is documented in wp-includes/user.php */
$request, /** This filter is documented in wp-includes/user.php */
$param) {}
        public function check_user_password($value, $request, $param) {}
        /**
         * Retrieves the user's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Filter collection parameters for the users controller.
         *
         * This filter registers the collection parameter, but does not map the
         * collection parameter to an internal WP_User_Query parameter.  Use the
         * `rest_user_query` filter to set WP_User_Query arguments.
         *
         * @since 4.7.0
         *
         * @param array $query_params JSON Schema-formatted collection parameters.
         */
        public function get_collection_params() {}
    }

    /**
     * Core class used to managed terms associated with a taxonomy via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Terms_Controller extends \wp_rest_controller {
        /**
         * Taxonomy key.
         *
         * @since 4.7.0
         * @var string
         */
        protected $taxonomy;
        /**
         * Instance of a term meta fields object.
         *
         * @since 4.7.0
         * @var WP_REST_Term_Meta_Fields
         */
        protected $meta;
        /**
         * Column to have the terms be sorted by.
         *
         * @since 4.7.0
         * @var string
         */
        protected $sort_column;
        /**
         * Number of terms that were found.
         *
         * @since 4.7.0
         * @var int
         */
        protected $total_terms;

        public function __construct($taxonomy) {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        public function get_items_permissions_check($request) {}
/**
 * Filters the query arguments before passing them to get_terms().
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * Enables adding extra arguments or setting defaults for a terms
 * collection request.
 *
 * @since 4.7.0
 *
 * @link https://developer.wordpress.org/reference/functions/get_terms/
 *
 * @param array           $prepared_args Array of arguments to be
 *                                       passed to get_terms().
 * @param WP_REST_Request $request       The current request.
 */
        public function get_items(/**
 * Filters the query arguments before passing them to get_terms().
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * Enables adding extra arguments or setting defaults for a terms
 * collection request.
 *
 * @since 4.7.0
 *
 * @link https://developer.wordpress.org/reference/functions/get_terms/
 *
 * @param array           $prepared_args Array of arguments to be
 *                                       passed to get_terms().
 * @param WP_REST_Request $request       The current request.
 */
$request) {}
        protected function get_term($id) {}
        public function get_item_permissions_check($request) {}
        public function get_item($request) {}
        public function create_item_permissions_check($request) {}
/**
 * Fires after a single term is completely created or updated via the REST API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * @since 5.0.0
 *
 * @param WP_Term         $term     Inserted or updated term object.
 * @param WP_REST_Request $request  Request object.
 * @param bool            $creating True when creating a term, false when updating.
 */
        public function create_item(/**
 * Fires after a single term is completely created or updated via the REST API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * @since 5.0.0
 *
 * @param WP_Term         $term     Inserted or updated term object.
 * @param WP_REST_Request $request  Request object.
 * @param bool            $creating True when creating a term, false when updating.
 */
$request) {}
        public function update_item_permissions_check($request) {}
/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php */
        public function update_item(/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php */
$request) {}
        public function delete_item_permissions_check($request) {}
/**
 * Fires after a single term is deleted via the REST API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * @since 4.7.0
 *
 * @param WP_Term          $term     The deleted term.
 * @param WP_REST_Response $response The response data.
 * @param WP_REST_Request  $request  The request sent to the API.
 */
        public function delete_item(/**
 * Fires after a single term is deleted via the REST API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * @since 4.7.0
 *
 * @param WP_Term          $term     The deleted term.
 * @param WP_REST_Response $response The response data.
 * @param WP_REST_Request  $request  The request sent to the API.
 */
$request) {}
/**
 * Filters term data before inserting term via the REST API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * @since 4.7.0
 *
 * @param object          $prepared_term Term object.
 * @param WP_REST_Request $request       Request object.
 */
        public function prepare_item_for_database(/**
 * Filters term data before inserting term via the REST API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * @since 4.7.0
 *
 * @param object          $prepared_term Term object.
 * @param WP_REST_Request $request       Request object.
 */
$request) {}
/**
 * Filters a term item returned from the API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * Allows modification of the term data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response  $response  The response object.
 * @param object            $item      The original term object.
 * @param WP_REST_Request   $request   Request used to generate the response.
 */
        public function prepare_item_for_response(/**
 * Filters a term item returned from the API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * Allows modification of the term data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response  $response  The response object.
 * @param object            $item      The original term object.
 * @param WP_REST_Request   $request   Request used to generate the response.
 */
$item, /**
 * Filters a term item returned from the API.
 *
 * The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.
 *
 * Allows modification of the term data right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response  $response  The response object.
 * @param object            $item      The original term object.
 * @param WP_REST_Request   $request   Request used to generate the response.
 */
$request) {}
        protected function prepare_links($term) {}
        /**
         * Retrieves the term's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params() {}
        protected function check_is_taxonomy_allowed($taxonomy) {}
    }

    /**
     * Core controller used to access comments via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Comments_Controller extends \wp_rest_controller {
        /**
         * Instance of a comment meta fields object.
         *
         * @since 4.7.0
         * @var WP_REST_Comment_Meta_Fields
         */
        protected $meta;

        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct() {}
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         */
        public function register_routes() {}
        public function get_items_permissions_check($request) {}
/**
 * Filters arguments, before passing to WP_Comment_Query, when querying comments via the REST API.
 *
 * @since 4.7.0
 *
 * @link https://developer.wordpress.org/reference/classes/wp_comment_query/
 *
 * @param array           $prepared_args Array of arguments for WP_Comment_Query.
 * @param WP_REST_Request $request       The current request.
 */
        public function get_items(/**
 * Filters arguments, before passing to WP_Comment_Query, when querying comments via the REST API.
 *
 * @since 4.7.0
 *
 * @link https://developer.wordpress.org/reference/classes/wp_comment_query/
 *
 * @param array           $prepared_args Array of arguments for WP_Comment_Query.
 * @param WP_REST_Request $request       The current request.
 */
$request) {}
        protected function get_comment($id) {}
        public function get_item_permissions_check($request) {}
        public function get_item($request) {}
/**
 * Filter whether comments can be created without authentication.
 *
 * Enables creating comments for anonymous users.
 *
 * @since 4.7.0
 *
 * @param bool $allow_anonymous Whether to allow anonymous comments to
 *                              be created. Default `false`.
 * @param WP_REST_Request $request Request used to generate the
 *                                 response.
 */
        public function create_item_permissions_check(/**
 * Filter whether comments can be created without authentication.
 *
 * Enables creating comments for anonymous users.
 *
 * @since 4.7.0
 *
 * @param bool $allow_anonymous Whether to allow anonymous comments to
 *                              be created. Default `false`.
 * @param WP_REST_Request $request Request used to generate the
 *                                 response.
 */
$request) {}
/**
 * Fires completely after a comment is created or updated via the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_Comment      $comment  Inserted or updated comment object.
 * @param WP_REST_Request $request  Request object.
 * @param bool            $creating True when creating a comment, false
 *                                  when updating.
 */
        public function create_item(/**
 * Fires completely after a comment is created or updated via the REST API.
 *
 * @since 5.0.0
 *
 * @param WP_Comment      $comment  Inserted or updated comment object.
 * @param WP_REST_Request $request  Request object.
 * @param bool            $creating True when creating a comment, false
 *                                  when updating.
 */
$request) {}
        public function update_item_permissions_check($request) {}
/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php */
        public function update_item(/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php */
$request) {}
        public function delete_item_permissions_check($request) {}
/**
 * Fires after a comment is deleted via the REST API.
 *
 * @since 4.7.0
 *
 * @param WP_Comment       $comment  The deleted comment data.
 * @param WP_REST_Response $response The response returned from the API.
 * @param WP_REST_Request  $request  The request sent to the API.
 */
        public function delete_item(/**
 * Fires after a comment is deleted via the REST API.
 *
 * @since 4.7.0
 *
 * @param WP_Comment       $comment  The deleted comment data.
 * @param WP_REST_Response $response The response returned from the API.
 * @param WP_REST_Request  $request  The request sent to the API.
 */
$request) {}
/**
 * Filters a comment returned from the API.
 *
 * Allows modification of the comment right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response  $response The response object.
 * @param WP_Comment        $comment  The original comment object.
 * @param WP_REST_Request   $request  Request used to generate the response.
 */
        public function prepare_item_for_response(/**
 * Filters a comment returned from the API.
 *
 * Allows modification of the comment right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response  $response The response object.
 * @param WP_Comment        $comment  The original comment object.
 * @param WP_REST_Request   $request  Request used to generate the response.
 */
$comment, /**
 * Filters a comment returned from the API.
 *
 * Allows modification of the comment right before it is returned.
 *
 * @since 4.7.0
 *
 * @param WP_REST_Response  $response The response object.
 * @param WP_Comment        $comment  The original comment object.
 * @param WP_REST_Request   $request  Request used to generate the response.
 */
$request) {}
        protected function prepare_links($comment) {}
        protected function normalize_query_param($query_param) {}
        protected function prepare_status_response($comment_approved) {}
/**
 * Filters a comment after it is prepared for the database.
 *
 * Allows modification of the comment right after it is prepared for the database.
 *
 * @since 4.7.0
 *
 * @param array           $prepared_comment The prepared comment data for `wp_insert_comment`.
 * @param WP_REST_Request $request          The current request.
 */
        protected function prepare_item_for_database(/**
 * Filters a comment after it is prepared for the database.
 *
 * Allows modification of the comment right after it is prepared for the database.
 *
 * @since 4.7.0
 *
 * @param array           $prepared_comment The prepared comment data for `wp_insert_comment`.
 * @param WP_REST_Request $request          The current request.
 */
$request) {}
        /**
         * Retrieves the comment's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_item_schema() {}
        /**
         * Filter collection parameters for the comments controller.
         *
         * This filter registers the collection parameter, but does not map the
         * collection parameter to an internal WP_Comment_Query parameter. Use the
         * `rest_comment_query` filter to set WP_Comment_Query parameters.
         *
         * @since 4.7.0
         *
         * @param array $query_params JSON Schema-formatted collection parameters.
         */
        public function get_collection_params() {}
        protected function handle_status_param($new_status, $comment_id) {}
        protected function check_read_post_permission($post, $request) {}
        protected function check_read_permission($comment, $request) {}
        protected function check_edit_permission($comment) {}
        public function check_comment_author_email($value, $request, $param) {}
    }

    /**
     * Core class used to access autosaves via the REST API.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Autosaves_Controller extends \wp_rest_revisions_controller {
        /**
         * Parent post type.
         *
         * @since 5.0.0
         * @var string
         */
        private $parent_post_type;
        /**
         * Parent post controller.
         *
         * @since 5.0.0
         * @var WP_REST_Controller
         */
        private $parent_controller;
        /**
         * Revision controller.
         *
         * @since 5.0.0
         * @var WP_REST_Controller
         */
        private $revisions_controller;
        /**
         * The base of the parent controller's route.
         *
         * @since 5.0.0
         * @var string
         */
        private $parent_base;

        public function __construct($parent_post_type) {}
        /**
         * Registers routes for autosaves.
         *
         * @since 5.0.0
         *
         * @see register_rest_route()
         */
        public function register_routes() {}
        protected function get_parent($parent_id) {}
        public function get_items_permissions_check($request) {}
        public function create_item_permissions_check($request) {}
        public function create_item($request) {}
        public function get_item($request) {}
        public function get_items($request) {}
        /**
         * Retrieves the autosave's schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema() {}
/**
 * This filter is documented in wp-admin/post.php.
 */
        public function create_post_autosave(/**
 * This filter is documented in wp-admin/post.php.
 */
$post_data) {}
/**
 * Filters a revision returned from the API.
 *
 * Allows modification of the revision right before it is returned.
 *
 * @since 5.0.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original revision object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
        public function prepare_item_for_response(/**
 * Filters a revision returned from the API.
 *
 * Allows modification of the revision right before it is returned.
 *
 * @since 5.0.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original revision object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$post, /**
 * Filters a revision returned from the API.
 *
 * Allows modification of the revision right before it is returned.
 *
 * @since 5.0.0
 *
 * @param WP_REST_Response $response The response object.
 * @param WP_Post          $post     The original revision object.
 * @param WP_REST_Request  $request  Request used to generate the response.
 */
$request) {}
        /**
         * Retrieves the query params for the autosaves collection.
         *
         * @since 5.0.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params() {}
    }

    /**
     * Core base class representing a search handler for an object type in the REST API.
     *
     * @since 5.0.0
     */
    abstract class WP_REST_Search_Handler {
        const RESULT_IDS = 'ids';
        const RESULT_TOTAL = 'total';

        /**
         * Object type managed by this search handler.
         *
         * @since 5.0.0
         * @var string
         */
        protected $type;
        /**
         * Object subtypes managed by this search handler.
         *
         * @since 5.0.0
         * @var array
         */
        protected $subtypes;

        /**
         * Gets the object type managed by this search handler.
         *
         * @since 5.0.0
         *
         * @return string Object type identifier.
         */
        public function get_type() {}
        /**
         * Gets the object subtypes managed by this search handler.
         *
         * @since 5.0.0
         *
         * @return array Array of object subtype identifiers.
         */
        public function get_subtypes() {}
        abstract public function search_items(WP_REST_Request $request) ;
        abstract public function prepare_item($id, array $fields) ;
        abstract public function prepare_item_links($id) ;
    }

    /**
     * Core class representing a search handler for posts in the REST API.
     *
     * @since 5.0.0
     */
    class WP_REST_Post_Search_Handler extends \wp_rest_search_handler {
        /**
         * Constructor.
         *
         * @since 5.0.0
         */
        public function __construct() {}
/**
 * Filters the query arguments for a search request.
 *
 * Enables adding extra arguments or setting defaults for a post search request.
 *
 * @since 5.1.0
 *
 * @param array           $query_args Key value array of query var to query value.
 * @param WP_REST_Request $request    The request used.
 */
        public function search_items(/**
 * Filters the query arguments for a search request.
 *
 * Enables adding extra arguments or setting defaults for a post search request.
 *
 * @since 5.1.0
 *
 * @param array           $query_args Key value array of query var to query value.
 * @param WP_REST_Request $request    The request used.
 */
WP_REST_Request $request) {}
        public function prepare_item($id, array $fields) {}
        public function prepare_item_links($id) {}
        /**
         * Overwrites the default protected title format.
         *
         * By default, WordPress will show password protected posts with a title of
         * "Protected: %s". As the REST API communicates the protected status of a post
         * in a machine readable format, we remove the "Protected: " prefix.
         *
         * @since 5.0.0
         *
         * @return string Protected title format.
         */
        public function protected_title_format() {}
        protected function detect_rest_item_route($post) {}
    }

    /**
     * Core class used to manage meta values for users via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Meta_Fields
     */
    class WP_REST_User_Meta_Fields extends \wp_rest_meta_fields {
        /**
         * Retrieves the object meta type.
         *
         * @since 4.7.0
         *
         * @return string The user meta type.
         */
        protected function get_meta_type() {}
        /**
         * Retrieves the object meta subtype.
         *
         * @since 4.9.8
         *
         * @return string 'user' There are no subtypes.
         */
        protected function get_meta_subtype() {}
        /**
         * Retrieves the type for register_rest_field().
         *
         * @since 4.7.0
         *
         * @return string The user REST field type.
         */
        public function get_rest_field_type() {}
    }

    /**
     * Core class used to manage meta values for terms via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Meta_Fields
     */
    class WP_REST_Term_Meta_Fields extends \wp_rest_meta_fields {
        /**
         * Taxonomy to register fields for.
         *
         * @since 4.7.0
         * @var string
         */
        protected $taxonomy;

        public function __construct($taxonomy) {}
        /**
         * Retrieves the object meta type.
         *
         * @since 4.7.0
         *
         * @return string The meta type.
         */
        protected function get_meta_type() {}
        /**
         * Retrieves the object meta subtype.
         *
         * @since 4.9.8
         *
         * @return string Subtype for the meta type, or empty string if no specific subtype.
         */
        protected function get_meta_subtype() {}
        /**
         * Retrieves the type for register_rest_field().
         *
         * @since 4.7.0
         *
         * @return string The REST field type.
         */
        public function get_rest_field_type() {}
    }

    /**
     * Core class to manage meta values for an object via the REST API.
     *
     * @since 4.7.0
     */
    abstract class WP_REST_Meta_Fields {
        /**
         * Retrieves the object meta type.
         *
         * @since 4.7.0
         *
         * @return string One of 'post', 'comment', 'term', 'user', or anything
         *                else supported by `_get_meta_table()`.
         */
        abstract protected function get_meta_type() ;
        /**
         * Retrieves the object meta subtype.
         *
         * @since 4.9.8
         *
         * @return string Subtype for the meta type, or empty string if no specific subtype.
         */
        protected function get_meta_subtype() {}
        /**
         * Retrieves the object type for register_rest_field().
         *
         * @since 4.7.0
         *
         * @return string The REST field type, such as post type name, taxonomy name, 'comment', or `user`.
         */
        abstract protected function get_rest_field_type() ;
        /**
         * Registers the meta field.
         *
         * @since 4.7.0
         *
         * @see register_rest_field()
         */
        public function register_field() {}
        public function get_value($object_id, $request) {}
        protected function prepare_value_for_response($value, $request, $args) {}
        public function update_value($meta, $object_id) {}
        protected function delete_meta_value($object_id, $meta_key, $name) {}
        protected function update_multi_meta_value($object_id, $meta_key, $name, $values) {}
        protected function update_meta_value($object_id, $meta_key, $name, $value) {}
        /**
         * Retrieves all the registered meta fields.
         *
         * @since 4.7.0
         *
         * @return array Registered fields.
         */
        protected function get_registered_fields() {}
        /**
         * Retrieves the object's meta schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Field schema data.
         */
        public function get_field_schema() {}
        public static function prepare_value($value, $request, $args) {}
        public function check_meta_is_array($value, $request, $param) {}
    }

    /**
     * Core class to manage comment meta via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Meta_Fields
     */
    class WP_REST_Comment_Meta_Fields extends \wp_rest_meta_fields {
        /**
         * Retrieves the object type for comment meta.
         *
         * @since 4.7.0
         *
         * @return string The meta type.
         */
        protected function get_meta_type() {}
        /**
         * Retrieves the object meta subtype.
         *
         * @since 4.9.8
         *
         * @return string 'comment' There are no subtypes.
         */
        protected function get_meta_subtype() {}
        /**
         * Retrieves the type for register_rest_field() in the context of comments.
         *
         * @since 4.7.0
         *
         * @return string The REST field type.
         */
        public function get_rest_field_type() {}
    }

    /**
     * Core class used to manage meta values for posts via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Meta_Fields
     */
    class WP_REST_Post_Meta_Fields extends \wp_rest_meta_fields {
        /**
         * Post type to register fields for.
         *
         * @since 4.7.0
         * @var string
         */
        protected $post_type;

        public function __construct($post_type) {}
        /**
         * Retrieves the object meta type.
         *
         * @since 4.7.0
         *
         * @return string The meta type.
         */
        protected function get_meta_type() {}
        /**
         * Retrieves the object meta subtype.
         *
         * @since 4.9.8
         *
         * @return string Subtype for the meta type, or empty string if no specific subtype.
         */
        protected function get_meta_subtype() {}
        /**
         * Retrieves the type for register_rest_field().
         *
         * @since 4.7.0
         *
         * @see register_rest_field()
         *
         * @return string The REST field type.
         */
        public function get_rest_field_type() {}
    }

    /**
     * Customize Menu Section Class
     *
     * Custom section only needed in JS.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Section
     */
    class WP_Customize_Nav_Menu_Section extends \wp_customize_section {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;

        /**
         * Get section parameters for JS.
         *
         * @since 4.3.0
         * @return array Exported parameters.
         */
        public function json() {}
    }

    /**
     * A setting that is used to filter a value, but will not save the results.
     *
     * Results should be properly handled using another setting or callback.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Setting
     */
    class WP_Customize_Filter_Setting extends \wp_customize_setting {
        public function update($value) {}
    }

    /**
     * Customize Background Image Control class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Image_Control
     */
    class WP_Customize_Background_Image_Control extends \wp_customize_image_control {
        public $type;

        public function __construct($manager) {}
        /**
         * Enqueue control related scripts/styles.
         *
         * @since 4.1.0
         */
        public function enqueue() {}
    }

    /**
     * Customize control to represent the name field for a given menu.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Name_Control extends \wp_customize_control {
        /**
         * Type of control, used by JS.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;

        /**
         * No-op since we're using JS template.
         *
         * @since 4.3.0
         */
        protected function render_content() {}
        /**
         * Render the Underscore template for this control.
         *
         * @since 4.3.0
         */
        protected function content_template() {}
    }

    /**
     * Customize Header Image Control class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Image_Control
     */
    class WP_Customize_Header_Image_Control extends \wp_customize_image_control {
        /**
         * Customize control type.
         *
         * @since 4.2.0
         * @var string
         */
        public $type;
        /**
         * Uploaded header images.
         *
         * @since 3.9.0
         * @var string
         */
        public $uploaded_headers;
        /**
         * Default header images.
         *
         * @since 3.9.0
         * @var string
         */
        public $default_headers;

        public function __construct($manager) {}
        /**
         */
        public function enqueue() {}
        /**
         * @global Custom_Image_Header $custom_image_header
         */
        public function prepare_control() {}
        /**
         */
        public function print_header_image_template() {}
        /**
         * @return string|void
         */
        public function get_current_image_src() {}
        /**
         */
        public function render_content() {}
    }

    /**
     * Customize control to represent the name field for a given menu.
     *
     * @since 4.3.0
     */
    class WP_Customize_Nav_Menu_Item_Control extends \wp_customize_control {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;
        /**
         * The nav menu item setting.
         *
         * @since 4.3.0
         * @var WP_Customize_Nav_Menu_Item_Setting
         */
        public $setting;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Don't render the control's content - it's rendered with a JS template.
         *
         * @since 4.3.0
         */
        public function render_content() {}
        /**
         * JS/Underscore template for the control UI.
         *
         * @since 4.3.0
         */
        public function content_template() {}
        /**
         * Return parameters for this control.
         *
         * @since 4.3.0
         *
         * @return array Exported parameters.
         */
        public function json() {}
    }

    /**
     * Customize Code Editor Control class.
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Code_Editor_Control extends \wp_customize_control {
        /**
         * Customize control type.
         *
         * @since 4.9.0
         * @var string
         */
        public $type;
        /**
         * Type of code that is being edited.
         *
         * @since 4.9.0
         * @var string
         */
        public $code_type;
        /**
         * Code editor settings.
         *
         * @see wp_enqueue_code_editor()
         * @since 4.9.0
         * @var array|false
         */
        public $editor_settings;

        /**
         * Enqueue control related scripts/styles.
         *
         * @since 4.9.0
         */
        public function enqueue() {}
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 4.9.0
         * @see WP_Customize_Control::json()
         *
         * @return array Array of parameters passed to the JavaScript.
         */
        public function json() {}
        /**
         * Don't render the control content from PHP, as it's rendered via JS on load.
         *
         * @since 4.9.0
         */
        public function render_content() {}
        /**
         * Render a JS template for control display.
         *
         * @since 4.9.0
         */
        public function content_template() {}
    }

    /**
     * Customize Media Control class.
     *
     * @since 4.2.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Media_Control extends \wp_customize_control {
        /**
         * Control type.
         *
         * @since 4.2.0
         * @var string
         */
        public $type;
        /**
         * Media control mime type.
         *
         * @since 4.2.0
         * @var string
         */
        public $mime_type;
        /**
         * Button labels.
         *
         * @since 4.2.0
         * @var array
         */
        public $button_labels;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Enqueue control related scripts/styles.
         *
         * @since 3.4.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         */
        public function enqueue() {}
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 3.4.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         *
         * @see WP_Customize_Control::to_json()
         */
        public function to_json() {}
        /**
         * Don't render any content for this control from PHP.
         *
         * @since 3.4.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         *
         * @see WP_Customize_Media_Control::content_template()
         */
        public function render_content() {}
        /**
         * Render a JS template for the content of the media control.
         *
         * @since 4.1.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         */
        public function content_template() {}
        /**
         * Get default button labels.
         *
         * Provides an array of the default button labels based on the mime type of the current control.
         *
         * @since 4.9.0
         *
         * @return array An associative array of default button labels.
         */
        public function get_default_button_labels() {}
    }

    /**
     * Customize Nav Menu Control Class.
     *
     * @since 4.3.0
     */
    class WP_Customize_Nav_Menu_Control extends \wp_customize_control {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;

        /**
         * Don't render the control's content - it uses a JS template instead.
         *
         * @since 4.3.0
         */
        public function render_content() {}
        /**
         * JS/Underscore template for the control UI.
         *
         * @since 4.3.0
         */
        public function content_template() {}
        /**
         * Return parameters for this control.
         *
         * @since 4.3.0
         *
         * @return array Exported parameters.
         */
        public function json() {}
    }

    /**
     * Customize Nav Menus Panel Class
     *
     * Needed to add screen options.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Panel
     */
    class WP_Customize_Nav_Menus_Panel extends \wp_customize_panel {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;

        /**
         * Render screen options for Menus.
         *
         * @since 4.3.0
         */
        public function render_screen_options() {}
        /**
         * Returns the advanced options for the nav menus page.
         *
         * Link title attribute added as it's a relatively advanced concept for new users.
         *
         * @since 4.3.0
         * @deprecated 4.5.0 Deprecated in favor of wp_nav_menu_manage_columns().
         */
        public function wp_nav_menu_manage_columns() {}
        /**
         * An Underscore (JS) template for this panel's content (but not its container).
         *
         * Class variables for this panel class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Panel::json().
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Panel::print_template()
         */
        protected function content_template() {}
    }

    /**
     * Customize control class for new menus.
     *
     * @since 4.3.0
     * @deprecated 4.9.0 This class is no longer used as of the menu creation UX introduced in #40104.
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_New_Menu_Control extends \wp_customize_control {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;

        public function __construct(WP_Customize_Manager $manager, $id, array $args = array( )) {}
        /**
         * Render the control's content.
         *
         * @since 4.3.0
         */
        public function render_content() {}
    }

    /**
     * Customize Theme Control class.
     *
     * @since 4.2.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Theme_Control extends \wp_customize_control {
        /**
         * Customize control type.
         *
         * @since 4.2.0
         * @var string
         */
        public $type;
        /**
         * Theme object.
         *
         * @since 4.2.0
         * @var WP_Theme
         */
        public $theme;

        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 4.2.0
         *
         * @see WP_Customize_Control::to_json()
         */
        public function to_json() {}
        /**
         * Don't render the control content from PHP, as it's rendered via JS on load.
         *
         * @since 4.2.0
         */
        public function render_content() {}
        /**
         * Render a JS template for theme display.
         *
         * @since 4.2.0
         */
        public function content_template() {}
    }

    /**
     * Customize Upload Control Class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Media_Control
     */
    class WP_Customize_Upload_Control extends \wp_customize_media_control {
        public $type;
        public $mime_type;
        public $button_labels;
        public $removed;
        public $context;
        public $extensions;

        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 3.4.0
         *
         * @uses WP_Customize_Media_Control::to_json()
         */
        public function to_json() {}
    }

    /**
     * Core Customizer class for implementing selective refresh.
     *
     * @since 4.5.0
     */
    final class WP_Customize_Selective_Refresh {
        const RENDER_QUERY_VAR = 'wp_customize_render_partials';

        /**
         * Customize manager.
         *
         * @since 4.5.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Registered instances of WP_Customize_Partial.
         *
         * @since 4.5.0
         * @var WP_Customize_Partial[]
         */
        protected $partials;
        /**
         * Log of errors triggered when partials are rendered.
         *
         * @since 4.5.0
         * @var array
         */
        protected $triggered_errors;
        /**
         * Keep track of the current partial being rendered.
         *
         * @since 4.5.0
         * @var string
         */
        protected $current_partial_id;

        public function __construct(WP_Customize_Manager $manager) {}
        /**
         * Retrieves the registered partials.
         *
         * @since 4.5.0
         *
         * @return array Partials.
         */
        public function partials() {}
/** This filter is documented in wp-includes/customize/class-wp-customize-selective-refresh.php */
        public function add_partial(/** This filter is documented in wp-includes/customize/class-wp-customize-selective-refresh.php */
$id, /** This filter is documented in wp-includes/customize/class-wp-customize-selective-refresh.php */
$args = array( )) {}
        public function get_partial($id) {}
        public function remove_partial($id) {}
        /**
         * Initializes the Customizer preview.
         *
         * @since 4.5.0
         */
        public function init_preview() {}
        /**
         * Enqueues preview scripts.
         *
         * @since 4.5.0
         */
        public function enqueue_preview_scripts() {}
        /**
         * Exports data in preview after it has finished rendering so that partials can be added at runtime.
         *
         * @since 4.5.0
         */
        public function export_preview_data() {}
/**
 * Filters the class used to construct partials.
 *
 * Allow non-statically created partials to be constructed with custom WP_Customize_Partial subclass.
 *
 * @since 4.5.0
 *
 * @param string $partial_class WP_Customize_Partial or a subclass.
 * @param string $partial_id    ID for dynamic partial.
 * @param array  $partial_args  The arguments to the WP_Customize_Partial constructor.
 */
        public function add_dynamic_partials(/**
 * Filters the class used to construct partials.
 *
 * Allow non-statically created partials to be constructed with custom WP_Customize_Partial subclass.
 *
 * @since 4.5.0
 *
 * @param string $partial_class WP_Customize_Partial or a subclass.
 * @param string $partial_id    ID for dynamic partial.
 * @param array  $partial_args  The arguments to the WP_Customize_Partial constructor.
 */
$partial_ids) {}
        /**
         * Checks whether the request is for rendering partials.
         *
         * Note that this will not consider whether the request is authorized or valid,
         * just that essentially the route is a match.
         *
         * @since 4.5.0
         *
         * @return bool Whether the request is for rendering partials.
         */
        public function is_render_partials_request() {}
        public function handle_error($errno, $errstr, $errfile = null, $errline = null) {}
        /**
         * Filters the response from rendering the partials.
         *
         * Plugins may use this filter to inject `$scripts` and `$styles`, which are dependencies
         * for the partials being rendered. The response data will be available to the client via
         * the `render-partials-response` JS event, so the client can then inject the scripts and
         * styles into the DOM if they have not already been enqueued there.
         *
         * If plugins do this, they'll need to take care for any scripts that do `document.write()`
         * and make sure that these are not injected, or else to override the function to no-op,
         * or else the page will be destroyed.
         *
         * Plugins should be aware that `$scripts` and `$styles` may eventually be included by
         * default in the response.
         *
         * @since 4.5.0
         *
         * @param array $response {
         *     Response.
         *
         *     @type array $contents Associative array mapping a partial ID its corresponding array of contents
         *                           for the containers requested.
         *     @type array $errors   List of errors triggered during rendering of partials, if `WP_DEBUG_DISPLAY`
         *                           is enabled.
         * }
         * @param WP_Customize_Selective_Refresh $this     Selective refresh component.
         * @param array                          $partials Placements' context data for the partials rendered in the request.
         *                                                 The array is keyed by partial ID, with each item being an array of
         *                                                 the placements' context data.
         */
        public function handle_render_partials_request() {}
    }

    /**
     * Customize control to represent the auto_add field for a given menu.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Auto_Add_Control extends \wp_customize_control {
        /**
         * Type of control, used by JS.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;

        /**
         * No-op since we're using JS template.
         *
         * @since 4.3.0
         */
        protected function render_content() {}
        /**
         * Render the Underscore template for this control.
         *
         * @since 4.3.0
         */
        protected function content_template() {}
    }

    /**
     * Customize Themes Section class.
     *
     * A UI container for theme controls, which are displayed within sections.
     *
     * @since 4.2.0
     *
     * @see WP_Customize_Section
     */
    class WP_Customize_Themes_Section extends \wp_customize_section {
        /**
         * Section type.
         *
         * @since 4.2.0
         * @var string
         */
        public $type;
        /**
         * Theme section action.
         *
         * Defines the type of themes to load (installed, wporg, etc.).
         *
         * @since 4.9.0
         * @var string
         */
        public $action;
        /**
         * Theme section filter type.
         *
         * Determines whether filters are applied to loaded (local) themes or by initiating a new remote query (remote).
         * When filtering is local, the initial themes query is not paginated by default.
         *
         * @since 4.9.0
         * @var string
         */
        public $filter_type;

        /**
         * Get section parameters for JS.
         *
         * @since 4.9.0
         * @return array Exported parameters.
         */
        public function json() {}
        /**
         * Render a themes section as a JS template.
         *
         * The template is only rendered by PHP once, so all actions are prepared at once on the server side.
         *
         * @since 4.9.0
         */
        protected function render_template() {}
        /**
         * Render the filter bar portion of a themes section as a JS template.
         *
         * The template is only rendered by PHP once, so all actions are prepared at once on the server side.
         * The filter bar container is rendered by @see `render_template()`.
         *
         * @since 4.9.0
         */
        protected function filter_bar_content_template() {}
        /**
         * Render the filter drawer portion of a themes section as a JS template.
         *
         * The filter bar container is rendered by @see `render_template()`.
         *
         * @since 4.9.0
         */
        protected function filter_drawer_content_template() {}
    }

    /**
     * Customize Site Icon control class.
     *
     * Used only for custom functionality in JavaScript.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Cropped_Image_Control
     */
    class WP_Customize_Site_Icon_Control extends \wp_customize_cropped_image_control {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Renders a JS template for the content of the site icon control.
         *
         * @since 4.5.0
         */
        public function content_template() {}
    }

    /**
     * Customize Nav Menu Locations Control Class.
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Locations_Control extends \wp_customize_control {
        /**
         * Control type.
         *
         * @since 4.9.0
         * @var string
         */
        public $type;

        /**
         * Don't render the control's content - it uses a JS template instead.
         *
         * @since 4.9.0
         */
        public function render_content() {}
        /**
         * JS/Underscore template for the control UI.
         *
         * @since 4.9.0
         */
        public function content_template() {}
    }

    /**
     * Customize Image Control class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Upload_Control
     */
    class WP_Customize_Image_Control extends \wp_customize_upload_control {
        public $type;
        public $mime_type;

        /**
         * @since 3.4.2
         * @deprecated 4.1.0
         */
        public function prepare_control() {}
        public function add_tab($id, $label, $callback) {}
        public function remove_tab($id) {}
        public function print_tab_image($url, $thumbnail_url = null) {}
    }

    /**
     * Customize Menu Section Class
     *
     * @since 4.3.0
     * @deprecated 4.9.0 This class is no longer used as of the menu creation UX introduced in #40104.
     *
     * @see WP_Customize_Section
     */
    class WP_Customize_New_Menu_Section extends \wp_customize_section {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;

        public function __construct(WP_Customize_Manager $manager, $id, array $args = array( )) {}
        /**
         * Render the section, and the controls that have been added to it.
         *
         * @since 4.3.0
         */
        protected function render() {}
    }

    /**
     * Customize Setting to represent a nav_menu.
     *
     * Subclass of WP_Customize_Setting to represent a nav_menu taxonomy term, and
     * the IDs for the nav_menu_items associated with the nav menu.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Setting
     */
    class WP_Customize_Nav_Menu_Item_Setting extends \wp_customize_setting {
        const TYPE = 'nav_menu_item';
        const POST_TYPE = 'nav_menu_item';
        const ID_PATTERN = '/^nav_menu_item\[(?P<id>-?\d+)\]$/';

        /**
         * Setting type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;
        /**
         * Default setting value.
         *
         * @since 4.3.0
         * @var array
         *
         * @see wp_setup_nav_menu_item()
         */
        public $default;
        /**
         * Default transport.
         *
         * @since 4.3.0
         * @since 4.5.0 Default changed to 'refresh'
         * @var string
         */
        public $transport;
        /**
         * The post ID represented by this setting instance. This is the db_id.
         *
         * A negative value represents a placeholder ID for a new menu not yet saved.
         *
         * @since 4.3.0
         * @var int
         */
        public $post_id;
        /**
         * Storage of pre-setup menu item to prevent wasted calls to wp_setup_nav_menu_item().
         *
         * @since 4.3.0
         * @var array
         */
        protected $value;
        /**
         * Previous (placeholder) post ID used before creating a new menu item.
         *
         * This value will be exported to JS via the customize_save_response filter
         * so that JavaScript can update the settings to refer to the newly-assigned
         * post ID. This value is always negative to indicate it does not refer to
         * a real post.
         *
         * @since 4.3.0
         * @var int
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::update()
         * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
         */
        public $previous_post_id;
        /**
         * When previewing or updating a menu item, this stores the previous nav_menu_term_id
         * which ensures that we can apply the proper filters.
         *
         * @since 4.3.0
         * @var int
         */
        public $original_nav_menu_term_id;
        /**
         * Whether or not update() was called.
         *
         * @since 4.3.0
         * @var bool
         */
        protected $is_updated;
        /**
         * Status for calling the update method, used in customize_save_response filter.
         *
         * See {@see 'customize_save_response'}.
         *
         * When status is inserted, the placeholder post ID is stored in $previous_post_id.
         * When status is error, the error is stored in $update_error.
         *
         * @since 4.3.0
         * @var string updated|inserted|deleted|error
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::update()
         * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
         */
        public $update_status;
        /**
         * Any error object returned by wp_update_nav_menu_item() when setting is updated.
         *
         * @since 4.3.0
         * @var WP_Error
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::update()
         * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
         */
        public $update_error;

        public function __construct(WP_Customize_Manager $manager, $id, array $args = array( )) {}
        public function flush_cached_value($menu_id, $menu_item_id) {}
        /**
         * Get the instance data for a given nav_menu_item setting.
         *
         * @since 4.3.0
         *
         * @see wp_setup_nav_menu_item()
         *
         * @return array|false Instance data array, or false if the item is marked for deletion.
         */
        public function value() {}
/** This filter is documented in wp-includes/post-template.php */
        protected function get_original_title(/** This filter is documented in wp-includes/post-template.php */
$item) {}
        protected function get_type_label($item) {}
        /**
         * Ensure that the value is fully populated with the necessary properties.
         *
         * Translates some properties added by wp_setup_nav_menu_item() and removes others.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::value()
         */
        protected function populate_value() {}
        /**
         * Handle previewing the setting.
         *
         * @since 4.3.0
         * @since 4.4.0 Added boolean return value.
         *
         * @see WP_Customize_Manager::post_value()
         *
         * @return bool False if method short-circuited due to no-op.
         */
        public function preview() {}
        public function filter_wp_get_nav_menu_items($items, $menu, $args) {}
        public static function sort_wp_get_nav_menu_items($items, $menu, $args) {}
        /**
         * Get the value emulated into a WP_Post and set up as a nav_menu_item.
         *
         * @since 4.3.0
         *
         * @return WP_Post With wp_setup_nav_menu_item() applied.
         */
        public function value_as_wp_post_nav_menu_item() {}
/** This filter is documented in wp-includes/class-wp-customize-setting.php */
        public function sanitize(/** This filter is documented in wp-includes/class-wp-customize-setting.php */
$menu_item_value) {}
        protected function update($value) {}
        public function amend_customize_save_response($data) {}
    }

    /**
     * A setting that is used to filter a value, but will not save the results.
     *
     * Results should be properly handled using another setting or callback.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Setting
     */
    final class WP_Customize_Header_Image_Setting extends \wp_customize_setting {
        public $id;

        public function update($value) {}
    }

    /**
     * Core Customizer class for implementing selective refresh partials.
     *
     * Representation of a rendered region in the previewed page that gets
     * selectively refreshed when an associated setting is changed.
     * This class is analogous of WP_Customize_Control.
     *
     * @since 4.5.0
     */
    class WP_Customize_Partial {
        /**
         * Component.
         *
         * @since 4.5.0
         * @var WP_Customize_Selective_Refresh
         */
        public $component;
        /**
         * Unique identifier for the partial.
         *
         * If the partial is used to display a single setting, this would generally
         * be the same as the associated setting's ID.
         *
         * @since 4.5.0
         * @var string
         */
        public $id;
        /**
         * Parsed ID.
         *
         * @since 4.5.0
         * @var array {
         *     @type string $base ID base.
         *     @type array  $keys Keys for multidimensional.
         * }
         */
        protected $id_data;
        /**
         * Type of this partial.
         *
         * @since 4.5.0
         * @var string
         */
        public $type;
        /**
         * The jQuery selector to find the container element for the partial.
         *
         * @since 4.5.0
         * @var string
         */
        public $selector;
        /**
         * IDs for settings tied to the partial.
         *
         * @since 4.5.0
         * @var array
         */
        public $settings;
        /**
         * The ID for the setting that this partial is primarily responsible for rendering.
         *
         * If not supplied, it will default to the ID of the first setting.
         *
         * @since 4.5.0
         * @var string
         */
        public $primary_setting;
        /**
         * Capability required to edit this partial.
         *
         * Normally this is empty and the capability is derived from the capabilities
         * of the associated `$settings`.
         *
         * @since 4.5.0
         * @var string
         */
        public $capability;
        /**
         * Render callback.
         *
         * @since 4.5.0
         * @see WP_Customize_Partial::render()
         * @var callable Callback is called with one argument, the instance of
         *                 WP_Customize_Partial. The callback can either echo the
         *                 partial or return the partial as a string, or return false if error.
         */
        public $render_callback;
        /**
         * Whether the container element is included in the partial, or if only the contents are rendered.
         *
         * @since 4.5.0
         * @var bool
         */
        public $container_inclusive;
        /**
         * Whether to refresh the entire preview in case a partial cannot be refreshed.
         *
         * A partial render is considered a failure if the render_callback returns false.
         *
         * @since 4.5.0
         * @var bool
         */
        public $fallback_refresh;

        public function __construct(WP_Customize_Selective_Refresh $component, $id, $args = array( )) {}
        /**
         * Retrieves parsed ID data for multidimensional setting.
         *
         * @since 4.5.0
         *
         * @return array {
         *     ID data for multidimensional partial.
         *
         *     @type string $base ID base.
         *     @type array  $keys Keys for multidimensional array.
         * }
         */
        public function id_data() {}
/**
 * Filters partial rendering for a specific partial.
 *
 * The dynamic portion of the hook name, `$partial->ID` refers to the partial ID.
 *
 * @since 4.5.0
 *
 * @param string|array|false   $rendered          The partial value. Default false.
 * @param WP_Customize_Partial $partial           WP_Customize_Setting instance.
 * @param array                $container_context Optional array of context data associated with
 *                                                the target container.
 */
        public function render(/**
 * Filters partial rendering for a specific partial.
 *
 * The dynamic portion of the hook name, `$partial->ID` refers to the partial ID.
 *
 * @since 4.5.0
 *
 * @param string|array|false   $rendered          The partial value. Default false.
 * @param WP_Customize_Partial $partial           WP_Customize_Setting instance.
 * @param array                $container_context Optional array of context data associated with
 *                                                the target container.
 */
$container_context = array( )) {}
        public function render_callback(WP_Customize_Partial $partial, $context = array( )) {}
        /**
         * Retrieves the data to export to the client via JSON.
         *
         * @since 4.5.0
         *
         * @return array Array of parameters passed to the JavaScript.
         */
        public function json() {}
        /**
         * Checks if the user can refresh this partial.
         *
         * Returns false if the user cannot manipulate one of the associated settings,
         * or if one of the associated settings does not exist.
         *
         * @since 4.5.0
         *
         * @return bool False if user can't edit one of the related settings,
         *                    or if one of the associated settings does not exist.
         */
        public function check_capabilities() {}
    }

    /**
     * Customize Color Control class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Color_Control extends \wp_customize_control {
        /**
         * Type.
         *
         * @var string
         */
        public $type;
        /**
         * Statuses.
         *
         * @var array
         */
        public $statuses;
        /**
         * Mode.
         *
         * @since 4.7.0
         * @var string
         */
        public $mode;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Enqueue scripts/styles for the color picker.
         *
         * @since 3.4.0
         */
        public function enqueue() {}
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 3.4.0
         * @uses WP_Customize_Control::to_json()
         */
        public function to_json() {}
        /**
         * Don't render the control content from PHP, as it's rendered via JS on load.
         *
         * @since 3.4.0
         */
        public function render_content() {}
        /**
         * Render a JS template for the content of the color picker control.
         *
         * @since 4.1.0
         */
        public function content_template() {}
    }

    /**
     * Customize Date Time Control class.
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Date_Time_Control extends \wp_customize_control {
        /**
         * Customize control type.
         *
         * @since 4.9.0
         * @var string
         */
        public $type;
        /**
         * Minimum Year.
         *
         * @since 4.9.0
         * @var integer
         */
        public $min_year;
        /**
         * Maximum Year.
         *
         * @since 4.9.0
         * @var integer
         */
        public $max_year;
        /**
         * Allow past date, if set to false user can only select future date.
         *
         * @since 4.9.0
         * @var boolean
         */
        public $allow_past_date;
        /**
         * Whether hours, minutes, and meridian should be shown.
         *
         * @since 4.9.0
         * @var boolean
         */
        public $include_time;
        /**
         * If set to false the control will appear in 24 hour format,
         * the value will still be saved in Y-m-d H:i:s format.
         *
         * @since 4.9.0
         * @var boolean
         */
        public $twelve_hour_format;

        /**
         * Don't render the control's content - it's rendered with a JS template.
         *
         * @since 4.9.0
         */
        public function render_content() {}
        /**
         * Export data to JS.
         *
         * @since 4.9.0
         * @return array
         */
        public function json() {}
        /**
         * Renders a JS template for the content of date time control.
         *
         * @since 4.9.0
         */
        public function content_template() {}
        /**
         * Generate options for the month Select.
         *
         * Based on touch_time().
         *
         * @since 4.9.0
         * @see touch_time()
         *
         * @global WP_Locale $wp_locale
         *
         * @return array
         */
        public function get_month_choices() {}
        /**
         * Get timezone info.
         *
         * @since 4.9.0
         *
         * @return array abbr and description.
         */
        public function get_timezone_info() {}
        public function format_gmt_offset($offset) {}
    }

    /**
     * Customize Setting to represent a nav_menu.
     *
     * Subclass of WP_Customize_Setting to represent a nav_menu taxonomy term, and
     * the IDs for the nav_menu_items associated with the nav menu.
     *
     * @since 4.3.0
     *
     * @see wp_get_nav_menu_object()
     * @see WP_Customize_Setting
     */
    class WP_Customize_Nav_Menu_Setting extends \wp_customize_setting {
        const ID_PATTERN = '/^nav_menu\[(?P<id>-?\d+)\]$/';
        const TAXONOMY = 'nav_menu';
        const TYPE = 'nav_menu';

        /**
         * Setting type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;
        /**
         * Default setting value.
         *
         * @since 4.3.0
         * @var array
         *
         * @see wp_get_nav_menu_object()
         */
        public $default;
        /**
         * Default transport.
         *
         * @since 4.3.0
         * @var string
         */
        public $transport;
        /**
         * The term ID represented by this setting instance.
         *
         * A negative value represents a placeholder ID for a new menu not yet saved.
         *
         * @since 4.3.0
         * @var int
         */
        public $term_id;
        /**
         * Previous (placeholder) term ID used before creating a new menu.
         *
         * This value will be exported to JS via the {@see 'customize_save_response'} filter
         * so that JavaScript can update the settings to refer to the newly-assigned
         * term ID. This value is always negative to indicate it does not refer to
         * a real term.
         *
         * @since 4.3.0
         * @var int
         *
         * @see WP_Customize_Nav_Menu_Setting::update()
         * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
         */
        public $previous_term_id;
        /**
         * Whether or not update() was called.
         *
         * @since 4.3.0
         * @var bool
         */
        protected $is_updated;
        /**
         * Status for calling the update method, used in customize_save_response filter.
         *
         * See {@see 'customize_save_response'}.
         *
         * When status is inserted, the placeholder term ID is stored in `$previous_term_id`.
         * When status is error, the error is stored in `$update_error`.
         *
         * @since 4.3.0
         * @var string updated|inserted|deleted|error
         *
         * @see WP_Customize_Nav_Menu_Setting::update()
         * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
         */
        public $update_status;
        /**
         * Any error object returned by wp_update_nav_menu_object() when setting is updated.
         *
         * @since 4.3.0
         * @var WP_Error
         *
         * @see WP_Customize_Nav_Menu_Setting::update()
         * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
         */
        public $update_error;
        /**
         * Temporary non-closure passing of orderby value to function.
         *
         * @since 4.3.0
         * @var string
         *
         * @see WP_Customize_Nav_Menu_Setting::filter_wp_get_nav_menus()
         * @see WP_Customize_Nav_Menu_Setting::_sort_menus_by_orderby()
         */
        protected $_current_menus_sort_orderby;
        /**
         * Storage for data to be sent back to client in customize_save_response filter.
         *
         * See {@see 'customize_save_response'}.
         *
         * @since 4.3.0
         * @var array
         *
         * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
         */
        protected $_widget_nav_menu_updates;

        public function __construct(WP_Customize_Manager $manager, $id, array $args = array( )) {}
        /**
         * Get the instance data for a given widget setting.
         *
         * @since 4.3.0
         *
         * @see wp_get_nav_menu_object()
         *
         * @return array Instance data.
         */
        public function value() {}
        /**
         * Handle previewing the setting.
         *
         * @since 4.3.0
         * @since 4.4.0 Added boolean return value
         *
         * @see WP_Customize_Manager::post_value()
         *
         * @return bool False if method short-circuited due to no-op.
         */
        public function preview() {}
        public function filter_wp_get_nav_menus($menus, $args) {}
        protected function _sort_menus_by_orderby($menu1, $menu2) {}
        public function filter_wp_get_nav_menu_object($menu_obj, $menu_id) {}
        public function filter_nav_menu_options($nav_menu_options) {}
/** This filter is documented in wp-includes/class-wp-customize-setting.php */
        public function sanitize(/** This filter is documented in wp-includes/class-wp-customize-setting.php */
$value) {}
        protected function update($value) {}
        protected function filter_nav_menu_options_value($nav_menu_options, $menu_id, $auto_add) {}
        public function amend_customize_save_response($data) {}
    }

    /**
     * Customize Background Position Control class.
     *
     * @since 4.7.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Background_Position_Control extends \wp_customize_control {
        /**
         * Type.
         *
         * @since 4.7.0
         * @var string
         */
        public $type;

        /**
         * Don't render the control content from PHP, as it's rendered via JS on load.
         *
         * @since 4.7.0
         */
        public function render_content() {}
        /**
         * Render a JS template for the content of the position control.
         *
         * @since 4.7.0
         */
        public function content_template() {}
    }

    /**
     * Customizer Background Image Setting class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Setting
     */
    final class WP_Customize_Background_Image_Setting extends \wp_customize_setting {
        public $id;

        public function update($value) {}
    }

    /**
     * Customize Cropped Image Control class.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Image_Control
     */
    class WP_Customize_Cropped_Image_Control extends \wp_customize_image_control {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;
        /**
         * Suggested width for cropped image.
         *
         * @since 4.3.0
         * @var int
         */
        public $width;
        /**
         * Suggested height for cropped image.
         *
         * @since 4.3.0
         * @var int
         */
        public $height;
        /**
         * Whether the width is flexible.
         *
         * @since 4.3.0
         * @var bool
         */
        public $flex_width;
        /**
         * Whether the height is flexible.
         *
         * @since 4.3.0
         * @var bool
         */
        public $flex_height;

        /**
         * Enqueue control related scripts/styles.
         *
         * @since 4.3.0
         */
        public function enqueue() {}
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Control::to_json()
         */
        public function to_json() {}
    }

    /**
     * Customizer section representing widget area (sidebar).
     *
     * @since 4.1.0
     *
     * @see WP_Customize_Section
     */
    class WP_Customize_Sidebar_Section extends \wp_customize_section {
        /**
         * Type of this section.
         *
         * @since 4.1.0
         * @var string
         */
        public $type;
        /**
         * Unique identifier.
         *
         * @since 4.1.0
         * @var string
         */
        public $sidebar_id;

        /**
         * Gather the parameters passed to client JavaScript via JSON.
         *
         * @since 4.1.0
         *
         * @return array The array to be exported to the client as JSON.
         */
        public function json() {}
        /**
         * Whether the current sidebar is rendered on the page.
         *
         * @since 4.1.0
         *
         * @return bool Whether sidebar is rendered.
         */
        public function active_callback() {}
    }

    /**
     * Custom Setting to handle WP Custom CSS.
     *
     * @since 4.7.0
     *
     * @see WP_Customize_Setting
     */
    final class WP_Customize_Custom_CSS_Setting extends \wp_customize_setting {
        /**
         * The setting type.
         *
         * @since 4.7.0
         * @var string
         */
        public $type;
        /**
         * Setting Transport
         *
         * @since 4.7.0
         * @var string
         */
        public $transport;
        /**
         * Capability required to edit this setting.
         *
         * @since 4.7.0
         * @var string
         */
        public $capability;
        /**
         * Stylesheet
         *
         * @since 4.7.0
         * @var string
         */
        public $stylesheet;

        public function __construct($manager, $id, $args = array( )) {}
        /**
         * Add filter to preview post value.
         *
         * @since 4.7.9
         *
         * @return bool False when preview short-circuits due no change needing to be previewed.
         */
        public function preview() {}
        public function filter_previewed_wp_get_custom_css($css, $stylesheet) {}
        /** This filter is documented in wp-includes/class-wp-customize-setting.php */
        public function value() {}
        public function validate($css) {}
        public function update($css) {}
    }

    /**
     * Widget Form Customize Control class.
     *
     * @since 3.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Widget_Form_Customize_Control extends \wp_customize_control {
        /**
         * Customize control type.
         *
         * @since 3.9.0
         * @var string
         */
        public $type;
        /**
         * Widget ID.
         *
         * @since 3.9.0
         * @var string
         */
        public $widget_id;
        /**
         * Widget ID base.
         *
         * @since 3.9.0
         * @var string
         */
        public $widget_id_base;
        /**
         * Sidebar ID.
         *
         * @since 3.9.0
         * @var string
         */
        public $sidebar_id;
        /**
         * Widget status.
         *
         * @since 3.9.0
         * @var bool True if new, false otherwise. Default false.
         */
        public $is_new;
        /**
         * Widget width.
         *
         * @since 3.9.0
         * @var int
         */
        public $width;
        /**
         * Widget height.
         *
         * @since 3.9.0
         * @var int
         */
        public $height;
        /**
         * Widget mode.
         *
         * @since 3.9.0
         * @var bool True if wide, false otherwise. Default false.
         */
        public $is_wide;

        /**
         * Gather control params for exporting to JavaScript.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widgets
         */
        public function to_json() {}
        /**
         * Override render_content to be no-op since content is exported via to_json for deferred embedding.
         *
         * @since 3.9.0
         */
        public function render_content() {}
        /**
         * Whether the current widget is rendered on the page.
         *
         * @since 4.0.0
         *
         * @return bool Whether the widget is rendered.
         */
        public function active_callback() {}
    }

    /**
     * Customize Themes Panel Class
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Panel
     */
    class WP_Customize_Themes_Panel extends \wp_customize_panel {
        /**
         * Panel type.
         *
         * @since 4.9.0
         * @var string
         */
        public $type;

        /**
         * An Underscore (JS) template for rendering this panel's container.
         *
         * The themes panel renders a custom panel heading with the current theme and a switch themes button.
         *
         * @see WP_Customize_Panel::print_template()
         *
         * @since 4.9.0
         */
        protected function render_template() {}
        /**
         * An Underscore (JS) template for this panel's content (but not its container).
         *
         * Class variables for this panel class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Panel::json().
         *
         * @since 4.9.0
         *
         * @see WP_Customize_Panel::print_template()
         */
        protected function content_template() {}
    }

    /**
     * Widget Area Customize Control class.
     *
     * @since 3.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Widget_Area_Customize_Control extends \wp_customize_control {
        /**
         * Customize control type.
         *
         * @since 3.9.0
         * @var string
         */
        public $type;
        /**
         * Sidebar ID.
         *
         * @since 3.9.0
         * @var int|string
         */
        public $sidebar_id;

        /**
         * Refreshes the parameters passed to the JavaScript via JSON.
         *
         * @since 3.9.0
         */
        public function to_json() {}
        /**
         * Renders the control's content.
         *
         * @since 3.9.0
         */
        public function render_content() {}
    }

    /**
     * Customize Menu Location Control Class.
     *
     * This custom control is only needed for JS.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Location_Control extends \wp_customize_control {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type;
        /**
         * Location ID.
         *
         * @since 4.3.0
         * @var string
         */
        public $location_id;

        /**
         * Refresh the parameters passed to JavaScript via JSON.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Control::to_json()
         */
        public function to_json() {}
        /**
         * Render content just like a normal select control.
         *
         * @since 4.3.0
         * @since 4.9.0 Added a button to create menus.
         */
        public function render_content() {}
    }

    /**
     * Widget For displaying post format posts
     *
     * Handles displaying Aside, Link, Status, and Quote Posts available with Twenty Eleven.
     *
     * @link https://codex.wordpress.org/Widgets_API#Developing_Widgets
     *
     * @package WordPress
     * @subpackage Twenty_Eleven
     * @since Twenty Eleven 1.0
     */
    class Twenty_Eleven_Ephemera_Widget extends \wp_widget {
        /**
         * PHP5 constructor.
         *
         * @since Twenty Eleven 2.2
         */
        function __construct() {}
        /**
         * PHP4 constructor.
         *
         * @since Twenty Eleven 1.0
         */
        function Twenty_Eleven_Ephemera_Widget() {}
        function widget($args, $instance) {}
        function update($new_instance, $old_instance) {}
        /**
         * Flush widget cache.
         *
         * @since Twenty Eleven 1.0
         */
        function flush_widget_cache() {}
        function form($instance) {}
    }

    /**
     * This class outputs custom comment walker for HTML5 friendly WordPress comment and threaded replies.
     *
     * @since 1.0.0
     */
    class TwentyNineteen_Walker_Comment extends \walker_comment {
        protected function html5_comment($comment, $depth, $args) {}
    }

    /**
     * This class is in charge of displaying SVG icons across the site.
     *
     * Place each <svg> source on its own array key, without adding the
     * both `width` and `height` attributes, since these are added dnamically,
     * before rendering the SVG code.
     *
     * All icons are assumed to have equal width and height, hence the option
     * to only specify a `$size` parameter in the svg methods.
     *
     * @since 1.0.0
     */
    class TwentyNineteen_SVG_Icons {
        /**
         * User Interface icons – svg sources.
         *
         * @var array
         */
        static public $ui_icons;
        /**
         * Social Icons – domain mappings.
         *
         * By default, each Icon ID is matched against a .com TLD. To override this behavior,
         * specify all the domains it covers (including the .com TLD too, if applicable).
         *
         * @var array
         */
        static public $social_icons_map;
        /**
         * Social Icons – svg sources.
         *
         * @var array
         */
        static public $social_icons;

        public static function get_svg($group, $icon, $size) {}
        public static function get_social_link_svg($uri, $size) {}
    }

    /**
     * Custom Widget for displaying specific post formats
     *
     * Displays posts from Aside, Quote, Video, Audio, Image, Gallery, and Link formats.
     *
     * @link https://codex.wordpress.org/Widgets_API#Developing_Widgets
     *
     * @package WordPress
     * @subpackage Twenty_Fourteen
     * @since Twenty Fourteen 1.0
     */
    class Twenty_Fourteen_Ephemera_Widget extends \wp_widget {
        /**
         * The supported post formats.
         *
         * @since Twenty Fourteen 1.0
         *
         * @var array
         */
        private $formats;

        /**
         * Constructor.
         *
         * @since Twenty Fourteen 1.0
         *
         * @return Twenty_Fourteen_Ephemera_Widget
         */
        public function __construct() {}
        /**
         * Enqueue scripts.
         *
         * @since Twenty Fourteen 1.7
         */
        public function enqueue_scripts() {}
        public function widget($args, $instance) {}
        function update($new_instance, $instance) {}
        function form($instance) {}
    }

    /**
     * Twenty Fourteen Featured Content
     *
     * This module allows you to define a subset of posts to be displayed
     * in the theme's Featured Content area.
     *
     * For maximum compatibility with different methods of posting users
     * will designate a featured post tag to associate posts with. Since
     * this tag now has special meaning beyond that of a normal tags, users
     * will have the ability to hide it from the front end of their site.
     */
    class Featured_Content {
        /**
         * The maximum number of posts a Featured Content area can contain.
         *
         * We define a default value here but themes can override
         * this by defining a "max_posts" entry in the second parameter
         * passed in the call to add_theme_support( 'featured-content' ).
         *
         * @see Featured_Content::init()
         *
         * @since Twenty Fourteen 1.0
         *
         * @var int
         */
        static public $max_posts;

        /**
         * Instantiate.
         *
         * All custom functionality will be hooked into the "init" action.
         *
         * @since Twenty Fourteen 1.0
         */
        public static function setup() {}
        /**
         * Conditionally hook into WordPress.
         *
         * Theme must declare that they support this module by adding
         * add_theme_support( 'featured-content' ); during after_setup_theme.
         *
         * If no theme support is found there is no need to hook into WordPress.
         * We'll just return early instead.
         *
         * @since Twenty Fourteen 1.0
         */
        public static function init() {}
        /**
         * Hide "featured" tag from the front end.
         *
         * Has to run on wp_loaded so that the preview filters of the Customizer
         * have a chance to alter the value.
         *
         * @since Twenty Fourteen 1.0
         */
        public static function wp_loaded() {}
        /**
         * Get featured posts.
         *
         * @since Twenty Fourteen 1.0
         *
         * @return array Array of featured posts.
         */
        public static function get_featured_posts() {}
        /**
         * Get featured post IDs
         *
         * This function will return the an array containing the
         * post IDs of all featured posts.
         *
         * Sets the "featured_content_ids" transient.
         *
         * @since Twenty Fourteen 1.0
         *
         * @return array Array of post IDs.
         */
        public static function get_featured_post_ids() {}
        /**
         * Return an array with IDs of posts maked as sticky.
         *
         * @since Twenty Fourteen 1.0
         *
         * @return array Array of sticky posts.
         */
        public static function get_sticky_posts() {}
        /**
         * Delete featured content ids transient.
         *
         * Hooks in the "save_post" action.
         *
         * @see Featured_Content::validate_settings().
         *
         * @since Twenty Fourteen 1.0
         */
        public static function delete_transient() {}
        public static function pre_get_posts($query) {}
        public static function delete_post_tag($tag_id) {}
        public static function hide_featured_term($terms, $taxonomies, $args) {}
        public static function hide_the_featured_term($terms, $id, $taxonomy) {}
        /**
         * Register custom setting on the Settings -> Reading screen.
         *
         * @since Twenty Fourteen 1.0
         */
        public static function register_setting() {}
        public static function customize_register($wp_customize) {}
        /**
         * Enqueue the tag suggestion script.
         *
         * @since Twenty Fourteen 1.0
         */
        public static function enqueue_scripts() {}
        public static function get_setting($key = 'all') {}
        public static function validate_settings($input) {}
    }


    /**
     * JsonSerializable interface.
     *
     * Compatibility shim for PHP <5.4
     *
     * @link https://secure.php.net/jsonserializable
     *
     * @since 4.4.0
     */
    if (!interface_exists('\JsonSerializable')) {
        interface JsonSerializable {
            function jsonSerialize() ;
        }
    }
    /**
     * Base for cache objects
     *
     * Classes to be used with {@see SimplePie_Cache::register()} are expected
     * to implement this interface.
     *
     * @package SimplePie
     * @subpackage Caching
     */
    interface SimplePie_Cache_Base {
    const TYPE_FEED = 'spc';
    const TYPE_IMAGE = 'spi';
        function __construct($location, $name, $type) ;
        function save($data) ;
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        function load() ;
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        function mtime() ;
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        function touch() ;
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        function unlink() ;
    }

    /**
     * Authentication provider interface
     *
     * Implement this interface to act as an authentication provider.
     *
     * Parameters should be passed via the constructor where possible, as this
     * makes it much easier for users to use your provider.
     *
     * @see Requests_Hooks
     * @package Requests
     * @subpackage Authentication
     */
    interface Requests_Auth {
        function register(Requests_Hooks $hooks) ;
    }

    /**
     * Event dispatcher
     *
     * @package Requests
     * @subpackage Utilities
     */
    interface Requests_Hooker {
        function register($hook, $callback, $priority = 0) ;
        function dispatch($hook, $parameters = array( )) ;
    }

    /**
     * Base HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    interface Requests_Transport {
        function request($url, $headers = array( ), $data = array( ), $options = array( )) ;
        function request_multiple($requests, $options) ;
        /**
         * Self-test whether the transport can be used
         * @return bool
         */
        static function test() ;
    }

    /**
     * Proxy connection interface
     *
     * Implement this interface to handle proxy settings and authentication
     *
     * Parameters should be passed via the constructor where possible, as this
     * makes it much easier for users to use your provider.
     *
     * @see Requests_Hooks
     * @package Requests
     * @subpackage Proxy
     * @since 1.6
     */
    interface Requests_Proxy {
        function register(Requests_Hooks $hooks) ;
    }

}

?>
