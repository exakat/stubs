<?php
/**
  * Generated by Exakat 2.1.8 (Build 1139)
  * On 2020-09-09T15:10:04+00:00
  * See https://www.exakat.io/
  */

namespace  {
    define('USE_ACCESS_KEYS', false);
    define('DEBUG_ERROR_MESSAGE', true);

    function returnPaths($_path, $_name, $config) {}
    function filenameSort($x, $y) {}
    function dateSort($x, $y) {}
    function sizeSort($x, $y) {}
    function extensionSort($x, $y) {}
    function get_extension_from_mime($mime) {}
    function get_file_mime_type($filename, $debug = false) {}
    function response($content = '', $statusCode = 200, $headers = array( )) {}
    function trans($var) {}
    function checkRelativePathPartial($path) {}
    function checkRelativePath($path) {}
    function isUploadDir($path, $config) {}
    function deleteFile($path, $path_thumb, $config) {}
    function deleteDir($dir, $ftp = null, $config = null) {}
    function duplicate_file($old_path, $name, $ftp = null, $config = null) {}
    function rename_file($old_path, $name, $ftp = null, $config = null) {}
    function url_exists($url) {}
    function tempdir() {}
    function rename_folder($old_path, $name, $ftp = null, $config = null) {}
    function ftp_con($config) {}
    function create_img($imgfile, $imgthumb, $newwidth, $newheight = null, $option = "crop", $config = array( )) {}
    function makeSize($size) {}
    function folder_info($path, $count_hidden = true) {}
    function filescount($path, $count_hidden = true) {}
    function checkresultingsize($sizeAdded) {}
    function create_folder($path = null, $path_thumbs = null, $ftp = null, $config = null) {}
    function check_files_extensions_on_path($path, $ext) {}
    function check_file_extension($extension, $config) {}
    function check_files_extensions_on_phar($phar, $files, $basepath, $config) {}
    function fix_get_params($str) {}
    function check_extension($extension, $config) {}
    function sanitize($str) {}
    function fix_filename($str, $config, $is_folder = false) {}
    function fix_dirname($str) {}
    function fix_strtoupper($str) {}
    function fix_strtolower($str) {}
    function fix_path($path, $config) {}
    function config_loading($current_path, $fld) {}
    function image_check_memory_usage($img, $max_breedte, $max_hoogte) {}
    function ends_with($haystack, $needle) {}
    function new_thumbnails_creation($targetPath, $targetFile, $name, $current_path, $config) {}
    function get_file_by_url($url) {}
    function is_really_writable($dir) {}
    function is_function_callable($name) {}
    function rcopy($source, $destination, $is_rec = false) {}
    function rrename($source, $destination, $is_rec = false) {}
    function rrename_after_cleaner($source) {}
    function rchmod($source, $mode, $rec_option = "none", $is_rec = false) {}
    function debugger($input, $trace = false, $halt = false) {}
    function is_php($version = '5.0.0') {}
    /**
* Return the caller location if set in config.php
* @param  string  $version
*
* @return  bool
*/
    function AddErrorLocation() {}

    class UploadHandler {
        protected $options;
        protected $error_messages;
        protected $image_objects;

        public function __construct($options = null, $initialize = true, $error_messages = null) {}
        protected function initialize() {}
        protected function get_full_url() {}
        protected function get_user_id() {}
        protected function get_user_path() {}
        protected function get_upload_path($file_name = null, $version = null) {}
        protected function get_query_separator($url) {}
        protected function get_download_url($file_name, $version = null, $direct = false) {}
        protected function set_additional_file_properties($file) {}
        protected function fix_integer_overflow($size) {}
        protected function get_file_size($file_path, $clear_stat_cache = false) {}
        protected function is_valid_file_object($file_name) {}
        protected function get_file_object($file_name) {}
        protected function get_file_objects($iteration_method = 'get_file_object') {}
        protected function count_file_objects() {}
        protected function get_error_message($error) {}
        public function get_config_bytes($val) {}
        protected function validate($uploaded_file, $file, $error, $index) {}
        protected function upcount_name_callback($matches) {}
        protected function upcount_name($name) {}
        protected function get_unique_filename($file_path, $name, $size, $type, $error, $index, $content_range) {}
        protected function fix_file_extension($file_path, $name, $size, $type, $error, $index, $content_range) {}
        protected function trim_file_name($file_path, $name, $size, $type, $error, $index, $content_range) {}
        protected function get_file_name($file_path, $name, $size, $type, $error, $index, $content_range) {}
        protected function get_scaled_image_file_paths($file_name, $version) {}
        protected function gd_get_image_object($file_path, $func, $no_cache = false) {}
        protected function gd_set_image_object($file_path, $image) {}
        protected function gd_destroy_image_object($file_path) {}
        protected function gd_imageflip($image, $mode) {}
        protected function gd_orient_image($file_path, $src_img) {}
        protected function gd_create_scaled_image($file_name, $version, $options) {}
        protected function imagick_get_image_object($file_path, $no_cache = false) {}
        protected function imagick_set_image_object($file_path, $image) {}
        protected function imagick_destroy_image_object($file_path) {}
        protected function imagick_orient_image($image) {}
        protected function imagick_create_scaled_image($file_name, $version, $options) {}
        protected function imagemagick_create_scaled_image($file_name, $version, $options) {}
        protected function get_image_size($file_path) {}
        protected function create_scaled_image($file_name, $version, $options) {}
        protected function destroy_image_object($file_path) {}
        protected function is_valid_image_file($file_path) {}
        protected function handle_image_file($file_path, $file) {}
        protected function handle_file_upload($uploaded_file, $name, $size, $type, $error, $index = null, $content_range = null) {}
        protected function readfile($file_path) {}
        protected function body($str) {}
        protected function header($str) {}
        protected function get_upload_data($id) {}
        protected function get_post_param($id) {}
        protected function get_query_param($id) {}
        protected function get_server_var($id) {}
        protected function handle_form_data($file, $index) {}
        protected function get_version_param() {}
        protected function get_singular_param_name() {}
        protected function get_file_name_param() {}
        protected function get_file_names_params() {}
        protected function get_file_type($file_path) {}
        protected function download() {}
        protected function send_content_type_header() {}
        protected function send_access_control_headers() {}
        public function generate_response($content, $print_response = true) {}
        public function get_response() {}
        public function head() {}
        public function get($print_response = true) {}
        public function post($print_response = true) {}
        public function onUploadEnd($res) {}
        public function delete($print_response = true) {}
        protected function basename($filepath, $suffix = null) {}
    }

    /**
     * Class Response
     * Simplified copy of Symfony/Http-Foundation Response
     * to allow compatibility with frameworks
     *
     * @package Filemanager
     */
    class Response {
        const HTTP_NOT_EXTENDED = 510;
        const HTTP_LOOP_DETECTED = 508;
        const HTTP_INSUFFICIENT_STORAGE = 507;
        const HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL = 506;
        const HTTP_NETWORK_AUTHENTICATION_REQUIRED = 511;
        const HTTP_NOT_ACCEPTABLE = 406;
        const HTTP_METHOD_NOT_ALLOWED = 405;
        const HTTP_REQUEST_TIMEOUT = 408;
        const HTTP_PROXY_AUTHENTICATION_REQUIRED = 407;
        const HTTP_PAYMENT_REQUIRED = 402;
        const HTTP_UNAUTHORIZED = 401;
        const HTTP_NOT_FOUND = 404;
        const HTTP_SEE_OTHER = 303;
        const HTTP_FOUND = 302;
        const HTTP_USE_PROXY = 305;
        const HTTP_NOT_MODIFIED = 304;
        const HTTP_TEMPORARY_REDIRECT = 307;
        const HTTP_RESERVED = 306;
        const HTTP_BAD_REQUEST = 400;
        const HTTP_PERMANENTLY_REDIRECT = 308;
        const HTTP_RESET_CONTENT = 205;
        const HTTP_NO_CONTENT = 204;
        const HTTP_MULTI_STATUS = 207;
        const HTTP_PARTIAL_CONTENT = 206;
        const HTTP_IM_USED = 226;
        const HTTP_ALREADY_REPORTED = 208;
        const HTTP_MOVED_PERMANENTLY = 301;
        const HTTP_MULTIPLE_CHOICES = 300;
        const HTTP_CONTINUE = 100;
        const HTTP_SWITCHING_PROTOCOLS = 101;
        const HTTP_PROCESSING = 102;
        const HTTP_OK = 200;
        const HTTP_CREATED = 201;
        const HTTP_ACCEPTED = 202;
        const HTTP_NON_AUTHORITATIVE_INFORMATION = 203;
        const HTTP_NOT_IMPLEMENTED = 501;
        const HTTP_INTERNAL_SERVER_ERROR = 500;
        const HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
        const HTTP_TOO_MANY_REQUESTS = 429;
        const HTTP_VERSION_NOT_SUPPORTED = 505;
        const HTTP_GATEWAY_TIMEOUT = 504;
        const HTTP_SERVICE_UNAVAILABLE = 503;
        const HTTP_BAD_GATEWAY = 502;
        const HTTP_LOCKED = 423;
        const HTTP_UNPROCESSABLE_ENTITY = 422;
        const HTTP_I_AM_A_TEAPOT = 418;
        const HTTP_EXPECTATION_FAILED = 417;
        const HTTP_PRECONDITION_REQUIRED = 428;
        const HTTP_UPGRADE_REQUIRED = 426;
        const HTTP_RESERVED_FOR_WEBDAV_ADVANCED_COLLECTIONS_EXPIRED_PROPOSAL = 425;
        const HTTP_FAILED_DEPENDENCY = 424;
        const HTTP_LENGTH_REQUIRED = 411;
        const HTTP_PRECONDITION_FAILED = 412;
        const HTTP_CONFLICT = 409;
        const HTTP_GONE = 410;
        const HTTP_UNSUPPORTED_MEDIA_TYPE = 415;
        const HTTP_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
        const HTTP_REQUEST_ENTITY_TOO_LARGE = 413;
        const HTTP_REQUEST_URI_TOO_LONG = 414;
        const HTTP_FORBIDDEN = 403;

        /**
         * Status codes translation table.
         *
         * The list of codes is complete according to the
         * {@link http://www.iana.org/assignments/http-status-codes/ Hypertext Transfer Protocol (HTTP) Status Code Registry}
         * (last updated 2012-02-13).
         *
         * Unless otherwise noted, the status code is defined in RFC2616.
         *
         * @var array
         */
        static public $statusTexts;
        /**
         * @var  string
         */
        protected $content;
        /**
         * @var  int
         */
        protected $statusCode;
        /**
         * @var  string
         */
        protected $statusText;
        /**
         * @var  array
         */
        public $headers;
        /**
         * @var string
         */
        protected $version;

        public function __construct($content = '', $statusCode = 200, $headers = array( )) {}
        public function setContent($content) {}
        /**
         * Returns the Response as an HTTP string.
         *
         * The string representation of the Response is the same as the
         * one that will be sent to the client only if the prepare() method
         * has been called before.
         *
         * @return string The Response as an HTTP string
         *
         * @see prepare()
         */
        public function __toString() {}
        public function setStatusCode($code, $text = null) {}
        /**
         * Is response invalid?
         *
         * @return bool
         *
         * @api
         */
        public function isInvalid() {}
        public function header($key, $value, $replace = true) {}
        /**
         * Sends HTTP headers and content.
         *
         * @return Response
         *
         * @api
         */
        public function send() {}
        /**
         * Sends content for the current web response.
         *
         * @return Response
         */
        public function sendContent() {}
        /**
         * Sends HTTP headers.
         *
         * @return Response
         */
        public function sendHeaders() {}
    }

    class imageLib {
        private $fileName;
        private $image;
        protected $imageResized;
        private $widthOriginal;
        private $heightOriginal;
        private $width;
        private $height;
        private $imageSize;
        private $fileExtension;
        private $debug;
        private $errorArray;
        private $forceStretch;
        private $aggresiveSharpening;
        private $transparentArray;
        private $keepTransparency;
        private $fillColorArray;
        private $sharpenArray;
        private $psdReaderPath;
        private $filterOverlayPath;
        private $isInterlace;
        private $captionBoxPositionArray;
        private $fontDir;
        private $cropFromTopPercent;

        function __construct($fileName) {}
        private function initialise() {}
        public function resizeImage($newWidth, $newHeight, $option = 0, $sharpen = false, $autoRotate = false) {}
        public function cropImage($newWidth, $newHeight, $cropPos = 'm') {}
        private function keepTransparancy($width, $height, $im) {}
        private function crop($optimalWidth, $optimalHeight, $newWidth, $newHeight, $cropPos) {}
        private function getCropPlacing($optimalWidth, $optimalHeight, $newWidth, $newHeight, $pos = 'm') {}
        private function getDimensions($newWidth, $newHeight, $option) {}
        private function getSizeByFixedHeight($newWidth, $newHeight) {}
        private function getSizeByFixedWidth($newWidth, $newHeight) {}
        private function getSizeByAuto($newWidth, $newHeight) {}
        private function getOptimalCrop($newWidth, $newHeight) {}
        private function sharpen() {}
        private function sharpen2($level) {}
        private function findSharp($orig, $final) {}
        private function prepOption($option) {}
        public function borderPreset($preset) {}
        public function addBorder($thickness = 1, $rgbArray = array(255, 255, 255)) {}
        public function greyScale() {}
        public function greyScaleEnhanced() {}
        public function greyScaleDramatic() {}
        public function blackAndWhite() {}
        public function negative() {}
        public function sepia() {}
        public function sepia2() {}
        public function vintage() {}
        /** Apply 'Monopin' preset */
        public function gd_filter_monopin() {}
        public function gd_filter_vintage() {}
        private function gd_apply_overlay($im, $type, $amount) {}
        public function image_colorize($rgb) {}
        public function addReflection($reflectionHeight = 50, $startingTransparency = 30, $inside = false, $bgColor = '#fff', $stretch = false, $divider = 0) {}
        public function rotate($value = 90, $bgColor = 'transparent') {}
        public function roundCorners($radius = 5, $bgColor = 'transparent') {}
        public function addShadow($shadowAngle = 45, $blur = 15, $bgColor = 'transparent') {}
        public function addCaptionBox($side = 'b', $thickness = 50, $padding = 0, $bgColor = '#000', $transaprencyAmount = 30) {}
        public function addTextToCaptionBox($text, $fontColor = '#fff', $fontSize = 12, $angle = 0, $font = null) {}
        private function calculateCaptionBoxPosition($side, $thickness, $padding) {}
        public function getExif($debug = false) {}
        private function resolveExposureProgram($ep) {}
        private function resolveMeteringMode($mm) {}
        private function resolveFlash($flash) {}
        public function writeIPTCcaption($value) {}
        public function writeIPTCwriter($value) {}
        private function writeIPTC($dat, $value) {}
        private function iptc_maketag($rec, $dat, $val) {}
        public function addText($text, $pos = '20x20', $padding = 0, $fontColor = '#fff', $fontSize = 12, $angle = 0, $font = null) {}
        private function getTextFont($font) {}
        private function getTextSize($fontSize, $angle, $font, $text) {}
        public function addWatermark($watermarkImage, $pos, $padding = 0, $opacity = 0) {}
        private function calculatePosition($pos, $padding, $assetWidth, $assetHeight, $upperLeft = true) {}
        private function filterOpacity($img, $opacity = 75) {}
        private function openImage($file) {}
        public function reset() {}
        public function saveImage($savePath, $imageQuality = "100") {}
        public function displayImage($fileType = 'jpg', $imageQuality = "100") {}
        public function setTransparency($bool) {}
        public function setFillColor($value) {}
        public function setCropFromTop($value) {}
        public function testGDInstalled() {}
        public function testEXIFInstalled() {}
        public function testIsImage($image) {}
        public function testFunct() {}
        public function setForceStretch($value) {}
        public function setFile($fileName) {}
        public function getFileName() {}
        public function getHeight() {}
        public function getWidth() {}
        public function getOriginalHeight() {}
        public function getOriginalWidth() {}
        public function getErrors() {}
        private function checkInterlaceImage($isEnabled) {}
        protected function formatColor($value) {}
        function hex2dec($hex) {}
        private function createImageColor($colorArray) {}
        private function testColorExists($colorArray) {}
        private function findUnusedGreen() {}
        private function findUnusedBlue() {}
        private function invertTransparency($value, $originalMax, $invert = true) {}
        private function transparentImage($src) {}
        function checkStringStartsWith($needle, $haystack) {}
        private function GD2BMPstring($gd_image) {}
        private function GetPixelColor($img, $x, $y) {}
        private function LittleEndian2String($number, $minbytes = 1) {}
        private function ImageCreateFromBMP($filename) {}
        private function imagecreatefrompsd($fileName) {}
        public function __destruct() {}
    }

    class FTPClient {
        private $connectionId;
        private $loginOk;
        private $messageArray;

        public function __construct() {}
        private function logMessage($message) {}
        public function getMessages() {}
        public function connect($server, $ftpUser, $ftpPassword, $isPassive = false) {}
        public function makeDir($directory) {}
        public function changeDir($directory) {}
        public function getDirListing($directory = '.', $parameters = '-la') {}
    }

}

namespace MelisCore {
    /**
     * ModuleManager
     *
     * @package    MelisCore
     * @license    https://opensource.org/licenses/OSL-3.0 Open Software License v. 3.0
     */
    class MelisModuleManager {
        const MELIS_MODULE_LOAD = 'config/melis.module.load.php';
        const MODULE_LOAD_FILE = 'config/module.load.php';

        /**
         * Retrieve Activated module components
         * and placed on top of the modules
         * @return array
         */
        public static function getModuleComponents() {}
/**
 * load the default modules if $melisSite
 * is not found
 */
        public static function getModules(/**
 * load the default modules if $melisSite
 * is not found
 */
$temp = true) {}
        public static function sanitize($input, $skip = [ ], $textOnly = false, $removeFunctions = true) {}
    }

    /**
     * ModuleComposerScript
     *
     * @package    MelisCore
     * @license    https://opensource.org/licenses/OSL-3.0 Open Software License v. 3.0
     */
    class ModuleComposerScript {
        static private $serviceManager;
        static private $noPrint;

        public static function setNoPrint() {}
        public static function setServiceManager($serviceManger) {}
        private static function translate($text) {}
        /**
         * This method execute php scripts in the specified directory /install/scripts
         */
        public static function executeScripts() {}
    }

    /**
     * Class Module
     * @package MelisCore
     * @require melis-core
     */
    class Module {
/** @var \MelisCore\Service\MelisCoreModulesService $moduleSvc */
        public function onBootstrap(/** @var \MelisCore\Service\MelisCoreModulesService $moduleSvc */
MvcEvent $e) {}
        public function initShowErrorsByconfig(MvcEvent $e) {}
        public function initSession(MvcEvent $e) {}
/** @var MelisCoreCreatePasswordService $melisCreatePass */
        public function changePasswordPageLangOverride(/** @var MelisCoreCreatePasswordService $melisCreatePass */
$e) {}
        public function createTranslations($e, $locale = 'en_EN') {}
        public function checkIdentity(MvcEvent $e) {}
        private function isInInstallMode($e) {}
        public function init(ModuleManager $mm) {}
        public function getConfig() {}
        public function getAutoloaderConfig() {}
    }

    class ServiceManagerGrabber extends \phpunit_framework_testcase {
        static protected $serviceConfig;

        public static function setServiceConfig() {}
        public static function getServiceConfig() {}
        public function getServiceManager() {}
        public function getTableGateway($model, $table) {}
        public function getTableMock($modelClass, $tableNameClass, $tableName, $method) {}
        public function getPhpUnitTool() {}
    }


    interface MelisSetupInterface {
        /**
         * This action returns the form view of the setup
         *
         * @return \Laminas\View\Model\ViewModel
         */
        function getFormAction() ;
        /**
         * This action returns the status of the form validation
         *
         * @return \Laminas\View\Model\JsonModel
         */
        function validateFormAction() ;
        /**
         * This action executes the submitted data, depending on what execution is being done
         * inside this action, it's either storing the data in the database table or
         * creating a configuration file, or etc.
         *
         * @return \Laminas\View\Model\JsonModel
         */
        function submitAction() ;
    }

}

namespace FtpClient {
    /**
     * Wrap the PHP FTP functions
     *
     * @method bool alloc() alloc(int $filesize, string &$result = null) Allocates space for a file to be uploaded
     * @method bool cdup() cdup() Changes to the parent directory
     * @method bool chdir() chdir(string $directory) Changes the current directory on a FTP server
     * @method int chmod() chmod(int $mode, string $filename) Set permissions on a file via FTP
     * @method bool close() close() Closes an FTP connection
     * @method bool delete() delete(string $path) Deletes a file on the FTP server
     * @method bool exec() exec(string $command) Requests execution of a command on the FTP server
     * @method bool fget() fget(resource $handle, string $remote_file, int $mode, int $resumepos = 0) Downloads a file from the FTP server and saves to an open file
     * @method bool fput() fput(string $remote_file, resource $handle, int $mode, int $startpos = 0) Uploads from an open file to the FTP server
     * @method mixed get_option() get_option(int $option) Retrieves various runtime behaviours of the current FTP stream
     * @method bool get() get(string $local_file, string $remote_file, int $mode, int $resumepos = 0) Downloads a file from the FTP server
     * @method bool login() login(string $username, string $password) Logs in to an FTP connection
     * @method int mdtm() mdtm(string $remote_file) Returns the last modified time of the given file
     * @method string mkdir() mkdir(string $directory) Creates a directory
     * @method int nb_continue() nb_continue() Continues retrieving/sending a file (non-blocking)
     * @method int nb_fget() nb_fget(resource $handle, string $remote_file, int $mode, int $resumepos = 0) Retrieves a file from the FTP server and writes it to an open file (non-blocking)
     * @method int nb_fput() nb_fput(string $remote_file, resource $handle, int $mode, int $startpos = 0) Stores a file from an open file to the FTP server (non-blocking)
     * @method int nb_get() nb_get(string $local_file, string $remote_file, int $mode, int $resumepos = 0) Retrieves a file from the FTP server and writes it to a local file (non-blocking)
     * @method int nb_put() nb_put(string $remote_file, string $local_file, int $mode, int $startpos = 0) Stores a file on the FTP server (non-blocking)
     * @method array nlist() nlist(string $directory) Returns a list of files in the given directory
     * @method bool pasv() pasv(bool $pasv) Turns passive mode on or off
     * @method bool put() put(string $remote_file, string $local_file, int $mode, int $startpos = 0) Uploads a file to the FTP server
     * @method string pwd() pwd() Returns the current directory name
     * @method bool quit() quit() Closes an FTP connection
     * @method array raw() raw(string $command) Sends an arbitrary command to an FTP server
     * @method array rawlist() rawlist(string $directory, bool $recursive = false) Returns a detailed list of files in the given directory
     * @method bool rename() rename(string $oldname, string $newname) Renames a file or a directory on the FTP server
     * @method bool rmdir() rmdir(string $directory) Removes a directory
     * @method bool set_option() set_option(int $option, mixed $value) Set miscellaneous runtime FTP options
     * @method bool site() site(string $command) Sends a SITE command to the server
     * @method int size() size(string $remote_file) Returns the size of the given file
     * @method string systype() systype() Returns the system type identifier of the remote FTP server
     *
     * @author Nicolas Tallefourtane <dev@nicolab.net>
     */
    class FtpWrapper {
        /**
         * The connection with the server
         *
         * @var resource
         */
        protected $conn;

        public function __construct($connection) {}
        public function __call($function, array $arguments) {}
        public function connect($host, $port = 21, $timeout = 90) {}
        public function ssl_connect($host, $port = 21, $timeout = 90) {}
    }

    /**
     * The FtpException class.
     * Exception thrown if an error on runtime of the FTP client occurs.
     * @inheritDoc
     * @author Nicolas Tallefourtane <dev@nicolab.net>
     */
    class FtpException extends \exception {}

    /**
     * The FTP and SSL-FTP client for PHP.
     *
     * @method bool alloc() alloc(int $filesize, string &$result = null) Allocates space for a file to be uploaded
     * @method bool cdup() cdup() Changes to the parent directory
     * @method bool chdir() chdir(string $directory) Changes the current directory on a FTP server
     * @method int chmod() chmod(int $mode, string $filename) Set permissions on a file via FTP
     * @method bool delete() delete(string $path) Deletes a file on the FTP server
     * @method bool exec() exec(string $command) Requests execution of a command on the FTP server
     * @method bool fget() fget(resource $handle, string $remote_file, int $mode, int $resumepos = 0) Downloads a file from the FTP server and saves to an open file
     * @method bool fput() fput(string $remote_file, resource $handle, int $mode, int $startpos = 0) Uploads from an open file to the FTP server
     * @method mixed get_option() get_option(int $option) Retrieves various runtime behaviours of the current FTP stream
     * @method bool get() get(string $local_file, string $remote_file, int $mode, int $resumepos = 0) Downloads a file from the FTP server
     * @method int mdtm() mdtm(string $remote_file) Returns the last modified time of the given file
     * @method int nb_continue() nb_continue() Continues retrieving/sending a file (non-blocking)
     * @method int nb_fget() nb_fget(resource $handle, string $remote_file, int $mode, int $resumepos = 0) Retrieves a file from the FTP server and writes it to an open file (non-blocking)
     * @method int nb_fput() nb_fput(string $remote_file, resource $handle, int $mode, int $startpos = 0) Stores a file from an open file to the FTP server (non-blocking)
     * @method int nb_get() nb_get(string $local_file, string $remote_file, int $mode, int $resumepos = 0) Retrieves a file from the FTP server and writes it to a local file (non-blocking)
     * @method int nb_put() nb_put(string $remote_file, string $local_file, int $mode, int $startpos = 0) Stores a file on the FTP server (non-blocking)
     * @method bool pasv() pasv(bool $pasv) Turns passive mode on or off
     * @method bool put() put(string $remote_file, string $local_file, int $mode, int $startpos = 0) Uploads a file to the FTP server
     * @method string pwd() pwd() Returns the current directory name
     * @method bool quit() quit() Closes an FTP connection
     * @method array raw() raw(string $command) Sends an arbitrary command to an FTP server
     * @method bool rename() rename(string $oldname, string $newname) Renames a file or a directory on the FTP server
     * @method bool set_option() set_option(int $option, mixed $value) Set miscellaneous runtime FTP options
     * @method bool site() site(string $command) Sends a SITE command to the server
     * @method int size() size(string $remote_file) Returns the size of the given file
     * @method string systype() systype() Returns the system type identifier of the remote FTP server
     *
     * @author Nicolas Tallefourtane <dev@nicolab.net>
     */
    class FtpClient implements \countable {
        /**
         * The connection with the server.
         *
         * @var resource
         */
        protected $conn;
        /**
         * PHP FTP functions wrapper.
         *
         * @var FtpWrapper
         */
        private $ftp;

        public function __construct($connection = null) {}
        /**
         * Close the connection when the object is destroyed.
         */
        public function __destruct() {}
        public function __call($method, array $arguments) {}
        public function setPhpLimit($memory = null, $time_limit = 0, $ignore_user_abort = true) {}
        /**
         * Get the help information of the remote FTP server.
         * 
         * @return array
         */
        public function help() {}
        public function connect($host, $ssl = false, $port = 21, $timeout = 90) {}
        /**
         * Closes the current FTP connection.
         *
         * @return bool
         */
        public function close() {}
        /**
         * Get the connection with the server.
         *
         * @return resource
         */
        public function getConnection() {}
        /**
         * Get the wrapper.
         *
         * @return FtpWrapper
         */
        public function getWrapper() {}
        public function login($username = 'anonymous', $password = '') {}
        public function modifiedTime($remoteFile, $format = null) {}
        /**
         * Changes to the parent directory.
         *
         * @throws FtpException
         * @return FtpClient
         */
        public function up() {}
        public function nlist($directory = '.', $recursive = false, $filter = 'sort') {}
        public function mkdir($directory, $recursive = false) {}
        public function rmdir($directory, $recursive = true) {}
        public function cleanDir($directory) {}
        public function remove($path, $recursive = false) {}
        public function isDir($directory) {}
        public function isEmpty($directory) {}
        public function scanDir($directory = '.', $recursive = false) {}
        public function dirSize($directory = '.', $recursive = true) {}
        public function count($directory = '.', $type = null, $recursive = true) {}
        public function putFromString($remote_file, $content) {}
        public function putFromPath($local_file) {}
        public function putAll($source_directory, $target_directory, $mode = FTP_BINARY) {}
        public function rawlist($directory = '.', $recursive = false) {}
        public function parseRawList(array $rawlist) {}
        public function rawToType($permission) {}
        protected function setWrapper(FtpWrapper $wrapper) {}
    }

}

namespace MelisCore\Form {
    class MelisForm extends \laminas\form\form implements \laminas\eventmanager\eventmanagerawareinterface {
        /**
         * @var $events
         */
        protected $events;

        public function setEventManager(EventManagerInterface $events) {}
        /**
         * @return EventManagerInterface
         */
        public function getEventManager() {}
        public function isValid($triggerEvent = null, $params = [ ]) {}
    }

}


namespace MelisCore\Form\View\Helper {
    class MelisFieldCollection extends \laminas\form\view\helper\formcollection {
        protected $shouldWrap;
        protected $defaultElementHelper;

        public function __invoke(ElementInterface $element = null, $wrap = false) {}
    }

    class MelisFieldRow extends \laminas\form\view\helper\formrow {
        const MELIS_TEXT_WITH_BUTTON = 'MelisTextButton';
        const MELIS_MSGR_MSG_BOX = 'melis-messenger-msg-box';
        const MELIS_COMMERCE_DATE = 'melis-date';
        const MELIS_COLOR_PICKER = 'color-picker';
        const MELIS_INPUT_GROUP_BUTTON = 'melis-input-group-button';
        const MELIS_TEXT_REQUIRED = 'required';
        const MELIS_TOGGLE_BUTTON_FACTORY = 'switch';
        const MELIS_SELECT_FACTORY = 'select';
        const MELIS_MULTI_VAL_INPUT = 'melis-multi-val-input';
        const MELIS_DRAGGABLE_INPUT = 'melis-draggable-input';

/**
 *  Firefox warning issue if the label attribute "for" is empty
 *  resulting "Empty string passed to getElementById()." on console
 *  If the element has not value '' this will generate id using uniqid() concatinated by name of the element
 *  And this way it will avoid label tag wrapping input/select... element
 */
        public function render(/**
 *  Firefox warning issue if the label attribute "for" is empty
 *  resulting "Empty string passed to getElementById()." on console
 *  If the element has not value '' this will generate id using uniqid() concatinated by name of the element
 *  And this way it will avoid label tag wrapping input/select... element
 */
ElementInterface $element, /**
 *  Firefox warning issue if the label attribute "for" is empty
 *  resulting "Empty string passed to getElementById()." on console
 *  If the element has not value '' this will generate id using uniqid() concatinated by name of the element
 *  And this way it will avoid label tag wrapping input/select... element
 */
$labelPosition = null) {}
        protected function getClass(ElementInterface $element) {}
    }

}

namespace MelisCore\Form\Factory {
    /**
     * MelisCore date field
     *
     * Source:
     * https://cdnjs.com/libraries/bootstrap-datetimepicker
     * http://eonasdan.github.io/bootstrap-datetimepicker/
     */
    class DatePickerFactory extends \laminas\form\element\text {
        public function __invoke(ContainerInterface $container, $requestedName) {}
    }

    /**
     * Creates a toggle button by using a checkbox element, 
     * toggle button is being shown once it renders to the 
     * templates theme and features.<br/>
     * Files needed:
     * bootstrap-switch.js?v=v1.2.3 & bootstrap-switch.init.js?v=v1.2.3
     */
    class MelisToggleButtonFactory {
        public function __invoke(ContainerInterface $container, $requestedName) {}
    }

    /**
     * MelisCore TinyMCE textarea field
     */
    class MelisCoreTinyMCEFactory extends \laminas\form\element\textarea {
        public function __invoke(ContainerInterface $container, $requestedName) {}
    }

    /**
     * Use Role select factory to fill the Use Roles list
     */
    class MelisUserRoleSelectFactory extends \meliscore\form\factory\melisselectfactory {
        protected function loadValueOptions(ServiceManager $serviceManager) {}
    }

    /**
     * This class creates a select box for melis languages
     */
    class LanguageSelectFactory extends \meliscore\form\factory\melisselectfactory {
        protected function loadValueOptions(ServiceManager $serviceManager) {}
    }

    /**
     * Melis Text Input Element
     */
    class MelisTextFactory {
        public function __invoke(ContainerInterface $container, $requestedName) {}
    }

    class MelisSiteSelectFactory extends \meliscore\form\factory\melisselectfactory {
        protected function loadValueOptions(ServiceManager $serviceManager) {}
    }

    class MelisSelectFactory {
        public function __invoke(ContainerInterface $container, $requestedName) {}
    }

    class MelisCoreLogTypeSelectFactory extends \meliscore\form\factory\melisselectfactory {
        protected function loadValueOptions(ServiceManager $serviceManager) {}
    }

    class MelisCoreMultiValueInputFactory extends \laminas\form\element\text {
        public function __invoke(ContainerInterface $container, $requestedName) {}
    }

    class MelisGdprAutoDeleteModuleListSelectFactory extends \meliscore\form\factory\melisselectfactory {
        protected function loadValueOptions(ServiceManager $serviceManager) {}
    }

    /**
     * Melis commerce date field
     */
    class DateFieldFactory extends \laminas\form\element\text {
        public function __invoke(ContainerInterface $container, $requestedName) {}
    }

    /**
     * MelisCoreUserSelect using Select2
     *
     * Source:
     * https://select2.org/getting-started
     */
    class MelisCoreUsersSelect2Factory {
        public function __invoke(ContainerInterface $container, $requestedName) {}
        protected function loadValueOptions(ServiceManager $serviceManager) {}
    }

    /**
     * MelisCore datetime field
     *
     * Source:
     * https://cdnjs.com/libraries/bootstrap-datetimepicker
     * http://eonasdan.github.io/bootstrap-datetimepicker/
     */
    class DateTimePickerFactory extends \laminas\form\element\text {
        public function __invoke(ContainerInterface $container, $requestedName) {}
    }

}

namespace MelisCore\Listener {
    class MelisCoreTinyMCEConfigurationListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
/**
 * the key of the configuration that you would like to exclude when merging the configuration,
 * this will be used to avoid configuration conflicts in tinyMCE, or those extensions that uses the same configuration name
 * in tinyMCE
 */
        public function attach(/**
 * the key of the configuration that you would like to exclude when merging the configuration,
 * this will be used to avoid configuration conflicts in tinyMCE, or those extensions that uses the same configuration name
 * in tinyMCE
 */
EventManagerInterface $events, /**
 * the key of the configuration that you would like to exclude when merging the configuration,
 * this will be used to avoid configuration conflicts in tinyMCE, or those extensions that uses the same configuration name
 * in tinyMCE
 */
$priority = 1) {}
    }

    class MelisCorePluginsListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    class MelisCoreMicroServiceRouteParamListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
/**
 * This explodes the string coming from arrayParam post value
 * Sample string value: 1,3,1,4,1
 */
        public function attach(/**
 * This explodes the string coming from arrayParam post value
 * Sample string value: 1,3,1,4,1
 */
EventManagerInterface $events, /**
 * This explodes the string coming from arrayParam post value
 * Sample string value: 1,3,1,4,1
 */
$priority = 1) {}
    }

    class MelisCoreCheckUserRightsListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        const INTERVAL_TO_UPDATE = 5;

        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    class MelisCorePluginsAdditionalListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    class MelisCoreDashboardPluginRightsTreeViewListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    class MelisCoreNewPlatformListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    /**
     * Site 404 catcher listener
     */
    class MelisCorePhpWarningListener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
        public function detach(EventManagerInterface $events) {}
    }

    class MelisCoreFlashMessengerListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
/**
 * Attaching Events listiners
 */
        public function attach(/**
 * Attaching Events listiners
 */
EventManagerInterface $events, /**
 * Attaching Events listiners
 */
$priority = 1) {}
    }

    class MelisCoreAuthSuccessListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    class MelisCoreInstallNewPlatformListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events) {}
    }

    class MelisCoreToolUserUpdateUserListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    class MelisCorePluginsRemovalListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    class MelisCoreToolUserAddNewUserListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    /**
     * Melis General Listener implements detach
     * so that other listener can extends this class and not
     * redefine those
     */
    abstract class MelisGeneralListener extends \laminas\eventmanager\abstractlisteneraggregate {
        protected function getControllerAction($e) {}
        public function logMessages(EventInterface $event) {}
        public function attachEventListener(EventManagerInterface $events, $identifier, $eventName, callable $listener, $priority = 1) {}
    }

    class MelisCoreTableColumnDisplayListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    class MelisCoreUserRecentLogsListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

    /**
     * Site Redirect to real back office listener
     */
    class MelisCoreUrlAccessCheckerListenner implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
        public function detach(EventManagerInterface $events) {}
    }

    /**
     * Listenner for getting rights of MelisCore
     * - Interface exclusions
     * - Tools
     * Rights are added to session to combine with other modules
     */
    class MelisCoreGetRightsTreeViewListener extends \meliscore\listener\melisgenerallistener implements \laminas\eventmanager\listeneraggregateinterface {
        public function attach(EventManagerInterface $events, $priority = 1) {}
    }

}

namespace MelisCore\Validator {
    class MelisPasswordValidator extends \laminas\validator\abstractvalidator {
        const NO_LOWER = 'lower';
        const NO_DIGIT = 'digit';
        const TOO_SHORT = 'length';

        protected $messageTemplates;
        /**
         * @var array
         */
        protected $messageVariables;
        protected $options;

        public function __construct($options = array( )) {}
        /**
         * Returns the min option
         *
         * @return int
         */
        public function getMin() {}
        public function setMin($min) {}
        public function isValid($value) {}
    }

}

namespace MelisCore\Entity {
    class MelisCorePlatformScheme {
        protected $id;
        protected $name;
        protected $colors;
        protected $sidebarHeaderLogo;
        protected $sidebarHeaderText;
        protected $loginLogo;
        protected $loginBackground;
        protected $favicon;
        protected $isActive;

        public function setId($id) {}
        public function getId() {}
        public function setName($name) {}
        public function getName() {}
        public function setColors($colors) {}
        public function getColors() {}
        public function setSidebarHeaderLogo($sidebarHeaderLogo) {}
        public function getSidebarHeaderLogo() {}
        public function setSidebarHeaderText($sidebarHeaderText) {}
        public function getSidebarHeaderText() {}
        public function setLoginLogo($loginLogo) {}
        public function getLoginLogo() {}
        public function setLoginBackground($loginBackground) {}
        public function getLoginBackground() {}
        public function setFavicon($favicon) {}
        public function getFavicon() {}
        public function setIsActive($isActive) {}
        public function getIsActive() {}
        public function getArrayCopy() {}
    }

    class MelisLog {
        protected $id;
        protected $log;
        protected $type;
        protected $translations;

        public function getId() {}
        public function setId($id) {}
        public function setLog($log) {}
        public function getLog() {}
        public function setType($type) {}
        public function getType() {}
        public function getTranslations() {}
        public function setTranslations($translations) {}
        public function getArrayCopy() {}
    }

}

namespace MelisCore\Controller {
    /**
     * @property bool $showOnMarketplacePostSetup
     */
    class MelisSetupPostUpdateController extends \meliscore\controller\melisabstractactioncontroller implements \meliscore\melissetupinterface {
        /**
         * flag for Marketplace whether to display the setup form or not
         * @var bool $showOnMarketplacePostSetup
         */
        public $showOnMarketplacePostSetup;

        /**
         * @return \Laminas\View\Model\ViewModel
         */
        public function getFormAction() {}
        /**
         * @return \Laminas\View\Model\JsonModel
         */
        public function validateFormAction() {}
        /**
         * @return \Laminas\View\Model\JsonModel
         */
        public function submitAction() {}
    }

    /**
     * This class handles the request from AJAX call in 
     * generating plugin and saving Dashboard plugins
     */
    class DashboardPluginsController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * Render Dashboard Menu
         * 
         * @return \Laminas\View\Model\ViewModel
         */
        public function dashboardMenuAction() {}
        /** @var \MelisCore\Service\MelisCoreDashboardPluginsRightsService $dashboardPluginsService */
        public function renderDashboardPluginsAction() {}
        /**
         * This method used to generate Dashboard plugin 
         * requested from a forward() request
         * 
         * @return \Laminas\View\Model\ViewModel;
         */
        public function generateDahsboardPluginAction() {}
        /**
         * decode the string
         */
        public function getPluginAction() {}
        /**
         * Calling MelisCoreDashboardDragDropZonePlugin to save Dashboard plugins
         */
        public function saveDashboardPluginsAction() {}
        private function putSectionOnPlugins($plugins) {}
        private function organizedPluginsBySection($plugins) {}
    }

    class MelisCoreMicroServiceController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * If there's an error, we display the JSON response
         */
        public function runAction() {}
        /**
         * Return the MelisMicroServiceAuthTable Table
         * @return array|object
         */
        private function getMicroServiceAuthTable() {}
        private function getForm($formConfig) {}
        /**
         * Return the MelisCoreTool Service
         * @return array|object
         */
        private function tool() {}
        public function renderToolUserViewMicroServiceModalHandlerAction() {}
        public function renderToolUserViewMicroServiceModalAction() {}
        public function getUserAuthDataAction() {}
        public function generateApiKeyAction() {}
        public function modifyResultAction() {}
        public function updateStatusAction() {}
        private function generateCode($length = 16) {}
        /**
         * generate all available list of Microservices
         */
        public function microServicesListAction() {}
    }

    /**
     * This class deals with authentification to Melis Platform
     */
    class MelisAuthController extends \meliscore\controller\melisabstractactioncontroller {
        const ROLE_ID_CUSTOM = 1;
        const USER_ACTIVE = 1;
        const USER_INACTIVE = 0;

        /**
         * Rendering the Melis CMS interface
         * @return \Laminas\View\Model\ViewModel
         */
        public function loginpageAction() {}
        /**
         * Shows login form
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function loginAction() {}
        protected function crypt($data, $type = 'encrypt') {}
        /**
         * if 'use_mcrypt' is set to "true", then we'll use the mcrypt API for password checking,
         * however, this will still update the password to new password encryption.
         *
         * WARNING: mcrypt API is deprecated on PHP 7.1
         */
        public function authenticateAction() {}
        protected function rememberMe($username, $password) {}
        protected function forgetMe($username, $password) {}
        /**
         * Shows logout button in header
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function headerLogoutAction() {}
        /**
         * Shows identity zone in the left menu
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function identityMenuAction() {}
        /**
         * Logout action
         */
        public function logoutAction() {}
        /**
         * Get the profile picture
         *
         * @return \Laminas\Stdlib\ResponseInterface
         */
        public function getProfilePictureAction() {}
        public function getCurrentLoggedInUserAction() {}
        public function getCurrentLoggedInIdAction() {}
        public function isLoggedInAction() {}
        public function getIdentityMenuAction() {}
    }

    /**
     * This class deals with User functionalities
     *
     */
    class UserController extends \meliscore\controller\melisabstractactioncontroller {
        const CONFIG_PATH = 'meliscore/datas';

        protected $_hash;

        /**
         * Rendering the Melis CMS interface
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLostPasswordAction() {}
        /**
         * Renders to the Lost Password form
         * @return \Laminas\View\Model\ViewModel
         */
        public function retrievePageAction() {}
        /**
         * Processes the lost password request 
         * @return \Laminas\View\Model\JsonModel
         */
        public function lostPasswordRequestAction() {}
        /**
         * Rendering the Melis CMS interface
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderResetPasswordAction() {}
        /**
         * Renders to the reset password view and process it after clicking the reset button
         * @return \Laminas\View\Model\ViewModel
         */
        public function resetPasswordAction() {}
        /**
         *
         * This will reset your old password with the new password
         *
         * @return JsonModel
         */
        public function resetOldPasswordAction() {}
        /**
         * Rendering the Melis CMS interface
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderGeneratePasswordAction() {}
        /**
         * Renders to the reset password view and process it after clicking the reset button
         * @return \Laminas\View\Model\ViewModel
         */
        public function generatePasswordAction() {}
        /**
         * Rendering the Melis CMS interface
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderRenewPasswordAction() {}
        /**
         * Renders to the renew password view and process it after clicking the submit button
         * @return \Laminas\View\Model\ViewModel
         */
        public function renewPasswordAction() {}
        /** @var MelisCoreCreatePasswordService $melisCreatePwdSvc */
        public function createPasswordAction() {}
        protected function recoverHashAction() {}
        /**
         * Retrieves the passed hash 
         */
        protected function setHashAction() {}
        /**
         * Stores the hash value so resetPasswordAction function can use it
         * @return string|mixed
         */
        protected function getHash() {}
        private function getSchemes() {}
    }

    class MelisTinyMceController extends \meliscore\controller\melisabstractactioncontroller {
        const MINI_TEMPLATES_FOLDER = 'miniTemplatesTinyMce';

        /**
         * This listener is for users or developers who wants to extend the functionality of tinyMCE, especially when adding new extensions.
         */
        public function getTinyMceConfigAction() {}
        public function reconfigureTinyMce() {}
        /**
         * This method sends back the list of mini-templates for TinyMCE
         * It takes the site ID as a parameter, determines the website folder
         * in order to list only the mini-templates of the website and not
         * all of them
         *
         * @return \Laminas\View\Model\JsonModel
         */
        public function getTinyTemplatesAction() {}
        public function uploadImageAction() {}
        function isImage($fileName) {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisCoreGdprAutoDeleteController extends \meliscore\controller\melisabstractactioncontroller {
        const DELETE_LOG_TYPE = 'CORE_GDPR_AUTO_DELETE_DELETE';
        const UPDATE_LOG_TYPE = 'CORE_GDPR_AUTO_DELETE_UPDATE';
        const SAVE_LOG_TYPE = 'CORE_GDPR_AUTO_DELETE_ADD';

        /**
         * form errors
         * @var array
         */
        private $formErrors;

        /**
         * @return ViewModel
         */
        public function renderContentModalAction() {}
        /**
         * this method will get the melisKey from route params
         */
        private function getMelisKey() {}
        /**
         * @return ViewModel
         */
        public function renderContentContainerAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionsAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionListConfigAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionListConfigHeaderAction() {}
        /**
         *
         * limit view of the table
         *
         * @return ViewModel
         */
        public function renderContentAccordionListConfigContentLimitAction() {}
        /**
         *
         * limit view of the table
         *
         * @return ViewModel
         */
        public function renderContentAccordionListConfigContentSiteFilterAction() {}
        /**
         *
         * limit view of the table
         *
         * @return ViewModel
         */
        public function renderContentAccordionListConfigContentModuleFilterAction() {}
        /** @var MelisCoreGdprAutoDeleteToolService $gdprAutoDeleteSvc */
        private function getGdprAutoDeleteToolService() {}
        /**
         *
         * limit view of the table
         *
         * @return ViewModel
         */
        public function renderContentAccordionListConfigContentEditAction() {}
        /**
         *
         * limit view of the table
         *
         * @return ViewModel
         */
        public function renderContentAccordionListConfigContentRefreshAction() {}
        /**
         *
         * limit view of the table
         *
         * @return ViewModel
         */
        public function renderContentAccordionListConfigContentSearchAction() {}
        /**
         *
         * limit view of the table
         *
         * @return ViewModel
         */
        public function renderContentAccordionListConfigContentDeleteAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionListConfigContentAction() {}
        /**
         * this method will get the meliscore tool
         * @return MelisCoreToolService | object
         */
        private function getTool() {}
        /**
         *  get gdpr delete config data
         *
         * @return JsonModel
         */
        public function getGdprDeleteConfigDataAction() {}
        private function processPostData($postData) {}
        private function formatDataIntoDataTableFormat($data) {}
        private function getLocaleEmailTrans($configId, $type) {}
        private function getLocaleNameByLangId($langId) {}
        /**
         * @return MelisGdprDeleteConfigTable | array | object
         */
        private function getGdprDeleteConfigTable() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionAddEditConfigAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionAddEditConfigHeaderAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionAddEditConfigHeaderSaveBtnAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionAddEditConfigContentAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAccordionAddEditConfigFiltersAction() {}
        /**
         * @return JsonModel
         */
        public function saveAutoDeleteConfigurationAction() {}
        private function validateCronConfigData($alertDays, $deleteDays, $resend = false) {}
        private function validateTransForm($data, $error) {}
        /**
         * @return JsonModel
         */
        public function deleteAction() {}
        private function processFile($file) {}
        private function parseSerializedData($postData) {}
        private function jsonToArray($jsonData) {}
        /**
         * @return array
         */
        public function getFormErrors() {}
        public function setFormErrors($errors) {}
        private function saveAlertEmailsTrans($validatedData, $configId, $type) {}
        /**
         * get config id from the url
         * @return mixed
         */
        private function getConfigId() {}
        /**
         * get config id from the url
         * @return mixed
         */
        private function getSiteId() {}
        /**
         * get config id from the url
         * @return mixed
         */
        private function getModule() {}
        /**
         * @return JsonModel
         */
        public function runGdprAutoDeleteCronAction() {}
    }

    /**
     * This class renders Melis CMS appConfig views recursively
     * to generate web interface based on it
     */
    class MelisGenericModalController extends \meliscore\controller\melisabstractactioncontroller {
        public function genericModalAction() {}
        public function reloadGenericModalAction() {}
        public function emptyGenericModalAction() {}
    }

    /**
     * This class deals with the Melis Backoffice Logs
     */
    class LogController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * Render Log Tool page
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolAction() {}
        /**
         * Render Log Tool Header
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolHeaderAction() {}
        /**
         * Render Log Tool Content
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolContentAction() {}
        /**
         * Render Log Tool Table
         * This will generate DataTable for Listing of Logs
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolTableAction() {}
        /**
         * Render Log Tool Table limit
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolTableLimitAction() {}
        /**
         * Render Log Modal Container
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolModalContainerAction() {}
        /**
         * Render Log Tool Export
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolExportAction() {}
        /**
         * Render Log Modal Edit Content
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolExportModalContentAction() {}
        public function validateExportLogsAction() {}
        public function exportLogsAction() {}
        /**
         * Render Log Tool Table limit
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolTableDateRangeAction() {}
        /**
         * Render Log Tool Table Search
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolTableSearchAction() {}
        /**
         * If the user is Admin type this will allow to filter the result to any users,
         * else this will only show current user's logs
         */
        public function renderLogsToolTableUserFilterAction() {}
        /**
         * Render Log Tool Table Type Filter
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolTableTypeFilterAction() {}
        /**
         * Render Log Tool page Refresh Button
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderLogsToolTableRefreshAction() {}
        /**
         * If the user is Admin type this will allow to filter the result to any users,
         * else this will only show current user's logs
         */
        public function getEventLogsAction() {}
        /**
         * Retrieving all the list of logs for DataTable
         *
         * @return \Laminas\View\Model\JsonModel
         */
        public function getLogsAction() {}
        public function renderLogsToolTableLogTypeFormAction() {}
        /**
         * Adding all form ids,
         * this can be use on log type name validations
         */
        public function saveLogTypeTransAction() {}
        private function getFormConfig($formPath, $form) {}
        private function getForm($formConfig) {}
    }

    /**
     * @property bool $showOnMarketplacePostSetup
     */
    class MelisSetupPostDownloadController extends \meliscore\controller\melisabstractactioncontroller implements \meliscore\melissetupinterface {
        /**
         * flag for Marketplace whether to display the setup form or not
         * @var bool $showOnMarketplacePostSetup
         */
        public $showOnMarketplacePostSetup;
        protected $formConfigPath;

        /**
         * @return \Laminas\View\Model\ViewModel
         */
        public function getFormAction() {}
        /**
         * @return \Laminas\View\Model\JsonModel
         */
        public function validateFormAction() {}
        /**
         * @return \Laminas\View\Model\JsonModel
         */
        public function submitAction() {}
/**
 * Saving dashboard plugins to database
 */
        private function generateDashboardPlugins(/**
 * Saving dashboard plugins to database
 */
$userId = 1) {}
        /**
         * Returns the Tool Service Class
         * @return MelisCoreTool
         */
        private function getTool() {}
        /**
         * Create a form from the configuration
         *
         * @param $formConfig
         *
         * @return \Laminas\Form\ElementInterface
         */
        private function getForm() {}
        private function formatErrorMessage($errors = [ ]) {}
    }

    /**
     * Module Management Tool
     */
    class ModulesController extends \meliscore\controller\melisabstractactioncontroller {
        const MODULE_LOADER_FILE = 'config/melis.module.load.php';

        private $exclude_modules;

        /**
         * Main Tool Container
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolModulesAction() {}
        /**
         * Renders the header section of the tool
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolModulesHeaderAction() {}
        /**
         * Renders the content section of the tool
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolModulesContentAction() {}
        private function hasAccess($key) : bool {}
        /**
         * Saves the changes of the module modifications
         * @return JsonModel
         */
        public function saveModuleChangesAction() {}
        public function searchModules($useOnlySiteModule = false) {}
        public function getModules($useOnlySiteModule = false) {}
        /**
         * Returns the module that is dependent to the provided module
         * @return JsonModel
         */
        public function getDependentsAction() {}
        public function getRequiredDependenciesAction() {}
        protected function createModuleLoaderFile($modules = array( )) {}
        /**
         * @var \MelisCore\Service\MelisCoreModulesService $modulesSvc
         */
        protected function getModuleSvc() {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisCoreGdprAutoDeleteSmtpController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * form errors
         * @var array
         */
        private $formErrors;

        /**
         * @return ViewModel
         */
        public function renderContentContainerAction() {}
        /**
         * @return ViewModel
         */
        public function renderContentAction() {}
        private function getGdprAutoDeleteSmtpForm($data = null) {}
        /**
         * @return JsonModel
         */
        public function saveSmtpConfigAction() {}
        public function deleteSmtpAction() {}
        private function translateFields($formErrors) {}
        private function verifyUserPassword($password, $confirmpassword) {}
        /**
         * @return object | \MelisCore\Model\Tables\MelisGdprDeleteEmailsSmtpTable
         */
        private function getGdprAutoDeleteSmtpTable() {}
        /**
         * @return object
         */
        private function getGdprAutoDeleteService() {}
        /**
         * this method will get the meliscore tool
         * @return object
         */
        private function getTool() {}
        /**
         * this method will get the melisKey from route params
         */
        private function getMelisKey() {}
    }

    /**
     * This class renders Melis CMS Dashboard
*/
    class DashboardController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * Shows the leftmenu dasboard entry point
         * 
         * @return \Laminas\View\Model\ViewModel
         */
        public function leftmenuDashboardAction() {}
    }

    /**
     * Platform Tool
     */
    class PlatformsController extends \meliscore\controller\melisabstractactioncontroller {
        const TOOL_KEY = 'meliscore_platform_tool';
        const INTERFACE_KEY = 'meliscore_tool_platform';
        const TOOL_INDEX = 'meliscore';

        public function renderPlatformContainerAction() {}
        public function renderPlatformHeaderContainerAction() {}
        public function renderPlatformHeaderAddAction() {}
        public function renderPlatformContentAction() {}
        /**
         * Renders to the Edit button inside the table content (Action column)
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderPlatformContentActionEditAction() {}
        /**
         * Renders to the Delete button inside the table content (Action column)
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderPlatformContentActionDeleteAction() {}
        /**
         * Renders to the refresh button placed in the datatable
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderPlatformContentFiltersRefreshAction() {}
        /**
         * Renders to the search button placed in the datatable
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderPlatformContentFiltersSearchAction() {}
        /**
         * Renders to the limit button placed in the datatable
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderPlatformContentFiltersLimitAction() {}
        /**
         * Renders the Generic form of the Platform 
         * for creating new and updating new platform
         * 
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderPlatformGenericFormAction() {}
        /**
         * This method return the list of core platform available
         * 
         * @return \Laminas\View\Model\JsonModel
         */
        public function getPlatformsAction() {}
        /**
         * This method saving the platform info
         * this include adding and updating platform
         * 
         * @return \Laminas\View\Model\JsonModel
         */
        public function savePlatformAction() {}
        /**
         * Deletion of the platform
         * 
         * @return \Laminas\View\Model\JsonModel
         */
        public function deletePlatformAction() {}
        public function removePlatformByIdAction() {}
        public function getCurrentPlatformAction() {}
        private function hasAccess($key) : bool {}
    }

    /**
     * Platform Color Tool
     */
    class PlatformSchemeController extends \meliscore\controller\melisabstractactioncontroller {
        const SCHEME_FOLDER_PERMISSION = 755;

        /**
         * Tool display container
         * @return ViewModel
         */
        public function toolContainerAction() {}
        /**
         * Return "1" if saving was successful
         */
        public function saveAction() {}
        /**
         * @return JsonModel
         */
        public function resetToDefaultAction() {}
        /**
         * Generates a dynamic CSS virtual file that will be rendered
         * in the platform
         * @return ViewModel
         */
        public function getStyleColorCssAction() {}
        public function getCssAction() {}
        /**
         * @return \Laminas\Form\ElementInterface
         */
        private function getForm() {}
        private function formatErrorMessage($errors = array( )) {}
        /**
         * Returns the MelisCoreTool service
         * @return array|object
         */
        private function melisTool() {}
        /**
         * Returns the URI path of the platform scheme folder inside media folder
         * @return string
         */
        private function getSchemeFolder() {}
        private function hasAccess($key) : bool {}
        /**
         * Returns the melisKey of this tool
         * @return mixed
         */
        private function getMelisKey() {}
        private function convertWithBytes($size) {}
        /**
         * Returns the maximum file image size from the configuration
         * @return null|long
         */
        private function getMaxImageSize() {}
        /**
         * Returns the allowed extensions that can be uploaded
         * @return null|string
         */
        public function getAllowedUploadableExtension() {}
        /**
         * Returns the instance of MelisCorePlatformSchemeService
         * @return array|object
         */
        public function getPlatformSchemeSvc() {}
    }

    /**
     * MelisCore BO Emails Management
     */
    class EmailsManagementController extends \meliscore\controller\melisabstractactioncontroller {
        const TOOL_KEY = 'meliscore_emails_mngt_tool';
        const TOOL_INDEX = 'meliscore';
        const INTERFACE_KEY = 'meliscore_tool_emails_mngt';

        public function renderToolEmailsMngtContainerAction() {}
        public function renderToolEmailsMngtHeaderAction() {}
        public function renderToolEmailsMngtHeaderBtnAddAction() {}
        public function renderToolEmailsMngtTableRefreshAction() {}
        public function renderToolEmailsMngtTableSearchAction() {}
        public function renderToolEmailsMngtContentActionEditAction() {}
        /**
         * Getting the Tab title for Tab Edition
         * @return json
         */
        public function getEmailForTabTitleAction() {}
        public function renderToolEmailsMngtContentActionDeleteAction() {}
        public function renderToolEmailsMngtContentAction() {}
        public function renderToolEmailsMngtContentTableAction() {}
        public function getEmailsEntriesAction() {}
        public function getEmailsLanguages($codename) {}
        /**
         * Render Page Creation and Edition
         * */
        public function renderEmailsMngtAction() {}
        public function renderEmailsMngtHeaderAction() {}
        public function renderEmailsMngtHeaderSaveAction() {}
        public function renderEmailsMngtContentAction() {}
        public function renderEmailsMngtContentlangTabNavAction() {}
        public function renderEmailsMngtContentLangTabContentAction() {}
        protected function getLayoutFileStatus(string $path = '') : array {}
        public function saveEmailAction() {}
        public function deleteEmailAction() {}
        public function searchEmailAction() {}
        private function hasAccess($key) : bool {}
    }

    /**
     * This class renders Melis CMS
     */
    class TreeToolsController extends \meliscore\controller\melisabstractactioncontroller {
        const MARKETPLACE = 'melismarketplace';
        const DASHBOARDPLUGIN = 'melisdashboardplugin';
        const OTHERS = 'melisothers';
        const CUSTOM = 'meliscustom';
        const MARKETING = 'melismarketing';
        const COMMERCE = 'meliscommerce';
        const CORE = 'meliscore';
        const CMS = 'meliscms';

        /** @var \MelisCore\Service\MelisCoreRightsService $melisCoreRights */
        public function renderTreeToolsAction() : ViewModel {}
        /**
         * Retrieves all configuration under left menu configuration
         * with an exception to those allowable left menu configurations
         *
         * @return array
         */
        private function moveToolsToOthersCategory() : array {}
        /**
         * @return MelisCoreConfigService
         */
        private function getConfig() : MelisCoreConfigService {}
        /**
         * Returns the melisKeys of the allowed left menu configuration
         * @return array
         */
        private function getAllowedLeftMenuConfig() : array {}
        /**
         * @return ViewModel
         */
        public function renderFirstTreeToolsAction() {}
        /**
         * @inheritdoc
         */
        public function hasRightsAction() {}
    }

    class MelisPhpUnitToolController extends \meliscore\controller\melisabstractactioncontroller {
        const TEST_PASSED = 'success';
        const TEST_FAILED = 'failed';

        public function renderPhpunitContainerAction() {}
        public function renderPhpunitHeaderAction() {}
        public function renderPhpunitHeaderRunAllAction() {}
        public function renderPhpunitContentAction() {}
        /**
         * Returns all the available module folders inside module directory, but it will
         * exclude those system modules, see $moduleExceptions variable
         */
        protected function getAvailableModules() {}
        /**
         * Provides a basic information about modules before doing a test
         * @return array
         */
        protected function checkAllModule() {}
        public function runTestAction() {}
        protected function getModuleSvc() {}
        protected function getPHPUnitTool() {}
        protected function deactivateModule() {}
        protected function koMessage($msg) {}
        protected function okMessage($msg) {}
        protected function getProgressbarDom($total, $currenVal, $status = 'info', $addtlText = '') {}
        protected function hasRights($folderPath) {}
        protected function isActivated() {}
        private function hasAccess($key) : bool {}
    }

    /**
     * This class renders User Profile Management
     */
    class UserProfileController extends \meliscore\controller\melisabstractactioncontroller {
        const TOOL_KEY = 'meliscore_user_profile_management';

        /**
         * Function to render the user profile
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderUserProfileAction() {}
        /**
         * Function to render user profile right side view
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderUserProfileRightAction() {}
        /**
         * Function to render user profile tabs on right side view
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderUserProfileTabsAction() {}
        /**
         * Function to render user profile left side view
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderUserProfileLeftAction() {}
        /**
         * Function to render user form
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderUserProfileFormAction() {}
        /**
         * Function to update basic user information
         * @return \Laminas\View\Model\JsonModel
         */
        public function updateUserInformationAction() {}
        /**
         * Function to check the user profile whether to show it or not
         * depending if the session exist (it will show only if the user change his / her language)
         * @return \Laminas\View\Model\JsonModel
         */
        public function checkUserSessionIfExistAction() {}
        private function processErrors($errors, $appConfigForm) {}
        private function validatePassword($password, $confirmPass, $translator, $melisCoreAuth) {}
        private function getLastUserInfo() {}
        private function getCurrentUserInfo($encodeImg = false) {}
        /**
         * Function to return the current user ID
         * @return Int user ID
         */
        private function getCurrentUserId() {}
        /**
         * Function to get the melis key
         * @return melisKey
         */
        private function getMelisKey() {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisCoreGdprAutoDeleteTabsController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * @var
         */
        private $configId;

        public function setConfigId($configId) {}
        /**
         * @return ViewModel
         */
        public function renderContentAddEditTabsHandlerAction() {}
        /**
         * this method will get the melisKey from route params
         */
        private function getMelisKey() {}
        /**
         * @return MelisCoreGdprAutoDeleteToolService
         */
        private function getGdprAutoDeleteToolService() {}
        /**
         * get config id from the url
         * @return mixed
         */
        private function getConfigId() {}
        /**
         * @return ViewModel
         */
        public function renderConfigTabAction() {}
        /** @var MelisCoreToolService $toolSvc */
        private function getTool() {}
        public function renderAlertEmailTabAction() {}
        /**
         * get GDPR Deleted Emails Logs
         *
         * @return JsonModel
         */
        public function getGdprDeleteEmailsLogsAction() {}
        private function processPostData($postData) {}
        private function formatDataIntoDataTableFormat($data) {}
        /**
         * @return MelisGdprDeleteEmailsLogsTable | object
         */
        private function getGdprDeleteEmailsLogsTable() {}
        /**
         * @return ViewModel
         */
        public function renderLogsTableShowDetailsAction() {}
        /**
         * @return ViewModel
         */
        public function renderLogsTableRefreshAction() {}
        /**
         * Logs tab
         * @return ViewModel
         */
        public function renderLogsTabAction() {}
        /**
         * @return ViewModel
         */
        public function renderLogsTabDetailsAction() {}
        private function getUserEmailInKo($ids, $module) {}
        private function getUserEmailInOk($ids, $module) {}
        public function deleteEverythingAction() {}
        public function getAutoDeleteConfigBySiteModuleAction() {}
        private function getModuleName() {}
        private function getSiteId() {}
    }

    /**
     * This class renders Melis CMS
     */
    class IndexController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * Rendering the Melis CMS interface
         * @return \Laminas\View\Model\ViewModel
         */
        public function melisAction() {}
        /**
         * Shows the header section of Melis Platform
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function headerAction() {}
        public function rightAction() {}
        /**
         * Shows the left menu of the Melis Platform interface
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function leftMenuAction() {}
        /**
         * Shows the footer of the Melis Platform interface
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function footerAction() {}
        /**
         * Shows the center zone of the Melis Platform interface
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function centerAction() {}
        /**
         * Shows the language select to change the language
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function headerLanguageAction() {}
        /**
         * Shows the close button for closing of tabs
         */
        public function closeAllTabsAction() {}
    }

    /**
     * This class renders Melis CMS appConfig views recursively
     * to generate web interface based on it
     */
    class PluginViewController extends \meliscore\controller\melisabstractactioncontroller {
        public function renderViewRecList($zoneView) {}
        public function renderViewRec($zoneView) {}
        /**
         * Return view
         */
        public function generateAction() {}
        public function orderInterfaceChildren($parentKey, $childrenInterface) {}
/**
 * Looping and getting the children in interface section to generate the children views.
 * Key defined in the appConfig will be used as child view keys
 */
        public function generateRec(/**
 * Looping and getting the children in interface section to generate the children views.
 * Key defined in the appConfig will be used as child view keys
 */
$key, /**
 * Looping and getting the children in interface section to generate the children views.
 * Key defined in the appConfig will be used as child view keys
 */
$fullKey, /**
 * Looping and getting the children in interface section to generate the children views.
 * Key defined in the appConfig will be used as child view keys
 */
$recDatas = [ ]) {}
    }

    /**
     * User Management Tool
     */
    class ToolUserController extends \meliscore\controller\melisabstractactioncontroller {
        const TOOL_KEY = 'meliscore_tool_user';
        const TOOL_USER_MGMT_CONFIG_KEY = 'meliscore/tools/meliscore_tool_user';

        /**
         * Renders the main container of the tool
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserAction() {}
        /**
         * Renders the header section of the tool
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserHeaderAction() {}
        public function renderToolUserContentFiltersExportAction() {}
        /**
         * Renders to the refresh button placed in the datatable
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserContentFiltersRefreshAction() {}
        /**
         * Renders to the search input placed in the datatable
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserContentFiltersSearchAction() {}
        /**
         * Renders to the limit selection  placed in the datatable
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserContentFiltersLimitAction() {}
        /**
         * Renders to the status selection  placed in the datatable
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserContentFiltersStatusAction() {}
        public function renderToolUserActionNewUserAction() {}
        /**
         * Renders the content of the tool
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserContentAction() {}
        /**
         * Renders to the Edit button inside the table content (Action column)
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserContentActionRegenerateLinkAction() {}
        /**
         * Renders to the Edit button inside the table content (Action column)
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserContentActionEditAction() {}
        /**
         * Renders to the Delete button inside the table content (Action column)
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserContentActionDeleteAction() {}
        /**
         * Renders as the modal container of the tool
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalContainerAction() {}
        /**
         * Renders to the empty modal (no need to create a modal handler for this in app.interface)
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalEmptyAction() {}
        /**
         * Handles the rights if Add Modal Content should be displayed for the user
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalHandlerNewAction() {}
        /**
         * Renders to the New Form content for the modal
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderTooluserModalNewAction() {}
        /**
         * Handles the rights if Edit Content should be displayed for the user
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalHandlerEditAction() {}
        /**
         * Renders to the Edit Form content for the modal
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalEditAction() {}
        /**
         * Handles the rights if Edit Content should be displayed for the user
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalHandlerRightsAction() {}
        /**
         * Handles the rights if New User Content should be displayed for the user
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalHandlerNewRightsAction() {}
        /**
         * Renders to the Edit Rights Form content for the modal
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalRightsAction() {}
        /**
         * Renders to the New Rights Form content for the modal
         * @return \Laminas\View\Model\ViewModel
         */
        public function renderToolUserModalNewRightsAction() {}
        public function renderTooluserViewDateConnectionModalHandlerAction() {}
        public function renderTooluserViewDateConnectionModalAction() {}
        private function hasAccess($key) : bool {}
        /**
         * Adds a new user to the database
         * @return JsonModel
         */
        public function addNewUserAction() {}
        /**
         * Handles the addition of user's information
         * @return JsonModel
         */
        public function addNewUserInfoAction() {}
        /**
         * Handles the Delete User event
         * @return \Laminas\View\Model\JsonModel
         */
        public function deleteUserAction() {}
        /** @var MelisCoreCreatePasswordService $createPwdSvc */
        public function generateCreatePassRequestAction() {}
        public function getUserByIdAction() {}
        /**
         * Returns the User's Info by its User ID
         * @return \Laminas\View\Model\JsonModel
         */
        public function getUserAction() {}
        /** Insert default option ('All users') */
        public function getUsersAction() {}
        private function recheckActiveUsers() {}
        /**
         * Handles the event of updating user's information
         *
         * @return JsonModel
         */
        public function updateUserInfoAction() {}
        public function exportToCsvAction() {}
        public function resetUserRightsAction() {}
        /**
         * Saves user account details
         * @return JsonModel
         */
        public function updateUserAction() {}
        public function getRightsTreeViewAction() {}
        public function getUserConnectionDataAction() {}
    }

    /**
     * This class handles Melis CMS Flash Messenger
     */
    class MelisFlashMessengerController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * Renders the Flash Messenger view in Melis CMS 
         * @return \Laminas\View\Model\ViewModel
         */
        public function headerFlashMessengerAction() {}
        public function setFlashMessageAction() {}
        public function clearFlashMessageAction() {}
        /**
         * Returns the flash messages content
         * @return \Laminas\View\Model\JsonModel
         */
        public function getflashMessageAction() {}
        /**
         * Logs into the flash messenger service
         */
        public function logAction() {}
    }

    /**
     * This class deals with the languages button in the header
     */
    class LanguageController extends \meliscore\controller\melisabstractactioncontroller {
        const TOOL_KEY = 'meliscore_language_tool';
        const TOOL_INDEX = 'meliscore';
        const INTERFACE_KEY = 'meliscore_tool_language';

        /**
         * Shows language button in right corner of header
         *
         * @return \Laminas\View\Model\ViewModel
         */
        public function headerLanguageAction() {}
        /**
         * Change the language
         *
         * @return \Laminas\View\Model\JsonModel
         */
        public function changeLanguageAction() {}
        /**
         * Returns a Javascript format of Melis Translations
         */
        public function getTranslationsAction() {}
        public function getTransAction() {}
        /**
         * Creates translations for table actions in tools
         *
         * @return \Laminas\View\Model\JsonModel
         */
        public function getDataTableTranslationsAction() {}
        public function renderToolLanguageContainerAction() {}
        public function renderToolLanguageHeaderAction() {}
        public function renderToolLanguageHeaderAddAction() {}
        public function renderToolLanguageContentAction() {}
        public function renderToolLanguageContentFiltersSearchAction() {}
        public function renderToolLanguageContentFiltersLimitAction() {}
        public function renderToolLanguageContentFiltersRefreshAction() {}
        public function renderToolLanguageContentActionDeleteAction() {}
        public function renderToolLanguageContentActionApplyAction() {}
        public function renderToolLanguageContentActionUpdateAction() {}
        public function renderToolLanguageModalAction() {}
        public function renderToolLanguageModalEmptyHandlerAction() {}
        public function renderToolLanguageModalAddHandlerAction() {}
        public function renderToolLanguageModalAddContentAction() {}
        public function getLanguagesAction() {}
        public function addLanguageAction() {}
        public function deleteLanguageAction() {}
        public function getTranslationOfContentAction() {}
        /**
         * This allows the selected language to get new translations from melisplatform
         *
         * @return \Laminas\View\Model\JsonModel
         */
        public function updateLanguageAction() {}
        /**
         * Returns the possible folder or file issues
         * @return array
         */
        private function getWarningLogs() {}
        private function hasAccess($key) : bool {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisCoreGdprController extends \meliscore\controller\melisabstractactioncontroller {
        /**
         * This will get the data from the service which will get
         * user info from modules that listens to the event.
         * @return JsonModel
         */
        public function checkFormAction() {}
        /** @var \MelisCore\Service\MelisCoreGdprService $melisCoreGdprService */
        public function melisCoreGdprExtractSelectedAction() {}
        /**
         * This will delete the data based on the selected ids
         * @return JsonModel
         */
        public function melisCoreGdprDeleteSelectedAction() {}
        /**
         * Container for the Gdpr page
         * which will call all interface
         * or zones inside of it which are
         * header and content
         * @return view model
         */
        public function renderMelisCoreGdprContainerAction() {}
        /**
         * Header for the Gdpr page
         * displays the title and the
         * description of the page
         * @return view model
         */
        public function renderMelisCoreGdprHeaderAction() {}
        /**
         * @return ViewModel
         */
        public function gdprTabsAction() {}
        /**
         * @return ViewModel
         */
        public function searchUserDataAction() {}
        /**
         * Content of the Gdpr page
         * which will call all the interfaces
         * under it. which are search form
         * and tabs
         * @return ViewModel
         */
        public function renderMelisCoreGdprContentAction() {}
        /**
         * Search form of the Gdpr page
         * which will be used for the
         * searching of user data
         * @return view model
         */
        public function renderMelisCoreGdprSearchFormAction() {}
        /**
         * The tabs that will show the records of user in every module
         * @return view model
         */
        public function renderMelisCoreGdprTabsAction() {}
        private function getTool($pluginKey, $toolKey) {}
        private function getForm($formConfig) {}
        private function getFormConfig($formPath, $form) {}
        private function downloadXml($fileName, $xml) {}
        private function getFormErrors($errors, $formConfig) {}
    }

    /**
     * Basic action controller
     */
    abstract class MelisAbstractActionController extends \laminas\mvc\controller\abstractactioncontroller {
        protected $serviceManager;

        public function getServiceManager() {}
    }

}

namespace MelisCore\Controller\DashboardPlugins {
    class MelisCoreDashboardRecentUserActivityPlugin extends \meliscore\controller\dashboardplugins\meliscoredashboardtemplatingplugin {
        public function __construct() {}
        /** @var \MelisCore\Service\MelisCoreDashboardPluginsRightsService $dashboardPluginsService */
        public function recentActivityUsers() {}
    }

    class MelisCoreDashboardDragDropZonePlugin extends \meliscore\controller\dashboardplugins\meliscoredashboardtemplatingplugin {
        public function __construct() {}
        /**
         * Render Dashboard plugin to Drag and Drop Zone
         * 
         * @return \Laminas\View\Model\ViewModel
         */
        public function dragdropzone() {}
        /**
         * Getting active plugins saved from User Dashboard plugins
         * 
         * @return SimpleXMLElement[]
         */
        private function getDashboardPlugins() {}
/**
 * Saving dashboard plugins to database
 */
        public function savePlugins(/**
 * Saving dashboard plugins to database
 */
$plugins) {}
        /**
         * Returns active plugins based on module activation
         * 
         * @return array
         */
        private function getActivePlugins() {}
    }

    /**
     *  Class that handle the Dashboard plugin 
     */
    abstract class MelisCoreDashboardTemplatingPlugin extends \laminas\mvc\controller\plugin\abstractplugin {
        protected $pluginName;
        protected $pluginModule;
        protected $pluginConfig;
        protected $updatesPluginConfig;
        protected $pluginXmlDbValue;
        protected $eventManager;
        protected $locale;
        protected $serviceManager;

        public function __construct() {}
        public function setEventManager(EventManagerInterface $eventManager) {}
        public function getEventManager() {}
        public function getServiceManager() {}
        public function loadDbXmlToPluginConfig() {}
        public function loadGetDataPluginConfig() {}
        public function loadPostDataPluginConfig() {}
        public function savePluginConfigToXml($config) {}
/**
 * decode the string
 */
        private function decodeStringData(/**
 * decode the string
 */
$data) {}
        public function render($pluginConfig = array( ), $generatePluginId = false) {}
        public function getPluginConfig($generatePluginId = false) {}
        public function sendViewResult($modelVars) {}
        public function setPluginContainer($pluginView) {}
        /**
         * This method will get the xml value of the dashboard
         * and set to the pluginXmlDbValue as xml
         * and pluginConfig
         */
        public function getPluginValueFromDb() {}
/**
 * Checking if the value are the same interger array
 * this will override the current
 *
 * else the key of the array is a associative
 */
        public function updateFrontConfig(/**
 * Checking if the value are the same interger array
 * this will override the current
 *
 * else the key of the array is a associative
 */
$pluginConfig, /**
 * Checking if the value are the same interger array
 * this will override the current
 *
 * else the key of the array is a associative
 */
$newPluginConfig) {}
        private function translateConfig($config) {}
    }

}

namespace MelisCore\Support {
    /**
     * This is a list of known Melis Platform tables
     *
     * Class MelisMarketPlaceTables
     * @package MelisMarketPlace\Support
     */
    class MelisTables {
        const QUERY = 'query';
        const SQL = 'sql';
        const RELATION = 'relation';
        const RELATIONAL_DATA = 'relational_data';
        const PRIMARY_KEY = 'primary_key';
        const AUTO_INCREMENT = '%auto_increment';
        const FOREIGN_KEY = '%foreign_key%';
        const ROOT_FOREIGN_KEY = '%root_foreign_key%';

    }

    /**
     * Class MelisCore
     * @package MelisCore\Support
     */
    class MelisCore {
        const DASHBOARD_PLUGINS = 'melis_dashboardplugin';
        const DISPLAY_NONE = 'none';
        const DISPLAY = 'display';

    }

}

namespace MelisCore\Model\Tables {
    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisGdprDeleteEmailsSmtpTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'mgdpr_smtp_id';
        const TABLE = 'melis_core_gdpr_delete_emails_smtp';

        public function __construct() {}
    }

    class MelisGenericTable extends \meliscore\service\melisservicemanager {
        protected $serviceManager;
        protected $tableGateway;
        protected $idField;
        protected $lastInsertId;
        protected $_selectedColumns;
        protected $_selectedValues;
        protected $_currentDataCount;

        public function setTableGateway(TableGateway $tableGateway) {}
        /**
         * @return TableGateway $tableGateway
         */
        public function getTableGateway() {}
        /**
         * @return HydratingResultSet
         */
        public function hydratingResultSet() {}
        public function fetchAll() {}
        public function getEntryById($id) {}
        public function getEntryByField($field, $value) {}
        public function deleteById($id) {}
        public function deleteByField($field, $value) {}
        public function save($datas, $id = null) {}
        public function update($datas, $whereField, $whereValue) {}
        public function getLastInsertId() {}
        protected function aliasColumnsFromTableDefinition($serviceTableName, $prefix) {}
        /**
         * Returns the columns of the table
         * @param Array $table
         */
        public function getTableColumns() {}
        public function fetchData($columns = null) {}
        /**
         * Returns the currently selected columns from a query
         * @return Array
         */
        public function getSelectedColumns() {}
        public function getPagedData(array $options, $fixedCriteria = null) {}
        public function getTotalData($field = null, $idValue = null) {}
        /**
         * Returns the total count of the filtered data
         * @return int
         */
        public function getTotalFiltered() {}
        public function getDataForExport($filter, $columns = array( )) {}
        /**
         * @deprecated Do not use
         * Returns the corresponding values in a column
         */
        protected function getSelectedValues() {}
        protected function setCurrentDataCount($dataCount) {}
        protected function getRawSql($select) {}
    }

    class MelisBOEmailsDetailsTable extends \meliscore\model\tables\melisgenerictable {
        const TABLE = 'melis_core_bo_emails_details';
        const PRIMARY_KEY = 'boed_id';

        public function __construct() {}
        public function getEmailDetailsByEmailId($emailId, $langId = null) {}
    }

    class MelisDashboardsTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'd_id';
        const TABLE = 'melis_core_dashboards';

        public function __construct() {}
        public function getDashboardPlugins($dashboardId, $userId) {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisGdprDeleteEmailsTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'mgdpre_id';
        const EMAIL_DELETED = "2";
        const TABLE = 'melis_core_gdpr_delete_emails';
        const EMAIL_WARNING = "1";

        public function __construct() {}
        public function getAlertEmailsTransData($configId, $type = null, $langId = null) {}
    }

    class MelisLogTypeTransTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'logtt_id';
        const TABLE = 'melis_core_log_type_trans';

        public function __construct() {}
        public function getLogTypeTranslations($logTypeId, $langId = null) {}
    }

    class MelisPlatformSchemeTable extends \meliscore\model\tables\melisgenerictable {
        const TABLE = 'melis_core_platform_scheme';
        const PRIMARY_KEY = 'pscheme_id';

        public function __construct() {}
        public function getSchemeById($id, $colorsOnly = false) {}
        public function getSchemeByName($name, $colorsOnly = false) {}
        public function getActiveScheme($colorsOnly = false) {}
        public function getDefaultScheme($colorsOnly = false) {}
    }

    class MelisLangTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'lang_id';
        const TABLE = 'melis_core_lang';

        public function __construct() {}
        public function getLanguageInOrdered() {}
    }

    class MelisLogTable extends \meliscore\model\tables\melisgenerictable {
        const TABLE = 'melis_core_log';
        const PRIMARY_KEY = 'log_id';

        public function __construct() {}
        public function getLogList($typeId = null, $itemId = null, $userId = null, $dateCreationMin = null, $dateCreationMax = null, $start = 0, $limit = null, $order = null, $search = null, $status = null) {}
    }

    class MelisPluginsTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'plugin_id';
        const TABLE = 'melis_plugins';

        public function __construct() {}
        public function getLatestPlugin($pluginType) {}
    }

    class MelisCreatePasswordTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'mcp_id';
        const TABLE = 'melis_core_create_password';

        public function __construct() {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisGdprDeleteEmailsSentTable extends \meliscore\model\tables\melisgenerictable {
        const TABLE = 'melis_core_gdpr_delete_emails_sent';
        const PRIMARY_KEY = 'mgdprs_id';

        public function __construct() {}
        public function getEmailSentByValidationKey($validationKey, $moduleName) {}
        public function deleteSentLog($accountId, $module) {}
        public function deleteEmailSentData($accountId, $module, $siteId) {}
    }

    class MelisMicroServiceAuthTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'msoa_id';
        const TABLE = 'melis_core_microservice_auth';

        public function __construct() {}
        public function getUserByApiKey($apiKey) {}
        public function getUser($userId) {}
    }

    class MelisLogTypeTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'logt_id';
        const TABLE = 'melis_core_log_type';

        public function __construct() {}
        public function getLogTypeOrderByCode() {}
    }

    class MelisUserTable extends \meliscore\model\tables\melisgenerictable {
        const TABLE = 'melis_core_user';
        const PRIMARY_KEY = 'usr_id';

        public function __construct() {}
        /**
         * @return HydratingResultSet
         */
        public function hydratingResultSet() {}
        public function getUserOrderByName() {}
        public function getLastLoggedInUsers($max = 5) {}
        public function getDataByLoginAndEmail($login, $email) {}
        public function getUsersByRole($roleId = 0) {}
/**
 * Get "unfiltered" data (no offset and limit applied yet)
 */
        public function getUsers(/**
 * Get "unfiltered" data (no offset and limit applied yet)
 */
array $where = ['getColumns' => ['*'], 'search' => null, 'searchableColumns' => [ ], 'orderBy' => null, 'orderDirection' => null, 'start' => null, 'limit' => null, 'siteId' => null, 'status' => 1,  ]) {}
    }

    class MelisBOEmailsTable extends \meliscore\model\tables\melisgenerictable {
        const TABLE = 'melis_core_bo_emails';
        const PRIMARY_KEY = 'boe_id';

        public function __construct() {}
    }

    class MelisUserConnectionDateTable extends \meliscore\model\tables\melisgenerictable {
        const TABLE = 'melis_core_user_connection_date';
        const PRIMARY_KEY = 'usrcd_id';

        public function __construct() {}
        public function getUserConnectionData($userId = null, $lastLoginDate = null, $search = '', $searchableColumns = [ ], $orderBy = '', $orderDirection = 'ASC', $start = 0, $limit = null) {}
        public function getUserLastConnectionDate($userId, $date) {}
        public function getUserLastConnectionTime($userId, $search = '', $searchableColumns = [ ], $orderBy = '', $orderDirection = 'DESC', $start = 0, $limit = null) {}
    }

    class MelisLostPasswordTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'rh_id';
        const TABLE = 'melis_core_lost_password';

        public function __construct() {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisGdprDeleteConfigTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'mgdprc_id';
        const TABLE = 'melis_core_gdpr_delete_config';

        public function __construct() {}
        public function getGdprDeleteConfigData($search = "", $searchableColumns = [ ], $orderBy = '', $orderDirection = "DESC", $start = 0, $limit = null, $siteId = 0, $module = null) {}
        public function getDeleteConfigBySiteIdModuleName($siteId, $moduleName) {}
    }

    /**
     * @property int $plf_id
     * @property string $plf_name
     * @property bool $plf_update_marketplace
     *
     * Class MelisPlatformTable
     * @package MelisCore\Model\Tables
     */
    class MelisPlatformTable extends \meliscore\model\tables\melisgenerictable {
        const TABLE = 'melis_core_platform';
        const PRIMARY_KEY = 'plf_id';

        public function __construct() {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     *
     */
    class MelisGdprDeleteEmailsLogsTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'mgdprl_id';
        const TABLE = 'melis_core_gdpr_delete_emails_logs';

        public function __construct() {}
        public function getGdprDeleteEmailsLogsData($search = "", $searchableColumns = [ ], $orderBy = '', $orderDirection = "DESC", $start = 0, $limit = null, $siteId = null, $moduleName = null) {}
        public function getGdprDeleteEmailsLogs($siteId, $module, $date = null) {}
        public function getWarningDeletedEmailBySiteIdModuleName($siteId, $moduleName) {}
        public function getEmailsLogsByDate($date, $siteId, $module) {}
    }

    class MelisUserRoleTable extends \meliscore\model\tables\melisgenerictable {
        const PRIMARY_KEY = 'urole_id';
        const TABLE = 'melis_core_user_role';

        public function __construct() {}
    }

}

namespace MelisCore\Model\Hydrator {
    class MelisUser {
        /**
         * The following class attributes & methods were created to aid
         * in pagination
         */
        protected $unfilteredDataCount;
        protected $filteredDataCount;
        protected $userInfo;

        public function setUser($userInfo) {}
        public function getUser() {}
        public function getArrayCopy() {}
        public function getUnfilteredDataCount() {}
        public function setUnfilteredDataCount(int $count = null) {}
        public function getFilteredDataCount() {}
        public function setFilteredDataCount(int $count = 0) {}
    }

    class MelisResultSet {
        public function getArrayCopy() {}
    }

}

namespace MelisCore\View\Helper {
    class MelisDataTableHelper extends \laminas\view\helper\abstracthelper {
        private $serviceManager;

        public function setServiceManager(ServiceManager $serviceManager) {}
/**
 * Construct the table
 */
        public function createTable(/**
 * Construct the table
 */
$tableConfig) {}
    }

    /**
     * This class helps you create and render to a configurable HTML Table
     *
     */
    class MelisGenericTable extends \laminas\view\helper\abstracthelper {
        protected $_table;
        protected $_columns;
        protected $_tableData;

        public function setTable($tableConfig = array('id' => 'tableId', 'class' => 'table')) {}
        public function setColumns($columnText, $css = null, $class = null) {}
        public function setData($text) {}
        /**
         * Inserts Table Row tag in a table
         */
        public function insertDataRow() {}
        /**
         * Closes the Table Row tag in a table
         */
        public function closeDataRow() {}
        /**
         * Returns the Table Tag
         * @return string
         */
        public function getTable() {}
        /**
         * Returns the Table Head Tag
         * @return String
         */
        public function getColumns() {}
        /**
         * Return the Table Body and its contents
         * @return String
         */
        public function getData() {}
        /**
         * Renders an HTML Table
         * @return string
         */
        public function renderTable() {}
    }

    /**
     * Renders a bootstrap Modal with Tabs
     *
     */
    class MelisModal extends \laminas\view\helper\abstracthelper {
        protected $_modal;
        protected $_modalId;
        protected $_tabs;
        protected $_contents;
        protected $_defaultTab;
        protected $_hasCloseButton;
        protected $_attributes;

        public function setModalId($id = 'modal-id') {}
        /**
         * Returns the ID of the modal
         * @return string
         */
        public function getModalId() {}
        public function setAttributes($attrib = array( )) {}
        public function getAttributes() {}
        public function setTabs(array $tabs, $activeTab = '') {}
        public function setTabContent(array $tab) {}
        public function setActiveTab($tabId) {}
        /**
         * Returns the Tabs of the Modal
         * @return string
         */
        public function getTabs() {}
        protected function getTabPosition(array $tabs, $tabValue) {}
        protected function setContents(array $contents) {}
        protected function setContent(array $contents) {}
        /**
         * Returns the contents of the Modal Tab
         * @return string
         */
        public function getContents() {}
        public function hasCloseButton($isVibible) {}
        /**
         * Returns the close button of the modal
         * @return string
         */
        protected function getCloseButton() {}
        /** 
         * Renders all config that has been set to create a modal
         * @return string
         */
        public function renderModal() {}
    }

    class MelisCoreHeadPluginHelper extends \laminas\view\helper\abstracthelper {
        public $serviceManager;

        public function setServiceManager(ServiceManager $serviceManager) {}
        public function __invoke($path = '/') {}
    }

    class MelisCoreSectionIconsHelper extends \laminas\view\helper\abstracthelper {
        public $serviceManager;

        public function setServiceManager(ServiceManager $serviceManager) {}
        public function __invoke($marketPlaceSection) {}
    }

    class MelisTextHelper extends \laminas\view\helper\abstracthelper {
        const TEXT_LIMIT = 100;

        public function limitedText($text, $limit = self::TEXT_LIMIT) {}
        public function timelineDate($datetime, $full = false) {}
    }

    /**
     * Creates an anchor link button to open a Modal 
     *
     */
    class MelisModalInvoker extends \laminas\view\helper\abstracthelper {
        const MELIS_MODAL_INVOKER_DISMISS = 'data-dismiss';
        const MELIS_MODAL_INVOKER_INVOKE = 'data-toggle';

        protected $_button;

        public function render(array $attribs, $type = 'invoke') {}
    }

    class MelisDashboardDragDropZonePluginHelper extends \laminas\view\helper\abstracthelper {
        public $serviceManager;

        public function setServiceManager(ServiceManager $serviceManager) {}
        public function __invoke($dashboardId) {}
    }

}

namespace MelisCore\Service {
    class MelisCoreFlashMessengerService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscoreflashmessengerserviceinterface {
        const WARNING = 'fa fa-warning';
        const INFO = 'fa fa-info-circle';

        /**
         * 
         * @var $fmContainer Container
         */
        protected $fmContainer;

        public function addToFlashMessenger($title, $message, $img = 'fa fa-info', $logDate = null) {}
        /**
         * Returns all the messages stored in Melis Flash Messenger
         * @return Json
         */
        public function getFlashMessengerMessages() {}
        /**
         * Clears all the flash messages and session
         */
        public function clearFlashMessage() {}
        /**
         * Clears all the flash messages in session only
         */
        public function clearFlashMessageSession() {}
        public function dateMod($date, $locale) {}
    }

    /**
     * 
     * This service handles the generic service system of Melis.
     *
     */
    class MelisGeneralService extends \meliscore\service\melisservicemanager implements \laminas\eventmanager\eventmanagerawareinterface {
        /**
         * @var $eventManager
         */
        protected $eventManager;

        public function setEventManager(EventManagerInterface $eventManager) {}
        /**
         * @return EventManagerInterface
         */
        public function getEventManager() {}
        public function getRenderMode() {}
/**
 * Build an array from the parameters
 * Parameters' name will become keys
 * Values will be parameters' values or default values
 */
        public function makeArrayFromParameters(/**
 * Build an array from the parameters
 * Parameters' name will become keys
 * Values will be parameters' values or default values
 */
$class_method, /**
 * Build an array from the parameters
 * Parameters' name will become keys
 * Values will be parameters' values or default values
 */
$parameterValues) {}
        public function sendEvent($eventName, $parameters, $target = null) {}
        public function splitData($prefix, $haystack = [ ]) {}
    }

    class MelisCoreGdprService extends \meliscore\service\melisgeneralservice {
        public function getUserInfo($formInputs = [ ]) {}
        public function extractSelected($idsToBeExtractedArray = [ ]) {}
        public function deleteSelected($idsToBeDeletedArray = [ ]) {}
    }

    class MelisPhpUnitToolService extends \meliscore\service\meliscorelogservice {
        public function setAppConfig() {}
        public function init($moduleName, $moduleTestName, $unitTestPath = 'test') {}
        public function runTest($moduleName, $moduleTestName, $unitTestPath = 'test') {}
        public function getTestResult($moduleName, $moduleTestName, $unitTestPath = 'test') {}
        private function simplifyResultsView($results) {}
        public function getConfig($module, $methodName) {}
        public function getPayload($module, $methodName) {}
        public function getTable($module, $methodName) {}
        private function getMethodName($methodName) {}
        public function getDbMethods($module) {}
        /**
         * @return string
         */
        protected function getOS() {}
        protected function shellExists($command) {}
    }

    class MelisCoreModulesService extends \meliscore\service\melisservicemanager {
        private const MELIS_SITES_FOLDER = 'MelisSites';

        /**
         * @var Composer
         */
        protected $composer;

        public function getModulesAndVersions($moduleName = null) {}
        /**
         * @return \Composer\Composer
         */
        public function getComposer() {}
        public function setComposer(Composer $composer) {}
        /** Module.php file was not found - remove module from the list */
        public function getUserModules() {}
        protected function checkDir($dir) {}
        protected function getDir($dir, $excludeSubFolders = [ ]) {}
        /**
         * @return array
         */
        public function getSitesModules() {}
        /**
         * Returns all the modules that has been created by Melis
         *
         * @return array
         */
        public function getMelisModules() {}
        /**
         * Returns all the modules
         */
        public function getAllModules() {}
        /**
         * Returns all melisplatform-module packages loaded by composer
         * @return array
         */
        public function getVendorModules() {}
        public function getChildDependencies($moduleName, $convertPackageNameToNamespace = true, $getOnlyActiveModules = true) {}
        private function convertToPackageName($module) {}
        public function getDependencies($moduleName, $convertPackageNameToNamespace = true) {}
        public function getModulePath($moduleName, $returnFullPath = true) {}
        public function getUserModulePath($moduleName, $returnFullPath = true) {}
        public function getUserSitePath($siteName, $returnFullPath = true) {}
        public function getComposerModulePath($moduleName, $returnFullPath = true) {}
        public function getActiveModules($exclude = [ ]) {}
        public function getModulePlugins($excludeModulesOnReturn = [ ]) {}
        public function getCoreModules($excludeModulesOnReturn = [ ]) {}
        public function activateModule($module, $defaultModules = ['MelisAssetManager', 'MelisComposerDeploy', 'MelisDbDeploy', 'MelisCore'], $excludeModule = ['MelisModuleConfig']) {}
        public function createModuleLoader($pathToStore, $modules = [ ], $topModules = ['melisdbdeploy', 'meliscomposerdeploy', 'meliscore'], $bottomModules = ['MelisModuleConfig']) {}
        public function loadModule($module) {}
        public function unloadModule($module) {}
        public function isModuleLoaded($module) {}
        public function isSiteModule($module) {}
    }

    class MelisFormService extends \laminas\form\factory {
        /**
         * @var Laminas\ServiceManager\ServiceManager $serviceManager
         */
        protected $serviceManager;

        public function setServiceManager(ServiceManager $service) {}
        /**
         * @return Laminas\ServiceManager\ServiceManager
         */
        public function getServiceManager() {}
        public function createForm($spec) {}
    }

    class MelisCoreLogService extends \meliscore\service\melisgeneralservice {
        const DELETE = 'DELETE';
        const UPDATE = 'UPDATE';
        const ADD = 'ADD';

        public function logAction($result, $title, $message, $logCode, $itemId) {}
        public function getLogList($typeId = null, $itemId = null, $userId = null, $dateCreationMin = null, $dateCreationMax = null, $start = 0, $limit = null, $order = null, $search = null, $status = null) {}
        public function getLog($logId) {}
        public function getLogType($logTypeId) {}
        public function getLogTypeByTypeCode($logTypeCode) {}
        public function getLogTypeTranslations($logTypeId, $langId = null) {}
        public function saveLog($title, $message, $status, $typeCode, $itemId = null, $logId = null) {}
        public function saveLogType($logTypeCode, $logTypeId = null) {}
        public function saveLogTypeTrans($logTypeTrans, $logTypeTransId = null) {}
        public function deleteLogTypeTrans($logTypeTransId) {}
    }

    class MelisCoreGdprAutoDeleteToolService extends \meliscore\service\melisgeneralservice {
        const EMAIL_DELETE_CONTENT_TYPE = "email_delete_content";
        const EMAIL_WARNING_CONTENT_TYPE = "email_warning_content";

        /**
         * @var MelisGdprDeleteConfigTable
         */
        protected $gdprAutoDeleteConfigTable;
        /**
         * @var MelisGdprDeleteEmailsLogsTable
         */
        protected $gdprAutoDeleteEmailsLogsTable;
        /**
         * @var MelisGdprDeleteEmailsTable
         */
        protected $gdprAutoDeleteEmailsTable;
        /**
         * @var array
         */
        protected $gdprAutoDeleteForms;

/** @var MelisGdprDeleteEmailsLogsTable $gdprDeleteEmailsLogTbl */
        public function setServiceManager(/** @var MelisGdprDeleteEmailsLogsTable $gdprDeleteEmailsLogTbl */
ServiceManager $service) {}
        public function getGdprDeleteConfigData($searchValue, $searchableCols, $selColOrder, $orderDirection, $start, $length, $sitId = 0, $module = null) {}
        public function getGdprDeleteEmailLogsData($searchValue, $searchableCols, $selColOrder, $orderDirection, $start, $length, $siteId, $moduleName) {}
        public function getGdprDeleteEmailsLogs($siteId, $module) {}
        /**
         * @return MelisLangTable
         */
        public function getMelisCoreLang() {}
        /** @var MelisLangTable $melisCmsLang */
        public function getCmsLang() {}
        /**
         * get the list of modules
         *
         * @return array
         */
        public function getAutoDeleteModulesList() {}
        public function saveGdprAutoDeleteConfig($postData, $id = null) {}
        public function saveGdprDeleteAlertEmails($validatedData, $id) {}
        /** @var MelisCoreToolService $toolSvc */
        private function getTool() {}
        /**
         * get add edit filters form
         *  - (site)
         *  - (module)
         *
         * @return \Laminas\Form\ElementInterface
         */
        public function getAddEditFiltersForm() {}
        /**
         * get add/edit cron config form
         *
         * @return \Laminas\Form\ElementInterface
         */
        public function getAddEditCronConfigForm() {}
        /**
         * get add/edit cron config form
         *
         * @return \Laminas\Form\ElementInterface
         */
        public function getAddEditEmailSetupForm() {}
        /**
         * get add/edit alert email form
         *
         * @return \Laminas\Form\ElementInterface
         */
        public function getAddEditAlertEmailForm() {}
        /**
         * get add/edit delete email form
         *
         * @return \Laminas\Form\ElementInterface
         */
        public function getAddEditAlertEmailDeleteForm() {}
/** @var MelisForm $form */
        public function validateForm(/** @var MelisForm $form */
$postData) {}
/** @var MelisCoreConfigService $config */
        private function formatErrorMessage(/** @var MelisCoreConfigService $config */
$errors = [ ], /** @var MelisCoreConfigService $config */
$formConfigPath) {}
        public function getGdprAutoDeleteConfigDataById($configId) {}
        /**
         * @return mixed
         */
        public function getAllGdprAutoDeleteConfigData() {}
        /**
         * @return mixed
         */
        public function getAllGdprAutoDeleteConfigDataWithEmailTrans() {}
        public function groupAlertEmailsTransDataByType($alertEmailsTransData) {}
        public function getLinkUrl($pageId) {}
        public function getGdprAutoDeleteConfigBySiteModule($siteId, $moduleName) {}
        public function getAlertEmailsTranslationsData($configId) {}
        public function getAlertEmailsTransData($configId, $type = null, $langId = null) {}
        public function getAlertEmailsTransDataByConfigId($configId) {}
        public function getAlertEmeailsLogsData($configId) {}
        public function getSiteNameBySiteId($siteId) {}
        public function deleteEverything($configId, $emailType, $langId) {}
        public function deleteConfig($id) {}
    }

    /**
     * Translation Service for retrieveing all the translation messages
     *
     */
    class MelisCoreTranslationService extends \laminas\i18n\translator\translator implements \meliscore\service\meliscoretranslationserviceinterface {
        /**
         *
         * @var $fmContainer Container
         */
        protected $fmContainer;
        protected $updated;
        /**
         * @var Laminas\ServiceManager\ServiceManager $serviceManager
         */
        protected $serviceManager;

        public function setServiceManager(ServiceManager $service) {}
        /**
         * @return Laminas\ServiceManager\ServiceManager
         */
        public function getServiceManager() {}
        public function getTranslationMessages($locale = 'en_EN', $textDomain = 'default') {}
/** @var \SplFileInfo $file */
        public function getTranslatedMessageByLocale(/** @var \SplFileInfo $file */
$locale = 'en_EN') {}
        public function getMessage($translationKey, $locale = 'en_EN') {}
        public function getDateFormatByLocate($locale = en_EN) {}
        public function getDateFormat($locale = en_EN) {}
        public function addTranslationFiles($locale) {}
        private function getFirstTranslationFile($directory, $lookFor = '.interface.') {}
        public function createOrUpdateTranslationFiles($path, $module, $locale) {}
        private function checkLanguageDirectory($dir, $modulePath) {}
        private function getTranslationFileName($fileName, $locale) {}
        private function createTranslationFile($dir, $fileName) {}
        private function isDirEmpty($dir) {}
        public function getFilesByLocale($locale) {}
        public function getTranslationsLocale() {}
        public function checkTranslationsDiff($melisTrans, $currentTrans) {}
        public function updateTranslations($currentTrans, $transDiff) {}
        public function updateTranslationList() {}
        public function checkTranslationList() {}
    }

    /**
     *
     * This Class handles the Service Manager
     *
     */
    class MelisServiceManager {
        /**
         * @var Laminas\ServiceManager\ServiceManager $serviceManager
         */
        protected $serviceManager;

        public function setServiceManager(ServiceManager $service) {}
        /**
         * @return Laminas\ServiceManager\ServiceManager
         */
        public function getServiceManager() {}
    }

    class MelisCoreAuthService extends \laminas\authentication\authenticationservice implements \meliscore\service\meliscoreauthserviceinterface {
        /**
         * @var Laminas\ServiceManager\ServiceManager $serviceManager
         */
        protected $serviceManager;

        public function setServiceManager(ServiceManager $serviceManager) {}
        /**
         * @return Laminas\ServiceManager\ServiceManager
         */
        public function getServiceManager() {}
        /**
         * @return string
         */
        public function getAuthRights() {}
        public function encryptPassword($password) {}
        public function isPasswordCorrect($providedPassword, $storedHashPassword) {}
        /**
         * @return array
         */
        protected function convertToNewRightsStructure() {}
        protected function toNewXmlStructure($nodes) {}
/** @var \MelisCore\Service\MelisCoreRightsService $rightsSvc */
        public function isRightsUpdated(/** @var \MelisCore\Service\MelisCoreRightsService $rightsSvc */
$xmlRights) {}
    }

    class MelisCoreImageService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscoreimageserviceinterface {
        const EXT_PNG = 'png';
        const EXT_JPG = 'jpg';
        const EXT_GIF = 'gif';

        public function createThumbnail($savePath, $newImageName, $srcImageFile) {}
        public function resizeImage($savePath, $image, $newImageName, $width, $height) {}
    }

    class MelisCoreRightsService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscorerightsserviceinterface {
        const OLD_MELISCMS_TOOLSTREE = 'meliscms_toolstree';
        const MELIS_CMS_SITE_TOOLS = 'meliscms_site_tools';
        const MELIS_DASHBOARD = '/meliscore_dashboard';
        const MELISMARKETPLACE_PREFIX_TOOLS = 'melismarketplace_toolstree_section';
        const MELISCUSTOM_PREFIX_TOOLS = 'meliscustom_toolstree_section';
        const MELISOTHERS_PREFIX_TOOLS = 'melisothers_toolstree_section';
        const MELISCOMMERCE_PREFIX_TOOLS = 'meliscommerce_toolstree_section';
        const MELISMARKETING_PREFIX_TOOLS = 'melismarketing_toolstree_section';
        const MELISCMS_PREFIX_TOOLS = 'meliscms_toolstree_section';
        const MELISCORE_PREFIX_TOOLS = 'meliscore_toolstree_section';
        const MELIS_PLATFORM_TOOLS_PREFIX = 'meliscore_leftmenu';
        const MELISCORE_PREFIX_INTERFACE = 'meliscore_interface';

        /** @var array */
        private $tools;
        /** @var string|null - cache holder for section parents */
        private $sectionParent;

        public function canAccess($key) : bool {}
        /**
         * @return \MelisCore\Service\MelisCoreConfigService
         */
        public function getConfig() {}
        public function isAccessible($xmlRights, $sectionId, $itemId) {}
        public function grantAccess($item, $rightsTools) {}
/** @var \MelisCore\Service\MelisCoreUserService $melisCoreUser */
        public function getRightsValues(/** @var \MelisCore\Service\MelisCoreUserService $melisCoreUser */
$id, /** @var \MelisCore\Service\MelisCoreUserService $melisCoreUser */
$isRole = false) {}
/**
 * don't include melis dashboard plugins
 */
        private function getInterfaceKeysRecursive(/**
 * don't include melis dashboard plugins
 */
$keyInterface, /**
 * don't include melis dashboard plugins
 */
$userXml, /**
 * don't include melis dashboard plugins
 */
$key = null) {}
        private function getToolsKeys($userXml) {}
/**
 * Core rights make no difference between user or userrole because
 * all nodes are shown, so we just need to check what was posted.
 * There's no lazy tree, so no need to compare whatever in the user or role xml
 * already existing.
 */
        public function createXmlRightsValues(/**
 * Core rights make no difference between user or userrole because
 * all nodes are shown, so we just need to check what was posted.
 * There's no lazy tree, so no need to compare whatever in the user or role xml
 * already existing.
 */
$id, /**
 * Core rights make no difference between user or userrole because
 * all nodes are shown, so we just need to check what was posted.
 * There's no lazy tree, so no need to compare whatever in the user or role xml
 * already existing.
 */
$datas, /**
 * Core rights make no difference between user or userrole because
 * all nodes are shown, so we just need to check what was posted.
 * There's no lazy tree, so no need to compare whatever in the user or role xml
 * already existing.
 */
$isRole = false) : array {}
        /**
         * @return array
         */
        public function getRightsToolKeys() {}
        /**
         * @return array
         */
        public function getMelisKeyPaths() {}
        /**
         * @return array
         */
        public function getOldMelisKeyPathsAndExclusions() {}
        public function getToolParent($melisKeys, $child) {}
        public function getParentViaMelisKeyString($melisKey, $child) {}
        public function getSectionParent($melisKey, $data = null) {}
        public function isParentOf($toolKey, $parentKey, $data = null) {}
        /**
         * @return array
         */
        public function getToolSectionMap() {}
    }

    class MelisCorePluginsService extends \meliscore\service\melisgeneralservice {
        const DASHBOARD_PLUGIN_TYPE = "dashboard";
        const TEMPLATING_PLUGIN_TYPE = "templating";

        /**
         * @var $pluginsTbl \MelisCore\Model\Tables\MelisPluginsTable
         */
        public $pluginsTbl;

        public function setServiceManager(ServiceManager $service) {}
        /**
         * @return mixed
         */
        public function getTemplatingPlugins() {}
        public function getDashboardPlugins($pluginNameOnly = false) {}
        public function savePlugin(array $pluginData) : bool {}
        public function pluginIsNew($pluginName) : bool {}
        public function getModulePlugins($moduleName) {}
        /**
         * Get all plugins in melis platform
         * @return array
         */
        public function getAllPlugins() {}
        /**
         * This will get the modules categories from marketplace domain http://marketplace.melisplatform.com/melis-packagist/get-package-group
         * if no internet connection it returns null
         * @return array|mixed
         */
        public function getPackagistCategories() {}
        /**
         * Will check of all dashboard plugins and will insert a new record if it is new
         * @return array
         */
        public function checkDashboardPlugins() {}
        /**
         * Will check of all templating plugins and will insert a new record if it is new
         * @return array
         */
        public function checkTemplatingPlugins() {}
        public function getLatestPlugin($pluginType) {}
        /**
         * getting the configuration key for new plugin menu handler notification duration [new_plugin_notification][menu_handler]
         * file location : /melis-core/config/app.interface.php
         * @return mixed
         */
        public function getNewPluginMenuHandlerNotifDuration() {}
        /**
         * getting the configuration key for new plugin notification duration [new_plugin_notification][inside_menu]
         * file location : /melis-core/config/app.interface.php
         * @return mixed
         */
        public function getNewPluginNotifMenuDuration() {}
        public function getMelisPublicModules($pluginModuleName = false, $dashboardPlugin = false) {}
    }

    class MelisCoreLostPasswordService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscorelostpasswordserviceinterface {
        public function addLostPassRequest($login, $email) {}
        public function processUpdatePassword($hash, $password) {}
        public function userExists($login) {}
        public function hashExists($hash) {}
        public function getUserByHash($hash) {}
        public function isDataExists($login) {}
        public function getPassRequestDataByLogin($login) {}
        public function getPasswordRequestData($hash) {}
        protected function updatePassword($login, $newPass) {}
        protected function deletePasswordRequestData($hash) {}
        protected function sendPasswordLostEmail($login, $email) {}
        /**
         * Generates a random 16-bit hash
         * @return string
         */
        private function generateHash() {}
    }

    class MelisCoreConfigService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscoreconfigserviceinterface {
        public $appConfig;

        public function getJsCallbacksDatas($array, $final = [ ], $datas = [ ]) {}
        public function setFormFieldDisabled($array, $fieldName, $isDisabled = false) {}
        public function setFormFieldRequired($array, $fieldName, $isRequired = false) {}
        public function getFormMergedAndOrdered($formPath, $formReorderKey, $prefix = '') {}
        public function getItem($pathString = '', $prefix = '') {}
        public function isParentOf($itemId, $parentId) {}
        public function isChildOf($parentId, $itemId) {}
        public function getMelisKeyData($melisKey) {}
        public function getMelisKeys($array = [ ], $fullPath = '') {}
/**
 * Sending event with string config position
 * and config array retrieved as parameters
 *
 * $pathString[$position - 1] - this will get the last position as param
 */
        private function getItemRec(/**
 * Sending event with string config position
 * and config array retrieved as parameters
 *
 * $pathString[$position - 1] - this will get the last position as param
 */
$pathString, /**
 * Sending event with string config position
 * and config array retrieved as parameters
 *
 * $pathString[$position - 1] - this will get the last position as param
 */
$position, /**
 * Sending event with string config position
 * and config array retrieved as parameters
 *
 * $pathString[$position - 1] - this will get the last position as param
 */
$configTab) {}
        private function addItemsLinkedByType($array, $path = null) {}
        public function translateAppConfig($array) {}
        public function prefixIdsKeysRec($array, $prefix) {}
        public function getOrderFormsConfig($keyForm) {}
        public function getOrderInterfaceConfig($keyInterface) {}
        public function isInterfaceDisabled($keyInterface) {}
        public function getItemPerPlatform($pathString = '', $prefix = '') {}
        private function setItemsDashboadForwardConfig($array) {}
    }

    class MelisCoreBOEmailService extends \meliscore\service\melisservicemanager {
        public function saveBoEmailByCode($codename, $data) {}
        public function deleteEmail($data) {}
        public function getBoEmailByCode($codename, $langId = null) {}
        public function sendBoEmailByCode($codename, $tags, $email_to, $name_to = null, $langId = null) {}
    }

    class MelisCoreCreatePasswordService extends \meliscore\service\melisgeneralservice implements \meliscore\service\meliscorecreatepasswordserviceinterface {
/** @var MelisCreatePasswordTable $table */
        public function generateCreatePassRequest(/** @var MelisCreatePasswordTable $table */
$login, /** @var MelisCreatePasswordTable $table */
$email) {}
/** @var MelisCreatePasswordTable $table */
        public function createExpiredPasswordRequest(/** @var MelisCreatePasswordTable $table */
$login, /** @var MelisCreatePasswordTable $table */
$email) {}
        public function isRequestExpired($login) {}
        public function processUpdatePassword($hash, $password) {}
        public function hashExists($hash) {}
        public function getUserByHash($hash) {}
        public function getUserByUsername($username) {}
        public function isDataExists($login) {}
/** @var MelisCreatePasswordTable $table */
        public function getPassRequestDataByLogin(/** @var MelisCreatePasswordTable $table */
$login) {}
/** @var MelisCreatePasswordTable $table */
        public function isUserExist(/** @var MelisCreatePasswordTable $table */
$login) {}
/** @var MelisCreatePasswordTable $table */
        public function getPasswordRequestData(/** @var MelisCreatePasswordTable $table */
$hash) {}
        protected function updatePassword($login, $newPass) {}
/** @var MelisCreatePasswordTable $table */
        protected function deletePasswordRequestData(/** @var MelisCreatePasswordTable $table */
$hash) {}
/** @var MelisCoreBOEmailService $melisEmailBO */
        protected function sendPasswordCreateEmail(/** @var MelisCoreBOEmailService $melisEmailBO */
$login, /** @var MelisCoreBOEmailService $melisEmailBO */
$email) {}
        /**
         * Generates a random 16-bit hash
         * @return string
         */
        private function generateHash() {}
    }

    class MelisCoreDashboardService extends \meliscore\service\melisservicemanager {
        public function getDashboardPluginsJsCallbackJsDatas($dashboardId) {}
        public function getActiveDashboardPlugins() {}
        private function getPluginCallbacks($plugins, $pluginLists, $configs, $jsCallBacks) {}
    }

    /**
     * This Service helps you create your tool
     */
    class MelisCoreToolService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscoretoolserviceinterface {
        const TEXT_LIMIT = 25;

        protected $_melisToolKey;
        protected $_melisConfig;
        protected $_appConfig;
        protected $_usedKey;

        /**
         * Returns the Title of the tool
         *
         * @return string
         */
        public function getTitle() {}
        /**
         * Returns the Unique Identifier of the tool
         *
         * @return string
         */
        public function getToolId() {}
        /**
         * Returns the column config (e.g: text, css, sortable)
         *
         * @return Array
         */
        public function getColumnValues() {}
        /**
         * Returns the columns in the app.tools.php
         *
         * @return Array;
         */
        public function getColumns() {}
/** @var \MelisCore\Service\MelisFormService $factory */
        public function getForm(/** @var \MelisCore\Service\MelisFormService $factory */
$formKey) {}
        /**
         * Returns the melis tool key configuration text
         *
         * @return string
         */
        public function getMelisToolKey() {}
        public function setMelisToolKey($module, $melisToolKey) {}
        /**
         * Returns all form elements of the Tool
         *
         * @return \Laminas\Form\ElementInterface[]
         */
        public function getForms() {}
        /**
         * Returns all Form Keys of the tool
         *
         * @return Array
         */
        public function getFormKeys() {}
        public function getModalValues($formKey) {}
        /**
         * Returns all the modals of the tools
         *
         * @return Array
         */
        public function getAllModals() {}
        public function getModalContent($formKey) {}
        public function getViewContent($dispatchHandler) {}
        public function convertToNormalFunction($action) {}
        public function getModal($modalKey) {}
        /**
         * Returns an array of searchable columns that will be used whenever search function is used in the Data Table
         *
         * return array
         */
        public function getSearchableColumns() {}
        public function formatToQueryDate($date, $delimiter) {}
        public function limitedText($text, $limit = self::TEXT_LIMIT) {}
/**
 * DataTable default is every Column are sortable
 * This process will get not sortable column from tool config and prepare string for datatable configuration
 **/
        public function getDataTableConfiguration(/**
 * DataTable default is every Column are sortable
 * This process will get not sortable column from tool config and prepare string for datatable configuration
 **/
$targetTable = null, /**
 * DataTable default is every Column are sortable
 * This process will get not sortable column from tool config and prepare string for datatable configuration
 **/
$allowReInit = false, /**
 * DataTable default is every Column are sortable
 * This process will get not sortable column from tool config and prepare string for datatable configuration
 **/
$selectCheckbox = false, /**
 * DataTable default is every Column are sortable
 * This process will get not sortable column from tool config and prepare string for datatable configuration
 **/
$tableOption = [ ], /**
 * DataTable default is every Column are sortable
 * This process will get not sortable column from tool config and prepare string for datatable configuration
 **/
$type = '') {}
        private function replaceQuotes($text) {}
        public function exportDataToCsv($data, $fileName = null, $customSeparator = null, $customIsEnclosed = null) {}
        public function replaceAccents($str) {}
        private function stringSplitUnicode($str, $l = 0) {}
        /**
         * Returns the selected locale ID, if locale not found it will return 1 which is English
         *
         * @return int
         */
        public function getCurrentLocaleID() {}
        public function getTranslation($translationKey, $args = [ ]) {}
        /**
         * Returns the User ID of the logged-in user
         *
         * @return int
         */
        public function getCurrentUserId() {}
        public function splitData($prefix, $haystack = [ ]) {}
        public function removeDataWithPrefix($prefix, $haystack = [ ]) {}
        public function dateFormatLocale($date, $time = '', $locale = null) {}
        public function datePickerInit($dateField, $time = '') {}
        public function localeDateToSql($date) {}
        public function escapeHtml($value) {}
        public function sanitizePost($postArray, $exclude = [ ], $textOnly = false, $removeFunctions = true) {}
        public function sanitize($input, $textOnly = false, $removeFunctions = true) {}
        public function sanitizeRecursive($arrayVal, $exclude = [ ], $textOnly = false, $removeFunctions = true) {}
        public function convertObjectToArray($content) {}
        public function exportCsv($fileName, $data) {}
        public function importCsv($file) {}
        /**
         * Check if the platform has connected to internet
         * 
         * @return bool
         */
        public function isConnected() {}
        /**
         * Retrieve table configuration
         */
        public function getTableConfig() {}
        public function setTableConfig(array $tableConfig = [ ]) {}
        /**
         * Detect if the user agent is mobile or not
         * @return false|int
         */
        public function isMobileDevice() {}
    }

    class MelisCoreDashboardPluginsRightsService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscorerightsserviceinterface {
        const MELISDASHBOARDPLUGIN_PREFIX_TOOLS = 'melisdashboardplugin_section';
        const DASHBOARD_PLUGIN_ROOT = 'melis_dashboardplugin_root';
        const MELISCORE_DASHBOARDPLUGIN_PREFIX = 'melis_dashboardplugin';

        /** Find dashboard root */
        public function hasPlugins() : bool {}
        public function canAccess($key) : bool {}
        public function isAccessible($xmlRights, $sectionId, $itemId) {}
        public function getRightsValues($id, $isRole = false) {}
/** @var \MelisCore\Service\MelisCoreConfigService $melisAppConfig */
        private function getPluginsKeys(/** @var \MelisCore\Service\MelisCoreConfigService $melisAppConfig */
$userXml) {}
        /**
         * @return array
         */
        public function getMelisKeyPaths() {}
        public function createXmlRightsValues($id, $datas, $isRole = false) {}
        /**
         * @return \MelisCore\Service\MelisCoreConfigService
         */
        public function getConfig() {}
    }

    /**
     *
     * This service provides data in getting the platform colors and images.
     *
     */
    class MelisCorePlatformSchemeService extends \meliscore\service\melisgeneralservice {
        /**
         * Returns the Melis Core Platform Scheme table
         * @return array|object
         */
        private function schemeTable() {}
        public function getCurrentScheme($colorsOnly = false) {}
        public function saveScheme($data, $id, $setAsActive = false) {}
        public function resetScheme($id) {}
    }

    class MelisCoreEmailSendingService extends \meliscore\service\melisservicemanager {
/**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
        public function sendEmail(/**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$emailFrom, /**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$fromName, /**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$emailTo, /**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$toName = '', /**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$replyTo = null, /**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$subject, /**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$message_html, /**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$message_text = null, /**
 * Program executes these lines when user passes
 * custom Transport Configuration Options ($transportConfig)
 * to specify their own Mailing Service Provider
 */
$transportConfig = null) {}
        public function send($email, $name, $subject, $content) {}
    }

    class MelisCoreUserService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscoreuserserviceinterface {
        public function getUserXmlRights($userId = null) {}
/** @var \MelisCore\Service\MelisCoreRightsService $rightService */
        public function isItemRightChecked(/** @var \MelisCore\Service\MelisCoreRightsService $rightService */
$xmlRights, /** @var \MelisCore\Service\MelisCoreRightsService $rightService */
$sectionId, /** @var \MelisCore\Service\MelisCoreRightsService $rightService */
$itemId) {}
        public function getUserSessionTime($userId, $lastLoginDate, $displayMinimal = true, $hasAgoWord = false) {}
        public function getUserConnectionData($userId, $lastLoginDate = null, $search = '', $searchableColumns = [ ], $orderBy = '', $orderDirection = 'ASC', $start = 0, $limit = null) {}
    }

    class MelisCoreDispatchService extends \meliscore\service\melisservicemanager implements \meliscore\service\meliscoredispatchserviceinterface {
        public function dispatchPluginAction($e, $nameContainer, $nameVarSession, $disptachController, $dispatchVars) {}
    }

    /**
     * Melis Technology (http://www.melistechnology.com)
     *
     * Class MelisCoreGdprAutoDeleteService
     *
     * @copyright Copyright (c) 2020 Melis Technology (http://www.melistechnology.com)
     * @package MelisCore\Service
     */
    class MelisCoreGdprAutoDeleteService extends \meliscore\service\melisgeneralservice {
        const WARNING_LIST_KEY = "modules_warning_list";
        const SECOND_WARNING_LIST_KEY = "modules_second_warning_list";
        const DELETE_ACTION_EVENT = "melis_core_gdpr_auto_delete_action_delete";
        const TAG_LIST_KEY = "modules_tags_list";
        const SECOND_WARNING_EVENT = "melis_core_gdpr_auto_delete_second_warning_list_of_users";
        const DELETE_EVENT = "melis_core_gdpr_auto_delete_for_delete_users";
        const TAGS_EVENT = "melis_core_gdpr_auto_delete_modules_tags_list";
        const WARNING_EVENT = "melis_core_gdpr_auto_delete_warning_list_of_users";
        const EMAIL_CONTENT_ERROR_LOG = "email-content-error-log";
        const TECHNICAL_ISSUE = "technical-issue";
        const LANG_KEY_NOT_FOUND = "lang-key-not-found";
        const TAGS_ERROR_LOG = "tags-error-log";
        const CONFIG_KEY = "config";
        const LANG_KEY = "lang";
        const TAG_KEY = "tags";
        const VALIDATION_KEY = "validationKey";
        const MODULE_LIST_KEY = "modules_list";
        const ANO_VALUE = "melis-xxx";

        /**
         * @var
         */
        protected $logs;
        /**
         * errors
         *
         * @var
         */
        protected $errors;
        /**
         * @var MelisCoreGdprAutoDeleteToolService
         */
        protected $gdprAutoDeleteToolService;
        /**
         * @var MelisGdprDeleteEmailsSentTable
         */
        protected $deleteEmailsSentTable;
        /**
         * @var MelisGdprDeleteEmailsLogsTable
         */
        protected $emailsLogsTable;
        /**
         * @var
         */
        protected $currentTime;
        /**
         * @var
         */
        protected $logId;
        /**
         * @var
         */
        protected $currentConfig;

        public function setServiceManager(ServiceManager $service) {}
        /**
         * run GDPR Auto delete
         *
         * @return mixed
         */
        public function run() {}
        private function getFirstAvailableLang($configId) {}
        private function addInitialLog($data) {}
        /**
         * get the list of tags in every modules that was sent through their respective listeners
         *
         * @return array
         */
        public function getModuleTags() {}
        /**
         * get the list of warning users in every modules that was sent through their respective listeners
         *
         * @return array
         */
        public function getFirstAlertUsers() {}
        /**
         * get the list of second warning users in every modules that was sent through their respective listeners
         *
         * @return array
         */
        public function getSecondAlertUsers() {}
        public function saveEmailsSentData($data, $id = null) {}
        private function mergeTagsConfig($autoDeleteConfig) {}
        private function sendFirstAlertEmail($autoDelConf) {}
        private function sendSecondAlertEmail($autoDelConf) {}
        private function sendDeleteAlertEmail($autoDelConf) {}
        private function checkUsersSite($site, $autoDeleteSiteId) {}
        private function checkUsersInactiveDays($emailOpt, $noOfDays) {}
        private function checkUsersInactiveDays7DaysBeforeDeadline($emailOpt, $alertEmailDays) {}
        public function getDaysDiff($date1, $date2) {}
        public function getEmailSentByValidationKey($validationKey, $moduleName) {}
        private function createEmailViewTemplate($layout, $viewData, $content) {}
        private function prepareSendWarningEmail($emailSetupConfig, $email, $emailOptions, $type = MelisGdprDeleteEmailsTable::EMAIL_WARNING, $first = true) {}
        private function getSmtpConfig() {}
        private function saveGdprAutoDeleteLogs($data, $email = null, $emailType = null, $isFirstEmail = null, $message = null, $success = true) {}
        private function getEmailsLogsByDate($date, $siteId, $module) {}
        private function prepareFirstWarningLogs($success, $email, $message, $logs = [ ]) {}
        private function prepareSecondWarningLogs($success, $email, $message, $logs = [ ]) {}
        private function prepareDeletedEmailLogs($success, $email, $message, $logs = [ ]) {}
        private function sendEmail($emailFrom, $emailFromName, $emailTo, $emailToName = null, $replyTo, $subject, $messageHtml, $messageText = null) {}
        private function getDataOfAnEvent($mvcEventName, $mainKeyToRetrieve = null, $subKeyToRetrieve = null, $params = [ ]) {}
        private function isExists($key, array $array) {}
        private function getEmailLayoutContent($emailData, $content) {}
        private function replaceTagsForEmailLayout($dbTags, $moduleTags, $content) {}
        private function replaceTagsByModuleTags($tags, $data, $emailOptions, $content) {}
        private function getTranslation() {}
        public function getSmtpConfigData() {}
    }

    class MelisCoreMicroServiceTestService extends \meliscore\service\melisservicemanager {
        public function oneParam($fillMeIn) {}
        public function twoParams($fillMe, $andMe) {}
        public function acceptArrayParam(array $arrayParam, $normalArg) {}
    }


    interface MelisCoreConfigServiceInterface {
        function getItem($pathString = '') ;
        function prefixIdsKeysRec($array, $prefix) ;
    }

    interface MelisCoreRightsServiceInterface {
    const XML_SPACER = "\t";
    const XML_ENDLINE = "\n";
        function isAccessible($xmlRights, $sectionId, $itemId) ;
        function getRightsValues($userId) ;
        function createXmlRightsValues($userId, $datas) ;
    }

    interface MelisCoreUserServiceInterface {
    const ROLE_ID_CUSTOM = 1;
        function getUserXmlRights($userId = null) ;
        function isItemRightChecked($xmlRights, $sectionId, $itemId) ;
    }

    interface MelisCoreLostPasswordServiceInterface {
        function addLostPassRequest($login, $email) ;
        function processUpdatePassword($hash, $password) ;
        function userExists($login) ;
        function hashExists($hash) ;
        function isDataExists($login) ;
        function getPassRequestDataByLogin($login) ;
        function getPasswordRequestData($hash) ;
    }

    interface MelisCoreImageServiceInterface {
        function createThumbnail($savePath, $newImageName, $srcImageFile) ;
    }

    interface MelisCoreGdprAutoDeleteInterface {
        /**
         * Return the list of tags available for a module to insert in emails
         *
         * @return mixed
         */
        function getListOfTags() ;
        /**
         * Return the list of users that are concerned with the auto-delete at this moment
         * @return mixed
         */
        function getWarningListOfUsers() ;
        /**
         * Return the list of users that are concerned with the auto-delete at this moment
         *
         * @return mixed
         */
        function getSecondWarningListOfUsers() ;
        function getUserPerValidationKey($validationKey) ;
        function updateGdprUserStatus($validationKey) ;
        function removeOldUnvalidatedUsers($autoDeleteConfig) ;
    }

    interface MelisCoreFlashMessengerServiceInterface {
        function addToFlashMessenger($title, $text, $img = 'fa fa-info-circle') ;
        function getFlashMessengerMessages() ;
        function clearFlashMessage() ;
    }

    interface MelisCoreAuthServiceInterface {
        function getAuthRights() ;
    }

    interface MelisCoreCreatePasswordServiceInterface {
        function generateCreatePassRequest($login, $email) ;
        function processUpdatePassword($hash, $password) ;
        function hashExists($hash) ;
        function isDataExists($login) ;
        function getPassRequestDataByLogin($login) ;
        function getPasswordRequestData($hash) ;
    }

    interface MelisCoreDispatchServiceInterface {
        function dispatchPluginAction($e, $nameContainer, $nameVarSession, $disptachController, $dispatchVars) ;
    }

    interface MelisCoreToolServiceInterface {
        function setMelisToolKey($module, $melisToolKey) ;
        function getMelisToolKey() ;
        function getTitle() ;
        function getToolId() ;
        function getColumns() ;
        function getColumnValues() ;
        function getForm($formKey) ;
        function getForms() ;
        function getFormKeys() ;
        function getModalValues($formKey) ;
        function getAllModals() ;
        function getModal($modalKey) ;
        function getModalContent($formKey) ;
        function getSearchableColumns() ;
        function formatToQueryDate($date, $delimiter) ;
        function limitedText($text) ;
        function getDataTableConfiguration($targetTable) ;
        function getViewContent($dispatchHandler) ;
        function exportDataToCsv($data) ;
        function replaceAccents($str) ;
    }

    interface MelisCoreTranslationServiceInterface {
        function getTranslationMessages($locale, $textDomain = 'default') ;
    }

}

namespace MelisCore\Factory {
    /**
     * This Abstract factory targeting only Melis Services
     *
     * This also avoid deplication of factories
     */
    class MelisAbstractFactory implements \laminas\servicemanager\abstractfactoryinterface {
        const SERVICE_PREFIX = 'Melis';

/**
 * RequestedName must have Melis to create the service
 */
        public function canCreate(/**
 * RequestedName must have Melis to create the service
 */
ContainerInterface $container, /**
 * RequestedName must have Melis to create the service
 */
$requestedName) {}
/**
 * This method initialized the serviceManger to requsted service name
 */
        public function __invoke(/**
 * This method initialized the serviceManger to requsted service name
 */
ContainerInterface $container, /**
 * This method initialized the serviceManger to requsted service name
 */
$requestedName, /**
 * This method initialized the serviceManger to requsted service name
 */
array $options = null) {}
        public function canCreateServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName) {}
        public function createServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName) {}
    }

}

?>
