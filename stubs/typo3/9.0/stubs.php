<?php
/**
  * Generated by Exakat 2.1.6 (Build 1091)
  * On 2020-09-07T19:03:28+00:00
  * See https://www.exakat.io/
  */

namespace  {
    function debug($variable = '', $title = null, $group = null) {}
    function user_testFunctionWithNoArgument() {}
    function user_testFunctionWithSingleArgument() {}
    function user_testFunctionWithThreeArguments() {}
    function user_testFunctionWithThreeArgumentsSpaces($arguments) {}
    function user_testFunctionWithSpaces($value) {}
    function user_testFunction() {}
    function user_testFunctionFalse() {}
    function user_testFunctionWithQuoteMissing($value) {}
    function user_testQuotes($value) {}

    /**
     * MockCCommandController Fixture
     */
    class Tx_Extbase_Command_MockCCommandController extends \typo3\cms\extbase\mvc\controller\commandcontroller {
        /**
         * funcCCommand
         */
        public function funcCCommand() {}
    }

    /**
     * a  singleton class
     */
    class t3lib_object_tests_singleton implements \typo3\cms\core\singletoninterface {}

    /**
     * test class A that depends on B and C
     */
    class t3lib_object_tests_a {
        /**
         * @var \t3lib_object_tests_b
         */
        public $b;
        /**
         * @var \t3lib_object_tests_c
         */
        public $c;

        public function __construct(\t3lib_object_tests_c $c, \t3lib_object_tests_b $b) {}
    }

    /**
     * test class A that depends on B and C and has a third default parameter in constructor
     */
    class t3lib_object_tests_amixed_array {
        /**
         * @var \t3lib_object_tests_b
         */
        public $b;
        /**
         * @var \t3lib_object_tests_c
         */
        public $c;
        /**
         * @var array
         */
        public $myvalue;

        public function __construct(\t3lib_object_tests_b $b, \t3lib_object_tests_c $c, array $myvalue = ['some' => 'default']) {}
    }

    /**
     * test class A that depends on B and C and has a third default parameter in constructor that defaults to NULL
     */
    class t3lib_object_tests_amixed_null {
        /**
         * @var \t3lib_object_tests_b
         */
        public $b;
        /**
         * @var \t3lib_object_tests_c
         */
        public $c;
        /**
         * @var mixed|null
         */
        public $myvalue;

        public function __construct(\t3lib_object_tests_b $b, \t3lib_object_tests_c $c, $myvalue = null) {}
    }

    /**
     * test class A that depends on B and C and has a third default parameter in constructor
     */
    class t3lib_object_tests_amixed_array_singleton implements \typo3\cms\core\singletoninterface {
        /**
         * @var \t3lib_object_tests_b
         */
        public $b;
        /**
         * @var \t3lib_object_tests_c
         */
        public $c;
        /**
         * @var array
         */
        public $myvalue;

        public function __construct(\t3lib_object_tests_b $b, \t3lib_object_tests_c $c, $someDefaultParameter = ['some' => 'default']) {}
    }

    /**
     * test class B that depends on C
     */
    class t3lib_object_tests_b implements \typo3\cms\core\singletoninterface {
        /**
         * @var \t3lib_object_tests_c
         */
        public $c;

        public function __construct(\t3lib_object_tests_c $c) {}
    }

    /**
     * test class C without dependencys
     */
    class t3lib_object_tests_c implements \typo3\cms\core\singletoninterface {}

    /**
     * test class B-Child that extends Class B (therfore depends also on Class C)
     */
    class t3lib_object_tests_b_child extends \t3lib_object_tests_b {}

    /**
     * Test class D implementing Serializable
     */
    class t3lib_object_tests_serializable implements \serializable {
        public function serialize() {}
        public function unserialize($s) {}
    }

    /**
     * class which implements an Interface
     */
    class t3lib_object_tests_someimplementation implements \t3lib_object_tests_someinterface {}

    /**
     * test class B-Child that extends Class B (therfore depends also on Class C)
     */
    class t3lib_object_tests_b_child_someimplementation extends \t3lib_object_tests_b implements \t3lib_object_tests_someinterface {}

    /**
     * class which depends on an Interface
     */
    class t3lib_object_tests_needsinterface {
        public function __construct(\t3lib_object_tests_someinterface $i) {}
    }

    /**
     * Prototype classes that depend on each other
     */
    class t3lib_object_tests_cyclic1 {
        public function __construct(\t3lib_object_tests_cyclic2 $c) {}
    }

    /**
     */
    class t3lib_object_tests_cyclic2 {
        public function __construct(\t3lib_object_tests_cyclic1 $c) {}
    }

    /**
     */
    class t3lib_object_tests_cyclic1WithSetterDependency {
        public function injectFoo(\t3lib_object_tests_cyclic2WithSetterDependency $c) {}
    }

    /**
     */
    class t3lib_object_tests_cyclic2WithSetterDependency {
        public function injectFoo(\t3lib_object_tests_cyclic1WithSetterDependency $c) {}
    }

    /**
     * class which has setter injections defined
     */
    class t3lib_object_tests_injectmethods {
        /**
         * @var \t3lib_object_tests_b
         */
        public $b;
        /**
         * @var \t3lib_object_tests_b_child
         */
        public $bchild;

        public function injectClassB(\t3lib_object_tests_b $o) {}
        public function setClassBChild(\t3lib_object_tests_b_child $o) {}
    }

    /**
     * class which needs extenson settings injected
     */
    class t3lib_object_tests_injectsettings {
        /**
         * @var array
         */
        public $settings;

        public function injectExtensionSettings(array $settings) {}
    }

    /**
     */
    class t3lib_object_tests_resolveablecyclic1 implements \typo3\cms\core\singletoninterface {
        /**
         * @var \t3lib_object_tests_resolveablecyclic2
         */
        public $o2;

        public function __construct(\t3lib_object_tests_resolveablecyclic2 $cyclic2) {}
    }

    /**
     */
    class t3lib_object_tests_resolveablecyclic2 implements \typo3\cms\core\singletoninterface {
        /**
         * @var \t3lib_object_tests_resolveablecyclic1
         */
        public $o1;
        /**
         * @var \t3lib_object_tests_resolveablecyclic3
         */
        public $o3;

        public function injectCyclic1(\t3lib_object_tests_resolveablecyclic1 $cyclic1) {}
        public function injectCyclic3(\t3lib_object_tests_resolveablecyclic3 $cyclic3) {}
    }

    /**
     */
    class t3lib_object_tests_resolveablecyclic3 implements \typo3\cms\core\singletoninterface {
        /**
         * @var \t3lib_object_tests_resolveablecyclic1
         */
        public $o1;

        public function injectCyclic1(\t3lib_object_tests_resolveablecyclic1 $cyclic1) {}
    }

    /**
     */
    class t3lib_object_tests_class_with_injectsettings {
        public function injectFoo(\t3lib_object_tests_resolveablecyclic1 $c1) {}
        public function injectingFoo(\t3lib_object_tests_resolveablecyclic1 $c1) {}
        public function injectSettings(array $settings) {}
    }

    /**
     */
    class t3lib_object_singleton implements \typo3\cms\core\singletoninterface {}

    /**
     */
    class t3lib_object_prototype {}

    /**
     */
    class t3lib_object_singletonNeedsPrototype implements \typo3\cms\core\singletoninterface {
        /**
         * @var \t3lib_object_prototype
         */
        public $dependency;

        public function injectDependency(\t3lib_object_prototype $dependency) {}
    }

    /**
     */
    class t3lib_object_singletonNeedsSingleton implements \typo3\cms\core\singletoninterface {
        /**
         * @var \t3lib_object_singleton
         */
        public $dependency;

        public function injectDependency(\t3lib_object_singleton $dependency) {}
    }

    /**
     */
    class t3lib_object_prototypeNeedsPrototype {
        /**
         * @var \t3lib_object_prototype
         */
        public $dependency;

        public function injectDependency(\t3lib_object_prototype $dependency) {}
    }

    /**
     */
    class t3lib_object_prototypeNeedsSingleton {
        /**
         * @var \t3lib_object_singleton
         */
        public $dependency;

        public function injectDependency(\t3lib_object_singleton $dependency) {}
    }

    /**
     */
    class t3lib_object_singletonNeedsPrototypeInConstructor implements \typo3\cms\core\singletoninterface {
        public function __construct(\t3lib_object_prototype $dependency) {}
    }

    /**
     */
    class t3lib_object_singletonNeedsSingletonInConstructor implements \typo3\cms\core\singletoninterface {
        public function __construct(\t3lib_object_singleton $dependency) {}
    }

    /**
     */
    class t3lib_object_prototypeNeedsPrototypeInConstructor {
        public function __construct(\t3lib_object_prototype $dependency) {}
    }

    /**
     */
    class t3lib_object_prototypeNeedsSingletonInConstructor {
        public function __construct(\t3lib_object_singleton $dependency) {}
    }

    /**
     * Class that needs initialization after instantiation
     */
    class t3lib_object_tests_initializable extends \typo3\cms\extbase\domainobject\abstractdomainobject {
        /**
         * @var bool
         */
        protected $initialized;

        public function initializeObject() {}
        /**
         * @return bool
         */
        public function isInitialized() {}
    }

    /**
     * A dummy class with getters and setters for testing data mapping
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class Tx_Extbase_Tests_Fixture_TxClassWithGettersAndSetters extends \typo3\cms\extbase\tests\fixture\classwithgettersandsetters {}

    class ConditionMatcherUserFunctions {
        public static function isTrue($value) {}
    }

    /**
     * Class ext_update
     */
    class ext_update {}

    /**
     * Class TestClass
     */
    class TestClass {}

    /**
     * Test cases of CsvUtility
     */
    class CsvUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @return array
         */
        public function csvToArrayDataProvider() {}
        public function csvToArraySplitsAsExpected($input, $fieldDelimiter, $fieldEnclosure, $maximumColumns, $expectedResult) {}
    }


    /**
     */
    interface t3lib_object_tests_someinterface extends \typo3\cms\core\singletoninterface {}

}

namespace TYPO3\CMS\Extbase\Configuration\Exception {
    class ContainerIsLockedException extends \typo3\cms\extbase\configuration\exception {}

    class NoSuchFileException extends \typo3\cms\extbase\configuration\exception {}

    class NoSuchOptionException extends \typo3\cms\extbase\configuration\exception {}

    /**
     * A Parse Error exception
     */
    class ParseErrorException extends \typo3\cms\extbase\configuration\exception {}

    /**
     * An Invalid Configuration Type Exception
     */
    class InvalidConfigurationTypeException extends \typo3\cms\extbase\configuration\exception {}

}

namespace TYPO3\CMS\Extbase\Mvc\Exception {
    class InvalidMarkerException extends \typo3\cms\extbase\exception {}

    class RequiredArgumentMissingException extends \typo3\cms\extbase\mvc\exception {}

    class InvalidRequestTypeException extends \typo3\cms\extbase\mvc\exception {}

    class InvalidCommandIdentifierException extends \typo3\cms\extbase\mvc\exception {}

    class InvalidOrNoRequestHashException extends \typo3\cms\extbase\security\exception\invalidhashexception {}

    class InvalidUriPatternException extends \typo3\cms\extbase\security\exception {}

    class InvalidViewHelperException extends \typo3\cms\extbase\exception {}

    class InvalidTemplateResourceException extends \typo3fluid\fluid\view\exception\invalidtemplateresourceexception {}

    /**
     * An "Invalid Argument Name" exception
     */
    class InvalidArgumentNameException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Invalid Argument Type" exception
     */
    class InvalidArgumentTypeException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * A "No Such Controller" exception
     */
    class NoSuchControllerException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * A "No Such Argument" exception
     */
    class NoSuchArgumentException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "invalid action name" exception
     */
    class InvalidActionNameException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Infinite Loop" exception
     */
    class InfiniteLoopException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Invalid Argument Name" exception
     */
    class InvalidArgumentMixingException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * Base command exception
     */
    class CommandException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Ambiguous command identifier" exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class AmbiguousCommandIdentifierException extends \typo3\cms\extbase\mvc\exception\commandexception {
        /**
         * @var array<\TYPO3\CMS\Extbase\Mvc\Cli\Command>
         */
        protected $matchingCommands;

        public function __construct($message = '', $code = 0, \Exception $previousException = null, array $matchingCommands) {}
        /**
         * @return array<\TYPO3\CMS\Extbase\Mvc\Cli\Command>
         */
        public function getMatchingCommands() {}
    }

    /**
     * An "Invalid Extension Name" exception
     */
    class InvalidExtensionNameException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * A "No Such Command" exception
     */
    class NoSuchCommandException extends \typo3\cms\extbase\mvc\exception\commandexception {}

    /**
     * This exception is thrown by a controller to stop the execution of the current
     * action and return the control to the dispatcher. The dispatcher catches this
     * exception and - depending on the "dispatched" status of the request - either
     * continues dispatching the request or returns control to the request handler.
     *
     * See the Action Controller's forward() and redirectToUri() methods for more information.
     */
    class StopActionException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Unsupported Request Type" exception
     */
    class UnsupportedRequestTypeException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Invalid Argument Value" exception
     */
    class InvalidArgumentValueException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * A "No Such Action" exception
     */
    class NoSuchActionException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Invalid Controller Name" exception
     */
    class InvalidControllerNameException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Invalid Request Method" exception
     */
    class InvalidRequestMethodException extends \typo3\cms\extbase\mvc\exception {}

    /**
     * An "Invalid Controller" exception
     */
    class InvalidControllerException extends \typo3\cms\extbase\mvc\exception {}

}

namespace TYPO3\CMS\Extbase\Object\Container\Exception {
    class CannotInitializeCacheException extends \typo3\cms\core\cache\exception\invalidcacheexception {}

    class TooManyRecursionLevelsException extends \typo3\cms\extbase\object\exception {}

    /**
     * "Unknown Object" Exception
     */
    class UnknownObjectException extends \typo3\cms\extbase\object\exception {}

}

namespace TYPO3\CMS\Extbase\Object\Exception {
    class WrongScopeException extends \typo3\cms\extbase\object\exception {}

    /**
     * "Cannot reconstitute object" Exception
     */
    class CannotReconstituteObjectException extends \typo3\cms\extbase\object\exception {}

    /**
     * "Cannot build object" Exception
     */
    class CannotBuildObjectException extends \typo3\cms\extbase\object\exception {}

}

namespace TYPO3\CMS\Extbase\Object {
    class InvalidClassException extends \typo3\cms\extbase\object\exception {}

    class InvalidObjectConfigurationException extends \typo3\cms\extbase\object\exception {}

    class InvalidObjectException extends \typo3\cms\extbase\object\exception {}

    class ObjectAlreadyRegisteredException extends \typo3\cms\extbase\object\exception {}

    class UnknownClassException extends \typo3\cms\extbase\object\exception {}

    class UnknownInterfaceException extends \typo3\cms\extbase\object\exception {}

    class UnresolvedDependenciesException extends \typo3\cms\extbase\object\exception {}

    /**
     * Implementation of the default Extbase Object Manager
     */
    class ObjectManager implements \typo3\cms\extbase\object\objectmanagerinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\Container\Container
         */
        protected $objectContainer;

        /**
         * Constructs a new Object Manager
         */
        public function __construct() {}
        /**
         * Serialization (sleep) helper.
         *
         * Removes properties of this object from serialization.
         * This action is necessary, since there might be closures used
         * in the accordant content objects (e.g. in FLUIDTEMPLATE) which
         * cannot be serialized. It's fine to reset $this->contentObjects
         * since elements will be recreated and are just a local cache,
         * but not required for runtime logic and behaviour.
         *
         * @see http://forge.typo3.org/issues/36820
         * @return array Names of the properties to be serialized
         */
        public function __sleep() {}
        /**
         * Unserialization (wakeup) helper.
         *
         * Initializes the properties again that have been removed by
         * a call to the __sleep() method on serialization before.
         *
         * @see http://forge.typo3.org/issues/36820
         */
        public function __wakeup() {}
        public function isRegistered($objectName) {}
        public function get($objectName) {}
        public function getScope($objectName) {}
        public function getEmptyObject($className) {}
    }

    /**
     * A generic Object Exception
     */
    class Exception extends \typo3\cms\extbase\exception {}


    /**
     * Interface for the TYPO3 Object Manager
     */
    interface ObjectManagerInterface extends \typo3\cms\core\singletoninterface {
        function isRegistered($objectName) ;
        function get($objectName) ;
        function getEmptyObject($className) ;
        function getScope($objectName) ;
    }

}

namespace TYPO3\CMS\Extbase\Persistence\Generic\Exception {
    class CleanStateNotMemorizedException extends \typo3\cms\extbase\persistence\generic\exception {}

    class InvalidPropertyTypeException extends \typo3\cms\extbase\persistence\generic\exception {}

    class MissingBackendException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * A "Missing ColumnMap" exception
     */
    class MissingColumnMapException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * An "Unsupported Order" exception: The order you specified in the query is not supported by now.
     */
    class UnsupportedRelationException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * An "Invalid Number of Constraints" exception.
     */
    class InvalidNumberOfConstraintsException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * An "Unsupported Order" exception: The order you specified in the query is not supported by now.
     */
    class UnsupportedOrderException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * An "InvalidRelationConfigurationException" exception
     */
    class InvalidRelationConfigurationException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * Thrown if a setting set is not available in the current context.
     */
    class InconsistentQuerySettingsException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * Main exception thrown by classes in this package. May contain an error
     * message and/or another nested exception.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class RepositoryException extends \runtimeexception {}

    /**
     * An "Unexpected Type" exception.
     */
    class UnexpectedTypeException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * An "NotImplementedException" exception
     */
    class NotImplementedException extends \typo3\cms\extbase\persistence\exception {
        public function __construct($method) {}
    }

    /**
     * A "Too Dirty" exception
     */
    class TooDirtyException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * An "Invalid Class" exception
     */
    class InvalidClassException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * An "Unsupported Method" exception
     */
    class UnsupportedMethodException extends \typo3\cms\extbase\persistence\generic\exception {}

}

namespace TYPO3\CMS\Extbase\Property\Exception {
    class FormatNotSupportedException extends \typo3\cms\extbase\property\exception {}

    class InvalidFormatException extends \typo3\cms\extbase\property\exception {}

    class InvalidPropertyException extends \typo3\cms\extbase\property\exception {}

    /**
     * An "Invalid Source" Exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class InvalidSourceException extends \typo3\cms\extbase\property\exception {}

    /**
     * A "Duplicate Object" Exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class DuplicateObjectException extends \typo3\cms\extbase\property\exception {}

    /**
     * A "Type Converter" Exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class TypeConverterException extends \typo3\cms\extbase\property\exception {}

    /**
     * A "Duplicate Type Converter" Exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DuplicateTypeConverterException extends \typo3\cms\extbase\property\exception {}

    /**
     * An "Invalid Data Type" Exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class InvalidDataTypeException extends \typo3\cms\extbase\property\exception {}

    /**
     * A "TargetNotFound" Exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class TargetNotFoundException extends \typo3\cms\extbase\property\exception {}

    /**
     * An "Invalid Target" Exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class InvalidTargetException extends \typo3\cms\extbase\property\exception {}

    /**
     * An "Invalid Property Mapping Configuration" Exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class InvalidPropertyMappingConfigurationException extends \typo3\cms\extbase\property\exception {}

}

namespace TYPO3\CMS\Extbase\Reflection\Exception {
    class InvalidPropertyTypeException extends \typo3\cms\extbase\reflection\exception {}

    /**
     * An "Unknown Class" exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class UnknownClassException extends \typo3\cms\extbase\reflection\exception {}

    /**
     * An "Property not accessible" exception
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class PropertyNotAccessibleException extends \typo3\cms\extbase\reflection\exception {}

}

namespace TYPO3\CMS\Extbase\Security\Exception {
    class InvalidArgumentForRequestHashGenerationException extends \typo3\cms\extbase\security\exception {}

    class SyntacticallyWrongRequestHashException extends \typo3\cms\extbase\security\exception {}

    /**
     * A "InvalidHash" Exception, thrown when a HMAC validation failed.
     */
    class InvalidHashException extends \typo3\cms\extbase\security\exception {}

    /**
     * An "InvalidArgumentForHashGeneration" exception
     */
    class InvalidArgumentForHashGenerationException extends \typo3\cms\extbase\security\exception {}

}

namespace TYPO3\CMS\Extbase\Validation\Exception {
    class InvalidSubjectException extends \typo3\cms\extbase\validation\exception {}

    class NoValidatorFoundException extends \typo3\cms\extbase\validation\exception {}

    /**
     * A "InvalidValidationConfiguration" Exception
     */
    class InvalidValidationConfigurationException extends \typo3\cms\extbase\validation\exception {}

    /**
     * An "Invalid TypeHint" Exception
     */
    class InvalidTypeHintException extends \typo3\cms\extbase\validation\exception {}

    /**
     * A "InvalidValidationOptions" Exception
     */
    class InvalidValidationOptionsException extends \typo3\cms\extbase\validation\exception {}

    /**
     * A "NoSuchValidator" Exception
     */
    class NoSuchValidatorException extends \typo3\cms\extbase\validation\exception {}

}

namespace TYPO3\CMS\Extbase {
    /**
     * A generic Extbase exception
     */
    class Exception extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Extbase\Configuration {
    /**
     * Abstract base class for a general purpose configuration manager
     */
    abstract class AbstractConfigurationManager implements \typo3\cms\core\singletoninterface {
        const DEFAULT_BACKEND_STORAGE_PID = 0;

        /**
         * Storage of the raw TypoScript configuration
         *
         * @var array
         */
        protected $configuration;
        /**
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        protected $contentObject;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Core\TypoScript\TypoScriptService
         */
        protected $typoScriptService;
        /**
         * name of the extension this Configuration Manager instance belongs to
         *
         * @var string
         */
        protected $extensionName;
        /**
         * name of the plugin this Configuration Manager instance belongs to
         *
         * @var string
         */
        protected $pluginName;
        /**
         * 1st level configuration cache
         *
         * @var array
         */
        protected $configurationCache;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService
         */
        protected $environmentService;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectTypoScriptService(\TYPO3\CMS\Core\TypoScript\TypoScriptService $typoScriptService) {}
        public function injectEnvironmentService(\TYPO3\CMS\Extbase\Service\EnvironmentService $environmentService) {}
        public function setContentObject(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $contentObject = null) {}
        /**
         * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer|null
         */
        public function getContentObject() {}
        public function setConfiguration(array $configuration = [ ]) {}
        public function getConfiguration($extensionName = null, $pluginName = null) {}
        /**
         * Returns the TypoScript configuration found in config.tx_extbase
         *
         * @return array
         */
        protected function getExtbaseConfiguration() {}
        /**
         * Returns the default backend storage pid
         *
         * @return string
         */
        public function getDefaultBackendStoragePid() {}
        protected function overrideSwitchableControllerActions(array $frameworkConfiguration, array $switchableControllerActions) {}
        abstract protected function getContextSpecificFrameworkConfiguration(array $frameworkConfiguration) ;
        /**
         * Returns TypoScript Setup array from current Environment.
         *
         * @return array the TypoScript setup
         */
        abstract public function getTypoScriptSetup() ;
        abstract protected function getPluginConfiguration($extensionName, $pluginName = null) ;
        abstract protected function getSwitchableControllerActions($extensionName, $pluginName) ;
        abstract protected function getRecursiveStoragePids($storagePid, $recursionDepth = 0) ;
    }

    /**
     * A general purpose configuration manager used in frontend mode.
     *
     * Should NOT be singleton, as a new configuration manager is needed per plugin.
     */
    class FrontendConfigurationManager extends \typo3\cms\extbase\configuration\abstractconfigurationmanager {
        /**
         * @var \TYPO3\CMS\Extbase\Service\FlexFormService
         */
        protected $flexFormService;

        public function injectFlexFormService(\TYPO3\CMS\Extbase\Service\FlexFormService $flexFormService) {}
        /**
         * Returns TypoScript Setup array from current Environment.
         *
         * @return array the raw TypoScript setup
         */
        public function getTypoScriptSetup() {}
        protected function getPluginConfiguration($extensionName, $pluginName = null) {}
        protected function getSwitchableControllerActions($extensionName, $pluginName) {}
        protected function getContextSpecificFrameworkConfiguration(array $frameworkConfiguration) {}
        protected function overrideStoragePidIfStartingPointIsSet(array $frameworkConfiguration) {}
        protected function overrideConfigurationFromPlugin(array $frameworkConfiguration) {}
        protected function overrideConfigurationFromFlexForm(array $frameworkConfiguration) {}
        protected function mergeConfigurationIntoFrameworkConfiguration(array $frameworkConfiguration, array $configuration, $configurationPartName) {}
        protected function overrideSwitchableControllerActionsFromFlexForm(array $frameworkConfiguration, array $flexFormConfiguration) {}
        protected function getRecursiveStoragePids($storagePid, $recursionDepth = 0) {}
    }

    /**
     * A general purpose configuration manager used in backend mode.
     */
    class BackendConfigurationManager extends \typo3\cms\extbase\configuration\abstractconfigurationmanager {
        /**
         * @var array
         */
        protected $typoScriptSetupCache;
        /**
         * stores the current page ID
         * @var int
         */
        protected $currentPageId;

        /**
         * Returns TypoScript Setup array from current Environment.
         *
         * @return array the raw TypoScript setup
         */
        public function getTypoScriptSetup() {}
        protected function getPluginConfiguration($extensionName, $pluginName = null) {}
        protected function getSwitchableControllerActions($extensionName, $pluginName) {}
        /**
         * Returns the page uid of the current page.
         * If no page is selected, we'll return the uid of the first root page.
         *
         * @return int current page id. If no page is selected current root page id is returned
         */
        protected function getCurrentPageId() {}
        /**
         * Gets the current page ID from the GET/POST data.
         *
         * @return int the page UID, will be 0 if none has been set
         */
        protected function getCurrentPageIdFromGetPostData() {}
        /**
         * Gets the current page ID from the first site root in tree.
         *
         * @return int the page UID, will be 0 if none has been set
         */
        protected function getCurrentPageIdFromCurrentSiteRoot() {}
        /**
         * Gets the current page ID from the first created root template.
         *
         * @return int the page UID, will be 0 if none has been set
         */
        protected function getCurrentPageIdFromRootTemplate() {}
        /**
         * Returns the default backend storage pid
         *
         * @return string
         */
        public function getDefaultBackendStoragePid() {}
        protected function getContextSpecificFrameworkConfiguration(array $frameworkConfiguration) {}
        protected function getRecursiveStoragePids($storagePid, $recursionDepth = 0) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * A generic Configuration Exception
     */
    class Exception extends \typo3\cms\extbase\exception {}

    /**
     * A configuration manager following the strategy pattern (GoF315). It hides the concrete
     * implementation of the configuration manager and provides an unified acccess point.
     *
     * Use the shutdown() method to drop the concrete implementation.
     */
    class ConfigurationManager implements \typo3\cms\extbase\configuration\configurationmanagerinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\AbstractConfigurationManager
         */
        protected $concreteConfigurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService
         */
        protected $environmentService;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectEnvironmentService(\TYPO3\CMS\Extbase\Service\EnvironmentService $environmentService) {}
        /**
         * Initializes the object
         */
        public function initializeObject() {}
        /**
         */
        protected function initializeConcreteConfigurationManager() {}
        public function setContentObject(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $contentObject = null) {}
        /**
         * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        public function getContentObject() {}
        public function setConfiguration(array $configuration = [ ]) {}
        public function getConfiguration($configurationType, $extensionName = null, $pluginName = null) {}
        public function isFeatureEnabled($featureName) {}
    }


    /**
     * Class ConfigurationManagerInterface
     */
    interface ConfigurationManagerInterface extends \typo3\cms\core\singletoninterface {
    const CONFIGURATION_TYPE_FRAMEWORK = 'Framework';
    const CONFIGURATION_TYPE_FULL_TYPOSCRIPT = 'FullTypoScript';
    const CONFIGURATION_TYPE_SETTINGS = 'Settings';
        function setContentObject(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $contentObject = null) ;
        /**
         * Get the content object
         *
         * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         * @api (v4 only)
         */
        function getContentObject() ;
        function getConfiguration($configurationType, $extensionName = null, $pluginName = null) ;
        function setConfiguration(array $configuration = [ ]) ;
        function isFeatureEnabled($featureName) ;
    }

}

namespace TYPO3\CMS\Extbase\Core {
    /**
     * Creates a request an dispatches it to the controller which was specified
     * by TS Setup, flexForm and returns the content to the v4 framework.
     *
     * This class is the main entry point for extbase extensions.
     */
    class Bootstrap implements \typo3\cms\extbase\core\bootstrapinterface {
        /**
         * Back reference to the parent content object
         * This has to be public as it is set directly from TYPO3
         *
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        public $cObj;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManager
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager
         */
        protected $persistenceManager;

        public function initialize($configuration) {}
        /**
         * Initializes the Object framework.
         *
         * @see initialize()
         */
        protected function initializeObjectManager() {}
/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $contentObject */
        public function initializeConfiguration(/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $contentObject */
$configuration) {}
        /**
         * Configures the object manager object configuration from
         * config.tx_extbase.objects and plugin.tx_foo.objects
         *
         * @see initialize()
         */
        public function configureObjectManager() {}
        /**
         * Initializes the persistence framework
         *
         * @see initialize()
         */
        public function initializePersistence() {}
        public function run($content, $configuration) {}
        /**
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\CommandException Is thrown if the response object defined an exit code > 0
         * @return string
         */
        protected function handleRequest() {}
/** @var Response $extbaseResponse */
        public function handleBackendRequest(/** @var Response $extbaseResponse */
ServerRequestInterface $request) : ResponseInterface {}
        protected function convertExtbaseResponseToPsr7Response(Response $extbaseResponse) : ResponseInterface {}
        /**
         * Resets global singletons for the next plugin
         */
        protected function resetSingletons() {}
        /**
         * @return bool
         */
        protected function isInCliMode() {}
    }


    /**
     * Bootstrap Interface
     */
    interface BootstrapInterface {
        function run($content, $configuration) ;
    }

}

namespace TYPO3\CMS\Extbase\Mvc {
    /**
     * A generic and very basic response implementation
     *
     * @api
     */
    class Response implements \typo3\cms\extbase\mvc\responseinterface {
        /**
         * @var string The response content
         */
        protected $content;

        public function setContent($content) {}
        public function appendContent($content) {}
        /**
         * Returns the response content without sending it.
         *
         * @return string The response content
         * @api
         */
        public function getContent() {}
        /**
         * Fetches the content, returns and clears it.
         *
         * @return string
         * @api
         */
        public function shutdown() {}
        /**
         * Returns the content of the response.
         *
         * @return string
         * @api
         */
        public function __toString() {}
    }

    /**
     * Dispatches requests to the controller which was specified by the request and
     * returns the response the controller generated.
     */
    class Dispatcher implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface A reference to the object manager
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * @var array
         */
        protected $settings;

        public function injectSignalSlotDispatcher(\TYPO3\CMS\Extbase\SignalSlot\Dispatcher $signalSlotDispatcher) {}
        public function __construct(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function dispatch(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        protected function emitAfterRequestDispatchSignal(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        protected function resolveController(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request) {}
    }

    /**
     * Represents a generic request.
     *
     * @api
     */
    class Request implements \typo3\cms\extbase\mvc\requestinterface {
        const PATTERN_MATCH_FORMAT = '/^[a-z0-9]{1,5}$/';

        /**
         * Pattern after which the controller object name is built
         *
         * @var string
         */
        protected $controllerObjectNamePattern;
        /**
         * Pattern after which the namespaced controller object name is built
         *
         * @var string
         */
        protected $namespacedControllerObjectNamePattern;
        /**
         * @var string Key of the plugin which identifies the plugin. It must be a string containing [a-z0-9]
         */
        protected $pluginName;
        /**
         * @var string Name of the extension which is supposed to handle this request. This is the extension name converted to UpperCamelCase
         */
        protected $controllerExtensionName;
        /**
         * @var string vendor prefix
         */
        protected $controllerVendorName;
        /**
         * Subpackage key of the controller which is supposed to handle this request.
         *
         * @var string
         */
        protected $controllerSubpackageKey;
        /**
         * @var string Object name of the controller which is supposed to handle this request.
         */
        protected $controllerName;
        /**
         * @var string Name of the action the controller is supposed to take.
         */
        protected $controllerActionName;
        /**
         * @var array The arguments for this request
         */
        protected $arguments;
        /**
         * Framework-internal arguments for this request, such as __referrer.
         * All framework-internal arguments start with double underscore (__),
         * and are only used from within the framework. Not for user consumption.
         * Internal Arguments can be objects, in contrast to public arguments
         *
         * @var array
         */
        protected $internalArguments;
        /**
         * @var string The requested representation format
         */
        protected $format;
        /**
         * @var bool If this request has been changed and needs to be dispatched again
         */
        protected $dispatched;
        /**
         * If this request is a forward because of an error, the original request gets filled.
         *
         * @var \TYPO3\CMS\Extbase\Mvc\Request
         */
        protected $originalRequest;
        /**
         * If the request is a forward because of an error, these mapping results get filled here.
         *
         * @var \TYPO3\CMS\Extbase\Error\Result
         */
        protected $originalRequestMappingResults;

        public function setDispatched($flag) {}
        /**
         * If this request has been dispatched and addressed by the responsible
         * controller and the response is ready to be sent.
         *
         * The dispatcher will try to dispatch the request again if it has not been
         * addressed yet.
         *
         * @return bool TRUE if this request has been disptached successfully
         * @api
         */
        public function isDispatched() {}
        /**
         * Returns the object name of the controller defined by the extension name and
         * controller name
         *
         * @return string The controller's Object Name
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\NoSuchControllerException if the controller does not exist
         * @api
         */
        public function getControllerObjectName() {}
        public function setControllerObjectName($controllerObjectName) {}
        public function setPluginName($pluginName = null) {}
        /**
         * Returns the plugin key.
         *
         * @return string The plugin key
         * @api
         */
        public function getPluginName() {}
        public function setControllerExtensionName($controllerExtensionName) {}
        /**
         * Returns the extension name of the specified controller.
         *
         * @return string The extension name
         * @api
         */
        public function getControllerExtensionName() {}
        /**
         * Returns the extension name of the specified controller.
         *
         * @return string The extension key
         * @api
         */
        public function getControllerExtensionKey() {}
        public function setControllerSubpackageKey($subpackageKey) {}
        /**
         * Returns the subpackage key of the specified controller.
         * If there is no subpackage key set, the method returns NULL
         *
         * @return string The subpackage key
         */
        public function getControllerSubpackageKey() {}
        public function setControllerName($controllerName) {}
        /**
         * Returns the object name of the controller supposed to handle this request, if one
         * was set already (if not, the name of the default controller is returned)
         *
         * @return string Object name of the controller
         * @api
         */
        public function getControllerName() {}
        public function setControllerActionName($actionName) {}
        /**
         * Returns the name of the action the controller is supposed to execute.
         *
         * @return string Action name
         * @api
         */
        public function getControllerActionName() {}
        public function setArgument($argumentName, $value) {}
        public function setControllerVendorName($vendorName) {}
        /**
         * get the VendorName
         *
         * @return string
         */
        public function getControllerVendorName() {}
        public function setArguments(array $arguments) {}
        /**
         * Returns an array of arguments and their values
         *
         * @return array Associative array of arguments and their values (which may be arguments and values as well)
         * @api
         */
        public function getArguments() {}
        public function getArgument($argumentName) {}
        public function hasArgument($argumentName) {}
        public function setFormat($format) {}
        /**
         * Returns the requested representation format
         *
         * @return string The desired format, something like "html", "xml", "png", "json" or the like.
         * @api
         */
        public function getFormat() {}
        /**
         * Returns the original request. Filled only if a property mapping error occurred.
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Request the original request.
         */
        public function getOriginalRequest() {}
        public function setOriginalRequest(\TYPO3\CMS\Extbase\Mvc\Request $originalRequest) {}
        /**
         * Get the request mapping results for the original request.
         *
         * @return \TYPO3\CMS\Extbase\Error\Result
         */
        public function getOriginalRequestMappingResults() {}
        public function setOriginalRequestMappingResults(\TYPO3\CMS\Extbase\Error\Result $originalRequestMappingResults) {}
        /**
         * Get the internal arguments of the request, i.e. every argument starting
         * with two underscores.
         *
         * @return array
         */
        public function getInternalArguments() {}
        public function getInternalArgument($argumentName) {}
    }

    /**
     * Analyzes the raw request and delivers a request handler which can handle it.
     */
    class RequestHandlerResolver {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        /**
         * Analyzes the raw request and tries to find a request handler which can handle
         * it. If none is found, an exception is thrown.
         *
         * @return \TYPO3\CMS\Extbase\Mvc\RequestHandlerInterface A request handler
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception
         */
        public function resolveRequestHandler() {}
        /**
         * Returns a list of all registered request handlers.
         *
         * @return array
         */
        public function getRegisteredRequestHandlerClassNames() {}
    }

    /**
     * A generic MVC exception
     */
    class Exception extends \typo3\cms\extbase\exception {}


    /**
     * Contract for a request.
     *
     * @api
     */
    interface RequestInterface {
        function setDispatched($flag) ;
        /**
         * If this request has been dispatched and addressed by the responsible
         * controller and the response is ready to be sent.
         *
         * The dispatcher will try to dispatch the request again if it has not been
         * addressed yet.
         *
         * @return bool TRUE if this request has been disptached successfully
         * @api
         */
        function isDispatched() ;
        /**
         * Returns the object name of the controller defined by the package key and
         * controller name
         *
         * @return string The controller's Object Name
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\NoSuchControllerException if the controller does not exist
         * @api
         */
        function getControllerObjectName() ;
        function setArgument($argumentName, $value) ;
        function setArguments(array $arguments) ;
        function getArgument($argumentName) ;
        function hasArgument($argumentName) ;
        /**
         * Returns an array of arguments and their values
         *
         * @return array Array of arguments and their values (which may be arguments and values as well)
         * @api
         */
        function getArguments() ;
    }

    /**
     * The interface for a request handler
     *
     * @api
     */
    interface RequestHandlerInterface {
        /**
         * Handles a raw request and returns the respsonse.
         *
         * @return \TYPO3\CMS\Extbase\Mvc\ResponseInterface
         * @api
         */
        function handleRequest() ;
        /**
         * Checks if the request handler can handle the current request.
         *
         * @return bool TRUE if it can handle the request, otherwise FALSE
         * @api
         */
        function canHandleRequest() ;
        /**
         * Returns the priority - how eager the handler is to actually handle the
         * request. An integer > 0 means "I want to handle this request" where
         * "100" is default. "0" means "I am a fallback solution".
         *
         * @return int The priority of the request handler
         * @api
         */
        function getPriority() ;
    }

    /**
     * A generic and very basic response implementation
     *
     * @api
     */
    interface ResponseInterface {
        function setContent($content) ;
        function appendContent($content) ;
        /**
         * Returns the response content without sending it.
         *
         * @return string The response content
         * @api
         */
        function getContent() ;
        /**
         * Returns the response content without sending it.
         *
         * @return string The response content
         * @api
         */
        function shutdown() ;
    }

}

namespace TYPO3\CMS\Extbase\Mvc\Web {
    /**
     * A web specific response implementation
     *
     * @api
     */
    class Response extends \typo3\cms\extbase\mvc\response {
        /**
         * The HTTP headers which will be sent in the response
         *
         * @var array
         */
        protected $headers;
        /**
         * Additional header tags
         *
         * @var array
         */
        protected $additionalHeaderData;
        /**
         * The HTTP status code
         *
         * @var int
         */
        protected $statusCode;
        /**
         * The HTTP status message
         *
         * @var string
         */
        protected $statusMessage;
        /**
         * The Request which generated the Response
         *
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Request
         */
        protected $request;
        /**
         * The standardized and other important HTTP Status messages
         *
         * @var array
         */
        protected $statusMessages;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService
         */
        protected $environmentService;

        public function injectEnvironmentService(\TYPO3\CMS\Extbase\Service\EnvironmentService $environmentService) {}
        public function setStatus($code, $message = null) {}
        /**
         * Returns status code and status message.
         *
         * @return string The status code and status message, eg. "404 Not Found
         * @api
         */
        public function getStatus() {}
        /**
         * Returns the status code, if not set, uses the OK status code 200
         *
         * @return int
         * @internal only use for backend module handling
         */
        public function getStatusCode() {}
        public function setHeader($name, $value, $replaceExistingHeader = true) {}
        /**
         * Returns the HTTP headers - including the status header - of this web response
         *
         * @return string[] The HTTP headers
         * @api
         */
        public function getHeaders() {}
        /**
         * Returns the HTTP headers grouped by name without the status header
         *
         * @return array all headers set for this request
         * @internal only used within TYPO3 Core to convert to PSR-7 response headers
         */
        public function getUnpreparedHeaders() : array {}
        /**
         * Sends the HTTP headers.
         *
         * If headers have already been sent, this method fails silently.
         *
         * @api
         */
        public function sendHeaders() {}
        /**
         * Renders and sends the whole web response
         *
         * @api
         */
        public function send() {}
/** @var PageRenderer $pageRenderer */
        public function addAdditionalHeaderData(/** @var PageRenderer $pageRenderer */
$additionalHeaderData) {}
        /**
         * Returns the additional header data
         *
         * @return array The additional header data
         * @api
         */
        public function getAdditionalHeaderData() {}
        public function setRequest(\TYPO3\CMS\Extbase\Mvc\Web\Request $request) {}
        /**
         * @return \TYPO3\CMS\Extbase\Mvc\Web\Request
         */
        public function getRequest() {}
        /**
         * Sends additional headers and returns the content
         *
         * @return string|null
         */
        public function shutdown() {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

    /**
     * A request handler which can handle web requests invoked by the frontend.
     */
    class FrontendRequestHandler extends \typo3\cms\extbase\mvc\web\abstractrequesthandler {
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $extensionService;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\CacheHashEnforcer
         */
        protected $cacheHashEnforcer;

        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function injectExtensionService(\TYPO3\CMS\Extbase\Service\ExtensionService $extensionService) {}
        public function injectCacheHashEnforcer(\TYPO3\CMS\Extbase\Mvc\Web\CacheHashEnforcer $cacheHashEnforcer) {}
        /** @var $response \TYPO3\CMS\Extbase\Mvc\ResponseInterface */
        public function handleRequest() {}
        /**
         * This request handler can handle any web request.
         *
         * @return bool If the request is a web request, TRUE otherwise FALSE
         */
        public function canHandleRequest() {}
    }

    /**
     * A request handler which can handle web requests invoked by the backend.
     */
    class BackendRequestHandler extends \typo3\cms\extbase\mvc\web\abstractrequesthandler {
        /**
         * Handles the web request. The response will automatically be sent to the client.
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Web\Response
         */
        public function handleRequest() {}
        /**
         * This request handler can handle a web request invoked by the backend.
         *
         * @return bool If we are in backend mode TRUE otherwise FALSE
         */
        public function canHandleRequest() {}
    }

    /**
     * Enforces cHash argument if it is required for a given request
     */
    class CacheHashEnforcer implements \typo3\cms\core\singletoninterface {
        /**
         * @var CacheHashCalculator
         */
        protected $cacheHashCalculator;
        /**
         * @var TypoScriptFrontendController
         */
        protected $typoScriptFrontendController;

        public function __construct(CacheHashCalculator $cacheHashCalculator, TypoScriptFrontendController $typoScriptFrontendController = null) {}
        public function enforceForRequest(Request $request, string $pluginNamespace) {}
    }

    /**
     * A request handler which can handle web requests.
     */
    abstract class AbstractRequestHandler implements \typo3\cms\extbase\mvc\requesthandlerinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Dispatcher
         */
        protected $dispatcher;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder
         */
        protected $requestBuilder;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService
         */
        protected $environmentService;

        public function injectDispatcher(\TYPO3\CMS\Extbase\Mvc\Dispatcher $dispatcher) {}
        public function injectRequestBuilder(\TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder $requestBuilder) {}
        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectEnvironmentService(\TYPO3\CMS\Extbase\Service\EnvironmentService $environmentService) {}
        /**
         * This request handler can handle any web request.
         *
         * @return bool If the request is a web request, TRUE otherwise FALSE
         */
        public function canHandleRequest() {}
        /**
         * Returns the priority - how eager the handler is to actually handle the
         * request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() {}
    }

    /**
     * Represents a web request.
     *
     * @api
     */
    class Request extends \typo3\cms\extbase\mvc\request {
        /**
         * @var \TYPO3\CMS\Extbase\Security\Cryptography\HashService
         */
        protected $hashService;
        /**
         * @var string The requested representation format
         */
        protected $format;
        /**
         * @var string Contains the request method
         */
        protected $method;
        /**
         * @var string
         */
        protected $requestUri;
        /**
         * @var string The base URI for this request - ie. the host and path leading to the index.php
         */
        protected $baseUri;
        /**
         * @var bool TRUE if the current request is cached, false otherwise.
         */
        protected $isCached;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService
         */
        protected $environmentService;

        public function injectHashService(\TYPO3\CMS\Extbase\Security\Cryptography\HashService $hashService) {}
        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function injectEnvironmentService(\TYPO3\CMS\Extbase\Service\EnvironmentService $environmentService) {}
        public function setMethod($method) {}
        /**
         * Returns the name of the request method
         *
         * @return string Name of the request method
         * @api
         */
        public function getMethod() {}
        public function setRequestUri($requestUri) {}
        /**
         * Returns the request URI
         *
         * @return string URI of this web request
         * @api
         */
        public function getRequestUri() {}
        public function setBaseUri($baseUri) {}
        /**
         * Returns the base URI
         *
         * @return string Base URI of this web request
         * @api
         */
        public function getBaseUri() {}
        public function setIsCached($isCached) {}
        /**
         * Return whether the current request is a cached request or not.
         *
         * @api (v4 only)
         * @return bool the caching status.
         */
        public function isCached() {}
        /**
         * Get a freshly built request object pointing to the Referrer.
         *
         * @return ReferringRequest the referring request, or null if no referrer found
         */
        public function getReferringRequest() {}
    }

    /**
     * Builds a web request.
     */
    class RequestBuilder implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * This is the vendor name of the extension
         *
         * @var string
         */
        protected $vendorName;
        /**
         * This is a unique key for a plugin (not the extension key!)
         *
         * @var string
         */
        protected $pluginName;
        /**
         * The name of the extension (in UpperCamelCase)
         *
         * @var string
         */
        protected $extensionName;
        /**
         * The default controller name
         *
         * @var string
         */
        protected $defaultControllerName;
        /**
         * The default format of the response object
         *
         * @var string
         */
        protected $defaultFormat;
        /**
         * The allowed actions of the controller. This actions can be called via $_GET and $_POST.
         *
         * @var array
         */
        protected $allowedControllerActions;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $extensionService;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService
         */
        protected $environmentService;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function injectExtensionService(\TYPO3\CMS\Extbase\Service\ExtensionService $extensionService) {}
        public function injectEnvironmentService(\TYPO3\CMS\Extbase\Service\EnvironmentService $environmentService) {}
        /**
         * @throws MvcException
         */
        protected function loadDefaultValues() {}
        /**
         * Builds a web request object from the raw HTTP information and the configuration
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Web\Request The web request as an object
         */
        public function build() {}
        protected function resolveControllerName(array $parameters) {}
        protected function resolveActionName($controllerName, array $parameters) {}
        protected function untangleFilesArray(array $convolutedFiles) {}
        protected function calculateFieldPaths(array $structure, $firstLevelFieldName = null) {}
    }

    /**
     * Represents a referring web request.
     *
     * @api
     */
    class ReferringRequest extends \typo3\cms\extbase\mvc\web\request {
        public function setArgument($argumentName, $value) {}
    }

}

namespace TYPO3\CMS\Extbase\Mvc\Web\Routing {
    /**
     * An URI Builder
     *
     * @api
     */
    class UriBuilder {
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $extensionService;
        /**
         * An instance of \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         *
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        protected $contentObject;
        /**
         * @var Request
         */
        protected $request;
        /**
         * @var array
         */
        protected $arguments;
        /**
         * Arguments which have been used for building the last URI
         *
         * @var array
         */
        protected $lastArguments;
        /**
         * @var string
         */
        protected $section;
        /**
         * @var bool
         */
        protected $createAbsoluteUri;
        /**
         * @var string
         */
        protected $absoluteUriScheme;
        /**
         * @var bool
         */
        protected $addQueryString;
        /**
         * @var string
         */
        protected $addQueryStringMethod;
        /**
         * @var array
         */
        protected $argumentsToBeExcludedFromQueryString;
        /**
         * @var bool
         */
        protected $linkAccessRestrictedPages;
        /**
         * @var int
         */
        protected $targetPageUid;
        /**
         * @var int
         */
        protected $targetPageType;
        /**
         * @var bool
         */
        protected $noCache;
        /**
         * @var bool
         */
        protected $useCacheHash;
        /**
         * @var string
         */
        protected $format;
        /**
         * @var string
         */
        protected $argumentPrefix;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService
         */
        protected $environmentService;

        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function injectExtensionService(\TYPO3\CMS\Extbase\Service\ExtensionService $extensionService) {}
        public function injectEnvironmentService(\TYPO3\CMS\Extbase\Service\EnvironmentService $environmentService) {}
        /**
         * Life-cycle method that is called by the DI container as soon as this object is completely built
         */
        public function initializeObject() {}
        public function setRequest(Request $request) {}
        /**
         * @return Request
         */
        public function getRequest() {}
        public function setArguments(array $arguments) {}
        /**
         * @return array
         * @api
         */
        public function getArguments() {}
        public function setSection($section) {}
        /**
         * @return string
         * @api
         */
        public function getSection() {}
        public function setFormat($format) {}
        /**
         * @return string
         * @api
         */
        public function getFormat() {}
        public function setCreateAbsoluteUri($createAbsoluteUri) {}
        /**
         * @return bool
         * @api
         */
        public function getCreateAbsoluteUri() {}
        /**
         * @return string
         */
        public function getAbsoluteUriScheme() {}
        public function setAbsoluteUriScheme($absoluteUriScheme) {}
        public function setAddQueryString($addQueryString) {}
        /**
         * @return bool
         * @api
         */
        public function getAddQueryString() {}
        public function setAddQueryStringMethod($addQueryStringMethod) {}
        /**
         * @return string
         * @api
         */
        public function getAddQueryStringMethod() {}
        public function setArgumentsToBeExcludedFromQueryString(array $argumentsToBeExcludedFromQueryString) {}
        /**
         * @return array
         * @api
         */
        public function getArgumentsToBeExcludedFromQueryString() {}
        public function setArgumentPrefix($argumentPrefix) {}
        /**
         * @return string
         */
        public function getArgumentPrefix() {}
        public function setLinkAccessRestrictedPages($linkAccessRestrictedPages) {}
        /**
         * @return bool
         * @api
         */
        public function getLinkAccessRestrictedPages() {}
        public function setTargetPageUid($targetPageUid) {}
        /**
         * returns $this->targetPageUid.
         *
         * @return int
         * @api
         */
        public function getTargetPageUid() {}
        public function setTargetPageType($targetPageType) {}
        /**
         * @return int
         */
        public function getTargetPageType() {}
        public function setNoCache($noCache) {}
        /**
         * @return bool
         * @api
         */
        public function getNoCache() {}
        public function setUseCacheHash($useCacheHash) {}
        /**
         * @return bool
         * @api
         */
        public function getUseCacheHash() {}
        /**
         * Returns the arguments being used for the last URI being built.
         * This is only set after build() / uriFor() has been called.
         *
         * @return array The last arguments
         */
        public function getLastArguments() {}
        /**
         * Resets all UriBuilder options to their default value
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder the current UriBuilder to allow method chaining
         * @api
         */
        public function reset() {}
        public function uriFor($actionName = null, $controllerArguments = [ ], $controllerName = null, $extensionName = null, $pluginName = null) {}
        protected function removeDefaultControllerAndAction(array $controllerArguments, $extensionName, $pluginName) {}
        /**
         * Builds the URI
         * Depending on the current context this calls buildBackendUri() or buildFrontendUri()
         *
         * @return string The URI
         * @api
         * @see buildBackendUri()
         * @see buildFrontendUri()
         */
        public function build() {}
        /**
         * Builds the URI, backend flavour
         * The resulting URI is relative and starts with "index.php".
         * The settings pageUid, pageType, noCache, useCacheHash & linkAccessRestrictedPages
         * will be ignored in the backend.
         *
         * @return string The URI
         */
        public function buildBackendUri() {}
        /**
         * Builds the URI, frontend flavour
         *
         * @return string The URI
         * @see buildTypolinkConfiguration()
         */
        public function buildFrontendUri() {}
        /**
         * Builds a TypoLink configuration array from the current settings
         *
         * @return array typolink configuration array
         * @see TSref/typolink
         */
        protected function buildTypolinkConfiguration() {}
        protected function convertDomainObjectsToIdentityArrays(array $arguments) {}
        protected function convertIteratorToArray(\Iterator $iterator) {}
        public function convertTransientObjectToArray(\TYPO3\CMS\Extbase\DomainObject\AbstractDomainObject $object) {}
    }

}

namespace TYPO3\CMS\Extbase\Mvc\Cli {
    /**
     * A CLI specific response implementation
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class Response extends \typo3\cms\extbase\mvc\response {
        /**
         * @var int
         */
        private $exitCode;

        public function setExitCode($exitCode) {}
        /**
         * Rets the numerical exit code which should be returned when exiting this application.
         *
         * @return int
         * @api
         */
        public function getExitCode() {}
        /**
         * Renders and sends the whole web response
         *
         * @api
         */
        public function send() {}
    }

    /**
     * Represents a CLI request.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class Request implements \typo3\cms\extbase\mvc\requestinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var string
         */
        protected $controllerObjectName;
        /**
         * @var string
         */
        protected $controllerCommandName;
        /**
         * @var string Name of the extension which is supposed to handle this request.
         */
        protected $controllerExtensionName;
        /**
         * The arguments for this request
         *
         * @var array
         */
        protected $arguments;
        /**
         * @var array
         */
        protected $exceedingArguments;
        /**
         * If this request has been changed and needs to be dispatched again
         *
         * @var bool
         */
        protected $dispatched;
        /**
         * @var array
         */
        protected $commandLineArguments;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\Command | NULL
         */
        protected $command;
        /**
         * @var string
         */
        protected $callingScript;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function setCallingScript($callingScript) {}
        /**
         * @return string
         */
        public function getCallingScript() {}
        public function setDispatched($flag) {}
        /**
         * If this request has been dispatched and addressed by the responsible
         * controller and the response is ready to be sent.
         *
         * The dispatcher will try to dispatch the request again if it has not been
         * addressed yet.
         *
         * @return bool TRUE if this request has been disptached successfully
         */
        public function isDispatched() {}
        public function setControllerObjectName($controllerObjectName) {}
        /**
         * Returns the object name of the controller
         *
         * @return string The controller's object name
         */
        public function getControllerObjectName() {}
        /**
         * Returns the extension name of the specified controller.
         *
         * @return string The extension name
         */
        public function getControllerExtensionName() {}
        public function setControllerCommandName($commandName) {}
        /**
         * Returns the name of the command the controller is supposed to execute.
         *
         * @return string Command name
         */
        public function getControllerCommandName() {}
        /**
         * Returns the command object for this request
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Cli\Command
         */
        public function getCommand() {}
        public function setArgument($argumentName, $value) {}
        public function setArguments(array $arguments) {}
        public function getArgument($argumentName) {}
        public function hasArgument($argumentName) {}
        /**
         * Returns an ArrayObject of arguments and their values
         *
         * @return array Array of arguments and their values (which may be arguments and values as well)
         */
        public function getArguments() {}
        public function setExceedingArguments(array $exceedingArguments) {}
        /**
         * Returns additional unnamed arguments (if any) which have been passed through the command line after all
         * required arguments (if any) have been specified.
         *
         * For a command method with the signature ($argument1, $argument2) and for the command line
         * typo3/sysext/core/bin/typo3 acme:foo --argument1 Foo --argument2 Bar baz quux
         * this method would return array(0 => 'baz', 1 => 'quux')
         *
         * @return array Numeric array of exceeding argument values
         */
        public function getExceedingArguments() {}
    }

    /**
     * Builds a CLI request object from the raw command call
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class RequestBuilder implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\CommandManager
         */
        protected $commandManager;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
        public function injectCommandManager(\TYPO3\CMS\Extbase\Mvc\Cli\CommandManager $commandManager) {}
        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function build($commandLine = '', $callingScript = './typo3/sysext/core/bin/typo3') {}
        protected function parseRawCommandLineArguments(array $rawCommandLineArguments, $controllerObjectName, $controllerCommandName) {}
        protected function extractArgumentNameFromCommandLinePart($commandLinePart) {}
        protected function getValueOfCurrentCommandLineOption($currentArgument, array $rawCommandLineArguments, $expectedArgumentType) {}
    }

    /**
     * A helper for CLI commands
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class CommandManager implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var array<\TYPO3\CMS\Extbase\Mvc\Cli\Command>
         */
        protected $availableCommands;
        /**
         * @var array
         */
        protected $shortCommandIdentifiers;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        /**
         * Returns an array of all commands
         *
         * @return Command[]
         * @api
         */
        public function getAvailableCommands() {}
        public function getCommandByIdentifier($commandIdentifier) {}
        public function getShortestIdentifierForCommand(Command $command) {}
        /**
         * Returns an array that contains all available command identifiers and their shortest non-ambiguous alias
         *
         * @return array in the format array('full.command:identifier1' => 'alias1', 'full.command:identifier2' => 'alias2')
         */
        protected function getShortCommandIdentifiers() {}
        protected function commandMatchesIdentifier(Command $command, $commandIdentifier) {}
    }

    /**
     * Represents a Command
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class Command {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var string
         */
        protected $controllerClassName;
        /**
         * @var string
         */
        protected $controllerCommandName;
        /**
         * @var string
         */
        protected $commandIdentifier;
        /**
         * Name of the extension to which this command belongs
         *
         * @var string
         */
        protected $extensionName;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var ClassSchema
         */
        protected $classSchema;
        /**
         * @var string
         */
        protected $controllerCommandMethod;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
        public function __construct($controllerClassName, $controllerCommandName) {}
        public function initializeObject() {}
        /**
         * @return string
         */
        public function getControllerClassName() {}
        /**
         * @return string
         */
        public function getControllerCommandName() {}
        /**
         * Returns the command identifier for this command
         *
         * @return string The command identifier for this command, following the pattern extensionname:controllername:commandname
         */
        public function getCommandIdentifier() {}
        /**
         * Returns the name of the extension to which this command belongs
         *
         * @return string
         */
        public function getExtensionName() {}
        /**
         * Returns a short description of this command
         *
         * @return string A short description
         */
        public function getShortDescription() {}
        /**
         * Returns a longer description of this command
         * This is the complete method description except for the first line which can be retrieved via getShortDescription()
         * If The command description only consists of one line, an empty string is returned
         *
         * @return string A longer description of this command
         */
        public function getDescription() {}
        /**
         * Returns TRUE if this command expects required and/or optional arguments, otherwise FALSE
         *
         * @return bool
         */
        public function hasArguments() {}
        /**
         * Returns an array of \TYPO3\CMS\Extbase\Mvc\Cli\CommandArgumentDefinition that contains
         * information about required/optional arguments of this command.
         * If the command does not expect any arguments, an empty array is returned
         *
         * @return array<\TYPO3\CMS\Extbase\Mvc\Cli\CommandArgumentDefinition>
         */
        public function getArgumentDefinitions() {}
        /**
         * Tells if this command is internal and thus should not be exposed through help texts, user documentation etc.
         * Internall commands are still accessible through the regular command line interface, but should not be used
         * by users.
         *
         * @return bool
         */
        public function isInternal() {}
        /**
         * Tells if this command is meant to be used on CLI only.
         *
         * @return bool
         */
        public function isCliOnly() {}
        /**
         * Tells if this command flushes all caches and thus needs special attention in the interactive shell.
         *
         * Note that neither this method nor the @flushesCaches annotation is currently part of the official API.
         *
         * @return bool
         */
        public function isFlushingCaches() {}
        /**
         * Returns an array of command identifiers which were specified in the "@see"
         * annotation of a command method.
         *
         * @return array
         */
        public function getRelatedCommandIdentifiers() {}
    }

    /**
     * A wrapper for Symfony ConsoleOutput and related helpers
     */
    class ConsoleOutput {
        /**
         * @var ArgvInput
         */
        protected $input;
        /**
         * @var SymfonyConsoleOutput
         */
        protected $output;
        /**
         * @var QuestionHelper
         */
        protected $questionHelper;
        /**
         * @var ProgressBar
         */
        protected $progressBar;
        /**
         * @var Table
         */
        protected $table;

        /**
         * Creates and initializes the Symfony I/O instances
         */
        public function __construct() {}
        /**
         * Returns the desired maximum line length for console output.
         *
         * @return int
         */
        public function getMaximumLineLength() {}
        public function output($text, array $arguments = [ ]) {}
        public function outputLine($text = '', array $arguments = [ ]) {}
        public function outputFormatted($text = '', array $arguments = [ ], $leftPadding = 0) {}
        public function outputTable($rows, $headers = null) {}
        public function select($question, $choices, $default = null, $multiSelect = false, $attempts = null) {}
        public function ask($question, $default = null, array $autocomplete = null) {}
        public function askConfirmation($question, $default = true) {}
        public function askHiddenResponse($question, $fallback = true) {}
        public function askAndValidate($question, $validator, $attempts = null, $default = null, array $autocomplete = null) {}
        public function askHiddenResponseAndValidate($question, $validator, $attempts = false, $fallback = true) {}
        public function progressStart($max = null) {}
        public function progressAdvance($step = 1) {}
        public function progressSet($current) {}
        /**
         * Finishes the progress output
         */
        public function progressFinish() {}
        /**
         * @return ArgvInput
         * @throws \RuntimeException
         */
        protected function getInput() {}
        /**
         * Returns or initializes the symfony/console QuestionHelper
         *
         * @return QuestionHelper
         */
        protected function getQuestionHelper() {}
        /**
         * Returns or initializes the symfony/console ProgressBar
         *
         * @return ProgressBar
         */
        protected function getProgressBar() {}
        /**
         * Returns or initializes the symfony/console Table
         *
         * @return Table
         */
        protected function getTable() {}
    }

    /**
     * Represents a CommandArgumentDefinition
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class CommandArgumentDefinition {
        /**
         * @var string
         */
        protected $name;
        /**
         * @var bool
         */
        protected $required;
        /**
         * @var string
         */
        protected $description;

        public function __construct($name, $required, $description) {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * Returns the lowercased name with dashes as word separator
         *
         * @return string
         */
        public function getDashedName() {}
        /**
         * @return string
         */
        public function getDescription() {}
        /**
         * @return string
         */
        public function isRequired() {}
    }

    /**
     * The generic command line interface request handler for the MVC framework.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class RequestHandler implements \typo3\cms\extbase\mvc\requesthandlerinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Dispatcher
         */
        protected $dispatcher;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\RequestBuilder
         */
        protected $requestBuilder;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService
         */
        protected $environmentService;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectDispatcher(\TYPO3\CMS\Extbase\Mvc\Dispatcher $dispatcher) {}
        public function injectRequestBuilder(\TYPO3\CMS\Extbase\Mvc\Cli\RequestBuilder $requestBuilder) {}
        public function injectEnvironmentService(\TYPO3\CMS\Extbase\Service\EnvironmentService $environmentService) {}
        /** @var $response \TYPO3\CMS\Extbase\Mvc\Cli\Response */
        public function handleRequest() {}
        /**
         * This request handler can handle any command line request.
         *
         * @return bool If the request is a command line request, TRUE otherwise FALSE
         */
        public function canHandleRequest() {}
        /**
         * Returns the priority - how eager the handler is to actually handle the
         * request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() {}
    }

}

namespace TYPO3\CMS\Extbase\Mvc\Controller {
    /**
     * A controller which processes requests from the command line
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class CommandController implements \typo3\cms\extbase\mvc\controller\commandcontrollerinterface {
        /**
         * @var Request
         */
        protected $request;
        /**
         * @var Response
         */
        protected $response;
        /**
         * @var Arguments
         */
        protected $arguments;
        /**
         * Name of the command method
         *
         * @var string
         */
        protected $commandMethodName;
        /**
         * Whether the command needs admin access to perform its job
         *
         * @var bool
         * @api
         */
        protected $requestAdminPermissions;
        /**
         * @var ReflectionService
         */
        protected $reflectionService;
        /**
         * @var ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var ConsoleOutput
         */
        protected $output;

        public function injectObjectManager(ObjectManagerInterface $objectManager) {}
        public function injectReflectionService(ReflectionService $reflectionService) {}
        public function canProcessRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request) {}
        public function processRequest(RequestInterface $request, ResponseInterface $response) {}
        /**
         * Resolves and checks the current command method name
         *
         * Note: The resulting command method name might not have the correct case, which isn't a problem because PHP is
         * case insensitive regarding method names.
         *
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\NoSuchCommandException
         * @return string Method name of the current command
         * @throws NoSuchCommandException
         */
        protected function resolveCommandMethodName() {}
        /**
         * Initializes the arguments array of this controller by creating an empty argument object for each of the
         * method arguments found in the designated command method.
         *
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\InvalidArgumentTypeException
         * @throws InvalidArgumentTypeException
         */
        protected function initializeCommandMethodArguments() {}
        /** @var Argument $argument */
        protected function mapRequestArgumentsToControllerArguments() {}
        /**
         * Initializes and ensures authenticated backend access
         */
        protected function initializeBackendAuthentication() {}
        protected function forward($commandName, $controllerObjectName = null, array $arguments = [ ]) {}
        /**
         * Calls the specified command method and passes the arguments.
         *
         * If the command returns a string, it is appended to the content in the
         * response object. If the command doesn't return anything and a valid
         * view exists, the view is rendered automatically.
         */
        protected function callCommandMethod() {}
        protected function output($text, array $arguments = [ ]) {}
        protected function outputLine($text = '', array $arguments = [ ]) {}
        protected function outputFormatted($text = '', array $arguments = [ ], $leftPadding = 0) {}
        protected function quit($exitCode = 0) {}
        protected function sendAndExit($exitCode = 0) {}
        /**
         * Returns the global BackendUserAuthentication object.
         *
         * @return BackendUserAuthentication|null
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * A controller argument
     *
     * @api
     */
    class Argument {
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMapper
         */
        protected $propertyMapper;
        /**
         * @var MvcPropertyMappingConfiguration
         */
        protected $propertyMappingConfiguration;
        /**
         * Name of this argument
         *
         * @var string
         */
        protected $name;
        /**
         * Short name of this argument
         *
         * @var string
         */
        protected $shortName;
        /**
         * Data type of this argument's value
         *
         * @var string
         */
        protected $dataType;
        /**
         * TRUE if this argument is required
         *
         * @var bool
         */
        protected $isRequired;
        /**
         * Actual value of this argument
         *
         * @var mixed
         */
        protected $value;
        /**
         * Default value. Used if argument is optional.
         *
         * @var mixed
         */
        protected $defaultValue;
        /**
         * A custom validator, used supplementary to the base validation
         *
         * @var \TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface
         */
        protected $validator;
        /**
         * The validation results. This can be asked if the argument has errors.
         *
         * @var \TYPO3\CMS\Extbase\Error\Result
         */
        protected $validationResults;

        public function injectPropertyMapper(\TYPO3\CMS\Extbase\Property\PropertyMapper $propertyMapper) {}
        public function injectPropertyMappingConfiguration(MvcPropertyMappingConfiguration $propertyMappingConfiguration) {}
        public function __construct($name, $dataType) {}
        /**
         * Returns the name of this argument
         *
         * @return string This argument's name
         * @api
         */
        public function getName() {}
        public function setShortName($shortName) {}
        /**
         * Returns the short name of this argument
         *
         * @return string This argument's short name
         * @api
         */
        public function getShortName() {}
        /**
         * Returns the data type of this argument's value
         *
         * @return string The data type
         * @api
         */
        public function getDataType() {}
        public function setRequired($required) {}
        /**
         * Returns TRUE if this argument is required
         *
         * @return bool TRUE if this argument is required
         * @api
         */
        public function isRequired() {}
        public function setDefaultValue($defaultValue) {}
        /**
         * Returns the default value of this argument
         *
         * @return mixed The default value
         * @api
         */
        public function getDefaultValue() {}
        public function setValidator(\TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface $validator) {}
        /**
         * Returns the set validator
         *
         * @return \TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface The set validator, NULL if none was set
         * @api
         */
        public function getValidator() {}
        public function setValue($rawValue) {}
        /**
         * Returns the value of this argument
         *
         * @return mixed The value of this argument - if none was set, NULL is returned
         * @api
         */
        public function getValue() {}
        /**
         * Return the Property Mapping Configuration used for this argument; can be used by the initialize*action to modify the Property Mapping.
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfiguration
         * @api
         */
        public function getPropertyMappingConfiguration() {}
        /**
         * @return bool TRUE if the argument is valid, FALSE otherwise
         * @api
         */
        public function isValid() {}
        /**
         * @return \TYPO3\CMS\Extbase\Error\Result Validation errors which have occurred.
         * @api
         */
        public function getValidationResults() {}
        /**
         * Returns a string representation of this argument's value
         *
         * @return string
         * @api
         */
        public function __toString() {}
    }

    /**
     * This is a Service which can generate a request hash and check whether the currently given arguments
     * fit to the request hash.
     *
     * It is used when forms are generated and submitted:
     * After a form has been generated, the method "generateRequestHash" is called with the names of all form fields.
     * It cleans up the array of form fields and creates another representation of it, which is then serialized and hashed.
     *
     * Both serialized form field list and the added hash form the request hash, which will be sent over the wire (as an argument __hmac).
     *
     * On the validation side, the validation happens in two steps:
     * 1) Check if the request hash is consistent (the hash value fits to the serialized string)
     * 2) Check that _all_ GET/POST parameters submitted occur inside the form field list of the request hash.
     *
     * Note: It is crucially important that a private key is computed into the hash value! This is done inside the HashService.
     */
    class MvcPropertyMappingConfigurationService implements \typo3\cms\core\singletoninterface {
        /**
         * The hash service class to use
         *
         * @var \TYPO3\CMS\Extbase\Security\Cryptography\HashService
         */
        protected $hashService;

        public function injectHashService(\TYPO3\CMS\Extbase\Security\Cryptography\HashService $hashService) {}
        public function generateTrustedPropertiesToken($formFieldNames, $fieldNamePrefix = '') {}
        protected function serializeAndHashFormFieldArray(array $formFieldArray) {}
        public function initializePropertyMappingConfigurationFromRequest(\TYPO3\CMS\Extbase\Mvc\Request $request, \TYPO3\CMS\Extbase\Mvc\Controller\Arguments $controllerArguments) {}
        protected function modifyPropertyMappingConfiguration($propertyConfiguration, \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration $propertyMappingConfiguration) {}
    }

    /**
     * An abstract base class for Controllers
     *
     * @api
     */
    abstract class AbstractController implements \typo3\cms\extbase\mvc\controller\controllerinterface {
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder
         */
        protected $uriBuilder;
        /**
         * @var string Key of the extension this controller belongs to
         */
        protected $extensionName;
        /**
         * Contains the settings of the current extension
         *
         * @var array
         * @api
         */
        protected $settings;
        /**
         * The current request.
         *
         * @var \TYPO3\CMS\Extbase\Mvc\RequestInterface
         * @api
         */
        protected $request;
        /**
         * The response which will be returned by this action controller
         *
         * @var \TYPO3\CMS\Extbase\Mvc\ResponseInterface
         * @api
         */
        protected $response;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\ValidatorResolver
         */
        protected $validatorResolver;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\Arguments Arguments passed to the controller
         */
        protected $arguments;
        /**
         * An array of supported request types. By default only web requests are supported.
         * Modify or replace this array if your specific controller supports certain
         * (additional) request types.
         *
         * @var array
         */
        protected $supportedRequestTypes;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         * @api
         */
        protected $controllerContext;
        /**
         * @var ConfigurationManagerInterface
         */
        protected $configurationManager;

        public function injectSignalSlotDispatcher(\TYPO3\CMS\Extbase\SignalSlot\Dispatcher $signalSlotDispatcher) {}
        public function injectValidatorResolver(\TYPO3\CMS\Extbase\Validation\ValidatorResolver $validatorResolver) {}
        /**
         * @return ControllerContext
         * @api
         */
        public function getControllerContext() {}
        /**
         * Constructs the controller.
         */
        public function __construct() {}
        public function injectConfigurationManager(ConfigurationManagerInterface $configurationManager) {}
        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function addFlashMessage($messageBody, $messageTitle = '', $severity = \TYPO3\CMS\Core\Messaging\AbstractMessage::OK, $storeInSession = true) {}
        public function canProcessRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request) {}
        public function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        /** @var $controllerContext \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext */
        protected function buildControllerContext() {}
        public function forward($actionName, $controllerName = null, $extensionName = null, array $arguments = null) {}
        protected function redirect($actionName, $controllerName = null, $extensionName = null, array $arguments = null, $pageUid = null, $delay = 0, $statusCode = 303) {}
        protected function redirectToUri($uri, $delay = 0, $statusCode = 303) {}
        protected function addBaseUriIfNecessary($uri) {}
        public function throwStatus($statusCode, $statusMessage = null, $content = null) {}
        /** @var \TYPO3\CMS\Extbase\Mvc\Controller\Argument $argument */
        public function initializeControllerArgumentsBaseValidators() {}
        /** @var \TYPO3\CMS\Extbase\Mvc\Controller\Argument $argument */
        protected function mapRequestArgumentsToControllerArguments() {}
    }

    /**
     * The controller context contains information from the controller
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class ControllerContext {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Request
         */
        protected $request;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Response
         */
        protected $response;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\Arguments
         */
        protected $arguments;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder
         */
        protected $uriBuilder;
        /**
         * @var string
         */
        protected $flashMessageQueueDefaultIdentifier;
        /**
         * @var \TYPO3\CMS\Core\Messaging\FlashMessageService
         */
        protected $flashMessageService;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $extensionService;

        public function injectFlashMessageService(\TYPO3\CMS\Core\Messaging\FlashMessageService $flashMessageService) {}
        public function injectExtensionService(\TYPO3\CMS\Extbase\Service\ExtensionService $extensionService) {}
        public function setRequest(\TYPO3\CMS\Extbase\Mvc\Request $request) {}
        /**
         * Get the request of the controller
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Request
         * @api
         */
        public function getRequest() {}
        public function setResponse(\TYPO3\CMS\Extbase\Mvc\Response $response) {}
        /**
         * Get the response of the controller
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Request
         * @api
         */
        public function getResponse() {}
        public function setArguments(\TYPO3\CMS\Extbase\Mvc\Controller\Arguments $arguments) {}
        /**
         * Get the arguments of the controller
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Controller\Arguments
         * @api
         */
        public function getArguments() {}
        public function setUriBuilder(\TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder $uriBuilder) {}
        /**
         * @return \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder
         * @api
         */
        public function getUriBuilder() {}
        public function getFlashMessageQueue($identifier = null) {}
    }

    /**
     * A multi action controller. This is by far the most common base class for Controllers.
     *
     * @api
     */
    class ActionController extends \typo3\cms\extbase\mvc\controller\abstractcontroller {
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Service\CacheService
         */
        protected $cacheService;
        /**
         * The current view, as resolved by resolveView()
         *
         * @var ViewInterface
         * @api
         */
        protected $view;
        /**
         * @var string
         * @api
         */
        protected $namespacesViewObjectNamePattern;
        /**
         * A list of formats and object names of the views which should render them.
         *
         * Example:
         *
         * array('html' => 'Tx_MyExtension_View_MyHtmlView', 'json' => 'F3...
         *
         * @var array
         */
        protected $viewFormatToObjectNameMap;
        /**
         * The default view object to use if none of the resolved views can render
         * a response for the current request.
         *
         * @var string
         * @api
         */
        protected $defaultViewObjectName;
        /**
         * Name of the action method
         *
         * @var string
         * @api
         */
        protected $actionMethodName;
        /**
         * Name of the special error action method which is called in case of errors
         *
         * @var string
         * @api
         */
        protected $errorMethodName;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService
         * @api
         */
        protected $mvcPropertyMappingConfigurationService;
        /**
         * The current request.
         *
         * @var \TYPO3\CMS\Extbase\Mvc\Request
         * @api
         */
        protected $request;
        /**
         * The response which will be returned by this action controller
         *
         * @var \TYPO3\CMS\Extbase\Mvc\Response
         * @api
         */
        protected $response;

        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
        public function injectCacheService(\TYPO3\CMS\Extbase\Service\CacheService $cacheService) {}
        public function injectMvcPropertyMappingConfigurationService(\TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService $mvcPropertyMappingConfigurationService) {}
        public function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        protected function renderAssetsForRequest($request) {}
        /**
         * Implementation of the arguments initilization in the action controller:
         * Automatically registers arguments of the current action
         *
         * Don't override this method - use initializeAction() instead.
         *
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\InvalidArgumentTypeException
         * @see initializeArguments()
         */
        protected function initializeActionMethodArguments() {}
        /**
         * Adds the needed validators to the Arguments:
         *
         * - Validators checking the data type from the @param annotation
         * - Custom validators specified with validate annotations.
         * - Model-based validators (validate annotations in the model)
         * - Custom model validator classes
         */
        protected function initializeActionMethodValidators() {}
        /**
         * Resolves and checks the current action method name
         *
         * @return string Method name of the current action
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\NoSuchActionException if the action specified in the request object does not exist (and if there's no default action either).
         */
        protected function resolveActionMethodName() {}
        /**
         * Calls the specified action method and passes the arguments.
         *
         * If the action returns a string, it is appended to the content in the
         * response object. If the action doesn't return anything and a valid
         * view exists, the view is rendered automatically.
         *
         * @api
         */
        protected function callActionMethod() {}
        protected function emitBeforeCallActionMethodSignal(array $preparedArguments) {}
        /** @var $view ViewInterface */
        protected function resolveView() {}
        protected function setViewConfiguration(ViewInterface $view) {}
        protected function getViewProperty($extbaseFrameworkConfiguration, $setting) {}
        /**
         * Determines the fully qualified view object name.
         *
         * @return mixed The fully qualified view object name or FALSE if no matching view could be found.
         * @api
         */
        protected function resolveViewObjectName() {}
        protected function initializeView(ViewInterface $view) {}
        /**
         * Initializes the controller before invoking an action method.
         *
         * Override this method to solve tasks which all actions have in
         * common.
         *
         * @api
         */
        protected function initializeAction() {}
        /**
         * A special action which is called if the originally intended action could
         * not be called, for example if the arguments were not valid.
         *
         * The default implementation sets a flash message, request errors and forwards back
         * to the originating action. This is suitable for most actions dealing with form input.
         *
         * We clear the page cache by default on an error as well, as we need to make sure the
         * data is re-evaluated when the user changes something.
         *
         * @return string
         * @api
         */
        protected function errorAction() {}
        /**
         * Clear cache of current page on error. Needed because we want a re-evaluation of the data.
         * Better would be just do delete the cache for the error action, but that is not possible right now.
         */
        protected function clearCacheOnError() {}
        /**
         * If an error occurred during this request, this adds a flash message describing the error to the flash
         * message container.
         */
        protected function addErrorFlashMessage() {}
        /**
         * A template method for displaying custom error flash messages, or to
         * display no flash message at all on errors. Override this to customize
         * the flash message in your action controller.
         *
         * @return string The flash message or FALSE if no flash message should be set
         * @api
         */
        protected function getErrorFlashMessage() {}
        /**
         * If information on the request before the current request was sent, this method forwards back
         * to the originating request. This effectively ends processing of the current request, so do not
         * call this method before you have finished the necessary business logic!
         *
         * @throws StopActionException
         */
        protected function forwardToReferringRequest() {}
        /**
         * Returns a string with a basic error message about validation failure.
         * We may add all validation error messages to a log file in the future,
         * but for security reasons (@see #54074) we do not return these here.
         *
         * @return string
         */
        protected function getFlattenedValidationErrorMessage() {}
        public static function getActionMethodParameters($objectManager) {}
    }

    /**
     * The default property mapping configuration is available
     * inside the Argument-object.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class MvcPropertyMappingConfiguration extends \typo3\cms\extbase\property\propertymappingconfiguration {
        public function allowCreationForSubProperty($propertyPath) {}
        public function allowModificationForSubProperty($propertyPath) {}
        public function setTargetTypeForSubProperty($propertyPath, $targetType) {}
    }

    /**
     * A composite of controller arguments
     */
    class Arguments extends \arrayobject {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var array Names of the arguments contained by this object
         */
        protected $argumentNames;
        /**
         * @var array
         */
        protected $argumentShortNames;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        /**
         * Constructor. If this one is removed, reflection breaks.
         */
        public function __construct() {}
        public function offsetSet($offset, $value) {}
        public function append($value) {}
        public function offsetUnset($offset) {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
/** @var $argument Argument */
        public function addNewArgument(/** @var $argument Argument */
$name, /** @var $argument Argument */
$dataType = 'Text', /** @var $argument Argument */
$isRequired = false, /** @var $argument Argument */
$defaultValue = null) {}
        public function addArgument(Argument $argument) {}
        public function getArgument($argumentName) {}
        public function hasArgument($argumentName) {}
        /**
         * Returns the names of all arguments contained in this object
         *
         * @return array Argument names
         */
        public function getArgumentNames() {}
        /** @var Argument $argument */
        public function getArgumentShortNames() {}
        public function __call($methodName, array $arguments) {}
/** @var Argument $argument */
        protected function translateToLongArgumentName(/** @var Argument $argument */
$argumentName) {}
        /**
         * Remove all arguments and resets this object
         */
        public function removeAll() {}
        /**
         * Get all property mapping / validation errors
         *
         * @return \TYPO3\CMS\Extbase\Error\Result
         */
        public function getValidationResults() {}
    }


    /**
     * Interface for controllers
     *
     * @api
     */
    interface ControllerInterface {
        function canProcessRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request) ;
        function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) ;
    }

    /**
     * Interface for command controllers
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    interface CommandControllerInterface extends \typo3\cms\extbase\mvc\controller\controllerinterface {}

}

namespace TYPO3\CMS\Extbase\Mvc\Controller\Exception {
    /**
     * An "Invalid Argument Name" exception
     */
    class RequiredArgumentMissingException extends \typo3\cms\extbase\mvc\exception {}

}

namespace TYPO3\CMS\Extbase\Mvc\View {
    /**
     * An empty view - a special case.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class EmptyView implements \typo3\cms\extbase\mvc\view\viewinterface {
        public function setControllerContext(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
        public function assign($key, $value) {}
        public function assignMultiple(array $values) {}
        public function canRender(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
        /**
         * Renders the empty view
         *
         * @return string An empty string
         */
        public function render() {}
        public function __call($methodName, array $arguments) {}
        /**
         * Initializes this view.
         *
         * Override this method for initializing your concrete view implementation.
         *
         * @api
         */
        public function initializeView() {}
    }

    /**
     * An abstract View
     *
     * @api
     */
    abstract class AbstractView implements \typo3\cms\extbase\mvc\view\viewinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         * @api
         */
        protected $controllerContext;
        /**
         * View variables and their values
         *
         * @var array
         * @see assign()
         */
        protected $variables;

        public function setControllerContext(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
        public function assign($key, $value) {}
        public function assignMultiple(array $values) {}
        public function canRender(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
        /**
         * Initializes this view.
         *
         * Override this method for initializing your concrete view implementation.
         *
         * @api
         */
        public function initializeView() {}
    }

    /**
     * A JSON view
     *
     * @api
     */
    class JsonView extends \typo3\cms\extbase\mvc\view\abstractview {
        const EXPOSE_CLASSNAME_FULLY_QUALIFIED = 1;
        const EXPOSE_CLASSNAME_UNQUALIFIED = 2;

        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         */
        protected $controllerContext;
        /**
         * Only variables whose name is contained in this array will be rendered
         *
         * @var array
         */
        protected $variablesToRender;
        /**
         * The rendering configuration for this JSON view which
         * determines which properties of each variable to render.
         *
         * The configuration array must have the following structure:
         *
         * Example 1:
         *
         * array(
         *		'variable1' => array(
         *			'_only' => array('property1', 'property2', ...)
         *		),
         *		'variable2' => array(
         *	 		'_exclude' => array('property3', 'property4, ...)
         *		),
         *		'variable3' => array(
         *			'_exclude' => array('secretTitle'),
         *			'_descend' => array(
         *				'customer' => array(
         *					'_only' => array('firstName', 'lastName')
         *				)
         *			)
         *		),
         *		'somearrayvalue' => array(
         *			'_descendAll' => array(
         *				'_only' => array('property1')
         *			)
         *		)
         * )
         *
         * Of variable1 only property1 and property2 will be included.
         * Of variable2 all properties except property3 and property4
         * are used.
         * Of variable3 all properties except secretTitle are included.
         *
         * If a property value is an array or object, it is not included
         * by default. If, however, such a property is listed in a "_descend"
         * section, the renderer will descend into this sub structure and
         * include all its properties (of the next level).
         *
         * The configuration of each property in "_descend" has the same syntax
         * like at the top level. Therefore - theoretically - infinitely nested
         * structures can be configured.
         *
         * To export indexed arrays the "_descendAll" section can be used to
         * include all array keys for the output. The configuration inside a
         * "_descendAll" will be applied to each array element.
         *
         *
         * Example 2: exposing object identifier
         *
         * array(
         *		'variableFoo' => array(
         *			'_exclude' => array('secretTitle'),
         *			'_descend' => array(
         *				'customer' => array(    // consider 'customer' being a persisted entity
         *					'_only' => array('firstName'),
         * 					'_exposeObjectIdentifier' => TRUE,
         * 					'_exposedObjectIdentifierKey' => 'guid'
         *				)
         *			)
         *		)
         * )
         *
         * Note for entity objects you are able to expose the object's identifier
         * also, just add an "_exposeObjectIdentifier" directive set to TRUE and
         * an additional property '__identity' will appear keeping the persistence
         * identifier. Renaming that property name instead of '__identity' is also
         * possible with the directive "_exposedObjectIdentifierKey".
         * Example 2 above would output (summarized):
         * {"customer":{"firstName":"John","guid":"892693e4-b570-46fe-af71-1ad32918fb64"}}
         *
         *
         * Example 3: exposing object's class name
         *
         * array(
         *		'variableFoo' => array(
         *			'_exclude' => array('secretTitle'),
         *			'_descend' => array(
         *				'customer' => array(    // consider 'customer' being an object
         *					'_only' => array('firstName'),
         * 					'_exposeClassName' => TYPO3\Flow\Mvc\View\JsonView::EXPOSE_CLASSNAME_FULLY_QUALIFIED
         *				)
         *			)
         *		)
         * )
         *
         * The ``_exposeClassName`` is similar to the objectIdentifier one, but the class name is added to the
         * JSON object output, for example (summarized):
         * {"customer":{"firstName":"John","__class":"Acme\Foo\Domain\Model\Customer"}}
         *
         * The other option is EXPOSE_CLASSNAME_UNQUALIFIED which only will give the last part of the class
         * without the namespace, for example (summarized):
         * {"customer":{"firstName":"John","__class":"Customer"}}
         * This might be of interest to not provide information about the package or domain structure behind.
         *
         * @var array
         */
        protected $configuration;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;

        public function injectPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) {}
        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
        public function setVariablesToRender(array $variablesToRender) {}
        public function setConfiguration(array $configuration) {}
        /**
         * Transforms the value view variable to a serializable
         * array representation using a YAML view configuration and JSON encodes
         * the result.
         *
         * @return string The JSON encoded variables
         * @api
         */
        public function render() {}
        /**
         * Loads the configuration and transforms the value to a serializable
         * array.
         *
         * @return array An array containing the values, ready to be JSON encoded
         * @api
         */
        protected function renderArray() {}
        protected function transformValue($value, array $configuration) {}
        protected function transformObject($object, array $configuration) {}
    }

    /**
     * The not found view - a special case.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class NotFoundView extends \typo3\cms\extbase\mvc\view\abstractview {
        /**
         * @var array
         */
        protected $variablesMarker;

        /**
         * Renders the not found view
         *
         * @return string The rendered view
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception if no request has been set
         * @api
         */
        public function render() {}
        /**
         * Retrieves path and filename of the not-found-template
         *
         * @return string path and filename of the not-found-template
         */
        protected function getTemplatePathAndFilename() {}
        public function __call($methodName, array $arguments) {}
    }


    /**
     * Interface of a view
     *
     * @api
     */
    interface ViewInterface {
        function setControllerContext(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) ;
        function assign($key, $value) ;
        function assignMultiple(array $values) ;
        function canRender(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) ;
        /**
         * Renders the view
         *
         * @return string The rendered view
         * @api
         */
        function render() ;
        /**
         * Initializes this view.
         *
         * @api
         */
        function initializeView() ;
    }

}

namespace TYPO3\CMS\Extbase\Security {
    /**
     * A hash service which should be used to generate and validate hashes.
     *
     * It will use some salt / encryption key in the future.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser Public License, version 3 or later
     */
    class Exception extends \typo3\cms\extbase\exception {}

}

namespace TYPO3\CMS\Extbase\Security\Cryptography {
    /**
     * A hash service which should be used to generate and validate hashes.
     *
     * It will use some salt / encryption key in the future.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser Public License, version 3 or later
     */
    class HashService implements \typo3\cms\core\singletoninterface {
        public function generateHmac($string) {}
        public function appendHmac($string) {}
        public function validateHmac($string, $hmac) {}
        public function validateAndStripHmac($string) {}
    }

}

namespace TYPO3\CMS\Extbase\Property {
    /**
     * The Property Mapper transforms simple types (arrays, strings, integers, floats, booleans) to objects or other simple types.
     * It is used most prominently to map incoming HTTP arguments to objects.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class PropertyMapper implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder
         */
        protected $configurationBuilder;
        /**
         * A multi-dimensional array which stores the Type Converters available in the system.
         * It has the following structure:
         * 1. Dimension: Source Type
         * 2. Dimension: Target Type
         * 3. Dimension: Priority
         * Value: Type Converter instance
         *
         * @var array
         */
        protected $typeConverters;
        /**
         * A list of property mapping messages (errors, warnings) which have occurred on last mapping.
         *
         * @var \TYPO3\CMS\Extbase\Error\Result
         */
        protected $messages;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectConfigurationBuilder(\TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder $configurationBuilder) {}
        /**
         * Lifecycle method, called after all dependencies have been injected.
         * Here, the typeConverter array gets initialized.
         *
         * @throws Exception\DuplicateTypeConverterException
         */
        public function initializeObject() {}
        public function convert($source, $targetType, PropertyMappingConfigurationInterface $configuration = null) {}
        /**
         * Get the messages of the last Property Mapping
         *
         * @return \TYPO3\CMS\Extbase\Error\Result
         * @api
         */
        public function getMessages() {}
        protected function doMapping($source, $targetType, PropertyMappingConfigurationInterface $configuration, $currentPropertyPath) {}
        protected function findTypeConverter($source, $targetType, PropertyMappingConfigurationInterface $configuration) {}
        protected function findFirstEligibleTypeConverterInObjectHierarchy($source, $sourceType, $targetClass) {}
/** @var AbstractTypeConverter $converter */
        protected function findEligibleConverterWithHighestPriority(/** @var AbstractTypeConverter $converter */
$converters, /** @var AbstractTypeConverter $converter */
$source, /** @var AbstractTypeConverter $converter */
$targetType) {}
        protected function getConvertersForInterfaces(array $convertersForSource, array $interfaceNames) {}
        protected function determineSourceType($source) {}
        public function parseCompositeType($compositeType) {}
    }

    /**
     * Concrete configuration object for the PropertyMapper.
     *
     * @api
     */
    class PropertyMappingConfiguration implements \typo3\cms\extbase\property\propertymappingconfigurationinterface {
        const PROPERTY_PATH_PLACEHOLDER = '*';

        /**
         * multi-dimensional array which stores type-converter specific configuration:
         * 1. Dimension: Fully qualified class name of the type converter
         * 2. Dimension: Configuration Key
         * Value: Configuration Value
         *
         * @var array
         */
        protected $configuration;
        /**
         * Stores the configuration for specific child properties.
         *
         * @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface[]
         */
        protected $subConfigurationForProperty;
        /**
         * Keys which should be renamed
         *
         * @var array
         */
        protected $mapping;
        /**
         * @var \TYPO3\CMS\Extbase\Property\TypeConverterInterface
         */
        protected $typeConverter;
        /**
         * List of allowed property names to be converted
         *
         * @var array
         */
        protected $propertiesToBeMapped;
        /**
         * List of property names to be skipped during property mapping
         *
         * @var array
         */
        protected $propertiesToSkip;
        /**
         * List of disallowed property names which will be ignored while property mapping
         *
         * @var array
         */
        protected $propertiesNotToBeMapped;
        /**
         * If TRUE, unknown properties will be skipped during property mapping
         *
         * @var bool
         */
        protected $skipUnknownProperties;
        /**
         * If TRUE, unknown properties will be mapped.
         *
         * @var bool
         */
        protected $mapUnknownProperties;

        public function shouldMap($propertyName) {}
        public function shouldSkip($propertyName) {}
        /**
         * Allow all properties in property mapping, even unknown ones.
         *
         * @return \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration this
         * @api
         */
        public function allowAllProperties() {}
        /**
         * Allow a list of specific properties. All arguments of
         * allowProperties are used here (varargs).
         *
         * Example: allowProperties('title', 'content', 'author')
         *
         * @return \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration
         * @api
         */
        public function allowProperties() {}
        /**
         * Skip a list of specific properties. All arguments of
         * skipProperties are used here (varargs).
         *
         * Example: skipProperties('unused', 'dummy')
         *
         * @return \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration this
         * @api
         */
        public function skipProperties() {}
        /**
         * Allow all properties during property mapping, but reject a few
         * selected ones (blacklist).
         *
         * Example: allowAllPropertiesExcept('password', 'userGroup')
         *
         * @return \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration this
         * @api
         */
        public function allowAllPropertiesExcept() {}
        /**
         * When this is enabled, properties that are disallowed will be skipped
         * instead of triggering an error during mapping.
         *
         * @return \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration this
         * @api
         */
        public function skipUnknownProperties() {}
        /**
         * Whether unknown (unconfigured) properties should be skipped during
         * mapping, instead if causing an error.
         *
         * @return bool
         * @api
         */
        public function shouldSkipUnknownProperties() {}
        public function getConfigurationFor($propertyName) {}
        public function getTargetPropertyName($sourcePropertyName) {}
        public function getConfigurationValue($typeConverterClassName, $key) {}
        public function setMapping($sourcePropertyName, $targetPropertyName) {}
        public function setTypeConverterOptions($typeConverter, array $options) {}
        public function setTypeConverterOption($typeConverter, $optionKey, $optionValue) {}
        protected function getTypeConvertersWithParentClasses($typeConverter) {}
        public function forProperty($propertyPath) {}
        public function traverseProperties(array $splittedPropertyPath) {}
        /**
         * Return the type converter set for this configuration.
         *
         * @return \TYPO3\CMS\Extbase\Property\TypeConverterInterface
         * @api
         */
        public function getTypeConverter() {}
        public function setTypeConverter(\TYPO3\CMS\Extbase\Property\TypeConverterInterface $typeConverter) {}
    }

    /**
     * This builder creates the default configuration for Property Mapping, if no configuration has been passed to the Property Mapper.
     */
    class PropertyMappingConfigurationBuilder implements \typo3\cms\core\singletoninterface {
/** @var $configuration \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration */
        public function build(/** @var $configuration \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration */
$type = \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration::class) {}
    }

    /**
     * An generic Property related exception
     */
    class Exception extends \typo3\cms\extbase\exception {}


    /**
     * Interface for type converters, which can convert from a simple type to an object or another simple type.
     *
     * All Type Converters should have NO INTERNAL STATE, such that they can be used as singletons and multiple times in succession (as this improves performance dramatically).
     *
     * @api
     */
    interface TypeConverterInterface {
        /**
         * Returns the list of source types the TypeConverter can handle.
         * Must be PHP simple types, classes or object is not allowed.
         *
         * @return array<string>
         * @api
         */
        function getSupportedSourceTypes() ;
        /**
         * Return the target type this TypeConverter converts to.
         * Can be a simple type or a class name.
         *
         * @return string
         * @api
         */
        function getSupportedTargetType() ;
        function getTargetTypeForSource($source, $originalTargetType, PropertyMappingConfigurationInterface $configuration = null) ;
        /**
         * Return the priority of this TypeConverter. TypeConverters with a high priority are chosen before low priority.
         *
         * @return int
         * @api
         */
        function getPriority() ;
        function canConvertFrom($source, $targetType) ;
        function getSourceChildPropertiesToBeConverted($source) ;
        function getTypeOfChildProperty($targetType, $propertyName, \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration) ;
        function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) ;
    }

    /**
     * Configuration object for the property mapper.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    interface PropertyMappingConfigurationInterface {
        function shouldSkip($propertyName) ;
        /**
         * Whether unknown (unconfigured) properties should be skipped during
         * mapping, instead if causing an error.
         *
         * @return bool
         * @api
         */
        function shouldSkipUnknownProperties() ;
        function getConfigurationFor($propertyName) ;
        function getTargetPropertyName($sourcePropertyName) ;
        function getConfigurationValue($typeConverterClassName, $key) ;
        /**
         * This method can be used to explicitly force a TypeConverter to be used for this Configuration.
         *
         * @return \TYPO3\CMS\Extbase\Property\TypeConverterInterface The type converter to be used for this particular PropertyMappingConfiguration, or NULL if the system-wide configured type converter should be used.
         * @api
         */
        function getTypeConverter() ;
    }

}

namespace TYPO3\CMS\Extbase\Property\TypeConverter {
    /**
     * Converter which transforms simple types to a core type
     * implementing \TYPO3\CMS\Core\Type\TypeInterface.
     *
     * @api
     */
    class CoreTypeConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function canConvertFrom($source, $targetType) {}
        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
    }

    /**
     * Converter which transforms simple types to \TYPO3\CMS\Extbase\Domain\Model\FileCollection.
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class FolderBasedFileCollectionConverter extends \typo3\cms\extbase\property\typeconverter\abstractfilecollectionconverter implements \typo3\cms\core\singletoninterface {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var string
         */
        protected $expectedObjectType;

        protected function getObject($source) {}
    }

    /**
     * Converter which transforms a simple type to an integer, by simply casting it.
     *
     * @api
     */
    class IntegerConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter implements \typo3\cms\core\singletoninterface {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
    }

    /**
     * This converter transforms arrays to simple objects (POPO) by setting properties.
     *
     * @api
     */
    class ObjectConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter implements \typo3\cms\core\singletoninterface {
        const CONFIGURATION_OVERRIDE_TARGET_TYPE_ALLOWED = 4;
        const CONFIGURATION_TARGET_TYPE = 3;

        /**
         * @var array
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;
        /**
         * @var \TYPO3\CMS\Extbase\Object\Container\Container
         */
        protected $objectContainer;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;

        public function injectObjectContainer(\TYPO3\CMS\Extbase\Object\Container\Container $objectContainer) {}
        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
        public function canConvertFrom($source, $targetType) {}
        public function getSourceChildPropertiesToBeConverted($source) {}
        public function getTypeOfChildProperty($targetType, $propertyName, \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration) {}
        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        public function getTargetTypeForSource($source, $originalTargetType, \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        protected function buildObject(array $possibleConstructorArgumentValues, $objectType) {}
    }

    /**
     * Converter which transforms simple types to \TYPO3\CMS\Extbase\Domain\Model\File.
     *
     * @api experimental! This class is experimental and subject to change!
     */
    abstract class AbstractFileCollectionConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        /**
         * @var int
         */
        protected $priority;
        /**
         * @var string
         */
        protected $expectedObjectType;
        /**
         * @var \TYPO3\CMS\Core\Resource\ResourceFactory
         */
        protected $fileFactory;

        public function injectFileFactory(\TYPO3\CMS\Core\Resource\ResourceFactory $fileFactory) {}
/** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileCollection */
        public function convertFrom(/** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileCollection */
$source, /** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileCollection */
$targetType, /** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileCollection */
array $convertedChildProperties = [ ], /** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileCollection */
\TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        abstract protected function getObject($source) ;
    }

    /**
     * Type converter which provides sensible default implementations for most methods. If you extend this class
     * you only need to do the following:
     * - set $sourceTypes
     * - set $targetType
     * - set $priority
     * - implement convertFrom()
     *
     * @api
     */
    abstract class AbstractTypeConverter implements \typo3\cms\extbase\property\typeconverterinterface, \typo3\cms\core\singletoninterface {
        /**
         * The source types this converter can convert.
         *
         * @var array<string>
         * @api
         */
        protected $sourceTypes;
        /**
         * The target type this converter can convert to.
         *
         * @var string
         * @api
         */
        protected $targetType;
        /**
         * The priority for this converter.
         *
         * @var int
         * @api
         */
        protected $priority;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        /**
         * Returns the list of source types the TypeConverter can handle.
         * Must be PHP simple types, classes or object is not allowed.
         *
         * @return array<string>
         * @api
         */
        public function getSupportedSourceTypes() {}
        /**
         * Return the target type this TypeConverter converts to.
         * Can be a simple type or a class name.
         *
         * @return string
         * @api
         */
        public function getSupportedTargetType() {}
        public function getTargetTypeForSource($source, $originalTargetType, \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        /**
         * Return the priority of this TypeConverter. TypeConverters with a high priority are chosen before low priority.
         *
         * @return int
         * @api
         */
        public function getPriority() {}
        public function canConvertFrom($source, $targetType) {}
        public function getSourceChildPropertiesToBeConverted($source) {}
        public function getTypeOfChildProperty($targetType, $propertyName, \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration) {}
    }

    /**
     * Converter which transforms simple types to a string.
     *
     * @api
     */
    class StringConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter implements \typo3\cms\core\singletoninterface {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
    }

    /**
     * Converter which transforms arrays to arrays.
     *
     * @api
     */
    class ArrayConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function canConvertFrom($source, $targetType) {}
        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
    }

    /**
     * Converter which transforms from different input formats into DateTime objects.
     *
     * Source can be either a string or an array. The date string is expected to be formatted
     * according to DEFAULT_DATE_FORMAT.
     *
     * But the default date format can be overridden in the initialize*Action() method like this::
     *
     *  $this->arguments['<argumentName>']
     *    ->getPropertyMappingConfiguration()
     *    ->forProperty('<propertyName>') // this line can be skipped in order to specify the format for all properties
     *    ->setTypeConverterOption(\TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter::class, \TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter::CONFIGURATION_DATE_FORMAT, '<dateFormat>');
     *
     * If the source is of type array, it is possible to override the format in the source::
     *
     *  array(
     *   'date' => '<dateString>',
     *   'dateFormat' => '<dateFormat>'
     *  );
     *
     * By using an array as source you can also override time and timezone of the created DateTime object::
     *
     *  array(
     *   'date' => '<dateString>',
     *   'hour' => '<hour>', // integer
     *   'minute' => '<minute>', // integer
     *   'seconds' => '<seconds>', // integer
     *   'timezone' => '<timezone>', // string, see http://www.php.net/manual/timezones.php
     *  );
     *
     * As an alternative to providing the date as string, you might supply day, month and year as array items each::
     *
     *  array(
     *   'day' => '<day>', // integer
     *   'month' => '<month>', // integer
     *   'year' => '<year>', // integer
     *  );
     *
     * @api
     */
    class DateTimeConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        const CONFIGURATION_DATE_FORMAT = 'dateFormat';
        const DEFAULT_DATE_FORMAT = \DateTime::W3C;

        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function canConvertFrom($source, $targetType) {}
        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        protected function isDatePartKeysProvided(array $source) {}
        protected function getDefaultDateFormat(\TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        protected function overrideTimeIfSpecified(\DateTime $date, array $source) {}
    }

    /**
     * Converter which transforms simple types to \TYPO3\CMS\Extbase\Domain\Model\FileReference.
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class FileReferenceConverter extends \typo3\cms\extbase\property\typeconverter\abstractfilefolderconverter implements \typo3\cms\core\singletoninterface {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var string
         */
        protected $expectedObjectType;

        protected function getOriginalResource($source) {}
    }

    /**
     * Converter which transforms simple types to \TYPO3\CMS\Extbase\Domain\Model\FileCollection.
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class StaticFileCollectionConverter extends \typo3\cms\extbase\property\typeconverter\abstractfilecollectionconverter implements \typo3\cms\core\singletoninterface {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var string
         */
        protected $expectedObjectType;

        protected function getObject($source) {}
    }

    /**
     * Converter which transforms simple types to an ObjectStorage.
     *
     * @api
     * @todo Implement functionality for converting collection properties.
     */
    class ObjectStorageConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        public function getSourceChildPropertiesToBeConverted($source) {}
        public function getTypeOfChildProperty($targetType, $propertyName, \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration) {}
    }

    /**
     * Converter which transforms simple types to \TYPO3\CMS\Extbase\Domain\Model\File.
     *
     * @api experimental! This class is experimental and subject to change!
     */
    abstract class AbstractFileFolderConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        /**
         * @var int
         */
        protected $priority;
        /**
         * @var string
         */
        protected $expectedObjectType;
        /**
         * @var \TYPO3\CMS\Core\Resource\ResourceFactory
         */
        protected $fileFactory;

        public function injectFileFactory(\TYPO3\CMS\Core\Resource\ResourceFactory $fileFactory) {}
/** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileFolder */
        public function convertFrom(/** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileFolder */
$source, /** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileFolder */
$targetType, /** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileFolder */
array $convertedChildProperties = [ ], /** @var $subject \TYPO3\CMS\Extbase\Domain\Model\AbstractFileFolder */
\TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        abstract protected function getOriginalResource($source) ;
    }

    /**
     * This converter transforms arrays or strings to persistent objects. It does the following:
     *
     * - If the input is string, it is assumed to be a UID. Then, the object is fetched from persistence.
     * - If the input is array, we check if it has an identity property.
     *
     * - If the input has an identity property and NO additional properties, we fetch the object from persistence.
     * - If the input has an identity property AND additional properties, we fetch the object from persistence,
     *   and set the sub-properties. We only do this if the configuration option "CONFIGURATION_MODIFICATION_ALLOWED" is TRUE.
     * - If the input has NO identity property, but additional properties, we create a new object and return it.
     *   However, we only do this if the configuration option "CONFIGURATION_CREATION_ALLOWED" is TRUE.
     *
     * @api
     */
    class PersistentObjectConverter extends \typo3\cms\extbase\property\typeconverter\objectconverter {
        const CONFIGURATION_CREATION_ALLOWED = 2;
        const CONFIGURATION_MODIFICATION_ALLOWED = 1;

        /**
         * @var array
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;

        public function injectPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) {}
        public function canConvertFrom($source, $targetType) {}
        public function getSourceChildPropertiesToBeConverted($source) {}
        public function getTypeOfChildProperty($targetType, $propertyName, \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration) {}
        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        protected function handleArrayData(array $source, $targetType, array $convertedChildProperties, \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
        protected function fetchObjectFromPersistence($identity, $targetType) {}
    }

    /**
     * Converter which transforms simple types to a boolean, by simply casting it.
     *
     * @api
     */
    class BooleanConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
    }

    /**
     * Converter which transforms a simple type to a float.
     *
     * This is basically done by simply casting it.
     *
     * @api
     */
    class FloatConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        const CONFIGURATION_DECIMAL_POINT = 'decimalPoint';
        const CONFIGURATION_THOUSANDS_SEPARATOR = 'thousandsSeparator';

        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface $configuration = null) {}
    }

    /**
     * Converter which transforms simple types to \TYPO3\CMS\Extbase\Domain\Model\File.
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class FileConverter extends \typo3\cms\extbase\property\typeconverter\abstractfilefolderconverter implements \typo3\cms\core\singletoninterface {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var string
         */
        protected $expectedObjectType;

        protected function getOriginalResource($source) {}
    }

    /**
     * Converter which transforms simple types to \TYPO3\CMS\Extbase\Domain\Model\Folder.
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class FolderConverter extends \typo3\cms\extbase\property\typeconverter\abstractfilefolderconverter implements \typo3\cms\core\singletoninterface {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var string
         */
        protected $expectedObjectType;

        protected function getOriginalResource($source) {}
    }

}

namespace TYPO3\CMS\Extbase\DomainObject {
    /**
     * An abstract Entity. An Entity is an object fundamentally defined not by its attributes,
     * but by a thread of continuity and identity (e.g. a person).
     */
    abstract class AbstractEntity extends \typo3\cms\extbase\domainobject\abstractdomainobject {}

    /**
     * An abstract Value Object. A Value Object is an object that describes some characteristic
     * or attribute (e.g. a color) but carries no concept of identity.
     */
    abstract class AbstractValueObject extends \typo3\cms\extbase\domainobject\abstractdomainobject {
        /**
         * Returns the value of the Value Object. Must be overwritten by a concrete value object.
         *
         * @return string
         */
        public function getValue() {}
    }

    /**
     * A generic Domain Object.
     *
     * All Model domain objects need to inherit from either AbstractEntity or AbstractValueObject, as this provides important framework information.
     */
    abstract class AbstractDomainObject implements \typo3\cms\extbase\domainobject\domainobjectinterface, \typo3\cms\extbase\persistence\objectmonitoringinterface {
        /**
         * @var int The uid of the record. The uid is only unique in the context of the database table.
         */
        protected $uid;
        /**
         * @var int The uid of the localized record. In TYPO3 v4.x the property "uid" holds the uid of the record in default language (the translationOrigin).
         */
        protected $_localizedUid;
        /**
         * @var int The uid of the language of the object. In TYPO3 v4.x this is the uid of the language record in the table sys_language.
         */
        protected $_languageUid;
        /**
         * @var int The uid of the versioned record.
         */
        protected $_versionedUid;
        /**
         * @var int The id of the page the record is "stored".
         */
        protected $pid;
        /**
         * TRUE if the object is a clone
         *
         * @var bool
         */
        private $_isClone;
        /**
         * @var array An array holding the clean property values. Set right after reconstitution of the object
         */
        private $_cleanProperties;

        /**
         * Getter for uid.
         *
         * @return int the uid or NULL if none set yet.
         */
        public function getUid() {}
        public function setPid($pid) {}
        /**
         * Getter for the pid.
         *
         * @return int The pid or NULL if none set yet.
         */
        public function getPid() {}
        public function _setProperty($propertyName, $propertyValue) {}
        public function _getProperty($propertyName) {}
        /**
         * Returns a hash map of property names and property values. Only for internal use.
         *
         * @return array The properties
         */
        public function _getProperties() {}
        public function _hasProperty($propertyName) {}
        /**
         * Returns TRUE if the object is new (the uid was not set, yet). Only for internal use
         *
         * @return bool
         */
        public function _isNew() {}
        public function _memorizeCleanState($propertyName = null) {}
        public function _memorizePropertyCleanState($propertyName) {}
        /**
         * Returns a hash map of clean properties and $values.
         *
         * @return array
         */
        public function _getCleanProperties() {}
        public function _getCleanProperty($propertyName) {}
        public function _isDirty($propertyName = null) {}
        protected function isPropertyDirty($previousValue, $currentValue) {}
        /**
         * Returns TRUE if the object has been clonesd, cloned, FALSE otherwise.
         *
         * @return bool TRUE if the object has been cloned
         */
        public function _isClone() {}
        public function _setClone($clone) {}
        /**
         * Clone method. Sets the _isClone property.
         */
        public function __clone() {}
        /**
         * Returns the class name and the uid of the object as string
         *
         * @return string
         */
        public function __toString() {}
    }


    /**
     * A Domain Object Interface. All domain objects which should be persisted need to implement the below interface.
     * Usually you will need to subclass \TYPO3\CMS\Extbase\DomainObject\AbstractEntity and \TYPO3\CMS\Extbase\DomainObject\AbstractValueObject
     * instead.
     *
     * @see \TYPO3\CMS\Extbase\DomainObject\AbstractEntity
     * @see \TYPO3\CMS\Extbase\DomainObject\AbstractValueObject
     */
    interface DomainObjectInterface {
        /**
         * Getter for uid.
         *
         * @return int The uid or NULL if none set yet.
         */
        function getUid() ;
        function setPid($pid) ;
        /**
         * Getter for the pid.
         *
         * @return int The pid or NULL if none set yet.
         */
        function getPid() ;
        /**
         * Returns TRUE if the object is new (the uid was not set, yet). Only for internal use
         *
         * @return bool
         */
        function _isNew() ;
        function _setProperty($propertyName, $value) ;
        function _getProperty($propertyName) ;
        /**
         * Returns a hash map of property names and property values
         *
         * @return array The properties
         */
        function _getProperties() ;
        function _getCleanProperty($propertyName) ;
    }

}

namespace TYPO3\CMS\Extbase\Scheduler {
    /**
     * Field provider for Extbase CommandController Scheduler task
     */
    class FieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\CommandManager
         */
        protected $commandManager;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Scheduler\Task
         */
        protected $task;

        public function __construct(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager = null, \TYPO3\CMS\Extbase\Mvc\Cli\CommandManager $commandManager = null, \TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService = null) {}
        public function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $schedulerModule) {}
        public function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $schedulerModule) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
        /**
         * Get description of selected command
         *
         * @return string
         */
        protected function getCommandControllerActionDescriptionField() {}
        /**
         * Gets a select field containing all possible CommandController actions
         *
         * @return array
         */
        protected function getCommandControllerActionField() {}
        protected function getCommandControllerActionArgumentFields(array $argumentDefinitions) {}
        protected function getLanguageLabel($localLanguageKey, $extensionName = null) {}
        protected function getArgumentType(\TYPO3\CMS\Extbase\Mvc\Cli\CommandArgumentDefinition $argument) {}
        protected function getArgumentLabel(\TYPO3\CMS\Extbase\Mvc\Cli\CommandArgumentDefinition $argument) {}
        protected function getDefaultArgumentValue(\TYPO3\CMS\Extbase\Mvc\Cli\CommandArgumentDefinition $argument) {}
        /**
         * Get a human-readable label for the action field
         *
         * @return string
         */
        protected function getActionLabel() {}
        protected function renderSelectField($name, array $options, $selectedOptionValue) {}
        protected function renderField(\TYPO3\CMS\Extbase\Mvc\Cli\CommandArgumentDefinition $argument, $currentValue) {}
    }

    /**
     * Scheduler task to execute CommandController commands
     */
    class Task extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * @var string
         */
        protected $commandIdentifier;
        /**
         * @var array
         */
        protected $arguments;
        /**
         * @var array
         */
        protected $defaults;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var CommandManager
         */
        protected $commandManager;
        /**
         * @var TaskExecutor
         */
        protected $taskExecutor;

        /**
         * Instantiates the Object Manager
         */
        public function __construct() {}
        /**
         * Sleep
         *
         * @return array Properties to serialize
         */
        public function __sleep() {}
        /**
         * Wakeup
         */
        public function __wakeup() {}
        /**
         * Function execute from the Scheduler
         *
         * @return bool TRUE on successful execution
         * @throws \Exception If an error occurs
         */
        public function execute() {}
        public function setCommandIdentifier($commandIdentifier) {}
        /**
         * @return string
         */
        public function getCommandIdentifier() {}
        public function setArguments($arguments) {}
        /**
         * @return array
         */
        public function getArguments() {}
        public function setDefaults(array $defaults) {}
        /**
         * @return array
         */
        public function getDefaults() {}
        public function addDefaultValue($argumentName, $argumentValue) {}
        /**
         * Return a text representation of the selected command and arguments
         *
         * @return string Information to display
         */
        public function getAdditionalInformation() {}
        protected function logException(\Exception $e) {}
    }

    /**
     * Task Executor
     *
     * Takes a \TYPO3\CMS\Extbase\Scheduler\Task and executes the CommandController command
     * defined therein.
     */
    class TaskExecutor implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\Request
         */
        protected $request;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\Response
         */
        protected $response;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Dispatcher
         */
        protected $dispatcher;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\CommandManager
         */
        protected $commandManager;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectCommandManager(\TYPO3\CMS\Extbase\Mvc\Cli\CommandManager $commandManager) {}
        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        /**
         * Initialize Dispatcher
         */
        public function initializeObject() {}
        protected function initialize(array $configuration) {}
        public function execute(\TYPO3\CMS\Extbase\Scheduler\Task $task) {}
        /**
         * Resets framework singletons
         */
        protected function shutdown() {}
    }

}

namespace TYPO3\CMS\Extbase\Annotation {
    /**
     * @Annotation
     * @Target({"PROPERTY"})
     */
    class Inject {}

    /**
     * @Annotation
     * @Target({"METHOD"})
     */
    class IgnoreValidation {
        /**
         * @var string
         */
        public $argumentName;

        public function __construct(array $values) {}
    }

}

namespace TYPO3\CMS\Extbase\Annotation\ORM {
    /**
     * @Annotation
     * @Target({"PROPERTY"})
     */
    class Transient {}

    /**
     * @Annotation
     * @Target({"PROPERTY"})
     */
    class Cascade {
        /**
         * @Enum({"remove"})
         *
         * Currently, Extbase does only support "remove".
         *
         * Other possible cascade operations would be: "persist", "merge", "detach", "refresh", "all"
         * @see http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/working-with-associations.html#transitive-persistence-cascade-operations
         */
        public $value;

        public function __construct(array $values) {}
    }

    /**
     * @Annotation
     * @Target({"PROPERTY"})
     */
    class Lazy {}

}

namespace TYPO3\CMS\Extbase\Object\Container {
    /**
     * Internal TYPO3 Dependency Injection container
     */
    class Container implements \typo3\cms\core\singletoninterface {
        const SCOPE_SINGLETON = 2;
        const SCOPE_PROTOTYPE = 1;

        /**
         * registered alternative implementations of a class
         * e.g. used to know the class for an AbstractClass or a Dependency
         *
         * @var array
         */
        private $alternativeImplementation;
        /**
         * @var \Doctrine\Instantiator\InstantiatorInterface
         */
        protected $instantiator;
        /**
         * holds references of singletons
         *
         * @var array
         */
        private $singletonInstances;
        /**
         * Array of prototype objects currently being built, to prevent recursion.
         *
         * @var array
         */
        private $prototypeObjectsWhichAreCurrentlyInstanciated;
        /**
         * @var ReflectionService
         */
        private $reflectionService;

        /**
         * Constructor is protected since container should
         * be a singleton.
         *
         * @see getContainer()
         */
        public function __construct() {}
        /**
         * Internal method to create the class instantiator, extracted to be mockable
         *
         * @return \Doctrine\Instantiator\InstantiatorInterface
         */
        protected function getInstantiator() {}
        public function getInstance($className, $givenConstructorArguments = [ ]) {}
        public function getEmptyObject($className) {}
        protected function getInstanceInternal($className, $givenConstructorArguments = [ ]) {}
        protected function instanciateObject(ClassSchema $classSchema, array $givenConstructorArguments) {}
        protected function injectDependencies($instance, ClassSchema $classSchema) {}
        protected function initializeObject($instance) {}
        public function registerImplementation($className, $alternativeClassName) {}
        private function getConstructorArguments($className, ClassSchema $classSchema, array $givenConstructorArguments) {}
        public function getImplementationClassName($className) {}
        public function isSingleton($className) {}
        public function isPrototype($className) {}
        /**
         * @return LoggerInterface
         */
        protected function getLogger() {}
    }

}

namespace TYPO3\CMS\Extbase\Persistence {
    /**
     * The storage for objects. It ensures the uniqueness of an object in the storage. It's a remake of the
     * SplObjectStorage introduced in PHP 5.3.
     *
     * Opposed to the SplObjectStorage the ObjectStorage does not implement the Serializable interface.
     */
    class ObjectStorage implements \iterator, \countable, \typo3\cms\extbase\persistence\objectmonitoringinterface, \arrayaccess {
        /**
         * This field is only needed to make debugging easier:
         * If you call current() on a class that implements Iterator, PHP will return the first field of the object
         * instead of calling the current() method of the interface.
         * We use this unusual behavior of PHP to return the warning below in this case.
         *
         * @var string
         */
        private $warning;
        /**
         * An array holding the objects and the stored information. The key of the array items ist the
         * spl_object_hash of the given object.
         *
         * array(
         * spl_object_hash =>
         * array(
         * 'obj' => $object,
         * 'inf' => $information
         * )
         * )
         *
         * @var array
         */
        protected $storage;
        /**
         * A flag indication if the object storage was modified after reconstitution (eg. by adding a new object)
         *
         * @var bool
         */
        protected $isModified;
        /**
         * An array holding the internal position the object was added.
         * The object entry is unsetted when the object gets removed from the objectstorage
         *
         * @var array
         */
        protected $addedObjectsPositions;
        /**
         * An array holding the internal position the object was added before, when it would
         * be removed from the objectstorage
         *
         * @var array
         */
        protected $removedObjectsPositions;
        /**
         * An internal var holding the count of added objects to be stored as position.
         * It would be resetted, when all objects will be removed from the objectstorage
         *
         * @var int
         */
        protected $positionCounter;

        /**
         * Rewinds the iterator to the first storage element.
         */
        public function rewind() {}
        /**
         * Checks if the array pointer of the storage points to a valid position.
         *
         * @return bool
         */
        public function valid() {}
        /**
         * Returns the index at which the iterator currently is.
         *
         * This is different from the SplObjectStorage as the key in this implementation is the object hash (string).
         *
         * @return string The index corresponding to the position of the iterator.
         */
        public function key() {}
        /**
         * Returns the current storage entry.
         *
         * @return object The object at the current iterator position.
         */
        public function current() {}
        /**
         * Moves to the next entry.
         */
        public function next() {}
        /**
         * Returns the number of objects in the storage.
         *
         * @return int The number of objects in the storage.
         */
        public function count() {}
        public function offsetSet($object, $information) {}
        public function offsetExists($object) {}
        public function offsetUnset($object) {}
        public function offsetGet($object) {}
        public function contains($object) {}
        public function attach($object, $information = null) {}
        public function detach($object) {}
        /**
         * Returns the data, or info, associated with the object pointed by the current iterator position.
         *
         * @return mixed The data associated with the current iterator position.
         */
        public function getInfo() {}
        public function setInfo($data) {}
        public function addAll(ObjectStorage $objectStorage) {}
        public function removeAll(ObjectStorage $objectStorage) {}
        /**
         * Returns this object storage as an array
         *
         * @return array The object storage
         */
        public function toArray() {}
        /**
         * Alias of toArray which allows that method to be used from contexts which support
         * for example dotted paths, e.g. ObjectAccess::getPropertyPath($object, 'children.array.123')
         * to get exactly the 123rd item in the "children" property which is an ObjectStorage.
         *
         * @return array
         */
        public function getArray() {}
        /**
         * Dummy method to avoid serialization.
         *
         * @throws \RuntimeException
         */
        public function serialize() {}
        public function unserialize($serialized) {}
        /**
         * Register the storage's clean state, e.g. after it has been reconstituted from the database.
         */
        public function _memorizeCleanState() {}
        /**
         * Returns TRUE if the storage was modified after reconstitution.
         *
         * @return bool
         */
        public function _isDirty() {}
        public function isRelationDirty($object) {}
        public function getPosition($object) {}
    }

    /**
     * A generic Persistence exception
     */
    class Exception extends \typo3\cms\extbase\exception {}

    /**
     * The base repository - will usually be extended by a more concrete repository.
     *
     * @api
     */
    class Repository implements \typo3\cms\core\singletoninterface, \typo3\cms\extbase\persistence\repositoryinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var string
         */
        protected $objectType;
        /**
         * @var array
         */
        protected $defaultOrderings;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface
         */
        protected $defaultQuerySettings;

        public function injectPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) {}
        public function __construct(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function add($object) {}
        public function remove($object) {}
        public function update($modifiedObject) {}
        /**
         * Returns all objects of this repository.
         *
         * @return QueryResultInterface|array
         * @api
         */
        public function findAll() {}
        /**
         * Returns the total number objects of this repository.
         *
         * @return int The object count
         * @api
         */
        public function countAll() {}
        /**
         * Removes all objects of this repository as if remove() was called for
         * all of them.
         *
         * @api
         */
        public function removeAll() {}
        public function findByUid($uid) {}
        public function findByIdentifier($identifier) {}
        public function setDefaultOrderings(array $defaultOrderings) {}
        public function setDefaultQuerySettings(\TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface $defaultQuerySettings) {}
        /**
         * Returns a query for objects of this repository
         *
         * @return \TYPO3\CMS\Extbase\Persistence\QueryInterface
         * @api
         */
        public function createQuery() {}
        public function __call($methodName, $arguments) {}
        /**
         * Returns the class name of this class.
         *
         * @return string Class name of the repository.
         */
        protected function getRepositoryClassName() {}
    }


    /**
     * Contract for a repository
     *
     * @api
     */
    interface RepositoryInterface {
        function add($object) ;
        function remove($object) ;
        function update($modifiedObject) ;
        /**
         * Returns all objects of this repository.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\QueryResultInterface|array The query result
         * @api
         */
        function findAll() ;
        /**
         * Returns the total number objects of this repository.
         *
         * @return int The object count
         * @api
         */
        function countAll() ;
        /**
         * Removes all objects of this repository as if remove() was called for
         * all of them.
         *
         * @api
         */
        function removeAll() ;
        function findByUid($uid) ;
        function findByIdentifier($identifier) ;
        function setDefaultOrderings(array $defaultOrderings) ;
        function setDefaultQuerySettings(\TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface $defaultQuerySettings) ;
        /**
         * Returns a query for objects of this repository
         *
         * @return \TYPO3\CMS\Extbase\Persistence\QueryInterface
         * @api
         */
        function createQuery() ;
    }

    /**
     * The Extbase Persistence Manager interface
     */
    interface PersistenceManagerInterface {
        /**
         * Commits new objects and changes to objects in the current persistence
         * session into the backend
         *
         * @api
         */
        function persistAll() ;
        /**
         * Clears the in-memory state of the persistence.
         *
         * Managed instances become detached, any fetches will
         * return data directly from the persistence "backend".
         */
        function clearState() ;
        function isNewObject($object) ;
        function getIdentifierByObject($object) ;
        function getObjectByIdentifier($identifier, $objectType = null, $useLazyLoading = false) ;
        function getObjectCountByQuery(QueryInterface $query) ;
        function getObjectDataByQuery(QueryInterface $query) ;
        function registerRepositoryClassName($className) ;
        function add($object) ;
        function remove($object) ;
        function update($object) ;
        function injectSettings(array $settings) ;
        function convertObjectToIdentityArray($object) ;
        function convertObjectsToIdentityArrays(array $array) ;
        function createQueryForType($type) ;
    }

    /**
     * An interface how to monitor changes on an object and its properties. All domain objects which should be persisted need to implement the below interface.
     *
     * @see \TYPO3\CMS\Extbase\DomainObject\AbstractEntity
     * @see \TYPO3\CMS\Extbase\DomainObject\AbstractValueObject
     */
    interface ObjectMonitoringInterface {
        /**
         * Register an object's clean state, e.g. after it has been reconstituted
         * from the database
         */
        function _memorizeCleanState() ;
        /**
         * Returns TRUE if the properties were modified after reconstitution
         *
         * @return bool
         */
        function _isDirty() ;
    }

    /**
     * A lazy result list that is returned by Query::execute()
     */
    interface QueryResultInterface extends \countable {
        /**
         * Returns a clone of the query object
         *
         * @return \TYPO3\CMS\Extbase\Persistence\QueryInterface
         * @api
         */
        function getQuery() ;
        /**
         * Returns the first object in the result set
         *
         * @return object
         * @api
         */
        function getFirst() ;
        /**
         * Returns an array with the objects in the result set
         *
         * @return array
         * @api
         */
        function toArray() ;
    }

    /**
     * A persistence query interface
     *
     * @api
     */
    interface QueryInterface {
    const OPERATOR_LESS_THAN = 3;
    const OPERATOR_GREATER_THAN = 5;
    const OPERATOR_LESS_THAN_OR_EQUAL_TO = 4;
    const OPERATOR_LIKE = 7;
    const OPERATOR_GREATER_THAN_OR_EQUAL_TO = 6;
    const OPERATOR_CONTAINS = 8;
    const OPERATOR_IS_NULL = 10;
    const OPERATOR_IN = 9;
    const OPERATOR_IS_EMPTY = 11;
    const ORDER_DESCENDING = 'DESC';
    const ORDER_ASCENDING = 'ASC';
    const OPERATOR_EQUAL_TO = 1;
    const OPERATOR_EQUAL_TO_NULL = 101;
    const OPERATOR_NOT_EQUAL_TO = 2;
    const OPERATOR_NOT_EQUAL_TO_NULL = 202;
        /**
         * Gets the node-tuple source for this query.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\SourceInterface the node-tuple source; non-NULL
         * @deprecated since Extbase 6.0, will be removed in Extbase 7.0. It is deprecated only in the interface to be more
         * in sync with Flow in future and will stay in Generic Persistence.
         */
        function getSource() ;
        function execute($returnRawQueryResult = false) ;
        function setOrderings(array $orderings) ;
        function setLimit($limit) ;
        function setOffset($offset) ;
        function matching($constraint) ;
        function logicalAnd($constraint1) ;
        function logicalOr($constraint1) ;
        function logicalNot(ConstraintInterface $constraint) ;
        function equals($propertyName, $operand, $caseSensitive = true) ;
        function like($propertyName, $operand) ;
        function contains($propertyName, $operand) ;
        function in($propertyName, $operand) ;
        function lessThan($propertyName, $operand) ;
        function lessThanOrEqual($propertyName, $operand) ;
        function greaterThan($propertyName, $operand) ;
        function greaterThanOrEqual($propertyName, $operand) ;
        /**
         * Returns the type this query cares for.
         *
         * @return string
         * @api
         */
        function getType() ;
        function setQuerySettings(Generic\QuerySettingsInterface $querySettings) ;
        /**
         * Returns the Query Settings.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface $querySettings The Query Settings
         * @todo decide whether this can be deprecated eventually
         * @api This method is not part of  TYPO3Flow API
         */
        function getQuerySettings() ;
        /**
         * Returns the query result count.
         *
         * @return int The query result count
         * @api
         */
        function count() ;
        /**
         * Gets the property names to order the result by, like this:
         * array(
         *  'foo' => \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_ASCENDING,
         *  'bar' => \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_DESCENDING
         * )
         *
         * @return array
         * @api
         */
        function getOrderings() ;
        /**
         * Returns the maximum size of the result set to limit.
         *
         * @return int
         * @api
         */
        function getLimit() ;
        /**
         * Returns the start offset of the result set.
         *
         * @return int
         * @api
         */
        function getOffset() ;
        /**
         * Gets the constraint for this query.
         *
         * @return ConstraintInterface|null the constraint, or null if none
         * @api
         */
        function getConstraint() ;
        function isEmpty($propertyName) ;
        function setSource(Generic\Qom\SourceInterface $source) ;
        /**
         * Returns the statement of this query.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\Statement
         */
        function getStatement() ;
    }

}

namespace TYPO3\CMS\Extbase\Persistence\Generic {
    /**
     * Query settings. This class is NOT part of the TYPO3.Flow API.
     * It reflects the settings unique to TYPO3 CMS.
     *
     * @api
     */
    class Typo3QuerySettings implements \typo3\cms\extbase\persistence\generic\querysettingsinterface {
        /**
         * Flag if the storage page should be respected for the query.
         *
         * @var bool
         */
        protected $respectStoragePage;
        /**
         * the pid(s) of the storage page(s) that should be respected for the query.
         *
         * @var array
         */
        protected $storagePageIds;
        /**
         * A flag indicating whether all or some enable fields should be ignored. If TRUE, all enable fields are ignored.
         * If--in addition to this--enableFieldsToBeIgnored is set, only fields specified there are ignored. If FALSE, all
         * enable fields are taken into account, regardless of the enableFieldsToBeIgnored setting.
         *
         * @var bool
         */
        protected $ignoreEnableFields;
        /**
         * An array of column names in the enable columns array (array keys in $GLOBALS['TCA'][$table]['ctrl']['enablecolumns']),
         * to be ignored while building the query statement
         *
         * @var array
         */
        protected $enableFieldsToBeIgnored;
        /**
         * Flag whether deleted records should be included in the result set.
         *
         * @var bool
         */
        protected $includeDeleted;
        /**
         * Flag if the sys_language_uid should be respected (default is TRUE).
         *
         * @var bool
         */
        protected $respectSysLanguage;
        /**
         * Representing sys_language_overlay only valid for current context
         *
         * @var mixed
         */
        protected $languageOverlayMode;
        /**
         * Representing sys_language_mode only valid for current context
         *
         * @var string
         */
        protected $languageMode;
        /**
         * Represensting sys_language_uid only valid for current context
         *
         * @var int
         */
        protected $languageUid;

        /** @var $configurationManager ConfigurationManagerInterface */
        public function initializeObject() {}
        public function setRespectStoragePage($respectStoragePage) {}
        /**
         * Returns the state, if the storage page should be respected for the query.
         *
         * @return bool TRUE, if the storage page should be respected; otherwise FALSE.
         */
        public function getRespectStoragePage() {}
        public function setStoragePageIds(array $storagePageIds) {}
        /**
         * Returns the pid(s) of the storage page(s) that should be respected for the query.
         *
         * @return array list of integers that each represent a storage page id
         */
        public function getStoragePageIds() {}
        public function setRespectSysLanguage($respectSysLanguage) {}
        /**
         * @return bool TRUE if TYPO3 language settings are to be applied
         */
        public function getRespectSysLanguage() {}
        public function setLanguageOverlayMode($languageOverlayMode = false) {}
        /**
         * @return mixed TRUE, FALSE or "hideNonTranslated"
         */
        public function getLanguageOverlayMode() {}
        public function setLanguageMode($languageMode = '') {}
        /**
         * @return string NULL, "content_fallback", "strict" or "ignore"
         */
        public function getLanguageMode() {}
        public function setLanguageUid($languageUid) {}
        /**
         * @return int
         */
        public function getLanguageUid() {}
        public function setIgnoreEnableFields($ignoreEnableFields) {}
        /**
         * The returned value indicates whether all or some enable fields should be ignored.
         *
         * If TRUE, all enable fields are ignored. If--in addition to this--enableFieldsToBeIgnored is set, only fields specified there are ignored.
         * If FALSE, all enable fields are taken into account, regardless of the enableFieldsToBeIgnored setting.
         *
         * @return bool
         * @see getEnableFieldsToBeIgnored()
         */
        public function getIgnoreEnableFields() {}
        public function setEnableFieldsToBeIgnored($enableFieldsToBeIgnored) {}
        /**
         * An array of column names in the enable columns array (array keys in $GLOBALS['TCA'][$table]['ctrl']['enablecolumns']),
         * to be ignored while building the query statement.
         *
         * @return array
         * @see getIgnoreEnableFields()
         */
        public function getEnableFieldsToBeIgnored() {}
        public function setIncludeDeleted($includeDeleted) {}
        /**
         * Returns if the query should return objects that are deleted.
         *
         * @return bool
         */
        public function getIncludeDeleted() {}
    }

    /**
     * A lazy result list that is returned by Query::execute()
     *
     * @api
     */
    class QueryResult implements \typo3\cms\extbase\persistence\queryresultinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;
        /**
         * @var int|null
         */
        protected $numberOfResults;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\QueryInterface
         */
        protected $query;
        /**
         * @var array
         */
        protected $queryResult;

        public function injectDataMapper(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper $dataMapper) {}
        public function injectPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) {}
        public function __construct(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query) {}
        /**
         * Loads the objects this QueryResult is supposed to hold
         */
        protected function initialize() {}
        /**
         * Returns a clone of the query object
         *
         * @return \TYPO3\CMS\Extbase\Persistence\QueryInterface
         * @api
         */
        public function getQuery() {}
        /**
         * Returns the first object in the result set
         *
         * @return object
         * @api
         */
        public function getFirst() {}
        /**
         * Returns the number of objects in the result
         *
         * @return int The number of matching objects
         * @api
         */
        public function count() {}
        /**
         * Returns an array with the objects in the result set
         *
         * @return array
         * @api
         */
        public function toArray() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
        /**
         * @return mixed
         * @see Iterator::current()
         */
        public function current() {}
        /**
         * @return mixed
         * @see Iterator::key()
         */
        public function key() {}
        /**
         * @see Iterator::next()
         */
        public function next() {}
        /**
         * @see Iterator::rewind()
         */
        public function rewind() {}
        /**
         * @return bool
         * @see Iterator::valid()
         */
        public function valid() {}
        /**
         * Ensures that the objectManager, persistenceManager and dataMapper are back when loading the QueryResult
         * from the cache
         */
        public function __wakeup() {}
        /**
         * @return array
         */
        public function __sleep() {}
    }

    /**
     * A proxy that can replace any object and replaces itself in it's parent on
     * first access (call, get, set, isset, unset).
     */
    class LazyLoadingProxy implements \iterator, \typo3\cms\extbase\persistence\generic\loadingstrategyinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;
        /**
         * The object this property is contained in.
         *
         * @var DomainObjectInterface
         */
        private $parentObject;
        /**
         * The name of the property represented by this proxy.
         *
         * @var string
         */
        private $propertyName;
        /**
         * The raw field value.
         *
         * @var mixed
         */
        private $fieldValue;

        public function injectDataMapper(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper $dataMapper) {}
        public function __construct($parentObject, $propertyName, $fieldValue) {}
        /**
         * Populate this proxy by asking the $population closure.
         *
         * @return object The instance (hopefully) returned
         */
        public function _loadRealInstance() {}
        /**
         * @return string
         */
        public function _getTypeAndUidString() {}
        public function __call($methodName, $arguments) {}
        public function __get($propertyName) {}
        public function __set($propertyName, $value) {}
        public function __isset($propertyName) {}
        public function __unset($propertyName) {}
        /**
         * Magic toString call implementation.
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Returns the current value of the storage array
         *
         * @return mixed
         */
        public function current() {}
        /**
         * Returns the current key storage array
         *
         * @return int
         */
        public function key() {}
        /**
         * Returns the next position of the storage array
         */
        public function next() {}
        /**
         * Resets the array pointer of the storage
         */
        public function rewind() {}
        /**
         * Checks if the array pointer of the storage points to a valid position
         *
         * @return bool
         */
        public function valid() {}
    }

    /**
     * The Extbase Persistence Manager
     *
     * @api
     */
    class PersistenceManager implements \typo3\cms\core\singletoninterface, \typo3\cms\extbase\persistence\persistencemanagerinterface {
        /**
         * @var array
         */
        protected $newObjects;
        /**
         * @var ObjectStorage
         */
        protected $changedObjects;
        /**
         * @var ObjectStorage
         */
        protected $addedObjects;
        /**
         * @var ObjectStorage
         */
        protected $removedObjects;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QueryFactoryInterface
         */
        protected $queryFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\BackendInterface
         */
        protected $backend;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Session
         */
        protected $persistenceSession;

        public function injectQueryFactory(\TYPO3\CMS\Extbase\Persistence\Generic\QueryFactoryInterface $queryFactory) {}
        public function injectBackend(\TYPO3\CMS\Extbase\Persistence\Generic\BackendInterface $backend) {}
        public function injectPersistenceSession(\TYPO3\CMS\Extbase\Persistence\Generic\Session $persistenceSession) {}
        /**
         * Create new instance
         */
        public function __construct() {}
        public function registerRepositoryClassName($className) {}
        public function getObjectCountByQuery(QueryInterface $query) {}
        public function getObjectDataByQuery(QueryInterface $query) {}
        public function getIdentifierByObject($object) {}
        public function getObjectByIdentifier($identifier, $objectType = null, $useLazyLoading = false) {}
        /**
         * Commits new objects and changes to objects in the current persistence
         * session into the backend
         *
         * @api
         */
        public function persistAll() {}
        public function createQueryForType($type) {}
        public function add($object) {}
        public function remove($object) {}
        public function update($object) {}
        public function injectSettings(array $settings) {}
        /**
         * Initializes the persistence manager, called by Extbase.
         */
        public function initializeObject() {}
        /**
         * Clears the in-memory state of the persistence.
         *
         * Managed instances become detached, any fetches will
         * return data directly from the persistence "backend".
         *
         * @throws \TYPO3\CMS\Extbase\Persistence\Generic\Exception\NotImplementedException
         */
        public function clearState() {}
        public function isNewObject($object) {}
        public function registerNewObject($object) {}
        public function convertObjectToIdentityArray($object) {}
        public function convertObjectsToIdentityArrays(array $array) {}
        /**
         * Tear down the persistence
         *
         * This method is called in functional tests to reset the storage between tests.
         * The implementation is optional and depends on the underlying persistence backend.
         */
        public function tearDown() {}
    }

    /**
     * The property types supported by the JCR standard.
     *
     * The STRING property type is used to store strings.
     * BINARY properties are used to store binary data.
     * The LONG property type is used to store integers.
     * The DECIMAL property type is used to store precise decimal numbers.
     * The DOUBLE property type is used to store floating point numbers.
     * The DATE property type is used to store time and date information. See 4.2.6.1 Date in the specification.
     * The BOOLEAN property type is used to store boolean values.
     * A NAME is a pairing of a namespace and a local name. When read, the namespace is mapped to the current prefix. See 4.2.6.2 Name in the specification.
     * A PATH property is an ordered list of path elements. A path element is a NAME with an optional index. When read, the NAMEs within the path are mapped to their current prefix. A path may be absolute or relative. See 4.2.6.3 Path in the specification.
     * A REFERENCE property stores the identifier of a referenceable node (one having type mix:referenceable), which must exist within the same workspace or session as the REFERENCE property. A REFERENCE property enforces this referential integrity by preventing (in level 2 implementations) the removal of its target node. See 4.2.6.4 Reference in the specification.
     * A WEAKREFERENCE property stores the identifier of a referenceable node (one having type mix:referenceable). A WEAKREFERENCE property does not enforce referential integrity. See 4.2.6.5 Weak Reference in the specification.
     * A URI property is identical to STRING property except that it only accepts values that conform to the syntax of a URI-reference as defined in RFC 3986. See also 4.2.6.6 URI in the specification.
     * UNDEFINED can be used within a property definition (see 4.7.5 Property Definitions) to specify that the property in question may be of any type. However, it cannot be the actual type of any property instance. For example it will never be returned by Property.getType() and (in level 2 implementations) it cannot be assigned as the type when creating a new property.
     */
    class PropertyType {
        const BOOLEAN = 6;
        const DATE = 5;
        const DOUBLE = 4;
        const WEAKREFERENCE = 10;
        const REFERENCE = 9;
        const PATH = 8;
        const NAME = 7;
        const UNDEFINED = 0;
        const LONG = 3;
        const BINARY = 2;
        const STRING = 1;
        const TYPENAME_LONG = 'Long';
        const TYPENAME_DOUBLE = 'Double';
        const TYPENAME_DATE = 'Date';
        const TYPENAME_BOOLEAN = 'Boolean';
        const TYPENAME_NAME = 'Name';
        const TYPENAME_PATH = 'Path';
        const URI = 11;
        const DECIMAL = 12;
        const INTEGER = 13;
        const TYPENAME_UNDEFINED = 'undefined';
        const TYPENAME_STRING = 'String';
        const TYPENAME_BINARY = 'Binary';
        const TYPENAME_WEAKREFERENCE = 'WeakReference';
        const TYPENAME_REFERENCE = 'Reference';
        const TYPENAME_DECIMAL = 'Decimal';
        const TYPENAME_URI = 'URI';
        const TYPENAME_INTEGER = 'Integer';

        /**
         * Make instantiation impossible...
         */
        private function __construct() {}
        public static function nameFromValue($type) {}
        public static function valueFromName($name) {}
        public static function valueFromType($type) {}
    }

    /**
     * The persistence session - acts as a Unit of Work for Extbase persistence framework.
     */
    class Session implements \typo3\cms\core\singletoninterface {
        /**
         * Reconstituted objects
         *
         * @var ObjectStorage
         */
        protected $reconstitutedEntities;
        /**
         * Reconstituted entity data (effectively their clean state)
         * Currently unused in Extbase
         * @todo make use of it in Extbase
         *
         * @var array
         */
        protected $reconstitutedEntitiesData;
        /**
         * @var ObjectStorage
         */
        protected $objectMap;
        /**
         * @var array
         */
        protected $identifierMap;

        /**
         * Constructs a new Session
         */
        public function __construct() {}
        public function registerReconstitutedEntity($entity, array $entityData = [ ]) {}
        public function replaceReconstitutedEntity($oldEntity, $newEntity) {}
        public function unregisterReconstitutedEntity($entity) {}
        /**
         * Returns all objects which have been registered as reconstituted
         *
         * @return ObjectStorage All reconstituted objects
         */
        public function getReconstitutedEntities() {}
        public function isReconstitutedEntity($entity) {}
        public function hasObject($object) {}
        public function hasIdentifier($identifier, $className) {}
        public function getObjectByIdentifier($identifier, $className) {}
        public function getIdentifierByObject($object) {}
        public function registerObject($object, $identifier) {}
        public function unregisterObject($object) {}
        /**
         * Destroy the state of the persistence session and reset
         * all internal data.
         */
        public function destroy() {}
    }

    /**
     * A proxy that can replace any object and replaces itself in it's parent on
     * first access (call, get, set, isset, unset).
     */
    class LazyObjectStorage extends \typo3\cms\extbase\persistence\objectstorage implements \typo3\cms\extbase\persistence\generic\loadingstrategyinterface {
        /**
         * This field is only needed to make debugging easier:
         * If you call current() on a class that implements Iterator, PHP will return the first field of the object
         * instead of calling the current() method of the interface.
         * We use this unusual behavior of PHP to return the warning below in this case.
         *
         * @var string
         */
        private $warning;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;
        /**
         * The object this property is contained in.
         *
         * @var \TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface
         */
        protected $parentObject;
        /**
         * The name of the property represented by this proxy.
         *
         * @var string
         */
        protected $propertyName;
        /**
         * The raw field value.
         *
         * @var mixed
         */
        protected $fieldValue;
        /**
         * @var bool
         */
        protected $isInitialized;

        public function injectDataMapper(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper $dataMapper) {}
        /**
         * Returns the state of the initialization
         *
         * @return bool
         */
        public function isInitialized() {}
        public function __construct($parentObject, $propertyName, $fieldValue) {}
        /**
         * This is a function lazy load implementation.
         */
        protected function initialize() {}
        /**
         * @return bool
         */
        protected function isStorageAlreadyMemorizedInParentCleanState() {}
        public function addAll(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $storage) {}
        public function attach($object, $data = null) {}
        public function contains($object) {}
        /**
         * Counts the elements in the storage array
         *
         * @throws Exception
         * @return int The number of elements in the ObjectStorage
         */
        public function count() {}
        /**
         * @return object The object at the current iterator position.
         *
         * @see \TYPO3\CMS\Extbase\Persistence\ObjectStorage::current
         */
        public function current() {}
        public function detach($object) {}
        /**
         * @return string The index corresponding to the position of the iterator.
         *
         * @see \TYPO3\CMS\Extbase\Persistence\ObjectStorage::key
         */
        public function key() {}
        /**
         * @see \TYPO3\CMS\Extbase\Persistence\ObjectStorage::next
         */
        public function next() {}
        public function offsetExists($object) {}
        public function offsetGet($object) {}
        public function offsetSet($object, $info) {}
        public function offsetUnset($object) {}
        public function removeAll(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $storage) {}
        /**
         * @see \TYPO3\CMS\Extbase\Persistence\ObjectStorage::rewind
         */
        public function rewind() {}
        /**
         * @return bool
         *
         * @see \TYPO3\CMS\Extbase\Persistence\ObjectStorage::valid
         */
        public function valid() {}
        /**
         * @return array
         *
         * @see \TYPO3\CMS\Extbase\Persistence\ObjectStorage::toArray
         */
        public function toArray() {}
        public function getPosition($object) {}
    }

    /**
     * The QueryFactory used to create queries against the storage backend
     */
    class QueryFactory implements \typo3\cms\extbase\persistence\generic\queryfactoryinterface, \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function injectDataMapper(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper $dataMapper) {}
        public function create($className) {}
    }

    /**
     * The Query class used to run queries against the database
     *
     * @api
     */
    class Query implements \typo3\cms\extbase\persistence\queryinterface {
        const JCR_JOIN_TYPE_LEFT_OUTER = '{http://www.jcp.org/jcr/1.0}joinTypeLeftOuter';
        const JCR_JOIN_TYPE_INNER = '{http://www.jcp.org/jcr/1.0}joinTypeInner';
        const CHARSET = 'utf-8';
        const JCR_JOIN_TYPE_RIGHT_OUTER = '{http://www.jcp.org/jcr/1.0}joinTypeRightOuter';

        /**
         * @var string
         */
        protected $type;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory
         */
        protected $qomFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Qom\SourceInterface
         */
        protected $source;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Qom\ConstraintInterface
         */
        protected $constraint;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Qom\Statement
         */
        protected $statement;
        /**
         * @var int
         */
        protected $orderings;
        /**
         * @var int
         */
        protected $limit;
        /**
         * @var int
         */
        protected $offset;
        /**
         * The query settings.
         *
         * @var QuerySettingsInterface
         */
        protected $querySettings;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectDataMapper(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper $dataMapper) {}
        public function injectPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) {}
        public function injectQomFactory(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory $qomFactory) {}
        public function __construct($type) {}
        public function setQuerySettings(QuerySettingsInterface $querySettings) {}
        /**
         * Returns the Query Settings.
         *
         * @throws Exception
         * @return QuerySettingsInterface $querySettings The Query Settings
         * @api This method is not part of TYPO3.Flow API
         */
        public function getQuerySettings() {}
        /**
         * Returns the type this query cares for.
         *
         * @return string
         * @api
         */
        public function getType() {}
        public function setSource(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\SourceInterface $source) {}
        /**
         * Returns the selectorn name or an empty string, if the source is not a selector
         * @todo This has to be checked at another place
         *
         * @return string The selector name
         */
        protected function getSelectorName() {}
        /**
         * Gets the node-tuple source for this query.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\SourceInterface the node-tuple source; non-null
         */
        public function getSource() {}
        public function execute($returnRawQueryResult = false) {}
        public function setOrderings(array $orderings) {}
        /**
         * Returns the property names to order the result by. Like this:
         * array(
         * 'foo' => \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_ASCENDING,
         * 'bar' => \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_DESCENDING
         * )
         *
         * @return array
         * @api
         */
        public function getOrderings() {}
        public function setLimit($limit) {}
        /**
         * Resets a previously set maximum size of the result set. Returns $this to allow
         * for chaining (fluid interface)
         *
         * @return QueryInterface
         * @api
         */
        public function unsetLimit() {}
        /**
         * Returns the maximum size of the result set to limit.
         *
         * @return int
         * @api
         */
        public function getLimit() {}
        public function setOffset($offset) {}
        /**
         * Returns the start offset of the result set.
         *
         * @return int
         * @api
         */
        public function getOffset() {}
        public function matching($constraint) {}
        public function statement($statement, array $parameters = [ ]) {}
        /**
         * Returns the statement of this query.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\Statement
         */
        public function getStatement() {}
        /**
         * Gets the constraint for this query.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\ConstraintInterface|null the constraint, or null if none
         * @api
         */
        public function getConstraint() {}
        public function logicalAnd($constraint1) {}
        public function logicalOr($constraint1) {}
        public function logicalNot(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\ConstraintInterface $constraint) {}
        public function equals($propertyName, $operand, $caseSensitive = true) {}
        public function like($propertyName, $operand) {}
        public function contains($propertyName, $operand) {}
        public function in($propertyName, $operand) {}
        public function lessThan($propertyName, $operand) {}
        public function lessThanOrEqual($propertyName, $operand) {}
        public function greaterThan($propertyName, $operand) {}
        public function greaterThanOrEqual($propertyName, $operand) {}
        public function between($propertyName, $operandLower, $operandUpper) {}
        /**
         */
        public function __wakeup() {}
        /**
         * @return array
         */
        public function __sleep() {}
        /**
         * Returns the query result count.
         *
         * @return int The query result count
         * @api
         */
        public function count() {}
        public function isEmpty($propertyName) {}
    }

    /**
     * A persistence backend. This backend maps objects to the relational model of the storage backend.
     * It persists all added, removed and changed objects.
     */
    class Backend implements \typo3\cms\extbase\persistence\generic\backendinterface, \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Session
         */
        protected $session;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        protected $aggregateRootObjects;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        protected $deletedEntities;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        protected $changedEntities;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        protected $visitedDuringPersistence;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory
         */
        protected $qomFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Storage\BackendInterface
         */
        protected $storageBackend;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;
        /**
         * The TYPO3 reference index object
         *
         * @var \TYPO3\CMS\Core\Database\ReferenceIndex
         */
        protected $referenceIndex;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;

        public function injectSession(\TYPO3\CMS\Extbase\Persistence\Generic\Session $session) {}
        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
        public function injectQomFactory(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory $qomFactory) {}
        public function injectStorageBackend(\TYPO3\CMS\Extbase\Persistence\Generic\Storage\BackendInterface $storageBackend) {}
        public function injectDataMapper(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper $dataMapper) {}
        public function injectSignalSlotDispatcher(\TYPO3\CMS\Extbase\SignalSlot\Dispatcher $signalSlotDispatcher) {}
        public function __construct(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function setPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) {}
        /**
         * Returns the repository session
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Session
         */
        public function getSession() {}
        /**
         * Returns the Data Mapper
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        public function getDataMapper() {}
        /**
         * Returns the current QOM factory
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory
         */
        public function getQomFactory() {}
        /**
         * Returns the reflection service
         *
         * @return \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        public function getReflectionService() {}
        public function getObjectCountByQuery(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query) {}
        public function getObjectDataByQuery(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query) {}
        protected function emitBeforeGettingObjectDataSignal(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query) {}
        protected function emitAfterGettingObjectDataSignal(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query, array $result) {}
        public function getIdentifierByObject($object) {}
        public function getObjectByIdentifier($identifier, $className) {}
        public function isNewObject($object) {}
        public function setAggregateRootObjects(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $objects) {}
        public function setChangedEntities(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $entities) {}
        public function setDeletedEntities(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $entities) {}
        /**
         * Commits the current persistence session.
         */
        public function commit() {}
        /** @var DomainObjectInterface $object */
        protected function persistObjects() {}
        protected function persistObject(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object) {}
        protected function propertyValueIsLazyLoaded($propertyValue) {}
/** @var DomainObjectInterface $object */
        protected function persistObjectStorage(/** @var DomainObjectInterface $object */
\TYPO3\CMS\Extbase\Persistence\ObjectStorage $objectStorage, /** @var DomainObjectInterface $object */
\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject, /** @var DomainObjectInterface $object */
$propertyName, /** @var DomainObjectInterface $object */
array $row) {}
        protected function getRemovedChildObjects(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, $propertyName) {}
        protected function attachObjectToParentObject(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, \TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject, $parentPropertyName, $sortingPosition = 0) {}
        protected function updateRelationOfObjectToParentObject(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, \TYPO3\CMS\Extbase\DomainObject\AbstractEntity $parentObject, $parentPropertyName, $sortingPosition = 0) {}
        protected function attachObjectToParentObjectRelationHasMany(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, \TYPO3\CMS\Extbase\DomainObject\AbstractEntity $parentObject, $parentPropertyName, $sortingPosition = 0) {}
        protected function detachObjectFromParentObject(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, \TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject, $parentPropertyName) {}
        protected function insertObject(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, \TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject = null, $parentPropertyName = '') {}
        protected function emitAfterInsertObjectSignal(DomainObjectInterface $object) {}
        protected function emitEndInsertObjectSignal(DomainObjectInterface $object) {}
        protected function getUidOfAlreadyPersistedValueObject(\TYPO3\CMS\Extbase\DomainObject\AbstractValueObject $object) {}
        protected function insertRelationInRelationtable(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, \TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject, $propertyName, $sortingPosition = null) {}
        protected function updateRelationInRelationTable(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, \TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject, $propertyName, $sortingPosition = 0) {}
        protected function deleteAllRelationsFromRelationtable(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject, $parentPropertyName) {}
        protected function deleteRelationFromRelationtable(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $relatedObject, \TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject, $parentPropertyName) {}
        protected function fetchMaxSortingFromParentTable(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $parentObject, $parentPropertyName) {}
        protected function updateObject(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, array $row) {}
        protected function emitAfterUpdateObjectSignal(DomainObjectInterface $object) {}
        protected function emitAfterPersistObjectSignal(DomainObjectInterface $object) {}
        protected function addCommonFieldsToRow(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, array $row) {}
        protected function addCommonDateFieldsToRow(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, array $row) {}
        /**
         * Iterate over deleted aggregate root objects and process them
         */
        protected function processDeletedObjects() {}
        protected function removeEntity(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object, $markAsDeleted = true) {}
        protected function emitAfterRemoveObjectSignal(DomainObjectInterface $object) {}
        protected function removeRelatedObjects(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object) {}
        protected function determineStoragePageIdForNewRecord(\TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface $object = null) {}
        protected function getPlainValue($input, ColumnMap $columnMap = null) {}
    }

    /**
     * A generic Persistence exception
     */
    class Exception extends \typo3\cms\extbase\persistence\exception {}


    /**
     * A query settings interface. This interface is NOT part of the TYPO3.Flow API.
     */
    interface QuerySettingsInterface {
        function setRespectStoragePage($respectStoragePage) ;
        /**
         * Returns the state, if the storage page should be respected for the query.
         *
         * @return bool TRUE, if the storage page should be respected; otherwise FALSE.
         */
        function getRespectStoragePage() ;
        function setStoragePageIds(array $storagePageIds) ;
        /**
         * Returns the pid(s) of the storage page(s) that should be respected for the query.
         *
         * @return array list of integers that each represent a storage page id
         */
        function getStoragePageIds() ;
        function setRespectSysLanguage($respectSysLanguage) ;
        /**
         * Returns the state, if a language overlay should be performed when a translation is active.
         *
         * @return bool TRUE, if a language overlay should be performed when a translation is active; otherwise FALSE.
         */
        function getRespectSysLanguage() ;
        function setLanguageOverlayMode($languageOverlayMode) ;
        /**
         * @return mixed TRUE, FALSE or "hideNonTranslated"
         */
        function getLanguageOverlayMode() ;
        function setLanguageMode($languageMode) ;
        /**
         * @return string NULL, "content_fallback", "strict" or "ignore"
         */
        function getLanguageMode() ;
        function setLanguageUid($languageUid) ;
        /**
         * @return int
         */
        function getLanguageUid() ;
        function setIgnoreEnableFields($ignoreEnableFields) ;
        /**
         * The returned value indicates whether all or some enable fields should be ignored.
         *
         * If TRUE, all enable fields are ignored. If--in addition to this--enableFieldsToBeIgnored is set, only fields specified there are ignored.
         * If FALSE, all enable fields are taken into account, regardless of the enableFieldsToBeIgnored setting.
         *
         * @return bool
         * @see getEnableFieldsToBeIgnored()
         */
        function getIgnoreEnableFields() ;
        function setEnableFieldsToBeIgnored($enableFieldsToBeIgnored) ;
        /**
         * An array of column names in the enable columns array (array keys in $GLOBALS['TCA'][$table]['ctrl']['enablecolumns']),
         * to be ignored while building the query statement.
         *
         * @return array
         * @see getIgnoreEnableFields()
         */
        function getEnableFieldsToBeIgnored() ;
        function setIncludeDeleted($includeDeleted) ;
        /**
         * Returns if the query should return objects that are deleted.
         *
         * @return bool
         */
        function getIncludeDeleted() ;
    }

    /**
     * A persistence query factory interface
     */
    interface QueryFactoryInterface {
        function create($className) ;
    }

    /**
     * An interface for the lazy loading strategies.
     */
    interface LoadingStrategyInterface {}

    /**
     * A persistence backend interface
     */
    interface BackendInterface {
        function setPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) ;
        function setAggregateRootObjects(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $objects) ;
        function setDeletedEntities(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $entities) ;
        function setChangedEntities(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $entities) ;
        /**
         * Commits the current persistence session
         */
        function commit() ;
        function getIdentifierByObject($object) ;
        function getObjectByIdentifier($identifier, $className) ;
        function isNewObject($object) ;
        function getObjectCountByQuery(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query) ;
        function getObjectDataByQuery(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query) ;
    }

}

namespace TYPO3\CMS\Extbase\Persistence\Generic\Mapper {
    /**
     * A column map to map a column configured in $TCA on a property of a domain object.
     */
    class ColumnMap {
        const RELATION_HAS_ONE = 'RELATION_HAS_ONE';
        const RELATION_NONE = 'RELATION_NONE';
        const STRATEGY_EAGER = 'eager';
        const STRATEGY_LAZY_PROXY = 'proxy';
        const STRATEGY_LAZY_STORAGE = 'storage';
        const RELATION_HAS_MANY = 'RELATION_HAS_MANY';
        const RELATION_BELONGS_TO_MANY = 'RELATION_BELONGS_TO_MANY';
        const RELATION_HAS_AND_BELONGS_TO_MANY = 'RELATION_HAS_AND_BELONGS_TO_MANY';
        const RELATION_PARENT_FOREIGN_KEY = 'RELATION_PARENT_FOREIGN_KEY';
        const RELATION_CHILD_FOREIGN_KEY = 'RELATION_CHILD_FOREIGN_KEY';
        const RELATION_PARENT_CSV = 'RELATION_PARENT_CSV';
        const RELATION_INTERMEDIATE_TABLE = 'RELATION_INTERMEDIATE_TABLE';

        /**
         * The property name corresponding to the table name
         *
         * @var string
         */
        protected $propertyName;
        /**
         * The column name
         *
         * @var string
         */
        protected $columnName;
        /**
         * The type of relation
         *
         * @var string
         */
        protected $typeOfRelation;
        /**
         * The name of the child's class
         *
         * @var string
         */
        protected $childClassName;
        /**
         * The name of the child's table
         *
         * @var string
         */
        protected $childTableName;
        /**
         * The where clause to narrow down the selected child records
         *
         * @var string
         */
        protected $childTableWhereStatement;
        /**
         * The name of the field the results from the child's table are sorted by
         *
         * @var string
         */
        protected $childSortByFieldName;
        /**
         * The name of the relation table
         *
         * @var string
         */
        protected $relationTableName;
        /**
         * The name of the column  of the relation table holding the page id
         *
         * @var string
         */
        protected $relationTablePageIdColumnName;
        /**
         * An array of field => value pairs to both insert and match against when writing/reading MM relations
         *
         * @var array
         */
        protected $relationTableMatchFields;
        /**
         * Array of field=>value pairs to insert when writing new MM relations
         *
         * @var array
         */
        protected $relationTableInsertFields;
        /**
         * The where clause to narrow down the selected relation table records
         *
         * @var string
         */
        protected $relationTableWhereStatement;
        /**
         * The name of the field holding the parents key
         *
         * @var string
         */
        protected $parentKeyFieldName;
        /**
         * The name of the field holding the name of the table of the parent's records
         *
         * @var string
         */
        protected $parentTableFieldName;
        /**
         * The name of the field holding the children key
         *
         * @var string
         */
        protected $childKeyFieldName;
        /**
         * Alternative format for storing DataTime formats
         * (instead of using unix-time stamps). Allowed values
         * are 'date', 'datetime' and 'time'
         *
         * @var string
         */
        protected $dateTimeStorageFormat;
        /**
         * @var \TYPO3\CMS\Core\DataHandling\TableColumnType
         */
        protected $type;
        /**
         * @var \TYPO3\CMS\Core\DataHandling\TableColumnSubType
         */
        protected $internalType;

        public function __construct($columnName, $propertyName) {}
        public function setTypeOfRelation($typeOfRelation) {}
        /**
         * @return string
         */
        public function getTypeOfRelation() {}
        public function setPropertyName($propertyName) {}
        /**
         * @return string
         */
        public function getPropertyName() {}
        public function setColumnName($columnName) {}
        /**
         * @return string
         */
        public function getColumnName() {}
        public function setChildTableName($childTableName) {}
        /**
         * @return string
         */
        public function getChildTableName() {}
        public function setChildTableWhereStatement($childTableWhereStatement) {}
        /**
         * @return string
         */
        public function getChildTableWhereStatement() {}
        public function setChildSortByFieldName($childSortByFieldName) {}
        /**
         * @return string
         */
        public function getChildSortByFieldName() {}
        public function setRelationTableName($relationTableName) {}
        /**
         * @return string
         */
        public function getRelationTableName() {}
        public function setRelationTablePageIdColumnName($relationTablePageIdColumnName) {}
        /**
         * @return string
         */
        public function getRelationTablePageIdColumnName() {}
        public function setRelationTableMatchFields(array $relationTableMatchFields) {}
        /**
         * @return array
         */
        public function getRelationTableMatchFields() {}
        public function setRelationTableInsertFields(array $relationTableInsertFields) {}
        /**
         * @return array
         */
        public function getRelationTableInsertFields() {}
        public function setRelationTableWhereStatement($relationTableWhereStatement) {}
        /**
         * @return string
         */
        public function getRelationTableWhereStatement() {}
        public function setParentKeyFieldName($parentKeyFieldName) {}
        /**
         * @return string
         */
        public function getParentKeyFieldName() {}
        public function setParentTableFieldName($parentTableFieldName) {}
        /**
         * @return string
         */
        public function getParentTableFieldName() {}
        public function setChildKeyFieldName($childKeyFieldName) {}
        /**
         * @return string
         */
        public function getChildKeyFieldName() {}
        public function setDateTimeStorageFormat($dateTimeStorageFormat) {}
        /**
         * @return string
         */
        public function getDateTimeStorageFormat() {}
        public function setInternalType($internalType) {}
        /**
         * @return \TYPO3\CMS\Core\DataHandling\TableColumnSubType
         */
        public function getInternalType() {}
        public function setType($type) {}
        /**
         * @return \TYPO3\CMS\Core\DataHandling\TableColumnType
         */
        public function getType() {}
    }

    /**
     * A factory for a data map to map a single table configured in $TCA on a domain object.
     */
    class DataMapFactory implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Core\Cache\CacheManager
         */
        protected $cacheManager;
        /**
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected $dataMapCache;

        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectCacheManager(\TYPO3\CMS\Core\Cache\CacheManager $cacheManager) {}
        /**
         * Lifecycle method
         */
        public function initializeObject() {}
        public function buildDataMap($className) {}
/** @var $dataMap \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMap */
        protected function buildDataMapInternal(/** @var $dataMap \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMap */
$className) {}
        protected function resolveTableName($className) {}
        protected function resolveSubclassesRecursive(array $classesConfiguration, array $subclasses) {}
        protected function getControlSection($tableName) {}
        protected function getColumnsDefinition($tableName) {}
        protected function addMetaDataColumnNames(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMap $dataMap, $tableName) {}
        protected function setType(ColumnMap $columnMap, $columnConfiguration) {}
        protected function setRelations(ColumnMap $columnMap, $columnConfiguration, $propertyMetaData) {}
        protected function setFieldEvaluations(ColumnMap $columnMap, array $columnConfiguration = null) {}
        protected function setOneToOneRelation(ColumnMap $columnMap, array $columnConfiguration = null) {}
        protected function setOneToManyRelation(ColumnMap $columnMap, array $columnConfiguration = null) {}
        protected function setManyToManyRelation(ColumnMap $columnMap, array $columnConfiguration = null) {}
        protected function createColumnMap($columnName, $propertyName) {}
    }

    /**
     * A mapper to map database tables configured in $TCA on domain objects.
     */
    class DataMapper implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory
         */
        protected $qomFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Session
         */
        protected $persistenceSession;
        /**
         * A reference to the page select object providing methods to perform language and work space overlays
         *
         * @var \TYPO3\CMS\Frontend\Page\PageRepository
         */
        protected $pageSelectObject;
        /**
         * Cached data maps
         *
         * @var array
         */
        protected $dataMaps;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory
         */
        protected $dataMapFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QueryFactoryInterface
         */
        protected $queryFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;

        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
        public function injectQomFactory(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory $qomFactory) {}
        public function injectPersistenceSession(\TYPO3\CMS\Extbase\Persistence\Generic\Session $persistenceSession) {}
        public function injectDataMapFactory(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory $dataMapFactory) {}
        public function injectQueryFactory(\TYPO3\CMS\Extbase\Persistence\Generic\QueryFactoryInterface $queryFactory) {}
        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectSignalSlotDispatcher(\TYPO3\CMS\Extbase\SignalSlot\Dispatcher $signalSlotDispatcher) {}
        public function map($className, array $rows) {}
        public function getTargetType($className, array $row) {}
        protected function mapSingleRow($className, array $row) {}
        protected function emitAfterMappingSingleRow(DomainObjectInterface $object) {}
        protected function createEmptyObject($className) {}
        protected function thawProperties(DomainObjectInterface $object, array $row) {}
        protected function mapCoreType($type, $value) {}
        protected function mapDateTime($value, $storageFormat = null, $targetType = 'DateTime') {}
        public function fetchRelated(DomainObjectInterface $parentObject, $propertyName, $fieldValue = '', $enableLazyLoading = true) {}
        protected function fetchRelatedEager(DomainObjectInterface $parentObject, $propertyName, $fieldValue = '') {}
        protected function getEmptyRelationValue(DomainObjectInterface $parentObject, $propertyName) {}
        protected function getNonEmptyRelationValue(DomainObjectInterface $parentObject, $propertyName, $fieldValue) {}
        protected function getPreparedQuery(DomainObjectInterface $parentObject, $propertyName, $fieldValue = '') {}
        protected function getConstraint(Persistence\QueryInterface $query, DomainObjectInterface $parentObject, $propertyName, $fieldValue = '', $relationTableMatchFields = [ ]) {}
        protected function getSource(DomainObjectInterface $parentObject, $propertyName) {}
        protected function mapObjectToClassProperty(DomainObjectInterface $parentObject, $propertyName, $fieldValue) {}
        protected function propertyMapsByForeignKey(DomainObjectInterface $parentObject, $propertyName) {}
        public function mapResultToPropertyValue(DomainObjectInterface $parentObject, $propertyName, $result) {}
        public function countRelated(DomainObjectInterface $parentObject, $propertyName, $fieldValue = '') {}
        public function isPersistableProperty($className, $propertyName) {}
        public function getDataMap($className) {}
        public function convertClassNameToTableName($className) {}
        public function convertPropertyNameToColumnName($propertyName, $className = null) {}
        public function getType($parentClassName, $propertyName) {}
        public function getPlainValue($input, $columnMap = null) {}
    }

    /**
     * A data map to map a single table configured in $TCA on a domain object.
     */
    class DataMap {
        /**
         * The class name
         *
         * @var string
         */
        protected $className;
        /**
         * The table name corresponding to the domain class configured in $TCA
         *
         * @var string
         */
        protected $tableName;
        /**
         * The record type stored in the "type" field as configured in $TCA
         *
         * @var string
         */
        protected $recordType;
        /**
         * The subclasses of the current class
         *
         * @var array
         */
        protected $subclasses;
        /**
         * An array of column maps configured in $TCA
         *
         * @var array
         */
        protected $columnMaps;
        /**
         * @var string
         */
        protected $pageIdColumnName;
        /**
         * @var string
         */
        protected $languageIdColumnName;
        /**
         * @var string
         */
        protected $translationOriginColumnName;
        /**
         * @var string
         */
        protected $translationOriginDiffSourceName;
        /**
         * @var string
         */
        protected $modificationDateColumnName;
        /**
         * @var string
         */
        protected $creationDateColumnName;
        /**
         * @var string
         */
        protected $creatorColumnName;
        /**
         * @var string
         */
        protected $deletedFlagColumnName;
        /**
         * @var string
         */
        protected $disabledFlagColumnName;
        /**
         * @var string
         */
        protected $startTimeColumnName;
        /**
         * @var string
         */
        protected $endTimeColumnName;
        /**
         * @var string
         */
        protected $frontendUserGroupColumnName;
        /**
         * @var string
         */
        protected $recordTypeColumnName;
        /**
         * @var bool
         */
        protected $isStatic;
        /**
         * @var bool
         */
        protected $rootLevel;

        public function __construct($className, $tableName, $recordType = null, array $subclasses = [ ]) {}
        public function setClassName($className) {}
        /**
         * Returns the name of the class the column map represents
         *
         * @return string The class name
         */
        public function getClassName() {}
        public function setTableName($tableName) {}
        /**
         * Returns the name of the table the column map represents
         *
         * @return string The table name
         */
        public function getTableName() {}
        public function setRecordType($recordType) {}
        /**
         * Returns the record type
         *
         * @return string The record type
         */
        public function getRecordType() {}
        public function setSubclasses(array $subclasses) {}
        /**
         * Returns the subclasses
         *
         * @return array The subclasses
         */
        public function getSubclasses() {}
        public function addColumnMap(ColumnMap $columnMap) {}
        public function getColumnMap($propertyName) {}
        public function isPersistableProperty($propertyName) {}
        public function setPageIdColumnName($pageIdColumnName) {}
        /**
         * Sets the name of a column holding the page id
         *
         * @return string The field name
         */
        public function getPageIdColumnName() {}
        public function setLanguageIdColumnName($languageIdColumnName) {}
        /**
         * Returns the name of a column holding the language id of the record.
         *
         * @return string The field name
         */
        public function getLanguageIdColumnName() {}
        public function setTranslationOriginColumnName($translationOriginColumnName) {}
        /**
         * Returns the name of a column holding the the uid of the record which this record is a translation of.
         *
         * @return string The field name
         */
        public function getTranslationOriginColumnName() {}
        public function setTranslationOriginDiffSourceName($translationOriginDiffSourceName) {}
        /**
         * Returns the name of a column holding the diff data for the record which this record is a translation of.
         *
         * @return string The field name
         */
        public function getTranslationOriginDiffSourceName() {}
        public function setModificationDateColumnName($modificationDateColumnName) {}
        /**
         * Returns the name of a column holding the timestamp the record was modified
         *
         * @return string The field name
         */
        public function getModificationDateColumnName() {}
        public function setCreationDateColumnName($creationDateColumnName) {}
        /**
         * Returns the name of a column holding the creation date timestamp
         *
         * @return string The field name
         */
        public function getCreationDateColumnName() {}
        public function setCreatorColumnName($creatorColumnName) {}
        /**
         * Returns the name of a column holding the uid of the back-end user who created this record
         *
         * @return string The field name
         */
        public function getCreatorColumnName() {}
        public function setDeletedFlagColumnName($deletedFlagColumnName) {}
        /**
         * Returns the name of a column indicating the 'deleted' state of the row
         *
         * @return string The field name
         */
        public function getDeletedFlagColumnName() {}
        public function setDisabledFlagColumnName($disabledFlagColumnName) {}
        /**
         * Returns the name of a column indicating the 'hidden' state of the row
         *
         * @return string The field name
         */
        public function getDisabledFlagColumnName() {}
        public function setStartTimeColumnName($startTimeColumnName) {}
        /**
         * Returns the name of a column holding the timestamp the record should not displayed before
         *
         * @return string The field name
         */
        public function getStartTimeColumnName() {}
        public function setEndTimeColumnName($endTimeColumnName) {}
        /**
         * Returns the name of a column holding the timestamp the record should not displayed afterwards
         *
         * @return string The field name
         */
        public function getEndTimeColumnName() {}
        public function setFrontEndUserGroupColumnName($frontendUserGroupColumnName) {}
        /**
         * Returns the name of a column holding the uid of the front-end user group which is allowed to edit this record
         *
         * @return string The field name
         */
        public function getFrontEndUserGroupColumnName() {}
        public function setRecordTypeColumnName($recordTypeColumnName) {}
        /**
         * Sets the name of a column holding the record type
         *
         * @return string The field name
         */
        public function getRecordTypeColumnName() {}
        public function setIsStatic($isStatic) {}
        /**
         * @return bool
         */
        public function getIsStatic() {}
        public function setRootLevel($rootLevel) {}
        /**
         * @return bool
         */
        public function getRootLevel() {}
    }

}

namespace TYPO3\CMS\Extbase\Persistence\Generic\Storage {
    /**
     * A Storage backend
     */
    class Typo3DbBackend implements \typo3\cms\extbase\persistence\generic\storage\backendinterface, \typo3\cms\core\singletoninterface {
        /**
         * @var ConnectionPool
         */
        protected $connectionPool;
        /**
         * @var DataMapper
         */
        protected $dataMapper;
        /**
         * The TYPO3 page repository. Used for language and workspace overlay
         *
         * @var PageRepository
         */
        protected $pageRepository;
        /**
         * @var ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var CacheService
         */
        protected $cacheService;
        /**
         * @var EnvironmentService
         */
        protected $environmentService;
        /**
         * @var ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * As determining the table columns is a costly operation this is done only once per table during runtime and cached then
         *
         * @var array
         * @see clearPageCache()
         */
        protected $hasPidColumn;

        public function injectDataMapper(DataMapper $dataMapper) {}
        public function injectConfigurationManager(ConfigurationManagerInterface $configurationManager) {}
        public function injectCacheService(CacheService $cacheService) {}
        public function injectEnvironmentService(EnvironmentService $environmentService) {}
        public function injectObjectManager(ObjectManagerInterface $objectManager) {}
        /**
         * Constructor.
         */
        public function __construct() {}
        public function addRow($tableName, array $fieldValues, $isRelation = false) {}
        public function updateRow($tableName, array $fieldValues, $isRelation = false) {}
        public function updateRelationTableRow($tableName, array $fieldValues) {}
        public function removeRow($tableName, array $where, $isRelation = false) {}
        public function getMaxValueFromTable($tableName, array $where, $columnName) {}
        public function getRowByIdentifier($tableName, array $where) {}
        public function getObjectDataByQuery(QueryInterface $query) {}
        protected function getObjectDataByRawQuery(Qom\Statement $statement) {}
        public function getObjectCountByQuery(QueryInterface $query) {}
        public function getUidOfAlreadyPersistedValueObject(AbstractValueObject $object) {}
        protected function doLanguageAndWorkspaceOverlay(Qom\SourceInterface $source, array $rows, QuerySettingsInterface $querySettings, $workspaceUid = null) {}
        /**
         * @return PageRepository
         */
        protected function getPageRepository() {}
        protected function clearPageCache($tableName, $uid) {}
        /**
         * @return TypoScriptFrontendController|null
         */
        protected function getTSFE() {}
        /**
         * @return BackendUserAuthentication|null
         */
        protected function getBeUser() {}
    }

    /**
     * QueryParser, converting the qom to string representation
     */
    class Typo3DbQueryParser {
        /**
         * @var DataMapper
         */
        protected $dataMapper;
        /**
         * The TYPO3 page repository. Used for language and workspace overlay
         *
         * @var PageRepository
         */
        protected $pageRepository;
        /**
         * @var EnvironmentService
         */
        protected $environmentService;
        /**
         * Instance of the Doctrine query builder
         *
         * @var QueryBuilder
         */
        protected $queryBuilder;
        /**
         * Maps domain model properties to their corresponding table aliases that are used in the query, e.g.:
         *
         * 'property1' => 'tableName',
         * 'property1.property2' => 'tableName1',
         *
         * @var array
         */
        protected $tablePropertyMap;
        /**
         * Maps tablenames to their aliases to be used in where clauses etc.
         * Mainly used for joins on the same table etc.
         *
         * @var array
         */
        protected $tableAliasMap;
        /**
         * Stores all tables used in for SQL joins
         *
         * @var array
         */
        protected $unionTableAliasCache;
        /**
         * @var string
         */
        protected $tableName;
        /**
         * @var bool
         */
        protected $suggestDistinctQuery;

        public function injectDataMapper(DataMapper $dataMapper) {}
        public function injectEnvironmentService(EnvironmentService $environmentService) {}
        /**
         * Whether using a distinct query is suggested.
         * This information is defined during parsing of the current query
         * for RELATION_HAS_MANY & RELATION_HAS_AND_BELONGS_TO_MANY relations.
         *
         * @return bool
         */
        public function isDistinctQuerySuggested() : bool {}
        public function convertQueryToDoctrineQueryBuilder(QueryInterface $query) {}
        protected function initializeQueryBuilder(Qom\SourceInterface $source) {}
        protected function parseConstraint(Qom\ConstraintInterface $constraint, Qom\SourceInterface $source) {}
        protected function parseOrderings(array $orderings, Qom\SourceInterface $source) {}
        protected function addTypo3Constraints(QueryInterface $query) {}
        protected function parseComparison(Qom\ComparisonInterface $comparison, Qom\SourceInterface $source) {}
        protected function parseDynamicOperand(Qom\ComparisonInterface $comparison, Qom\SourceInterface $source) {}
        protected function getParameterType($value) : int {}
        protected function createTypedNamedParameter($value, int $forceType = null) : string {}
        protected function parseOperand(Qom\DynamicOperandInterface $operand, Qom\SourceInterface $source) {}
        protected function addRecordTypeConstraint($className) {}
        protected function getAdditionalMatchFieldsStatement($exprBuilder, $columnMap, $childTableAlias, $parentTable = null) {}
        protected function getAdditionalWhereClause(QuerySettingsInterface $querySettings, $tableName, $tableAlias = null) {}
        protected function getVisibilityConstraintStatement(QuerySettingsInterface $querySettings, $tableName, $tableAlias) {}
        protected function getFrontendConstraintStatement($tableName, $ignoreEnableFields, array $enableFieldsToBeIgnored = [ ], $includeDeleted) {}
        protected function getBackendConstraintStatement($tableName, $ignoreEnableFields, $includeDeleted) {}
        protected function getSysLanguageStatement($tableName, $tableAlias, $querySettings) {}
        protected function getPageIdStatement($tableName, $tableAlias, array $storagePageIds) {}
        protected function parseJoin(Qom\JoinInterface $join, $leftTableAlias) {}
        protected function getUniqueAlias($tableName, $fullPropertyPath = null) {}
        protected function addUnionStatement($className, $tableName, $propertyPath, $fullPropertyPath) {}
/** @var Connection $connection */
        protected function replaceTableNameWithAlias(/** @var Connection $connection */
$statement, /** @var Connection $connection */
$tableName, /** @var Connection $connection */
$tableAlias) {}
        /**
         * @return PageRepository
         */
        protected function getPageRepository() {}
        /**
         * @return TypoScriptFrontendController|null
         */
        protected function getTSFE() {}
    }


    /**
     * Storage backend interface
     */
    interface BackendInterface {
        function addRow($tableName, array $fieldValues, $isRelation = false) ;
        function updateRow($tableName, array $fieldValues, $isRelation = false) ;
        function updateRelationTableRow($tableName, array $fieldValues) ;
        function removeRow($tableName, array $where, $isRelation = false) ;
        function getMaxValueFromTable($tableName, array $where, $columnName) ;
        function getObjectCountByQuery(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query) ;
        function getObjectDataByQuery(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query) ;
        function getUidOfAlreadyPersistedValueObject(\TYPO3\CMS\Extbase\DomainObject\AbstractValueObject $object) ;
    }

}

namespace TYPO3\CMS\Extbase\Persistence\Generic\Storage\Exception {
    /**
     * An Bad Constraint exception
     */
    class BadConstraintException extends \typo3\cms\extbase\persistence\generic\exception {}

    /**
     * An SQL exception
     */
    class SqlErrorException extends \typo3\cms\extbase\persistence\generic\exception {}

}

namespace TYPO3\CMS\Extbase\Persistence\Generic\Qom {
    /**
     * Performs a join between two node-tuple sources.
     */
    class Join implements \typo3\cms\extbase\persistence\generic\qom\joininterface {
        /**
         * @var SourceInterface
         */
        protected $left;
        /**
         * @var SourceInterface
         */
        protected $right;
        /**
         * @var int
         */
        protected $joinType;
        /**
         * @var JoinConditionInterface
         */
        protected $joinCondition;

        public function __construct(SourceInterface $left, SourceInterface $right, $joinType, JoinConditionInterface $joinCondition) {}
        /**
         * Gets the left node-tuple source.
         *
         * @return SourceInterface the left source; non-null
         */
        public function getLeft() {}
        /**
         * Gets the right node-tuple source.
         *
         * @return SourceInterface the right source; non-null
         */
        public function getRight() {}
        /**
         * Gets the join type.
         *
         * @return string one of QueryObjectModelConstants.JCR_JOIN_TYPE_*
         */
        public function getJoinType() {}
        /**
         * Gets the join condition.
         *
         * @return JoinConditionInterface the join condition; non-null
         */
        public function getJoinCondition() {}
    }

    /**
     * Evaluates to the value of a bind variable.
     */
    class BindVariableValue implements \typo3\cms\extbase\persistence\generic\qom\bindvariablevalueinterface {
        /**
         * @var string
         */
        protected $variableName;

        public function __construct($variableName) {}
        public function collectBoundVariableNames($boundVariables) {}
        /**
         * Gets the name of the bind variable.
         *
         * @return string the bind variable name; non-null
         */
        public function getBindVariableName() {}
    }

    /**
     * Performs a logical disjunction of two other constraints.
     *
     * To satisfy the Or constraint, the node-tuple must either:
     * satisfy constraint1 but not constraint2, or
     * satisfy constraint2 but not constraint1, or
     * satisfy both constraint1 and constraint2.
     */
    class LogicalOr implements \typo3\cms\extbase\persistence\generic\qom\orinterface {
        /**
         * @var ConstraintInterface
         */
        protected $constraint1;
        /**
         * @var ConstraintInterface
         */
        protected $constraint2;

        public function __construct(ConstraintInterface $constraint1, ConstraintInterface $constraint2) {}
        public function collectBoundVariableNames($boundVariables) {}
        /**
         * Gets the first constraint.
         *
         * @return ConstraintInterface the constraint; non-null
         */
        public function getConstraint1() {}
        /**
         * Gets the second constraint.
         *
         * @return ConstraintInterface the constraint; non-null
         */
        public function getConstraint2() {}
    }

    /**
     * Selects a subset of the nodes in the repository based on node type.
     *
     * A selector selects every node in the repository, subject to access control
     * constraints, that satisfies at least one of the following conditions:
     *
     * the node's primary node type is nodeType, or
     * the node's primary node type is a subtype of nodeType, or
     * the node has a mixin node type that is nodeType, or
     * the node has a mixin node type that is a subtype of nodeType.
     */
    class Selector implements \typo3\cms\extbase\persistence\generic\qom\selectorinterface {
        /**
         * @var string
         */
        protected $nodeTypeName;
        /**
         * @var string
         */
        protected $selectorName;

        public function __construct($selectorName, $nodeTypeName) {}
        /**
         * Gets the name of the required node type.
         *
         * @return string the node type name; non-null
         */
        public function getNodeTypeName() {}
        /**
         * Gets the selector name.
         * A selector's name can be used elsewhere in the query to identify the selector.
         *
         * @return string the selector name; non-null
         */
        public function getSelectorName() {}
    }

    /**
     * Evaluates to the lower-case string value (or values, if multi-valued) of
     * operand.
     *
     * If operand does not evaluate to a string value, its value is first converted
     * to a string.
     *
     * If operand evaluates to null, the LowerCase operand also evaluates to null.
     */
    class LowerCase implements \typo3\cms\extbase\persistence\generic\qom\lowercaseinterface {
        /**
         * @var PropertyValueInterface
         */
        protected $operand;

        public function __construct(PropertyValueInterface $operand) {}
        /**
         * Gets the operand whose value is converted to a lower-case string.
         *
         * @return PropertyValueInterface the operand; non-null
         */
        public function getOperand() {}
        /**
         * Gets the name of the selector against which to evaluate this operand.
         *
         * @return string the selector name; non-null
         */
        public function getSelectorName() {}
        /**
         * Gets the name of the property.
         *
         * @return string the property name; non-null
         */
        public function getPropertyName() {}
    }

    /**
     * Performs a logical conjunction of two other constraints.
     *
     * To satisfy the And constraint, a node-tuple must satisfy both constraint1 and
     * constraint2.
     */
    class LogicalAnd implements \typo3\cms\extbase\persistence\generic\qom\andinterface {
        /**
         * @var ConstraintInterface
         */
        protected $constraint1;
        /**
         * @var ConstraintInterface
         */
        protected $constraint2;

        public function __construct(ConstraintInterface $constraint1, ConstraintInterface $constraint2) {}
        public function collectBoundVariableNames($boundVariables) {}
        /**
         * Gets the first constraint.
         *
         * @return ConstraintInterface the constraint; non-null
         */
        public function getConstraint1() {}
        /**
         * Gets the second constraint.
         *
         * @return ConstraintInterface the constraint; non-null
         */
        public function getConstraint2() {}
    }

    /**
     * Filters node-tuples based on the outcome of a binary operation.
     *
     * For any comparison, operand2 always evaluates to a scalar value. In contrast,
     * operand1 may evaluate to an array of values (for example, the value of a multi-valued
     * property), in which case the comparison is separately performed for each element
     * of the array, and the Comparison constraint is satisfied as a whole if the
     * comparison against any element of the array is satisfied.
     *
     * If operand1 and operand2 evaluate to values of different property types, the
     * value of operand2 is converted to the property type of the value of operand1.
     * If the type conversion fails, the query is invalid.
     *
     * If operator is not supported for the property type of operand1, the query is invalid.
     *
     * If operand1 evaluates to null (for example, if the operand evaluates the value
     * of a property which does not exist), the constraint is not satisfied.
     *
     * The OPERATOR_EQUAL_TO operator is satisfied only if the value of operand1
     * equals the value of operand2.
     *
     * The OPERATOR_NOT_EQUAL_TO operator is satisfied unless the value of
     * operand1 equals the value of operand2.
     *
     * The OPERATOR_LESSS_THAN operator is satisfied only if the value of
     * operand1 is ordered before the value of operand2.
     *
     * The OPERATOR_LESS_THAN_OR_EQUAL_TO operator is satisfied unless the value
     * of operand1 is ordered after the value of operand2.
     *
     * The OPERATOR_GREATER_THAN operator is satisfied only if the value of
     * operand1 is ordered after the value of operand2.
     *
     * The OPERATOR_GREATER_THAN_OR_EQUAL_TO operator is satisfied unless the
     * value of operand1 is ordered before the value of operand2.
     *
     * The OPERATOR_LIKE operator is satisfied only if the value of operand1
     * matches the pattern specified by the value of operand2, where in the pattern:
     * the character "%" matches zero or more characters, and
     * the character "_" (underscore) matches exactly one character, and
     * the string "\x" matches the character "x", and
     * all other characters match themselves.
     */
    class Comparison implements \typo3\cms\extbase\persistence\generic\qom\comparisoninterface {
        /**
         * @var PropertyValueInterface
         */
        protected $operand1;
        /**
         * @var int
         */
        protected $operator;
        /**
         * @var mixed
         */
        protected $operand2;

        public function __construct(PropertyValueInterface $operand1, $operator, $operand2) {}
        /**
         * Gets the first operand.
         *
         * @return PropertyValueInterface the operand; non-null
         */
        public function getOperand1() {}
        /**
         * Gets the operator.
         *
         * @return string One of QueryInterface::OPERATOR_*
         */
        public function getOperator() {}
        /**
         * Gets the second operand.
         *
         * @return mixed the operand; non-null
         */
        public function getOperand2() {}
        public function collectBoundVariableNames($boundVariables) {}
    }

    /**
     * The Query Object Model Factory
     */
    class QueryObjectModelFactory implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function selector($nodeTypeName, $selectorName = '') {}
        public function statement($statement, array $boundVariables = [ ]) {}
        public function join(SourceInterface $left, SourceInterface $right, $joinType, JoinConditionInterface $joinCondition) {}
        public function equiJoinCondition($selector1Name, $property1Name, $selector2Name, $property2Name) {}
        public function _and(ConstraintInterface $constraint1, ConstraintInterface $constraint2) {}
        public function _or(ConstraintInterface $constraint1, ConstraintInterface $constraint2) {}
        public function not(ConstraintInterface $constraint) {}
        public function comparison(PropertyValueInterface $operand1, $operator, $operand2) {}
        public function propertyValue($propertyName, $selectorName = '') {}
        public function lowerCase(PropertyValueInterface $operand) {}
        public function upperCase(PropertyValueInterface $operand) {}
        public function ascending(DynamicOperandInterface $operand) {}
        public function descending(DynamicOperandInterface $operand) {}
        public function bindVariable($bindVariableName) {}
    }

    /**
     * Tests whether the value of a property in a first selector is equal to the value of a
     * property in a second selector.
     * A node-tuple satisfies the constraint only if: the selector1Name node has a property named property1Name, and
     * the selector2Name node has a property named property2Name, and
     * the value of property property1Name is equal to the value of property property2Name.
     */
    class EquiJoinCondition implements \typo3\cms\extbase\persistence\generic\qom\equijoinconditioninterface {
        /**
         * @var string
         */
        protected $selector1Name;
        /**
         * @var string
         */
        protected $property1Name;
        /**
         * @var string
         */
        protected $selector2Name;
        /**
         * @var string
         */
        protected $property2Name;

        public function __construct($selector1Name, $property1Name, $selector2Name, $property2Name) {}
        /**
         * Gets the name of the first selector.
         *
         * @return string the selector name; non-null
         */
        public function getSelector1Name() {}
        /**
         * Gets the name of the first property.
         *
         * @return string the property name; non-null
         */
        public function getProperty1Name() {}
        /**
         * Gets the name of the second selector.
         *
         * @return string the selector name; non-null
         */
        public function getSelector2Name() {}
        /**
         * Gets the name of the second property.
         *
         * @return string the property name; non-null
         */
        public function getProperty2Name() {}
        /**
         * Gets the name of the child selector.
         *
         * @return string the selector name; non-null
         */
        public function getChildSelectorName() {}
        /**
         * Gets the name of the parent selector.
         *
         * @return string the selector name; non-null
         */
        public function getParentSelectorName() {}
    }

    /**
     * A statement acting as a constraint.
     */
    class Statement implements \typo3\cms\extbase\persistence\generic\qom\constraintinterface {
        /**
         * @var string|\Doctrine\DBAL\Statement|\TYPO3\CMS\Core\Database\Query\QueryBuilder
         */
        protected $statement;
        /**
         * @var array
         */
        protected $boundVariables;

        public function __construct($statement, array $boundVariables = [ ]) {}
        /**
         * Gets the statement.
         *
         * @return string|\Doctrine\DBAL\Statement|\TYPO3\CMS\Core\Database\Query\QueryBuilder the statement; non-null
         */
        public function getStatement() {}
        /**
         * Gets the bound variables
         *
         * @return array $boundVariables
         */
        public function getBoundVariables() {}
        public function collectBoundVariableNames($boundVariables) {}
    }

    /**
     * Determines the relative order of two rows in the result set by evaluating operand for
     * each.
     */
    class Ordering implements \typo3\cms\extbase\persistence\generic\qom\orderinginterface {
        /**
         * @var DynamicOperandInterface
         */
        protected $operand;
        /**
         * @var string One of \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_*
         */
        protected $order;

        public function __construct(DynamicOperandInterface $operand, $order = \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_ASCENDING) {}
        /**
         * The operand by which to order.
         *
         * @return DynamicOperandInterface the operand; non-null
         */
        public function getOperand() {}
        /**
         * Gets the order.
         *
         * @return string One of \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_*
         */
        public function getOrder() {}
    }

    /**
     * Evaluates to the value (or values, if multi-valued) of a property.
     *
     * If, for a node-tuple, the selector node does not have a property named property,
     * the operand evaluates to null.
     *
     * The query is invalid if:
     *
     * selector is not the name of a selector in the query, or
     * property is not a syntactically valid JCR name.
     */
    class PropertyValue implements \typo3\cms\extbase\persistence\generic\qom\propertyvalueinterface {
        /**
         * @var string
         */
        protected $selectorName;
        /**
         * @var string
         */
        protected $propertyName;

        public function __construct($propertyName, $selectorName = '') {}
        /**
         * Gets the name of the selector against which to evaluate this operand.
         *
         * @return string the selector name; non-null
         */
        public function getSelectorName() {}
        /**
         * Gets the name of the property.
         *
         * @return string the property name; non-null
         */
        public function getPropertyName() {}
    }

    /**
     * Evaluates to the upper-case string value (or values, if multi-valued) of
     * operand.
     *
     * If operand does not evaluate to a string value, its value is first converted
     * to a string.
     *
     * If operand evaluates to null, the UpperCase operand also evaluates to null.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class UpperCase implements \typo3\cms\extbase\persistence\generic\qom\uppercaseinterface {
        /**
         * @var PropertyValueInterface
         */
        protected $operand;

        public function __construct(PropertyValueInterface $operand) {}
        /**
         * Gets the operand whose value is converted to an upper-case string.
         *
         * @return PropertyValueInterface the operand; non-null
         */
        public function getOperand() {}
        /**
         * Gets the name of the selector against which to evaluate this operand.
         *
         * @return string the selector name; non-null
         */
        public function getSelectorName() {}
        /**
         * Gets the name of the property.
         *
         * @return string the property name; non-null
         */
        public function getPropertyName() {}
    }

    /**
     * Performs a logical negation of another constraint.
     *
     * To satisfy the Not constraint, the node-tuple must not satisfy constraint.
     */
    class LogicalNot implements \typo3\cms\extbase\persistence\generic\qom\notinterface {
        /**
         * @var ConstraintInterface
         */
        protected $constraint;

        public function __construct(ConstraintInterface $constraint) {}
        public function collectBoundVariableNames($boundVariables) {}
        /**
         * Gets the constraint negated by this Not constraint.
         *
         * @return ConstraintInterface the constraint; non-null
         */
        public function getConstraint() {}
    }


    /**
     * Evaluates to the value of a bind variable.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    interface BindVariableValueInterface extends \typo3\cms\extbase\persistence\generic\qom\staticoperandinterface {
        /**
         * Gets the name of the bind variable.
         *
         * @return string the bind variable name; non-null
         */
        function getBindVariableName() ;
    }

    /**
     * Selects a subset of the nodes in the repository based on node type.
     *
     * A selector selects every node in the repository, subject to access control
     * constraints, that satisfies at least one of the following conditions:
     *
     * the node's primary node type is nodeType, or
     * the node's primary node type is a subtype of nodeType, or
     * the node has a mixin node type that is nodeType, or
     * the node has a mixin node type that is a subtype of nodeType.
     */
    interface SelectorInterface extends \typo3\cms\extbase\persistence\generic\qom\sourceinterface {
        /**
         * Gets the name of the required node type.
         *
         * @return string the node type name; non-null
         */
        function getNodeTypeName() ;
        /**
         * Gets the selector name.
         * A selector's name can be used elsewhere in the query to identify the selector.
         *
         * @return string the selector name; non-null
         */
        function getSelectorName() ;
    }

    /**
     * An operand whose value can be determined from static analysis of the query,
     * prior to its evaluation.
     */
    interface StaticOperandInterface extends \typo3\cms\extbase\persistence\generic\qom\operandinterface {}

    /**
     * Filters the set of node-tuples formed from a join.
     */
    interface JoinConditionInterface {
        /**
         * Gets the name of the first selector.
         *
         * @return string the selector name; non-null
         */
        function getSelector1Name() ;
    }

    /**
     * Filters node-tuples based on the outcome of a binary operation.
     *
     * For any comparison, operand2 always evaluates to a scalar value. In contrast,
     * operand1 may evaluate to an array of values (for example, the value of a multi-valued
     * property), in which case the comparison is separately performed for each element
     * of the array, and the Comparison constraint is satisfied as a whole if the
     * comparison against any element of the array is satisfied.
     *
     * If operand1 and operand2 evaluate to values of different property types, the
     * value of operand2 is converted to the property type of the value of operand1.
     * If the type conversion fails, the query is invalid.
     *
     * If operator is not supported for the property type of operand1, the query is invalid.
     *
     * If operand1 evaluates to null (for example, if the operand evaluates the value
     * of a property which does not exist), the constraint is not satisfied.
     *
     * The JCR_OPERATOR_EQUAL_TO operator is satisfied only if the value of operand1
     * equals the value of operand2.
     *
     * The JCR_OPERATOR_NOT_EQUAL_TO operator is satisfied unless the value of
     * operand1 equals the value of operand2.
     *
     * The JCR_OPERATOR_LESSS_THAN operator is satisfied only if the value of
     * operand1 is ordered before the value of operand2.
     *
     * The JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO operator is satisfied unless the value
     * of operand1 is ordered after the value of operand2.
     *
     * The JCR_OPERATOR_GREATER_THAN operator is satisfied only if the value of
     * operand1 is ordered after the value of operand2.
     *
     * The JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO operator is satisfied unless the
     * value of operand1 is ordered before the value of operand2.
     *
     * The JCR_OPERATOR_LIKE operator is satisfied only if the value of operand1
     * matches the pattern specified by the value of operand2, where in the pattern:
     * the character "%" matches zero or more characters, and
     * the character "_" (underscore) matches exactly one character, and
     * the string "\x" matches the character "x", and
     * all other characters match themselves.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    interface ComparisonInterface extends \typo3\cms\extbase\persistence\generic\qom\constraintinterface {
        /**
         * Gets the first operand.
         *
         * @return PropertyValueInterface the operand; non-null
         */
        function getOperand1() ;
        /**
         * Gets the operator.
         *
         * @return string one of \TYPO3\CMS\Extbase\Persistence\QueryInterface::*
         */
        function getOperator() ;
        /**
         * Gets the second operand.
         *
         * @return StaticOperandInterface the operand; non-null
         */
        function getOperand2() ;
    }

    /**
     * An operand to a binary operation specified by a Comparison.
     */
    interface OperandInterface {}

    /**
     * Performs a join between two node-tuple sources.
     */
    interface JoinInterface extends \typo3\cms\extbase\persistence\generic\qom\sourceinterface {
        /**
         * Gets the left node-tuple source.
         *
         * @return SelectorInterface the left source; non-null
         */
        function getLeft() ;
        /**
         * Gets the right node-tuple source.
         *
         * @return SelectorInterface the right source; non-null
         */
        function getRight() ;
        /**
         * Gets the join type.
         *
         * @return string one of QueryObjectModelConstants.JCR_JOIN_TYPE_*
         */
        function getJoinType() ;
        /**
         * Gets the join condition.
         *
         * @return JoinConditionInterface the join condition; non-null
         */
        function getJoinCondition() ;
    }

    /**
     * Evaluates to the value (or values, if multi-valued) of a property.
     *
     * If, for a node-tuple, the selector node does not have a property named property,
     * the operand evaluates to null.
     *
     * The query is invalid if:
     *
     * selector is not the name of a selector in the query, or
     * property is not a syntactically valid JCR name.
     */
    interface PropertyValueInterface extends \typo3\cms\extbase\persistence\generic\qom\dynamicoperandinterface {
        /**
         * Gets the name of the selector against which to evaluate this operand.
         *
         * @return string the selector name; non-null
         */
        function getSelectorName() ;
        /**
         * Gets the name of the property.
         *
         * @return string the property name; non-null
         */
        function getPropertyName() ;
    }

    /**
     * Filters the set of tuples formed by evaluating the query's sources and
     * the joins between them.
     *
     * To be included in the query results, a tuple must satisfy the constraint.
     */
    interface ConstraintInterface {
        function collectBoundVariableNames($boundVariables) ;
    }

    /**
     * Determines the relative order of two rows in the result set by evaluating operand for
     * each.
     */
    interface OrderingInterface {
        /**
         * The operand by which to order.
         *
         * @return DynamicOperandInterface the operand; non-null
         */
        function getOperand() ;
        /**
         * Gets the order.
         *
         * @return string One of \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_*
         */
        function getOrder() ;
    }

    /**
     * Evaluates to the lower-case string value (or values, if multi-valued) of
     * operand.
     *
     * If operand does not evaluate to a string value, its value is first converted
     * to a string.
     *
     * If operand evaluates to null, the LowerCase operand also evaluates to null.
     */
    interface LowerCaseInterface extends \typo3\cms\extbase\persistence\generic\qom\propertyvalueinterface {
        /**
         * Gets the operand whose value is converted to a lower-case string.
         *
         * @return PropertyValueInterface the operand; non-null
         */
        function getOperand() ;
    }

    /**
     * An operand whose value can only be determined in evaluating the query.
     */
    interface DynamicOperandInterface extends \typo3\cms\extbase\persistence\generic\qom\operandinterface {}

    /**
     * Performs a logical negation of another constraint.
     *
     * To satisfy the Not constraint, the node-tuple must not satisfy constraint.
     */
    interface NotInterface extends \typo3\cms\extbase\persistence\generic\qom\constraintinterface {
        /**
         * Gets the constraint negated by this Not constraint.
         *
         * @return ConstraintInterface the constraint; non-null
         */
        function getConstraint() ;
    }

    /**
     * Tests whether the childSelector node is a child of the parentSelector node. A
     * node-tuple satisfies the constraint only if:
     * childSelectorNode.getParent().isSame(parentSelectorNode)
     * would return true, where childSelectorNode is the node for childSelector and
     * parentSelectorNode is the node for parentSelector.
     */
    interface EquiJoinConditionInterface extends \typo3\cms\extbase\persistence\generic\qom\joinconditioninterface {
        /**
         * Gets the name of the child selector.
         *
         * @return string the selector name; non-null
         */
        function getChildSelectorName() ;
        /**
         * Gets the name of the parent selector.
         *
         * @return string the selector name; non-null
         */
        function getParentSelectorName() ;
    }

    /**
     * Performs a logical conjunction of two other constraints.
     *
     * To satisfy the And constraint, a node-tuple must satisfy both constraint1 and
     * constraint2.
     */
    interface AndInterface extends \typo3\cms\extbase\persistence\generic\qom\constraintinterface {
        /**
         * Gets the first constraint.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\ConstraintInterface the constraint; non-null
         */
        function getConstraint1() ;
        /**
         * Gets the second constraint.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\ConstraintInterface the constraint; non-null
         */
        function getConstraint2() ;
    }

    /**
     * Evaluates to the upper-case string value (or values, if multi-valued) of
     * operand.
     *
     * If operand does not evaluate to a string value, its value is first converted
     * to a string.
     *
     * If operand evaluates to null, the UpperCase operand also evaluates to null.
     */
    interface UpperCaseInterface extends \typo3\cms\extbase\persistence\generic\qom\propertyvalueinterface {
        /**
         * Gets the operand whose value is converted to an upper-case string.
         *
         * @return PropertyValueInterface the operand; non-null
         */
        function getOperand() ;
    }

    /**
     * Evaluates to a set of node-tuples.
     */
    interface SourceInterface {}

    /**
     * Performs a logical disjunction of two other constraints.
     *
     * To satisfy the Or constraint, the node-tuple must either:
     * satisfy constraint1 but not constraint2, or
     * satisfy constraint2 but not constraint1, or
     * satisfy both constraint1 and constraint2.
     */
    interface OrInterface extends \typo3\cms\extbase\persistence\generic\qom\constraintinterface {
        /**
         * Gets the first constraint.
         *
         * @return ConstraintInterface the constraint; non-null
         */
        function getConstraint1() ;
        /**
         * Gets the second constraint.
         *
         * @return ConstraintInterface the constraint; non-null
         */
        function getConstraint2() ;
    }

}

namespace TYPO3\CMS\Extbase\Persistence\Exception {
    /**
     * An "Invalid Query" Exception
     *
     * @api
     */
    class InvalidQueryException extends \typo3\cms\extbase\exception {}

    /**
     * An "Unknown Object" exception
     */
    class UnknownObjectException extends \typo3\cms\extbase\persistence\exception {}

    /**
     * An "Illegal Relation Type" exception
     */
    class IllegalRelationTypeException extends \typo3\cms\extbase\persistence\exception {}

    /**
     * An "Invalid Object Type" exception
     */
    class IllegalObjectTypeException extends \typo3\cms\extbase\persistence\exception {}

}

namespace TYPO3\CMS\Extbase\Command {
    /**
     * Extends the help command of symfony to show the specific help for Extbase commands
     */
    class HelpCommand extends \symfony\component\console\command\helpcommand {
        /**
         * This needs to be re-set as the parent command has this property declared as "private" as well.
         *
         * @var Command
         */
        private $command;

        /**
         * {@inheritdoc}
         */
        protected function configure() {}
        public function setCommand(Command $command) {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    /**
     * A Command Controller which provides help for available commands
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class HelpCommandController extends \typo3\cms\extbase\mvc\controller\commandcontroller {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\CommandManager
         */
        protected $commandManager;
        /**
         * @var array
         */
        protected $commandsByExtensionsAndControllers;

        public function injectCommandManager(\TYPO3\CMS\Extbase\Mvc\Cli\CommandManager $commandManager) {}
        /**
         * Displays a short, general help message
         *
         * This only outputs the Extbase version number, context and some hint about how to
         * get more help about commands.
         *
         * @internal
         */
        public function helpStubCommand() {}
        public function helpCommand($commandIdentifier = null) {}
        /**
         * Builds an index of all commands that are available
         */
        protected function displayHelpIndex() {}
        protected function displayHelpForCommand(\TYPO3\CMS\Extbase\Mvc\Cli\Command $command) {}
        public function errorCommand(\TYPO3\CMS\Extbase\Mvc\Exception\CommandException $exception) {}
        /**
         * Builds an index of available commands. For each of them a Command object is
         * added to the commands array of this class.
         */
        protected function buildCommandsIndex() {}
    }

    /**
     * Wrapper to wrap an Extbase command from a command controller into a Symfony Command
     */
    class ExtbaseCommand extends \symfony\component\console\command\command {
        /**
         * Extbase's command
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\Command
         */
        protected $command;

        /**
         * Extbase has its own validation logic, so it is disabled in this place
         */
        protected function configure() {}
        public function setExtbaseCommand(\TYPO3\CMS\Extbase\Mvc\Cli\Command $command) {}
        public function setApplication(Application $application = null) {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    /**
     * Main call to register any Extbase command from Extbase command controllers
     *
     * Fetches all registered Extbase commands and adds them to the application as custom Extbase commands
     */
    class CoreCommand extends \symfony\component\console\command\command {
        /**
         * @var Bootstrap
         */
        protected $extbaseBootstrap;

        /**
         * Configure the command, since this is a command
         */
        protected function configure() {}
/** @var CommandManager $commandManager */
        public function setApplication(/** @var CommandManager $commandManager */
Application $application = null) {}
    }

}

namespace TYPO3\CMS\Extbase\Service {
    /**
     * Utilities to process flexForms
     */
    class FlexFormService implements \typo3\cms\core\singletoninterface {
        public function convertFlexFormContentToArray($flexFormContent, $languagePointer = 'lDEF', $valuePointer = 'vDEF') {}
        public function walkFlexFormNode($nodeArray, $valuePointer = 'vDEF') {}
    }

    /**
     * Cache clearing helper functions
     */
    class CacheService implements \typo3\cms\core\singletoninterface {
        /**
         * @var \SplStack
         */
        protected $pageIdStack;
        /**
         * @var \TYPO3\CMS\Core\Cache\CacheManager
         */
        protected $cacheManager;

        public function injectCacheManager(\TYPO3\CMS\Core\Cache\CacheManager $cacheManager) {}
        /**
         * Initializes the pageIdStack
         */
        public function __construct() {}
        /**
         * @return \SplStack
         */
        public function getPageIdStack() {}
        public function clearPageCache($pageIdsToClear = null) {}
        /**
         * Walks through the pageIdStack, collects all pageIds
         * as array and passes them on to clearPageCache.
         */
        public function clearCachesOfRegisteredPageIds() {}
    }

    /**
     * Service for determining basic extension params
     */
    class ExtensionService implements \typo3\cms\core\singletoninterface {
        const PLUGIN_TYPE_PLUGIN = 'list_type';
        const PLUGIN_TYPE_CONTENT_ELEMENT = 'CType';

        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * Cache of result for getTargetPidByPlugin()
         * @var array
         */
        protected $targetPidPluginCache;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectConfigurationManager(ConfigurationManagerInterface $configurationManager) {}
        public function getPluginNamespace($extensionName, $pluginName) {}
        public function getPluginNameByAction($extensionName, $controllerName, $actionName) {}
        public function isActionCacheable($extensionName, $pluginName, $controllerName, $actionName) {}
        public function getTargetPidByPlugin($extensionName, $pluginName) {}
        public function getDefaultControllerNameByPlugin($extensionName, $pluginName) {}
        public function getDefaultActionNameByPluginAndController($extensionName, $pluginName, $controllerName) {}
        public function getTargetPageTypeByFormat($extensionName, $format) {}
    }

    /**
     * Service for determining environment params
     */
    class EnvironmentService implements \typo3\cms\core\singletoninterface {
        /**
         * Detects if TYPO3_MODE is defined and its value is "FE"
         *
         * @return bool
         */
        public function isEnvironmentInFrontendMode() {}
        /**
         * Detects if TYPO3_MODE is defined and its value is "BE"
         *
         * @return bool
         */
        public function isEnvironmentInBackendMode() {}
        /**
         * Detects if we are running a script from the command line.
         *
         * @return bool
         */
        public function isEnvironmentInCliMode() {}
        /**
         * @return string
         */
        public function getServerRequestMethod() {}
    }

    /**
     * Service for processing images
     */
    class ImageService implements \typo3\cms\core\singletoninterface {
        /**
         * @var ResourceFactory
         */
        protected $resourceFactory;
        /**
         * @var EnvironmentService
         */
        protected $environmentService;

        public function __construct(EnvironmentService $environmentService = null, ResourceFactory $resourceFactory = null) {}
        public function applyProcessingInstructions($image, $processingInstructions) {}
        public function getImageUri(FileInterface $image, $absolute = false) {}
        public function getImage($src, $image, $treatIdAsReference) {}
        protected function getImageFromSourceString($src, $treatIdAsReference) {}
        protected function setCompatibilityValues(ProcessedFile $processedImage) {}
        protected function getCompatibilityImageResourceValues(ProcessedFile $processedImage) {}
    }

}

namespace TYPO3\CMS\Extbase\SignalSlot {
    /**
     * A dispatcher which dispatches signals by calling its registered slot methods
     * and passing them the method arguments which were originally passed to the
     * signal method.
     *
     * @api
     */
    class Dispatcher implements \typo3\cms\core\singletoninterface {
        /**
         * @var bool
         */
        protected $isInitialized;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * Information about all slots connected a certain signal.
         * Indexed by [$signalClassName][$signalMethodName] and then numeric with an
         * array of information about the slot
         *
         * @var array
         */
        protected $slots;

        /**
         * Initializes this object.
         *
         * This methods needs to be used as alternative to inject aspects.
         * Since this dispatches is used very early when the ObjectManager
         * is not fully initialized (especially concerning caching framework),
         * this is the only way.
         */
        public function initializeObject() {}
        public function connect($signalClassName, $signalName, $slotClassNameOrObject, $slotMethodName = '', $passSignalInformation = true) {}
        public function dispatch($signalClassName, $signalName, array $signalArguments = [ ]) {}
        public function getSlots($signalClassName, $signalName) {}
    }

}

namespace TYPO3\CMS\Extbase\SignalSlot\Exception {
    /**
     * "Invalid Slot" Exception
     *
     * @api
     */
    class InvalidSlotException extends \typo3\cms\extbase\object\exception {}

    /**
     * "Invalid Slot Return" Exception
     *
     * @api
     */
    class InvalidSlotReturnException extends \typo3\cms\extbase\object\exception {}

}

namespace TYPO3\CMS\Extbase\Error {
    /**
     * An object representation of a generic warning. Subclass this to create
     * more specific warnings if necessary.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class Warning extends \typo3\cms\extbase\error\message {
        /**
         * @var string
         */
        protected $message;

    }

    /**
     * Result object for operations dealing with objects, such as the Property Mapper or the Validators.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class Result {
        /**
         * @var Error[]
         */
        protected $errors;
        /**
         * Caches the existence of errors
         * @var bool
         */
        protected $errorsExist;
        /**
         * @var Warning[]
         */
        protected $warnings;
        /**
         * Caches the existence of warning
         * @var bool
         */
        protected $warningsExist;
        /**
         * @var Notice[]
         */
        protected $notices;
        /**
         * Caches the existence of notices
         * @var bool
         */
        protected $noticesExist;
        /**
         * The result objects for the sub properties
         *
         * @var Result[]
         */
        protected $propertyResults;
        /**
         * @var Result
         */
        protected $parent;

        public function setParent(Result $parent) {}
        public function addError(Error $error) {}
        public function addWarning(Warning $warning) {}
        public function addNotice(Notice $notice) {}
        /**
         * Get all errors in the current Result object (non-recursive)
         *
         * @return Error[]
         * @api
         */
        public function getErrors() {}
        /**
         * Get all warnings in the current Result object (non-recursive)
         *
         * @return Warning[]
         * @api
         */
        public function getWarnings() {}
        /**
         * Get all notices in the current Result object (non-recursive)
         *
         * @return Notice[]
         * @api
         */
        public function getNotices() {}
        /**
         * Get the first error object of the current Result object (non-recursive)
         *
         * @return Error
         * @api
         */
        public function getFirstError() {}
        /**
         * Get the first warning object of the current Result object (non-recursive)
         *
         * @return Warning
         * @api
         */
        public function getFirstWarning() {}
        /**
         * Get the first notice object of the curren Result object (non-recursive)
         *
         * @return Notice
         * @api
         */
        public function getFirstNotice() {}
        public function forProperty($propertyPath) {}
        public function recurseThroughResult(array $pathSegments) {}
        /**
         * Sets the error cache to TRUE and propagates the information
         * upwards the Result-Object Tree
         */
        protected function setErrorsExist() {}
        /**
         * Sets the warning cache to TRUE and propagates the information
         * upwards the Result-Object Tree
         */
        protected function setWarningsExist() {}
        /**
         * Sets the notices cache to TRUE and propagates the information
         * upwards the Result-Object Tree
         */
        protected function setNoticesExist() {}
        /**
         * Does the current Result object have Notices, Errors or Warnings? (Recursively)
         *
         * @return bool
         */
        public function hasMessages() {}
        /**
         * Clears the result
         */
        public function clear() {}
        protected function hasProperty($propertyName, $checkerMethodName) {}
        /**
         * Does the current Result object have Errors? (Recursively)
         *
         * @return bool
         * @api
         */
        public function hasErrors() {}
        /**
         * Does the current Result object have Warnings? (Recursively)
         *
         * @return bool
         * @api
         */
        public function hasWarnings() {}
        /**
         * Does the current Result object have Notices? (Recursively)
         *
         * @return bool
         * @api
         */
        public function hasNotices() {}
        /**
         * Get a list of all Error objects recursively. The result is an array,
         * where the key is the property path where the error occurred, and the
         * value is a list of all errors (stored as array)
         *
         * @return Error[]
         * @api
         */
        public function getFlattenedErrors() {}
        /**
         * Get a list of all Warning objects recursively. The result is an array,
         * where the key is the property path where the warning occurred, and the
         * value is a list of all warnings (stored as array)
         *
         * @return Warning[]
         * @api
         */
        public function getFlattenedWarnings() {}
        /**
         * Get a list of all Notice objects recursively. The result is an array,
         * where the key is the property path where the notice occurred, and the
         * value is a list of all notices (stored as array)
         *
         * @return Notice[]
         * @api
         */
        public function getFlattenedNotices() {}
        public function flattenTree($propertyName, $result, $level) {}
/** @var $subResult Result */
        public function merge(/** @var $subResult Result */
Result $otherResult) {}
        protected function mergeProperty(Result $otherResult, $getterName, $adderName) {}
        /**
         * Get a list of all sub Result objects available.
         *
         * @return Result[]
         */
        public function getSubResults() {}
    }

    /**
     * An object representation of a generic error. Subclass this to create
     * more specific errors if necessary.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class Error extends \typo3\cms\extbase\error\message {
        /**
         * @var string
         */
        protected $message;

    }

    /**
     * An object representation of a generic notice. Subclass this to create
     * more specific notices if necessary.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class Notice extends \typo3\cms\extbase\error\message {
        /**
         * @var string
         */
        protected $message;

    }

    /**
     * An object representation of a generic message. Usually, you will use Error, Warning or Notice instead of this one.
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class Message {
        /**
         * The default (english) error message
         *
         * @var string
         */
        protected $message;
        /**
         * The error code
         *
         * @var string
         */
        protected $code;
        /**
         * The message arguments. Will be replaced in the message body.
         *
         * @var array
         */
        protected $arguments;
        /**
         * An optional title for the message (used eg. in flashMessages).
         *
         * @var string
         */
        protected $title;

        public function __construct($message, $code, array $arguments = [ ], $title = '') {}
        /**
         * Returns the error message
         *
         * @return string The error message
         * @api
         */
        public function getMessage() {}
        /**
         * Returns the error code
         *
         * @return string The error code
         * @api
         */
        public function getCode() {}
        /**
         * Get arguments
         *
         * @return array
         * @api
         */
        public function getArguments() {}
        /**
         * Get title
         *
         * @return string
         * @api
         */
        public function getTitle() {}
        /**
         * Return the rendered message
         *
         * @return string
         * @api
         */
        public function render() {}
        /**
         * Converts this error into a string
         *
         * @return string
         * @api
         */
        public function __toString() {}
    }

}

namespace TYPO3\CMS\Extbase\Domain\Repository {
    /**
     * Repository for Category models.
     *
     * @api
     */
    class CategoryRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * Initializes the repository.
         */
        public function initializeObject() {}
    }

    /**
     * A Frontend User repository
     *
     * @api
     */
    class FrontendUserRepository extends \typo3\cms\extbase\persistence\repository {}

    /**
     * Repository for \TYPO3\CMS\Extbase\Domain\Model\BackendUser.
     *
     * @api
     */
    class BackendUserRepository extends \typo3\cms\extbase\persistence\repository {
        /** @var $querySettings \TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings */
        public function initializeObject() {}
    }

    /**
     * A Frontend User Group Repository
     *
     * @api
     */
    class FrontendUserGroupRepository extends \typo3\cms\extbase\persistence\repository {}

    /**
     * Repository for \TYPO3\CMS\Extbase\Domain\Model\FileMount.
     *
     * @api
     */
    class FileMountRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * Initializes the repository.
         */
        public function initializeObject() {}
    }

    /**
     * Repository for \TYPO3\CMS\Extbase\Domain\Model\BackendUserGroup.
     *
     * @api
     */
    class BackendUserGroupRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * Initializes the repository.
         */
        public function initializeObject() {}
    }

}

namespace TYPO3\CMS\Extbase\Domain\Model {
    /**
     * A file collection object (File Abstraction Layer)
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class StaticFileCollection extends \typo3\cms\extbase\domain\model\abstractfilecollection {}

    /**
     * This model represents a category (for anything).
     *
     * @api
     */
    class Category extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         * @validate notEmpty
         */
        protected $title;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var \TYPO3\CMS\Extbase\Domain\Model\Category|null
         * @lazy
         */
        protected $parent;

        /**
         * Gets the title.
         *
         * @return string the title, might be empty
         * @api
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * Gets the description.
         *
         * @return string the description, might be empty
         * @api
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Gets the parent category.
         *
         * @return \TYPO3\CMS\Extbase\Domain\Model\Category|null the parent category
         * @api
         */
        public function getParent() {}
        public function setParent(\TYPO3\CMS\Extbase\Domain\Model\Category $parent) {}
    }

    /**
     * A file reference object (File Abstraction Layer)
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class FileReference extends \typo3\cms\extbase\domain\model\abstractfilefolder {
        /**
         * Uid of the referenced sys_file. Needed for extbase to serialize the
         * reference correctly.
         *
         * @var int
         */
        protected $uidLocal;

        public function setOriginalResource(\TYPO3\CMS\Core\Resource\ResourceInterface $originalResource) {}
        /**
         * @return \TYPO3\CMS\Core\Resource\FileReference
         */
        public function getOriginalResource() {}
    }

    /**
     * A file object (File Abstraction Layer)
     *
     * @api experimental! This class is experimental and subject to change!
     */
    abstract class AbstractFileFolder extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var \TYPO3\CMS\Core\Resource\ResourceInterface|\TYPO3\CMS\Core\Resource\AbstractFile|\TYPO3\CMS\Core\Resource\Folder|\TYPO3\CMS\Core\Resource\FileReference
         */
        protected $originalResource;

        public function setOriginalResource(\TYPO3\CMS\Core\Resource\ResourceInterface $originalResource) {}
        /**
         * @return \TYPO3\CMS\Core\Resource\ResourceInterface|\TYPO3\CMS\Core\Resource\Folder|\TYPO3\CMS\Core\Resource\AbstractFile
         */
        public function getOriginalResource() {}
    }

    /**
     * This model represents a back-end user.
     *
     * @api
     */
    class BackendUser extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         * @validate notEmpty
         */
        protected $userName;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var bool
         */
        protected $isAdministrator;
        /**
         * @var bool
         */
        protected $isDisabled;
        /**
         * @var \DateTime|null
         */
        protected $startDateAndTime;
        /**
         * @var \DateTime|null
         */
        protected $endDateAndTime;
        /**
         * @var string
         */
        protected $email;
        /**
         * @var string
         */
        protected $realName;
        /**
         * @var \DateTime|null
         */
        protected $lastLoginDateAndTime;
        /**
         * @var bool
         */
        protected $ipLockIsDisabled;

        /**
         * Gets the user name.
         *
         * @return string the user name, will not be empty
         */
        public function getUserName() {}
        public function setUserName($userName) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Checks whether this user is an administrator.
         *
         * @return bool whether this user is an administrator
         */
        public function getIsAdministrator() {}
        public function setIsAdministrator($isAdministrator) {}
        /**
         * Checks whether this user is disabled.
         *
         * @return bool whether this user is disabled
         */
        public function getIsDisabled() {}
        public function setIsDisabled($isDisabled) {}
        /**
         * Returns the point in time from which this user is enabled.
         *
         * @return \DateTime|null the start date and time
         */
        public function getStartDateAndTime() {}
        public function setStartDateAndTime(\DateTime $dateAndTime = null) {}
        /**
         * Returns the point in time before which this user is enabled.
         *
         * @return \DateTime|null the end date and time
         */
        public function getEndDateAndTime() {}
        public function setEndDateAndTime(\DateTime $dateAndTime = null) {}
        /**
         * Gets the e-mail address of this user.
         *
         * @return string the e-mail address, might be empty
         */
        public function getEmail() {}
        public function setEmail($email) {}
        /**
         * Returns this user's real name.
         *
         * @return string the real name. might be empty
         */
        public function getRealName() {}
        public function setRealName($name) {}
        /**
         * Checks whether this user is currently activated.
         *
         * This function takes the "disabled" flag, the start date/time and the end date/time into account.
         *
         * @return bool whether this user is currently activated
         */
        public function isActivated() {}
        /**
         * Checks whether this user is activated as far as the start date and time is concerned.
         *
         * @return bool whether this user is activated as far as the start date and time is concerned
         */
        protected function isActivatedViaStartDateAndTime() {}
        /**
         * Checks whether this user is activated as far as the end date and time is concerned.
         *
         * @return bool whether this user is activated as far as the end date and time is concerned
         */
        protected function isActivatedViaEndDateAndTime() {}
        public function setIpLockIsDisabled($disableIpLock) {}
        /**
         * Checks whether the IP lock for this user is disabled.
         *
         * @return bool whether the IP lock for this user is disabled
         */
        public function getIpLockIsDisabled() {}
        /**
         * Gets this user's last login date and time.
         *
         * @return \DateTime|null this user's last login date and time, will be NULL if this user has never logged in before
         */
        public function getLastLoginDateAndTime() {}
        public function setLastLoginDateAndTime(\DateTime $dateAndTime = null) {}
    }

    /**
     * A file object (File Abstraction Layer)
     *
     * @api experimental! This class is experimental and subject to change!
     */
    abstract class AbstractFileCollection extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var \TYPO3\CMS\Core\Resource\Collection\AbstractFileCollection
         */
        protected $object;

        public function setObject(\TYPO3\CMS\Core\Resource\Collection\AbstractFileCollection $object) {}
        /**
         * @return \TYPO3\CMS\Core\Resource\Collection\AbstractFileCollection
         */
        public function getObject() {}
    }

    /**
     * A file object (File Abstraction Layer)
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class File extends \typo3\cms\extbase\domain\model\abstractfilefolder {
        /**
         * @return \TYPO3\CMS\Core\Resource\File
         */
        public function getOriginalResource() {}
    }

    /**
     * A Frontend User
     *
     * @api
     */
    class FrontendUser extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $username;
        /**
         * @var string
         */
        protected $password;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup>
         */
        protected $usergroup;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var string
         */
        protected $firstName;
        /**
         * @var string
         */
        protected $middleName;
        /**
         * @var string
         */
        protected $lastName;
        /**
         * @var string
         */
        protected $address;
        /**
         * @var string
         */
        protected $telephone;
        /**
         * @var string
         */
        protected $fax;
        /**
         * @var string
         */
        protected $email;
        /**
         * @var string
         */
        protected $lockToDomain;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $zip;
        /**
         * @var string
         */
        protected $city;
        /**
         * @var string
         */
        protected $country;
        /**
         * @var string
         */
        protected $www;
        /**
         * @var string
         */
        protected $company;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Extbase\Domain\Model\FileReference>
         */
        protected $image;
        /**
         * @var \DateTime|null
         */
        protected $lastlogin;

        public function __construct($username = '', $password = '') {}
        public function setUsername($username) {}
        /**
         * Returns the username value
         *
         * @return string
         * @api
         */
        public function getUsername() {}
        public function setPassword($password) {}
        /**
         * Returns the password value
         *
         * @return string
         * @api
         */
        public function getPassword() {}
        public function setUsergroup(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $usergroup) {}
        public function addUsergroup(\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup $usergroup) {}
        public function removeUsergroup(\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup $usergroup) {}
        /**
         * Returns the usergroups. Keep in mind that the property is called "usergroup"
         * although it can hold several usergroups.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage An object storage containing the usergroup
         * @api
         */
        public function getUsergroup() {}
        public function setName($name) {}
        /**
         * Returns the name value
         *
         * @return string
         * @api
         */
        public function getName() {}
        public function setFirstName($firstName) {}
        /**
         * Returns the firstName value
         *
         * @return string
         * @api
         */
        public function getFirstName() {}
        public function setMiddleName($middleName) {}
        /**
         * Returns the middleName value
         *
         * @return string
         * @api
         */
        public function getMiddleName() {}
        public function setLastName($lastName) {}
        /**
         * Returns the lastName value
         *
         * @return string
         * @api
         */
        public function getLastName() {}
        public function setAddress($address) {}
        /**
         * Returns the address value
         *
         * @return string
         * @api
         */
        public function getAddress() {}
        public function setTelephone($telephone) {}
        /**
         * Returns the telephone value
         *
         * @return string
         * @api
         */
        public function getTelephone() {}
        public function setFax($fax) {}
        /**
         * Returns the fax value
         *
         * @return string
         * @api
         */
        public function getFax() {}
        public function setEmail($email) {}
        /**
         * Returns the email value
         *
         * @return string
         * @api
         */
        public function getEmail() {}
        public function setLockToDomain($lockToDomain) {}
        /**
         * Returns the lockToDomain value
         *
         * @return string
         * @api
         */
        public function getLockToDomain() {}
        public function setTitle($title) {}
        /**
         * Returns the title value
         *
         * @return string
         * @api
         */
        public function getTitle() {}
        public function setZip($zip) {}
        /**
         * Returns the zip value
         *
         * @return string
         * @api
         */
        public function getZip() {}
        public function setCity($city) {}
        /**
         * Returns the city value
         *
         * @return string
         * @api
         */
        public function getCity() {}
        public function setCountry($country) {}
        /**
         * Returns the country value
         *
         * @return string
         * @api
         */
        public function getCountry() {}
        public function setWww($www) {}
        /**
         * Returns the www value
         *
         * @return string
         * @api
         */
        public function getWww() {}
        public function setCompany($company) {}
        /**
         * Returns the company value
         *
         * @return string
         * @api
         */
        public function getCompany() {}
        public function setImage(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $image) {}
        /**
         * Gets the image value
         *
         * @api
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        public function getImage() {}
        public function setLastlogin(\DateTime $lastlogin) {}
        /**
         * Returns the lastlogin value
         *
         * @return \DateTime
         * @api
         */
        public function getLastlogin() {}
    }

    /**
     * This model represents a backend usergroup.
     *
     * @api
     */
    class BackendUserGroup extends \typo3\cms\extbase\domainobject\abstractentity {
        const FILE_OPPERATIONS = 1;
        const DIRECTORY_OPPERATIONS = 4;
        const DIRECTORY_REMOVE_RECURSIVELY = 16;
        const DIRECTORY_COPY = 8;

        /**
         * @var string
         * @validate notEmpty
         */
        protected $title;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Extbase\Domain\Model\BackendUserGroup>
         */
        protected $subGroups;
        /**
         * @var string
         */
        protected $modules;
        /**
         * @var string
         */
        protected $tablesListening;
        /**
         * @var string
         */
        protected $tablesModify;
        /**
         * @var string
         */
        protected $pageTypes;
        /**
         * @var string
         */
        protected $allowedExcludeFields;
        /**
         * @var string
         */
        protected $explicitlyAllowAndDeny;
        /**
         * @var string
         */
        protected $allowedLanguages;
        /**
         * @var bool
         */
        protected $workspacePermission;
        /**
         * @var string
         */
        protected $databaseMounts;
        /**
         * @var int
         */
        protected $fileOperationPermissions;
        /**
         * @var string
         */
        protected $lockToDomain;
        /**
         * @var string
         */
        protected $tsConfig;

        /**
         * Constructs this backend usergroup
         */
        public function __construct() {}
        public function setTitle($title) {}
        /**
         * Getter for title
         *
         * @return string
         */
        public function getTitle() {}
        public function setDescription($description) {}
        /**
         * Getter for description
         *
         * @return string
         */
        public function getDescription() {}
        public function setSubGroups(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $subGroups) {}
        public function addSubGroup(\TYPO3\CMS\Extbase\Domain\Model\BackendUserGroup $beGroup) {}
        public function removeSubGroup(\TYPO3\CMS\Extbase\Domain\Model\BackendUserGroup $groupToDelete) {}
        /**
         * Remove all sub groups from this backend user group
         */
        public function removeAllSubGroups() {}
        /**
         * Getter of sub groups
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        public function getSubGroups() {}
        public function setModules($modules) {}
        /**
         * Getter for modules
         *
         * @return string
         */
        public function getModules() {}
        public function setTablesListening($tablesListening) {}
        /**
         * Getter for tables listening
         *
         * @return string
         */
        public function getTablesListening() {}
        public function setTablesModify($tablesModify) {}
        /**
         * Getter for tables modify
         *
         * @return string
         */
        public function getTablesModify() {}
        public function setPageTypes($pageTypes) {}
        /**
         * Getter for page types
         *
         * @return string
         */
        public function getPageTypes() {}
        public function setAllowedExcludeFields($allowedExcludeFields) {}
        /**
         * Getter for allowed exclude fields
         *
         * @return string
         */
        public function getAllowedExcludeFields() {}
        public function setExplicitlyAllowAndDeny($explicitlyAllowAndDeny) {}
        /**
         * Getter for explicitly allow and deny
         *
         * @return string
         */
        public function getExplicitlyAllowAndDeny() {}
        public function setAllowedLanguages($allowedLanguages) {}
        /**
         * Getter for allowed languages
         *
         * @return string
         */
        public function getAllowedLanguages() {}
        public function setWorkspacePermissions($workspacePermission) {}
        /**
         * Getter for workspace permission
         *
         * @return bool
         */
        public function getWorkspacePermission() {}
        public function setDatabaseMounts($databaseMounts) {}
        /**
         * Getter for database mounts
         *
         * @return string
         */
        public function getDatabaseMounts() {}
        public function setFileOperationPermissions($fileOperationPermissions) {}
        /**
         * Getter for file operation permissions
         *
         * @return int
         */
        public function getFileOperationPermissions() {}
        /**
         * Check if file operations like upload, copy, move, delete, rename, new and
         * edit files is allowed.
         *
         * @return bool
         */
        public function isFileOperationAllowed() {}
        public function setFileOperationAllowed($value) {}
        /**
         * Check if folder operations like move, delete, rename, and new are allowed.
         *
         * @return bool
         */
        public function isDirectoryOperationAllowed() {}
        public function setDirectoryOperationAllowed($value) {}
        /**
         * Check if it is allowed to copy folders.
         *
         * @return bool
         */
        public function isDirectoryCopyAllowed() {}
        public function setDirectoryCopyAllowed($value) {}
        /**
         * Check if it is allowed to remove folders recursively.
         *
         * @return bool
         */
        public function isDirectoryRemoveRecursivelyAllowed() {}
        public function setDirectoryRemoveRecursivelyAllowed($value) {}
        public function setLockToDomain($lockToDomain) {}
        /**
         * Getter for lock to domain
         *
         * @return string
         */
        public function getLockToDomain() {}
        public function setTsConfig($tsConfig) {}
        /**
         * Getter for ts config
         *
         * @return string
         */
        public function getTsConfig() {}
        protected function isPermissionSet($permission) {}
        protected function setPermission($permission, $value) {}
    }

    /**
     * This model represents a file mount.
     *
     * @api
     */
    class FileMount extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * Title of the file mount.
         *
         * @var string
         * @validate notEmpty
         */
        protected $title;
        /**
         * Description of the file mount.
         *
         * @var string
         */
        protected $description;
        /**
         * Path of the file mount.
         *
         * @var string
         * @validate notEmpty
         */
        protected $path;
        /**
         * Determines whether the value of the path field is to be recognized as an absolute
         * path on the server or a path relative to the fileadmin/ subfolder to the website.
         *
         * If the value is true the path is an absolute one, otherwise the path is relative
         * the fileadmin.
         *
         * @var bool
         */
        protected $isAbsolutePath;
        /**
         * Determines whether this file mount should be read only.
         *
         * @var bool
         */
        protected $readOnly;

        /**
         * Getter for the title of the file mount.
         *
         * @return string
         */
        public function getTitle() {}
        public function setTitle($value) {}
        /**
         * Getter for the description of the file mount.
         *
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Getter for the path of the file mount.
         *
         * @return string
         */
        public function getPath() {}
        public function setPath($value) {}
        /**
         * Getter for the is absolute path of the file mount.
         *
         * @return bool
         */
        public function getIsAbsolutePath() {}
        public function setIsAbsolutePath($value) {}
        public function setReadOnly($readOnly) {}
        /**
         * Getter for the readOnly property of the file mount.
         *
         * @return bool
         */
        public function isReadOnly() {}
    }

    /**
     * A folder object (File Abstraction Layer)
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class Folder extends \typo3\cms\extbase\domain\model\abstractfilefolder {}

    /**
     * A Frontend User Group
     *
     * @api
     */
    class FrontendUserGroup extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $lockToDomain;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup>
         */
        protected $subgroup;

        public function __construct($title = '') {}
        public function setTitle($title) {}
        /**
         * Returns the title value
         *
         * @return string
         * @api
         */
        public function getTitle() {}
        public function setLockToDomain($lockToDomain) {}
        /**
         * Returns the lockToDomain value
         *
         * @return string
         * @api
         */
        public function getLockToDomain() {}
        public function setDescription($description) {}
        /**
         * Returns the description value
         *
         * @return string
         * @api
         */
        public function getDescription() {}
        public function setSubgroup(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $subgroup) {}
        public function addSubgroup(\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup $subgroup) {}
        public function removeSubgroup(\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup $subgroup) {}
        /**
         * Returns the subgroups. Keep in mind that the property is called "subgroup"
         * although it can hold several subgroups.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage An object storage containing the subgroups
         * @api
         */
        public function getSubgroup() {}
    }

    /**
     * A file collection object (File Abstraction Layer)
     *
     * @api experimental! This class is experimental and subject to change!
     */
    class FolderBasedFileCollection extends \typo3\cms\extbase\domain\model\abstractfilecollection {}

}

namespace TYPO3\CMS\Extbase\Hook\DataHandler {
    /**
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class CheckFlexFormValue {
        public function checkFlexFormValue_beforeMerge(DataHandler $dataHander, array $currentValue, array $newValue) {}
        protected function removeSwitchableControllerActionsRecursive(array $a) {}
    }

}

namespace TYPO3\CMS\Extbase\Validation {
    /**
     * Validator resolver to automatically find an appropriate validator for a given subject
     */
    class ValidatorResolver implements \typo3\cms\core\singletoninterface {
        const PATTERN_MATCH_VALIDATORS = '/
			(?:^|,\s*)
			(?P<validatorName>[a-z0-9_:.\\\\]+)
			\s*
			(?:\(
				(?P<validatorOptions>(?:\s*[a-z0-9]+\s*=\s*(?:
					"(?:\\\\"|[^"])*"
					|\'(?:\\\\\'|[^\'])*\'
					|(?:\s|[^,"\']*)
				)(?:\s|,)*)*)
			\))?
		/ixS';
        const PATTERN_MATCH_VALIDATOROPTIONS = '/
			\s*
			(?P<optionName>[a-z0-9]+)
			\s*=\s*
			(?P<optionValue>
				"(?:\\\\"|[^"])*"
				|\'(?:\\\\\'|[^\'])*\'
				|(?:\s|[^,"\']*)
			)
		/ixS';

        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var array
         */
        protected $baseValidatorConjunctions;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectReflectionService(\TYPO3\CMS\Extbase\Reflection\ReflectionService $reflectionService) {}
/**
 * @todo remove throwing Exceptions in resolveValidatorObjectName
 */
        public function createValidator(/**
 * @todo remove throwing Exceptions in resolveValidatorObjectName
 */
$validatorType, /**
 * @todo remove throwing Exceptions in resolveValidatorObjectName
 */
array $validatorOptions = [ ]) {}
        public function getBaseValidatorConjunction($targetClassName) {}
        public function buildMethodArgumentsValidatorConjunctions($className, $methodName, array $methodParameters = null, array $methodValidateAnnotations = null) {}
        protected function buildSubObjectValidator(array $objectPath, \TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface $propertyValidator) {}
/** @var \TYPO3\CMS\Extbase\Validation\Validator\GenericObjectValidator $objectValidator */
        protected function buildBaseValidatorConjunction(/** @var \TYPO3\CMS\Extbase\Validation\Validator\GenericObjectValidator $objectValidator */
$indexKey, /** @var \TYPO3\CMS\Extbase\Validation\Validator\GenericObjectValidator $objectValidator */
$targetClassName, /** @var \TYPO3\CMS\Extbase\Validation\Validator\GenericObjectValidator $objectValidator */
array $validationGroups = [ ]) {}
        protected function addCustomValidators($targetClassName, ConjunctionValidator $conjunctionValidator) {}
        protected function parseValidatorAnnotation($validateValue) {}
        protected function parseValidatorOptions($rawValidatorOptions) {}
        protected function unquoteString($quotedValue) {}
        protected function resolveValidatorObjectName($validatorName) {}
        protected function getValidatorType($type) {}
        public function getMethodValidateAnnotations($className, $methodName) {}
    }

    /**
     * This object holds a validation error.
     */
    class Error extends \typo3\cms\extbase\error\error {
        /**
         * @var string
         */
        protected $message;
        /**
         * @var string
         */
        protected $code;

    }

    /**
     * A generic validation exception
     *
     * @api
     */
    class Exception extends \typo3\cms\extbase\exception {}

}

namespace TYPO3\CMS\Extbase\Validation\Validator {
    /**
     * Validator for string length.
     *
     * @api
     */
    class StringLengthValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        public function isValid($value) {}
    }

    /**
     * A generic object validator which allows for specifying property validators
     */
    class GenericObjectValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator implements \typo3\cms\extbase\validation\validator\objectvalidatorinterface {
        /**
         * @var \SplObjectStorage[]
         */
        protected $propertyValidators;
        /**
         * @var \SplObjectStorage
         */
        protected $validatedInstancesContainer;

        public function validate($value) {}
        protected function getPropertyValue($object, $propertyName) {}
/** @var \TYPO3\CMS\Extbase\Error\Result $result */
        protected function checkProperty(/** @var \TYPO3\CMS\Extbase\Error\Result $result */
$value, /** @var \TYPO3\CMS\Extbase\Error\Result $result */
$validators, /** @var \TYPO3\CMS\Extbase\Error\Result $result */
$propertyName) {}
        protected function isValid($object) {}
        public function canValidate($object) {}
        public function addPropertyValidator($propertyName, ValidatorInterface $validator) {}
        protected function isValidatedAlready($object) {}
        public function getPropertyValidators($propertyName = null) {}
        public function setValidatedInstancesContainer(\SplObjectStorage $validatedInstancesContainer) {}
    }

    /**
     * Validator for floats.
     *
     * @api
     */
    class FloatValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * Validator to chain many validators in a disjunction (logical or).
     *
     * @api
     */
    class DisjunctionValidator extends \typo3\cms\extbase\validation\validator\abstractcompositevalidator {
        public function validate($value) {}
    }

    /**
     * Validator for alphanumeric strings
     *
     * @api
     */
    class AlphanumericValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * Validator for boolean values
     */
    class BooleanValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        public function isValid($value) {}
    }

    /**
     * Abstract validator
     */
    abstract class AbstractValidator implements \typo3\cms\extbase\validation\validator\validatorinterface {
        /**
         * Specifies whether this validator accepts empty values.
         *
         * If this is TRUE, the validators isValid() method is not called in case of an empty value
         * Note: A value is considered empty if it is NULL or an empty string!
         * By default all validators except for NotEmpty and the Composite Validators accept empty values
         *
         * @var bool
         */
        protected $acceptsEmptyValues;
        /**
         * This contains the supported options, their default values, types and descriptions.
         *
         * @var array
         */
        protected $supportedOptions;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var \TYPO3\CMS\Extbase\Error\Result
         */
        protected $result;

        public function __construct(array $options = [ ]) {}
        public function validate($value) {}
        abstract protected function isValid($value) ;
        protected function addError($message, $code, array $arguments = [ ], $title = '') {}
        /**
         * Returns the options of this validator
         *
         * @return array
         */
        public function getOptions() {}
        protected function isEmpty($value) {}
        protected function translateErrorMessage($translateKey, $extensionName, $arguments = [ ]) {}
    }

    /**
     * Validator for "plain" text.
     *
     * @api
     */
    class TextValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * A generic collection validator.
     *
     * @api
     */
    class CollectionValidator extends \typo3\cms\extbase\validation\validator\genericobjectvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\ValidatorResolver
         */
        protected $validatorResolver;

        public function injectValidatorResolver(\TYPO3\CMS\Extbase\Validation\ValidatorResolver $validatorResolver) {}
        public function validate($value) {}
        protected function isValid($value) {}
    }

    /**
     * Validator for general numbers.
     *
     * @api
     */
    class NumberValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * Validator to chain many validators in a conjunction (logical and).
     *
     * @api
     */
    class ConjunctionValidator extends \typo3\cms\extbase\validation\validator\abstractcompositevalidator {
/** @var AbstractValidator $validator */
        public function validate(/** @var AbstractValidator $validator */
$value) {}
    }

    /**
     * Validator based on regular expressions.
     *
     * @api
     */
    class RegularExpressionValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        public function isValid($value) {}
    }

    /**
     * Validator for integers.
     *
     * @api
     */
    class IntegerValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * Validator for url.
     *
     * @api
     */
    class UrlValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * A validator which accepts any input.
     *
     * @api
     */
    class RawValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * Validator for general numbers
     *
     * @api
     */
    class NumberRangeValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        public function isValid($value) {}
    }

    /**
     * An abstract composite validator consisting of other validators
     *
     * @api
     */
    abstract class AbstractCompositeValidator implements \countable, \typo3\cms\extbase\validation\validator\objectvalidatorinterface {
        /**
         * This contains the supported options, their default values and descriptions.
         *
         * @var array
         */
        protected $supportedOptions;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var \SplObjectStorage
         */
        protected $validators;
        /**
         * @var \SplObjectStorage
         */
        protected $validatedInstancesContainer;

        public function __construct(array $options = [ ]) {}
        public function addValidator(\TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface $validator) {}
        public function removeValidator(\TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface $validator) {}
        /**
         * Returns the number of validators contained in this conjunction.
         *
         * @return int The number of validators
         * @api
         */
        public function count() {}
        /**
         * Returns the child validators of this Composite Validator
         *
         * @return \SplObjectStorage
         */
        public function getValidators() {}
        /**
         * Returns the options for this validator
         *
         * @return array
         */
        public function getOptions() {}
        public function setValidatedInstancesContainer(\SplObjectStorage $validatedInstancesContainer) {}
    }

    /**
     * Validator for not empty values.
     *
     * @api
     */
    class NotEmptyValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * This validator always needs to be executed even if the given value is empty.
         * See AbstractValidator::validate()
         *
         * @var bool
         */
        protected $acceptsEmptyValues;

        public function isValid($value) {}
    }

    /**
     * Validator for DateTime objects.
     *
     * @api
     */
    class DateTimeValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * Validator for strings.
     *
     * @api
     */
    class StringValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

    /**
     * Validator for email addresses
     *
     * @api
     */
    class EmailAddressValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
        protected function validEmail($emailAddress) {}
    }


    /**
     * Contract for a validator
     *
     * @api
     */
    interface ObjectValidatorInterface extends \typo3\cms\extbase\validation\validator\validatorinterface {
        function setValidatedInstancesContainer(\SplObjectStorage $validatedInstancesContainer) ;
    }

    /**
     * Contract for a validator
     *
     * @api
     */
    interface ValidatorInterface {
        function validate($value) ;
        /**
         * Returns the options of this validator which can be specified in the constructor
         *
         * @return array
         */
        function getOptions() ;
    }

}

namespace TYPO3\CMS\Extbase\Reflection {
    /**
     * A little parser which creates tag objects from doc comments
     */
    class DocCommentParser {
        /**
         * @var array
         */
        static protected $ignoredTags;
        /**
         * @var string The description as found in the doc comment
         */
        protected $description;
        /**
         * @var array An array of tag names and their values (multiple values are possible)
         */
        protected $tags;
        /**
         * @var bool
         */
        private $useIgnoredTags;

        public function __construct($useIgnoredTags = false) {}
        public function parseDocComment($docComment) {}
        /**
         * Returns the tags which have been previously parsed
         *
         * @return array Array of tag names and their (multiple) values
         */
        public function getTagsValues() {}
        public function getTagValues($tagName) {}
        public function isTaggedWith($tagName) {}
        /**
         * Returns the description which has been previously parsed
         *
         * @return string The description which has been parsed
         */
        public function getDescription() {}
        protected function parseTag($line) {}
    }

    /**
     * Provides methods to call appropriate getter/setter on an object given the
     * property name. It does this following these rules:
     * - if the target object is an instance of ArrayAccess, it gets/sets the property
     * - if public getter/setter method exists, call it.
     * - if public property exists, return/set the value of it.
     * - else, throw exception
     */
    class ObjectAccess {
        const ACCESS_PUBLIC = 2;
        const ACCESS_SET = 1;
        const ACCESS_GET = 0;

        public static function getProperty($subject, $propertyName, $forceDirectAccess = false) {}
        public static function getPropertyInternal($subject, $propertyName, $forceDirectAccess = false) {}
        public static function getPropertyPath($subject, $propertyPath) {}
        public static function setProperty($subject, $propertyName, $propertyValue, $forceDirectAccess = false) {}
        public static function getGettablePropertyNames($object) {}
        public static function getSettablePropertyNames($object) {}
        public static function isPropertySettable($object, $propertyName) {}
        public static function isPropertyGettable($object, $propertyName) {}
        public static function getGettableProperties($object) {}
        public static function buildSetterMethodName($propertyName) {}
    }

    /**
     * Reflection service for acquiring reflection based information.
     * Originally based on the TYPO3.Flow reflection service.
     *
     * @api
     */
    class ReflectionService implements \typo3\cms\core\singletoninterface {
        const CACHE_ENTRY_IDENTIFIER = 'ClassSchematas';
        const CACHE_IDENTIFIER = 'extbase_reflection';

        /**
         * @var \TYPO3\CMS\Core\Cache\Frontend\VariableFrontend
         */
        protected $dataCache;
        /**
         * Indicates whether the Reflection cache needs to be updated.
         *
         * This flag needs to be set as soon as new Reflection information was
         * created.
         *
         * @var bool
         */
        protected $dataCacheNeedsUpdate;
        /**
         * Local cache for Class schemata
         *
         * @var array
         */
        protected $classSchemata;
        /**
         * @var bool
         */
        private $cachingEnabled;

        public function __construct(CacheManager $cacheManager = null) {}
        public function __destruct() {}
        public function getClassTagsValues($className) : array {}
        public function getClassTagValues($className, $tag) : array {}
        public function getClassPropertyNames($className) : array {}
        public function getClassSchema($classNameOrObject) : ClassSchema {}
        public function hasMethod($className, $methodName) : bool {}
        public function getMethodTagsValues($className, $methodName) : array {}
        public function getMethodParameters($className, $methodName) : array {}
        public function getPropertyTagsValues($className, $propertyName) : array {}
        public function getPropertyTagValues($className, $propertyName, $tag) : array {}
        public function isClassTaggedWith($className, $tag) : bool {}
        public function isPropertyTaggedWith($className, $propertyName, $tag) : bool {}
        protected function buildClassSchema($className) : ClassSchema {}
    }

    /**
     * A generic Reflection Exception
     */
    class Exception extends \typo3\cms\extbase\exception {}

    /**
     * A class schema
     *
     * @internal
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class ClassSchema {
        const MODELTYPE_VALUEOBJECT = 2;
        const MODELTYPE_ENTITY = 1;

        /**
         * Name of the class this schema is referring to
         *
         * @var string
         */
        protected $className;
        /**
         * Model type of the class this schema is referring to
         *
         * @var int
         */
        protected $modelType;
        /**
         * Whether a repository exists for the class this schema is referring to
         *
         * @var bool
         */
        protected $aggregateRoot;
        /**
         * The name of the property holding the uuid of an entity, if any.
         *
         * @var string
         */
        protected $uuidPropertyName;
        /**
         * Properties of the class which need to be persisted
         *
         * @var array
         */
        protected $properties;
        /**
         * The properties forming the identity of an object
         *
         * @var array
         */
        protected $identityProperties;
        /**
         * Indicates if the class is a singleton or not.
         *
         * @var bool
         */
        private $isSingleton;
        /**
         * @var array
         */
        private $methods;
        /**
         * @var array
         */
        private $tags;
        /**
         * @var array
         */
        private $injectProperties;
        /**
         * @var array
         */
        private $injectMethods;

        public function __construct($className) {}
/** @var Cascade $annotation */
        protected function reflectProperties(/** @var Cascade $annotation */
\ReflectionClass $reflectionClass) {}
        protected function reflectMethods(\ReflectionClass $reflectionClass) {}
        /**
         * Returns the class name this schema is referring to
         *
         * @return string The class name
         */
        public function getClassName() : string {}
        public function addProperty($name, $type, $lazy = false, $cascade = '') {}
        public function getProperty($propertyName) {}
        /**
         * Returns all properties defined in this schema
         *
         * @return array
         */
        public function getProperties() {}
        public function setModelType($modelType) {}
        /**
         * Returns the model type of the class this schema is referring to.
         *
         * @return int The model type, one of the MODELTYPE_* constants.
         * @deprecated
         */
        public function getModelType() {}
        public function setAggregateRoot($isRoot) {}
        /**
         * Whether the class is an aggregate root and therefore accessible through
         * a repository.
         *
         * @return bool TRUE if it is managed
         */
        public function isAggregateRoot() : bool {}
        public function hasProperty($propertyName) : bool {}
        public function setUuidPropertyName($propertyName) {}
        /**
         * Gets the name of the property marked as uuid of an object
         *
         * @return string
         * @deprecated
         */
        public function getUuidPropertyName() {}
        public function markAsIdentityProperty($propertyName) {}
        /**
         * Gets the properties (names and types) forming the identity of an object.
         *
         * @return array
         * @see markAsIdentityProperty()
         * @deprecated
         */
        public function getIdentityProperties() {}
        /**
         * @return bool
         */
        public function hasConstructor() : bool {}
        public function getMethod(string $name) : array {}
        /**
         * @return array
         */
        public function getMethods() : array {}
        protected function hasInjectMethodName(\ReflectionMethod $reflectionMethod) : bool {}
        /**
         * @return bool
         * @internal
         */
        public function isModel() : bool {}
        /**
         * @return bool
         * @internal
         */
        public function isEntity() : bool {}
        /**
         * @return bool
         * @internal
         */
        public function isValueObject() : bool {}
        /**
         * @return bool
         */
        public function isSingleton() : bool {}
        public function hasMethod(string $methodName) : bool {}
        /**
         * @return array
         */
        public function getTags() : array {}
        /**
         * @return bool
         */
        public function hasInjectProperties() : bool {}
        /**
         * @return bool
         */
        public function hasInjectMethods() : bool {}
        /**
         * @return array
         */
        public function getInjectMethods() : array {}
        /**
         * @return array
         */
        public function getInjectProperties() : array {}
        /**
         * @return array
         */
        public function getConstructorArguments() : array {}
    }

}

namespace TYPO3\CMS\Extbase\Utility {
    /**
     * Localization helper which should be used to fetch localized labels.
     *
     * @api
     */
    class LocalizationUtility {
        /**
         * @var string
         */
        static protected $locallangPath;
        /**
         * Local Language content
         *
         * @var array
         */
        static protected $LOCAL_LANG;
        /**
         * Contains those LL keys, which have been set to (empty) in TypoScript.
         * This is necessary, as we cannot distinguish between a nonexisting
         * translation and a label that has been cleared by TS.
         * In both cases ['key'][0]['target'] is "".
         *
         * @var array
         */
        static protected $LOCAL_LANG_UNSET;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        static protected $configurationManager;

        public static function translate($key, $extensionName = null, $arguments = null, string $languageKey = null, array $alternativeLanguageKeys = null) {}
        protected static function initializeLocalization(string $languageFilePath, string $languageKey, array $alternativeLanguageKeys, string $extensionName = null) {}
        protected static function getLanguageFilePath(string $extensionName) : string {}
        /** @var $locales \TYPO3\CMS\Core\Localization\Locales */
        protected static function getLanguageKeys() : array {}
        protected static function loadTypoScriptLabels($extensionName, $languageFilePath) {}
        protected static function flattenTypoScriptLabelArray(array $labelValues, $parentKey = '') {}
        /**
         * Returns instance of the configuration manager
         *
         * @return \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected static function getConfigurationManager() {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected static function getTypoScriptFrontendController() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected static function getLanguageService() {}
    }

    /**
     * PHP type handling functions
     */
    class TypeHandlingUtility {
        const PARSE_TYPE_PATTERN = '/^\\\\?(?P<type>integer|int|float|double|boolean|bool|string|DateTime|Tx_[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9\\\\_]+|object|resource|array|ArrayObject|SplObjectStorage|TYPO3\\\\CMS\\\\Extbase\\\\Persistence\\\\ObjectStorage)(?:<\\\\?(?P<elementType>[a-zA-Z0-9\\\\_]+)>)?/';
        const LITERAL_TYPE_PATTERN = '/^(?:integer|int|float|double|boolean|bool|string)$/';

        /**
         * @var array
         */
        static protected $collectionTypes;

        public static function parseType($type) {}
        public static function normalizeType($type) {}
        public static function isLiteral($type) {}
        public static function isSimpleType($type) {}
        public static function isCoreType($type) {}
        public static function isCollectionType($type) {}
        public static function isValidTypeForMultiValueComparison($value) {}
        public static function hex2bin($hexadecimalData) {}
    }

    /**
     * A debugging utility class
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     * @api
     */
    class DebuggerUtility {
        const HTML_INDENT = '&nbsp;&nbsp;&nbsp;';
        const PLAINTEXT_INDENT = '   ';

        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        static protected $renderedObjects;
        /**
         * Hardcoded list of Extbase class names (regex) which should not be displayed during debugging
         *
         * @var array
         */
        static protected $blacklistedClassNames;
        /**
         * Hardcoded list of property names (regex) which should not be displayed during debugging
         *
         * @var array
         */
        static protected $blacklistedPropertyNames;
        /**
         * Is set to TRUE once the CSS file is included in the current page to prevent double inclusions of the CSS file.
         *
         * @var bool
         */
        static protected $stylesheetEchoed;
        /**
         * Defines the max recursion depth of the dump, set to 8 due to common memory limits
         *
         * @var int
         */
        static protected $maxDepth;

        /**
         * Clear the state of the debugger
         */
        protected static function clearState() {}
        protected static function renderDump($value, $level, $plainText, $ansiColors) {}
        protected static function renderArray($array, $level, $plainText = false, $ansiColors = false) {}
        protected static function renderObject($object, $level, $plainText = false, $ansiColors = false) {}
        protected static function renderClosure($object, $level, $plainText = false, $ansiColors = false) {}
        protected static function isBlacklisted($value) {}
        protected static function isAlreadyRendered($object) {}
        protected static function renderHeader($object, $level, $plainText, $ansiColors) {}
        protected static function renderContent($object, $level, $plainText, $ansiColors) {}
        protected static function renderCollection($collection, $level, $plainText, $ansiColors) {}
        protected static function ansiEscapeWrap($string, $ansiColors, $enable = true) {}
        public static function var_dump($variable, $title = null, $maxDepth = 8, $plainText = false, $ansiColors = true, $return = false, $blacklistedClassNames = null, $blacklistedPropertyNames = null) {}
    }

    /**
     * Utilities to simulate a frontend in backend context.
     *
     * ONLY USED INTERNALLY, MIGHT CHANGE WITHOUT NOTICE!
     */
    class FrontendSimulatorUtility {
        /**
         * @var mixed
         */
        static protected $tsfeBackup;

        public static function simulateFrontendEnvironment(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj = null) {}
        /**
         * Resets $GLOBALS['TSFE'] if it was previously changed by simulateFrontendEnvironment()
         *
         * @see simulateFrontendEnvironment()
         */
        public static function resetFrontendEnvironment() {}
    }

    /**
     * Utilities to manage plugins and  modules of an extension. Also useful to auto-generate the autoloader registry
     * file ext_autoload.php.
     */
    class ExtensionUtility {
        const PLUGIN_TYPE_CONTENT_ELEMENT = 'CType';
        const PLUGIN_TYPE_PLUGIN = 'list_type';

        public static function configurePlugin($extensionName, $pluginName, array $controllerActions, array $nonCacheableControllerActions = [ ], $pluginType = self::PLUGIN_TYPE_PLUGIN) {}
        public static function registerPlugin($extensionName, $pluginName, $pluginTitle, $pluginIcon = null) {}
        public static function registerModule($extensionName, $mainModuleName = '', $subModuleName = '', $position = '', array $controllerActions = [ ], array $moduleConfiguration = [ ]) {}
        public static function registerTypeConverter($typeConverterClassName) {}
        protected static function checkVendorNameFormat($vendorName, $extensionName) {}
        protected static function checkExtensionNameFormat($extensionName) {}
        protected static function checkPluginNameFormat($pluginName) {}
    }

}

namespace TYPO3\CMS\Extbase\Utility\Exception {
    /**
     * An Invalid Type Exception
     */
    class InvalidTypeException extends \typo3\cms\extbase\exception {}

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Configuration {
    /**
     * Test case
     */
    class FrontendConfigurationManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockContentObject;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $frontendConfigurationManager;
        /**
         * @var \TYPO3\CMS\Core\TypoScript\TypoScriptService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $mockTypoScriptService;

        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getTypoScriptSetupReturnsSetupFromTsfe() {}
        /**
         * @test
         */
        public function getPluginConfigurationReturnsEmptyArrayIfNoPluginConfigurationWasFound() {}
        /**
         * @test
         */
        public function getPluginConfigurationReturnsExtensionConfiguration() {}
        /**
         * @test
         */
        public function getPluginConfigurationReturnsPluginConfiguration() {}
        /**
         * @test
         */
        public function getPluginConfigurationRecursivelyMergesExtensionAndPluginConfiguration() {}
        /**
         * @test
         */
        public function getSwitchableControllerActionsReturnsEmptyArrayByDefault() {}
        /**
         * @test
         */
        public function getSwitchableControllerActionsReturnsConfigurationStoredInExtconf() {}
        /**
         * @test
         */
        public function overrideSwitchableControllerActionsFromFlexFormReturnsUnchangedFrameworkConfigurationIfNoFlexFormConfigurationIsFound() {}
        /**
         * @test
         */
        public function overrideSwitchableControllerActionsFromFlexFormMergesNonCacheableActions() {}
        /**
         * @test
         */
        public function overrideSwitchableControllerActionsThrowsExceptionIfFlexFormConfigurationIsInvalid() {}
        /** @var \TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function getContextSpecificFrameworkConfigurationCorrectlyCallsOverrideMethods() {}
        /** @var $cObjectMock \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
        public function storagePidsAreExtendedIfRecursiveSearchIsConfigured() {}
        /**
         * @test
         */
        public function storagePidsAreExtendedIfRecursiveSearchIsConfiguredAndWithPidIncludedForNegativePid() {}
        /**
         * @test
         */
        public function storagePidsAreNotExtendedIfRecursiveSearchIsNotConfigured() {}
        /** @var $cObjectMock \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
        public function storagePidsAreNotExtendedIfRecursiveSearchIsConfiguredForZeroLevels() {}
        /**
         * @test
         */
        public function mergeConfigurationIntoFrameworkConfigurationWorksAsExpected() {}
        /**
         * @test
         */
        public function overrideStoragePidIfStartingPointIsSetOverridesCorrectly() {}
        /**
         * @test
         */
        public function overrideStoragePidIfStartingPointIsSetCorrectlyHandlesEmptyValuesFromGetTreeList() {}
        /** @var $flexFormService \TYPO3\CMS\Extbase\Service\FlexFormService|\PHPUnit_Framework_MockObject_MockObject */
        public function overrideConfigurationFromFlexFormChecksForDataIsString() {}
        /** @var $flexFormService \TYPO3\CMS\Extbase\Service\FlexFormService|\PHPUnit_Framework_MockObject_MockObject */
        public function overrideConfigurationFromFlexFormChecksForDataIsStringAndEmpty() {}
        /**
         * @test
         */
        public function overrideConfigurationFromFlexFormChecksForDataIsArray() {}
        /** @var $flexFormService \TYPO3\CMS\Extbase\Service\FlexFormService|\PHPUnit_Framework_MockObject_MockObject */
        public function overrideConfigurationFromFlexFormChecksForDataIsArrayAndEmpty() {}
        /** @var $frontendConfigurationManager \TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager */
        public function overrideConfigurationFromPluginOverridesCorrectly() {}
    }

    /**
     * Test case
     */
    class BackendConfigurationManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\BackendConfigurationManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $backendConfigurationManager;
        /**
         * @var \TYPO3\CMS\Core\TypoScript\TypoScriptService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $mockTypoScriptService;

        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getCurrentPageIdReturnsPageIdFromGet() {}
        /**
         * @test
         */
        public function getCurrentPageIdReturnsPageIdFromPost() {}
        /**
         * @test
         */
        public function getPluginConfigurationReturnsEmptyArrayIfNoPluginConfigurationWasFound() {}
        /**
         * @test
         */
        public function getPluginConfigurationReturnsExtensionConfiguration() {}
        /**
         * @test
         */
        public function getPluginConfigurationReturnsPluginConfiguration() {}
        /**
         * @test
         */
        public function getPluginConfigurationRecursivelyMergesExtensionAndPluginConfiguration() {}
        /**
         * @test
         */
        public function getSwitchableControllerActionsReturnsEmptyArrayByDefault() {}
        /**
         * @test
         */
        public function getSwitchableControllerActionsReturnsConfigurationStoredInExtconf() {}
        /**
         * @test
         */
        public function getContextSpecificFrameworkConfigurationReturnsUnmodifiedFrameworkConfigurationIfRequestHandlersAreConfigured() {}
        /**
         * @test
         */
        public function getContextSpecificFrameworkConfigurationSetsDefaultRequestHandlersIfRequestHandlersAreNotConfigured() {}
        /** @var \TYPO3\CMS\Core\Authentication\BackendUserAuthentication|ObjectProphecy $beUserAuthentication */
        public function storagePidsAreExtendedIfRecursiveSearchIsConfigured() {}
        /**
         * @test
         */
        public function storagePidsAreExtendedIfRecursiveSearchIsConfiguredAndWithPidIncludedForNegativePid() {}
        /**
         * @test
         */
        public function storagePidsAreNotExtendedIfRecursiveSearchIsNotConfigured() {}
        /**
         * @test
         */
        public function storagePidsAreNotExtendedIfRecursiveSearchIsConfiguredForZeroLevels() {}
    }

    /**
     * Test case
     */
    class AbstractConfigurationManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\AbstractConfigurationManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $abstractConfigurationManager;
        /**
         * @var \TYPO3\CMS\Core\TypoScript\TypoScriptService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $mockTypoScriptService;
        /**
         * @var array
         */
        protected $testTypoScriptSetup;
        /**
         * @var array
         */
        protected $testTypoScriptSetupConverted;
        /**
         * @var array
         */
        protected $testPluginConfiguration;
        /**
         * @var array
         */
        protected $testSwitchableControllerActions;

        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function setConfigurationResetsConfigurationCache() {}
        /**
         * @test
         */
        public function setConfigurationSetsExtensionAndPluginName() {}
        /**
         * @test
         */
        public function setConfigurationConvertsTypoScriptArrayToPlainArray() {}
        /**
         * @test
         */
        public function getConfigurationReturnsCachedResultOfCurrentPlugin() {}
        /**
         * @test
         */
        public function getConfigurationReturnsCachedResultForGivenExtension() {}
        /**
         * @test
         */
        public function getConfigurationRecursivelyMergesCurrentPluginConfigurationWithFrameworkConfiguration() {}
        /**
         * @test
         */
        public function getConfigurationRecursivelyMergesPluginConfigurationOfSpecifiedPluginWithFrameworkConfiguration() {}
        /**
         * @test
         */
        public function getConfigurationDoesNotOverrideConfigurationWithContextSpecificFrameworkConfigurationIfDifferentPluginIsSpecified() {}
        /**
         * @test
         */
        public function getConfigurationOverridesConfigurationWithContextSpecificFrameworkConfigurationIfNoPluginWasSpecified() {}
        /**
         * @test
         */
        public function getConfigurationOverridesConfigurationWithContextSpecificFrameworkConfigurationIfSpecifiedPluginIsTheCurrentPlugin() {}
        /**
         * @test
         */
        public function getConfigurationStoresResultInConfigurationCache() {}
        /**
         * @test
         */
        public function getConfigurationRetrievesStoragePidIncludingGivenStoragePidWithRecursiveSetForSingleStoragePid() {}
        /**
         * @test
         */
        public function getConfigurationRetrievesStoragePidIncludingGivenStoragePidWithRecursiveSetForMultipleStoragePid() {}
        /**
         * @test
         */
        public function switchableControllerActionsAreNotOverriddenIfPluginNameIsSpecified() {}
        /** @var \TYPO3\CMS\Extbase\Configuration\AbstractConfigurationManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function switchableControllerActionsAreOverriddenIfSpecifiedPluginIsTheCurrentPlugin() {}
        /**
         * @test
         */
        public function switchableControllerActionsAreOverriddenIfPluginNameIsNotSpecified() {}
        /**
         * @test
         */
        public function orderOfActionsCanBeOverriddenForCurrentPlugin() {}
        /**
         * @test
         */
        public function newActionsCanBeAddedForCurrentPlugin() {}
        /**
         * @test
         */
        public function controllersCanNotBeOverridden() {}
        /**
         * @test
         */
        public function cachingOfActionsCanNotBeChanged() {}
        /**
         * @test
         */
        public function getContentObjectReturnsNullIfNoContentObjectHasBeenSet() {}
        /**
         * @test
         */
        public function getContentObjectTheCurrentContentObject() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Core {
    /**
     * Test case
     */
    class BootstrapTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        protected function tearDown() {}
        /** @var $bootstrapMock \TYPO3\CMS\Extbase\Core\Bootstrap|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function configureObjectManagerRespectsOverridingOfAlternativeObjectRegistrationViaPluginConfiguration() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Mvc {
    /**
     * Test case
     */
    class ResponseTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Response|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $mockResponse;

        protected function setUp() {}
        /**
         * @test
         */
        public function propertyContentInitiallyIsNull() {}
        /**
         * @test
         */
        public function setContentSetsContentCorrectly() {}
        /**
         * @test
         */
        public function appendContentAppendsContentCorrectly() {}
        /**
         * @test
         */
        public function getContentReturnsContentCorrectly() {}
        /**
         * @test
         */
        public function __toStringReturnsActualContent() {}
    }

    /**
     * Test case
     */
    class RequestTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function aSingleArgumentCanBeSetWithSetArgumentAndRetrievedWithGetArgument() {}
        /**
         * @test
         */
        public function setArgumentThrowsExceptionIfTheGivenArgumentNameIsNoString() {}
        /**
         * @test
         */
        public function setArgumentThrowsExceptionIfTheGivenArgumentNameIsAnEmptyString() {}
        /**
         * @test
         */
        public function setArgumentThrowsExceptionIfTheGivenArgumentValueIsAnObject() {}
        /**
         * @test
         */
        public function setArgumentsOverridesAllExistingArguments() {}
        /**
         * @test
         */
        public function setArgumentsCallsSetArgumentForEveryArrayEntry() {}
        /**
         * @test
         */
        public function setArgumentShouldSetControllerExtensionNameIfPackageKeyIsGiven() {}
        /**
         * @test
         */
        public function setArgumentShouldSetControllerSubpackageKeyIfSubpackageKeyIsGiven() {}
        /**
         * @test
         */
        public function setArgumentShouldSetControllerNameIfControllerIsGiven() {}
        /**
         * @test
         */
        public function setArgumentShouldSetControllerActionNameIfActionIsGiven() {}
        /**
         * @test
         */
        public function setArgumentShouldSetFormatIfFormatIsGiven() {}
        /**
         * @test
         */
        public function setArgumentShouldSetVendorIfVendorIsGiven() {}
        /**
         * @test
         */
        public function internalArgumentsShouldNotBeReturnedAsNormalArgument() {}
        /**
         * @test
         */
        public function internalArgumentsShouldBeStoredAsInternalArguments() {}
        /**
         * @test
         */
        public function hasInternalArgumentShouldReturnNullIfArgumentNotFound() {}
        /**
         * @test
         */
        public function setArgumentAcceptsObjectIfArgumentIsInternal() {}
        /**
         * @test
         */
        public function multipleArgumentsCanBeSetWithSetArgumentsAndRetrievedWithGetArguments() {}
        /**
         * @test
         */
        public function hasArgumentTellsIfAnArgumentExists() {}
        /**
         * @test
         */
        public function theActionNameCanBeSetAndRetrieved() {}
        /**
         * @test
         */
        public function theRepresentationFormatCanBeSetAndRetrieved() {}
        /**
         * @test
         */
        public function theRepresentationFormatIsAutomaticallyLowercased() {}
        /**
         * @test
         */
        public function aFlagCanBeSetIfTheRequestNeedsToBeDispatchedAgain() {}
        /**
         * DataProvider for explodeObjectControllerName
         *
         * @return array
         */
        public function controllerArgumentsAndExpectedObjectName() {}
/** @var $request \TYPO3\CMS\Extbase\Mvc\Request */
        public function getControllerObjectNameResolvesControllerObjectNameCorrectly(/** @var $request \TYPO3\CMS\Extbase\Mvc\Request */
$controllerArguments, /** @var $request \TYPO3\CMS\Extbase\Mvc\Request */
$controllerObjectName) {}
/** @var $request \TYPO3\CMS\Extbase\Mvc\Request */
        public function setControllerObjectNameResolvesControllerObjectNameArgumentsCorrectly(/** @var $request \TYPO3\CMS\Extbase\Mvc\Request */
$controllerArguments, /** @var $request \TYPO3\CMS\Extbase\Mvc\Request */
$controllerObjectName) {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Mvc\Web {
    /**
     * Test case
     */
    class RequestBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $requestBuilder;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockConfigurationManager;
        /**
         * @var array
         */
        protected $configuration;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockExtensionService;
        /**
         * @var \TYPO3\CMS\Extbase\Service\EnvironmentService|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockEnvironmentService;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Request|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockRequest;

        protected function setUp() {}
        /**
         */
        protected function injectDependencies() {}
        /**
         * @test
         */
        public function buildReturnsAWebRequestObject() {}
        /**
         * @test
         */
        public function buildSetsRequestPluginName() {}
        /**
         * @test
         */
        public function buildSetsRequestControllerExtensionName() {}
        /**
         * @test
         */
        public function buildSetsRequestControllerName() {}
        /**
         * @test
         */
        public function buildSetsRequestControllerActionName() {}
        /**
         * @test
         */
        public function buildSetsRequestRequestUri() {}
        /**
         * @test
         */
        public function buildSetsRequestBaseUri() {}
        /**
         * @test
         */
        public function buildSetsRequestMethod() {}
        /**
         * @test
         */
        public function buildSetsVendorNameIfConfigured() {}
        /**
         * @test
         */
        public function buildDoesNotSetVendorNameIfNotConfiguredInSecondRequest() {}
        /**
         * @test
         */
        public function buildThrowsExceptionIfExtensionNameIsNotConfigured() {}
        /**
         * @test
         */
        public function buildThrowsExceptionIfPluginNameIsNotConfigured() {}
        /**
         * @test
         */
        public function buildThrowsExceptionIfControllerConfigurationIsEmptyOrNotSet() {}
        /**
         * @test
         */
        public function buildThrowsExceptionIfControllerConfigurationHasNoDefaultActionDefined() {}
        /**
         * @test
         */
        public function buildThrowsExceptionIfNoDefaultControllerCanBeResolved() {}
        /**
         * @test
         */
        public function buildSetsParametersFromGetAndPostVariables() {}
        /**
         * @test
         */
        public function buildSetsFormatFromGetAndPostVariables() {}
        /**
         * @test
         */
        public function buildCorrectlySetsAllowedControllerActions() {}
        /**
         * @test
         */
        public function buildThrowsExceptionIfDefaultControllerCantBeDetermined() {}
        /**
         * @test
         */
        public function buildSetsDefaultControllerIfNoControllerIsSpecified() {}
        /**
         * @test
         */
        public function buildCorrectlySetsSpecifiedControllerNameIfItsAllowedForTheCurrentPlugin() {}
        /**
         * @test
         */
        public function buildThrowsInvalidControllerNameExceptionIfSpecifiedControllerIsNotAllowed() {}
        /**
         * @test
         */
        public function buildThrowsPageNotFoundExceptionIfEnabledAndSpecifiedControllerIsNotAllowed() {}
        /**
         * @test
         */
        public function buildSetsDefaultControllerNameIfSpecifiedControllerIsNotAllowedAndCallDefaultActionIfActionCantBeResolvedIsSet() {}
        /**
         * @test
         */
        public function buildThrowsExceptionIfDefaultActionCantBeDetermined() {}
        /**
         * @test
         */
        public function buildSetsDefaultActionOfTheCurrentControllerIfNoActionIsSpecified() {}
        /**
         * @test
         */
        public function buildCorrectlySetsSpecifiedActionNameForTheDefaultControllerIfItsAllowedForTheCurrentPlugin() {}
        /**
         * @test
         */
        public function buildCorrectlySetsSpecifiedActionNameForTheSpecifiedControllerIfItsAllowedForTheCurrentPlugin() {}
        /**
         * @test
         */
        public function buildThrowsInvalidActionNameExceptionIfSpecifiedActionIsNotAllowed() {}
        /**
         * @test
         */
        public function buildThrowsPageNotFoundExceptionIfEnabledAndSpecifiedActionIsNotAllowed() {}
        /**
         * @test
         */
        public function buildSetsDefaultActionNameIfSpecifiedActionIsNotAllowedAndCallDefaultActionIfActionCantBeResolvedIsSet() {}
        /**
         * @test
         * @see TYPO3\Flow\Tests\Unit\Utility\EnvironmentTest
         */
        public function untangleFilesArrayTransformsTheFilesSuperglobalIntoAManageableForm() {}
    }

    /**
     * Test case
     */
    class CacheHashEnforcerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\CacheHashEnforcer
         */
        protected $subject;
        /**
         * @var TypoScriptFrontendController|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $frontendControllerMock;

        protected function setUp() {}
        /**
         * @test
         */
        public function validateCallsReqCHashIfRequestArgumentsArePresent() {}
        /**
         * @test
         */
        public function validateDoesNotCallsReqCHashIfNoRequestArgumentsArePresent() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Mvc\Web\Routing {
    /**
     * Test case
     */
    class UriBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ConfigurationManagerInterface
         */
        protected $mockConfigurationManager;
        /**
         * @var ContentObjectRenderer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockContentObject;
        /**
         * @var Request|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockRequest;
        /**
         * @var ExtensionService|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockExtensionService;
        /**
         * @var UriBuilder|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $uriBuilder;

        /**
         * @throws \InvalidArgumentException
         * @throws \PHPUnit\Framework\Exception
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function settersAndGettersWorkAsExpected() {}
        /**
         * @test
         */
        public function uriForPrefixesArgumentsWithExtensionAndPluginNameAndSetsControllerArgument() {}
        /**
         * @test
         */
        public function uriForRecursivelyMergesAndOverrulesControllerArgumentsWithArguments() {}
        /**
         * @test
         */
        public function uriForOnlySetsActionArgumentIfSpecified() {}
        /**
         * @test
         */
        public function uriForSetsControllerFromRequestIfControllerIsNotSet() {}
        /**
         * @test
         */
        public function uriForSetsExtensionNameFromRequestIfExtensionNameIsNotSet() {}
        /**
         * @test
         */
        public function uriForSetsPluginNameFromRequestIfPluginNameIsNotSet() {}
        /**
         * @test
         */
        public function uriForDoesNotDisableCacheHashForNonCacheableActions() {}
        /**
         * @test
         */
        public function buildBackendUriKeepsQueryParametersIfAddQueryStringIsSet() {}
        /**
         * @test
         */
        public function buildBackendUriKeepsQueryParametersIfAddQueryStringMethodIsNotSet() {}
        /**
         * return array
         */
        public function buildBackendUriRemovesSpecifiedQueryParametersIfArgumentsToBeExcludedFromQueryStringIsSetDataProvider() {}
        public function buildBackendUriRemovesSpecifiedQueryParametersIfArgumentsToBeExcludedFromQueryStringIsSet(array $parameters, array $postArguments, array $excluded, $expected) {}
        /**
         * @test
         */
        public function buildBackendUriKeepsModuleQueryParametersIfAddQueryStringIsNotSet() {}
        /**
         * @test
         */
        public function buildBackendUriMergesAndOverrulesQueryParametersWithArguments() {}
        /**
         * @test
         */
        public function buildBackendUriConvertsDomainObjectsAfterArgumentsHaveBeenMerged() {}
        /**
         * @test
         */
        public function buildBackendUriRespectsSection() {}
        /**
         * @test
         */
        public function buildBackendUriCreatesAbsoluteUrisIfSpecified() {}
        /**
         * @test
         */
        public function buildBackendUriWithQueryStringMethodPostGetMergesParameters() {}
        /**
         * @test
         */
        public function buildBackendUriWithQueryStringMethodGetPostMergesParameters() {}
        private function rawUrlEncodeSquareBracketsInUrl($string) {}
        /**
         * @test
         */
        public function buildFrontendUriCreatesTypoLink() {}
        /**
         * @test
         */
        public function buildFrontendUriCreatesRelativeUrisByDefault() {}
        /**
         * @test
         */
        public function buildFrontendUriDoesNotStripLeadingSlashesFromRelativeUris() {}
        /** @var UriBuilder|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $uriBuilder */
        public function buildFrontendUriCreatesAbsoluteUrisIfSpecified() {}
        /**
         * @test
         */
        public function buildFrontendUriSetsAbsoluteUriSchemeIfSpecified() {}
        /** @var UriBuilder|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $uriBuilder */
        public function buildFrontendUriDoesNotSetAbsoluteUriSchemeIfCreateAbsoluteUriIsFalse() {}
        /**
         * @test
         */
        public function resetSetsAllOptionsToTheirDefaultValue() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationRespectsSpecifiedTargetPageUid() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationUsesCurrentPageUidIfTargetPageUidIsNotSet() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationProperlySetsAdditionalArguments() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationProperlySetsAddQueryString() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationProperlySetsAddQueryStringMethod() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationConvertsDomainObjects() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationResolvesPageTypeFromFormat() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationResolvesDefaultPageTypeFromFormatIfNoMappingIsConfigured() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationResolvesDefaultPageTypeFromFormatIfFormatIsNotMapped() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationDisablesCacheHashIfNoCacheIsSet() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationDoesNotSetUseCacheHashOptionIfUseCacheHashIsDisabled() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationConsidersSection() {}
        /**
         * @test
         */
        public function buildTypolinkConfigurationLinkAccessRestrictedPagesSetting() {}
        /**
         * @test
         */
        public function convertDomainObjectsToIdentityArraysConvertsDomainObjects() {}
        /**
         * @test
         */
        public function convertDomainObjectsToIdentityArraysConvertsObjectStoragesWithDomainObjects() {}
        /** @var UriBuilder|\PHPUnit_Framework_MockObject_MockObject|object $mockUriBuilder */
        public function conversionOfTansientObjectsIsInvoked() {}
        /** @var UriBuilder|\PHPUnit_Framework_MockObject_MockObject|object $mockUriBuilder */
        public function conversionOfTansientObjectsThrowsExceptionForOtherThanValueObjects() {}
        /**
         * @test
         */
        public function tansientObjectsAreConvertedToAnArrayOfProperties() {}
        /**
         * @test
         */
        public function tansientObjectsWithObjectStorageAreConvertedToAnArrayOfProperties() {}
        /**
         * @test
         */
        public function tansientObjectsAreRecursivelyConverted() {}
        /**
         * @test
         */
        public function removeDefaultControllerAndActionDoesNotModifyArgumentsifSpecifiedControlerAndActionIsNotEqualToDefaults() {}
        /**
         * @test
         */
        public function removeDefaultControllerAndActionRemovesControllerIfItIsEqualToTheDefault() {}
        /**
         * @test
         */
        public function removeDefaultControllerAndActionRemovesActionIfItIsEqualToTheDefault() {}
        /**
         * @test
         */
        public function removeDefaultControllerAndActionRemovesControllerAndActionIfBothAreEqualToTheDefault() {}
        /**
         * @return array
         */
        public function convertIteratorToArrayConvertsIteratorsToArrayProvider() {}
        public function convertIteratorToArrayConvertsIteratorsToArray($iterator) {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Mvc\Web\Routing\Fixtures {
    /**
     * Fixture overwriting uid
     */
    class ValueObjectFixture extends \typo3\cms\extbase\domainobject\abstractvalueobject {
        public $name;
        public $object;
        public $uid;

    }

    /**
     * Fixture overwriting uid
     */
    class EntityFixture extends \typo3\cms\extbase\domainobject\abstractentity {
        public $name;
        public $uid;

    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Mvc\Cli {
    /**
     * Test case
     */
    class RequestBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\RequestBuilder|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_Comparator_MockObject
         */
        protected $requestBuilder;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\Request|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $request;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\Command
         */
        protected $mockCommand;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\CommandManager
         */
        protected $mockCommandManager;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $mockReflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockConfigurationManager;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * Checks if a CLI request specifying a package, controller and action name results in the expected request object
         *
         * @test
         */
        public function cliAccessWithExtensionControllerAndActionNameBuildsCorrectRequest() {}
        /**
         * @test
         */
        public function ifCommandCantBeResolvedTheHelpScreenIsShown() {}
        /**
         * @test
         */
        public function argumentWithValueSeparatedByEqualSignBuildsCorrectRequest() {}
        /**
         * Checks if a CLI request specifying some "console style" (--my-argument=value) arguments results in the expected request object
         *
         * @test
         */
        public function cliAccessWithExtensionControllerActionAndArgumentsBuildsCorrectRequest() {}
        /**
         * Checks if a CLI request specifying some "console style" (--my-argument =value) arguments with spaces between name and value results in the expected request object
         *
         * @test
         */
        public function checkIfCLIAccesWithPackageControllerActionAndArgumentsToleratesSpaces() {}
        /**
         * Checks if a CLI request specifying some short "console style" (-c value or -c=value or -c = value) arguments results in the expected request object
         *
         * @test
         */
        public function CLIAccesWithShortArgumentsBuildsCorrectRequest() {}
        /**
         * Checks if a CLI request specifying some mixed "console style" (-c or --my-argument -f=value) arguments with and
         * without values results in the expected request object
         *
         * @test
         */
        public function CLIAccesWithArgumentsWithAndWithoutValuesBuildsCorrectRequest() {}
        /**
         * @test
         */
        public function insteadOfNamedArgumentsTheArgumentsCanBePassedUnnamedInTheCorrectOrder() {}
        /**
         * @test
         */
        public function argumentsAreDetectedAfterOptions() {}
        /**
         * @test
         */
        public function exceedingArgumentsMayBeSpecified() {}
        /**
         * @test
         */
        public function ifNamedArgumentsAreUsedAllRequiredArgumentsMustBeNamed() {}
        /**
         * @test
         */
        public function ifUnnamedArgumentsAreUsedAllRequiredArgumentsMustBeUnnamed() {}
        /**
         * @test
         */
        public function booleanOptionsAreConsideredEvenIfAnUnnamedArgumentFollows() {}
        /**
         * @test
         */
        public function booleanOptionsCanHaveOnlyCertainValuesIfTheValueIsAssignedWithoutEqualSign() {}
    }

    /**
     * Test case
     */
    class CommandManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\CommandManager
         */
        protected $commandManager;

        protected function setUp() {}
        /**
         * @test
         */
        public function getAvailableCommandsReturnsAllAvailableCommands() {}
        /**
         * @test
         */
        public function getCommandByIdentifierReturnsCommandIfIdentifierIsEqual() {}
        /**
         * @test
         */
        public function getCommandByIdentifierWorksCaseInsensitive() {}
        /**
         * @test
         */
        public function getCommandByIdentifierThrowsExceptionIfNoMatchingCommandWasFound() {}
        /**
         * @test
         */
        public function getCommandByIdentifierThrowsExceptionIfMoreThanOneMatchingCommandWasFound() {}
    }

    /**
     * Test case
     */
    class CommandTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @return array
         */
        public function commandIdentifiers() {}
        public function constructRendersACommandIdentifierByTheGivenControllerAndCommandName($controllerClassName, $commandName, $expectedCommandIdentifier) {}
        /**
         * @return array
         */
        public function invalidCommandClassNames() {}
        public function constructThrowsExceptionIfCommandClassNameIsInvalid($controllerClassName) {}
        public function testIsInternal() {}
        public function testIsCliOnly() {}
        public function testIsFlushinCaches() {}
        public function testHasArguments() {}
        public function testGetArgumentDefinitions() {}
        public function testGetDescription() {}
        public function testGetShortDescription() {}
        public function testGetRelatedCommandIdentifiers() {}
    }

    /**
     * Test case
     */
    class RequestTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\Request|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $request;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getCommandReturnsTheCommandObjectReflectingTheRequestInformation() {}
        /**
         * @test
         */
        public function setControllerObjectNameAndSetControllerCommandNameUnsetTheBuiltCommandObject() {}
        /**
         * @test
         */
        public function setControllerObjectNameProperlyResolvesExtensionNameWithNamespaces() {}
        /**
         * @test
         */
        public function setControllerObjectNameProperlyResolvesExtensionNameWithoutNamespaces() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Mvc\Cli\Fixture\Command {
    /**
     * A mock CLI Command
     */
    class MockACommandController extends \typo3\cms\extbase\mvc\cli\command {
        public function fooCommand() {}
        public function barCommand($someArgument) {}
    }

    /**
     * Another mock CLI Command
     */
    class MockCCommandController extends \typo3\cms\extbase\mvc\cli\command {
        public function emptyCommand() {}
        /**
         * @internal
         */
        public function internalCommand() {}
        /**
         * @cli
         */
        public function cliOnlyCommand() {}
        /**
         * @flushesCaches
         */
        public function flushingCachesCommand() {}
        public function withArgumentsCommand($foo, $bar = 'baz') {}
        /**
         * Short Description
         *
         * Longer Description
         * Multine
         *
         * Much Multiline
         */
        public function withDescriptionCommand() {}
        /**
         * @see Foo:Bar:Baz
         */
        public function relatedCommandIdentifiersCommand() {}
    }

    /**
     * Another mock CLI Command
     */
    class MockBCommandController extends \typo3\cms\extbase\mvc\cli\command {
        public function bazCommand() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Mvc\Controller {
    /**
     * Test case
     */
    class MvcPropertyMappingConfigurationServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for generating the list of trusted properties
         *
         * @return array
         */
        public function dataProviderForgenerateTrustedPropertiesToken() {}
        /**
         * Data Provider for invalid values in generating the list of trusted properties,
         * which should result in an exception
         *
         * @return array
         */
        public function dataProviderForgenerateTrustedPropertiesTokenWithUnallowedValues() {}
        public function generateTrustedPropertiesTokenGeneratesTheCorrectHashesInNormalOperation($input, $expected) {}
        public function generateTrustedPropertiesTokenThrowsExceptionInWrongCases($input, $expectExceptionCode) {}
        /**
         * @test
         */
        public function serializeAndHashFormFieldArrayWorks() {}
        /**
         * @test
         */
        public function initializePropertyMappingConfigurationDoesNothingIfTrustedPropertiesAreNotSet() {}
        /**
         * @test
         */
        public function initializePropertyMappingConfigurationReturnsEarlyIfNoTrustedPropertiesAreSet() {}
        /**
         * @test
         */
        public function initializePropertyMappingConfigurationReturnsEarlyIfArgumentIsUnknown() {}
        /**
         * @test
         */
        public function initializePropertyMappingConfigurationSetsModificationAllowedIfIdentityPropertyIsSet() {}
        /**
         * @test
         */
        public function initializePropertyMappingConfigurationSetsCreationAllowedIfIdentityPropertyIsNotSet() {}
        /**
         * @test
         */
        public function initializePropertyMappingConfigurationSetsAllowedFields() {}
        /**
         * @test
         */
        public function initializePropertyMappingConfigurationSetsAllowedFieldsRecursively() {}
        protected function initializePropertyMappingConfiguration(array $trustedProperties) {}
    }

    /**
     * Test case
     */
    class ArgumentsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function argumentsObjectIsOfScopePrototype() {}
        /**
         * @test
         */
        public function addingAnArgumentManuallyWorks() {}
        /**
         * @test
         */
        public function addingAnArgumentReplacesArgumentWithSameName() {}
        /**
         * @test
         */
        public function addNewArgumentProvidesFluentInterface() {}
        /**
         * @test
         */
        public function addingArgumentThroughArrayAccessWorks() {}
        /**
         * @test
         */
        public function retrievingArgumentThroughArrayAccessWorks() {}
        /**
         * @test
         */
        public function getArgumentWithNonExistingArgumentNameThrowsException() {}
        /**
         * @test
         */
        public function issetReturnsCorrectResult() {}
        /**
         * @test
         */
        public function getArgumentNamesReturnsNamesOfAddedArguments() {}
        /**
         * @test
         */
        public function getArgumentShortNamesReturnsShortNamesOfAddedArguments() {}
        /**
         * @test
         */
        public function addNewArgumentCreatesAndAddsNewArgument() {}
        /**
         * @test
         */
        public function addNewArgumentAssumesTextDataTypeByDefault() {}
        /**
         * @test
         */
        public function addNewArgumentCanAddArgumentsMarkedAsRequired() {}
        /**
         * @test
         */
        public function addNewArgumentCanAddArgumentsMarkedAsOptionalWithDefaultValues() {}
        /**
         * @test
         */
        public function callingInvalidMethodThrowsException() {}
        /**
         * @test
         */
        public function removeAllClearsAllArguments() {}
    }

    /**
     * Test case
     */
    class ArgumentTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\Argument
         */
        protected $simpleValueArgument;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\Argument
         */
        protected $objectArgument;
        protected $mockPropertyMapper;
        protected $mockConfigurationBuilder;
        protected $mockConfiguration;

        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function constructingArgumentWithoutNameThrowsException() {}
        /**
         * @test
         */
        public function constructingArgumentWithInvalidNameThrowsException() {}
        /**
         * @test
         */
        public function passingDataTypeToConstructorReallySetsTheDataType() {}
        /**
         * @test
         */
        public function setShortNameProvidesFluentInterface() {}
        /**
         * @return array
         */
        public function invalidShortNames() {}
        public function shortNameShouldThrowExceptionIfInvalid($invalidShortName) {}
        /**
         * @test
         */
        public function shortNameCanBeRetrievedAgain() {}
        /**
         * @test
         */
        public function setRequiredShouldProvideFluentInterfaceAndReallySetRequiredState() {}
        /**
         * @test
         */
        public function setDefaultValueShouldProvideFluentInterfaceAndReallySetDefaultValue() {}
        /**
         * @test
         */
        public function setValidatorShouldProvideFluentInterfaceAndReallySetValidator() {}
        /**
         * @test
         */
        public function setValueProvidesFluentInterface() {}
        /**
         * @test
         */
        public function setValueUsesNullAsIs() {}
        /**
         * @test
         */
        public function setValueUsesMatchingInstanceAsIs() {}
        /**
         * @return \TYPO3\CMS\Extbase\Mvc\Controller\Argument $this
         */
        protected function setupPropertyMapperAndSetValue() {}
        /**
         * @test
         */
        public function setValueShouldCallPropertyMapperCorrectlyAndStoreResultInValue() {}
        /**
         * @test
         */
        public function setValueShouldBeFluentInterface() {}
        /**
         * @test
         */
        public function setValueShouldSetValidationErrorsIfValidatorIsSetAndValidationFailed() {}
        /**
         * @test
         */
        public function defaultPropertyMappingConfigurationDoesNotAllowCreationOrModificationOfObjects() {}
    }

    /**
     * Test case
     */
    class ActionControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ActionController|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $actionController;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder
         */
        protected $mockUriBuilder;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService
         */
        protected $mockMvcPropertyMappingConfigurationService;

        protected function setUp() {}
        /**
         * @test
         */
        public function processRequestSticksToSpecifiedSequence() {}
        /**
         * @test
         */
        public function resolveViewUsesFluidTemplateViewIfTemplateIsAvailable() {}
        /**
         * @test
         */
        public function resolveViewObjectNameUsesViewObjectNamePatternToResolveViewObjectName() {}
        /**
         * @test
         */
        public function resolveViewObjectNameUsesNamespacedViewObjectNamePatternForExtensionsWithVendor() {}
        /**
         * @test
         */
        public function resolveActionMethodNameReturnsTheCurrentActionMethodNameFromTheRequest() {}
        /** @var \TYPO3\CMS\Extbase\Mvc\Controller\ActionController|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function resolveActionMethodNameThrowsAnExceptionIfTheActionDefinedInTheRequestDoesNotExist() {}
        /**
         * @test
         */
        public function initializeActionMethodArgumentsRegistersArgumentsFoundInTheSignatureOfTheCurrentActionMethod() {}
        /**
         * @test
         */
        public function initializeActionMethodArgumentsRegistersOptionalArgumentsAsSuch() {}
        /**
         * @test
         */
        public function initializeActionMethodArgumentsThrowsExceptionIfDataTypeWasNotSpecified() {}
/** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
        public function setViewConfigurationResolvesTemplateRootPathsForTemplateRootPath(/** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
$configuration, /** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
$expected) {}
        /**
         * @return array
         */
        public function templateRootPathDataProvider() {}
/** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
        public function setViewConfigurationResolvesLayoutRootPathsForLayoutRootPath(/** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
$configuration, /** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
$expected) {}
        /**
         * @return array
         */
        public function layoutRootPathDataProvider() {}
/** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
        public function setViewConfigurationResolvesPartialRootPathsForPartialRootPath(/** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
$configuration, /** @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject $mockConfigurationManager */
$expected) {}
        /**
         * @return array
         */
        public function partialRootPathDataProvider() {}
        public function rendersAndAssignsAssetsFromViewIntoPageRenderer($viewMock, $expectedHeader, $expectedFooter) {}
        /**
         * @return array
         */
        public function headerAssetDataProvider() {}
    }

    /**
     * Test case
     */
    class CommandControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\CommandController|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $commandController;
        /**
         * \Symfony\Component\Console\Output\ConsoleOutput|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockConsoleOutput;

        protected function setUp() {}
        /**
         * @test
         */
        public function outputAppendsGivenStringToTheResponseContent() {}
        /**
         * @test
         */
        public function outputReplacesArgumentsInGivenString() {}
        /**
         * @test
         */
        public function quitThrowsStopActionException() {}
        /**
         * @test
         */
        public function quitSetsResponseExitCode() {}
    }

    /**
     * Test case
     */
    class AbstractControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructResolvesExtensionnameFromOldStyle() {}
        /**
         * @test
         */
        public function constructResolvesExtensionnameFromNamespaced() {}
        /**
         * @return array
         */
        public function addFlashMessageDataProvider() {}
        public function addFlashMessageAddsFlashMessageObjectToFlashMessageQueue($expectedMessage, $messageBody, $messageTitle = '', $severity = \TYPO3\CMS\Core\Messaging\FlashMessage::OK, $storeInSession = true) {}
        /**
         * @test
         */
        public function addFlashMessageThrowsExceptionOnInvalidMessageBody() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Mvc\View {
    /**
     * Testcase for the JSON view
     */
    class JsonViewTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\View\JsonView
         */
        protected $view;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         */
        protected $controllerContext;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Response
         */
        protected $response;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * data provider for testTransformValue()
         * @return array
         */
        public function jsonViewTestData() {}
        public function testTransformValue($object, $configuration, $expected, $description) {}
        /**
         * data provider for testTransformValueWithObjectIdentifierExposure()
         * @return array
         */
        public function objectIdentifierExposureTestData() {}
        public function testTransformValueWithObjectIdentifierExposure($object, $configuration, $expected, $dummyIdentifier, $description) {}
        /**
         * A data provider
         */
        public function exposeClassNameSettingsAndResults() {}
        public function viewExposesClassNameFullyIfConfiguredSo($exposeClassNameSetting, $className, $namespace, $expected) {}
        /**
         * @test
         */
        public function renderSetsContentTypeHeader() {}
        /**
         * @test
         */
        public function renderReturnsJsonRepresentationOfAssignedObject() {}
        /**
         * @test
         */
        public function renderReturnsJsonRepresentationOfAssignedArray() {}
        /**
         * @test
         */
        public function renderReturnsJsonRepresentationOfAssignedSimpleValue() {}
        /**
         * @test
         */
        public function renderReturnsNullIfNameOfAssignedVariableIsNotEqualToValue() {}
        /**
         * @test
         */
        public function renderOnlyRendersVariableWithTheNameValue() {}
        /**
         * @test
         */
        public function setVariablesToRenderOverridesValueToRender() {}
        /**
         * @test
         */
        public function renderRendersMultipleValuesIfTheyAreSpecifiedAsVariablesToRender() {}
        /**
         * @test
         */
        public function renderCanRenderMultipleComplexObjects() {}
        /**
         * @test
         */
        public function renderCanRenderPlainArray() {}
        /**
         * @test
         */
        public function descendAllKeepsArrayIndexes() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Security\Cryptography {
    /**
     * Test case
     */
    class HashServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Security\Cryptography\HashService
         */
        protected $hashService;

        protected function setUp() {}
        /**
         * @test
         */
        public function generateHmacReturnsHashStringIfStringIsGiven() {}
        /**
         * @test
         */
        public function generateHmacReturnsHashStringWhichContainsSomeSalt() {}
        /**
         * @test
         */
        public function generateHmacReturnsDifferentHashStringsForDifferentInputStrings() {}
        /**
         * @test
         */
        public function generateHmacThrowsExceptionIfNoStringGiven() {}
        /**
         * @test
         */
        public function generatedHmacCanBeValidatedAgain() {}
        /**
         * @test
         */
        public function generatedHmacWillNotBeValidatedIfHashHasBeenChanged() {}
        /**
         * @test
         */
        public function appendHmacThrowsExceptionIfNoStringGiven() {}
        /**
         * @test
         */
        public function appendHmacAppendsHmacToGivenString() {}
        /**
         * @test
         */
        public function validateAndStripHmacThrowsExceptionIfNoStringGiven() {}
        /**
         * @test
         */
        public function validateAndStripHmacThrowsExceptionIfGivenStringIsTooShort() {}
        /**
         * @test
         */
        public function validateAndStripHmacThrowsExceptionIfGivenStringHasNoHashAppended() {}
        /**
         * @test
         */
        public function validateAndStripHmacThrowsExceptionIfTheAppendedHashIsInvalid() {}
        /**
         * @test
         */
        public function validateAndStripHmacReturnsTheStringWithoutHmac() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Property {
    /**
     * Test case
     */
    class PropertyMappingConfigurationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration
         */
        protected $propertyMappingConfiguration;

        /**
         * Initialization
         */
        protected function setUp() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration::getTargetPropertyName
         */
        public function getTargetPropertyNameShouldReturnTheUnmodifiedPropertyNameWithoutConfiguration() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration::shouldMap
         */
        public function shouldMapReturnsFalseByDefault() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration::shouldMap
         */
        public function shouldMapReturnsTrueIfConfigured() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration::shouldMap
         */
        public function shouldMapReturnsTrueForAllowedProperties() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration::shouldMap
         */
        public function shouldMapReturnsFalseForBlacklistedProperties() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration::shouldSkip
         */
        public function shouldSkipReturnsFalseByDefault() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration::shouldSkip
         */
        public function shouldSkipReturnsTrueIfConfigured() {}
        /**
         * @test
         */
        public function setTypeConverterOptionsCanBeRetrievedAgain() {}
        /**
         * @test
         */
        public function nonexistentTypeConverterOptionsReturnNull() {}
        /**
         * @test
         */
        public function setTypeConverterOptionsShouldOverrideAlreadySetOptions() {}
        /**
         * @test
         */
        public function setTypeConverterOptionShouldOverrideAlreadySetOptions() {}
        /**
         * @test
         */
        public function getTypeConverterReturnsNullIfNoTypeConverterSet() {}
        /**
         * @test
         */
        public function getTypeConverterReturnsTypeConverterIfItHasBeenSet() {}
        /**
         * @return \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration
         */
        protected function buildChildConfigurationForSingleProperty() {}
        /**
         * @test
         */
        public function getTargetPropertyNameShouldRespectMapping() {}
        /**
         * @return array Signature: $methodToTestForFluentInterface [, $argumentsForMethod = array() ]
         */
        public function fluentInterfaceMethodsDataProvider() {}
        public function respectiveMethodsProvideFluentInterface($methodToTestForFluentInterface, array $argumentsForMethod = [ ]) {}
        /**
         * @test
         */
        public function forPropertyWithAsteriskAllowsArbitraryPropertyNamesWithGetConfigurationFor() {}
        /**
         * @test
         */
        public function forPropertyWithAsteriskAllowsArbitraryPropertyNamesWithForProperty() {}
        /**
         * @test
         */
        public function forPropertyWithAsteriskAllowsArbitraryPropertyNamesWithShouldMap() {}
    }

    /**
     * Test case
     */
    class PropertyMapperTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockConfigurationBuilder;
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockConfiguration;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * @return array
         */
        public function validSourceTypes() {}
/** @var \TYPO3\CMS\Extbase\Property\PropertyMapper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function sourceTypeCanBeCorrectlyDetermined(/** @var \TYPO3\CMS\Extbase\Property\PropertyMapper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$source, /** @var \TYPO3\CMS\Extbase\Property\PropertyMapper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$sourceType) {}
        /**
         * @return array
         */
        public function invalidSourceTypes() {}
/** @var \TYPO3\CMS\Extbase\Property\PropertyMapper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function sourceWhichIsNoSimpleTypeThrowsException(/** @var \TYPO3\CMS\Extbase\Property\PropertyMapper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$source) {}
        protected function getMockTypeConverter($name = '', $canConvertFrom = true, $properties = [ ], $typeOfSubObject = '') {}
        /** @var \TYPO3\CMS\Extbase\Property\PropertyMapper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function findTypeConverterShouldReturnTypeConverterFromConfigurationIfItIsSet() {}
        /**
         * Simple type conversion
         * @return array
         */
        public function dataProviderForFindTypeConverter() {}
        public function findTypeConverterShouldReturnHighestPriorityTypeConverterForSimpleType($source, $targetType, $typeConverters, $expectedTypeConverter) {}
        /**
         * @return array
         */
        public function dataProviderForObjectTypeConverters() {}
        public function findTypeConverterShouldReturnConverterForTargetObjectIfItExists($targetClass, $expectedTypeConverter, $typeConverters, $shouldFailWithException = false) {}
        /**
         * @test
         */
        public function convertShouldAskConfigurationBuilderForDefaultConfiguration() {}
        /**
         * @test
         */
        public function findFirstEligibleTypeConverterInObjectHierarchyShouldReturnNullIfSourceTypeIsUnknown() {}
        /**
         * @test
         */
        public function doMappingReturnsSourceUnchangedIfAlreadyConverted() {}
        /**
         * @test
         */
        public function doMappingReturnsSourceUnchangedIfAlreadyConvertedToCompositeType() {}
        /**
         * @test
         */
        public function convertSkipsPropertiesIfConfiguredTo() {}
        /**
         * @test
         */
        public function convertSkipsUnknownPropertiesIfConfiguredTo() {}
    }

    /**
     * Test case
     */
    class PropertyMappingConfigurationBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder
         */
        protected $propertyMappingConfigurationBuilder;

        protected function setUp() {}
        /**
         * @test
         */
        public function getTargetPropertyNameShouldReturnTheUnmodifiedPropertyNameWithoutConfiguration() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Property\TypeConverter {
    /**
     * Test case
     */
    class StringConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\TypeConverterInterface
         */
        protected $converter;

        protected function setUp() {}
        /**
         * @test
         */
        public function checkMetadata() {}
        /**
         * @test
         */
        public function convertFromShouldReturnSourceString() {}
        /**
         * @test
         */
        public function canConvertFromShouldReturnTrue() {}
        /**
         * @test
         */
        public function getSourceChildPropertiesToBeConvertedShouldReturnEmptyArray() {}
    }

    /**
     * Test case
     */
    class IntegerConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\TypeConverterInterface
         */
        protected $converter;

        protected function setUp() {}
        /**
         * @test
         */
        public function checkMetadata() {}
        /**
         * @test
         */
        public function convertFromShouldCastTheStringToInteger() {}
        /**
         * @test
         */
        public function convertFromDoesNotModifyIntegers() {}
        /**
         * @test
         */
        public function convertFromReturnsNullIfEmptyStringSpecified() {}
        /**
         * @test
         */
        public function convertFromReturnsAnErrorIfSpecifiedStringIsNotNumeric() {}
        /**
         * @test
         */
        public function canConvertFromShouldReturnTrueForANumericStringSource() {}
        /**
         * @test
         */
        public function canConvertFromShouldReturnTrueForAnIntegerSource() {}
        /**
         * @test
         */
        public function canConvertFromShouldReturnTrueForAnEmptyValue() {}
        /**
         * @test
         */
        public function canConvertFromShouldReturnTrueForANullValue() {}
        /**
         * @test
         */
        public function getSourceChildPropertiesToBeConvertedShouldReturnEmptyArray() {}
    }

    /**
     * Test case
     */
    class DateTimeConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter
         */
        protected $converter;

        protected function setUp() {}
        /**
         * @test
         */
        public function checkMetadata() {}
        /**
         * @test
         */
        public function canConvertFromReturnsFalseIfTargetTypeIsNotDateTime() {}
        /**
         * @test
         */
        public function canConvertFromReturnsTrueIfSourceTypeIsAString() {}
        /**
         * @test
         */
        public function canConvertFromReturnsTrueIfSourceTypeIsAnEmptyString() {}
        /**
         * @test
         */
        public function convertFromReturnsErrorIfGivenStringCantBeConverted() {}
        /**
         * @test
         */
        public function convertFromProperlyConvertsStringWithDefaultDateFormat() {}
        /**
         * @test
         */
        public function convertFromUsesDefaultDateFormatIfItIsNotConfigured() {}
        /**
         * @test
         */
        public function convertFromEmptyStringReturnsNull() {}
        /**
         * @return array
         * @see convertFromStringTests()
         */
        public function convertFromStringDataProvider() {}
        public function convertFromStringTests($source, $dateFormat, $isValid) {}
        /**
         * @return array
         * @see convertFromIntegerOrDigitStringWithoutConfigurationTests()
         * @see convertFromIntegerOrDigitStringInArrayWithoutConfigurationTests()
         */
        public function convertFromIntegerOrDigitStringsWithoutConfigurationDataProvider() {}
        public function convertFromIntegerOrDigitStringWithoutConfigurationTests($source) {}
        public function convertFromIntegerOrDigitStringInArrayWithoutConfigurationTests($source) {}
        /**
         * @test
         */
        public function canConvertFromReturnsTrueIfSourceTypeIsAnArray() {}
        /**
         * @test
         */
        public function convertFromReturnsErrorIfGivenArrayCantBeConverted() {}
        /**
         * @test
         */
        public function convertFromThrowsExceptionIfGivenArrayDoesNotSpecifyTheDate() {}
        /**
         * @test
         */
        public function convertFromProperlyConvertsArrayWithDefaultDateFormat() {}
        /**
         * @return array
         * @see convertFromThrowsExceptionIfDatePartKeysHaveInvalidValuesSpecified
         */
        public function invalidDatePartKeyValuesDataProvider() {}
        public function convertFromThrowsExceptionIfDatePartKeysHaveInvalidValuesSpecified($source) {}
        /**
         * @test
         */
        public function convertFromProperlyConvertsArrayWithDateAsArray() {}
        /**
         * @test
         */
        public function convertFromAllowsToOverrideTheTime() {}
        /**
         * @test
         */
        public function convertFromAllowsToOverrideTheTimezone() {}
        /**
         * @test
         */
        public function convertFromThrowsExceptionIfSpecifiedTimezoneIsInvalid() {}
        /**
         * @test
         */
        public function convertFromArrayThrowsExceptionForEmptyArray() {}
        /**
         * @test
         */
        public function convertFromArrayReturnsNullForEmptyDate() {}
        /**
         * @return array
         * @see convertFromArrayTests()
         */
        public function convertFromArrayDataProvider() {}
        public function convertFromArrayTests(array $source, $isValid) {}
        /**
         * @test
         */
        public function convertFromSupportsDateTimeSubClasses() {}
    }

    /**
     * Test case
     */
    class ArrayConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\TypeConverter\ArrayConverter
         */
        protected $converter;

        protected function setUp() {}
        /**
         * @test
         */
        public function checkMetadata() {}
        /**
         * @test
         */
        public function convertFromDoesNotModifyTheSourceArray() {}
        /**
         * @return array
         */
        public function stringToArrayDataProvider() {}
        public function canConvertFromEmptyString($source, $expectedResult) {}
        /**
         * @return array
         */
        public function canConvertFromDataProvider() {}
        public function canConvertFromReturnsCorrectBooleans($source, $expectedResult) {}
    }

    /**
     * Test case
     */
    class PersistentObjectConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\TypeConverterInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $converter;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockReflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockPersistenceManager;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Object\Container\Container|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockContainer;

        /**
         * @throws \InvalidArgumentException
         * @throws \PHPUnit\Framework\Exception
         * @throws \RuntimeException
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function checkMetadata() {}
        /**
         * @return array
         */
        public function dataProviderForCanConvert() {}
        public function canConvertFromReturnsTrueIfClassIsTaggedWithEntityOrValueObject($isEntity, $isValueObject, $expected) {}
        /**
         * @test
         */
        public function getSourceChildPropertiesToBeConvertedReturnsAllPropertiesExceptTheIdentityProperty() {}
        /**
         * @test
         */
        public function getTypeOfChildPropertyShouldUseReflectionServiceToDetermineType() {}
        /**
         * @test
         */
        public function getTypeOfChildPropertyShouldUseConfiguredTypeIfItWasSet() {}
        /**
         * @test
         */
        public function convertFromShouldFetchObjectFromPersistenceIfUuidStringIsGiven() {}
        /**
         * @test
         */
        public function convertFromShouldFetchObjectFromPersistenceIfuidStringIsGiven() {}
        /**
         * @test
         */
        public function convertFromShouldFetchObjectFromPersistenceIfOnlyIdentityArrayGiven() {}
        /**
         * @test
         */
        public function convertFromShouldThrowExceptionIfObjectNeedsToBeModifiedButConfigurationIsNotSet() {}
        protected function buildConfiguration($typeConverterOptions) {}
        public function setupMockQuery($numberOfResults, $howOftenIsGetFirstCalled) {}
        /**
         * @test
         */
        public function convertFromShouldReturnExceptionIfNoMatchingObjectWasFound() {}
        /**
         * @test
         */
        public function convertFromShouldThrowExceptionIfMoreThanOneObjectWasFound() {}
        /**
         * @test
         */
        public function convertFromShouldThrowExceptionIfObjectNeedsToBeCreatedButConfigurationIsNotSet() {}
        /**
         * @test
         */
        public function convertFromShouldCreateObject() {}
        /**
         * @test
         */
        public function convertFromShouldThrowExceptionIfPropertyOnTargetObjectCouldNotBeSet() {}
        /**
         * @test
         */
        public function convertFromShouldCreateObjectWhenThereAreConstructorParameters() {}
        /**
         * @test
         */
        public function convertFromShouldCreateObjectWhenThereAreOptionalConstructorParameters() {}
        /**
         * @test
         */
        public function convertFromShouldThrowExceptionIfRequiredConstructorParameterWasNotFound() {}
        /**
         * @test
         */
        public function convertFromShouldReturnNullForEmptyString() {}
    }

    /**
     * Test case
     */
    class ObjectConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ObjectConverter
         */
        protected $converter;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockReflectionService;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Object\Container\Container|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockContainer;

        /**
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function checkMetadata() {}
        /**
         * @return array
         */
        public function dataProviderForCanConvert() {}
        public function canConvertFromReturnsTrueIfClassIsTaggedWithEntityOrValueObject($className, $expected) {}
        /**
         * @test
         */
        public function getTypeOfChildPropertyShouldUseReflectionServiceToDetermineType() {}
    }

    /**
     * Test case
     */
    class FloatConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\TypeConverterInterface
         */
        protected $converter;

        protected function setUp() {}
        /**
         * @test
         */
        public function checkMetadata() {}
        /**
         * @test
         */
        public function convertFromShouldCastTheStringToFloat() {}
        /**
         * @test
         */
        public function convertFromReturnsNullIfEmptyStringSpecified() {}
        /**
         * @test
         */
        public function convertFromShouldAcceptIntegers() {}
        /**
         * @test
         */
        public function convertFromShouldRespectConfiguration() {}
        /**
         * @test
         */
        public function convertFromReturnsAnErrorIfSpecifiedStringIsNotNumeric() {}
        /**
         * @test
         */
        public function canConvertFromShouldReturnTrue() {}
        /**
         * @test
         */
        public function canConvertFromShouldReturnTrueForAnEmptyValue() {}
        /**
         * @test
         */
        public function canConvertFromShouldReturnTrueForANullValue() {}
        /**
         * @test
         */
        public function getSourceChildPropertiesToBeConvertedShouldReturnEmptyArray() {}
    }

    /**
     * Test case
     */
    class BooleanConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Property\TypeConverter\BooleanConverter
         */
        protected $converter;

        protected function setUp() {}
        /**
         * @test
         */
        public function checkMetadata() {}
        /**
         * @test
         */
        public function convertFromDoesNotModifyTheBooleanSource() {}
        /**
         * @test
         */
        public function convertFromCastsSourceStringToBoolean() {}
        /**
         * @test
         */
        public function convertFromCastsNumericSourceStringToBoolean() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Property\TypeConverter\Fixtures {
    /**
     * Fixture date time sub
     */
    class DateTimeSubFixture extends \datetime {
        public static function createFromFormat($format, $time, $timezone = null) {}
        /**
         * @return string
         */
        public function foo() {}
    }

    /**
     * Fixture PersistentObjectEntityFixture
     */
    class PersistentObjectEntityFixture extends \typo3\cms\extbase\domainobject\abstractentity {}

    /**
     * Fixture PersistentObjectValueObjectFixture
     */
    class PersistentObjectValueObjectFixture extends \typo3\cms\extbase\domainobject\abstractvalueobject {}

    /**
     * Fixture PersistentObjectFixture
     */
    class PersistentObjectFixture {}

    /**
     * Fixture Query
     */
    class Query {}

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Property\Fixtures {
    /**
     * Fixture DataProviderThree
     */
    class DataProviderThree extends \typo3\cms\extbase\tests\unit\property\fixtures\dataprovidertwo implements \typo3\cms\extbase\tests\unit\property\fixtures\dataproviderthreeinterface {}

    /**
     * Fixture DataProviderOne
     */
    class DataProviderOne implements \typo3\cms\extbase\tests\unit\property\fixtures\dataprovideroneinterface {}

    /**
     * Fixture DataProviderTwo
     */
    class DataProviderTwo extends \typo3\cms\extbase\tests\unit\property\fixtures\dataproviderone {}


    /**
     * Fixture DataProviderTwoInterface
     */
    interface DataProviderTwoInterface {}

    /**
     * Fixture DataProviderOneInterface
     */
    interface DataProviderOneInterface {}

    /**
     * Fixture DataProviderThreeInterface
     */
    interface DataProviderThreeInterface extends \typo3\cms\extbase\tests\unit\property\fixtures\dataprovidertwointerface {}

}

namespace TYPO3\CMS\Extbase\Tests\Unit\DomainObject {
    /**
     * Test case
     */
    class AbstractEntityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function objectIsNotDirtyAfterCallingMemorizeCleanStateWithSimpleProperties() {}
        /**
         * @test
         */
        public function objectIsDirtyAfterCallingMemorizeCleanStateWithSimplePropertiesAndModifyingThePropertiesAfterwards() {}
        /**
         * @test
         */
        public function objectIsNotDirtyAfterCallingMemorizeCleanStateWithObjectProperties() {}
        /**
         * @test
         */
        public function objectIsNotDirtyAfterCallingMemorizeCleanStateWithOtherDomainObjectsAsProperties() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Scheduler {
    /**
     * Test case
     */
    class TaskTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Scheduler\Task|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $task;
        /**
         * @var \TYPO3\CMS\Extbase\Scheduler\TaskExecutor|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $taskExecutor;

        protected function setUp() {}
        /**
         * @test
         */
        public function executeCallsLogExceptionOnCaughtExceptionAndRethrowsException() {}
        /**
         * @test
         */
        public function executeReturnsTrueIfNoExceptionIsCaught() {}
        /**
         * @test
         */
        public function setCommandIdentifierSetsCommandIdentifierCorrectly() {}
        /**
         * @test
         */
        public function getCommandIdentifierReturnsCorrectCommandIdentifier() {}
        /**
         * @test
         */
        public function setArgumentsSetsArgumentsCorrectly() {}
        /**
         * @test
         */
        public function getArgumentsReturnsCorrectArguments() {}
        /**
         * @test
         */
        public function setDefaultsSetsDefaultsCorrectly() {}
        /**
         * @test
         */
        public function getDefaultsReturnsCorrectDefaults() {}
        /**
         * @test
         */
        public function addDefaultValueAddsDefaultToDefaults() {}
        /**
         * @test
         */
        public function addDefaultValueConvertsBooleanValuesToInteger() {}
        /**
         * @test
         */
        public function getAdditionalInformationRespectsArguments() {}
    }

    /**
     * Test case
     */
    class FieldProviderTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var FieldProvider|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $fieldProvider */
        public function getCommandControllerActionFieldFetchesCorrectClassNames() {}
        /**
         * @test
         */
        public function getCommandControllerActionFieldSkipsInternalCommands() {}
        /** @var FieldProvider|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $fieldProvider */
        public function getCommandControllerActionFieldSkipsCliOnlyCommands() {}
        /**
         * @test
         */
        public function constructResolvesExtensionNameFromNamespaced() {}
        /** @var SchedulerModuleController $schedulerModule */
        public function validateAdditionalFieldsReturnsTrue() {}
        /** @var SchedulerModuleController $schedulerModule */
        public function getAdditionalFieldsRendersRightHtml() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests {
    /**
     * MockACommandController Fixture
     */
    class MockACommandController extends \typo3\cms\extbase\mvc\controller\commandcontroller {
        public function funcACommand($arg = 1) {}
    }

}

namespace Acme\Mypkg\Command {
    /**
     * MockBCommandController Fixture
     */
    class MockBCommandController extends \typo3\cms\extbase\mvc\controller\commandcontroller {
        /**
         * funcBCommand
         */
        public function funcBCommand() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Object\Container {
    /**
     * Test case
     */
    class ContainerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Object\Container\Container
         */
        protected $container;
        /**
         * @var LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $logger;
        /**
         * @var \TYPO3\CMS\Extbase\Object\Container\ClassInfo
         */
        protected $cachedClassInfo;

        protected function setUp() {}
        /**
         * @test
         */
        public function getInstanceReturnsInstanceOfSimpleClass() {}
        /**
         * @test
         */
        public function getInstanceReturnsInstanceOfSimpleNamespacedClass() {}
        /**
         * @test
         */
        public function getInstanceReturnsInstanceOfAClassWithConstructorInjection() {}
        /**
         * @test
         */
        public function getInstanceReturnsInstanceOfAClassWithTwoLevelDependency() {}
        /**
         * @test
         */
        public function getInstanceReturnsInstanceOfAClassWithMixedSimpleTypeAndConstructorInjection() {}
        /**
         * @test
         */
        public function getInstanceReturnsInstanceOfAClassWithMixedSimpleTypeAndConstructorInjectionWithNullDefaultValue() {}
        /**
         * @test
         */
        public function getInstanceThrowsExceptionWhenTryingToInstanciateASingletonWithConstructorParameters() {}
        /**
         * @test
         */
        public function getInstanceReturnsInstanceOfAClassWithConstructorInjectionAndDefaultConstructorParameters() {}
        /**
         * @test
         */
        public function getInstancePassesGivenParameterToTheNewObject() {}
        /**
         * @test
         */
        public function getInstanceReturnsAFreshInstanceIfObjectIsNoSingleton() {}
        /**
         * @test
         */
        public function getInstanceReturnsSameInstanceInstanceIfObjectIsSingleton() {}
        /**
         * @test
         */
        public function getInstanceThrowsExceptionIfPrototypeObjectsWiredViaConstructorInjectionContainCyclicDependencies() {}
        /**
         * @test
         */
        public function getInstanceThrowsExceptionIfPrototypeObjectsWiredViaSetterInjectionContainCyclicDependencies() {}
        /**
         * @test
         */
        public function getInstanceThrowsExceptionIfClassWasNotFound() {}
        /**
         * @test
         */
        public function getInstanceInitializesObjects() {}
        /**
         * @test
         */
        public function getEmptyObjectReturnsInstanceOfSimpleClass() {}
        /**
         * @test
         */
        public function getEmptyObjectReturnsInstanceOfClassImplementingSerializable() {}
        /**
         * @test
         */
        public function getEmptyObjectInitializesObjects() {}
        /**
         * @test
         */
        public function test_canGetChildClass() {}
        /**
         * @test
         */
        public function test_canInjectInterfaceInClass() {}
        /**
         * @test
         */
        public function test_canBuildCyclicDependenciesOfSingletonsWithSetter() {}
        /**
         * @test
         */
        public function singletonWhichRequiresPrototypeViaSetterInjectionWorksAndAddsDebugMessage() {}
        /**
         * @test
         */
        public function singletonWhichRequiresSingletonViaSetterInjectionWorks() {}
        /**
         * @test
         */
        public function prototypeWhichRequiresPrototypeViaSetterInjectionWorks() {}
        /**
         * @test
         */
        public function prototypeWhichRequiresSingletonViaSetterInjectionWorks() {}
        /**
         * @test
         */
        public function singletonWhichRequiresPrototypeViaConstructorInjectionWorksAndAddsDebugMessage() {}
        /**
         * @test
         */
        public function singletonWhichRequiresSingletonViaConstructorInjectionWorks() {}
        /**
         * @test
         */
        public function prototypeWhichRequiresPrototypeViaConstructorInjectionWorks() {}
        /**
         * @test
         */
        public function prototypeWhichRequiresSingletonViaConstructorInjectionWorks() {}
        /**
         * @test
         */
        public function isSingletonReturnsTrueForSingletonInstancesAndFalseForPrototypes() {}
        /**
         * @test
         */
        public function isPrototypeReturnsFalseForSingletonInstancesAndTrueForPrototypes() {}
        /**
         * test class SimpleTypeConstructorArgument
         * @test
         */
        public function getInstanceGivesSimpleConstructorArgumentToClassInstance() {}
        /**
         * test class SimpleTypeConstructorArgument
         * @test
         */
        public function getInstanceDoesNotInfluenceSimpleTypeConstructorArgumentIfNotGiven() {}
        /**
         * test class MandatoryConstructorArgument
         * @test
         */
        public function getInstanceGivesExistingConstructorArgumentToClassInstance() {}
        /**
         * test class MandatoryConstructorArgument
         * @test
         */
        public function getInstanceInjectsNewInstanceOfClassToClassIfArgumentIsMandatory() {}
        /**
         * test class OptionalConstructorArgument
         * @test
         */
        public function getInstanceDoesNotInjectAnOptionalArgumentIfNotGiven() {}
        /**
         * test class OptionalConstructorArgument
         * @test
         */
        public function getInstanceDoesNotInjectAnOptionalArgumentIfGivenArgumentIsNull() {}
        /**
         * test class OptionalConstructorArgument
         * @test
         */
        public function getInstanceGivesExistingConstructorArgumentToClassInstanceIfArgumentIsGiven() {}
        /**
         * test class MandatoryConstructorArgumentTwo
         * @test
         */
        public function getInstanceGivesTwoArgumentsToClassConstructor() {}
        /**
         * test class MandatoryConstructorArgumentTwo
         * @test
         */
        public function getInstanceInjectsTwoMandatoryArguments() {}
        /**
         * test class MandatoryConstructorArgumentTwo
         * @test
         */
        public function getInstanceInjectsSecondMandatoryArgumentIfFirstIsGiven() {}
        /**
         * test class MandatoryConstructorArgumentTwo
         * @test
         */
        public function getInstanceInjectsFirstMandatoryArgumentIfSecondIsGiven() {}
        /**
         * test class TwoConstructorArgumentsSecondOptional
         * @test
         */
        public function getInstanceGivesTwoArgumentsToClassConstructorIfSecondIsOptional() {}
        /**
         * test class TwoConstructorArgumentsSecondOptional
         * @test
         */
        public function getInstanceInjectsFirstMandatoryArgumentIfSecondIsOptionalAndNoneAreGiven() {}
        /**
         * test class TwoConstructorArgumentsSecondOptional
         * @test
         */
        public function getInstanceInjectsFirstMandatoryArgumentIfSecondIsOptionalAndBothAreGivenAsNull() {}
        /**
         * test class TwoConstructorArgumentsSecondOptional
         * @test
         */
        public function getInstanceGivesFirstArgumentToConstructorIfSecondIsOptionalAndFirstIsGiven() {}
        /**
         * test class TwoConstructorArgumentsSecondOptional
         * @test
         */
        public function getInstanceGivesFirstArgumentToConstructorIfSecondIsOptionalFirstIsGivenAndSecondIsGivenNull() {}
        /**
         * test class TwoConstructorArgumentsFirstOptional
         *
         * @test
         */
        public function getInstanceOnFirstOptionalAndSecondMandatoryInjectsSecondArgumentIfFirstIsGivenAsNull() {}
        /**
         * test class TwoConstructorArgumentsFirstOptional
         * @test
         */
        public function getInstanceOnFirstOptionalAndSecondMandatoryGivesTwoGivenArgumentsToConstructor() {}
        /**
         * test class TwoConstructorArgumentsFirstOptional
         * @test
         */
        public function getInstanceOnFirstOptionalAndSecondMandatoryInjectsSecondArgumentIfFirstIsGiven() {}
        /**
         * test class TwoConstructorArgumentsFirstOptional
         *
         * @test
         */
        public function getInstanceOnFirstOptionalAndSecondMandatoryGivesSecondArgumentAsIsIfFirstIsGivenAsNullAndSecondIsGiven() {}
        /**
         * test class TwoConstructorArgumentsFirstOptional
         *
         * @test
         */
        public function getInstanceOnFirstOptionalAndSecondMandatoryInjectsSecondArgumentIfFirstIsGivenAsNullAndSecondIsNull() {}
        /**
         * test class TwoConstructorArgumentsBothOptional
         * @test
         */
        public function getInstanceOnTwoOptionalGivesTwoGivenArgumentsToConstructor() {}
        /**
         * test class TwoConstructorArgumentsBothOptional
         * @test
         */
        public function getInstanceOnTwoOptionalGivesNoArgumentsToConstructorIfArgumentsAreNull() {}
        /**
         * test class TwoConstructorArgumentsBothOptional
         * @test
         */
        public function getInstanceOnTwoOptionalGivesNoArgumentsToConstructorIfNoneAreGiven() {}
        /**
         * test class TwoConstructorArgumentsBothOptional
         * @test
         */
        public function getInstanceOnTwoOptionalGivesOneArgumentToConstructorIfFirstIsObjectAndSecondIsNotGiven() {}
        /**
         * test class TwoConstructorArgumentsBothOptional
         * @test
         */
        public function getInstanceOnTwoOptionalGivesOneArgumentToConstructorIfFirstIsObjectAndSecondIsNull() {}
        /**
         * test class TwoConstructorArgumentsBothOptional
         * @test
         */
        public function getInstanceOnTwoOptionalGivesOneArgumentToConstructorIfFirstIsNullAndSecondIsObject() {}
        /**
         * @test
         */
        public function getInstanceInjectsPublicProperties() {}
        /**
         * @test
         */
        public function getInstanceInjectsProtectedProperties() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Object\Container\Fixtures {
    /**
     * NamespacedClass
     */
    class NamespacedClass {}

    class PublicPropertyInjectClass {
        /**
         * @Inject
         * @var \TYPO3\CMS\Extbase\Tests\Unit\Object\Container\Fixtures\ArgumentTestClassForPublicPropertyInjection
         */
        public $foo;

    }

    class ArgumentTestClassForPublicPropertyInjection {}

    class ProtectedPropertyInjectClass {
        /**
         * @Inject
         * @var \TYPO3\CMS\Extbase\Tests\Unit\Object\Container\Fixtures\ArgumentTestClassForPublicPropertyInjection
         */
        protected $foo;

        public function getFoo() {}
    }

    class SimpleTypeConstructorArgument {
        /**
         * @var bool
         */
        public $foo;

        public function __construct($foo = false) {}
    }

    class ArgumentTestClass {}

    class MandatoryConstructorArgument {
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClass;
        /**
         * @var array
         */
        public $allArguments;

        public function __construct(ArgumentTestClass $argumentTestClass) {}
    }

    class OptionalConstructorArgument {
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClass;

        public function __construct(ArgumentTestClass $argumentTestClass = null) {}
    }

    class MandatoryConstructorArgumentTwo {
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClass;
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClassTwo;

        public function __construct(ArgumentTestClass $argumentTestClass, ArgumentTestClass $argumentTestClassTwo) {}
    }

    class TwoConstructorArgumentsSecondOptional {
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClass;
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClassTwo;

        public function __construct(ArgumentTestClass $argumentTestClass, ArgumentTestClass $argumentTestClassTwo = null) {}
    }

    class TwoConstructorArgumentsFirstOptional {
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClass;
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClassTwo;

        public function __construct(ArgumentTestClass $argumentTestClass = null, ArgumentTestClass $argumentTestClassTwo) {}
    }

    class TwoConstructorArgumentsBothOptional {
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClass;
        /**
         * @var ArgumentTestClass
         */
        public $argumentTestClassTwo;

        public function __construct(ArgumentTestClass $argumentTestClass = null, ArgumentTestClass $argumentTestClassTwo = null) {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Persistence {
    /**
     * Test case
     */
    class RepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Repository|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $repository;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QueryFactory
         */
        protected $mockQueryFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\BackendInterface
         */
        protected $mockBackend;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Session
         */
        protected $mockSession;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $mockPersistenceManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\QueryInterface
         */
        protected $mockQuery;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface
         */
        protected $mockQuerySettings;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManager
         */
        protected $mockConfigurationManager;

        protected function setUp() {}
        /**
         * @test
         */
        public function abstractRepositoryImplementsRepositoryInterface() {}
        /**
         * @test
         */
        public function createQueryCallsPersistenceManagerWithExpectedClassName() {}
        /**
         * @test
         */
        public function createQuerySetsDefaultOrderingIfDefined() {}
        /**
         * @test
         */
        public function findAllCreatesQueryAndReturnsResultOfExecuteCall() {}
        /**
         * @test
         */
        public function findByidentifierReturnsResultOfGetObjectByIdentifierCallFromBackend() {}
        /**
         * @test
         */
        public function addDelegatesToPersistenceManager() {}
        /**
         * @test
         */
        public function removeDelegatesToPersistenceManager() {}
        /**
         * @test
         */
        public function updateDelegatesToPersistenceManager() {}
        /**
         * @test
         */
        public function magicCallMethodAcceptsFindBySomethingCallsAndExecutesAQueryWithThatCriteria() {}
        /**
         * @test
         */
        public function magicCallMethodAcceptsFindOneBySomethingCallsAndExecutesAQueryWithThatCriteria() {}
        /**
         * @test
         */
        public function magicCallMethodAcceptsCountBySomethingCallsAndExecutesAQueryWithThatCriteria() {}
        /**
         * @test
         */
        public function magicCallMethodTriggersAnErrorIfUnknownMethodsAreCalled() {}
        /**
         * @test
         */
        public function addChecksObjectType() {}
        /**
         * @test
         */
        public function removeChecksObjectType() {}
        /**
         * @test
         */
        public function updateChecksObjectType() {}
        /**
         * dataProvider for createQueryCallsQueryFactoryWithExpectedType
         *
         * @return array
         */
        public function modelAndRepositoryClassNames() {}
        public function constructSetsObjectTypeFromClassName($repositoryClassName, $modelClassName) {}
        /**
         * @test
         */
        public function createQueryReturnsQueryWithUnmodifiedDefaultQuerySettings() {}
        /**
         * @test
         */
        public function findByUidReturnsResultOfGetObjectByIdentifierCall() {}
        /**
         * @test
         */
        public function updateRejectsObjectsOfWrongType() {}
        /**
         * @test
         */
        public function magicCallMethodReturnsFirstArrayKeyInFindOneBySomethingIfQueryReturnsRawResult() {}
        /**
         * @test
         */
        public function magicCallMethodReturnsNullInFindOneBySomethingIfQueryReturnsEmptyRawResult() {}
    }

    /**
     * Test case
     */
    class ObjectStorageTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function anObjectCanBeAttached() {}
        /**
         * @test
         */
        public function anObjectCanBeDetached() {}
        /**
         * @test
         */
        public function offsetSetAssociatesDataToAnObjectInTheStorage() {}
        /**
         * @test
         */
        public function offsetUnsetRemovesAnObjectFromTheStorage() {}
        /**
         * @test
         */
        public function offsetGetReturnsTheDataAssociatedWithAnObject() {}
        /**
         * @test
         */
        public function offsetExistsChecksWhetherAnObjectExistsInTheStorage() {}
        /**
         * @test
         */
        public function offsetExistsWorksWithEmptyStorageAndIntegerKey() {}
        /**
         * @test
         */
        public function offsetExistsWorksWithEmptyStorageAndStringKey() {}
        /**
         * @test
         */
        public function getInfoReturnsTheDataAssociatedWithTheCurrentIteratorEntry() {}
        /**
         * @test
         */
        public function setInfoSetsTheDataAssociatedWithTheCurrentIteratorEntry() {}
        /**
         * @test
         */
        public function removeAllRemovesObjectsContainedInAnotherStorageFromTheCurrentStorage() {}
        /**
         * @test
         */
        public function addAllAddsAllObjectsFromAnotherStorage() {}
        /**
         * @test
         */
        public function theStorageCanBeRetrievedAsArray() {}
        /**
         * @test
         */
        public function allRelationsAreNotDirtyOnAttaching() {}
        /**
         * @test
         */
        public function allRelationsAreNotDirtyOnAttachingAndRemoving() {}
        /**
         * @test
         */
        public function theRelationsAreNotDirtyOnReAddingAtSamePosition() {}
        /**
         * @test
         */
        public function theRelationsAreDirtyOnReAddingAtOtherPosition() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Persistence\Fixture\Model {
    /**
     * A model fixture used for testing the persistence manager
     */
    class Entity2 extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * Just a normal string
         *
         * @var string
         */
        public $someString;
        /**
         * @var int
         */
        public $someInteger;
        /**
         * @var \TYPO3\CMS\Extbase\Tests\Unit\Persistence\Fixture\Model\Entity3
         */
        public $someReference;
        /**
         * @var array
         */
        public $someReferenceArray;

    }

    /**
     * A model fixture used for testing the persistence manager
     */
    class Entity3 extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * Just a normal string
         *
         * @var string
         */
        public $someString;
        /**
         * @var int
         */
        public $someInteger;

    }

    class CustomDateTime extends \datetime {}

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Persistence\Generic {
    /**
     * Test case
     */
    class QueryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Query
         */
        protected $query;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface
         */
        protected $querySettings;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /** @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject $objectManager */
        public function executeReturnsQueryResultInstanceAndInjectsItself() {}
        /**
         * @test
         */
        public function executeReturnsRawObjectDataIfReturnRawQueryResultIsSet() {}
        /**
         * @test
         */
        public function setLimitAcceptsOnlyIntegers() {}
        /**
         * @test
         */
        public function setLimitRejectsIntegersLessThanOne() {}
        /**
         * @test
         */
        public function setOffsetAcceptsOnlyIntegers() {}
        /**
         * @test
         */
        public function setOffsetRejectsIntegersLessThanZero() {}
        /**
         * @return array
         */
        public function equalsForCaseSensitiveFalseLowercasesOperandProvider() {}
/** @var $qomFactory \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory */
        public function equalsForCaseSensitiveFalseLowercasesOperand(/** @var $qomFactory \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory */
$propertyName, /** @var $qomFactory \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory */
$operand, /** @var $qomFactory \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory */
$expectedOperand) {}
    }

    /**
     * Test case
     */
    class QueryResultTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QueryResult
         */
        protected $queryResult;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\QueryInterface
         */
        protected $mockQuery;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $mockPersistenceManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $mockDataMapper;
        /**
         * @var array
         */
        protected $sampleResult;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getQueryReturnsQueryObject() {}
        /**
         * @test
         */
        public function getQueryReturnsAClone() {}
        /**
         * @test
         */
        public function offsetExistsWorksAsExpected() {}
        /**
         * @test
         */
        public function offsetGetWorksAsExpected() {}
        /**
         * @test
         */
        public function offsetSetWorksAsExpected() {}
        /**
         * @test
         */
        public function offsetUnsetWorksAsExpected() {}
        /**
         * @test
         */
        public function countDoesNotInitializeProxy() {}
        /**
         * @test
         */
        public function countCallsGetObjectCountByQueryOnPersistenceManager() {}
        /**
         * @test
         */
        public function countCountsQueryResultDirectlyIfAlreadyInitialized() {}
        /**
         * @test
         */
        public function countOnlyCallsGetObjectCountByQueryOnPersistenceManagerOnce() {}
        /**
         * @test
         */
        public function iteratorMethodsAreCorrectlyImplemented() {}
        /**
         * @test
         */
        public function initializeExecutesQueryWithArrayFetchMode() {}
        /**
         * @test
         */
        public function usingCurrentOnTheQueryResultReturnsNull() {}
    }

    /**
     * Test case
     */
    class QueryFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $className;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QueryFactory
         */
        protected $queryFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $dataMapper;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMap|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $dataMap;

        protected function setUp() {}
        public function getStaticAndRootLevelAndExpectedResult() {}
/** @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject $objectManager */
        public function createDoesNotRespectStoragePageIfStaticOrRootLevelIsTrue(/** @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject $objectManager */
$static, /** @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject $objectManager */
$rootLevel, /** @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject $objectManager */
$expectedResult) {}
    }

    /**
     * Test case
     */
    class BackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function insertRelationInRelationtableSetsMmMatchFieldsInRow() {}
        /**
         * @test
         */
        public function getIdentifierByObjectReturnsIdentifierForNonlazyObject() {}
        /**
         * @test
         */
        public function getIdentifierByObjectReturnsIdentifierForLazyObject() {}
    }

    /**
     * Test case
     */
    class Typo3QuerySettingsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings
         */
        protected $typo3QuerySettings;

        /**
         * setup test environment
         */
        protected function setUp() {}
        /**
         * @return array
         */
        public function booleanValueProvider() {}
        /**
         * @return array
         */
        public function arrayValueProvider() {}
        public function setRespectStoragePageSetsRespectStoragePageCorrectly($input) {}
        /**
         * @test
         */
        public function setRespectStoragePageAllowsChaining() {}
        public function setStoragePageIdsSetsStoragePageIdsCorrectly($input) {}
        /**
         * @test
         */
        public function setStoragePageIdsAllowsChaining() {}
        public function setRespectSysLanguageSetsRespectSysLanguageCorrectly($input) {}
        /**
         * @test
         */
        public function setRespectSysLanguageAllowsChaining() {}
        /**
         * @test
         */
        public function setLanguageUidAllowsChaining() {}
        public function setIgnoreEnableFieldsSetsIgnoreEnableFieldsCorrectly($input) {}
        /**
         * @test
         */
        public function setIgnoreEnableFieldsAllowsChaining() {}
        public function setEnableFieldsToBeIgnoredSetsEnableFieldsToBeIgnoredCorrectly($input) {}
        /**
         * @test
         */
        public function setEnableFieldsToBeIgnoredAllowsChaining() {}
        public function setIncludeDeletedSetsIncludeDeletedCorrectly($input) {}
        /**
         * @test
         */
        public function setIncludeDeletedAllowsChaining() {}
    }

    /**
     * Test case
     */
    class PersistenceManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;

        protected function setUp() {}
        /**
         * @test
         */
        public function persistAllPassesAddedObjectsToBackend() {}
        /**
         * @test
         */
        public function persistAllPassesRemovedObjectsToBackend() {}
        /** @var \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $manager */
        public function getIdentifierByObjectReturnsIdentifierFromBackend() {}
        /**
         * @test
         */
        public function getObjectByIdentifierReturnsObjectFromSessionIfAvailable() {}
        /**
         * @test
         */
        public function getObjectByIdentifierReturnsObjectFromPersistenceIfAvailable() {}
        /**
         * @test
         */
        public function getObjectByIdentifierReturnsNullForUnknownObject() {}
        /**
         * @test
         */
        public function addActuallyAddsAnObjectToTheInternalObjectsArray() {}
        /**
         * @test
         */
        public function removeActuallyRemovesAnObjectFromTheInternalObjectsArray() {}
        /**
         * @test
         */
        public function removeRemovesTheRightObjectEvenIfItHasBeenModifiedSinceItsAddition() {}
        /**
         * Make sure we remember the objects that are not currently add()ed
         * but might be in persistent storage.
         *
         * @test
         */
        public function removeRetainsObjectForObjectsNotInCurrentSession() {}
        /**
         * @test
         */
        public function updateSchedulesAnObjectForPersistence() {}
        /**
         * @test
         */
        public function clearStateForgetsAboutNewObjects() {}
        /**
         * @test
         */
        public function tearDownWithBackendSupportingTearDownDelegatesCallToBackend() {}
        /**
         * @test
         *
         * This test and the related Fixtures TxDomainModelTestEntity and
         * TxDomainRepositoryTestEntityRepository can be removed if we do not need to support
         * underscore class names instead of namespaced class names
         */
        public function persistAllAddsReconstitutedObjectFromSessionToBackendsAggregateRootObjects() {}
        /**
         * @test
         */
        public function persistAllAddsNamespacedReconstitutedObjectFromSessionToBackendsAggregateRootObjects() {}
    }

    class SessionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function objectRegisteredWithRegisterReconstitutedEntityCanBeRetrievedWithGetReconstitutedEntities() {}
        /**
         * @test
         */
        public function unregisterReconstitutedEntityRemovesObjectFromSession() {}
        /**
         * @test
         */
        public function hasObjectReturnsTrueForRegisteredObject() {}
        /**
         * @test
         */
        public function hasIdentifierReturnsTrueForRegisteredObject() {}
        /**
         * @test
         */
        public function getIdentifierByObjectReturnsRegisteredUUIDForObject() {}
        /**
         * @test
         */
        public function getObjectByIdentifierReturnsRegisteredObjectForUUID() {}
        /**
         * @test
         */
        public function unregisterObjectRemovesRegisteredObject() {}
        /**
         * @test
         */
        public function newSessionIsEmpty() {}
        /**
         * @test
         */
        public function objectCanBeRegisteredAsReconstituted() {}
        /**
         * @test
         */
        public function objectCanBeUnregisteredAsReconstituted() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Persistence\Generic\Mapper {
    /**
     * Test case
     */
    class DataMapperTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var DataMapper|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject $dataMapper */
        public function mapMapsArrayToObjectByCallingmapToObject() {}
        /**
         * @test
         */
        public function mapSingleRowReturnsObjectFromPersistenceSessionIfAvailable() {}
        /**
         * @test
         */
        public function thawPropertiesSetsPropertyValues() {}
        /**
         * Test if fetchRelatedEager method returns NULL when $fieldValue = '' and relation type == RELATION_HAS_ONE
         *
         * @test
         */
        public function fetchRelatedEagerReturnsNullForEmptyRelationHasOne() {}
        /**
         * Test if fetchRelatedEager method returns empty array when $fieldValue = '' and relation type != RELATION_HAS_ONE
         *
         * @test
         */
        public function fetchRelatedEagerReturnsEmptyArrayForEmptyRelationNotHasOne() {}
        /**
         * Test if fetchRelatedEager method returns NULL when $fieldValue = ''
         * and relation type == RELATION_HAS_ONE without calling fetchRelated
         *
         * @test
         */
        public function mapObjectToClassPropertyReturnsNullForEmptyRelationHasOne() {}
        /** @var \TYPO3\CMS\Extbase\Reflection\ClassSchema|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject $classSchema1 */
        public function mapObjectToClassPropertyReturnsExistingObjectWithoutCallingFetchRelated() {}
        /**
         * Data provider for date checks. Date will be stored based on UTC in
         * the database. That's why it's not possible to check for explicit date
         * strings but using the date('c') conversion instead, which considers the
         * current local timezone setting.
         *
         * @return array
         */
        public function mapDateTimeHandlesDifferentFieldEvaluationsDataProvider() {}
/** @var $dateTime NULL|\DateTime */
        public function mapDateTimeHandlesDifferentFieldEvaluations(/** @var $dateTime NULL|\DateTime */
$value, /** @var $dateTime NULL|\DateTime */
$storageFormat, /** @var $dateTime NULL|\DateTime */
$expectedValue) {}
        /**
         * @test
         */
        public function mapDateTimeHandlesSubclassesOfDateTime() {}
        /**
         * @test
         */
        public function getPlainValueReturnsCorrectDateTimeFormat() {}
        public function getPlainValueReturnsExpectedValues($expectedValue, $input) {}
        /**
         * @return array
         */
        public function getPlainValueReturnsExpectedValuesDataProvider() {}
        /**
         * @test
         */
        public function getPlainValueCallsGetRealInstanceOnInputIfInputIsInstanceOfLazyLoadingProxy() {}
        /**
         * @test
         */
        public function getPlainValueCallsGetUidOnDomainObjectInterfaceInput() {}
    }

    /**
     * Test case
     */
    class DataMapFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @return array
         */
        public function oneToOneRelation() {}
        public function setRelationsDetectsOneToOneRelation($className) {}
        /**
         * @test
         */
        public function settingOneToOneRelationSetsRelationTableMatchFields() {}
        /**
         * @test
         */
        public function settingOneToManyRelationSetsRelationTableMatchFields() {}
        /**
         * @test
         */
        public function setRelationsDetectsOneToOneRelationWithIntermediateTable() {}
        /**
         * @test
         */
        public function setRelationsDetectsOneToManyRelation() {}
        /**
         * @test
         */
        public function setRelationsDetectsSelectRenderTypeSingleAsNonRelational() {}
        /**
         * @return array
         */
        public function columnConfigurationIsInitializedWithMaxItemsEvaluationForTypeGroupDataProvider() {}
        public function setRelationsDetectsTypeGroupAndRelationManyToMany($maxitems, $relation) {}
        /**
         * @test
         */
        public function setRelationsDetectsManyToManyRelationOfTypeSelect() {}
        /**
         * @test
         */
        public function setRelationsDetectsManyToManyRelationOfTypeInlineWithIntermediateTable() {}
        /**
         * @test
         */
        public function columnMapIsInitializedWithManyToManyRelationOfTypeSelect() {}
        /**
         * @test
         */
        public function columnMapIsInitializedWithOppositeManyToManyRelationOfTypeSelect() {}
        /**
         * @test
         */
        public function columnMapIsInitializedWithManyToManyRelationOfTypeInlineAndIntermediateTable() {}
        /**
         * @test
         */
        public function columnMapIsInitializedWithManyToManyRelationWithoutPidColumn() {}
        /**
         * @test
         */
        public function columnMapIsInitializedWithManyToManyRelationWithPidColumn() {}
        /**
         * @return array
         */
        public function columnMapIsInitializedWithFieldEvaluationsForDateTimeFieldsDataProvider() {}
        public function columnMapIsInitializedWithFieldEvaluationsForDateTimeFields($type, $expectedValue) {}
        /**
         * @test
         */
        public function buildDataMapThrowsExceptionIfClassNameIsNotKnown() {}
        /** @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory $dataMapFactory */
        public function buildDataMapFetchesSubclassesRecursively() {}
        /**
         * @return array
         */
        public function classNameTableNameMappings() {}
        public function resolveTableNameReturnsExpectedTablenames($className, $expected) {}
        /** @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject $objectManager */
        public function createColumnMapReturnsAValidColumnMap() {}
        /**
         * @return array
         */
        public function tcaConfigurationsContainingTypeAndInternalType() {}
/** @var ColumnMap $columnMap */
        public function setTypeDetectsTypeAndInternalTypeProperly(/** @var ColumnMap $columnMap */
array $columnConfiguration, /** @var ColumnMap $columnMap */
$type, /** @var ColumnMap $columnMap */
$internalType) {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Persistence\Generic\Storage {
    class Typo3DbQueryParserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var arary
         */
        protected $singletonInstances;

        /**
         * Set up tests
         */
        protected function setUp() {}
        /**
         * Clean up after tests
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function convertQueryToDoctrineQueryBuilderDoesNotAddAndWhereWithEmptyConstraint() {}
        /**
         * @test
         */
        public function convertQueryToDoctrineQueryBuilderThrowsExceptionOnNotImplementedConstraint() {}
        /**
         * @test
         */
        public function convertQueryToDoctrineQueryBuilderAddsSimpleAndWhere() {}
        /**
         * @test
         */
        public function convertQueryToDoctrineQueryBuilderAddsNotConstraint() {}
        /**
         * @test
         */
        public function convertQueryToDoctrineQueryBuilderAddsAndConstraint() {}
        /**
         * @test
         */
        public function convertQueryToDoctrineQueryBuilderNotAddsInvalidAndConstraint() {}
        /**
         * @test
         */
        public function convertQueryToDoctrineQueryBuilderAddsOrConstraint() {}
        /**
         * @test
         */
        public function convertQueryToDoctrineQueryBuilderNotAddsInvalidOrConstraint() {}
        /**
         * @return \Prophecy\Prophecy\ObjectProphecy
         */
        protected function getQueryBuilderWithExpressionBuilderProphet() {}
        /**
         * @return \Prophecy\Prophecy\ObjectProphecy
         */
        protected function getQueryBuilderProphetWithQueryBuilderForSubselect() {}
        /** @var \TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings|\PHPUnit_Framework_MockObject_MockObject $querySettings */
        public function addSysLanguageStatementWorksForDefaultLanguage() {}
        /** @var \TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings|\PHPUnit_Framework_MockObject_MockObject $querySettings */
        public function addSysLanguageStatementWorksForNonDefaultLanguage() {}
        /**
         * @test
         */
        public function addSysLanguageStatementWorksInBackendContextWithNoGlobalTypoScriptFrontendControllerAvailable() {}
        /**
         * @test
         */
        public function addSysLanguageStatementWorksForDefaultLanguageWithoutDeleteStatementReturned() {}
        /**
         * @test
         */
        public function addSysLanguageStatementWorksForForeignLanguageWithoutSubselection() {}
        /**
         * @test
         */
        public function addSysLanguageStatementWorksForForeignLanguageWithSubselectionWithoutDeleteStatementReturned() {}
        /**
         * @test
         */
        public function addSysLanguageStatementWorksForForeignLanguageWithSubselectionTakesDeleteStatementIntoAccountIfNecessary() {}
        /**
         * @test
         */
        public function addSysLanguageStatementWorksInBackendContextWithSubselectionTakesDeleteStatementIntoAccountIfNecessary() {}
        /**
         * @test
         */
        public function orderStatementGenerationWorks() {}
        /**
         * @test
         */
        public function orderStatementGenerationThrowsExceptionOnUnsupportedOrder() {}
        /**
         * @test
         */
        public function orderStatementGenerationWorksWithMultipleOrderings() {}
        public function providerForVisibilityConstraintStatement() {}
/** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
        public function visibilityConstraintStatementIsGeneratedAccordingToTheQuerySettings(/** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
$mode, /** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
$ignoreEnableFields, /** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
$enableFieldsToBeIgnored, /** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
$deletedValue, /** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
$expectedSql) {}
        public function providerForRespectEnableFields() {}
/** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
        public function respectEnableFieldsSettingGeneratesCorrectStatement(/** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
$mode, /** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
$respectEnableFields, /** @var $mockEnvironmentService \TYPO3\CMS\Extbase\Service\EnvironmentService | \PHPUnit_Framework_MockObject_MockObject */
$expectedSql) {}
        /**
         * @test
         */
        public function visibilityConstraintStatementGenerationThrowsExceptionIfTheQuerySettingsAreInconsistent() {}
        /**
         * DataProvider for addPageIdStatement Tests
         */
        public function providerForAddPageIdStatementData() {}
        public function addPageIdStatementSetsPidToZeroIfTableDeclaresRootlevel($rootLevel, $table, $expectedSql, $storagePageIds = [42, 27]) {}
    }

    /**
     * Test case
     */
    class Typo3DbBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        public function setUp() {}
        /**
         * @return array
         */
        public function uidOfAlreadyPersistedValueObjectIsDeterminedCorrectlyDataProvider() : array {}
        public function uidOfAlreadyPersistedValueObjectIsDeterminedCorrectly(bool $isFrontendEnvironment) {}
        /**
         * @test
         */
        public function doLanguageAndWorkspaceOverlayChangesUidIfInPreview() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Service {
    /**
     * Test case
     */
    class ExtensionServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $mockConfigurationManager;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $extensionService;

        protected function setUp() {}
        /**
         * Setup and return a mocked database connection that allows
         * the QueryBuilder to work.
         *
         * @return ObjectProphecy
         */
        protected function getMockDatabaseConnection() : ObjectProphecy {}
        /**
         * DataProvider for getPluginNamespaceByPluginSignatureTests()
         *
         * @return array
         */
        public function getPluginNamespaceDataProvider() {}
        public function getPluginNamespaceTests($extensionName, $pluginName, $expectedResult) {}
        /**
         * @test
         */
        public function pluginNamespaceCanBeOverridden() {}
        /**
         * DataProvider for getPluginNameByActionTests()
         *
         * @return array
         */
        public function getPluginNameByActionDataProvider() {}
        public function getPluginNameByActionTests($extensionName, $controllerName, $actionName, $expectedResult) {}
        /**
         * @test
         */
        public function getPluginNameByActionThrowsExceptionIfMoreThanOnePluginMatches() {}
        /**
         * @test
         */
        public function getPluginNameByActionReturnsCurrentIfItCanHandleTheActionEvenIfMoreThanOnePluginMatches() {}
        /**
         * @test
         */
        public function isActionCacheableReturnsTrueByDefault() {}
        /**
         * @test
         */
        public function isActionCacheableReturnsFalseIfActionIsNotCacheable() {}
        /**
         * @test
         */
        public function getTargetPidByPluginSignatureReturnsNullIfConfigurationManagerIsNotInitialized() {}
        /**
         * @test
         */
        public function getTargetPidByPluginSignatureReturnsNullIfDefaultPidIsZero() {}
        /**
         * @test
         */
        public function getTargetPidByPluginSignatureReturnsTheConfiguredDefaultPid() {}
        /**
         * @test
         * @todo This should rather be a functional test since it needs a connection / querybuilder
         */
        public function getTargetPidByPluginSignatureDeterminesTheTargetPidIfDefaultPidIsAuto() {}
        /**
         * @test
         * @todo This should rather be a functional test since it needs a connection / querybuilder
         */
        public function getTargetPidByPluginSignatureReturnsNullIfTargetPidCouldNotBeDetermined() {}
        /**
         * @test
         * @todo This should rather be a functional test since it needs a connection / querybuilder
         */
        public function getTargetPidByPluginSignatureThrowsExceptionIfMoreThanOneTargetPidsWereFound() {}
        /**
         * @test
         */
        public function getDefaultControllerNameByPluginReturnsNullIfGivenExtensionCantBeFound() {}
        /**
         * @test
         */
        public function getDefaultControllerNameByPluginReturnsNullIfGivenPluginCantBeFound() {}
        /**
         * @test
         */
        public function getDefaultControllerNameByPluginReturnsFirstControllerNameOfGivenPlugin() {}
        /**
         * @test
         */
        public function getDefaultActionNameByPluginAndControllerReturnsNullIfGivenExtensionCantBeFound() {}
        /**
         * @test
         */
        public function getDefaultActionNameByPluginAndControllerReturnsNullIfGivenPluginCantBeFound() {}
        /**
         * @test
         */
        public function getDefaultActionNameByPluginAndControllerReturnsNullIfGivenControllerCantBeFound() {}
        /**
         * @test
         */
        public function getDefaultActionNameByPluginAndControllerReturnsFirstActionNameOfGivenController() {}
    }

    /**
     * Test case
     */
    class FlexFormServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array Backup of singletons
         */
        protected $backupSingletons;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function convertFlexFormContentToArrayResolvesComplexArrayStructure() {}
    }

    /**
     * Test case
     */
    class CacheServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Service\CacheService
         */
        protected $cacheService;
        /**
         * @var \TYPO3\CMS\Core\Cache\CacheManager|PHPUnit_Framework_MockObject_MockObject
         */
        protected $cacheManagerMock;

        protected function setUp() {}
        /**
         * @test
         */
        public function clearPageCacheConvertsPageIdsToArray() {}
        /**
         * @test
         */
        public function clearPageCacheConvertsPageIdsToNumericArray() {}
        /**
         * @test
         */
        public function clearPageCacheDoesNotConvertPageIdsIfNoneAreSpecified() {}
        /**
         * @test
         */
        public function clearPageCacheUsesCacheManagerToFlushCacheOfSpecifiedPages() {}
        /**
         * @test
         */
        public function clearsCachesOfRegisteredPageIds() {}
        /**
         * @test
         */
        public function clearsCachesOfDuplicateRegisteredPageIdsOnlyOnce() {}
    }

    /**
     * Test case
     */
    class ImageScriptServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ImageService
         */
        protected $subject;
        /**
         * @var EnvironmentService|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $environmentService;

        /**
         * Initialize ImageService and environment service mock
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function fileIsUnwrappedFromReferenceForProcessing() {}
        /**
         * @return array
         */
        public function prefixIsCorrectlyAppliedToGetImageUriDataProvider() {}
        public function prefixIsCorrectlyAppliedToGetImageUri($imageUri, $expected) {}
        /**
         * @return array
         */
        public function prefixIsCorrectlyAppliedToGetImageUriWithAbsolutePathDataProvider() {}
        public function prefixIsCorrectlyAppliedToGetImageUriWithForcedAbsoluteUrl($imageUri, $expected) {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\SignalSlot {
    /**
     * Test case
     */
    class DispatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $signalSlotDispatcher;

        protected function setUp() {}
        /**
         * @test
         */
        public function connectAllowsForConnectingASlotWithASignal() {}
        /**
         * @test
         */
        public function connectAlsoAcceptsObjectsInPlaceOfTheClassName() {}
        /**
         * @test
         */
        public function connectAlsoAcceptsClosuresActingAsASlot() {}
        /**
         * @test
         */
        public function dispatchPassesTheSignalArgumentsToTheSlotMethod() {}
        /**
         * @test
         */
        public function dispatchRetrievesSlotInstanceFromTheObjectManagerIfOnlyAClassNameWasSpecified() {}
        /**
         * @test
         */
        public function dispatchHandsOverArgumentsReturnedByAFormerSlot() {}
        /**
         * @test
         */
        public function dispatchHandsOverArgumentsReturnedByAFormerSlotWithoutInterferingWithSignalSlotInformation() {}
        /**
         * @test
         */
        public function dispatchHandsOverFormerArgumentsIfPreviousSlotDoesNotReturnAnything() {}
        /**
         * @test
         */
        public function dispatchThrowsAnExceptionIfTheSlotReturnsNonArray() {}
        /**
         * @test
         */
        public function dispatchThrowsAnExceptionIfTheSlotReturnsDifferentNumberOfItems() {}
        /**
         * @test
         */
        public function dispatchThrowsAnExceptionIfTheSpecifiedClassOfASlotIsUnknown() {}
        /**
         * @test
         */
        public function dispatchThrowsAnExceptionIfTheSpecifiedSlotMethodDoesNotExist() {}
        /**
         * @test
         */
        public function dispatchPassesFirstArgumentContainingSlotInformationIfTheConnectionStatesSo() {}
        /**
         * @test
         */
        public function connectThrowsInvalidArgumentExceptionIfSlotMethodNameIsEmptyAndSlotClassNameIsNoClosure() {}
        /**
         * @test
         */
        public function dispatchReturnsEmptyArrayIfSignalNameAndOrSignalClassNameIsNotRegistered() {}
        /**
         * @test
         */
        public function dispatchReturnsEmptyArrayIfSignalDoesNotProvideAnyArguments() {}
        /**
         * @test
         */
        public function dispatchReturnsArgumentsArrayAsIsIfSignalIsNotRegistered() {}
        /**
         * @test
         */
        public function dispatchThrowsInvalidSlotExceptionIfObjectManagerOfSignalSlotDispatcherIsNotSet() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\SignalSlot\Fixtures {
    /**
     * Fixture
     */
    class OnlyClassNameSpecifiedFixture {
        /**
         * @var array
         */
        public $arguments;

        public function slot($foo, $baz) {}
    }

    /**
     * Fixture
     */
    class SlotMethodDoesNotExistFixture {
        /**
         * @var array
         */
        public $arguments;

        public function slot($foo, $baz) {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Error {
    /**
     * Test case
     */
    class MessageTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function theConstructorSetsTheMessageMessageCorrectly() {}
        /**
         * @test
         */
        public function theConstructorSetsTheMessageCodeCorrectly() {}
        /**
         * @test
         */
        public function theConstructorSetsTheMessageArgumentsCorrectly() {}
        /**
         * @test
         */
        public function theConstructorSetsTheMessageTitleCorrectly() {}
        /**
         * @test
         */
        public function renderRendersCorrectlyWithoutArguments() {}
        /**
         * @test
         */
        public function renderRendersCorrectlyWithArguments() {}
        /**
         * @test
         */
        public function toStringCallsRender() {}
    }

    /**
     * Test case
     */
    class ResultTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Error\Result
         */
        protected $result;

        protected function setUp() {}
        /**
         * @return array
         */
        public function dataTypes() {}
        protected function getMockMessage($type) {}
        public function addedMessagesShouldBeRetrievableAgain($dataTypeInSingular, $dataTypeInPlural) {}
        public function getMessageShouldNotBeRecursive($dataTypeInSingular, $dataTypeInPlural) {}
        public function getFirstMessageShouldReturnFirstMessage($dataTypeInSingular, $dataTypeInPlural) {}
        /**
         * @test
         */
        public function forPropertyShouldReturnSubResult() {}
        /**
         * @test
         */
        public function forPropertyWithEmptyStringShouldReturnSelf() {}
        /**
         * @test
         */
        public function forPropertyWithNullShouldReturnSelf() {}
        public function hasMessagesShouldReturnTrueIfTopLevelObjectHasMessages($dataTypeInSingular, $dataTypeInPlural) {}
        public function hasMessagesShouldReturnTrueIfSubObjectHasErrors($dataTypeInSingular, $dataTypeInPlural) {}
        public function hasMessagesShouldReturnFalseIfSubObjectHasNoErrors($dataTypeInSingular, $dataTypeInPlural) {}
        public function getFlattenedMessagesShouldReturnAllSubMessages($dataTypeInSingular, $dataTypeInPlural) {}
        public function getFlattenedMessagesShouldNotContainEmptyResults($dataTypeInSingular, $dataTypeInPlural) {}
        /**
         * @test
         */
        public function mergeShouldMergeTwoResults() {}
    }

    /**
     * Test case
     */
    class ErrorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function theConstructorSetsTheErrorMessageCorrectly() {}
        /**
         * @test
         */
        public function theConstructorSetsTheErrorCodeCorrectly() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Domain\Repository {
    /**
     * Test case
     */
    class CategoryRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function initializeObjectSetsRespectStoragePidToFalse() {}
    }

    /**
     * Test case
     */
    class FileMountRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var $objectManager \TYPO3\CMS\Extbase\Object\ObjectManagerInterface */
        public function initializeObjectSetsRespectStoragePidToFalse() {}
    }

    /**
     * Test case
     */
    class BackendUserRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function initializeObjectSetsRespectStoragePidToFalse() {}
        /**
         * @test
         */
        public function initializeObjectSetsDefaultQuerySettings() {}
    }

    /**
     * Test case
     */
    class BackendUserGroupRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function initializeObjectSetsRespectStoragePidToFalse() {}
        /** @var $fixture \TYPO3\CMS\Extbase\Domain\Repository\BackendUserGroupRepository */
        public function initializeObjectSetsDefaultQuerySettings() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Domain\Model {
    /**
     * Test case
     */
    class FrontendUserGroupTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getTitleInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function getTitleInitiallyReturnsGivenTitleFromConstruct() {}
        /**
         * @test
         */
        public function setTitleSetsTitle() {}
        /**
         * @test
         */
        public function getLockToDomainInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setLockToDomainSetsLockToDomain() {}
        /**
         * @test
         */
        public function getDescriptionInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setDescriptionSetsDescription() {}
        /**
         * @test
         */
        public function addSubgroupAddsSubgroup() {}
        /**
         * @test
         */
        public function removeSubgroupRemovesSubgroup() {}
        /**
         * @test
         */
        public function setSubgroupSetsSubgroups() {}
    }

    /**
     * Test case
     */
    class BackendUserGroupTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Domain\Model\BackendUserGroup
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getTitleInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setTitleSetsTitle() {}
        /**
         * @test
         */
        public function getDescriptionInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setDescriptionSetsDescription() {}
        /**
         * @test
         */
        public function setSubGroupsSetsSubgroups() {}
        /**
         * @test
         */
        public function anSubGroupCanBeRemoved() {}
        /**
         * @test
         */
        public function allSubGroupsCanBeRemoved() {}
        /**
         * @test
         */
        public function getModulesInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setModulesSetsModules() {}
        /**
         * @test
         */
        public function getTablesListeningInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setTablesListeningSetsTablesListening() {}
        /**
         * @test
         */
        public function getTablesModifyInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function getPageTypesInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setPageTypesSetsPageTypes() {}
        /**
         * @test
         */
        public function setTablesModifySetsTablesModify() {}
        /**
         * @test
         */
        public function getAllowedExcludeFieldsInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setAllowedExcludeFieldsSetsAllowedExcludeFields() {}
        /**
         * @test
         */
        public function getExplicitlyAllowAndDenyInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setExplicitlyAllowAndDenySetsExplicitlyAllowAndDeny() {}
        /**
         * @test
         */
        public function getAllowedLanguagesInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setAllowedLanguagesSetsAllowedLanguages() {}
        /**
         * @test
         */
        public function getWorkspacePermissionInitiallyReturnsFalse() {}
        /**
         * @test
         */
        public function setWorkspacePermissionSetsWorkspacePermission() {}
        /**
         * @test
         */
        public function getDatabaseMountsInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setDatabaseMountsSetsDatabaseMounts() {}
        /**
         * @test
         */
        public function getFileOperationPermissionsInitiallyReturnsZero() {}
        /**
         * @test
         */
        public function setFileOperationPermissionsSetsFileOperationPermissions() {}
        /**
         * @test
         */
        public function getIsFileOperationAllowedReturnsFalse() {}
        /**
         * @test
         */
        public function getIsFileOperationAllowedReturnsTrue() {}
        /**
         * @test
         */
        public function setFileOperationAllowedSetsFileOperationAllowed() {}
        /**
         * @test
         */
        public function getIsDirectoryRemoveRecursivelyAllowedReturnsFalse() {}
        /**
         * @test
         */
        public function getIsDirectoryRemoveRecursivelyAllowedReturnsTrue() {}
        /**
         * @test
         */
        public function setDirectoryRemoveRecursivelyAllowedSetsDirectoryRemoveRecursivelyAllowed() {}
        /**
         * @test
         */
        public function getIsDirectoryCopyAllowedReturnsFalse() {}
        /**
         * @test
         */
        public function getIsDirectoryCopyAllowedReturnsTrue() {}
        /**
         * @test
         */
        public function setDirectoryCopyAllowedSetsDirectoryCopyAllowed() {}
        /**
         * @test
         */
        public function getIsDirectoryOperationAllowedReturnsFalse() {}
        /**
         * @test
         */
        public function getIsDirectoryOperationAllowedReturnsTrue() {}
        /**
         * @test
         */
        public function setDirectoryOperationAllowedSetsDirectoryOperationAllowed() {}
        /**
         * @test
         */
        public function getLockToDomainInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setLockToDomainSetsLockToDomain() {}
        /**
         * @test
         */
        public function getTsConfigInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setTsConfigSetsTsConfig() {}
    }

    /**
     * Test case
     */
    class FileMountTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Domain\Model\FileMount
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getTitleInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setTitleSetsTitle() {}
        /**
         * @test
         */
        public function setDescriptionSetsDescription() {}
        /**
         * @test
         */
        public function getPathInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setPathSetsPath() {}
        /**
         * @test
         */
        public function getIsAbsolutePathInitiallyReturnsFalse() {}
        /**
         * @test
         */
        public function setIsAbsolutePathCanSetBaseIsAbsolutePathToTrue() {}
    }

    /**
     * Test case
     */
    class BackendUserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Domain\Model\BackendUser
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getUserNameInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setUserNameSetsUserName() {}
        /**
         * @test
         */
        public function getIsAdministratorInitiallyReturnsFalse() {}
        /**
         * @test
         */
        public function setIsAdministratorCanSetIsAdministratorToTrue() {}
        /**
         * @test
         */
        public function getIsDisabledInitiallyReturnsFalse() {}
        /**
         * @test
         */
        public function setIsDisabledCanSetIsDisabledToTrue() {}
        /**
         * @test
         */
        public function getStartDateAndTimeInitiallyReturnsNull() {}
        /**
         * @test
         */
        public function setStartDateAndTimeSetsStartDateAndTime() {}
        /**
         * @test
         */
        public function getEndDateAndTimeInitiallyReturnsNull() {}
        /**
         * @test
         */
        public function setEndDateAndTimeSetsEndDateAndTime() {}
        /**
         * @test
         */
        public function isActivatedInitiallyReturnsTrue() {}
        /**
         * @test
         */
        public function isActivatedForDisabledReturnsFalse() {}
        /**
         * @test
         */
        public function isActivatedForStartDateAndTimeInFutureReturnsFalse() {}
        /**
         * @test
         */
        public function isActivatedForStartDateAndTimeInPastReturnsTrue() {}
        /**
         * @test
         */
        public function isActivatedForEndDateAndTimeInFutureReturnsTrue() {}
        /**
         * @test
         */
        public function isActivatedForEndDateAndTimeInPastReturnsFalse() {}
        /**
         * @test
         */
        public function isActivatedForStartDateAndTimeInPastEndDateAndTimeInFutureReturnsTrue() {}
        /**
         * @test
         */
        public function isActivatedForStartDateAndTimeInPastEndDateAndTimeInPastReturnsFalse() {}
        /**
         * @test
         */
        public function isActivatedForStartDateAndTimeInFutureEndDateAndTimeInFutureReturnsFalse() {}
        /**
         * @test
         */
        public function getEmailInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setEmailSetsEmail() {}
        /**
         * @test
         */
        public function getRealNameInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setRealNameSetsRealName() {}
        /**
         * @test
         */
        public function getIpLockIsDisabledInitiallyReturnsFalse() {}
        /**
         * @test
         */
        public function setIpLockIsDisabledCanSetIpLockIsDisabledToTrue() {}
        /**
         * @test
         */
        public function getLastLoginDateAndTimeInitiallyReturnsNull() {}
        /**
         * @test
         */
        public function setLastLoginDateAndTimeSetsLastLoginDateAndTime() {}
    }

    /**
     * Test case
     */
    class CategoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Domain\Model\Category
         */
        protected $fixture;

        protected function setUp() {}
        /**
         * @test
         */
        public function getTitleInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setTitleSetsTitle() {}
        /**
         * @test
         */
        public function getDescriptionInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setDescriptionSetsDescription() {}
        /**
         * @test
         */
        public function getParentInitiallyReturnsNull() {}
        /**
         * @test
         */
        public function setParentSetsParent() {}
    }

    /**
     * Test case
     */
    class FrontendUserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Domain\Model\FrontendUser
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getUsernameInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setUsernameSetsUsername() {}
        /**
         * @test
         */
        public function getPasswordInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setPasswordSetsPassword() {}
        /**
         * @test
         */
        public function setUsergroupSetsUsergroup() {}
        /**
         * @test
         */
        public function addUsergroupAddsUserGroup() {}
        /**
         * @test
         */
        public function removeUsergroupRemovesUsergroup() {}
        /**
         * @test
         */
        public function getNameInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setNameSetsName() {}
        /**
         * @test
         */
        public function getFirstNameInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setFirstNameSetsFirstName() {}
        /**
         * @test
         */
        public function getMiddleNameInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setMiddleNameSetsMiddleName() {}
        /**
         * @test
         */
        public function getLastNameInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setLastNameSetsLastName() {}
        /**
         * @test
         */
        public function getAddressInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setAddressSetsAddress() {}
        /**
         * @test
         */
        public function getTelephoneInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setTelephoneSetsTelephone() {}
        /**
         * @test
         */
        public function getFaxInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setFaxSetsFax() {}
        /**
         * @test
         */
        public function getEmailInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setEmailSetsEmail() {}
        /**
         * @test
         */
        public function getLockToDomainInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setLockToDomainSetsLockToDomain() {}
        /**
         * @test
         */
        public function getTitleInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setTitleSetsTitle() {}
        /**
         * @test
         */
        public function getZipInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setZipSetsZip() {}
        /**
         * @test
         */
        public function getCityInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setCitySetsCity() {}
        /**
         * @test
         */
        public function getCountryInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setCountrySetsCountry() {}
        /**
         * @test
         */
        public function getWwwInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setWwwSetsWww() {}
        /**
         * @test
         */
        public function getCompanyInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setCompanySetsCompany() {}
        /**
         * @test
         */
        public function getImageInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setImageSetsImage() {}
        /**
         * @test
         */
        public function getLastloginInitiallyReturnsNull() {}
        /**
         * @test
         */
        public function setLastloginSetsLastlogin() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Hook\DataHandler {
    /**
     * Test case
     */
    class CheckFlexFormValueTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var \TYPO3\CMS\Extbase\Hook\DataHandler\CheckFlexFormValue $checkFlexFormValue */
        public function checkFlexFormValueBeforeMergeRemovesSwitchableControllerActions() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Validation {
    /**
     * Test case
     */
    class ValidatorResolverTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Validation\ValidatorResolver | \PHPUnit_Framework_MockObject_MockObject | \TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $validatorResolver;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManager | \PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockObjectManager;

        protected function setUp() {}
        /**
         * @test
         */
        public function resolveValidatorObjectNameWithShortHandNotationReturnsValidatorNameIfClassExists() {}
        /**
         * @test
         */
        public function resolveValidatorObjectNameWithShortHandNotationThrowsExceptionIfClassNotExists() {}
        /**
         * @test
         */
        public function resolveValidatorObjectNameWithShortHandNotationReturnsValidatorNameIfClassExistsButDoesNotImplementValidatorInterface() {}
        /**
         * @test
         */
        public function resolveValidatorObjectNameReturnsValidatorNameIfClassExists() {}
        /**
         * @test
         */
        public function resolveValidatorObjectNameThrowsNoSuchValidatorExceptionIfClassNotExists() {}
        /**
         * @test
         */
        public function resolveValidatorObjectNameThrowsNoSuchValidatorExceptionIfClassExistsButDoesNotImplementValidatorInterface() {}
        /**
         * @return array
         */
        public function namespacedShorthandValidatornames() {}
        public function resolveValidatorObjectNameCanResolveNamespacedShorthandValidatornames($namespace, $className, $shorthandValidatorname) {}
        /**
         * @test
         */
        public function resolveValidatorObjectNameCanResolveShortNamesOfBuiltInValidators() {}
        /** @var \TYPO3\CMS\Extbase\Validation\ValidatorResolver $validatorResolver */
        public function createValidatorResolvesAndReturnsAValidatorAndPassesTheGivenOptions() {}
        /**
         * @test
         */
        public function createValidatorThrowsNoSuchValidatorExceptionIfAValidatorCouldNotBeResolved() {}
        /**
         * @test
         */
        public function getBaseValidatorCachesTheResultOfTheBuildBaseValidatorChainCalls() {}
        /**
         * @test
         */
        public function buildMethodArgumentsValidatorConjunctionsReturnsEmptyArrayIfMethodHasNoArguments() {}
        /**
         * @test
         */
        public function buildMethodArgumentsValidatorConjunctionsBuildsAConjunctionFromValidateAnnotationsOfTheSpecifiedMethod() {}
        /**
         * @test
         */
        public function buildMethodArgumentsValidatorConjunctionsThrowsExceptionIfValidationAnnotationForNonExistingArgumentExists() {}
        /**
         * @test
         */
        public function buildBaseValidatorConjunctionAddsValidatorsDefinedByAnnotationsInTheClassToTheReturnedConjunction() {}
        /**
         * dataProvider for buildBaseValidatorConjunctionAddsValidatorFromConventionToTheReturnedConjunction
         *
         * @return array
         */
        public function modelNamesProvider() {}
        public function buildBaseValidatorConjunctionCreatesValidatorFromClassName($modelClassName, $validatorClassName) {}
        /**
         * @test
         */
        public function resolveValidatorObjectNameCallsGetValidatorType() {}
        /**
         * @test
         */
        public function getValidatorTypeCorrectlyRenamesPhpDataTypes() {}
        /**
         * @test
         */
        public function getValidatorTypeRenamesMixedToRaw() {}
        /**
         * dataProvider for parseValidatorAnnotationCanParseAnnotations
         * @return array
         */
        public function validatorAnnotations() {}
        public function parseValidatorAnnotationCanParseAnnotations($annotation, $expectedResult) {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Validation\Validator {
    /**
     * Testcase for the integer validator
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class IntegerValidatorTest extends \typo3\cms\extbase\tests\unit\validation\validator\abstractvalidatortestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        public function setup() {}
        /**
         * Data provider with valid integers
         *
         * @return array
         */
        public function validIntegers() {}
        public function integerValidatorReturnsNoErrorsForAValidInteger($integer) {}
        /**
         * Data provider with invalid integers
         *
         * @return array
         */
        public function invalidIntegers() {}
        public function integerValidatorReturnsErrorForAnInvalidInteger($invalidInteger) {}
        /**
         * @test
         */
        public function integerValidatorCreatesTheCorrectErrorForAnInvalidSubject() {}
    }

    /**
     * Testcase for the string length validator
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class StringValidatorTest extends \typo3\cms\extbase\tests\unit\validation\validator\abstractvalidatortestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        public function setup() {}
        /**
         * @test
         */
        public function stringValidatorShouldValidateString() {}
        /**
         * @test
         */
        public function stringValidatorShouldReturnErrorIfNumberIsGiven() {}
        /**
         * @test
         */
        public function stringValidatorShouldReturnErrorIfObjectWithToStringMethodStringIsGiven() {}
    }

    /**
     * Test case
     */
    class AlphanumericValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var \TYPO3\CMS\Extbase\Validation\Validator\AlphanumericValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function alphanumericValidatorShouldReturnNoErrorsForAnAlphanumericString() {}
        /** @var \TYPO3\CMS\Extbase\Validation\Validator\AlphanumericValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function alphanumericValidatorReturnsErrorsForAStringWithSpecialCharacters() {}
        /** @var \TYPO3\CMS\Extbase\Validation\Validator\AlphanumericValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function alphanumericValidatorCreatesTheCorrectErrorForAnInvalidSubject() {}
        /** @var \TYPO3\CMS\Extbase\Validation\Validator\AlphanumericValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function alphanumericValidatorShouldReturnNoErrorsForAnAlphanumericUnicodeString() {}
    }

    /**
     * Testcase for the Generic Object Validator
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class GenericObjectValidatorTest extends \typo3\cms\extbase\tests\unit\validation\validator\abstractvalidatortestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        protected function setUp() {}
        /**
         * @test
         */
        public function validatorShouldReturnErrorsIfTheValueIsNoObjectAndNotNull() {}
        /**
         * @test
         */
        public function validatorShouldReturnNoErrorsIfTheValueIsNull() {}
        /**
         * @return array
         */
        public function dataProviderForValidator() {}
        public function validateChecksAllPropertiesForWhichAPropertyValidatorExists($mockObject, $validationResultForFoo, $validationResultForBar, $errors) {}
        /**
         * @test
         */
        public function validateCanHandleRecursiveTargetsWithoutEndlessLooping() {}
        /**
         * @test
         */
        public function validateDetectsFailuresInRecursiveTargetsI() {}
        /**
         * @test
         */
        public function validateDetectsFailuresInRecursiveTargetsII() {}
    }

    /**
     * Test case
     */
    class DisjunctionValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function allValidatorsInTheDisjunctionAreCalledEvenIfOneReturnsNoError() {}
        /**
         * @test
         */
        public function validateReturnsNoErrorsIfOneValidatorReturnsNoError() {}
        /**
         * @test
         */
        public function validateReturnsAllErrorsIfAllValidatorsReturnErrrors() {}
    }

    /**
     * Test case
     */
    class EmailAddressValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider with valid email addresses
         *
         * @return array
         */
        public function validAddresses() {}
/** @var \TYPO3\CMS\Extbase\Validation\Validator\EmailAddressValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function emailAddressValidatorReturnsNoErrorsForAValidEmailAddress(/** @var \TYPO3\CMS\Extbase\Validation\Validator\EmailAddressValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
$address) {}
        /**
         * Data provider with invalid email addresses
         *
         * @return array
         */
        public function invalidAddresses() {}
/** @var \TYPO3\CMS\Extbase\Validation\Validator\EmailAddressValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function emailAddressValidatorReturnsFalseForAnInvalidEmailAddress(/** @var \TYPO3\CMS\Extbase\Validation\Validator\EmailAddressValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
$address) {}
        /** @var \TYPO3\CMS\Extbase\Validation\Validator\EmailAddressValidator|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function emailValidatorCreatesTheCorrectErrorForAnInvalidEmailAddress() {}
    }

    /**
     * Testcase for the not empty validator
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class NotEmptyValidatorTest extends \typo3\cms\extbase\tests\unit\validation\validator\abstractvalidatortestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        public function setup() {}
        /**
         * @test
         */
        public function notEmptyValidatorReturnsNoErrorForASimpleString() {}
        /**
         * @test
         */
        public function notEmptyValidatorReturnsErrorForAnEmptyString() {}
        /**
         * @test
         */
        public function notEmptyValidatorReturnsErrorForANullValue() {}
        /**
         * @test
         */
        public function notEmptyValidatorCreatesTheCorrectErrorForAnEmptySubject() {}
        /**
         * @test
         */
        public function notEmptyValidatorCreatesTheCorrectErrorForANullValue() {}
        /**
         * @test
         */
        public function notEmptyValidatorWorksForEmptyArrays() {}
        /**
         * @test
         */
        public function notEmptyValidatorWorksForEmptyCountableObjects() {}
        /**
         * @test
         */
        public function notEmptyValidatorWorksForNotEmptyCountableObjects() {}
    }

    /**
     * Test case
     */
    class RegularExpressionValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        /**
         * @test
         */
        public function regularExpressionValidatorMatchesABasicExpressionCorrectly() {}
        /**
         * @test
         */
        public function regularExpressionValidatorCreatesTheCorrectErrorIfTheExpressionDidNotMatch() {}
    }

    /**
     * Test case
     */
    class ConjunctionValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function addingValidatorsToAJunctionValidatorWorks() {}
        /**
         * @test
         */
        public function allValidatorsInTheConjunctionAreCalledEvenIfOneReturnsError() {}
        /**
         * @test
         */
        public function validatorConjunctionReturnsNoErrorsIfAllJunctionedValidatorsReturnNoErrors() {}
        /**
         * @test
         */
        public function validatorConjunctionReturnsErrorsIfOneValidatorReturnsErrors() {}
        /** @var \TYPO3\CMS\Extbase\Validation\Validator\ConjunctionValidator|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function removingAValidatorOfTheValidatorConjunctionWorks() {}
        /**
         * @test
         */
        public function removingANotExistingValidatorIndexThrowsException() {}
        /**
         * @test
         */
        public function countReturnesTheNumberOfValidatorsContainedInTheConjunction() {}
    }

    /**
     * Testcase for the raw validator
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class RawValidatorTest extends \typo3\cms\extbase\tests\unit\validation\validator\abstractvalidatortestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        /**
         * @test
         */
        public function theRawValidatorAlwaysReturnsNoErrors() {}
    }

    /**
     * Testcase for the number range validator
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class BooleanValidatorTest extends \typo3\cms\extbase\tests\unit\validation\validator\abstractvalidatortestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        /**
         * @test
         */
        public function booleanValidatorReturnsNoErrorForAFalseStringExpectation() {}
        /**
         * @test
         */
        public function booleanValidatorReturnsNoErrorForATrueStringExpectation() {}
        /**
         * @test
         */
        public function booleanValidatorReturnsNoErrorForATrueExpectation() {}
        /**
         * @test
         */
        public function booleanValidatorReturnsNoErrorForAFalseExpectation() {}
        /**
         * @test
         */
        public function booleanValidatorReturnsErrorForTrueWhenFalseExpected() {}
        /**
         * @test
         */
        public function booleanValidatorReturnsErrorForFalseWhenTrueExpected() {}
        /**
         * @test
         */
        public function booleanValidatorReturnsErrorForAString() {}
        /**
         * @test
         */
        public function booleanValidatorReturnsTrueIfNoParameterIsGiven() {}
    }

    /**
     * Testcase for the text validator
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class TextValidatorTest extends \typo3\cms\extbase\tests\unit\validation\validator\abstractvalidatortestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        public function setup() {}
        /**
         * @test
         */
        public function textValidatorReturnsNoErrorForASimpleString() {}
        /**
         * @test
         */
        public function textValidatorAllowsTheNewLineCharacter() {}
        /**
         * @test
         */
        public function textValidatorAllowsCommonSpecialCharacters() {}
        /**
         * @test
         */
        public function textValidatorReturnsErrorForAStringWithHtml() {}
        /**
         * @test
         */
        public function textValidatorCreatesTheCorrectErrorIfTheSubjectContainsHtmlEntities() {}
    }

    /**
     * Testcase for the abstract base-class of validators
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class AbstractValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function validatorAcceptsSupportedOptions() {}
        /**
         * @test
         */
        public function validatorHasDefaultOptions() {}
        /**
         * @test
         */
        public function validatorThrowsExceptionOnNotSupportedOptions() {}
        /**
         * @test
         */
        public function validatorThrowsExceptionOnMissingRequiredOptions() {}
    }

    /**
     * Testcase for the float validator
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class FloatValidatorTest extends \typo3\cms\extbase\tests\unit\validation\validator\abstractvalidatortestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        public function setup() {}
        /**
         * Data provider with valid floats
         *
         * @return array
         */
        public function validFloats() {}
        public function floatValidatorReturnsNoErrorsForAValidFloat($float) {}
        /**
         * Data provider with invalid floats
         *
         * @return array
         */
        public function invalidFloats() {}
        public function floatValidatorReturnsErrorForAnInvalidFloat($float) {}
        /**
         * test
         */
        public function floatValidatorCreatesTheCorrectErrorForAnInvalidSubject() {}
    }

    /**
     * Test case
     */
    class CollectionValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $validatorClassName;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\ValidatorResolver
         */
        protected $mockValidatorResolver;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface
         */
        protected $validator;

        protected function getValidator(array $options = [ ], array $mockedMethods = ['translateErrorMessage']) {}
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function collectionValidatorReturnsNoErrorsForANullValue() {}
        /**
         * @test
         */
        public function collectionValidatorFailsForAValueNotBeingACollection() {}
        /**
         * @test
         */
        public function collectionValidatorValidatesEveryElementOfACollectionWithTheGivenElementValidator() {}
        /**
         * @test
         */
        public function collectionValidatorValidatesNestedObjectStructuresWithoutEndlessLooping() {}
        /**
         * @test
         */
        public function collectionValidatorIsValidEarlyReturnsOnUnitializedLazyObjectStorages() {}
        /**
         * @test
         */
        public function collectionValidatorCallsCollectionElementValidatorWhenValidatingObjectStorages() {}
    }

    /**
     * Testcase for the abstract base-class of composite-validators
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class AbstractCompositeValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function validatorAcceptsSupportedOptions() {}
        /**
         * @test
         */
        public function validatorHasDefaultOptions() {}
        /**
         * @test
         */
        public function validatorThrowsExceptionOnNotSupportedOptions() {}
        /**
         * @test
         */
        public function validatorThrowsExceptionOnMissingRequiredOptions() {}
    }

    /**
     * Test case
     */
    class NumberRangeValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $validatorClassName;

        /**
         * @test
         */
        public function numberRangeValidatorReturnsNoErrorForASimpleIntegerInRange() {}
        /**
         * @test
         */
        public function numberRangeValidatorReturnsErrorForANumberOutOfRange() {}
        /**
         * @test
         */
        public function numberRangeValidatorReturnsNoErrorForANumberInReversedRange() {}
        /**
         * @test
         */
        public function numberRangeValidatorReturnsErrorForAString() {}
    }

    /**
     * Test case
     */
    class UrlValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $validatorClassName;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\Validator\UrlValidator
         */
        protected $validator;

        protected function setUp() {}
        /**
         * @return array
         */
        public function urlDataProvider() : array {}
        public function urlValidatorDetectsUrlsCorrectly($value, $expected) {}
    }

    /**
     * Test case
     */
    class NumberValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $validatorClassName;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface
         */
        protected $validator;

        public function setup() {}
        /**
         * @test
         */
        public function numberValidatorReturnsTrueForASimpleInteger() {}
        /**
         * @test
         */
        public function numberValidatorReturnsFalseForAString() {}
    }

    /**
     * Test case for the Abstract Validator
     */
    abstract class AbstractValidatorTestcase extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $validatorClassName;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\Validator\ValidatorInterface
         */
        protected $validator;

        protected function setUp() {}
        protected function getValidator($options = [ ]) {}
        protected function validatorOptions($options) {}
    }

    /**
     * Test case
     */
    class StringLengthValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $validatorClassName;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\Validator\StringLengthValidator
         */
        protected $validator;

        public function setup() {}
        /**
         * @test
         */
        public function validateReturnsNoErrorIfTheGivenValueIsNull() {}
        /**
         * @test
         */
        public function validateReturnsNoErrorIfTheGivenValueIsAnEmptyString() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsNoErrorForAStringShorterThanMaxLengthAndLongerThanMinLength() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsErrorForAStringShorterThanThanMinLength() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsErrorsForAStringLongerThanThanMaxLength() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsNoErrorsForAStringLongerThanThanMinLengthAndMaxLengthNotSpecified() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsNoErrorsForAStringShorterThanThanMaxLengthAndMinLengthNotSpecified() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsNoErrorsForAStringLengthEqualToMaxLengthAndMinLengthNotSpecified() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsNoErrorForAStringLengthEqualToMinLengthAndMaxLengthNotSpecified() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsNoErrorIfMinLengthAndMaxLengthAreEqualAndTheGivenStringMatchesThisValue() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsNoErrorsfTheStringLengthIsEqualToMaxLength() {}
        /**
         * @test
         */
        public function stringLengthValidatorReturnsNoErrorIfTheStringLengthIsEqualToMinLength() {}
        /**
         * @test
         */
        public function stringLengthValidatorThrowsAnExceptionIfMinLengthIsGreaterThanMaxLength() {}
        /**
         * @test
         */
        public function stringLengthValidatorInsertsAnErrorObjectIfValidationFails() {}
        /**
         * @test
         */
        public function stringLengthValidatorCanHandleAnObjectWithAToStringMethod() {}
        /**
         * @test
         */
        public function validateReturnsErrorsIfTheGivenObjectCanNotBeConvertedToAString() {}
        /**
         * @test
         */
        public function validateRegardsMultibyteStringsCorrectly() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Validation\Validator\Fixture {
    /**
     * Testcase for the abstract base-class of vvalidators
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class AbstractValidatorClass extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        protected function isValid($value) {}
    }

    /**
     * Testcase for the abstract base-class of vvalidators
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class AbstractCompositeValidatorClass extends \typo3\cms\extbase\validation\validator\abstractcompositevalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        protected function isValid($value) {}
        public function validate($value) {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Reflection {
    /**
     * Test case
     */
    class ClassSchemaTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var \TYPO3\CMS\Extbase\Reflection\ReflectionService $service */
        public function classSchemaForModelIsSetAggregateRootIfRepositoryClassIsFoundForNamespacedClasses() {}
        public function testClassSchemaHasConstructor() {}
        public function testClassSchemaDetectsConstructorArguments() {}
        public function testClassSchemaDetectsConstructorArgumentsWithDependencies() {}
        public function testClassSchemaGetProperties() {}
        public function testClassSchemaHasMethod() {}
        public function testClassSchemaGetMethods() {}
        public function testClassSchemaDetectsMethodVisibility() {}
        public function testClassSchemaDetectsInjectProperties() {}
        public function testClassSchemaDetectsInjectMethods() {}
        public function testClassSchemaDetectsPropertiesWithLazyAnnotation() {}
        public function testClassSchemaDetectsStaticMethods() {}
        public function testClassSchemaDetectsMandatoryParams() {}
        public function testClassSchemaDetectsNullableParams() {}
        public function testClassSchemaDetectsDefaultValueParams() {}
        public function testClassSchemaDetectsParamTypeFromTypeHint() {}
        public function testClassSchemaDetectsPropertyVisibility() {}
        public function testClassSchemaDetectsInjectProperty() {}
        public function testClassSchemaDetectsTransientProperty() {}
        public function testClassSchemaDetectsCascadeProperty() {}
        public function testClassSchemaDetectsCascadePropertyOnlyWithVarAnnotation() {}
        public function testClassSchemaDetectsIgnoreValidationAnnotation() {}
        public function testClassSchemaDetectsTypeAndElementType() {}
        public function testClassSchemaDetectsSingletons() {}
        public function testClassSchemaDetectsModels() {}
        public function testClassSchemaDetectsEntities() {}
        public function testClassSchemaDetectsValueObjects() {}
        public function testClassSchemaDetectsClassName() {}
        public function testClassSchemaDetectsNonStaticProperties() {}
        public function testClassSchemaDetectsStaticProperties() {}
        public function testClassSchemaGetTags() {}
        /**
         * @test
         */
        public function classSchemaDetectsValidateAnnotation() {}
    }

    /**
     * Test case
     */
    class DocCommentParserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function stripsSlashFromMethodComment() {}
    }

    /**
     * Test case
     */
    class ObjectAccessTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DummyClassWithGettersAndSetters
         */
        protected $dummyObject;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getPropertyReturnsExpectedValueForGetterProperty() {}
        /**
         * @test
         */
        public function getPropertyReturnsExpectedValueForPublicProperty() {}
        /**
         * @test
         */
        public function getPropertyReturnsExpectedValueForUnexposedPropertyIfForceDirectAccessIsTrue() {}
        /**
         * @test
         */
        public function getPropertyReturnsExpectedValueForUnknownPropertyIfForceDirectAccessIsTrue() {}
        /**
         * @test
         */
        public function getPropertyThrowsPropertyNotAccessibleExceptionForNotExistingPropertyIfForceDirectAccessIsTrue() {}
        /**
         * @test
         */
        public function getPropertyThrowsExceptionIfPropertyDoesNotExist() {}
        /**
         * @test
         */
        public function getPropertyReturnsNullIfArrayKeyDoesNotExist() {}
        /**
         * @test
         */
        public function getPropertyTriesToCallABooleanGetterMethodIfItExists() {}
        /**
         * @test
         */
        public function getPropertyThrowsExceptionIfThePropertyNameIsNotAString() {}
        /**
         * @test
         */
        public function setPropertyThrowsExceptionIfThePropertyNameIsNotAString() {}
        /**
         * @test
         */
        public function setPropertyReturnsFalseIfPropertyIsNotAccessible() {}
        /**
         * @test
         */
        public function setPropertySetsValueIfPropertyIsNotAccessibleWhenForceDirectAccessIsTrue() {}
        /**
         * @test
         */
        public function setPropertySetsValueIfPropertyDoesNotExistWhenForceDirectAccessIsTrue() {}
        /**
         * @test
         */
        public function setPropertyCallsASetterMethodToSetThePropertyValueIfOneIsAvailable() {}
        /**
         * @test
         */
        public function setPropertyWorksWithPublicProperty() {}
        /**
         * @test
         */
        public function setPropertyCanDirectlySetValuesInAnArrayObjectOrArray() {}
        /**
         * @test
         */
        public function getPropertyCanAccessPropertiesOfAnArrayObject() {}
        /**
         * @test
         */
        public function getPropertyCanAccessPropertiesOfAnObjectStorageObject() {}
        /**
         * @test
         */
        public function getPropertyCanAccessPropertiesOfAnObjectImplementingArrayAccess() {}
        /**
         * @test
         */
        public function getPropertyCanAccessPropertiesOfArrayAccessWithGetterMethodWhenOffsetNotExists() {}
        /**
         * @test
         */
        public function getPropertyCanAccessPropertiesOfArrayAccessWithPriorityForOffsetIfOffsetExists() {}
        /**
         * @test
         */
        public function getPropertyCanAccessPropertiesOfAnArray() {}
        /**
         * @test
         */
        public function getPropertyPathCanAccessPropertiesOfAnArray() {}
        /**
         * @test
         */
        public function getPropertyPathCanAccessPropertiesOfAnObjectImplementingArrayAccess() {}
        /**
         * @test
         */
        public function getPropertyPathCanAccessPropertiesOfAnExtbaseObjectStorageObject() {}
        /**
         * @test
         */
        public function getPropertyPathOnObjectStorageDoesNotAffectOngoingLoop() {}
        /**
         * @return ObjectStorage
         */
        protected function setUpObjectStorageWithTwoItems() {}
        /**
         * @test
         */
        public function getPropertyPathCanAccessPropertiesOfAnSplObjectStorageObject() {}
        /**
         * @test
         */
        public function getPropertyPathOnSplObjectStorageDoesNotAffectOngoingLoop() {}
        /**
         * @return \SplObjectStorage
         */
        protected function setUpSplObjectStorageWithTwoItems() {}
        /**
         * @test
         */
        public function getGettablePropertyNamesReturnsAllPropertiesWhichAreAvailable() {}
        /**
         * @test
         */
        public function getGettablePropertyNamesRespectsMethodArguments() {}
        /**
         * @test
         */
        public function getSettablePropertyNamesReturnsAllPropertiesWhichAreAvailable() {}
        /**
         * @test
         */
        public function getSettablePropertyNamesReturnsPropertyNamesOfStdClass() {}
        /**
         * @test
         */
        public function getGettablePropertiesReturnsTheCorrectValuesForAllProperties() {}
        /**
         * @test
         */
        public function getGettablePropertiesReturnsPropertiesOfStdClass() {}
        /**
         * @test
         */
        public function isPropertySettableTellsIfAPropertyCanBeSet() {}
        /**
         * @test
         */
        public function isPropertySettableWorksOnStdClass() {}
        public function isPropertyGettableTellsIfAPropertyCanBeRetrieved($property, $expected) {}
        /**
         * @return array
         */
        public function propertyGettableTestValues() {}
        /**
         * @test
         */
        public function isPropertyGettableWorksOnArrayAccessObjects() {}
        /**
         * @test
         */
        public function isPropertyGettableWorksOnStdClass() {}
        /**
         * @test
         */
        public function getPropertyPathCanRecursivelyGetPropertiesOfAnObject() {}
        /**
         * @test
         */
        public function getPropertyPathReturnsNullForNonExistingPropertyPath() {}
        /**
         * @test
         */
        public function getPropertyPathReturnsNullIfSubjectIsNoObject() {}
        /**
         * @test
         */
        public function getPropertyPathReturnsNullIfSubjectOnPathIsNoObject() {}
    }

    /**
     * Test case
     * @see test for reflection
     * @link second test for reflection
     * @link second test for reflection with second value
     */
    class ReflectionServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        public function fixtureMethodForMethodTagsValues(array $foo) {}
        public function fixtureMethodForMethodTagsValuesWithShortTypes($dummy, $foo) {}
        /**
         * @test
         */
        public function getClassTagsValues() {}
        /**
         * @test
         */
        public function getClassTagValues() {}
        /**
         * @test
         */
        public function hasMethod() {}
        /**
         * @test
         */
        public function getMethodTagsValues() {}
        /**
         * @test
         */
        public function getMethodParameters() {}
        /**
         * @test
         */
        public function getMethodParametersWithShortTypeNames() {}
        public function testIsClassTaggedWith() {}
        public function testIsPropertyTaggedWith() {}
        public function testgetPropertyTagValues() {}
        public function testGetPropertyTagsValues() {}
        public function testGetClassPropertyNames() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Reflection\Fixture {
    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithAllTypesOfProperties {
        public $publicProperty;
        protected $protectedProperty;
        private $privateProperty;
        static public $publicStaticProperty;
        static protected $protectedStaticProperty;
        static private $privateStaticProperty;
        /**
         * @license
         * @copyright
         * @author
         * @version
         */
        public $propertyWithIgnoredTags;
        /**
         * @Inject
         * @var DummyClassWithAllTypesOfProperties
         */
        public $propertyWithInjectAnnotation;
        /**
         * @Transient
         */
        public $propertyWithTransientAnnotation;
        /**
         * @var DummyClassWithAllTypesOfProperties
         * @Cascade("remove")
         */
        public $propertyWithCascadeAnnotation;
        /**
         * @Cascade("remove")
         */
        public $propertyWithCascadeAnnotationWithoutVarAnnotation;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Extbase\Tests\Unit\Reflection\Fixture\DummyClassWithAllTypesOfProperties>
         */
        public $propertyWithObjectStorageAnnotation;

    }

    /**
     * Dummy ValueObject
     */
    class DummyValueObject extends \typo3\cms\extbase\domainobject\abstractvalueobject {}

    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithConstructorAndConstructorArgumentsWithDependencies {
        public function __construct(DummyClassWithGettersAndSetters $foo) {}
    }

    /**
     * Fixture model
     */
    class DummyModel extends \typo3\cms\extbase\domainobject\abstractentity {}

    /**
     * Fixture class with @TYPO3\CMS\Extbase\Annotation\ORM\Lazy annotation
     */
    class DummyClassWithLazyDoctrineAnnotation {
        /**
         * @Extbase\ORM\Lazy
         */
        public $propertyWithLazyAnnotation;

    }

    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithConstructorAndConstructorArguments {
        public function __construct(int $foo, $bar = 'baz') {}
    }

    /**
     * Fixture class with tags
     *
     * @license
     * @copyright
     * @author
     * @version
     *
     * @see
     */
    class DummyClassWithTags {}

    /**
     * Fixture class with @validate annotations
     */
    class DummyClassWithValidateAnnotation extends \typo3\cms\extbase\domainobject\abstractentity {
        protected $propertyWithoutValidateAnnotations;
        /**
         * @validate NotEmpty
         * @validate Empty (Foo=Bar)
         */
        protected $propertyWithValidateAnnotations;

        public function methodWithoutValidateAnnotations() {}
        public function methodWithValidateAnnotations($fooParam) {}
    }

    /**
     * Dummy Singleton
     */
    class DummySingleton implements \typo3\cms\core\singletoninterface {}

    /**
     * Dummy controller with @TYPO3\CMS\Extbase\Annotation\IgnoreValidation annotation
     */
    class DummyControllerWithIgnoreValidationDoctrineAnnotation {
        public function someAction($foo, $bar) {}
    }

    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithoutConstructor {}

    /**
     * Dummy Entity
     */
    class DummyEntity extends \typo3\cms\extbase\domainobject\abstractentity {}

    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithAllTypesOfMethods {
        public function publicMethod() {}
        protected function protectedMethod() {}
        private function privateMethod() {}
        /**
         * @license
         * @copyright
         * @author
         * @version
         */
        public function methodWithIgnoredTags() {}
        public function injectSettings() {}
        public function injectMethodWithoutParam() {}
        protected function injectMethodThatIsProtected() {}
        public function injectFoo(DummyClassWithAllTypesOfMethods $foo) {}
        public static function staticMethod() {}
        public static function methodWithMandatoryParam($param) {}
        public static function methodWithNullableParam($param = null) {}
        public static function methodWithDefaultValueParam($param = 'foo') {}
        public static function methodWithTypeHintedParam(string $param) {}
    }

    /**
     * Fixture repository
     */
    class DummyModelRepository extends \typo3\cms\extbase\persistence\repository {}

    /**
     * ArrayAccess class for the Reflection tests
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class ArrayAccessClass implements \arrayaccess {
        /**
         * @var array
         */
        protected $array;

        public function __construct(array $array) {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
        /**
         * @return mixed
         */
        public function getVirtual() {}
    }

    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithGettersAndSetters {
        /**
         * @var mixed
         */
        protected $property;
        /**
         * @var mixed
         */
        protected $anotherProperty;
        /**
         * @var mixed
         */
        protected $property2;
        /**
         * @var bool
         */
        protected $booleanProperty;
        /**
         * @var mixed
         */
        protected $protectedProperty;
        /**
         * @var string
         */
        protected $unexposedProperty;
        /**
         * @var mixed
         */
        public $publicProperty;
        /**
         * @var int
         */
        public $publicProperty2;
        /**
         * @var bool
         */
        protected $anotherBooleanProperty;

        public function setProperty($property) {}
        /**
         * @return mixed
         */
        public function getProperty() {}
        public function setAnotherProperty($anotherProperty) {}
        /**
         * @return mixed
         */
        public function getAnotherProperty() {}
        /**
         * @return mixed
         */
        public function getProperty2() {}
        public function setProperty2($property2) {}
        /**
         * @return string
         */
        protected function getProtectedProperty() {}
        protected function setProtectedProperty($value) {}
        /**
         * @return bool
         */
        public function isBooleanProperty() {}
        /**
         * @return string
         */
        protected function getPrivateProperty() {}
        public function setWriteOnlyMagicProperty($value) {}
        public function setAnotherBooleanProperty($anotherBooleanProperty) {}
        /**
         * @return bool
         */
        public function hasAnotherBooleanProperty() {}
        public function hasSomeValue($value = 42) {}
    }

    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithConstructorAndWithoutConstructorArguments {
        public function __construct() {}
    }

    /**
     * Fixture class with absolute inject annotation
     */
    class DummyClassWithInjectDoctrineAnnotation {
        /**
         * @Inject
         * @var \TYPO3\CMS\Extbase\Tests\Unit\Reflection\Fixture\DummyClassWithInjectDoctrineAnnotation
         */
        public $propertyWithFullQualifiedClassName;
        /**
         * @Inject
         * @var DummyClassWithInjectDoctrineAnnotation
         */
        public $propertyWithRelativeClassName;
        /**
         * @Inject
         * @var ClassSchemaTest
         */
        public $propertyWithImportedClassName;
        /**
         * @Inject
         * @var AliasedClassSchemaTest
         */
        public $propertyWithImportedAndAliasedClassName;

    }

}

namespace TYPO3\CMS\Extbase\Tests\Unit\Utility {
    /**
     * Test case
     */
    class LocalizationUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Instance of configurationManager, injected to subject
         *
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManager
         */
        protected $configurationManagerMock;
        /**
         * LOCAL_LANG array fixture
         *
         * @var array
         */
        protected $LOCAL_LANG;
        /**
         * File path of locallang for extension "core"
         * @var string
         */
        protected $languageFilePath;

        /**
         * Prepare class mocking some dependencies
         */
        protected function setUp() {}
        /**
         * Reset static properties
         */
        protected function tearDown() {}
        protected function getLanguageFilePath(string $extensionName) : string {}
        /**
         * @test
         */
        public function implodeTypoScriptLabelArrayWorks() {}
        /**
         * @test
         */
        public function translateForEmptyStringKeyReturnsNull() {}
        /**
         * @test
         */
        public function translateForEmptyStringKeyWithArgumentsReturnsNull() {}
        /**
         * @return array
         */
        public function translateDataProvider() {}
        public function translateTestWithBackendUserLanguage($key, $languageKey, $expected, array $altLanguageKeys = [ ], array $arguments = null) {}
        public function translateTestWithExplicitLanguageParameters($key, $languageKey, $expected, array $altLanguageKeys = [ ], array $arguments = null) {}
        /**
         * @return array
         */
        public function loadTypoScriptLabelsProvider() {}
        public function loadTypoScriptLabels(array $LOCAL_LANG, array $typoScriptLocalLang, $languageKey, array $expected) {}
        /**
         * @test
         */
        public function clearLabelWithTypoScript() {}
        /**
         * Tests whether method can be invoked without second parameter. Actual translation is not tested here.
         *
         * @test
         */
        public function translateWithFullyQualifiedKey() {}
        /**
         * @test
         */
        public function translateThrowsExceptionWithEmptyExtensionNameIfKeyIsNotPrefixedWithLLL() {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Extbase\Utility\ExtensionUtility
     */
    class ExtensionUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        protected function setUp() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginWorksForMinimalisticSetup() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginCreatesCorrectDefaultTypoScriptSetup() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginWorksForASingleControllerAction() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginThrowsExceptionIfExtensionNameIsEmpty() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginThrowsExceptionIfPluginNameIsEmpty() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginRespectsDefaultActionAsANonCacheableAction() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginRespectsNonDefaultActionAsANonCacheableAction() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginWorksForMultipleControllerActionsWithCacheableActionAsDefault() {}
        /**
         * @test
         * @see \TYPO3\CMS\Extbase\Utility\ExtensionUtility::registerPlugin
         */
        public function configurePluginWorksForMultipleControllerActionsWithNonCacheableActionAsDefault() {}
        /**
         * Tests method combination of registerPlugin() and its dependency addPlugin() to
         * verify plugin icon path resolving works.
         *
         * @test
         */
        public function registerPluginTriggersAddPluginWhichSetsPluginIconPathIfUsingUnderscoredExtensionNameAndIconPathNotGiven() {}
        /**
         * Tests method combination of registerPlugin() and its dependency addPlugin() to
         * verify plugin icon path resolving works.
         *
         * @test
         */
        public function registerPluginTriggersAddPluginWhichSetsPluginIconPathIfUsingUpperCameCasedExtensionNameAndIconPathNotGiven() {}
        /**
         * Tests method combination of registerPlugin() and its dependency addPlugin() to
         * verify plugin icon path resolving works.
         *
         * @test
         */
        public function registerPluginTriggersAddPluginWhichSetsPluginIconPathIfIconPathIsGiven() {}
    }

    /**
     * Test case
     */
    class DebuggerUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function debuggerRewindsInstancesOfIterator() {}
        /**
         * @test
         */
        public function varDumpShowsPropertiesOfStdClassObjects() {}
        /**
         * @test
         */
        public function varDumpHandlesVariadicArguments() {}
        /**
         * @test
         */
        public function varDumpRespectsBlacklistedProperties() {}
        /**
         * @test
         */
        public function varDumpRespectsBlacklistedClasses() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Fixture {
    /**
     * Dummy Class
     */
    class DummyClass {
        public function someMethod() {}
    }

    /**
     * An entity
     */
    class ValueObject extends \typo3\cms\extbase\domainobject\abstractvalueobject {
        /**
         * The value object's name
         *
         * @var string
         */
        protected $name;

        public function __construct($name) {}
        public function setName($name) {}
        /**
         * Returns the value object's name
         *
         * @return string The value object's name
         */
        public function getName() {}
    }

    /**
     * A slot
     */
    class SlotFixture {
        public function slot() {}
    }

    /**
     * Second Dummy Class
     */
    class SecondDummyClass {}

    /**
     * A dummy class with getters and setters for testing data mapping
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class ClassWithGettersAndSetters {
        /**
         * @var mixed
         */
        protected $property1;
        /**
         * @var mixed
         */
        protected $property2;
        /**
         * @var mixed
         */
        public $property3;
        /**
         * @var mixed
         */
        public $property4;

        public function setProperty1($value) {}
        public function setProperty2($value) {}
        /**
         * @return mixed
         */
        protected function getProperty1() {}
        /**
         * @return mixed
         */
        public function getProperty2() {}
    }

    /**
     */
    class ClassWithInjectProperties {
        /**
         * @var \TYPO3\CMS\Extbase\Tests\Fixture\DummyClass
         */
        protected $dummyClass;
        /**
         * @var \TYPO3\CMS\Extbase\Tests\Fixture\SecondDummyClass
         * @inject
         */
        protected $secondDummyClass;

    }

    /**
     * A dummy class with setters for testing data mapping
     */
    class ClassWithSettersAndConstructor {
        /**
         * @var mixed
         */
        protected $property1;
        /**
         * @var mixed
         */
        protected $property2;

        public function __construct($property1) {}
        public function getProperty1() {}
        public function getProperty2() {}
        public function setProperty2($property2) {}
    }

    /**
     * An entity
     */
    class Entity extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * The entity's name
         *
         * @var string
         */
        protected $name;

        public function __construct($name) {}
        public function setName($name) {}
        /**
         * Returns the entity's name
         *
         * @return string The entity's name
         */
        public function getName() {}
    }

    /**
     * A dummy class with setters for testing data mapping
     */
    class ClassWithSetters {
        /**
         * @var mixed
         */
        public $property1;
        /**
         * @var mixed
         */
        protected $property2;
        /**
         * @var mixed
         */
        public $property3;
        /**
         * @var mixed
         */
        public $property4;

        public function setProperty3($value) {}
        protected function setProperty4($value) {}
        public function getProperty2() {}
    }

    /**
     * Fixture implements get extension name method.
     */
    class DummyController extends \typo3\cms\extbase\mvc\controller\abstractcontroller {
        /**
         * @return string
         */
        public function getExtensionName() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\UnitDeprecated\Reflection {
    /**
     * Test case
     */
    class ClassSchemaTest extends \typo3\testingframework\core\unit\unittestcase {
        public function testClassSchemaDetectsInjectProperties() {}
        public function testClassSchemaDetectsLazyProperties() {}
        public function testClassSchemaDetectsCascadeProperty() {}
        public function testClassSchemaDetectsCascadePropertyOnlyWithVarAnnotation() {}
        public function testClassSchemaDetectsIgnoreValidationAnnotation() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\UnitDeprecated\Reflection\Fixture {
    /**
     * Dummy class with @lazy annotation
     */
    class DummyClassWithLazyProperty {
        /**
         * @lazy
         */
        public $propertyWithLazyAnnotation;

    }

    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithAllTypesOfProperties {
        /**
         * @transient
         */
        public $propertyWithTransientAnnotation;
        /**
         * @var DummyClassWithAllTypesOfProperties
         * @cascade remove
         */
        public $propertyWithCascadeAnnotation;
        /**
         * @cascade remove
         */
        public $propertyWithCascadeAnnotationWithoutVarAnnotation;

    }

    /**
     * Fixture class with getters and setters
     */
    class DummyControllerWithIgnorevalidationAnnotation {
        public function someAction($someArgument) {}
    }

    /**
     * Fixture class with getters and setters
     *
     * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License, version 3 or later
     */
    class DummyClassWithInjectProperty {
        /**
         * @inject
         * @var DummyClassWithInjectProperty
         */
        public $propertyWithInjectAnnotation;

    }

}

namespace TYPO3\CMS\Extbase\Tests\Functional\Configuration {
    /**
     * Test case
     */
    class BackendConfigurationManagerTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * Warning: white box test
         *
         * @test
         */
        public function getCurrentPageIdReturnsPidFromFirstRootTemplateIfIdIsNotSetAndNoRootPageWasFound() {}
        /**
         * Warning: white box test
         *
         * @test
         */
        public function getCurrentPageIdReturnsUidFromFirstRootPageIfIdIsNotSet() {}
        /**
         * Warning: white box test
         *
         * @test
         */
        public function getCurrentPageIdReturnsDefaultStoragePidIfIdIsNotSetNoRootTemplateAndRootPageWasFound() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Functional\Persistence {
    class RelationTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var Blog
         */
        protected $blog;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager
         */
        protected $persistentManager;
        protected $testExtensionsToLoad;
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * Tests adding object at the end of sorted 1:M relation (Blog:Posts)
         *
         * @test
         */
        public function attachPostToBlogAtTheEnd() {}
        /**
         * Tests removing object from the end of sorted 1:M relation (Blog:Posts)
         *
         * @test
         */
        public function removeLastPostFromBlog() {}
        /**
         * Tests adding object in the middle of the sorted 1:M relation (Blog:Posts)
         *
         * @test
         */
        public function addPostToBlogInTheMiddle() {}
        /**
         * Tests removing object from the middle of sorted 1:M relation (Blog:Posts)
         *
         * @test
         */
        public function removeMiddlePostFromBlog() {}
        /**
         * Tests moving object from the end to the middle of the sorted 1:M relation (Blog:Posts)
         *
         * @test
         */
        public function movePostFromEndToTheMiddle() {}
        /**
         * Tests adding object at the end of sorted M:M relation (Post:Tag)
         *
         * @test
         */
        public function attachTagToPostAtTheEnd() {}
        /**
         * Tests removing object from the end of sorted M:M relation (Post:Tag)
         *
         * @test
         */
        public function removeLastTagFromPost() {}
        /** @var Tag $newTag */
        public function addTagToPostInTheMiddle() {}
        /**
         * Tests removing object from the middle of the sorted M:M relation (Post:Tag)
         *
         * @test
         */
        public function removeMiddleTagFromPost() {}
        /**
         * Tests moving object from the end to the middle of sorted M:M relation (Post:Tag)
         *
         * @test
         */
        public function moveTagFromEndToTheMiddle() {}
        /**
         * Test if timestamp field is updated when updating a record
         *
         * @test
         */
        public function timestampFieldIsUpdatedOnPostSave() {}
        /**
         * Test query matching for mm relation without MM_match_fields defined
         *
         * @test
         */
        public function mmRelationWithoutMatchFieldIsResolved() {}
        /**
         * @test
         */
        public function mmRelationWithMatchFieldIsResolvedFromLocalSide() {}
        /** @var PostRepository $postRepository */
        public function mmRelationWithMatchFieldIsResolvedFromForeignSide() {}
        /**
         * @test
         */
        public function mmRelationWithMatchFieldIsCreatedFromLocalSide() {}
        /**
         * Test if adjusting existing mm relations do not relations with other objects
         *
         * @test
         */
        public function adjustingMmRelationWithTablesnameAndFieldnameFieldDoNotTouchOtherRelations() {}
        /**
         * @return array
         */
        public function distinctDataProvider() {}
        protected function applyQueryRequest(QueryInterface $query, array $queryRequest) {}
        public function distinctPersonEntitiesAreFoundByPublisher(array $queryRequest) {}
        public function distinctPersonRecordsAreFoundByPublisher(array $queryRequest) {}
        protected function provideFindPostsByPublisherQuery(int $publisherId) {}
        public function distinctBlogEntitiesAreFoundByPostsSince(array $queryRequest) {}
        public function distinctBlogRecordsAreFoundByPostsSince(array $queryRequest) {}
        protected function provideFindBlogsByPostsSinceQuery(\DateTime $date) {}
        public function distinctPersonEntitiesAreFoundByTagNameAreFiltered(array $queryRequest) {}
        public function distinctPersonRecordsAreFoundByTagNameAreFiltered(array $queryRequest) {}
        protected function provideFindPersonsByTagNameQuery(string $tagName) {}
        public function distinctPostEntitiesAreFoundByAuthorTagNameAreFiltered(array $queryRequest) {}
        public function distinctPostRecordsAreFoundByAuthorTagNameAreFiltered(array $queryRequest) {}
        protected function provideFindPostsByAuthorTagName(string $tagName) {}
        /**
         * Helper method for persisting blog
         */
        protected function updateAndPersistBlog() {}
        protected function resolveEntityIds(array $entities) {}
        protected function resolveRecordIds(array $records) {}
        protected function countDistinctIds(array $ids) {}
        protected function assertDistinctIds(array $ids) {}
    }

    class AddTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager
         */
        protected $persistentManager;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Repository
         */
        protected $blogRepository;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function addSimpleObjectTest() {}
        /**
         * @test
         */
        public function addObjectSetsDefaultLanguageTest() {}
        /**
         * @test
         */
        public function addObjectSetsDefinedLanguageTest() {}
        /**
         * @test
         */
        public function addObjectSetsNullAsNullForSimpleTypes() {}
    }

    /**
     * Enable fields test
     */
    class EnableFieldsTest extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const TABLE_Blog = 'tx_blogexample_domain_model_blog';

        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function protectedRecordsNotFoundIfNoUserLoggedIn() {}
        /**
         * @test
         */
        public function onlyReturnProtectedRecordsForTheFirstUserGroup() {}
        /**
         * @test
         */
        public function onlyReturnProtectedRecordsForTheSecondUserGroup() {}
        /**
         * @test
         */
        public function onlyOwnProtectedRecordsWithQueryCacheInvolvedAreReturned() {}
    }

    class OperatorTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\BlogRepository
         */
        protected $blogRepository;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\PostRepository
         */
        protected $postRepository;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function equalsNullIsResolvedCorrectly() {}
        /**
         * @test
         */
        public function equalsCorrectlyHandlesCaseSensitivity() {}
        /**
         * @test
         */
        public function betweenSetsBoundariesCorrectly() {}
    }

    class CountTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var int number of all records
         */
        protected $numberOfRecordsInFixture;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager
         */
        protected $persistentManager;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Repository
         */
        protected $blogRepository;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\PostRepository
         */
        protected $postRepository;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function simpleCountTest() {}
        /**
         * @test
         */
        public function offsetCountTest() {}
        /**
         * @test
         */
        public function exceedingOffsetCountTest() {}
        /**
         * @test
         */
        public function limitCountTest() {}
        /**
         * @test
         */
        public function limitAndOffsetCountTest() {}
        /**
         * @test
         */
        public function inConstraintCountTest() {}
        /**
         * Test if count works with subproperties in subselects.
         *
         * @test
         */
        public function subpropertyJoinCountTest() {}
        /**
         * Test if count works with subproperties in subselects that use the same table as the repository.
         *
         * @test
         */
        public function subpropertyJoinSameTableCountTest() {}
        /**
         * Test if count works with subproperties in multiple left join.
         *
         * @test
         */
        public function subpropertyInMultipleLeftJoinCountTest() {}
        /** @var \ExtbaseTeam\BlogExample\Domain\Repository\PersonRepository $personRepository */
        public function queryWithAndConditionsToTheSameTableReturnExpectedCount() {}
        /** @var \ExtbaseTeam\BlogExample\Domain\Repository\PersonRepository $personRepository */
        public function queryWithOrConditionsToTheSameTableReturnExpectedCount() {}
    }

    class QueryParserTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\BlogRepository
         */
        protected $blogRepository;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /** @var \ExtbaseTeam\BlogExample\Domain\Repository\PostRepository $postRepository */
        public function queryWithMultipleRelationsToIdenticalTablesReturnsExpectedResultForOrQuery() {}
        /** @var \ExtbaseTeam\BlogExample\Domain\Repository\PostRepository $postRepository */
        public function queryWithRelationHasAndBelongsToManyReturnsExpectedResult() {}
        /** @var \TYPO3\CMS\Extbase\Domain\Repository\FrontendUserRepository $frontendUserRepository */
        public function queryWithRelationHasManyWithoutParentKeyFieldNameReturnsExpectedResult() {}
        /** @var \ExtbaseTeam\BlogExample\Domain\Repository\PostRepository $postRepository */
        public function queryWithRelationHasOneAndHasAndBelongsToManyWithoutParentKeyFieldNameReturnsExpectedResult() {}
        /** @var \ExtbaseTeam\BlogExample\Domain\Repository\PostRepository $postRepository */
        public function orReturnsExpectedResult() {}
        /** @var \ExtbaseTeam\BlogExample\Domain\Repository\PostRepository $postRepository */
        public function queryWithMultipleRelationsToIdenticalTablesReturnsExpectedResultForAndQuery() {}
        /**
         * @test
         */
        public function queryWithFindInSetReturnsExpectedResult() {}
        /**
         * @test
         */
        public function queryForPostWithCategoriesReturnsPostWithCategories() {}
    }

    class IsDirtyTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\BlogRepository
         */
        protected $blogRepository;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\AdministratorRepository
         */
        protected $adminRepository;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function objectFetchedFromDbIsNotDirty() {}
        /**
         * @test
         */
        public function lazyLoadingProxyReplacedByRealInstanceIsNotDirty() {}
        /**
         * @test
         */
        public function lazyLoadingProxyReplacedByWrongInstanceIsDirty() {}
        /**
         * @test
         */
        public function realInstanceReplacedByLazyLoadingProxyIsNotDirty() {}
        /**
         * @test
         */
        public function lazyLoadingProxyByWrongLazyLoadingProxyIsDirtyAndUpdated() {}
    }

    class TranslationTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Repository
         */
        protected $postRepository;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * Minimal frontent environment to satisfy Extbase Typo3DbBackend
         */
        protected function setUpBasicFrontendEnvironment() {}
        /**
         * @test
         */
        public function countReturnsCorrectNumberOfPosts() {}
        /**
         * @test
         */
        public function countReturnsCorrectNumberOfPostsInEnglishLanguageForStrictMode() {}
        /**
         * @test
         */
        public function countReturnsCorrectNumberOfPostsInEnglishLanguage() {}
        /**
         * @test
         */
        public function countReturnsCorrectNumberOfPostsInGreekLanguage() {}
        /** @var Post[] $posts */
        public function fetchingPostsReturnsEnglishPostsWithFallback() {}
        /** @var Post[] $posts */
        public function fetchingPostsReturnsGreekPostsWithFallback() {}
        /**
         * @test
         */
        public function orderingByTitleRespectsEnglishTitles() {}
    }

    /**
     * This test is an Extbase version of the \TYPO3\CMS\Frontend\Tests\Functional\Rendering\LocalizedContentRenderingTest
     * scenarios are the same, just a way of fetching content is different
     *
     * This test documents current behaviour of extbase which is inconsistent with TypoScript rendering of tt_content.
     */
    class TranslatedContentTest extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const TABLE_Pages = 'pages';
        const TABLE_Content = 'tt_content';
        const VALUE_PageId = 89;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\TtContentRepository
         */
        protected $contentRepository;
        /**
         * Custom 404 handler returning valid json is registered so the $this->getFrontendResponse()
         * does not fail on 404 pages
         *
         * @var array
         */
        protected $configurationToUseInTestInstance;
        /**
         * @var array
         */
        protected $pathsToLinkInTestInstance;

        protected function setUp() {}
        public function defaultLanguageConfigurationDataProvider() : array {}
        public function onlyEnglishContentIsRenderedForDefaultLanguage(string $typoScript) {}
        /**
         * Dutch language has pages record and some content elements are translated
         *
         * @return array
         */
        public function dutchDataProvider() : array {}
        public function renderingOfDutchLanguage(string $typoScript, array $visibleRecords) {}
        public function contentOnNonTranslatedPageDataProvider() : array {}
        public function contentOnNonTranslatedPageGerman(string $typoScript, array $visibleRecords, string $status = 'success') {}
        public function contentOnPartiallyTranslatedPageDataProvider() : array {}
        public function contentOnPartiallyTranslatedPage(string $typoScript, array $visibleHeaders) {}
        protected function getNonVisibleHeaders(array $visibleHeaders) : array {}
        protected function getNonVisibleFileTitles(array $visibleTitles) : array {}
    }

    class InTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\BlogRepository
         */
        protected $blogRepository;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\PostRepository
         */
        protected $postRepository;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function inConditionWorksWithArrayOfObjects() {}
        /**
         * @test
         */
        public function inConditionWorksWithArrayOfObjectsOnSecondCall() {}
        /**
         * @test
         */
        public function inConditionWorksWithObjectStorage() {}
        /**
         * @test
         */
        public function inConditionWorksWithObjectStorageOnSecondCall() {}
        /**
         * @test
         */
        public function inConditionWorksWithQueryResult() {}
        /**
         * @test
         */
        public function inConditionWorksWithQueryResultOnSecondCall() {}
        /**
         * @test
         */
        public function inConditionWorksWithLazyObjectStorage() {}
        /**
         * @test
         */
        public function inConditionWorksWithLazyObjectStorageOnSecondCall() {}
    }

}

namespace TYPO3\CMS\Extbase\Tests\Functional\Persistence\Generic\Mapper {
    class DataMapperTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager
         */
        protected $persistenceManager;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface The object manager
         */
        protected $objectManager;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /** @var Comment $existingComment */
        public function datetimeObjectsCanBePersistedToDatetimeDatabaseFields() {}
        /** @var DateExample $example */
        public function dateValuesAreStoredInUtcInIntegerDatabaseFields() {}
        /**
         * @test
         */
        public function dateValuesAreStoredInUtcInTextDatabaseFields() {}
        /** @var DateExample $example */
        public function dateValuesAreStoredInUtcInDatetimeDatabaseFields() {}
    }

}

namespace ExtbaseTeam\BlogExample\Controller {
    /**
     * BlogController
     */
    class BlogController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @inject
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\BlogRepository
         */
        protected $blogRepository;
        /**
         * @var string
         */
        protected $defaultViewObjectName;
        /**
         * @inject
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory
         */
        protected $dataMapFactory;

        /**
         * @return array
         */
        public function listAction() {}
        public function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        protected function getStructure($iterator) {}
        /**
         * @return string
         */
        protected function getRuntimeIdentifier() {}
    }

    /**
     * ContentController
     */
    class ContentController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @inject
         * @var \ExtbaseTeam\BlogExample\Domain\Repository\TtContentRepository
         */
        protected $contentRepository;
        /**
         * @var string
         */
        protected $defaultViewObjectName;
        /**
         * @inject
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory
         */
        protected $dataMapFactory;

        /**
         * @return array
         */
        public function listAction() {}
        public function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        protected function getStructure($iterator) {}
        /**
         * @return string
         */
        protected function getRuntimeIdentifier() {}
    }

}

namespace ExtbaseTeam\BlogExample\Domain\Repository {
    /**
     * A repository for administrators
     */
    class AdministratorRepository extends \typo3\cms\extbase\domain\repository\frontenduserrepository {}

    /**
     * A repository for tt_contents
     */
    class TtContentRepository extends \typo3\cms\extbase\persistence\repository {}

    /**
     * A repository for blog posts
     *
     * @method Post findByUid($uid)
     */
    class PostRepository extends \typo3\cms\extbase\persistence\repository {
        protected $defaultOrderings;

        public function findAllByBlog(\ExtbaseTeam\BlogExample\Domain\Model\Blog $blog) {}
        public function findByTagAndBlog($tag, \ExtbaseTeam\BlogExample\Domain\Model\Blog $blog) {}
        public function findRemaining(Post $post) {}
        public function findPrevious(Post $post) {}
        public function findNext(Post $post) {}
        public function findRecentByBlog(\ExtbaseTeam\BlogExample\Domain\Model\Blog $blog, $limit = 5) {}
        public function findByCategory($categoryUid) {}
        public function findAllSortedByCategory(array $uids) {}
    }

    /**
     * A repository for blogs
     */
    class BlogRepository extends \typo3\cms\extbase\persistence\repository {
        protected $defaultOrderings;

        /**
         * Life cycle method.
         */
        public function initializeObject() {}
    }

    /**
     * A repository for persons
     */
    class PersonRepository extends \typo3\cms\extbase\persistence\repository {
        protected $defaultOrderings;

    }

}

namespace ExtbaseTeam\BlogExample\Domain\Model {
    /**
     * A blog post
     */
    class Post extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Model\Blog
         */
        protected $blog;
        /**
         * @var string
         * @validate StringLength(minimum = 3, maximum = 50)
         */
        protected $title;
        /**
         * @var \DateTime
         */
        protected $date;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Model\Person
         */
        protected $author;
        /**
         * @var \ExtbaseTeam\BlogExample\Domain\Model\Person
         */
        protected $reviewer;
        /**
         * @var string
         * @validate StringLength(minimum = 3)
         */
        protected $content;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\ExtbaseTeam\BlogExample\Domain\Model\Tag>
         */
        protected $tags;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Extbase\Domain\Model\Category>
         */
        protected $categories;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\ExtbaseTeam\BlogExample\Domain\Model\Comment>
         * @lazy
         * @cascade remove
         */
        protected $comments;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\ExtbaseTeam\BlogExample\Domain\Model\Post>
         * @lazy
         */
        protected $relatedPosts;

        /**
         * Constructs this post
         */
        public function __construct() {}
        public function setBlog(\ExtbaseTeam\BlogExample\Domain\Model\Blog $blog) {}
        /**
         * Returns the blog this post is part of
         *
         * @return \ExtbaseTeam\BlogExample\Domain\Model\Blog The blog this post is part of
         */
        public function getBlog() {}
        public function setTitle($title) {}
        /**
         * Getter for title
         *
         * @return string
         */
        public function getTitle() {}
        public function setDate(\DateTime $date) {}
        /**
         * Getter for date
         *
         *
         * @return \DateTime
         */
        public function getDate() {}
        public function setTags(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $tags) {}
        public function addTag(Tag $tag) {}
        public function removeTag(Tag $tag) {}
        /**
         * Remove all tags from this post
         */
        public function removeAllTags() {}
        /**
         * Getter for tags
         * Note: We return a clone of the tags because they must not be modified as they are Value Objects
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage A storage holding objects
         */
        public function getTags() {}
        public function addCategory(\TYPO3\CMS\Extbase\Domain\Model\Category $category) {}
        public function setCategories($categories) {}
        /**
         * Get categories
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        public function getCategories() {}
        public function removeCategory(\TYPO3\CMS\Extbase\Domain\Model\Category $category) {}
        public function setAuthor(\ExtbaseTeam\BlogExample\Domain\Model\Person $author) {}
        /**
         * Getter for author
         *
         * @return \ExtbaseTeam\BlogExample\Domain\Model\Person
         */
        public function getAuthor() {}
        /**
         * @return \ExtbaseTeam\BlogExample\Domain\Model\Person
         */
        public function getReviewer() {}
        public function setReviewer(\ExtbaseTeam\BlogExample\Domain\Model\Person $reviewer) {}
        public function setContent($content) {}
        /**
         * Getter for content
         *
         * @return string
         */
        public function getContent() {}
        public function setComments(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $comments) {}
        public function addComment(Comment $comment) {}
        public function removeComment(Comment $commentToDelete) {}
        /**
         * Remove all comments from this post
         */
        public function removeAllComments() {}
        /**
         * Returns the comments to this post
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage holding instances of Comment
         */
        public function getComments() {}
        public function setRelatedPosts(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $relatedPosts) {}
        public function addRelatedPost(Post $post) {}
        /**
         * Remove all related posts
         */
        public function removeAllRelatedPosts() {}
        /**
         * Returns the related posts
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage holding instances of Post
         */
        public function getRelatedPosts() {}
        /**
         * Returns this post as a formatted string
         *
         * @return string
         */
        public function __toString() {}
    }

    /**
     * A blog post tag
     */
    class Tag extends \typo3\cms\extbase\domainobject\abstractvalueobject {
        /**
         * @var string
         */
        protected $name;

        public function __construct($name) {}
        /**
         * Returns this tag's name
         *
         * @return string This tag's name
         */
        public function getName() {}
        /**
         * Returns this tag as a formatted string
         *
         * @return string
         */
        public function __toString() {}
    }

    class DateExample extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * A datetime stored in a text field
         *
         * @var \DateTime
         */
        protected $datetimeText;
        /**
         * A datetime stored in an integer field
         *
         * @var \DateTime
         */
        protected $datetimeInt;
        /**
         * A datetime stored in a datetime field
         *
         * @var \DateTime
         */
        protected $datetimeDatetime;

        /**
         * @return \DateTime
         */
        public function getDatetimeText() {}
        public function setDatetimeText($datetimeText) {}
        /**
         * @return \DateTime
         */
        public function getDatetimeInt() {}
        public function setDatetimeInt($datetimeInt) {}
        /**
         * @return \DateTime
         */
        public function getDatetimeDatetime() {}
        public function setDatetimeDatetime($datetimeDatetime) {}
    }

    /**
     * A person - acting as author
     */
    class Person extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $firstname;
        /**
         * @var string
         */
        protected $lastname;
        /**
         * @var string
         */
        protected $email;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\ExtbaseTeam\BlogExample\Domain\Model\Tag>
         */
        protected $tags;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\ExtbaseTeam\BlogExample\Domain\Model\Tag>
         */
        protected $tagsSpecial;

        public function __construct($firstname, $lastname, $email) {}
        public function setFirstname($firstname) {}
        /**
         * Returns the person's firstname
         *
         * @return string The persons's firstname
         */
        public function getFirstname() {}
        public function setLastname($lastname) {}
        /**
         * Returns the person's lastname
         *
         * @return string The persons's lastname
         */
        public function getLastname() {}
        /**
         * Returns the person's full name
         *
         * @return string The persons's lastname
         */
        public function getFullName() {}
        public function setEmail($email) {}
        /**
         * Returns the person's email address
         *
         * @return string The persons's email address
         */
        public function getEmail() {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage|\ExtbaseTeam\BlogExample\Domain\Model\Tag[]
         */
        public function getTags() {}
        public function setTags(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $tags) {}
        public function addTag(Tag $tag) {}
        public function removeTag(Tag $tag) {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage|\ExtbaseTeam\BlogExample\Domain\Model\Tag[]
         */
        public function getTagsSpecial() {}
        public function setTagsSpecial(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $tagsSpecial) {}
        public function addTagSpecial(Tag $tag) {}
        public function removeTagSpecial(Tag $tag) {}
    }

    /**
     * A blog
     */
    class Blog extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * The blog's title.
         *
         * @var string
         * @validate StringLength(minimum = 1, maximum = 80)
         */
        protected $title;
        /**
         * The blog's subtitle
         *
         * @var string
         */
        protected $subtitle;
        /**
         * A short description of the blog
         *
         * @var string
         * @validate StringLength(maximum = 150)
         */
        protected $description;
        /**
         * A relative path to a logo image
         *
         * @var string
         */
        protected $logo;
        /**
         * The posts of this blog
         *
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\ExtbaseTeam\BlogExample\Domain\Model\Post>
         * @lazy
         * @cascade remove
         */
        protected $posts;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Extbase\Domain\Model\Category>
         */
        protected $categories;
        /**
         * The blog's administrator
         *
         * @var \ExtbaseTeam\BlogExample\Domain\Model\Administrator
         * @lazy
         */
        protected $administrator;

        /**
         * Constructs a new Blog
         */
        public function __construct() {}
        /**
         * @return string
         */
        public function getSubtitle() {}
        public function setTitle($title) {}
        /**
         * Returns the blog's title
         *
         * @return string The blog's title
         */
        public function getTitle() {}
        public function setLogo($logo) {}
        /**
         * @return string
         */
        public function getLogo() {}
        public function setDescription($description) {}
        /**
         * Returns the description
         *
         * @return string
         */
        public function getDescription() {}
        public function addPost(Post $post) {}
        public function removePost(Post $postToRemove) {}
        /**
         * Remove all posts from this blog
         */
        public function removeAllPosts() {}
        /**
         * Returns all posts in this blog
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        public function getPosts() {}
        public function addCategory(\TYPO3\CMS\Extbase\Domain\Model\Category $category) {}
        public function setCategories($categories) {}
        /**
         * Get categories
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        public function getCategories() {}
        public function removeCategory(\TYPO3\CMS\Extbase\Domain\Model\Category $category) {}
        public function setAdministrator(Administrator $administrator) {}
        /**
         * Returns the administrator value
         *
         * @return Administrator
         */
        public function getAdministrator() {}
        public function setSubtitle($subtitle) {}
    }

    /**
     * A blog post comment
     */
    class Comment extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var \DateTime
         */
        protected $date;
        /**
         * @var string
         * @validate NotEmpty
         */
        protected $author;
        /**
         * @var string
         * @validate EmailAddress
         */
        protected $email;
        /**
         * @var string
         * @validate StringLength(maximum = 500)
         */
        protected $content;

        /**
         * Constructs this post
         */
        public function __construct() {}
        public function setDate(\DateTime $date) {}
        /**
         * Getter for date
         *
         * @return \DateTime
         */
        public function getDate() {}
        public function setAuthor($author) {}
        /**
         * Getter for author
         *
         * @return string
         */
        public function getAuthor() {}
        public function setEmail($email) {}
        /**
         * Getter for authors email
         *
         * @return string
         */
        public function getEmail() {}
        public function setContent($content) {}
        /**
         * Getter for content
         *
         * @return string
         */
        public function getContent() {}
        /**
         * Returns this comment as a formatted string
         *
         * @return string
         */
        public function __toString() {}
    }

    /**
     * An Administrator of a Blog
     */
    class Administrator extends \typo3\cms\extbase\domain\model\frontenduser {}

    /**
     * A tt_content model
     */
    class TtContent extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * uid
         *
         * @var string
         */
        protected $uid;
        /**
         * pid
         *
         * @var string
         */
        protected $pid;
        /**
         * @var string
         */
        protected $header;
        /**
         * Images
         *
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Extbase\Domain\Model\FileReference>
         * @lazy
         */
        protected $image;

        /**
         * Constructs this post
         */
        public function __construct() {}
        /**
         * Gets the uid
         *
         * @return string $uid
         */
        public function getUid() {}
        /**
         * Gets the pid
         *
         * @return string $pid
         */
        public function getPid() {}
        /**
         * Returns the header
         *
         * @return string $header
         */
        public function getHeader() {}
        public function setHeader($header) {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        public function getImage() : \TYPO3\CMS\Extbase\Persistence\ObjectStorage {}
        public function setImage(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $image) {}
        /**
         * Returns this as a formatted string
         *
         * @return string
         */
        public function __toString() {}
    }

}

namespace TYPO3\CMS\Belog\Module {
    /**
     * This class is a wrapper for WebInfo controller of belog.
     * It is registered in ext_tables.php with \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::insertModuleFunction()
     * and called by the info extension via SCbase functionality.
     *
     * Extbase currently provides no way to register a "TBE_MODULES_EXT" module directly,
     * therefore we need to bootstrap extbase on our own here to jump to the WebInfo controller.
     */
    class BackendLogModuleBootstrap {
        /**
         * Dummy method, called by SCbase external object handling
         */
        public function init() {}
        /**
         * Dummy method, called by SCbase external object handling
         */
        public function checkExtObj() {}
        /** @var $extbaseBootstrap \TYPO3\CMS\Extbase\Core\Bootstrap */
        public function main() {}
    }

}

namespace TYPO3\CMS\Belog\ViewHelpers {
    /**
     * Get username from backend user id
     * @internal
     */
    class UsernameViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * First level cache of user names
         *
         * @var array
         */
        static protected $usernameRuntimeCache;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Extbase\Domain\Model\BackendUser $user */
        public static function renderStatic(/** @var \TYPO3\CMS\Extbase\Domain\Model\BackendUser $user */
array $arguments, /** @var \TYPO3\CMS\Extbase\Domain\Model\BackendUser $user */
\Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Extbase\Domain\Model\BackendUser $user */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Display error icon from error integer value
     * @internal
     */
    class ErrorIconViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Create detail string from log entry
     * @internal
     */
    class FormatDetailsViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
/** @var LogEntry $logEntry */
        public static function renderStatic(/** @var LogEntry $logEntry */
array $arguments, /** @var LogEntry $logEntry */
\Closure $renderChildrenClosure, /** @var LogEntry $logEntry */
RenderingContextInterface $renderingContext) {}
        protected static function stripPathFromFilenames(array $files = [ ]) {}
    }

    /**
     * Get workspace title from workspace id
     * @internal
     */
    class WorkspaceTitleViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * First level cache of workspace titles
         *
         * @var array
         */
        static protected $workspaceTitleRuntimeCache;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Belog\Domain\Model\Workspace $workspace */
        public static function renderStatic(/** @var \TYPO3\CMS\Belog\Domain\Model\Workspace $workspace */
array $arguments, /** @var \TYPO3\CMS\Belog\Domain\Model\Workspace $workspace */
\Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Belog\Domain\Model\Workspace $workspace */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Returns true, if a specific extension is loaded
     * @internal
     */
    class IsExtensionLoadedViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Belog\ViewHelpers\Form {
    /**
     * Extends the usual select view helper, but additionally translates
     * the select option labels
     *
     * Example:
     * <belog:form.translateLabelSelect property="number" options="{settings.selectableNumberOfLogEntries}" optionLabelPrefix="numbers"
     *
     * Will lookup number.200 (or whatever optionValue is given) in locallang database
     * @internal
     */
    class TranslateLabelSelectViewHelper extends \typo3\cms\fluid\viewhelpers\form\selectviewhelper {
        /**
         * Initialize arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Render the option tags.
         *
         * Extend the default handling by iterating over calculated options array and
         * try to translate the value
         *
         * @return array An associative array of options, key will be the value of the option tag
         */
        protected function getOptions() {}
        protected function translateLabel($label) {}
    }

}

namespace TYPO3\CMS\Belog\ViewHelpers\Be {
    /**
     * Get page path string from page id
     * @internal
     */
    class PagePathViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        /**
         * Resolve page id to page path string (with automatic cropping to maximum given length).
         *
         * @return string Page path string
         */
        public function render() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Belog\Controller {
    /**
     * Count newest exceptions for the system information menu
     */
    class SystemInformationController extends \typo3\cms\belog\controller\abstractcontroller {
        public function appendMessage(SystemInformationToolbarItem $systemInformationToolbarItem) {}
        /**
         * Get module states (the constraint object) from user data
         *
         * @return \TYPO3\CMS\Belog\Domain\Model\Constraint|null
         */
        protected function getConstraintFromBeUserData() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * Controller for log entry listings in Web->Info module
     */
    class WebInfoController extends \typo3\cms\belog\controller\abstractcontroller {
        /**
         * Set context to 'in page mode'
         */
        public function initializeAction() {}
    }

    /**
     * Abstract class to show log entries from sys_log
     */
    abstract class AbstractController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        const TIMEFRAME_THISWEEK = 0;
        const TIMEFRAME_LASTWEEK = 1;
        const TIMEFRAME_LASTSEVENDAYS = 2;
        const TIMEFRAME_CUSTOM = 30;
        const TIMEFRAME_LAST31DAYS = 12;
        const TIMEFRAME_LASTMONTH = 11;
        const TIMEFRAME_THISMONTH = 10;

        /**
         * Whether plugin is running in page context (sub module of Web > Info)
         *
         * @var bool
         */
        protected $isInPageContext;
        /**
         * Page ID in page context
         *
         * @var int
         */
        protected $pageId;
        /**
         * @var \TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository
         */
        protected $logEntryRepository;
        /**
         * @var BackendTemplateView
         */
        protected $view;

        public function injectLogEntryRepository(\TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository $logEntryRepository) {}
        protected function initializeView(ViewInterface $view) {}
        /**
         * init all actions
         */
        public function initializeAction() {}
        /**
         * Initialize index action
         *
         * @throws \RuntimeException
         */
        public function initializeIndexAction() {}
        public function indexAction(\TYPO3\CMS\Belog\Domain\Model\Constraint $constraint = null) {}
        /**
         * Get module states (the constraint object) from user data
         *
         * @return \TYPO3\CMS\Belog\Domain\Model\Constraint|null
         */
        protected function getConstraintFromBeUserData() {}
        protected function persistConstraintInBeUserData(\TYPO3\CMS\Belog\Domain\Model\Constraint $constraint) {}
/** @var $entry \TYPO3\CMS\Belog\Domain\Model\LogEntry */
        protected function groupLogEntriesByPageAndDay(/** @var $entry \TYPO3\CMS\Belog\Domain\Model\LogEntry */
\TYPO3\CMS\Extbase\Persistence\QueryResultInterface $logEntries, /** @var $entry \TYPO3\CMS\Belog\Domain\Model\LogEntry */
$groupByPage = false) {}
        /**
         * Create options for the user / group drop down.
         * This is not moved to a repository by intention to not mix up this 'meta' data
         * with real repository work
         *
         * @return array Key is the option name, value its label
         */
        protected function createUserAndGroupListForSelectOptions() {}
        /** @var $workspace \TYPO3\CMS\Belog\Domain\Model\Workspace */
        protected function createWorkspaceListForSelectOptions() {}
        protected function forceWorkspaceSelectionIfInWorkspace(\TYPO3\CMS\Belog\Domain\Model\Constraint $constraint) {}
        /**
         * Create options for the 'depth of page levels' selector.
         * This is shown if the module is displayed in page -> info
         *
         * @return array Key is depth identifier (1 = One level), value the localized select option label
         */
        protected function createPageDepthOptions() {}
        protected function setStartAndEndTimeFromTimeSelector(\TYPO3\CMS\Belog\Domain\Model\Constraint $constraint) {}
    }

    /**
     * Show log entries from table sys_log
     */
    class ToolsController extends \typo3\cms\belog\controller\abstractcontroller {
/** @var \TYPO3\CMS\Belog\Domain\Model\LogEntry $logEntry */
        public function deleteMessageAction(/** @var \TYPO3\CMS\Belog\Domain\Model\LogEntry $logEntry */
int $errorUid) {}
    }

}

namespace TYPO3\CMS\Belog\Domain\Repository {
    /**
     * Sys log entry repository
     */
    class LogEntryRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * Backend users, with UID as key
         *
         * @var array
         */
        protected $beUserList;

        /** @var $defaultQuerySettings \TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface */
        public function initializeObject() {}
        public function findByConstraint(\TYPO3\CMS\Belog\Domain\Model\Constraint $constraint) {}
        protected function createQueryConstraints(\TYPO3\CMS\Extbase\Persistence\QueryInterface $query, \TYPO3\CMS\Belog\Domain\Model\Constraint $constraint) {}
/** @var $pageTree \TYPO3\CMS\Backend\Tree\View\PageTreeView */
        protected function addPageTreeConstraintsToQuery(/** @var $pageTree \TYPO3\CMS\Backend\Tree\View\PageTreeView */
\TYPO3\CMS\Belog\Domain\Model\Constraint $constraint, /** @var $pageTree \TYPO3\CMS\Backend\Tree\View\PageTreeView */
\TYPO3\CMS\Extbase\Persistence\QueryInterface $query, /** @var $pageTree \TYPO3\CMS\Backend\Tree\View\PageTreeView */
array $queryConstraints) {}
        protected function addUsersAndGroupsToQueryConstraints(\TYPO3\CMS\Belog\Domain\Model\Constraint $constraint, \TYPO3\CMS\Extbase\Persistence\QueryInterface $query, array $queryConstraints) {}
        public function deleteByMessageDetails(LogEntry $logEntry) : int {}
        /**
         * Get a list of all backend users that are not deleted
         *
         * @return array
         */
        protected function getBackendUsers() {}
    }

    /**
     * Repository for workspaces
     * @todo This should be moved to EXT:workspaces if EXT:belog works no matter if workspaces are installed or not
     */
    class WorkspaceRepository extends \typo3\cms\extbase\persistence\repository {
        /** @var $querySettings \TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface */
        public function initializeObject() {}
    }

}

namespace TYPO3\CMS\Belog\Domain\Model {
    /**
     * A sys log entry
     * This model is 'complete': All current database properties are in there.
     *
     * @todo : This should be stuffed to some more central place
     */
    class LogEntry extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * Storage page ID of the log entry
         *
         * @var int
         */
        protected $pid;
        /**
         * This is not a relation to BeUser model, since the user does
         * not always exist, but we want the uid in then anyway.
         * This case is ugly in extbase, the best way we
         * have found now is to resolve the username (if it exists) in a
         * view helper and just use the uid of the be user here.
         *
         * @var int
         */
        protected $backendUserUid;
        /**
         * Action ID of the action that happened, for example 3 was a file action
         *
         * @var int
         */
        protected $action;
        /**
         * UID of the record the event happened to
         *
         * @var int
         */
        protected $recordUid;
        /**
         * Table name
         *
         * @var string
         */
        protected $tableName;
        /**
         * PID of the record the event happened to
         *
         * @var int
         */
        protected $recordPid;
        /**
         * Error code
         *
         * @var int
         */
        protected $error;
        /**
         * This is the log message itself, but possibly with %s substitutions.
         *
         * @var string
         */
        protected $details;
        /**
         * Timestamp when the log entry was written
         *
         * @var int
         */
        protected $tstamp;
        /**
         * Type code
         *
         * @var int
         */
        protected $type;
        /**
         * Details number
         *
         * @var int
         */
        protected $detailsNumber;
        /**
         * IP address of client
         *
         * @var string
         */
        protected $ip;
        /**
         * Serialized log data. This is a serialized array with substitutions for $this->details.
         *
         * @var string
         */
        protected $logData;
        /**
         * Event PID
         *
         * @var int
         */
        protected $eventPid;
        /**
         * This is only the UID and not the full workspace object for the same reason as in $beUserUid.
         *
         * @var int
         */
        protected $workspaceUid;
        /**
         * New ID
         *
         * @var string
         */
        protected $newId;

        public function setPid($pid) {}
        /**
         * Get pid
         *
         * @return int
         */
        public function getPid() {}
        public function setBackendUserUid($beUserUid) {}
        /**
         * Get backend user id
         *
         * @return int
         */
        public function getBackendUserUid() {}
        public function setAction($action) {}
        /**
         * Get action
         *
         * @return int
         */
        public function getAction() {}
        public function setRecordUid($recordUid) {}
        /**
         * Get record uid
         *
         * @return int
         */
        public function getRecordUid() {}
        public function setTableName($tableName) {}
        /**
         * Get table name
         *
         * @return string
         */
        public function getTableName() {}
        public function setRecordPid($recordPid) {}
        /**
         * Get record pid
         *
         * @return int
         */
        public function getRecordPid() {}
        public function setError($error) {}
        /**
         * Get error
         *
         * @return int
         */
        public function getError() {}
        public function setDetails($details) {}
        /**
         * Get details
         *
         * @return string
         */
        public function getDetails() {}
        public function setTstamp($tstamp) {}
        /**
         * Get tstamp
         *
         * @return int
         */
        public function getTstamp() {}
        public function setType($type) {}
        /**
         * Get type
         *
         * @return int
         */
        public function getType() {}
        public function setDetailsNumber($detailsNumber) {}
        /**
         * Get details number
         *
         * @return int
         */
        public function getDetailsNumber() {}
        public function setIp($ip) {}
        /**
         * Get ip
         *
         * @return string
         */
        public function getIp() {}
        public function setLogData($logData) {}
        /**
         * Get log data
         *
         * @return array
         */
        public function getLogData() {}
        public function setEventPid($eventPid) {}
        /**
         * Get event pid
         *
         * @return int
         */
        public function getEventPid() {}
        public function setWorkspaceUid($workspaceUid) {}
        /**
         * Get workspace
         *
         * @return int
         */
        public function getWorkspaceUid() {}
        public function setNewId($newId) {}
        /**
         * Get new id
         *
         * @return string
         */
        public function getNewId() {}
    }

    /**
     * Constraints for log entries
     */
    class Constraint extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * Selected user/group; possible values are "gr-<uid>" for a group, "us-<uid>" for a user or -1 for "all users"
         *
         * @var string
         */
        protected $userOrGroup;
        /**
         * Number of log rows to show
         *
         * @var int
         */
        protected $number;
        /**
         * UID of selected workspace
         *
         * @var int
         */
        protected $workspaceUid;
        /**
         * Selected time frame
         *
         * @var int
         */
        protected $timeFrame;
        /**
         * Selected action
         *
         * @var int
         */
        protected $action;
        /**
         * Whether rows should be grouped by page
         *
         * @var bool
         */
        protected $groupByPage;
        /**
         * Calculated start timestamp
         *
         * @var int
         */
        protected $startTimestamp;
        /**
         * Calculated end timestamp
         *
         * @var int
         */
        protected $endTimestamp;
        /**
         * Manual date start
         * @var \DateTime
         */
        protected $manualDateStart;
        /**
         * Manual date stop
         * @var \DateTime
         */
        protected $manualDateStop;
        /**
         * Whether the plugin is called in page context (submodule of Web > Info)
         *
         * @var bool
         */
        protected $isInPageContext;
        /**
         * Selected page ID in page context
         *
         * @var int
         */
        protected $pageId;
        /**
         * Page level depth
         *
         * @var int
         */
        protected $depth;

        /**
         * Default constructor
         */
        public function __construct() {}
        /**
         * added to prevent the deprecation message
         * in Extbase\DomainObject\AbstractDomainObject
         *
         * @todo the constraints model needs another way of storing
         * persisted search data than serialisation
         */
        public function __wakeup() {}
        public function setUserOrGroup($user) {}
        /**
         * Get user
         *
         * @return string
         */
        public function getUserOrGroup() {}
        public function setNumber($number) {}
        /**
         * Get number of log entries to show
         *
         * @return int
         */
        public function getNumber() {}
        public function setWorkspaceUid($workspace) {}
        /**
         * Get workspace
         *
         * @return string
         */
        public function getWorkspaceUid() {}
        public function setTimeFrame($timeFrame) {}
        /**
         * Get time frame
         *
         * @return int
         */
        public function getTimeFrame() {}
        public function setAction($action) {}
        /**
         * Get action
         *
         * @return int
         */
        public function getAction() {}
        public function setGroupByPage($groupByPage) {}
        /**
         * Get group by page
         *
         * @return bool
         */
        public function getGroupByPage() {}
        public function setStartTimestamp($timestamp) {}
        /**
         * Get calculated start timestamp from query constraints
         *
         * @return int
         */
        public function getStartTimestamp() {}
        public function setEndTimestamp($timestamp) {}
        /**
         * Get calculated end timestamp from query constraints
         *
         * @return int
         */
        public function getEndTimestamp() {}
        public function setIsInPageContext($pageContext) {}
        /**
         * Get page context
         *
         * @return bool
         */
        public function getIsInPageContext() {}
        public function setPageId($id) {}
        /**
         * Get page id
         *
         * @return int
         */
        public function getPageId() {}
        public function setDepth($depth) {}
        /**
         * Get page level depth
         *
         * @return int
         */
        public function getDepth() {}
        public function setManualDateStart(\DateTime $manualDateStart = null) {}
        /**
         * Get manual date start
         *
         * @return \DateTime
         */
        public function getManualDateStart() {}
        public function setManualDateStop(\DateTime $manualDateStop = null) {}
        /**
         * Get manual date stop
         *
         * @return \DateTime
         */
        public function getManualDateStop() {}
    }

    /**
     * Stub model for workspaces - only properties required for belog module are added currently
     *
     * @todo : This should be extended and put at some more central place
     */
    class Workspace extends \typo3\cms\extbase\domainobject\abstractentity {
        const UID_LIVE_WORKSPACE = 0;
        const UID_ANY_WORKSPACE = -99;

        /**
         * title of the workspace
         *
         * @var string
         */
        protected $title;

        public function setTitle($title) {}
        /**
         * Get workspace title
         *
         * @return string
         */
        public function getTitle() {}
    }

}

namespace TYPO3\CMS\Belog\Tests\Unit\Domain\Repository {
    /**
     * Test case
     */
    class WorkspaceRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function initializeObjectSetsRespectStoragePidToFalse() {}
    }

    /**
     * Test case
     */
    class LogEntryRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var \TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function initializeObjectSetsRespectStoragePidToFalse() {}
    }

}

namespace TYPO3\CMS\Belog\Tests\Unit\Domain\Model {
    /**
     * Test case
     */
    class LogEntryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Belog\Domain\Model\LogEntry
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getLogDataInitiallyReturnsEmptyArray() {}
        /**
         * @test
         */
        public function getLogDataForEmptyStringLogDataReturnsEmptyArray() {}
        /**
         * @test
         */
        public function getLogDataForGarbageStringLogDataReturnsEmptyArray() {}
        /**
         * @test
         */
        public function getLogDataForSerializedArrayReturnsThatArray() {}
        /**
         * @test
         */
        public function getLogDataForSerializedObjectReturnsEmptyArray() {}
    }

    /**
     * Test case
     */
    class ConstraintTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Belog\Domain\Model\Constraint
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function setManualDateStartForDateTimeSetsManualDateStart() {}
        /**
         * @test
         */
        public function setManualDateStartForNoArgumentSetsManualDateStart() {}
        /**
         * @test
         */
        public function setManualDateStopForDateTimeSetsManualDateStop() {}
        /**
         * @test
         */
        public function setManualDateStopForNoArgumentSetsManualDateStop() {}
    }

}

namespace TYPO3\CMS\Cshmanual\Domain\Repository {
    class TableManualRepository extends \typo3\cms\documentation\domain\repository\tablemanualrepository {}

}

namespace TYPO3\CMS\Cshmanual\Service {
    class AccessService extends \typo3\cms\documentation\service\accessservice {}

    class JavaScriptService extends \typo3\cms\documentation\service\javascriptservice {}

}

namespace TYPO3\CMS\Documentation {
    /**
     * Generic Documentation exception
     */
    class Exception extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Documentation\ViewHelpers {
    /**
     * ViewHelper to display all download links for a document
     *
     * Example: <doc:formats document="{document}" />
     *
     * @internal
     */
    class FormatsViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Documentation\Domain\Model\DocumentFormat $format */
        public static function renderStatic(/** @var \TYPO3\CMS\Documentation\Domain\Model\DocumentFormat $format */
array $arguments, /** @var \TYPO3\CMS\Documentation\Domain\Model\DocumentFormat $format */
\Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Documentation\Domain\Model\DocumentFormat $format */
RenderingContextInterface $renderingContext) {}
        protected static function getIconForFileExtension($extension, IconFactory $iconFactory) {}
    }

}

namespace TYPO3\CMS\Documentation\Controller {
    /**
     * Main controller of the Documentation module.
     */
    class DocumentController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var DocumentRepository
         */
        protected $documentRepository;
        /**
         * @var DocumentationService
         */
        protected $documentationService;
        /**
         * @var LanguageUtility
         */
        protected $languageUtility;
        /**
         * @var Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * Backend Template Container
         *
         * @var BackendTemplateView
         */
        protected $defaultViewObjectName;
        /**
         * BackendTemplateContainer
         *
         * @var BackendTemplateView
         */
        protected $view;

/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        public function injectDocumentRepository(DocumentRepository $documentRepository) {}
        public function injectDocumentationService(DocumentationService $documentationService) {}
        public function injectLanguageUtility(LanguageUtility $languageUtility) {}
        public function injectSignalSlotDispatcher(Dispatcher $signalSlotDispatcher) {}
        /**
         * Lists the available documents.
         */
        public function listAction() {}
        public function deleteAction(ServerRequestInterface $request) {}
        /**
         * Returns available documents.
         *
         * @return \TYPO3\CMS\Documentation\Domain\Model\Document[]
         * @api
         */
        public function getDocuments() {}
        protected function emitAfterInitializeDocumentsSignal($language, array $documents) {}
        /**
         * Shows documents to be downloaded/fetched from a remote location.
         */
        public function downloadAction() {}
        public function fetchAction($url, $key, $version = null) {}
        /**
         * Get backend user
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns the LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Main help module controller
     */
    class HelpController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        const TOC_ONLY = 1;
        const FULL = 0;

        /**
         * @var TableManualRepository
         */
        protected $tableManualRepository;
        /**
         * Default View Container
         *
         * @var BackendTemplateView
         */
        protected $defaultViewObjectName;

        /**
         * Initialize the controller
         */
        public function initializeAction() {}
/** @var BackendTemplateView $view */
        public function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /**
         * Show table of contents
         */
        public function indexAction() {}
        /**
         * Show the table of contents and all manuals
         */
        public function allAction() {}
        public function detailAction($table = '', $field = '*') {}
        /**
         * Registers the Icons into the docheader
         *
         * @throws \InvalidArgumentException
         */
        protected function registerDocheaderButtons() {}
        /**
         * Returns the currently logged in BE user
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns the LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Documentation\Service {
    /**
     * Service class to connect to docs.typo3.org.
     */
    class DocumentationService {
        /**
         * Returns the list of official documents on docs.typo3.org.
         *
         * @return array
         */
        public function getOfficialDocuments() {}
        /**
         * Returns the list of local extensions.
         *
         * @return array
         */
        public function getLocalExtensions() {}
        public function fetchNearestDocument($url, $key, $version = 'latest', $language = 'default') {}
/** @var RequestFactory $requestFactory */
        public function fetchDocument(/** @var RequestFactory $requestFactory */
$url, /** @var RequestFactory $requestFactory */
$key, /** @var RequestFactory $requestFactory */
$version = 'latest', /** @var RequestFactory $requestFactory */
$language = 'default') {}
        protected function getAvailablePackages($url) {}
        protected function parsePackagesXML($string) {}
        protected function unzipDocumentPackage($file, $path) {}
    }

    /**
     * JavaScript Service adding JS code to each backend page
     */
    class JavaScriptService {
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function addJavaScript(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$title, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$documentTemplateObject) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBeUser() {}
    }

    /**
     * Access service
     */
    class AccessService {
        public function checkAccess($type, $identifier) {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Documentation\Domain\Repository {
    /**
     * An extension helper repository to be used in ext:documentation context
     */
    class DocumentRepository {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;

        public function injectObjectManager(ObjectManagerInterface $objectManager) {}
        /**
         * Finds all documents.
         *
         * @return \TYPO3\CMS\Documentation\Domain\Model\Document[]
         */
        public function findAll() {}
/** @var $locales \TYPO3\CMS\Core\Localization\Locales */
        public function findByLanguage(/** @var $locales \TYPO3\CMS\Core\Localization\Locales */
$language) {}
        /**
         * Retrieves Sphinx documents.
         *
         * @return array
         */
        protected function findSphinxDocuments() {}
        /** @var \TYPO3\CMS\Documentation\Domain\Model\DocumentFormat $documentFormat */
        protected function findOpenOfficeDocuments() {}
        protected function getMetadata($documentKey, $language) {}
    }

    /**
     * Table manual repository
     */
    class TableManualRepository {
        /**
         * @var \TYPO3\CMS\Documentation\Service\AccessService
         */
        protected $accessService;

        /**
         * Constructor
         */
        public function __construct() {}
        public function getTableManual($table) {}
        public function getSingleManual($table, $field) {}
        public function getSections($mode) {}
        protected function renderTableOfContentItem($mode, $table, $tocCat, $outputSections, $tocArray, $CSHkeys) {}
        protected function getTableFieldLabel($key, $field = '', $mergeToken = ': ') {}
        protected function getTableFieldNames($key, $field) {}
        protected function getItem($table, $field, $anchors = false) {}
        protected function getSeeAlsoLinks($value, $anchorTable = '') {}
        protected function isExcludableField($table, $field) {}
        protected function getImages($images, $descriptions) {}
        protected function getTableSetup($table) {}
        protected function getFieldSetup($table, $field, $allowEmptyField = false) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Documentation\Domain\Model {
    /**
     * An extension helper model to be used in ext:documentation context
     */
    class Document extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * packageKey
         *
         * @var string
         * @validate NotEmpty
         */
        protected $packageKey;
        /**
         * extensionKey
         *
         * @var string
         * @validate NotEmpty
         */
        protected $extensionKey;
        /**
         * icon
         *
         * @var string
         */
        protected $icon;
        /**
         * translations
         *
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Documentation\Domain\Model\DocumentTranslation>
         */
        protected $translations;

        /**
         * Default constructor.
         */
        public function __construct() {}
        /**
         * Do not modify this method!
         * It will be rewritten on each save in the extension builder
         * You may modify the constructor of this class instead
         */
        protected function initStorageObjects() {}
        /**
         * Returns the package key.
         *
         * @return string $packageKey
         */
        public function getPackageKey() {}
        public function setPackageKey($packageKey) {}
        /**
         * Returns the extension key.
         *
         * @return string $extensionKey
         */
        public function getExtensionKey() {}
        public function setExtensionKey($extensionKey) {}
        /**
         * Returns the icon.
         *
         * @return string $icon
         */
        public function getIcon() {}
        public function setIcon($icon) {}
        public function addTranslation(\TYPO3\CMS\Documentation\Domain\Model\DocumentTranslation $translation) {}
        public function removeTranslation(\TYPO3\CMS\Documentation\Domain\Model\DocumentTranslation $translationToRemove) {}
        /**
         * Returns the translations.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Documentation\Domain\Model\DocumentTranslation> $translations
         */
        public function getTranslations() {}
        public function setTranslations(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $translations) {}
    }

    /**
     * An extension helper model to be used in ext:documentation context
     */
    class DocumentFormat extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * format
         *
         * @var string
         * @validate NotEmpty
         */
        protected $format;
        /**
         * path
         *
         * @var string
         * @validate NotEmpty
         */
        protected $path;

        /**
         * Returns the format.
         *
         * @return string $format
         */
        public function getFormat() {}
        public function setFormat($format) {}
        /**
         * Returns the path.
         *
         * @return string $path
         */
        public function getPath() {}
        public function setPath($path) {}
    }

    /**
     * An extension helper model to be used in ext:documentation context
     */
    class DocumentTranslation extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * language
         * 2 char language identifier (or "" for default)
         *
         * @var string
         * @validate NotEmpty
         */
        protected $language;
        /**
         * title
         *
         * @var string
         */
        protected $title;
        /**
         * description
         *
         * @var string
         */
        protected $description;
        /**
         * formats
         *
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Documentation\Domain\Model\DocumentFormat>
         */
        protected $formats;

        /**
         * Default constructor.
         */
        public function __construct() {}
        /**
         * Do not modify this method!
         * It will be rewritten on each save in the extension builder
         * You may modify the constructor of this class instead
         */
        protected function initStorageObjects() {}
        /**
         * Returns the language.
         *
         * @return string $language
         */
        public function getLanguage() {}
        public function setLanguage($language) {}
        /**
         * Returns the title.
         *
         * @return string $title
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * Returns the description.
         *
         * @return string $description
         */
        public function getDescription() {}
        public function setDescription($description) {}
        public function addFormat(\TYPO3\CMS\Documentation\Domain\Model\DocumentFormat $format) {}
        public function removeFormat(\TYPO3\CMS\Documentation\Domain\Model\DocumentFormat $formatToRemove) {}
        /**
         * Returns the formats.
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Documentation\Domain\Model\DocumentFormat> $formats
         */
        public function getFormats() {}
        public function setFormats(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $formats) {}
    }

}

namespace TYPO3\CMS\Documentation\Slots {
    /**
     * This slot listens to a signal in Extension Manager to add links to
     * manuals available locally.
     */
    class ExtensionManager {
        /**
         * @var \TYPO3\CMS\Documentation\Domain\Model\Document[]
         */
        static protected $documents;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function processActions(array $extension, array $actions) {}
    }

}

namespace TYPO3\CMS\Documentation\Exception {
    /**
     * An exception when something is wrong within an XML file
     */
    class XmlParser extends \typo3\cms\documentation\exception {}

    /**
     * An exception when something is wrong within the document
     */
    class Document extends \typo3\cms\documentation\exception {}

}

namespace TYPO3\CMS\Documentation\Utility {
    /**
     * Misc utility.
     */
    class MiscUtility {
        public static function getExtensionMetaData($extensionKey) {}
        public static function getIcon($documentKey) {}
    }

    /**
     * Utility for language selection.
     */
    class LanguageUtility implements \typo3\cms\core\singletoninterface {
        /**
         * Returns the language from BE User settings.
         *
         * @return string language identifier 2 chars or default (English)
         */
        public function getDocumentationLanguage() {}
    }

}

namespace TYPO3\CMS\Documentation\Tests\Unit\Domain\Model {
    /**
     * Test case
     */
    class DocumentTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Documentation\Domain\Model\Document
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function setPackageKeyForStringSetsPackageKey() {}
        /**
         * @test
         */
        public function setIconForStringSetsTitle() {}
        /**
         * @test
         */
        public function getTranslationsReturnsInitialValueForDocumentTranslation() {}
        /**
         * @test
         */
        public function setTranslationsForObjectStorageContainingDocumentTranslationSetsTranslations() {}
        /**
         * @test
         */
        public function addTranslationToObjectStorageHoldingTranslations() {}
        /**
         * @test
         */
        public function removeTranslationFromObjectStorageHoldingTranslations() {}
    }

    /**
     * Test case
     */
    class DocumentFormatTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Documentation\Domain\Model\DocumentFormat
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function setFormatForStringSetsFormat() {}
        /**
         * @test
         */
        public function setPathForStringSetsPath() {}
    }

    /**
     * Test case
     */
    class DocumentTranslationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Documentation\Domain\Model\DocumentTranslation
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function setLanguageForStringSetsLocale() {}
        /**
         * @test
         */
        public function setTitleForStringSetsTitle() {}
        /**
         * @test
         */
        public function getFormatsReturnsInitialValueForDocumentFormat() {}
        /**
         * @test
         */
        public function setFormatsForObjectStorageContainingDocumentFormatSetsFormats() {}
        /**
         * @test
         */
        public function addFormatToObjectStorageHoldingFormats() {}
        /**
         * @test
         */
        public function removeFormatFromObjectStorageHoldingFormats() {}
    }

}

namespace TYPO3\CMS\Form {
    /**
     * A generic Form Exception
     *
     * @api
     */
    class Exception extends \typo3\cms\core\error\exception {}

}

namespace TYPO3\CMS\Form\Mvc {
    /**
     * A processing Rule contains information for property mapping and validation.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     * @internal
     */
    class ProcessingRule {
        /**
         * The target data type the data should be converted to
         *
         * @var string
         */
        protected $dataType;
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration
         */
        protected $propertyMappingConfiguration;
        /**
         * @var \TYPO3\CMS\Extbase\Validation\Validator\ConjunctionValidator
         */
        protected $validator;
        /**
         * @var \TYPO3\CMS\Extbase\Error\Result
         */
        protected $processingMessages;
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMapper
         */
        protected $propertyMapper;

        public function injectPropertyMappingConfiguration(\TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration $propertyMappingConfiguration) {}
        public function injectConjunctionValidator(\TYPO3\CMS\Extbase\Validation\Validator\ConjunctionValidator $validator) {}
        public function injectPropertyMapper(\TYPO3\CMS\Extbase\Property\PropertyMapper $propertyMapper) {}
        /**
         * Constructs this processing rule
         * @internal
         */
        public function __construct() {}
        /**
         * @return PropertyMappingConfiguration
         * @internal
         */
        public function getPropertyMappingConfiguration() : PropertyMappingConfiguration {}
        /**
         * @return string
         * @internal
         */
        public function getDataType() : string {}
        public function setDataType(string $dataType) {}
        /**
         * Returns the child validators of the ConjunctionValidator that is bound to this processing rule
         *
         * @return \SplObjectStorage<ValidatorInterface>
         * @internal
         */
        public function getValidators() : \SplObjectStorage {}
        public function addValidator(ValidatorInterface $validator) {}
        public function removeValidator(ValidatorInterface $validator) {}
        public function process($value) {}
        /**
         * @return Result
         * @internal
         */
        public function getProcessingMessages() : Result {}
    }

}

namespace TYPO3\CMS\Form\Mvc\Configuration {
    /**
     * Configuration source based on YAML files
     *
     * Scope: frontend / backend
     * @internal
     */
    class YamlSource {
        /**
         * Will be set if the PHP YAML Extension is installed.
         * Having this installed massively improves YAML parsing performance.
         *
         * @var bool
         * @see http://pecl.php.net/package/yaml
         */
        protected $usePhpYamlExtension;

        /**
         * Use PHP YAML Extension if installed.
         * @internal
         */
        public function __construct() {}
        public function load(array $filesToLoad) : array {}
        public function save($fileToSave, array $configuration) {}
        protected function getHeaderFromFile($file) : string {}
    }

    /**
     * Utilities to manage and convert TypoScript
     *
     * Scope: frontend
     */
    class TypoScriptService {
        /**
         * @var \TYPO3\CMS\Extbase\Service\TypoScriptService
         */
        protected $extbaseTypoScriptService;

        public function injectTypoScriptService(\TYPO3\CMS\Extbase\Service\TypoScriptService $typoScriptService) {}
        public function resolvePossibleTypoScriptConfiguration(array $configuration = [ ]) : array {}
        protected function resolveTypoScriptConfiguration(array $configuration = [ ]) : array {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

    /**
     * A generic Form configuration Exception
     *
     * @internal
     */
    class Exception extends \typo3\cms\form\exception {}

    /**
     * Extend the ExtbaseConfigurationManager to read YAML configurations.
     *
     * Scope: frontend / backend
     * @internal
     */
    class ConfigurationManager extends \typo3\cms\extbase\configuration\configurationmanager implements \typo3\cms\form\mvc\configuration\configurationmanagerinterface {
        /**
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected $cache;
        /**
         * @var \TYPO3\CMS\Form\Mvc\Configuration\YamlSource
         */
        protected $yamlSource;

        public function injectYamlSource(\TYPO3\CMS\Form\Mvc\Configuration\YamlSource $yamlSource) {}
        public function getConfiguration($configurationType, $extensionName = null, $pluginName = null) {}
        protected function getConfigurationFromYamlFile(string $extensionName) : array {}
        protected function overrideConfigurationByTypoScript(array $yamlSettings, string $extensionName) : array {}
        /**
         * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected function getCacheFrontend() : FrontendInterface {}
        protected function getConfigurationCacheKey(string $extensionName) : string {}
        protected function getYamlSettingsFromCache(string $extensionName) {}
        protected function setYamlSettingsIntoCache(string $extensionName, array $yamlSettings) {}
        protected function getTypoScriptSettings(string $extensionName) {}
    }

    /**
     * Resolve declared inheritances within an configuration array
     *
     * Scope: frontend / backend
     * @internal
     */
    class InheritancesResolverService {
        const INHERITANCE_OPERATOR = '__inheritances';

        /**
         * The reference configuration is used to get untouched values which
         * can be merged into the touched configuration.
         *
         * @var array
         */
        protected $referenceConfiguration;
        /**
         * This stack is needed to find cyclically inheritances which are on
         * the same nesting level but which do not follow each other directly.
         *
         * @var array
         */
        protected $inheritanceStack;
        /**
         * Needed to park a configuration path for cyclically inheritances
         * detection while inheritances for this path is ongoing.
         *
         * @var string
         */
        protected $inheritancePathToCkeck;

/** @var InheritancesResolverService $inheritancesResolverService */
        public static function create(/** @var InheritancesResolverService $inheritancesResolverService */
array $configuration = [ ]) : InheritancesResolverService {}
        /**
         * Reset the state of this service.
         * Mainly introduced for unit tests.
         *
         * @return InheritancesResolverService
         * @internal
         */
        public function reset() {}
        public function setReferenceConfiguration(array $referenceConfiguration) {}
        /**
         * Resolve all inheritances within a configuration.
         * After that the configuration array is cleaned from the
         * inheritance operator.
         *
         * @return array
         * @internal
         */
        public function getResolvedConfiguration() : array {}
        protected function resolve(array $configuration, array $pathStack = [ ], bool $setInheritancePathToCkeck = true) : array {}
        protected function resolveInheritancesRecursive(array $inheritances) : array {}
        protected function throwExceptionIfCycleInheritances(string $path, string $pathToCheck) {}
        protected function removeInheritanceOperatorRecursive(array $array) : array {}
    }


    /**
     * Class ConfigurationManagerInterface
     *
     * Scope: frontend / backend
     * @internal
     */
    interface ConfigurationManagerInterface extends \typo3\cms\extbase\configuration\configurationmanagerinterface {
    const CONFIGURATION_TYPE_YAML_SETTINGS = 'YamlSettings';
    }

}

namespace TYPO3\CMS\Form\Mvc\Configuration\Exception {
    /**
     * This exception is thrown if the configuration manager wants to load
     * a YAML file from an empty extension key
     *
     * @internal
     */
    class ExtensionNameRequiredException extends \typo3\cms\form\mvc\configuration\exception {}

    /**
     * Exception for file write errors
     */
    class FileWriteException extends \typo3\cms\form\mvc\configuration\exception {}

    /**
     * This exception is thrown if the InheritancesResolverService wants to
     * solve declared inheritances which point cyclically to themselves.
     *
     * @internal
     */
    class CycleInheritancesException extends \typo3\cms\form\mvc\configuration\exception {}

    /**
     * A No Such File exception
     */
    class NoSuchFileException extends \typo3\cms\form\mvc\configuration\exception {}

    /**
     * A Parse Error exception
     */
    class ParseErrorException extends \typo3\cms\form\mvc\configuration\exception {}

}

namespace TYPO3\CMS\Form\Mvc\Property {
    /**
     * Scope: frontend
     */
    class PropertyMappingConfiguration {
/** @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration $propertyMappingConfiguration */
        public function afterBuildingFinished(/** @var \TYPO3\CMS\Extbase\Property\PropertyMappingConfiguration $propertyMappingConfiguration */
RenderableInterface $renderable) {}
        protected function checkSaveFileMountAccess(string $saveToFileMountIdentifier) : bool {}
    }

    class PropertyMappingConfigurationTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var PropertyMappingConfiguration */
        protected $propertyMappingConfiguration;
        /** @var \PHPUnit_Framework_MockObject_MockObject|ExtbasePropertyMappingConfiguration */
        protected $extbasePropertyMappingConfiguration;
        /** @var \PHPUnit_Framework_MockObject_MockObject|FileUpload */
        protected $fileUpload;
        /** @var \PHPUnit_Framework_MockObject_MockObject|FormDefinition */
        protected $rootForm;
        /** @var \PHPUnit_Framework_MockObject_MockObject|ProcessingRule */
        protected $processingRule;
        protected $singletons;

        public function setUp() {}
        public function tearDown() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|ObjectManager $objectManager */
        public function afterBuildingFinishedAddsFileReferenceConverter() {}
        /**
         * @test
         */
        public function afterBuildingFinishedAddsMimeTypeConverter() {}
        /**
         * @test
         */
        public function afterBuildingFinishedSetsUpStoragePathToPropertySaveToFileMountIfItExists() {}
        /**
         * @test
         */
        public function afterBuildingFinishedSetsUpStoragePathToToFormDefinitionPathIfSaveToFileMountIsNotDefinedAndFormWasNotAddedProgrammatically() {}
        /**
         * @test
         */
        public function afterBuildingFinishedSetsStoragePathToUserUploadIfNeitherSaveToFileMountIsSetNorThereIsAFormDefinitionPath() {}
        /**
         * @test
         */
        public function afterBuildingFinishedCopiesValidators() {}
        /**
         * @test
         */
        public function afterBuildingFinishedDoesNotCopyNotEmptyValidator() {}
    }

}

namespace TYPO3\CMS\Form\Mvc\Property\TypeConverter {
    /**
     * Class UploadedFileReferenceConverter
     *
     * Scope: frontend
     * @internal
     */
    class UploadedFileReferenceConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        const CONFIGURATION_UPLOAD_FOLDER = 1;
        const CONFIGURATION_UPLOAD_CONFLICT_MODE = 2;
        const CONFIGURATION_FILE_VALIDATORS = 4;

        /**
         * @var string
         */
        protected $defaultUploadFolder;
        /**
         * One of 'cancel', 'replace', 'rename'
         *
         * @var string
         */
        protected $defaultConflictMode;
        /**
         * @var array
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * Take precedence over the available FileReferenceConverter
         *
         * @var int
         */
        protected $priority;
        /**
         * @var \TYPO3\CMS\Core\Resource\FileInterface[]
         */
        protected $convertedResources;
        /**
         * @var \TYPO3\CMS\Core\Resource\ResourceFactory
         */
        protected $resourceFactory;
        /**
         * @var \TYPO3\CMS\Extbase\Security\Cryptography\HashService
         */
        protected $hashService;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;

        public function injectResourceFactory(\TYPO3\CMS\Core\Resource\ResourceFactory $resourceFactory) {}
        public function injectHashService(\TYPO3\CMS\Extbase\Security\Cryptography\HashService $hashService) {}
        public function injectPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) {}
        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], PropertyMappingConfigurationInterface $configuration = null) {}
        protected function importUploadedResource(array $uploadInfo, PropertyMappingConfigurationInterface $configuration) : ExtbaseFileReference {}
        protected function createFileReferenceFromFalFileObject(File $file, int $resourcePointer = null) : ExtbaseFileReference {}
        protected function createFileReferenceFromFalFileReferenceObject(CoreFileReference $falFileReference, int $resourcePointer = null) : ExtbaseFileReference {}
        protected function getUploadErrorMessage(int $errorCode) : string {}
    }

}

namespace TYPO3\CMS\Form\Mvc\Persistence {
    /**
     * Concrete implementation of the FormPersistenceManagerInterface
     *
     * Scope: frontend / backend
     */
    class FormPersistenceManager implements \typo3\cms\form\mvc\persistence\formpersistencemanagerinterface {
        /**
         * @var \TYPO3\CMS\Form\Mvc\Configuration\YamlSource
         */
        protected $yamlSource;
        /**
         * @var \TYPO3\CMS\Core\Resource\StorageRepository
         */
        protected $storageRepository;
        /**
         * @var array
         */
        protected $formSettings;

        public function injectYamlSource(\TYPO3\CMS\Form\Mvc\Configuration\YamlSource $yamlSource) {}
        public function injectStorageRepository(\TYPO3\CMS\Core\Resource\StorageRepository $storageRepository) {}
        /**
         * @internal
         */
        public function initializeObject() {}
        public function load(string $persistenceIdentifier) : array {}
        public function save(string $persistenceIdentifier, array $formDefinition) {}
        public function delete(string $persistenceIdentifier) {}
        public function exists(string $persistenceIdentifier) : bool {}
        /** @var \TYPO3\CMS\Core\Resource\Folder $folder */
        public function listForms() : array {}
        /**
         * Return a list of all accessible file mountpoints for the
         * current backend user.
         *
         * Only registered mountpoints from
         * TYPO3.CMS.Form.persistenceManager.allowedFileMounts
         * are listet.
         *
         * @return Folder[]
         * @internal
         */
        public function getAccessibleFormStorageFolders() : array {}
        /**
         * Return a list of all accessible extension folders
         *
         * Only registered mountpoints from
         * TYPO3.CMS.Form.persistenceManager.allowedExtensionPaths
         * are listet.
         *
         * @return array
         * @internal
         */
        public function getAccessibleExtensionFolders() : array {}
        public function getUniquePersistenceIdentifier(string $formIdentifier, string $savePath) : string {}
        public function getUniqueIdentifier(string $identifier) : string {}
        public function checkForDuplicateIdentifier(string $identifier) : bool {}
        protected function getFileByIdentifier(string $persistenceIdentifier) : File {}
        protected function getOrCreateFile(string $persistenceIdentifier) : File {}
        protected function getStorageByUid(int $storageUid) : ResourceStorage {}
    }

    /**
     * A generic Form persistence Exception
     *
     * @internal
     */
    class Exception extends \typo3\cms\form\exception {}


    /**
     * The form persistence manager interface
     *
     * Scope: frontend / backend
     */
    interface FormPersistenceManagerInterface {
        function load(string $persistenceIdentifier) : array ;
        function save(string $persistenceIdentifier, array $formDefinition) ;
        function exists(string $persistenceIdentifier) : bool ;
        function delete(string $persistenceIdentifier) ;
        /**
         * List all form definitions which can be loaded through this form persistence
         * manager.
         *
         * Returns an associative array with each item containing the keys 'name' (the human-readable name of the form)
         * and 'persistenceIdentifier' (the unique identifier for the Form Persistence Manager e.g. the path to the saved form definition).
         *
         * @return array in the format [['name' => 'Form 01', 'persistenceIdentifier' => 'path1'], [ .... ]]
         * @api
         */
        function listForms() : array ;
        /**
         * Return a list of all accessible file mount points
         *
         * @return Folder[]
         * @api
         */
        function getAccessibleFormStorageFolders() : array ;
        /**
         * Return a list of all accessible extension folders
         *
         * @return array
         * @api
         */
        function getAccessibleExtensionFolders() : array ;
        function getUniquePersistenceIdentifier(string $formIdentifier, string $savePath) : string ;
        function checkForDuplicateIdentifier(string $identifier) : bool ;
    }

}

namespace TYPO3\CMS\Form\Mvc\Persistence\Exception {
    /**
     * @internal
     */
    class NoUniquePersistenceIdentifierException extends \typo3\cms\form\mvc\persistence\exception {}

    /**
     * @internal
     */
    class NoUniqueIdentifierException extends \typo3\cms\form\mvc\persistence\exception {}

    /**
     * Generic Persistence Manager Exception, to be thrown f.e. if a given form is not loadable
     *
     * @internal
     */
    class PersistenceManagerException extends \typo3\cms\form\mvc\persistence\exception {}

}

namespace TYPO3\CMS\Form\Mvc\Validation {
    /**
     * Validator for countable types
     *
     * Scope: frontend
     * @internal
     */
    class FileSizeValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        public function isValid($resource) {}
        /**
         * Checks if this validator is correctly configured
         *
         * @throws InvalidValidationOptionsException if the configured validation options are incorrect
         */
        protected function validateOptions() {}
    }

    /**
     * Validator for empty values.
     *
     * Scope: frontend
     * @api
     */
    class EmptyValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * This validator always needs to be executed even if the given value is empty.
         * See AbstractValidator::validate()
         *
         * @var bool
         */
        protected $acceptsEmptyValues;

        public function isValid($value) {}
    }

    /**
     * Validator for mime types
     *
     * Scope: frontend
     * @api
     */
    class MimeTypeValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        public function isValid($resource) {}
        /**
         * Checks if this validator is correctly configured
         *
         * @throws InvalidValidationOptionsException if the configured validation options are incorrect
         */
        protected function validateOptions() {}
    }

    /**
     * Validator for countable types
     *
     * Scope: frontend
     * @internal
     */
    class CountValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        /**
         * @var array
         */
        protected $supportedOptions;

        public function isValid($value) {}
    }

}

namespace TYPO3\CMS\Form\Mvc\Validation\Exception {
    /**
     * @api
     */
    class InvalidValidationOptionsException extends \typo3\cms\form\exception {}

}

namespace TYPO3\CMS\Form\Property\TypeConverter {
    /**
     * Converter for form definition arrays
     *
     * @internal
     */
    class FormDefinitionArrayConverter extends \typo3\cms\extbase\property\typeconverter\abstracttypeconverter {
        /**
         * @var array<string>
         */
        protected $sourceTypes;
        /**
         * @var string
         */
        protected $targetType;
        /**
         * @var int
         */
        protected $priority;

        public function convertFrom($source, $targetType, array $convertedChildProperties = [ ], PropertyMappingConfigurationInterface $configuration = null) {}
        protected function convertJsonArrayToAssociativeArray(array $input) : array {}
    }

}

namespace TYPO3\CMS\Form\ViewHelpers {
    /**
     * Translate form element properites.
     *
     * Scope: frontend / backend
     * @api
     */
    class TranslateElementErrorViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
/** @var FormRuntime $formRuntime */
        public static function renderStatic(/** @var FormRuntime $formRuntime */
array $arguments, /** @var FormRuntime $formRuntime */
\Closure $renderChildrenClosure, /** @var FormRuntime $formRuntime */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Scope: frontend
     * @api
     */
    class GridColumnClassAutoConfigurationViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize the arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Main Entry Point to render a Form into a Fluid Template
     *
     * Usage
     * =====
     *
     * <pre>
     * {namespace formvh=TYPO3\CMS\Form\ViewHelpers}
     * <formvh:render factoryClass="NameOfYourCustomFactoryClass" />
     * </pre>
     *
     * The factory class must implement {@link TYPO3\CMS\Form\Domain\Factory\FormFactoryInterface}.
     *
     * Scope: frontend
     * @api
     */
    class RenderViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize the arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Render a renderable.
     *
     * Set the renderable into the \TYPO3\CMS\Form\Mvc\View\FormView
     * and return the rendered content.
     *
     * Scope: frontend
     * @api
     */
    class RenderRenderableViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize the arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
/** @var FormRuntime $formRuntime */
        public static function renderStatic(/** @var FormRuntime $formRuntime */
array $arguments, /** @var FormRuntime $formRuntime */
\Closure $renderChildrenClosure, /** @var FormRuntime $formRuntime */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Custom form ViewHelper that renders the form state instead of referrer fields
     *
     * Scope: frontend
     * @api
     */
    class FormViewHelper extends \typo3\cms\fluid\viewhelpers\formviewhelper {
        /**
         * Renders hidden form fields for referrer information about
         * the current request.
         *
         * @return string Hidden fields with referrer information
         */
        protected function renderHiddenReferrerFields() {}
        /**
         * We do NOT return NULL as in this case, the Form ViewHelpers do not enter $objectAccessorMode.
         * However, we return the form identifier.
         *
         * @return string
         */
        protected function getFormObjectName() {}
    }

    /**
     * Translate form element properites.
     *
     * Scope: frontend / backend
     * @api
     */
    class TranslateElementPropertyViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
/** @var FormRuntime $formRuntime */
        public static function renderStatic(/** @var FormRuntime $formRuntime */
array $arguments, /** @var FormRuntime $formRuntime */
\Closure $renderChildrenClosure, /** @var FormRuntime $formRuntime */
RenderingContextInterface $renderingContext) {}
        protected static function assertArgumentTypes(array $arguments) {}
    }

    /**
     * Renders the values of a form
     *
     * Scope: frontend
     * @api
     */
    class RenderAllFormValuesViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize the arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        public static function processElementValue(FormElementInterface $element, $value, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        public static function mapValuesToOptions(array $value, array $options) : array {}
        public static function mapValueToOption($value, array $options) {}
        public static function processObject(FormElementInterface $element, $object) : string {}
    }

}

namespace TYPO3\CMS\Form\ViewHelpers\Form {
    /**
     * Display a jQuery date picker.
     *
     * Note: Requires jQuery UI to be included on the page.
     *
     * Scope: frontend
     * @api
     */
    class DatePickerViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMapper
         */
        protected $propertyMapper;

        public function injectPropertyMapper(\TYPO3\CMS\Extbase\Property\PropertyMapper $propertyMapper) {}
        /**
         * Initialize the arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the text field, hidden field and required javascript
         *
         * @return string
         * @api
         */
        public function render() {}
        /** @var FormRuntime $formRuntime */
        protected function getSelectedDate() {}
        protected function convertDateFormatToDatePickerFormat(string $dateFormat) : string {}
        protected function renderInlineJavascript(string $uniqueIdentifier, string $datePickerDateFormat) {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() : PageRenderer {}
    }

    /**
     * Displays two select-boxes for hour and minute selection.
     *
     * Scope: frontend
     * @api
     */
    class TimePickerViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMapper
         */
        protected $propertyMapper;

        public function injectPropertyMapper(\TYPO3\CMS\Extbase\Property\PropertyMapper $propertyMapper) {}
        /**
         * Initialize the arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
        /**
         * Renders the select fields for hour & minute
         *
         * @return string
         * @api
         */
        public function render() {}
        /** @var FormRuntime $formRuntime */
        protected function getSelectedDate() {}
        protected function buildHourSelector(\DateTime $date = null) : string {}
        protected function buildMinuteSelector(\DateTime $date = null) : string {}
    }

    /**
     * This ViewHelper makes the specified Image object available for its
     * childNodes.
     * In case the form is redisplayed because of validation errors, a previously
     * uploaded image will be correctly used.
     *
     * Scope: frontend
     * @api
     */
    class UploadedResourceViewHelper extends \typo3\cms\fluid\viewhelpers\form\uploadviewhelper {
        /**
         * @var HashService
         */
        protected $hashService;
        /**
         * @var \TYPO3\CMS\Extbase\Property\PropertyMapper
         */
        protected $propertyMapper;

        public function injectHashService(\TYPO3\CMS\Extbase\Security\Cryptography\HashService $hashService) {}
        public function injectPropertyMapper(\TYPO3\CMS\Extbase\Property\PropertyMapper $propertyMapper) {}
        /**
         * Initialize the arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
        /**
         * @return string
         * @api
         */
        public function render() {}
        /**
         * Return a previously uploaded resource.
         * Return NULL if errors occurred during property mapping for this property.
         *
         * @return FileReference|null
         */
        protected function getUploadedResource() {}
    }

}

namespace TYPO3\CMS\Form\ViewHelpers\Be {
    /**
     * Used by the form editor.
     * Render a content element preview like the page module
     *
     * Scope: backend
     * @internal
     */
    class RenderContentElementPreviewViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @internal
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Form\Controller {
    /**
     * The form manager controller
     *
     * Scope: backend
     */
    class FormManagerController extends \typo3\cms\form\controller\abstractbackendcontroller {
        /**
         * Default View Container
         *
         * @var BackendTemplateView
         */
        protected $defaultViewObjectName;

        /**
         * Displays the Form Manager
         *
         * @internal
         */
        public function indexAction() {}
        /**
         * Initialize the create action.
         * This action uses the Fluid JsonView::class as view.
         *
         * @internal
         */
        public function initializeCreateAction() {}
        public function createAction(string $formName, string $templatePath, string $prototypeName, string $savePath) {}
        /**
         * Initialize the duplicate action.
         * This action uses the Fluid JsonView::class as view.
         *
         * @internal
         */
        public function initializeDuplicateAction() {}
        public function duplicateAction(string $formName, string $formPersistenceIdentifier, string $savePath) {}
        /**
         * Initialize the references action.
         * This action uses the Fluid JsonView::class as view.
         *
         * @internal
         */
        public function initializeReferencesAction() {}
        public function referencesAction(string $formPersistenceIdentifier) {}
        public function deleteAction(string $formPersistenceIdentifier) {}
        /**
         * Return a list of all accessible file mountpoints.
         *
         * Only registered mountpoints from
         * TYPO3.CMS.Form.persistenceManager.allowedFileMounts
         * are listet. This is list will be reduced by the configured
         * mountpoints for the current backend user.
         *
         * @return array
         */
        protected function getAccessibleFormStorageFolders() : array {}
        /**
         * Returns the json encoded data which is used by the form editor
         * JavaScript app.
         *
         * @return string
         */
        protected function getFormManagerAppInitialData() : string {}
        /**
         * List all formDefinitions which can be loaded through t form persistence
         * manager. Enrich this data by a reference counter.
         * @return array
         */
        protected function getAvailableFormDefinitions() : array {}
        protected function getProcessedReferencesRows(string $persistenceIdentifier) : array {}
        protected function getReferences(string $persistenceIdentifier) : array {}
        protected function isValidTemplatePath(string $prototypeName, string $templatePath) : bool {}
        /** @var ButtonBar $buttonBar */
        protected function registerDocheaderButtons() {}
        protected function convertFormNameToIdentifier(string $formName) : string {}
        protected function getRecord(string $table, int $uid) {}
        protected function getRecordTitle(string $table, array $row, bool $prep = false) : string {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function getModuleUrl(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
string $moduleName, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $urlParameters = [ ]) : string {}
        /**
         * Returns the current BE user.
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() : BackendUserAuthentication {}
        /**
         * Returns the Language Service
         *
         * @return LanguageService
         */
        protected function getLanguageService() : LanguageService {}
        /**
         * Returns the page renderer
         *
         * @return PageRenderer
         */
        protected function getPageRenderer() : PageRenderer {}
    }

    /**
     * The abstract form backend controller
     *
     * Scope: backend
     */
    abstract class AbstractBackendController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var array
         */
        protected $formSettings;
        /**
         * @var \TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManagerInterface
         */
        protected $formPersistenceManager;

        public function injectFormPersistenceManager(\TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManagerInterface $formPersistenceManager) {}
        /**
         * @internal
         */
        public function initializeObject() {}
        protected function resolveResourcePaths(array $resourcePaths) : array {}
    }

    /**
     * The form editor controller
     *
     * Scope: backend
     */
    class FormEditorController extends \typo3\cms\form\controller\abstractbackendcontroller {
        /**
         * Default View Container
         *
         * @var BackendTemplateView
         */
        protected $defaultViewObjectName;
        /**
         * @var array
         */
        protected $prototypeConfiguration;

/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function indexAction(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
string $formPersistenceIdentifier, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
string $prototypeName = null) {}
        /**
         * Initialize the save action.
         * This action uses the Fluid JsonView::class as view.
         *
         * @internal
         */
        public function initializeSaveFormAction() {}
        public function saveFormAction(string $formPersistenceIdentifier, FormDefinitionArray $formDefinition) {}
        public function renderFormPageAction(FormDefinitionArray $formDefinition, int $pageIndex, string $prototypeName = null) : string {}
        protected function getInsertRenderablesPanelConfiguration(array $formElementsDefinition) : array {}
        /**
         * Reduce the YAML settings by the 'formEditor' keyword.
         *
         * @return array
         */
        protected function getFormEditorDefinitions() : array {}
        /**
         * Registers the Icons into the docheader
         *
         * @throws \InvalidArgumentException
         */
        protected function registerDocheaderButtons() {}
        protected function renderFormEditorTemplates(array $formEditorDefinitions) : string {}
        /**
         * Returns the current BE user.
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() : BackendUserAuthentication {}
        /**
         * Returns the language service
         *
         * @return LanguageService
         */
        protected function getLanguageService() : LanguageService {}
    }

    /**
     * The frontend controller
     *
     * Scope: frontend
     */
    class FormFrontendController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var \TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManagerInterface
         */
        protected $formPersistenceManager;

        public function injectFormPersistenceManager(\TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManagerInterface $formPersistenceManager) {}
        /**
         * Take the form which should be rendered from the plugin settings
         * and overlay the formDefinition with additional data from
         * flexform and typoscript settings.
         * This method is used directly to display the first page from the
         * formDefinition because its cached.
         *
         * @internal
         */
        public function renderAction() {}
        /**
         * This method is used to display all pages / finishers except the
         * first page because its non cached.
         *
         * @internal
         */
        public function performAction() {}
        protected function overrideByFlexFormSettings(array $formDefinition) : array {}
        protected function overrideByTypoScriptSettings(array $formDefinition) : array {}
    }

}

namespace TYPO3\CMS\Form\Type {
    /**
     * Wrapper for basic form definition arrays
     */
    class FormDefinitionArray extends \arrayobject {}

}

namespace TYPO3\CMS\Form\Hooks {
    /**
     * Register new referenced formDefinitions within a plugin as a soft reference.
     *
     * This is used in BE to track how often a specific form is used in a content
     * element. The number is shown in the form module "Manage forms".
     *
     * Scope: backend
     * @internal
     */
    class SoftReferenceParserHook extends \typo3\cms\core\database\softreferenceindex {
        public function findRef($table, $field, $uid, $content, $spKey, $spParams, $structurePath = '') {}
    }

    /**
     * Contains a preview rendering for the page module of CType="form_formframework"
     */
    class FormPagePreviewRenderer implements \typo3\cms\backend\view\pagelayoutviewdrawitemhookinterface {
        const L10N_PREFIX = 'LLL:EXT:form/Resources/Private/Language/Database.xlf:';

        public function preProcess(\TYPO3\CMS\Backend\View\PageLayoutView $parentObject, $drawItem, $headerContent, $itemContent, array $row) {}
        protected function addInvalidFrameworkConfigurationFlashMessage(\Exception $e) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() : LanguageService {}
    }

    /**
     * Hooks into flex form handling of backend for tt_content form elements:
     *
     * * Adds existing forms to flex form drop down list
     * * Adds finisher settings if "override finishers" is active
     *
     * Scope: backend
     * @internal
     */
    class DataStructureIdentifierHook {
        const L10N_PREFIX = 'LLL:EXT:form/Resources/Private/Language/Database.xlf:';

        public function getDataStructureIdentifierPostProcess(array $fieldTca, string $tableName, string $fieldName, array $row, array $identifier) : array {}
        public function parseDataStructureByIdentifierPostProcess(array $dataStructure, array $identifier) : array {}
        protected function getAdditionalFinisherSheets(string $persistenceIdentifier, array $formDefinition) : array {}
        protected function initializeNewSheetArray(string $sheetIdentifier, string $finisherName) : array {}
        protected function implodeArrayKeys(array $nestedArray) : string {}
        protected function addSelectedPersistenceIdentifier(string $persistenceIdentifier, array $dataStructure) : array {}
        protected function addInvalidFrameworkConfigurationFlashMessage(\Exception $e) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() : LanguageService {}
    }

    /**
     * Scope: frontend
     * @internal
     */
    class FormElementsOnSubmitHooks {
        public function afterSubmit(FormRuntime $formRuntime, RenderableInterface $renderable, $elementValue, array $requestArguments = [ ]) {}
    }

}

namespace TYPO3\CMS\Form\Service {
    /**
     * Advanced translations
     * This class is subjected to change.
     * **Do NOT subclass**
     *
     * Scope: frontend / backend
     * @internal
     */
    class TranslationService implements \typo3\cms\core\singletoninterface {
        /**
         * Local Language content
         *
         * @var array
         */
        protected $LOCAL_LANG;
        /**
         * Contains those LL keys, which have been set to (empty) in TypoScript.
         * This is necessary, as we cannot distinguish between a nonexisting
         * translation and a label that has been cleared by TS.
         * In both cases ['key'][0]['target'] is "".
         *
         * @var array
         */
        protected $LOCAL_LANG_UNSET;
        /**
         * Key of the language to use
         *
         * @var string
         */
        protected $languageKey;
        /**
         * Pointer to alternative fall-back language to use
         *
         * @var array
         */
        protected $alternativeLanguageKeys;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;

        /**
         * Return TranslationService as singleton
         *
         * @return TranslationService
         * @internal
         */
        public static function getInstance() {}
        public function translate($key, array $arguments = null, string $locallangPathAndFilename = null, string $language = null, $defaultValue = '') {}
        public function translateValuesRecursive(array $array, $translationFile = null) : array {}
        public function translateFinisherOption(FormRuntime $formRuntime, string $finisherIdentifier, string $optionKey, string $optionValue, array $renderingOptions = [ ]) : string {}
        public function translateFormElementValue(RootRenderableInterface $element, array $propertyParts, FormRuntime $formRuntime) {}
        public function translateFormElementError(RootRenderableInterface $element, int $code, array $arguments, string $defaultValue = '', FormRuntime $formRuntime) : string {}
        public function setLanguage(string $languageKey) {}
        /**
         * @return string
         * @internal
         */
        public function getLanguage() : string {}
        protected function processTranslationChain(array $translationKeyChain, string $language = null, array $arguments = null) {}
/** @var $languageFactory LocalizationFactory */
        protected function initializeLocalization(/** @var $languageFactory LocalizationFactory */
string $locallangPathAndFilename) {}
        /** @var $locales \TYPO3\CMS\Core\Localization\Locales */
        protected function setLanguageKeys() {}
        /**
         * Overwrites labels that are set via TypoScript.
         * TS locallang labels have to be configured like:
         * plugin.tx_form._LOCAL_LANG.languageKey.key = value
         */
        protected function loadTypoScriptLabels() {}
        protected function flattenTypoScriptLabelArray(array $labelValues, string $parentKey = '') : array {}
        protected function sortArrayWithIntegerKeysDescending(array $array) {}
        /**
         * Returns instance of the configuration manager
         *
         * @return ConfigurationManagerInterface
         */
        protected function getConfigurationManager() : ConfigurationManagerInterface {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() : LanguageService {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() : TypoScriptFrontendController {}
    }

}

namespace TYPO3\CMS\Form\Domain {
    /**
     * A generic Form domain Exception
     *
     * @api
     */
    class Exception extends \typo3\cms\form\exception {}

}

namespace TYPO3\CMS\Form\Domain\Configuration {
    /**
     * Helper for configuration settings
     *
     * Scope: frontend / backend
     */
    class ConfigurationService {
        /**
         * @var array
         */
        protected $formSettings;

        /**
         * @internal
         */
        public function initializeObject() {}
        public function getPrototypeConfiguration(string $prototypeName) : array {}
    }

}

namespace TYPO3\CMS\Form\Domain\Configuration\Exception {
    /**
     * This exception is thrown if a form prototype for a given name was not found.
     *
     * @api
     */
    class PrototypeNotFoundException extends \typo3\cms\form\domain\exception {}

}

namespace TYPO3\CMS\Form\Domain\Renderer {
    /**
     * Abstract renderer which can be used as base class for custom renderers.
     *
     * Scope: frontend
     * **This class is meant to be sub classed by developers**.
     * @api
     */
    abstract class AbstractElementRenderer implements \typo3\cms\form\domain\renderer\rendererinterface {
        /**
         * The assigned controller context which might be needed by the renderer.
         *
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         * @api
         */
        protected $controllerContext;
        /**
         * @var \TYPO3\CMS\Form\Domain\Runtime\FormRuntime
         * @api
         */
        protected $formRuntime;

        public function setControllerContext(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
        public function setFormRuntime(FormRuntime $formRuntime) {}
        /**
         * @return FormRuntime
         * @api
         */
        public function getFormRuntime() : FormRuntime {}
    }

    /**
     * A fluid RendererInterface implementation which used to render a *FormDefinition*.
     *
     * This renderer is called from {@link \TYPO3\CMS\Form\Domain\Runtime\FormRuntime::render()}.
     *
     * Options
     * =======
     *
     * The FluidFormRenderer uses some rendering options which are of particular
     * importance, as they determine how the form field is resolved to a path
     * in the file system.
     *
     * All rendering options are retrieved from the FormDefinition,
     * using the {@link \TYPO3\CMS\Form\Domain\Model\FormDefinition::getRenderingOptions()}
     * method.
     *
     * templateRootPaths
     * -----------------
     *
     * Used to define several paths for templates, which will be tried in reversed
     * order (the paths are searched from bottom to top). The first folder where
     * the desired layout is found, is used. If the array keys are numeric,
     * they are first sorted and then tried in reversed order.
     * Within this paths, fluid will search for a file which is named like the
     * renderable *type*.
     * For example:
     *   templateRootPaths.10 = EXT:form/Resources/Private/Frontend/Templates/
     *   $renderable->getType() = Form
     *   Expected template file: EXT:form/Resources/Private/Frontend/Templates/Form.html
     * There is a setting available to set a custom template name. Please read
     * the section 'templateName'.
     *
     * Only the root renderable (FormDefinition) has to be a template file.
     * All child renderables are partials. By default, the root renderable
     * is called 'Form'.
     *
     * layoutRootPaths
     * ---------------
     *
     * Used to define several paths for layouts, which will be tried in reversed
     * order (the paths are searched from bottom to top). The first folder where
     * the desired layout is found, is used. If the array keys are numeric,
     * they are first sorted and then tried in reversed order.
     *
     * partialRootPaths
     * ----------------
     *
     * Used to define several paths for partials, which will be tried in reversed
     * order. The first folder where the desired partial is found, is used.
     * The keys of the array define the order.
     *
     * Within this paths, fluid will search for a file which is named like the
     * renderable *type*.
     * For example:
     *   templateRootPaths.10 = EXT:form/Resources/Private/Frontend/Partials/
     *   $renderable->getType() = Text
     *   Expected template file: EXT:form/Resources/Private/Frontend/Partials/Text.html
     * There is a setting available to set a custom partial name. Please read
     * the section 'templateName'.
     *
     * templateName
     * -----------
     * By default, the renderable type will be taken as the name for the
     * template / partial.
     * For example:
     *   partialRootPaths.10 = EXT:form/Resources/Private/Frontend/Partials/
     *   $renderable->getType() = Text
     *   Expected partial file: EXT:form/Resources/Private/Frontend/Partials/Text.html
     *
     * Set 'templateName' to define a custom name which should be used instead.
     * For example:
     *   templateName = Foo
     *   $renderable->getType() = Text
     *   Expected partial file: EXT:form/Resources/Private/Frontend/Partials/Foo.html
     *
     * Rendering Child Renderables
     * ===========================
     *
     * If a renderable wants to render child renderables, inside its template / partial,
     * it can do that using the <code><formvh:renderRenderable></code> ViewHelper.
     *
     * A template example from Page shall demonstrate this:
     *
     * <pre>
     *   <formvh:renderRenderable renderable="{page}">
     *       <f:for each="{page.elements}" as="element">
     *           <formvh:renderRenderable renderable="{element}">
     *               <f:render partial="{element.templateName}" arguments="{element: element}" />
     *           </formvh:renderRenderable>
     *       </f:for>
     *   </formvh:renderRenderable>
     * </pre>
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     * @internal
     */
    class FluidFormRenderer extends \typo3\cms\form\domain\renderer\abstractelementrenderer implements \typo3\cms\form\domain\renderer\rendererinterface {
        /**
         * Renders the FormDefinition.
         *
         * This method is expected to call the 'beforeRendering' hook
         * on each renderable.
         * This method call the 'beforeRendering' hook initially.
         * Each other hooks will be called from the
         * renderRenderable viewHelper.
         * {@link \TYPO3\CMS\Form\ViewHelpers\RenderRenderableViewHelper::renderStatic()}
         *
         * @return string the rendered $formRuntime
         * @internal
         */
        public function render() : string {}
    }


    /**
     * Base interface for Renderers. A Renderer is used to render a form.
     *
     * Scope: frontend
     * **This interface is meant to be implemented by developers, although often you
     * will subclass AbstractElementRenderer** ({@link AbstractElementRenderer}).
     */
    interface RendererInterface {
        function setControllerContext(ControllerContext $controllerContext) ;
        /**
         * Note: This method is expected to call the 'beforeRendering' hook
         * on each $renderable
         *
         * @return string the rendered $formRuntime
         * @api
         */
        function render() : string ;
        function setFormRuntime(FormRuntime $formRuntime) ;
        /**
         * @return FormRuntime
         * @api
         */
        function getFormRuntime() : FormRuntime ;
    }

}

namespace TYPO3\CMS\Form\Domain\Runtime {
    /**
     * The current state of the form which is attached to the {@link FormRuntime}
     * and saved in a session or the client.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     * @internal
     */
    class FormState {
        const NOPAGE = -1;

        /**
         * The last displayed page index
         *
         * @var int
         */
        protected $lastDisplayedPageIndex;
        /**
         * @var array
         */
        protected $formValues;

        /**
         * @return bool FALSE if the form has never been submitted before, TRUE otherwise
         */
        public function isFormSubmitted() : bool {}
        /**
         * @return int
         */
        public function getLastDisplayedPageIndex() : int {}
        public function setLastDisplayedPageIndex(int $lastDisplayedPageIndex) {}
        /**
         * @return array
         */
        public function getFormValues() : array {}
        public function setFormValue(string $propertyPath, $value) {}
        public function getFormValue(string $propertyPath) {}
    }

    /**
     * This class implements the *runtime logic* of a form, i.e. deciding which
     * page is shown currently, what the current values of the form are, trigger
     * validation and property mapping.
     *
     * You generally receive an instance of this class by calling {@link \TYPO3\CMS\Form\Domain\Model\FormDefinition::bind}.
     *
     * Rendering a Form
     * ================
     *
     * That's easy, just call render() on the FormRuntime:
     *
     * /---code php
     * $form = $formDefinition->bind($request, $response);
     * $renderedForm = $form->render();
     * \---
     *
     * Accessing Form Values
     * =====================
     *
     * In order to get the values the user has entered into the form, you can access
     * this object like an array: If a form field with the identifier *firstName*
     * exists, you can do **$form['firstName']** to retrieve its current value.
     *
     * You can also set values in the same way.
     *
     * Rendering Internals
     * ===================
     *
     * The FormRuntime asks the FormDefinition about the configured Renderer
     * which should be used ({@link \TYPO3\CMS\Form\Domain\Model\FormDefinition::getRendererClassName}),
     * and then trigger render() on this Renderer.
     *
     * This makes it possible to declaratively define how a form should be rendered.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     * @api
     */
    class FormRuntime implements \arrayaccess, \typo3\cms\form\domain\model\renderable\rootrenderableinterface {
        const HONEYPOT_NAME_SESSION_IDENTIFIER = 'tx_form_honeypot_name_';

        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Form\Domain\Model\FormDefinition
         */
        protected $formDefinition;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Request
         */
        protected $request;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Response
         */
        protected $response;
        /**
         * @var \TYPO3\CMS\Form\Domain\Runtime\FormState
         */
        protected $formState;
        /**
         * The current page is the page which will be displayed to the user
         * during rendering.
         *
         * If $currentPage is NULL, the *last* page has been submitted and
         * finishing actions need to take place. You should use $this->isAfterLastPage()
         * instead of explicitely checking for NULL.
         *
         * @var \TYPO3\CMS\Form\Domain\Model\FormElements\Page
         */
        protected $currentPage;
        /**
         * Reference to the page which has been shown on the last request (i.e.
         * we have to handle the submitted data from lastDisplayedPage)
         *
         * @var \TYPO3\CMS\Form\Domain\Model\FormElements\Page
         */
        protected $lastDisplayedPage;
        /**
         * @var \TYPO3\CMS\Extbase\Security\Cryptography\HashService
         */
        protected $hashService;

        public function injectHashService(\TYPO3\CMS\Extbase\Security\Cryptography\HashService $hashService) {}
        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function __construct(FormDefinition $formDefinition, Request $request, Response $response) {}
        /**
         * @internal
         */
        public function initializeObject() {}
        /**
         * Initializes the current state of the form, based on the request
         */
        protected function initializeFormStateFromRequest() {}
        /**
         * Initializes the current page data based on the current request, also modifiable by a hook
         */
        protected function initializeCurrentPageFromRequest() {}
        /**
         * Checks if the honey pot is active, and adds a validator if so.
         */
        protected function initializeHoneypotFromRequest() {}
        /**
         * Renders a hidden field if the honey pot is active.
         */
        protected function renderHoneypot() {}
        protected function getHoneypotNameFromSession(Page $page) {}
        protected function setHoneypotNameInSession(Page $page, string $honeypotName) {}
        /**
         * Returns TRUE if the last page of the form has been submitted, otherwise FALSE
         *
         * @return bool
         */
        protected function isAfterLastPage() : bool {}
        /**
         * Returns TRUE if no previous page is stored in the FormState, otherwise FALSE
         *
         * @return bool
         */
        protected function isFirstRequest() : bool {}
        /**
         * Runs throuh all validations
         */
        protected function processSubmittedFormValues() {}
        /**
         * returns TRUE if the user went back to any previous step in the form.
         *
         * @return bool
         */
        protected function userWentBackToPreviousStep() : bool {}
        protected function mapAndValidatePage(Page $page) : Result {}
        public function overrideCurrentPage(int $pageIndex) {}
        /**
         * Render this form.
         *
         * @return string|null rendered form
         * @throws RenderingException
         * @api
         */
        public function render() {}
        /**
         * Executes all finishers of this form
         */
        protected function invokeFinishers() {}
        /**
         * @return string The identifier of underlying form
         * @api
         */
        public function getIdentifier() : string {}
        /**
         * Get the request this object is bound to.
         *
         * This is mostly relevant inside Finishers, where you f.e. want to redirect
         * the user to another page.
         *
         * @return Request the request this object is bound to
         * @api
         */
        public function getRequest() : Request {}
        /**
         * Get the response this object is bound to.
         *
         * This is mostly relevant inside Finishers, where you f.e. want to set response
         * headers or output content.
         *
         * @return Response the response this object is bound to
         * @api
         */
        public function getResponse() : Response {}
        /**
         * Returns the currently selected page
         *
         * @return Page
         * @api
         */
        public function getCurrentPage() : Page {}
        /**
         * Returns the previous page of the currently selected one or NULL if there is no previous page
         *
         * @return Page|null
         * @api
         */
        public function getPreviousPage() {}
        /**
         * Returns the next page of the currently selected one or NULL if there is no next page
         *
         * @return Page|null
         * @api
         */
        public function getNextPage() {}
        /**
         * @return ControllerContext
         */
        protected function getControllerContext() : ControllerContext {}
        /**
         * Abstract "type" of this Renderable. Is used during the rendering process
         * to determine the template file or the View PHP class being used to render
         * the particular element.
         *
         * @return string
         * @api
         */
        public function getType() : string {}
        public function offsetExists($identifier) {}
        public function offsetGet($identifier) {}
        public function offsetSet($identifier, $value) {}
        public function offsetUnset($identifier) {}
        public function getElementValue(string $identifier) {}
        /**
         * @return array<Page> The Form's pages in the correct order
         * @api
         */
        public function getPages() : array {}
        /**
         * @return FormState
         * @internal
         */
        public function getFormState() : FormState {}
        /**
         * Get all rendering options
         *
         * @return array associative array of rendering options
         * @api
         */
        public function getRenderingOptions() : array {}
        /**
         * Get the renderer class name to be used to display this renderable;
         * must implement RendererInterface
         *
         * @return string the renderer class name
         * @api
         */
        public function getRendererClassName() : string {}
        /**
         * Get the label which shall be displayed next to the form element
         *
         * @return string
         * @api
         */
        public function getLabel() : string {}
        /**
         * Get the template name of the renderable
         *
         * @return string
         * @api
         */
        public function getTemplateName() : string {}
        /**
         * Get the underlying form definition from the runtime
         *
         * @return FormDefinition
         * @api
         */
        public function getFormDefinition() : FormDefinition {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

}

namespace TYPO3\CMS\Form\Domain\Runtime\Exception {
    /**
     * This Exception is thrown in the FormRuntime if the PropertyMapper throws
     * a \TYPO3\CMS\Extbase\Property\Exception. It adds some more Information to
     * better understand why the PropertyMapper failed to map the properties
     *
     * @api
     */
    class PropertyMappingException extends \typo3\cms\form\domain\exception {}

}

namespace TYPO3\CMS\Form\Domain\Model {
    /**
     * This class encapsulates a complete *Form Definition*, with all of its pages,
     * form elements, validation rules which apply and finishers which should be
     * executed when the form is completely filled in.
     *
     * It is *not modified* when the form executes.
     *
     * The Anatomy Of A Form
     * =====================
     *
     * A FormDefinition consists of multiple *Page* ({@link Page}) objects. When a
     * form is displayed to the user, only one *Page* is visible at any given time,
     * and there is a navigation to go back and forth between the pages.
     *
     * A *Page* consists of multiple *FormElements* ({@link FormElementInterface}, {@link AbstractFormElement}),
     * which represent the input fields, textareas, checkboxes shown inside the page.
     *
     * *FormDefinition*, *Page* and *FormElement* have *identifier* properties, which
     * must be unique for each given type (i.e. it is allowed that the FormDefinition and
     * a FormElement have the *same* identifier, but two FormElements are not allowed to
     * have the same identifier.
     *
     * Simple Example
     * --------------
     *
     * Generally, you can create a FormDefinition manually by just calling the API
     * methods on it, or you use a *Form Definition Factory* to build the form from
     * another representation format such as YAML.
     *
     * /---code php
     * $formDefinition = $this->objectManager->get(FormDefinition::class, 'myForm');
     *
     * $page1 = $this->objectManager->get(Page::class, 'page1');
     * $formDefinition->addPage($page);
     *
     * $element1 = $this->objectManager->get(GenericFormElement::class, 'title', 'Textfield'); # the second argument is the type of the form element
     * $page1->addElement($element1);
     * \---
     *
     * Creating a Form, Using Abstract Form Element Types
     * =====================================================
     *
     * While you can use the {@link FormDefinition::addPage} or {@link Page::addElement}
     * methods and create the Page and FormElement objects manually, it is often better
     * to use the corresponding create* methods ({@link FormDefinition::createPage}
     * and {@link Page::createElement}), as you pass them an abstract *Form Element Type*
     * such as *Text* or *Page*, and the system **automatically
     * resolves the implementation class name and sets default values**.
     *
     * So the simple example from above should be rewritten as follows:
     *
     * /---code php
     * $prototypeConfiguration = []; // We'll talk about this later
     *
     * $formDefinition = $this->objectManager->get(FormDefinition::class, 'myForm', $prototypeConfiguration);
     * $page1 = $formDefinition->createPage('page1');
     * $element1 = $page1->addElement('title', 'Textfield');
     * \---
     *
     * Now, you might wonder how the system knows that the element *Textfield*
     * is implemented using a GenericFormElement: **This is configured in the $prototypeConfiguration**.
     *
     * To make the example from above actually work, we need to add some sensible
     * values to *$prototypeConfiguration*:
     *
     * <pre>
     * $prototypeConfiguration = [
     *   'formElementsDefinition' => [
     *     'Page' => [
     *       'implementationClassName' => 'TYPO3\CMS\Form\Domain\Model\FormElements\Page'
     *     ],
     *     'Textfield' => [
     *       'implementationClassName' => 'TYPO3\CMS\Form\Domain\Model\FormElements\GenericFormElement'
     *     ]
     *   ]
     * ]
     * </pre>
     *
     * For each abstract *Form Element Type* we add some configuration; in the above
     * case only the *implementation class name*. Still, it is possible to set defaults
     * for *all* configuration options of such an element, as the following example
     * shows:
     *
     * <pre>
     * $prototypeConfiguration = [
     *   'formElementsDefinition' => [
     *     'Page' => [
     *       'implementationClassName' => 'TYPO3\CMS\Form\Domain\Model\FormElements\Page',
     *       'label' => 'this is the label of the page if nothing is specified'
     *     ],
     *     'Textfield' => [
     *       'implementationClassName' => 'TYPO3\CMS\Form\Domain\Model\FormElements\GenericFormElement',
     *       'label' = >'Default Label',
     *       'defaultValue' => 'Default form element value',
     *       'properties' => [
     *         'placeholder' => 'Text which is shown if element is empty'
     *       ]
     *     ]
     *   ]
     * ]
     * </pre>
     *
     * Using Preconfigured $prototypeConfiguration
     * ---------------------------------
     *
     * Often, it is not really useful to manually create the $prototypeConfiguration array.
     *
     * Most of it comes pre-configured inside the YAML settings of the extensions,
     * and the {@link \TYPO3\CMS\Form\Domain\Configuration\ConfigurationService} contains helper methods
     * which return the ready-to-use *$prototypeConfiguration*.
     *
     * Property Mapping and Validation Rules
     * =====================================
     *
     * Besides Pages and FormElements, the FormDefinition can contain information
     * about the *format of the data* which is inputted into the form. This generally means:
     *
     * - expected Data Types
     * - Property Mapping Configuration to be used
     * - Validation Rules which should apply
     *
     * Background Info
     * ---------------
     * You might wonder why Data Types and Validation Rules are *not attached
     * to each FormElement itself*.
     *
     * If the form should create a *hierarchical output structure* such as a multi-
     * dimensional array or a PHP object, your expected data structure might look as follows:
     * <pre>
     * - person
     * -- firstName
     * -- lastName
     * -- address
     * --- street
     * --- city
     * </pre>
     *
     * Now, let's imagine you want to edit *person.address.street* and *person.address.city*,
     * but want to validate that the *combination* of *street* and *city* is valid
     * according to some address database.
     *
     * In this case, the form elements would be configured to fill *street* and *city*,
     * but the *validator* needs to be attached to the *compound object* *address*,
     * as both parts need to be validated together.
     *
     * Connecting FormElements to the output data structure
     * ====================================================
     *
     * The *identifier* of the *FormElement* is most important, as it determines
     * where in the output structure the value which is entered by the user is placed,
     * and thus also determines which validation rules need to apply.
     *
     * Using the above example, if you want to create a FormElement for the *street*,
     * you should use the identifier *person.address.street*.
     *
     * Rendering a FormDefinition
     * ==========================
     *
     * In order to trigger *rendering* on a FormDefinition,
     * the current {@link \TYPO3\CMS\Extbase\Mvc\Web\Request} needs to be bound to the FormDefinition,
     * resulting in a {@link \TYPO3\CMS\Form\Domain\Runtime\FormRuntime} object which contains the *Runtime State* of the form
     * (such as the currently inserted values).
     *
     * /---code php
     * # $currentRequest and $currentResponse need to be available, f.e. inside a controller you would
     * # use $this->request and $this->response; inside a ViewHelper you would use $this->controllerContext->getRequest()
     * # and $this->controllerContext->getResponse()
     * $form = $formDefinition->bind($currentRequest, $currentResponse);
     *
     * # now, you can use the $form object to get information about the currently
     * # entered values into the form, etc.
     * \---
     *
     * Refer to the {@link \TYPO3\CMS\Form\Domain\Runtime\FormRuntime} API doc for further information.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    class FormDefinition extends \typo3\cms\form\domain\model\renderable\abstractcompositerenderable {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * The finishers for this form
         *
         * @var \TYPO3\CMS\Form\Domain\Finishers\FinisherInterface[]
         */
        protected $finishers;
        /**
         * Property Mapping Rules, indexed by element identifier
         *
         * @var \TYPO3\CMS\Form\Mvc\ProcessingRule[]
         */
        protected $processingRules;
        /**
         * Contains all elements of the form, indexed by identifier.
         * Is used as internal cache as we need this really often.
         *
         * @var \TYPO3\CMS\Form\Domain\Model\FormElements\FormElementInterface[]
         */
        protected $elementsByIdentifier;
        /**
         * Form element default values in the format ['elementIdentifier' => 'default value']
         *
         * @var array
         */
        protected $elementDefaultValues;
        /**
         * Renderer class name to be used.
         *
         * @var string
         */
        protected $rendererClassName;
        /**
         * @var array
         */
        protected $typeDefinitions;
        /**
         * @var array
         */
        protected $validatorsDefinition;
        /**
         * @var array
         */
        protected $finishersDefinition;
        /**
         * The persistence identifier of the form
         *
         * @var string
         */
        protected $persistenceIdentifier;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function __construct(string $identifier, array $prototypeConfiguration = [ ], string $type = 'Form', string $persistenceIdentifier = null) {}
        /**
         * Initialize the form defaults of the current type
         *
         * @throws TypeDefinitionNotFoundException
         * @internal
         */
        protected function initializeFromFormDefaults() {}
        public function setOptions(array $options) {}
        public function createPage(string $identifier, string $typeName = 'Page') : Page {}
        public function addPage(Page $page) {}
        /**
         * Get the Form's pages
         *
         * @return array<Page> The Form's pages in the correct order
         * @api
         */
        public function getPages() : array {}
        public function hasPageWithIndex(int $index) : bool {}
        public function getPageByIndex(int $index) {}
        public function addFinisher(FinisherInterface $finisher) {}
        public function createFinisher(string $finisherIdentifier, array $options = [ ]) : FinisherInterface {}
        /**
         * Gets all finishers of this form
         *
         * @return \TYPO3\CMS\Form\Domain\Finishers\FinisherInterface[]
         * @api
         */
        public function getFinishers() : array {}
        public function registerRenderable(RenderableInterface $renderable) {}
        public function unregisterRenderable(RenderableInterface $renderable) {}
        public function getElementByIdentifier(string $elementIdentifier) {}
        public function addElementDefaultValue(string $elementIdentifier, $defaultValue) {}
        public function getElementDefaultValueByIdentifier(string $elementIdentifier) {}
        public function movePageBefore(Page $pageToMove, Page $referencePage) {}
        public function movePageAfter(Page $pageToMove, Page $referencePage) {}
        public function removePage(Page $pageToRemove) {}
        public function bind(Request $request, Response $response) : FormRuntime {}
        public function getProcessingRule(string $propertyPath) : ProcessingRule {}
        /**
         * Get all mapping rules
         *
         * @return \TYPO3\CMS\Form\Mvc\ProcessingRule[]
         * @internal
         */
        public function getProcessingRules() : array {}
        /**
         * @return array
         * @internal
         */
        public function getTypeDefinitions() : array {}
        /**
         * @return array
         * @internal
         */
        public function getValidatorsDefinition() : array {}
        /**
         * Get the persistence identifier of the form
         *
         * @return string
         * @internal
         */
        public function getPersistenceIdentifier() : string {}
        public function setRendererClassName(string $rendererClassName) {}
        /**
         * Get the classname of the renderer
         *
         * @return string
         * @api
         */
        public function getRendererClassName() : string {}
    }

    /**
     * A generic Form model Exception
     *
     * @api
     */
    class Exception extends \typo3\cms\form\domain\exception {}

}

namespace TYPO3\CMS\Form\Domain\Model\FormElements {
    /**
     * A base form element, which is the starting point for creating custom (PHP-based)
     * Form Elements.
     *
     * A *FormElement* is a part of a *Page*, which in turn is part of a FormDefinition.
     * See {@link FormDefinition} for an in-depth explanation.
     *
     * Subclassing this class is a good starting-point for implementing custom PHP-based
     * Form Elements.
     *
     * Most of the functionality and API is implemented in {@link \TYPO3\CMS\Form\Domain\Model\Renderable\AbstractRenderable}, so
     * make sure to check out this class as well.
     *
     * Still, it is quite rare that you need to subclass this class; often
     * you can just use the {@link \TYPO3\CMS\Form\Domain\Model\FormElements\GenericFormElement} and replace some templates.
     *
     * Scope: frontend
     * **This class is meant to be sub classed by developers.**
     */
    abstract class AbstractFormElement extends \typo3\cms\form\domain\model\renderable\abstractrenderable implements \typo3\cms\form\domain\model\formelements\formelementinterface {
        /**
         * @var array
         */
        protected $properties;

        public function __construct(string $identifier, string $type) {}
        /**
         * Override this method in your custom FormElements if needed
         *
         * @api
         */
        public function initializeFormElement() {}
        /**
         * Get the global unique identifier of the element
         *
         * @return string
         * @api
         */
        public function getUniqueIdentifier() : string {}
        /**
         * Get the default value of the element
         *
         * @return mixed
         * @api
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        /**
         * Check if the element is required
         *
         * @return bool
         * @api
         */
        public function isRequired() : bool {}
        public function setProperty(string $key, $value) {}
        /**
         * Get all properties
         *
         * @return array
         * @api
         */
        public function getProperties() : array {}
    }

    /**
     * A base class for "section-like" form parts like "Page" or "Section" (which
     * is rendered as "Fieldset")
     *
     * This class contains multiple FormElements ({@link FormElementInterface}).
     *
     * Please see {@link FormDefinition} for an in-depth explanation.
     *
     * **This class is NOT meant to be sub classed by developers.**
     * Scope: frontend
     */
    abstract class AbstractSection extends \typo3\cms\form\domain\model\renderable\abstractcompositerenderable {
        public function __construct(string $identifier, string $type) {}
        /**
         * Get the child Form Elements
         *
         * @return FormElementInterface[] The Page's elements
         * @api
         */
        public function getElements() : array {}
        /**
         * Get the child Form Elements
         *
         * @return FormElementInterface[] The Page's elements
         * @api
         */
        public function getElementsRecursively() : array {}
        public function addElement(FormElementInterface $formElement) {}
        public function createElement(string $identifier, string $typeName) : FormElementInterface {}
        public function moveElementBefore(FormElementInterface $elementToMove, FormElementInterface $referenceElement) {}
        public function moveElementAfter(FormElementInterface $elementToMove, FormElementInterface $referenceElement) {}
        public function removeElement(FormElementInterface $elementToRemove) {}
    }

    /**
     * A date picker form element
     *
     * Scope: frontend
     */
    class DatePicker extends \typo3\cms\form\domain\model\formelements\abstractformelement {
        /**
         * Initializes the Form Element by setting the data type to "DateTime"
         * @internal
         */
        public function initializeFormElement() {}
    }

    /**
     * A GridContainer, being part of a bigger Page
     *
     * This class contains multiple GridRow elements.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    class GridContainer extends \typo3\cms\form\domain\model\formelements\section implements \typo3\cms\form\domain\model\formelements\gridcontainerinterface {
        /**
         * Register this element at the parent form, if there is a connection to the parent form.
         *
         * @throws TypeDefinitionNotValidException
         * @internal
         */
        public function registerInFormIfPossible() {}
        public function addElement(FormElementInterface $formElement) {}
        public function createElement(string $identifier, string $typeName) : FormElementInterface {}
    }

    /**
     * A grid row, being part of a grid container
     *
     * This class contains multiple FormElements ({@link FormElementInterface}).
     *
     * Please see {@link FormDefinition} for an in-depth explanation.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    class GridRow extends \typo3\cms\form\domain\model\formelements\section implements \typo3\cms\form\domain\model\formelements\gridrowinterface {
        public function addElement(FormElementInterface $formElement) {}
        public function createElement(string $identifier, string $typeName) : FormElementInterface {}
    }

    /**
     * A Section, being part of a bigger Page
     *
     * This class contains multiple FormElements ({@link FormElementInterface}).
     *
     * Please see {@link FormDefinition} for an in-depth explanation.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    class Section extends \typo3\cms\form\domain\model\formelements\abstractsection implements \typo3\cms\form\domain\model\formelements\formelementinterface {
        /**
         * @var array
         */
        protected $properties;

        /**
         * Will be called as soon as the element is (tried to be) added to a form
         * @see registerInFormIfPossible()
         *
         * @internal
         */
        public function initializeFormElement() {}
        /**
         * Returns a unique identifier of this element.
         * While element identifiers are only unique within one form,
         * this includes the identifier of the form itself, making it "globally" unique
         *
         * @return string the "globally" unique identifier of this element
         * @api
         */
        public function getUniqueIdentifier() : string {}
        /**
         * Get the default value with which the Form Element should be initialized
         * during display.
         * Note: This is currently not used for section elements
         *
         * @return mixed the default value for this Form Element
         * @api
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        /**
         * Get all element-specific configuration properties
         *
         * @return array
         * @api
         */
        public function getProperties() : array {}
        public function setProperty(string $key, $value) {}
        public function setRenderingOption(string $key, $value) {}
        /**
         * Get all validators on the element
         *
         * @return \SplObjectStorage
         * @internal
         */
        public function getValidators() : \SplObjectStorage {}
        public function addValidator(ValidatorInterface $validator) {}
        /**
         * Whether or not this element is required
         *
         * @return bool
         * @api
         */
        public function isRequired() : bool {}
    }

    /**
     * A generic file upload form element
     *
     * Scope: frontend
     */
    class FileUpload extends \typo3\cms\form\domain\model\formelements\abstractformelement {
        /**
         * Initializes the Form Element by setting the data type to a Extbase File Reference
         * @internal
         */
        public function initializeFormElement() {}
    }

    /**
     * A generic form element
     *
     * Scope: frontend
     * @api
     */
    class GenericFormElement extends \typo3\cms\form\domain\model\formelements\abstractformelement {}

    /**
     * A Form Element that has no definition.
     *
     * Scope: frontend
     */
    class UnknownFormElement extends \typo3\cms\form\domain\model\renderable\abstractrenderable implements \typo3\cms\form\domain\model\formelements\formelementinterface {
        public function __construct(string $identifier, string $type) {}
        /**
         * @api
         */
        public function initializeFormElement() {}
        /**
         * Returns a unique identifier of this element.
         * While element identifiers are only unique within one form,
         * this includes the identifier of the form itself, making it "globally" unique
         *
         * @return string the "globally" unique identifier of this element
         * @api
         */
        public function getUniqueIdentifier() : string {}
        /**
         * Get the template name of the renderable
         *
         * @return string
         * @api
         */
        public function getTemplateName() : string {}
        /**
         * @return mixed the default value for this Form Element
         * @internal
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        public function setProperty(string $key, $value) {}
        /**
         * @return array
         * @internal
         */
        public function getProperties() : array {}
        /**
         * @return bool
         * @internal
         */
        public function isRequired() : bool {}
    }

    /**
     * A Page, being part of a bigger FormDefinition. It contains numerous FormElements
     * as children.
     *
     * A FormDefinition consists of multiple Pages, where only one page is visible
     * at any given time.
     *
     * Most of the API of this object is implemented in {@link AbstractSection},
     * so make sure to review this class as well.
     *
     * Please see {@link FormDefinition} for an in-depth explanation.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    class Page extends \typo3\cms\form\domain\model\formelements\abstractsection {
        public function __construct(string $identifier, string $type = 'Page') {}
        public function setParentRenderable(CompositeRenderableInterface $parentRenderable) {}
    }


    /**
     * Scope: frontend
     */
    interface GridRowInterface extends \typo3\cms\form\domain\model\formelements\formelementinterface {}

    /**
     * A base form element interface, which can be the starting point for creating
     * custom (PHP-based) Form Elements.
     *
     * A *FormElement* is a part of a *Page*, which in turn is part of a FormDefinition.
     * See {@link FormDefinition} for an in-depth explanation.
     *
     * **Often, you should rather subclass {@link AbstractFormElement} instead of
     * implementing this interface.**
     *
     * Scope: frontend
     */
    interface FormElementInterface extends \typo3\cms\form\domain\model\renderable\renderableinterface {
        /**
         * Will be called as soon as the element is (tried to be) added to a form
         * @see registerInFormIfPossible()
         *
         * @internal
         */
        function initializeFormElement() ;
        /**
         * Returns a unique identifier of this element.
         * While element identifiers are only unique within one form,
         * this includes the identifier of the form itself, making it "globally" unique
         *
         * @return string the "globally" unique identifier of this element
         * @api
         */
        function getUniqueIdentifier() : string ;
        /**
         * Get the default value with which the Form Element should be initialized
         * during display.
         *
         * @return mixed the default value for this Form Element
         * @api
         */
        function getDefaultValue() ;
        function setDefaultValue($defaultValue) ;
        function setProperty(string $key, $value) ;
        /**
         * Get all element-specific configuration properties
         *
         * @return array
         * @api
         */
        function getProperties() : array ;
        function setRenderingOption(string $key, $value) ;
        /**
         * Returns the child validators of the ConjunctionValidator that is registered for this element
         *
         * @return \SplObjectStorage<ValidatorInterface>
         * @internal
         */
        function getValidators() : \SplObjectStorage ;
        function addValidator(ValidatorInterface $validator) ;
        function setDataType(string $dataType) ;
        /**
         * Whether or not this element is required
         *
         * @return bool
         * @api
         */
        function isRequired() : bool ;
    }

    /**
     * Scope: frontend
     */
    interface GridContainerInterface extends \typo3\cms\form\domain\model\formelements\formelementinterface {}

}

namespace TYPO3\CMS\Form\Domain\Model\Renderable {
    /**
     * Convenience base class which implements common functionality for most
     * classes which implement CompositeRenderableInterface, i.e. have **child renderable elements**.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    abstract class AbstractCompositeRenderable extends \typo3\cms\form\domain\model\renderable\abstractrenderable implements \typo3\cms\form\domain\model\renderable\compositerenderableinterface {
        /**
         * array of child renderables
         *
         * @var \TYPO3\CMS\Form\Domain\Model\Renderable\RenderableInterface[]
         */
        protected $renderables;

        protected function addRenderable(RenderableInterface $renderable) {}
        protected function moveRenderableBefore(RenderableInterface $renderableToMove, RenderableInterface $referenceRenderable) {}
        protected function moveRenderableAfter(RenderableInterface $renderableToMove, RenderableInterface $referenceRenderable) {}
        /**
         * Returns all RenderableInterface instances of this composite renderable recursively
         *
         * @return RenderableInterface[]
         * @internal
         */
        public function getRenderablesRecursively() : array {}
        protected function removeRenderable(RenderableInterface $renderableToRemove) {}
        /**
         * Register this element at the parent form, if there is a connection to the parent form.
         *
         * @internal
         */
        public function registerInFormIfPossible() {}
        /**
         * This function is called after a renderable has been removed from its parent
         * renderable.
         * This just passes the event down to all child renderables of this composite renderable.
         *
         * @internal
         */
        public function onRemoveFromParentRenderable() {}
    }

    /**
     * Convenience base class which implements common functionality for most
     * classes which implement RenderableInterface.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     * @internal
     */
    abstract class AbstractRenderable implements \typo3\cms\form\domain\model\renderable\renderableinterface {
        /**
         * Abstract "type" of this Renderable. Is used during the rendering process
         * to determine the template file or the View PHP class being used to render
         * the particular element.
         *
         * @var string
         */
        protected $type;
        /**
         * The identifier of this renderable
         *
         * @var string
         */
        protected $identifier;
        /**
         * The parent renderable
         *
         * @var CompositeRenderableInterface
         */
        protected $parentRenderable;
        /**
         * The label of this renderable
         *
         * @var string
         */
        protected $label;
        /**
         * associative array of rendering options
         *
         * @var array
         */
        protected $renderingOptions;
        /**
         * The position of this renderable inside the parent renderable.
         *
         * @var int
         */
        protected $index;
        /**
         * The name of the template file of the renderable.
         *
         * @var string
         */
        protected $templateName;

        /**
         * Get the type of the renderable
         *
         * @return string
         * @api
         */
        public function getType() : string {}
        /**
         * Get the identifier of the element
         *
         * @return string
         * @api
         */
        public function getIdentifier() : string {}
        public function setIdentifier(string $identifier) {}
        public function setOptions(array $options) {}
        public function createValidator(string $validatorIdentifier, array $options = [ ]) {}
        public function addValidator(ValidatorInterface $validator) {}
        /**
         * Get all validators on the element
         *
         * @return \SplObjectStorage
         * @internal
         */
        public function getValidators() : \SplObjectStorage {}
        public function setDataType(string $dataType) {}
        /**
         * Get the classname of the renderer
         *
         * @return string
         * @api
         */
        public function getRendererClassName() : string {}
        /**
         * Get all rendering options
         *
         * @return array
         * @api
         */
        public function getRenderingOptions() : array {}
        public function setRenderingOption(string $key, $value) {}
        /**
         * Get the parent renderable
         *
         * @return CompositeRenderableInterface|null
         * @api
         */
        public function getParentRenderable() {}
        public function setParentRenderable(CompositeRenderableInterface $parentRenderable) {}
        /**
         * Get the root form this element belongs to
         *
         * @return FormDefinition
         * @throws FormDefinitionConsistencyException
         * @api
         */
        public function getRootForm() : FormDefinition {}
        /**
         * Register this element at the parent form, if there is a connection to the parent form.
         *
         * @internal
         */
        public function registerInFormIfPossible() {}
        /**
         * Triggered when the renderable is removed from it's parent
         *
         * @internal
         */
        public function onRemoveFromParentRenderable() {}
        /**
         * Get the index of the renderable
         *
         * @return int
         * @internal
         */
        public function getIndex() : int {}
        public function setIndex(int $index) {}
        /**
         * Get the label of the renderable
         *
         * @return string
         * @api
         */
        public function getLabel() : string {}
        public function setLabel(string $label) {}
        /**
         * Get the templateName name of the renderable
         *
         * @return string
         * @api
         */
        public function getTemplateName() : string {}
    }


    /**
     * Base interface which all parts of a form must adhere to.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    interface RootRenderableInterface {
        /**
         * Abstract "type" of this Renderable. Is used during the rendering process
         * to determine the template file or the View PHP class being used to render
         * the particular element.
         *
         * @return string
         * @api
         */
        function getType() : string ;
        /**
         * The identifier of this renderable
         *
         * @return string
         * @api
         */
        function getIdentifier() : string ;
        /**
         * Get the label which shall be displayed next to the form element
         *
         * @return string
         * @api
         */
        function getLabel() : string ;
        /**
         * Get the renderer class name to be used to display this form;
         * must implement RendererInterface
         *
         * @return string the renderer class name
         * @api
         */
        function getRendererClassName() : string ;
        /**
         * Get all rendering options
         *
         * @return array associative array of rendering options
         * @api
         */
        function getRenderingOptions() : array ;
    }

    /**
     * Interface which all Form Parts must adhere to **when they have sub elements**.
     * This includes especially "FormDefinition" and "Page".
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    interface CompositeRenderableInterface extends \typo3\cms\form\domain\model\renderable\renderableinterface {
        /**
         * Returns all RenderableInterface instances of this composite renderable recursively
         *
         * @return \TYPO3\CMS\Form\Domain\Model\Renderable\RenderableInterface[]
         * @internal
         */
        function getRenderablesRecursively() : array ;
    }

    /**
     * Base interface which all Form Parts except the FormDefinition must adhere
     * to (i.e. all elements which are NOT the root of a Form).
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     */
    interface RenderableInterface extends \typo3\cms\form\domain\model\renderable\rootrenderableinterface {
        /**
         * Return the parent renderable
         *
         * @return CompositeRenderableInterface|null the parent renderable
         * @internal
         */
        function getParentRenderable() ;
        function setParentRenderable(CompositeRenderableInterface $renderable) ;
        function setIndex(int $index) ;
        /**
         * Get the index inside the parent renderable
         *
         * @return int
         * @api
         */
        function getIndex() : int ;
        /**
         * This function is called after a renderable has been removed from its parent
         * renderable. The function should make sure to clean up the internal state,
         * like reseting $this->parentRenderable or deregistering the renderable
         * at the form.
         *
         * @internal
         */
        function onRemoveFromParentRenderable() ;
        /**
         * Register this element at the parent form, if there is a connection to the parent form.
         *
         * @internal
         */
        function registerInFormIfPossible() ;
        /**
         * Get the template name of the renderable
         *
         * @return string
         * @api
         */
        function getTemplateName() : string ;
    }

}

namespace TYPO3\CMS\Form\Domain\Model\Exception {
    /**
     * This exception is thrown if two Form Elements with the same Identifier are added
     * to a form.
     *
     * @api
     */
    class DuplicateFormElementException extends \typo3\cms\form\domain\model\exception {}

    /**
     * This exception is thrown if the form definition would get an inconsistent state, like
     * adding a page to two different forms
     *
     * @api
     */
    class FormDefinitionConsistencyException extends \typo3\cms\form\domain\model\exception {}

    /**
     * This exception is thrown if a Validator Preset was not found,
     * or if the implementationClassName was not set.
     *
     * @api
     */
    class ValidatorPresetNotFoundException extends \typo3\cms\form\domain\model\exception {}

    /**
     * This exception is thrown if a Finisher Preset was not found,
     * or if the implementationClassName was not set.
     *
     * @api
     */
    class FinisherPresetNotFoundException extends \typo3\cms\form\domain\model\exception {}

}

namespace TYPO3\CMS\Form\Domain\Finishers {
    /**
     * Store data for usage between the finishers.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     * @internal
     */
    final class FinisherVariableProvider implements \arrayaccess {
        /**
         * Two-dimensional object array storing the values. The first dimension is the finisher identifier,
         * and the second dimension is the identifier for the data the finisher wants to store.
         *
         * @var array
         */
        protected $objects;

        public function add(string $finisherIdentifier, string $key, $value) {}
        public function addOrUpdate(string $finisherIdentifier, string $key, $value) {}
        public function get(string $finisherIdentifier, string $key, $default = null) {}
        public function exists($finisherIdentifier, $key) : bool {}
        public function remove(string $finisherIdentifier, string $key) {}
        /**
         * Clean up for serializing.
         *
         * @return array
         */
        public function __sleep() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
    }

    /**
     * A simple finisher that outputs a given text
     *
     * Options:
     *
     * - message: A hard-coded message to be rendered
     *
     * Usage:
     * //...
     * $confirmationFinisher = $this->objectManager->get(ConfirmationFinisher::class);
     * $confirmationFinisher->setOptions(
     *   [
     *     'message' => 'foo',
     *   ]
     * );
     * $formDefinition->addFinisher($confirmationFinisher);
     * // ...
     *
     * Scope: frontend
     */
    class ConfirmationFinisher extends \typo3\cms\form\domain\finishers\abstractfinisher {
        /**
         * @var array
         */
        protected $defaultOptions;
        /**
         * @var array
         */
        protected $typoScriptSetup;
        /**
         * @var ConfigurationManagerInterface
         */
        protected $configurationManager;

        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function injectContentObjectRenderer(ContentObjectRenderer $contentObjectRenderer) {}
        /**
         * Executes this finisher
         * @see AbstractFinisher::execute()
         *
         * @throws FinisherException
         */
        protected function executeInternal() {}
    }

    /**
     * A simple finisher that invokes a closure when executed
     *
     * Usage:
     * //...
     * $closureFinisher = $this->objectManager->get(ClosureFinisher::class);
     * $closureFinisher->setOption('closure', function($finisherContext) {
     *   $formRuntime = $finisherContext->getFormRuntime();
     *   // ...
     * });
     * $formDefinition->addFinisher($closureFinisher);
     * // ...
     *
     * Scope: frontend
     */
    class ClosureFinisher extends \typo3\cms\form\domain\finishers\abstractfinisher {
        /**
         * @var array
         */
        protected $defaultOptions;

        /**
         * Executes this finisher
         * @see AbstractFinisher::execute()
         *
         * @throws FinisherException
         */
        protected function executeInternal() {}
    }

    /**
     * A simple finisher that adds a message to the FlashMessageContainer
     *
     * Usage:
     * //...
     * $flashMessageFinisher = $this->objectManager->get(FlashMessageFinisher::class);
     * $flashMessageFinisher->setOptions(
     *   [
     *     'messageBody' => 'Some message body',
     *     'messageTitle' => 'Some message title',
     *     'messageArguments' => ['foo' => 'bar'],
     *     'severity' => \TYPO3\CMS\Core\Messaging\AbstractMessage::ERROR
     *   ]
     * );
     * $formDefinition->addFinisher($flashMessageFinisher);
     * // ...
     *
     * Scope: frontend
     */
    class FlashMessageFinisher extends \typo3\cms\form\domain\finishers\abstractfinisher {
        /**
         * @var array
         */
        protected $defaultOptions;

        /**
         * Executes this finisher
         * @see AbstractFinisher::execute()
         *
         * @throws FinisherException
         */
        protected function executeInternal() {}
    }

    /**
     * This finisher remove the submited files.
     * Use this e.g after the email finisher if you don't want
     * to keep the files online.
     *
     * Scope: frontend
     */
    class DeleteUploadsFinisher extends \typo3\cms\form\domain\finishers\abstractfinisher {
        /**
         * Executes this finisher
         * @see AbstractFinisher::execute()
         */
        protected function executeInternal() {}
    }

    /**
     * The context that is passed to each finisher when executed.
     * It acts like an EventObject that is able to stop propagation.
     *
     * Scope: frontend
     * **This class is NOT meant to be sub classed by developers.**
     * @internal
     */
    class FinisherContext {
        /**
         * If TRUE further finishers won't be invoked
         *
         * @var bool
         */
        protected $cancelled;
        /**
         * A reference to the Form Runtime that the finisher belongs to
         *
         * @var \TYPO3\CMS\Form\Domain\Runtime\FormRuntime
         */
        protected $formRuntime;
        /**
         * The assigned controller context which might be needed by the finisher.
         *
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         */
        protected $controllerContext;
        /**
         * The assigned controller context which might be needed by the finisher.
         *
         * @var FinisherVariableProvider
         */
        protected $finisherVariableProvider;

        public function __construct(FormRuntime $formRuntime, ControllerContext $controllerContext) {}
        /**
         * @api
         */
        public function initializeObject() {}
        /**
         * Cancels the finisher invocation after the current finisher
         *
         * @api
         */
        public function cancel() {}
        /**
         * TRUE if no further finishers should be invoked. Defaults to FALSE
         *
         * @return bool
         * @internal
         */
        public function isCancelled() : bool {}
        /**
         * The Form Runtime that is associated with the current finisher
         *
         * @return FormRuntime
         * @api
         */
        public function getFormRuntime() : FormRuntime {}
        /**
         * The values of the submitted form (after validation and property mapping)
         *
         * @return array
         * @api
         */
        public function getFormValues() : array {}
        /**
         * @return ControllerContext
         * @api
         */
        public function getControllerContext() : ControllerContext {}
        /**
         * @return FinisherVariableProvider
         * @api
         */
        public function getFinisherVariableProvider() : FinisherVariableProvider {}
    }

    /**
     * This finisher redirects to another Controller.
     *
     * Scope: frontend
     */
    class RedirectFinisher extends \typo3\cms\form\domain\finishers\abstractfinisher {
        /**
         * @var array
         */
        protected $defaultOptions;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Request
         */
        protected $request;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Response
         */
        protected $response;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder
         */
        protected $uriBuilder;

        /**
         * Executes this finisher
         * @see AbstractFinisher::execute()
         */
        protected function executeInternal() {}
        protected function redirect(int $pageUid = 1, string $additionalParameters = '', int $delay = 0, int $statusCode = 303) {}
        protected function redirectToUri(string $uri, int $delay = 0, int $statusCode = 303) {}
        protected function addBaseUriIfNecessary(string $uri) : string {}
    }

    /**
     * Finisher base class.
     *
     * Scope: frontend
     * **This class is meant to be sub classed by developers**
     */
    abstract class AbstractFinisher implements \typo3\cms\form\domain\finishers\finisherinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var string
         */
        protected $finisherIdentifier;
        /**
         * @var string
         */
        protected $shortFinisherIdentifier;
        /**
         * The options which have been set from the outside. Instead of directly
         * accessing them, you should rather use parseOption().
         *
         * @var array
         */
        protected $options;
        /**
         * These are the default options of the finisher.
         * Override them in your concrete implementation.
         * Default options should not be changed from "outside"
         *
         * @var array
         */
        protected $defaultOptions;
        /**
         * @var \TYPO3\CMS\Form\Domain\Finishers\FinisherContext
         */
        protected $finisherContext;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function __construct(string $finisherIdentifier = '') {}
        public function setOptions(array $options) {}
        public function setOption(string $optionName, $optionValue) {}
        public function execute(FinisherContext $finisherContext) {}
        /**
         * This method is called in the concrete finisher whenever self::execute() is called.
         *
         * Override and fill with your own implementation!
         *
         * @api
         */
        abstract protected function executeInternal() ;
        protected function parseOption(string $optionName) {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

    /**
     * This finisher saves the data from a submitted form into
     * a database table.
     *
     * Configuration
     * =============
     *
     * options.table (mandatory)
     * -------------
     *   Save or update values into this table
     *
     * options.mode (default: insert)
     * ------------
     *   Possible values are 'insert' or 'update'.
     *
     *   insert: will create a new database row with the values from the
     *           submitted form and/or some predefined values.
     *           @see options.elements and options.databaseFieldMappings
     *   update: will update a given database row with the values from the
     *           submitted form and/or some predefined values.
     *           'options.whereClause' is then required.
     *
     * options.whereClause
     * -------------------
     *   This where clause will be used for an database update action
     *
     * options.elements
     * ----------------
     *   Use this to map form element values to existing database columns.
     *   Each key within options.elements has to match with a
     *   form element identifier within your form definition.
     *   The value for each key within options.elements is an array with
     *   additional informations.
     *
     * options.elements.<elementIdentifier>.mapOnDatabaseColumn (mandatory)
     * --------------------------------------------------------
     *   The value from the submitted form element with the identifier
     *   '<elementIdentifier>' will be written into this database column
     *
     * options.elements.<elementIdentifier>.skipIfValueIsEmpty (default: false)
     * ------------------------------------------------------
     *   Set this to true if the database column should not be written
     *   if the value from the submitted form element with the identifier
     *   '<elementIdentifier>' is empty (think about password fields etc.)
     *
     * options.elements.<elementIdentifier>.saveFileIdentifierInsteadOfUid (default: false)
     * -------------------------------------------------------------------
     *   This setting only rules for form elements which creates a FAL object
     *   like FileUpload or ImageUpload.
     *   By default, the uid of the FAL object will be written into
     *   the database column. Set this to true if you want to store the
     *   FAL identifier (1:/user_uploads/some_uploaded_pic.jpg) instead.
     *
     * options.databaseColumnMappings
     * ------------------------------
     *   Use this to map database columns to static values (which can be
     *   made dynamic through typoscript overrides of course).
     *   Each key within options.databaseColumnMappings has to match with a
     *   existing database column.
     *   The value for each key within options.databaseColumnMappings is an
     *   array with additional informations.
     *
     *   This mapping is done *before* the options.elements mapping.
     *   This means if you map a database column to a value through
     *   options.databaseColumnMappings and map a submitted form element
     *   value to the same database column, the submitted form element value
     *   will override the value you set within options.databaseColumnMappings.
     *
     * options.databaseColumnMappings.<databaseColumnName>.value
     * ---------------------------------------------------------
     *   The value which will be written to the database column.
     *   You can use the FormRuntime accessor feature to access every
     *   getable property from the TYPO3\CMS\Form\Domain\Runtime\FormRuntime
     *   Read the description within
     *   TYPO3\CMS\Form\Domain\Finishers\AbstractFinisher::parseOption
     *   In short: use something like {<elementIdentifier>} to get the value
     *   from the submitted form element with the identifier
     *   <elementIdentifier>
     *
     *   Don't be confused. If you use the FormRuntime accessor feature within
     *   options.databaseColumnMappings, the functionality is nearly equal
     *   to the the options.elements configuration.
     *
     * options.databaseColumnMappings.<databaseColumnName>.skipIfValueIsEmpty (default: false)
     * ---------------------------------------------------------------------
     *   Set this to true if the database column should not be written
     *   if the value from
     *   options.databaseColumnMappings.<databaseColumnName>.value is empty.
     *
     * Example
     * =======
     *
     *  finishers:
     *    -
     *      identifier: SaveToDatabase
     *      options:
     *        table: 'fe_users'
     *        mode: update
     *        whereClause:
     *          uid: 1
     *        databaseColumnMappings:
     *          pid:
     *            value: 1
     *        elements:
     *          text-1:
     *            mapOnDatabaseColumn: 'first_name'
     *          text-2:
     *            mapOnDatabaseColumn: 'last_name'
     *          text-3:
     *            mapOnDatabaseColumn: 'username'
     *          advancedpassword-1:
     *            mapOnDatabaseColumn: 'password'
     *            skipIfValueIsEmpty: true
     *
     * Multiple database operations
     * ============================
     *
     * You can write options as an array to perform multiple database oprtations.
     *
     *  finishers:
     *    -
     *      identifier: SaveToDatabase
     *      options:
     *        1:
     *          table: 'my_table'
     *          mode: insert
     *          databaseColumnMappings:
     *            some_column:
     *              value: 'cool'
     *        2:
     *          table: 'my_other_table'
     *          mode: update
     *          whereClause:
     *            pid: 1
     *          databaseColumnMappings:
     *            some_other_column:
     *              uid_foreign: '{SaveToDatabase.insertedUids.1}'
     *
     * This would perform 2 database operations.
     * One insert and one update.
     * You cann access the inserted uids with '{SaveToDatabase.insertedUids.<theArrayKeyNumberWithinOptions>}'
     * If you perform an insert operation, the value of the inserted database row will be stored
     * within the FinisherVariableProvider.
     * <theArrayKeyNumberWithinOptions> references to the numeric key within options
     * within which the insert operation is executed.
     *
     * Scope: frontend
     */
    class SaveToDatabaseFinisher extends \typo3\cms\form\domain\finishers\abstractfinisher {
        /**
         * @var array
         */
        protected $defaultOptions;
        /**
         * @var \TYPO3\CMS\Core\Database\Connection
         */
        protected $databaseConnection;

        /**
         * Executes this finisher
         * @see AbstractFinisher::execute()
         *
         * @throws FinisherException
         */
        protected function executeInternal() {}
        protected function prepareData(array $elementsConfiguration, array $databaseData) {}
        protected function process(int $iterationCount) {}
        protected function saveToDatabase(array $databaseData, string $table, int $iterationCount) {}
        /**
         * Throws an exception if some inconsistent configuration
         * are detected.
         *
         * @throws FinisherException
         */
        protected function throwExceptionOnInconsistentConfiguration() {}
        /**
         * Returns the values of the submitted form
         *
         * @return []
         */
        protected function getFormValues() : array {}
        protected function getElementByIdentifier(string $elementIdentifier) {}
    }

    /**
     * This finisher sends an email to one recipient
     *
     * Options:
     *
     * - templatePathAndFilename (mandatory): Template path and filename for the mail body
     * - layoutRootPath: root path for the layouts
     * - partialRootPath: root path for the partials
     * - variables: associative array of variables which are available inside the Fluid template
     *
     * The following options control the mail sending. In all of them, placeholders in the form
     * of {...} are replaced with the corresponding form value; i.e. {email} as recipientAddress
     * makes the recipient address configurable.
     *
     * - subject (mandatory): Subject of the email
     * - recipientAddress (mandatory): Email address of the recipient
     * - recipientName: Human-readable name of the recipient
     * - senderAddress (mandatory): Email address of the sender
     * - senderName: Human-readable name of the sender
     * - replyToAddress: Email address of to be used as reply-to email (use multiple addresses with an array)
     * - carbonCopyAddress: Email address of the copy recipient (use multiple addresses with an array)
     * - blindCarbonCopyAddress: Email address of the blind copy recipient (use multiple addresses with an array)
     * - format: format of the email (one of the FORMAT_* constants). By default mails are sent as HTML
     *
     * Scope: frontend
     */
    class EmailFinisher extends \typo3\cms\form\domain\finishers\abstractfinisher {
        const FORMAT_PLAINTEXT = 'plaintext';
        const FORMAT_HTML = 'html';

        /**
         * @var array
         */
        protected $defaultOptions;

        /**
         * Executes this finisher
         * @see AbstractFinisher::execute()
         *
         * @throws FinisherException
         */
        protected function executeInternal() {}
        protected function initializeStandaloneView(FormRuntime $formRuntime) : StandaloneView {}
    }


    /**
     * Finisher that can be attached to a form in order to be invoked
     * as soon as the complete form is submitted
     *
     * Scope: frontend
     */
    interface FinisherInterface {
        function execute(FinisherContext $finisherContext) ;
        function setOptions(array $options) ;
        function setOption(string $optionName, $optionValue) ;
    }

}

namespace TYPO3\CMS\Form\Domain\Finishers\Exception {
    /**
     * This exception is thrown in Form Finishers
     *
     * @api
     */
    class FinisherException extends \typo3\cms\form\domain\exception {}

}

namespace TYPO3\CMS\Form\Domain\Exception {
    /**
     * This exception is thrown if a rendering error occurs
     *
     * @api
     */
    class RenderingException extends \typo3\cms\form\domain\exception {}

    /**
     * This exception is thrown if a Type Definition for a form element was not valid,
     * i.e. it has properties which are not supported.
     *
     * @api
     */
    class TypeDefinitionNotValidException extends \typo3\cms\form\domain\exception {}

    /**
     * This exception is thrown if a Type Definition for a form element was not found,
     * or if the implementationClassName was not set.
     *
     * @api
     */
    class TypeDefinitionNotFoundException extends \typo3\cms\form\domain\exception {}

    /**
     * This exception is thrown if the "identifier" for a Form, a Page or a Form Element
     * is invalid (i.e. empty or not a string)
     *
     * @api
     */
    class IdentifierNotValidException extends \typo3\cms\form\domain\exception {}

    /**
     * This exception is thrown if the ArrayFormFactory want to create child
     * elements within a unknown composit renderable.
     *
     * @api
     */
    class UnknownCompositRenderableException extends \typo3\cms\form\domain\exception {}

}

namespace TYPO3\CMS\Form\Domain\Factory {
    /**
     * Base class for custom *Form Factories*. A Form Factory is responsible for building
     * a {@link TYPO3\CMS\Form\Domain\Model\FormDefinition}.
     *
     * {@inheritDoc}
     *
     * Example
     * =======
     *
     * Generally, you should use this class as follows:
     *
     * <pre>
     * class MyFooBarFactory extends AbstractFormFactory {
     *   public function build(array $configuration, $prototypeName) {
     *     $configurationService = GeneralUtility::makeInstance(ObjectManager::class)->get(ConfigurationService::class);
     *     $prototypeConfiguration = $configurationService->getPrototypeConfiguration($prototypeName);
     *     $formDefinition = GeneralUtility::makeInstance(ObjectManager::class)->get(FormDefinition::class, 'nameOfMyForm', $prototypeConfiguration);
     *
     *     // now, you should call methods on $formDefinition to add pages and form elements
     *
     *     return $formDefinition;
     *   }
     * }
     * </pre>
     *
     * Scope: frontend / backend
     * **This class is meant to be sub classed by developers.**
     * @api
     */
    abstract class AbstractFormFactory implements \typo3\cms\form\domain\factory\formfactoryinterface {
        protected function triggerFormBuildingFinished(FormDefinition $form) {}
    }

    /**
     * A factory that creates a FormDefinition from an array
     *
     * Scope: frontend / backend
     */
    class ArrayFormFactory extends \typo3\cms\form\domain\factory\abstractformfactory {
        public function build(array $configuration, string $prototypeName = null) : FormDefinition {}
        protected function addNestedRenderable(array $nestedRenderableConfiguration, CompositeRenderableInterface $parentRenderable) {}
    }


    /**
     * A Form Factory is responsible for building a {@link TYPO3\CMS\Form\Domain\Model\FormDefinition}.
     * **Instead of implementing this interface, subclassing {@link AbstractFormFactory} is more appropriate
     * in most cases**.
     *
     * A Form Factory can be called anytime a FormDefinition should be built; in most cases
     * it is done through an invocation of a Form Rendering ViewHelper.
     *
     * Scope: frontend / backend
     * @api
     */
    interface FormFactoryInterface {
        function build(array $configuration, string $prototypeName = null) : FormDefinition ;
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Mvc\Configuration {
    /**
     * Test case
     */
    class ProcessingRuleTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Set up
         */
        public function setUp() {}
        /**
         * Tear down
         */
        public function tearDown() {}
        /**
         * @test
         */
        public function addValidatorAddValidator() {}
        /**
         * @test
         */
        public function processNoPropertyMappingReturnsNotModifiedValue() {}
        /**
         * @test
         */
        public function processNoPropertyMappingAndHasErrorsIfValidatorContainsErrors() {}
    }

    /**
     * Test case
     */
    class YamlSourceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function loadThrowsExceptionIfFileToLoadNotExists() {}
        /**
         * @test
         */
        public function loadThrowsExceptionIfFileToLoadIsNotValidYamlUseSymfonyParser() {}
        /**
         * @test
         */
        public function loadThrowsExceptionIfFileToLoadIsNotValidYamlUsePhpExtensionParser() {}
        /**
         * @test
         */
        public function getHeaderFromFileReturnsHeaderPart() {}
    }

    /**
     * Test case
     */
    class TypoScriptServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function resolveTypoScriptConfigurationReturnsResolvedConfiguration() {}
    }

    /**
     * Test case
     */
    class InheritancesResolverServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var InheritancesResolverService
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getMergedConfigurationSimpleInheritance() {}
        /**
         * @test
         */
        public function getMergedConfigurationSimpleInheritanceOverrideValue() {}
        /**
         * @test
         */
        public function getMergedConfigurationSimpleInheritanceRemoveValue() {}
        /**
         * @test
         */
        public function getMergedConfigurationSimpleMixin() {}
        /**
         * @test
         */
        public function getMergedConfigurationAdvancedMixin() {}
        /**
         * @test
         */
        public function getResolvedConfigurationThrowsExceptionIfCycleDepenciesOnSameLevelIsFound() {}
        /**
         * @test
         */
        public function getResolvedConfigurationThrowsExceptionIfCycleDepenciesOnSameLevelWithGapIsFound() {}
        /**
         * @test
         */
        public function getResolvedConfigurationThrowsExceptionIfCycleDepenciesOnHigherLevelIsFound() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Mvc\Persistence {
    /**
     * Test case
     */
    class FormPersistenceManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function loadThrowsExceptionIfPersistenceIdentifierHasNoYamlExtension() {}
        /**
         * @test
         */
        public function loadThrowsExceptionIfPersistenceIdentifierIsAExtensionLocationWhichIsNotAllowed() {}
        /**
         * @test
         */
        public function saveThrowsExceptionIfPersistenceIdentifierHasNoYamlExtension() {}
        /**
         * @test
         */
        public function saveThrowsExceptionIfPersistenceIdentifierIsAExtensionLocationAndSaveToExtensionLocationIsNotAllowed() {}
        /**
         * @test
         */
        public function saveThrowsExceptionIfPersistenceIdentifierIsAExtensionLocationWhichIsNotAllowed() {}
        /**
         * @test
         */
        public function deleteThrowsExceptionIfPersistenceIdentifierHasNoYamlExtension() {}
        /**
         * @test
         */
        public function deleteThrowsExceptionIfPersistenceIdentifierFileDoesNotExists() {}
        /**
         * @test
         */
        public function deleteThrowsExceptionIfPersistenceIdentifierIsExtensionLocationAndDeleteFromExtensionLocationsIsNotAllowed() {}
        /**
         * @test
         */
        public function deleteThrowsExceptionIfPersistenceIdentifierIsExtensionLocationWhichIsNotAllowed() {}
        /**
         * @test
         */
        public function deleteThrowsExceptionIfPersistenceIdentifierIsStorageLocationAndDeleteFromStorageIsNotAllowed() {}
        /**
         * @test
         */
        public function existsReturnsTrueIfPersistenceIdentifierIsExtensionLocationAndFileExistsAndFileHasYamlExtension() {}
        /**
         * @test
         */
        public function existsReturnsFalseIfPersistenceIdentifierIsExtensionLocationAndFileExistsAndFileHasNoYamlExtension() {}
        /**
         * @test
         */
        public function existsReturnsFalseIfPersistenceIdentifierIsExtensionLocationAndFileExistsAndExtensionLocationIsNotAllowed() {}
        /**
         * @test
         */
        public function existsReturnsFalseIfPersistenceIdentifierIsExtensionLocationAndFileNotExistsAndFileHasYamlExtension() {}
        /**
         * @test
         */
        public function existsReturnsTrueIfPersistenceIdentifierIsStorageLocationAndFileExistsAndFileHasYamlExtension() {}
        /**
         * @test
         */
        public function existsReturnsFalseIfPersistenceIdentifierIsStorageLocationAndFileExistsAndFileNoYamlExtension() {}
        /**
         * @test
         */
        public function existsReturnsFalseIfPersistenceIdentifierIsStorageLocationAndFileNotExistsAndFileHasYamlExtension() {}
        /**
         * @test
         */
        public function getUniquePersistenceIdentifierAppendNumberIfPersistenceIdentifierExists() {}
        /**
         * @test
         */
        public function getUniquePersistenceIdentifierAppendTimestampIfPersistenceIdentifierExists() {}
        /**
         * @test
         */
        public function getUniqueIdentifierThrowsExceptionIfIdentifierExists() {}
        /**
         * @test
         */
        public function getUniqueIdentifierAppendTimestampIfIdentifierExists() {}
        /**
         * @test
         */
        public function checkForDuplicateIdentifierReturnsTrueIfIdentifierIsUsed() {}
        /**
         * @test
         */
        public function checkForDuplicateIdentifierReturnsFalseIfIdentifierIsUsed() {}
        /**
         * @test
         */
        public function getFileByIdentifierThrowsExceptionIfReadFromStorageIsNotAllowed() {}
        /**
         * @test
         */
        public function getOrCreateFileThrowsExceptionIfFolderNotExistsInStorage() {}
        /**
         * @test
         */
        public function getOrCreateFileThrowsExceptionIfWriteToStorageIsNotAllowed() {}
        /**
         * @test
         */
        public function getStorageByUidThrowsExceptionIfStorageNotExists() {}
        /**
         * @test
         */
        public function getStorageByUidThrowsExceptionIfStorageIsNotBrowsable() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Mvc\Validation {
    /**
     * Test case
     */
    class MimeTypeValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function MimeTypeValidatorThrowsExceptionIfAllowedMimeTypesOptionIsString() {}
        /**
         * @test
         */
        public function MimeTypeValidatorThrowsExceptionIfAllowedMimeTypesOptionIsEmptyArray() {}
        /**
         * @test
         */
        public function MimeTypeValidatorReturnsTrueIfFileResourceIsNotAllowedMimeType() {}
        /**
         * @test
         */
        public function MimeTypeValidatorReturnsFalseIfInputIsEmptyString() {}
        /**
         * @test
         */
        public function MimeTypeValidatorReturnsTrueIfInputIsNoFileResource() {}
    }

    /**
     * Test case
     */
    class CountValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function CountValidatorReturnsFalseIfInputItemsCountIsEqualToMaximum() {}
        /**
         * @test
         */
        public function CountValidatorReturnsFalseIfInputItemsCountIsEqualToMinimum() {}
        /**
         * @test
         */
        public function CountValidatorReturnsFalseIfInputItemsCountIsEqualToMinimumAndMaximum() {}
        /**
         * @test
         */
        public function CountValidatorReturnsTrueIfInputCountHasMoreItemsAsMaximumValue() {}
        /**
         * @test
         */
        public function CountValidatorReturnsTrueIfInputCountHasLessItemsAsMinimumValue() {}
    }

    /**
     * Test case
     */
    class EmptyValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function EmptyValidatorReturnsFalseIfInputIsEmptyString() {}
        /**
         * @test
         */
        public function EmptyValidatorReturnsFalseIfInputIsNull() {}
        /**
         * @test
         */
        public function EmptyValidatorReturnsFalseIfInputIsEmptyArray() {}
        /**
         * @test
         */
        public function EmptyValidatorReturnsFalseIfInputIsZero() {}
        /**
         * @test
         */
        public function EmptyValidatorReturnsFalseIfInputIsZeroAsString() {}
        /**
         * @test
         */
        public function EmptyValidatorReturnsTrueIfInputIsNonEmptyString() {}
        /**
         * @test
         */
        public function EmptyValidatorReturnsTrueIfInputIsNonEmptyArray() {}
    }

    /**
     * Test case
     */
    class FileSizeValidatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function FileSizeValidatorThrowsExceptionIfMinimumOptionIsInvalid() {}
        /**
         * @test
         */
        public function FileSizeValidatorThrowsExceptionIfMaximumOptionIsInvalid() {}
        /**
         * @test
         */
        public function FileSizeValidatorHasErrosIfFileResourceSizeIsToSmall() {}
        /**
         * @test
         */
        public function FileSizeValidatorHasErrosIfFileResourceSizeIsToBig() {}
        /**
         * @test
         */
        public function FileSizeValidatorHasNoErrorsIfInputIsEmptyString() {}
        /**
         * @test
         */
        public function FileSizeValidatorHasErrorsIfInputIsNoFileResource() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Mvc\Validation\Fixtures {
    /**
     * Validator for unit tetst
     *
     * @api
     */
    class TestValidator extends \typo3\cms\extbase\validation\validator\abstractvalidator {
        public function isValid($value) {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Property\TypeConverter {
    /**
     * Test case for TYPO3\CMS\Form\Property\TypeConverter\FormDefinitionArrayConverter
     */
    class FormDefinitionArrayConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function convertsJsonStringToFormDefinitionArray() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\ViewHelpers\Form {
    /**
     * Test case
     */
    class DatePickerViewHelperTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Form\ViewHelpers\Form\DatePickerViewHelper
         */
        protected $subject;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat01() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat02() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat03() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat04() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat05() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat06() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat07() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat08() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat09() {}
        /**
         * @test
         */
        public function convertDateFormatToDatePickerFormatReturnsTransformedFormat10() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Controller {
    /**
     * Test case
     */
    class FormManagerControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Set up
         */
        public function setUp() {}
        /**
         * Tear down
         */
        public function tearDown() {}
        /**
         * @test
         */
        public function getAccessibleFormStorageFoldersReturnsProcessedArray() {}
        /**
         * @test
         */
        public function getFormManagerAppInitialDataReturnsProcessedArray() {}
        /**
         * @test
         */
        public function getAvailableFormDefinitionsReturnsProcessedArray() {}
        /**
         * @test
         */
        public function getProcessedReferencesRowsThrowsExceptionIfPersistenceIdentifierIsEmpty() {}
        /**
         * @test
         */
        public function getProcessedReferencesRowsReturnsProcessedArray() {}
        /**
         * @test
         */
        public function isValidTemplatePathReturnsTrueIfTemplateIsDefinedAndExists() {}
        /**
         * @test
         */
        public function isValidTemplatePathReturnsFalseIfTemplateIsDefinedButNotExists() {}
        /**
         * @test
         */
        public function isValidTemplatePathReturnsFalseIfTemplateIsNotDefinedAndExists() {}
        /**
         * @test
         */
        public function convertFormNameToIdentifierRemoveSpaces() {}
        /**
         * @test
         */
        public function convertFormNameToIdentifierRemoveSpecialChars() {}
    }

    /**
     * Test case
     */
    class FormFrontendControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function overrideByFlexFormSettingsReturnsNoOverriddenConfigurationIfFlexformOverridesDisabled() {}
        /**
         * @test
         */
        public function overrideByFlexFormSettingsReturnsOverriddenConfigurationIfFlexformOverridesEnabled() {}
        /**
         * @test
         */
        public function overrideByFlexFormSettingsReturnsNotOverriddenConfigurationKeyIfFlexformOverridesAreNotRepresentedInFormEngineConfiguration() {}
        /**
         * @test
         */
        public function overrideByTypoScriptSettingsReturnsNotOverriddenConfigurationIfNoTypoScriptOverridesExists() {}
        /**
         * @test
         */
        public function overrideByTypoScriptSettingsReturnsOverriddenConfigurationIfTypoScriptOverridesExists() {}
    }

    /**
     * Test case
     */
    class AbstractBackendControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function resolveResourcePathsExpectResolve() {}
    }

    /**
     * Test case
     */
    class FormEditorControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Set up
         */
        public function setUp() {}
        /**
         * Tear down
         */
        public function tearDown() {}
        /**
         * @test
         */
        public function getInsertRenderablesPanelConfigurationReturnsGroupedAndSortedConfiguration() {}
        /**
         * @test
         */
        public function getFormEditorDefinitionsReturnReducedConfiguration() {}
        /**
         * @test
         */
        public function renderFormEditorTemplatesThrowsExceptionIfLayoutRootPathsNotSet() {}
        /**
         * @test
         */
        public function renderFormEditorTemplatesThrowsExceptionIfLayoutRootPathsNotArray() {}
        /**
         * @test
         */
        public function renderFormEditorTemplatesThrowsExceptionIfPartialRootPathsNotSet() {}
        /**
         * @test
         */
        public function renderFormEditorTemplatesThrowsExceptionIfPartialRootPathsNotArray() {}
        /**
         * @test
         */
        public function renderFormEditorTemplatesThrowsExceptionIftemplatePathAndFilenameNotSet() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Hooks {
    /**
     * Test case
     */
    class DataStructureIdentifierHookTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Set up
         */
        public function setUp() {}
        /**
         * Tear down
         */
        public function tearDown() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierPostProcessReturnsIdentifierForNotMatchingScenario() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierPostProcessAddDefaultValuesForNewRecord() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierPostProcessAddsGivenPersistenceIdentifier() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierPostProcessAddsOverrideFinisherValue() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierPostProcessReturnsDataStructureUnchanged() {}
        public function parseDataStructureByIdentifierPostProcessAddsExistingFormItems(array $formDefinition, array $expectedItem) {}
        /**
         * @return array
         */
        public function parseDataStructureByIdentifierPostProcessDataProvider() : array {}
        /**
         * Data provider for implodeArrayKeysReturnsString
         *
         * @return array
         */
        public function implodeArrayKeysReturnsStringDataProvider() {}
        public function implodeArrayKeysReturnsString($array, $expectation) {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Mvc\Service {
    /**
     * Test case
     */
    class TranslationServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var ConfigurationManager
         */
        protected $mockConfigurationManager;
        /**
         * @var TranslationService
         */
        protected $mockTranslationService;
        /**
         * @var LanguageStore
         */
        protected $store;

        /**
         * Set up
         */
        public function setUp() {}
        /**
         * Tear down
         */
        public function tearDown() {}
        /**
         * @test
         */
        public function translateReturnsExistingDefaultLanguageKeyIfFullExtDefaultLanguageKeyIsRequested() {}
        /**
         * @test
         */
        public function translateReturnsExistingDefaultLanguageKeyIfFullLLLExtDefaultLanguageKeyIsRequested() {}
        /**
         * @test
         */
        public function translateReturnsExistingDefaultLanguageKeyIfDefaultLanguageKeyIsRequestedAndDefaultValueIsGiven() {}
        /**
         * @test
         */
        public function translateReturnsEmptyStringIfNonExistingDefaultLanguageKeyIsRequested() {}
        /**
         * @test
         */
        public function translateReturnsDefaultValueIfNonExistingDefaultLanguageKeyIsRequestedAndDefaultValueIsGiven() {}
        /**
         * @test
         */
        public function translateReturnsExistingLanguageKeyForLanguageIfExtPathLanguageKeyIsRequested() {}
        /**
         * @test
         */
        public function translateReturnsDefaultValueIfNonExistingLanguageKeyForLanguageIsRequestedAndDefaultValueIsGiven() {}
        /**
         * @test
         */
        public function translateReturnsEmptyStringIfNonExistingLanguageKeyForLanguageIsRequested() {}
        /**
         * @test
         */
        public function translateReturnsExistingDefaultLanguageKeyIfDefaultLanguageKeyIsRequestedAndExtFilePathIsGiven() {}
        /**
         * @test
         */
        public function translateReturnsExistingDefaultLanguageKeyIfDefaultLanguageKeyIsRequestedAndLLLExtFilePathIsGiven() {}
        /**
         * @test
         */
        public function translateValuesRecursiveTranslateRecursive() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateLabelForConcreteFormAndConcreteElementIfElementRenderingOptionsContainsATranslationFileAndElementLabelIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateLabelForConcreteFormAndConcreteElementIfElementRenderingOptionsContainsATranslationFileAndElementLabelIsEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueNotTranslateLabelForConcreteFormAndConcreteElementIfElementRenderingOptionsContainsATranslationFileAndElementLabelIsEmptyAndPropertyShouldNotBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateLabelForConcreteFormElementIfElementRenderingOptionsContainsATranslationFileAndElementLabelIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateLabelForFormElementTypeIfElementRenderingOptionsContainsATranslationFileAndElementLabelIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslatePropertyForConcreteFormAndConcreteElementIfElementRenderingOptionsContainsATranslationFileAndElementPropertyIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueNotTranslatePropertyForConcreteFormAndConcreteElementIfElementRenderingOptionsContainsATranslationFileAndElementPropertyIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationNotExists() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateRenderingOptionForConcreteFormAndConcreteSectionElementIfElementRenderingOptionsContainsATranslationFileAndElementRenderingOptionIsNotEmptyAndRenderingOptionShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateOptionsPropertyForConcreteFormAndConcreteElementIfElementRenderingOptionsContainsATranslationFileAndElementOptionsPropertyIsAnArrayAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateOptionsPropertyForConcreteElementIfElementRenderingOptionsContainsATranslationFileAndElementOptionsPropertyIsAnArrayAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFinisherOptionTranslateOptionForConcreteFormIfFinisherTranslationOptionsContainsATranslationFileAndFinisherOptionIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFinisherOptionTranslateOptionIfFinisherTranslationOptionsContainsATranslationFileAndFinisherOptionIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateLabelForConcreteFormAndConcreteElementFromFormRumtimeTranslationFileIfElementRenderingOptionsContainsNoTranslationFileAndElementLabelIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function supportsArgumentsForFormElementValueTranslations() {}
        /**
         * @test
         */
        public function translateFinisherOptionTranslateOptionForConcreteFormFromFormRuntimeIfFinisherTranslationOptionsContainsNoTranslationFileAndFinisherOptionIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
        /**
         * @test
         */
        public function supportsArgumentsForFinisherOptionTranslations() {}
        /**
         * @test
         */
        public function translateFormElementValueTranslateLabelFromAdditionalTranslationForConcreteFormAndConcreteElementIfElementRenderingOptionsContainsATranslationFileAndElementLabelIsNotEmptyAndPropertyShouldBeTranslatedAndTranslationExists() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Domain\Configuration {
    /**
     * Test case
     */
    class ConfigurationServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getPrototypeConfigurationReturnsPrototypeConfiguration() {}
        /**
         * @test
         */
        public function getPrototypeConfigurationThrowsExceptionIfNoPrototypeFound() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Domain\Runtime {
    /**
     * Test case
     */
    class FormRuntimeTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Set up
         */
        public function setUp() {}
        /**
         * Tear down
         */
        public function tearDown() {}
        /**
         * @test
         */
        public function renderThrowsExceptionIfFormDefinitionReturnsNoRendererClassName() {}
        /**
         * @test
         */
        public function renderThrowsExceptionIfRendererClassNameInstanceDoesNotImplementRendererInterface() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Domain\FormElements {
    /**
     * Test TYPO3\CMS\Form\Domain\Model\FormElements\AbstractFormElement class
     *
     * Class AbstractFormElementTest
     */
    class AbstractFormElementTest extends \typo3\testingframework\core\unit\unittestcase {
        static protected $IDENTIFIER;
        static protected $TYPE;
        /**
         * An accessible instance of abstract class under test
         * @var AbstractFormElement
         */
        protected $abstractFormElementInstance;

        /**
         * @before
         */
        public function setUp() {}
        /**
         * @test
         */
        public function newInstanceHasNoProperties() {}
        /**
         * @test
         */
        public function setSimpleProperties() {}
        /**
         * @test
         */
        public function overrideProperties() {}
        /**
         * @test
         */
        public function setArrayProperties() {}
    }

    /**
     * Test case
     */
    class AbstractSectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function createElementThrowsExceptionIfTypeDefinitionNotFound() {}
    }

    /**
     * Test TYPO3\CMS\Form\Domain\Model\FormElements\Section class
     *
     * Class AbstractFormElementTest
     */
    class SectionTest extends \typo3\testingframework\core\unit\unittestcase {
        static protected $IDENTIFIER;
        static protected $TYPE;
        /**
         * An instance of section
         * @var Section
         */
        protected $sectionInstance;

        /**
         * @before
         */
        public function setUp() {}
        /**
         * @test
         */
        public function newInstanceHasNoProperties() {}
        /**
         * @test
         */
        public function setSimpleProperties() {}
        /**
         * @test
         */
        public function overrideProperties() {}
        /**
         * @test
         */
        public function setArrayProperties() {}
    }

}

namespace TYPO3\CMS\Form\Tests\Unit\Domain\Finishers {
    /**
     * Test case
     */
    class SaveToDatabaseFinisherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function throwExceptionOnInconsistentConfigurationThrowsExceptionOnInconsistentConfiguration() {}
        /**
         * @test
         */
        public function prepareDataConvertsArrayValuesToCsv() {}
        /**
         * @test
         */
        public function executeInternalProcessesSingleTable() {}
        /**
         * @return array
         */
        public function skipIfValueIsEmptyDataProvider() {}
        public function skipIfValueIsEmptyDetectsEmptyValues($value, bool $expectedEmpty) {}
        /**
         * @test
         */
        public function executeInternalProcessesMultipleTables() {}
    }

    /**
     * Test case
     */
    class ClosureFinisherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function closureOptionForFinisherCanBeSetAndIsFunctional() {}
    }

    /**
     * Test case
     */
    class AbstractFinisherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Set up
         */
        public function setUp() {}
        /**
         * Tear down
         */
        public function tearDown() {}
        /**
         * @test
         */
        public function parseOptionReturnsNullIfOptionNameIsTranslation() {}
        /**
         * @test
         */
        public function parseOptionReturnsNullIfOptionNameNotExistsWithinOptions() {}
        /**
         * @test
         */
        public function parseOptionReturnsNullIfOptionNameNotExistsWithinDefaultOptions() {}
        /**
         * @test
         */
        public function parseOptionReturnsArrayOptionValuesAsArray() {}
        /**
         * @test
         */
        public function parseOptionReturnsBoolOptionValuesAsBool() {}
        /**
         * @test
         */
        public function parseOptionReturnsValueFromFormRuntimeIfOptionNameReferenceAFormElementIdentifierWhoseValueIsAString() {}
        /**
         * @test
         */
        public function parseOptionReturnsNoReplacedValueFromFormRuntimeIfOptionNameReferenceAFormElementIdentifierWhoseValueIsNotAString() {}
        /**
         * @test
         */
        public function parseOptionReturnsNoReplacedValueFromFormRuntimeIfOptionNameReferenceANonExistingFormElement() {}
        /**
         * @test
         */
        public function parseOptionReturnsDefaultOptionValueIfOptionNameNotExistsWithinOptionsButWithinDefaultOptions() {}
        /**
         * @test
         */
        public function parseOptionReturnsDefaultOptionValueIfOptionValueIsAFormElementReferenceAndTheFormElementValueIsEmpty() {}
        /**
         * @test
         */
        public function parseOptionReturnsTimestampIfOptionValueIsATimestampRequestTrigger() {}
    }

}

namespace TYPO3\CMS\Install {
    /**
     * A generic Install exception
     */
    class Exception extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Install\Configuration {
    /**
     * Abstract feature class implements common code
     */
    abstract class AbstractFeature {
        /**
         * @var string Name of feature
         */
        protected $name;
        /**
         * @var array List of preset classes
         */
        protected $presetRegistry;
        /**
         * @var array Holds instances of presets
         */
        protected $presetInstances;
        /**
         * @var array List of $POST values
         */
        protected $postValues;

/** @var CustomPresetInterface $presetInstance */
        public function initializePresets(/** @var CustomPresetInterface $presetInstance */
array $postValues) {}
        /**
         * Return presets ordered by priority
         *
         * @return array<PresetInterface>
         * @throws Exception
         */
        public function getPresetsOrderedByPriority() {}
        /**
         * Return name of feature
         *
         * @return string Name of feature
         */
        public function getName() {}
    }

    /**
     * Instantiate and configure all known features and presets
     */
    class FeatureManager {
        /**
         * @var array List of feature class names
         */
        protected $featureRegistry;

/** @var FeatureInterface $featureInstance */
        public function getInitializedFeatures(/** @var FeatureInterface $featureInstance */
array $postValues = [ ]) {}
/** @var PresetInterface $preset */
        public function getConfigurationForSelectedFeaturePresets(/** @var PresetInterface $preset */
array $postValues) {}
        /** @var PresetInterface $preset */
        public function getBestMatchingConfigurationForAllFeatures() {}
    }

    /**
     * Abstract custom preset class implements common preset code
     */
    abstract class AbstractCustomPreset extends \typo3\cms\install\configuration\abstractpreset {
        /**
         * @var string Name of preset, always set to "Custom"
         */
        protected $name;
        /**
         * @var bool TRUE if custom preset is active
         */
        protected $isActive;
        /**
         * @var int Priority of custom prefix is usually the lowest
         */
        protected $priority;

        /**
         * Whether custom preset is active is set by feature
         *
         * @return bool TRUE if custom preset is active
         */
        public function isActive() {}
        /**
         * Mark preset as active.
         * The custom features do not know by itself if they are
         * active or not since the configuration options may overlay
         * with other presets.
         * Marking the custom preset as active is therefor taken care
         * off by the feature itself if no other preset is active.
         */
        public function setActive() {}
        /**
         * Custom configuration is always available
         *
         * @return bool TRUE
         */
        public function isAvailable() {}
        /**
         * Get configuration values is used in fluid to show configuration options.
         * They are fetched from LocalConfiguration / DefaultConfiguration and
         * merged with given $postValues.
         *
         * @return array Configuration values needed to activate prefix
         */
        public function getConfigurationValues() {}
    }

    /**
     * A configuration exception
     */
    class Exception extends \typo3\cms\install\exception {}

    /**
     * Abstract preset class implements common preset code
     */
    abstract class AbstractPreset implements \typo3\cms\install\configuration\presetinterface {
        /**
         * @var \TYPO3\CMS\Core\Configuration\ConfigurationManager
         */
        protected $configurationManager;
        /**
         * @var string Name of preset, must be set by extending classes
         */
        protected $name;
        /**
         * @var int Default priority of preset
         */
        protected $priority;
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;
        /**
         * @var array List of $POST values
         */
        protected $postValues;

        public function __construct(ConfigurationManager $configurationManager = null) {}
        public function setPostValues(array $postValues) {}
        /**
         * Wrapper for isAvailable, used in fluid
         *
         * @return bool TRUE if preset is available
         */
        public function getIsAvailable() {}
        /**
         * Check is preset is currently active on the system
         *
         * @return bool TRUE if preset is active
         */
        public function isActive() {}
        /**
         * Wrapper for isActive, used in fluid
         *
         * @return bool TRUE if preset is active
         */
        public function getIsActive() {}
        /**
         * Get name of preset
         *
         * @return string Name
         */
        public function getName() {}
        /**
         * Get priority of preset
         *
         * @return int Priority, usually between 0 and 100
         */
        public function getPriority() {}
        /**
         * Get configuration values to activate prefix
         *
         * @return array Configuration values needed to activate prefix
         */
        public function getConfigurationValues() {}
    }


    /**
     * Custom preset interface
     *
     * Interface for presets not caught by other presets.
     * Represents "custom" configuration options of a feature.
     *
     * There must be only one custom preset per feature!
     */
    interface CustomPresetInterface extends \typo3\cms\install\configuration\presetinterface {
        /**
         * Mark preset as active.
         * The custom features do not know by itself if they are
         * active or not since the configuration options may overlay
         * with other presets.
         * Marking the custom preset as active is therefor taken care
         * off by the feature itself if no other preset is active.
         */
        function setActive() ;
    }

    /**
     * Preset interface
     *
     * A preset is a class for handling a specific configuration
     * set of a feature.
     */
    interface PresetInterface {
        function setPostValues(array $postValues) ;
        /**
         * Check if preset is available on the system
         *
         * @return bool TRUE if preset is available
         */
        function isAvailable() ;
        /**
         * Wrapper for isAvailable, used in fluid
         *
         * @return bool TRUE if preset is available
         */
        function getIsAvailable() ;
        /**
         * Check is preset is currently active on the system
         *
         * @return bool TRUE if preset is active
         */
        function isActive() ;
        /**
         * Wrapper for isActive, used in fluid
         *
         * @return bool TRUE if preset is active
         */
        function getIsActive() ;
        /**
         * Get name of preset
         *
         * @return string Name
         */
        function getName() ;
        /**
         * Get priority of preset
         *
         * @return int Priority, usually between 0 and 100
         */
        function getPriority() ;
        /**
         * Get configuration values to activate prefix
         *
         * @return array Configuration values needed to activate prefix
         */
        function getConfigurationValues() ;
    }

    /**
     * A feature representation handles preset classes.
     */
    interface FeatureInterface {
        function initializePresets(array $postValues) ;
        /**
         * Get list of presets ordered by priority
         *
         * @return array<PresetInterface>
         */
        function getPresetsOrderedByPriority() ;
        /**
         * Get name of feature
         *
         * @return string Name
         */
        function getName() ;
    }

}

namespace TYPO3\CMS\Install\Configuration\Context {
    /**
     * Custom preset is a fallback if no other preset fits
     */
    class CustomPreset extends \typo3\cms\install\configuration\abstractcustompreset implements \typo3\cms\install\configuration\custompresetinterface {
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

    }

    /**
     * Debug preset
     */
    class DebugPreset extends \typo3\cms\install\configuration\abstractpreset {
        /**
         * @var string Name of preset
         */
        protected $name;
        /**
         * @var int Priority of preset
         */
        protected $priority;
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

        /**
         * Development preset is always available
         *
         * @return bool Always TRUE
         */
        public function isAvailable() {}
        /**
         * If context is set to development, priority
         * of this preset is raised.
         *
         * @return int Priority of preset
         */
        public function getPriority() {}
    }

    /**
     * Live preset
     */
    class LivePreset extends \typo3\cms\install\configuration\abstractpreset {
        /**
         * @var string Name of preset
         */
        protected $name;
        /**
         * @var int Priority of preset
         */
        protected $priority;
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

        /**
         * Production preset is always available
         *
         * @return bool Always TRUE
         */
        public function isAvailable() {}
        /**
         * If context is set to production, priority
         * of this preset is raised.
         *
         * @return int Priority of preset
         */
        public function getPriority() {}
    }

    /**
     * Context feature sets development / production settings
     */
    class ContextFeature extends \typo3\cms\install\configuration\abstractfeature implements \typo3\cms\install\configuration\featureinterface {
        /**
         * @var string Name of feature
         */
        protected $name;
        /**
         * @var array List of preset classes
         */
        protected $presetRegistry;

    }

}

namespace TYPO3\CMS\Install\Configuration\Mail {
    /**
     * Custom preset is a fallback if no other preset fits
     */
    class CustomPreset extends \typo3\cms\install\configuration\abstractcustompreset implements \typo3\cms\install\configuration\custompresetinterface {
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

    }

    /**
     * SMTP settings handling preset
     */
    class SmtpPreset extends \typo3\cms\install\configuration\abstractpreset {
        /**
         * @var string Name of preset
         */
        protected $name;
        /**
         * @var int Priority of preset
         */
        protected $priority;
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

        /**
         * Get configuration values to activate prefix
         *
         * @return array Configuration values needed to activate prefix
         */
        public function getConfigurationValues() {}
        /**
         * Check if sendmail path if set
         *
         * @return bool TRUE if sendmail path if set
         */
        public function isAvailable() {}
    }

    /**
     * Sendmail path handling preset
     */
    class SendmailPreset extends \typo3\cms\install\configuration\abstractpreset {
        /**
         * @var string Name of preset
         */
        protected $name;
        /**
         * @var int Priority of preset
         */
        protected $priority;
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

        /**
         * Get configuration values to activate prefix
         *
         * @return array Configuration values needed to activate prefix
         */
        public function getConfigurationValues() {}
        /**
         * Check if sendmail path if set
         *
         * @return bool TRUE if sendmail path if set
         */
        public function isAvailable() {}
        /**
         * Path where executable was found
         *
         * @return string|bool Sendmail path or FALSE if not set
         */
        public function getSendmailPath() {}
        /**
         * Check is preset is currently active on the system
         *
         * @return bool TRUE if preset is active
         */
        public function isActive() {}
    }

    /**
     * Mail feature detects sendmail settings
     */
    class MailFeature extends \typo3\cms\install\configuration\abstractfeature implements \typo3\cms\install\configuration\featureinterface {
        /**
         * @var string Name of feature
         */
        protected $name;
        /**
         * @var array List of preset classes
         */
        protected $presetRegistry;

    }

}

namespace TYPO3\CMS\Install\Configuration\Image {
    /**
     * Custom preset is a fallback if no other preset fits
     */
    class CustomPreset extends \typo3\cms\install\configuration\abstractcustompreset implements \typo3\cms\install\configuration\custompresetinterface {
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

    }

    /**
     * Preset for ImageMagick version 6 or higher
     */
    class ImageMagick6Preset extends \typo3\cms\install\configuration\image\abstractimagepreset implements \typo3\cms\install\configuration\presetinterface {
        /**
         * @var string Name of preset
         */
        protected $name;
        /**
         * @var int Priority of preset
         */
        protected $priority;
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

        protected function findExecutableInPath(array $searchPaths) {}
        protected function findImageMagick6InPaths(array $searchPaths) {}
    }

    /**
     * Abstract class implements common image preset code
     */
    abstract class AbstractImagePreset extends \typo3\cms\install\configuration\abstractpreset {
        /**
         * @var array Default paths to search for executable, with trailing slash
         */
        protected $defaultExecutableSearchPaths;
        /**
         * @var string Absolute path with found executable
         */
        protected $foundPath;

        /**
         * Path where executable was found
         *
         * @return string Fonud path
         */
        public function getFoundPath() {}
        /**
         * Check is preset is currently active on the system.
         * Overwrites parent method to ignore processor_path and processor_path_lzw settings
         *
         * @return bool TRUE if preset is active
         */
        public function isActive() {}
        /**
         * Find out if GraphicsMagick is available
         *
         * @return bool TRUE if GraphicsMagick executable is found in path
         */
        public function isAvailable() {}
        /**
         * Get configuration values to activate prefix
         *
         * @return array Configuration values needed to activate prefix
         */
        public function getConfigurationValues() {}
        abstract protected function findExecutableInPath(array $searchPaths) ;
        /**
         * Get list of paths to search for image handling executables
         *
         * @return array List of paths to search for
         */
        protected function getSearchPaths() {}
        protected function cleanUpPath($path) {}
    }

    /**
     * Preset for GraphicsMagick
     */
    class GraphicsMagickPreset extends \typo3\cms\install\configuration\image\abstractimagepreset implements \typo3\cms\install\configuration\presetinterface {
        /**
         * @var string Name of preset
         */
        protected $name;
        /**
         * @var int Priority of preset
         */
        protected $priority;
        /**
         * @var array Configuration values handled by this preset
         */
        protected $configurationValues;

        protected function findExecutableInPath(array $searchPaths) {}
        protected function findGraphicsMagickInPaths(array $searchPaths) {}
    }

    /**
     * Image feature detects imagemagick / graphicsmagick versions
     */
    class ImageFeature extends \typo3\cms\install\configuration\abstractfeature implements \typo3\cms\install\configuration\featureinterface {
        /**
         * @var string Name of feature
         */
        protected $name;
        /**
         * @var array List of preset classes
         */
        protected $presetRegistry;

        /**
         * Image feature can be feeded with an additional path to search for executables,
         * this getter returns the given input string (for Fluid)
         *
         * @return string
         */
        public function getAdditionalSearchPath() {}
    }

}

namespace TYPO3\CMS\Install\UpgradeAnalysis {
    /**
     * Provide information about documentation files
     */
    class DocumentationFile {
        /**
         * @var Registry
         */
        protected $registry;
        /**
         * @var array Unified array of used tags
         */
        protected $tagsTotal;
        /**
         * all files handled in this Class need to reside inside the changelog dir
         * this is a security measure to protect system files
         *
         * @var string
         */
        protected $changelogPath;

        public function __construct(Registry $registry = null, $changelogDir = '') {}
        public function findDocumentationFiles(string $path) : array {}
        public function getListEntry(string $file) : array {}
        protected function isRelevantFile(array $fileInfo) : bool {}
        protected function extractTags(array $file) : array {}
        protected function extractTagsFromFile(array $file) : array {}
        protected function extractCategoryFromHeadline(array $lines) : string {}
        protected function extractHeadline(array $lines) : string {}
        protected function extractIssueNumber(string $headline) : int {}
        protected function isRelevantDirectory(string $versionDirectory, string $version) : bool {}
        protected function getDocumentationFilesForVersion(string $docDirectory, string $version) : array {}
        protected function collectTagTotal($documentationFiles) : array {}
        /**
         * Return full tag list
         *
         * @return array
         */
        public function getTagsTotal() : array {}
        protected function isFileIgnoredByUsersChoice(string $filename) : bool {}
        protected function parseContent(string $rstContent) : string {}
    }

}

namespace TYPO3\CMS\Install\Composer {
    /**
     * Hook into Composer build to generate TYPO3 install tool entry script
     */
    class InstallerScripts implements \typo3\cms\composer\plugin\core\installerscriptsregistration {
        public static function register(Event $event, ScriptDispatcher $scriptDispatcher) {}
    }

}

namespace TYPO3\CMS\Install\ViewHelpers {
    /**
     * Utility class for phpinfo()
     * @internal
     */
    class PhpInfoViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var bool
         */
        protected $escapeOutput;
        /**
         * @var bool
         */
        protected $escapeChildren;

        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        /**
         * Get information about PHP's configuration
         *
         * @return string HTML page with the configuration options
         */
        protected static function getPhpInfo() {}
        protected static function removeAllHtmlOutsideBody($html) {}
        protected static function changeHtmlToHtml5($html) {}
    }

    /**
     * Render value of a constant
     *
     * @internal
     */
    class ConstantViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * A view helper exception
     */
    class Exception extends \typo3\cms\install\exception {}

}

namespace TYPO3\CMS\Install\ViewHelpers\Form {
    /**
     * View Helper for rendering extension configuration forms
     * @internal
     */
    class TypoScriptConstantsViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var array
         */
        public $viewHelperMapping;
        /**
         * @var string
         */
        public $tagName;

        /**
         * Initialize arguments of this view helper
         */
        public function initializeArguments() {}
        /**
         * Render
         *
         * @return string the rendered tag
         */
        public function render() : string {}
        protected function renderColorPicker(array $configuration) : string {}
        protected function renderOffsetField(array $configuration) : string {}
        protected function renderWrapField(array $configuration) : string {}
        protected function renderOptionSelect(array $configuration) : string {}
        protected function renderPositiveIntegerField(array $configuration) : string {}
        protected function renderIntegerField(array $configuration) : string {}
        protected function renderTextField(array $configuration) : string {}
        protected function renderSmallTextField(array $configuration) : string {}
        public function renderCheckbox(array $configuration) : string {}
        protected function renderUserFunction(array $configuration) : string {}
        protected function getName(array $configuration) : string {}
        protected function renderHiddenFieldForEmptyValue(array $configuration) : string {}
        /**
         * @return LanguageService|null Returns null if we are in the install tool standalone mode
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Install\ViewHelpers\Object {
    /**
     * View helper which allows you to access a key in an array.
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <i:object.key array="{array}" key="{key}" />
     * </code>
     * <output>
     * The key in the array, if it exists, otherwise an empty string.
     * </output>
     *
     * @internal
     */
    class ArrayValueByKeyViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Install\ViewHelpers\Format {
    /**
     * Transform PHP error code to readable text
     *
     * @internal
     */
    class PhpErrorCodeViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var array
         */
        static protected $levelNames;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Remove all spaces in a string
     *
     * @internal
     */
    class NoSpaceViewHelper extends \typo3\cms\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Install\ViewHelpers\Uri {
    /**
     * A view helper for creating URIs to install tool actions.
     *
     * = Examples =
     *
     * <code title="URI to the show-action of the current controller">
     * <f:uri.action action="importantActions" />
     * </code>
     * <output>
     * install.php?install[action]=importantActions&amp;install[context]=
     * </output>
     */
    class ActionViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Install\Updates {
    /**
     * Download extension from TER
     */
    abstract class AbstractDownloadExtensionUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;
        /**
         * See subclasses for more information
         * @var array
         */
        protected $extensionDetails;
        /**
         * @var string
         */
        protected $repositoryUrl;

/** @var $extensionInstallUtility InstallUtility */
        protected function installExtension(/** @var $extensionInstallUtility InstallUtility */
$extensionKey, /** @var $extensionInstallUtility InstallUtility */
$customMessage) {}
        protected function getExtensionDetails($extensionKey) {}
        protected function fetchExtension($extensionKey, $version) {}
        protected function fetchUrl($url) {}
    }

    /**
     * Merge URLs divided in pages.urltype and pages.url into pages.url
     */
    class MigrateUrlTypesInPagesUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;
        private $databaseTables;
        private $urltypes;

        public function checkForUpdate($description) : bool {}
        /**
         * Check each table if the column exists
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        protected function checkIfWizardIsNotRequired() : bool {}
        public function performUpdate(array $databaseQueries, $customMessage) : bool {}
    }

    /**
     * Upgrade wizard which goes through all files referenced in fe_users::image
     * and creates sys_file records as well as sys_file_reference records for each hit.
     */
    class FrontendUserImageUpdateWizard extends \typo3\cms\install\updates\abstractupdate {
        const RECORDS_PER_QUERY = 1000;

        /**
         * @var string
         */
        protected $title;
        /**
         * @var ResourceStorage
         */
        protected $storage;
        /**
         * @var Logger
         */
        protected $logger;
        /**
         * Table to migrate records from
         *
         * @var string
         */
        protected $table;
        /**
         * Table field holding the migration to be
         *
         * @var string
         */
        protected $fieldToMigrate;
        /**
         * the source file resides here
         *
         * @var string
         */
        protected $sourcePath;
        /**
         * target folder after migration
         * Relative to fileadmin
         *
         * @var string
         */
        protected $targetPath;
        /**
         * @var Registry
         */
        protected $registry;
        /**
         * @var string
         */
        protected $registryNamespace;
        /**
         * @var array
         */
        protected $recordOffset;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialize the storage repository.
         */
        public function init() {}
        public function checkForUpdate($description) {}
        public function performUpdate(array $dbQueries, $customMessage) {}
        protected function getRecordsFromTable($limit, $dbQueries) {}
/** @var File $file */
        protected function migrateField(/** @var File $file */
$row, /** @var File $file */
$customMessage, /** @var File $file */
$dbQueries) {}
    }

    /**
     * This is a generic updater to migrate content of TCA rows.
     *
     * Multiple classes implementing interface "RowUpdateInterface" can be
     * registered here, each for a specific update purpose.
     *
     * The updater fetches each row of all TCA registered tables and
     * visits the client classes who may modify the row content.
     *
     * The updater remembers for each class if it run through, so the updater
     * will be shown again if a new updater class is registered that has not
     * been run yet.
     *
     * A start position pointer is stored in the registry that is updated during
     * the run process, so if for instance the PHP process runs into a timeout,
     * the job can restart at the position it stopped.
     */
    class DatabaseRowsUpdateWizard extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string Title of this updater
         */
        protected $title;
        /**
         * @var array Single classes that may update rows
         */
        protected $rowUpdater;

        public function checkForUpdate($description) {}
/** @var RowUpdaterInterface[] $updaters */
        public function performUpdate(/** @var RowUpdaterInterface[] $updaters */
array $databaseQueries, /** @var RowUpdaterInterface[] $updaters */
$customMessage) {}
        /**
         * Return an array of class names that are not yet marked as done.
         *
         * @return array Class names
         */
        protected function getRowUpdatersToExecute() : array {}
        protected function setRowUpdaterExecuted(RowUpdaterInterface $updater) {}
        protected function getStartPosition(string $firstTable) : array {}
    }

    /**
     * Installs and downloads EXT:compatibility7 if needed
     */
    class Compatibility7ExtractionUpdate extends \typo3\cms\install\updates\abstractdownloadextensionupdate {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $extensionKey;
        /**
         * @var array
         */
        protected $extensionDetails;

        public function checkForUpdate($description) {}
        public function getUserInput($inputPrefix) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Fill translation source field (l10n_source)
     */
    class FillTranslationSourceField extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Update backend user setting startModule if set to "help_aboutmodules"
     */
    class StartModuleUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Contains the update class for filling the basic repository record of the extension manager
     */
    class ExtensionManagerTables extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        /**
         * Gets all create, add and change queries from ext_tables.sql
         *
         * @return array
         * @throws \BadFunctionCallException
         * @throws \Doctrine\DBAL\DBALException
         * @throws \Doctrine\DBAL\Schema\SchemaException
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\UnexpectedSignalReturnValueTypeException
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         * @throws \TYPO3\CMS\Extbase\SignalSlot\Exception\InvalidSlotException
         * @throws \TYPO3\CMS\Extbase\SignalSlot\Exception\InvalidSlotReturnException
         */
        protected function getUpdateStatements() {}
        /**
         * Get all CREATE TABLE statements from the ext_tables.sql file
         *
         * @return string[]
         * @throws \BadFunctionCallException
         * @throws \InvalidArgumentException
         */
        protected function getTableStatements() : array {}
        public function checkForUpdate($description) {}
        public function performUpdate(array $dbQueries, $customMessage) {}
    }

    /**
     * Installs and downloads EXT:rdct if cache_md5params is filled
     */
    class RedirectExtractionUpdate extends \typo3\cms\install\updates\abstractdownloadextensionupdate {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $extensionKey;
        /**
         * @var array
         */
        protected $extensionDetails;

        public function checkForUpdate($description) {}
        public function getUserInput($inputPrefix) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
        /**
         * Check if the database table "cache_md5params" exists and if so, if there are entries in the DB table.
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        protected function checkIfWizardIsRequired() : bool {}
    }

    /**
     * Class MigratePagesLanguageOverlayUpdate
     */
    class MigratePagesLanguageOverlayUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * The human-readable title of the upgrade wizard
         *
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function getUserInput($formFieldNamePrefix) {}
        public function performUpdate(array $dbQueries, $customMessage) {}
        /**
         * 1. Fetches ALL pages_language_overlay (= translations) records
         * 2. Fetches the given page record (= original language) for each translation
         * 3. Populates the values from the original language IF the field in the translation record is NOT SET (empty is fine)
         * 4. Adds proper fields for the translations which is
         *   - l10n_parent = UID of the original-language-record
         *   - pid = PID of the original-language-record (please note: THIS IS DIFFERENT THAN IN pages_language_overlay)
         *   - l10n_source = UID of the original-language-record (only this is supported currently)
         */
        protected function mergePagesLanguageOverlayIntoPages() {}
        /**
         * Inline relations with foreign_field, foreign_table, foreign_table_field on
         * pages_language_overlay TCA get their existing relations updated to new
         * uid and pages table.
         */
        protected function updateInlineRelations() {}
        /**
         * Update recuid and tablename of sys_history table to pages and new uid
         * for all pages_language_overlay rows
         */
        protected function updateSysHistoryRelations() {}
        protected function fetchDefaultLanguagePageRecord(int $pageId) : array {}
        protected function isOverlayRecordMigratedAlready(int $overlayUid) : bool {}
    }

    /**
     * Migrate bullet content element rendering from layout to bullets_type
     */
    class BulletContentElementUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Update backend user setting startModule if set to "help_aboutmodules" or "help_CshmanualCshmanual"
     */
    class BackendUserStartModuleUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Merge sessions from old fe_session_data table into new structure from fe_sessions
     */
    class MigrateFeSessionDataUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Migrate "fluid_styled_content" static template location
     */
    class MigrateFscStaticTemplateUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Installs and downloads EXT:rtehtmlarea if needed
     */
    class RteHtmlAreaExtractionUpdate extends \typo3\cms\install\updates\abstractdownloadextensionupdate {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $extensionKey;
        /**
         * @var array
         */
        protected $extensionDetails;

        public function checkForUpdate($description) {}
        public function getUserInput($inputPrefix) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Installs and downloads EXT:typo3db_legacy
     */
    class Typo3DbExtractionUpdate extends \typo3\cms\install\updates\abstractdownloadextensionupdate {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $extensionKey;
        /**
         * @var array
         */
        protected $extensionDetails;

        public function checkForUpdate($description) {}
        public function getUserInput($inputPrefix) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Merge access rights from be_groups concerning pages_language_overlay
     * into pages
     */
    class MigratePagesLanguageOverlayBeGroupsAccessRights extends \typo3\cms\install\updates\abstractupdate {
        /**
         * The human-readable title of the upgrade wizard
         *
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $dbQueries, $customMessage) {}
    }

    /**
     * Split menu types into dedicated content elements
     */
    class SplitMenusUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
        protected function mapMenuTypes($menuType) {}
    }

    /**
     * Installs and downloads EXT:func
     */
    class FuncExtractionUpdate extends \typo3\cms\install\updates\abstractdownloadextensionupdate {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $extensionKey;
        /**
         * @var array
         */
        protected $extensionDetails;

        public function checkForUpdate($description) {}
        public function getUserInput($inputPrefix) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Installs and downloads EXT:form_legacy if needed
     */
    class FormLegacyExtractionUpdate extends \typo3\cms\install\updates\abstractdownloadextensionupdate {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $extensionKey;
        /**
         * @var array
         */
        protected $extensionDetails;

        public function checkForUpdate($description) {}
        public function getUserInput($inputPrefix) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Merge data stored in sys_log that belongs to sys_history
     */
    class SeparateSysHistoryFromSysLogUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
/** @var RecordHistoryStore $store */
        public function performUpdate(/** @var RecordHistoryStore $store */
array $databaseQueries, /** @var RecordHistoryStore $store */
$customMessage) {}
        protected function checkIfFieldInTableExists($table, $fieldName) {}
    }

    /**
     * Migrate upload content element rendering from layout to uploads_type
     */
    class UploadContentElementUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
    }

    /**
     * Upgrade wizard which goes through all files referenced in backend_layout.icon
     * and creates sys_file records as well as sys_file_reference records for each hit.
     */
    class BackendLayoutIconUpdateWizard extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var ResourceStorage
         */
        protected $storage;
        /**
         * @var Logger
         */
        protected $logger;
        /**
         * Table to migrate records from
         *
         * @var string
         */
        protected $table;
        /**
         * Table field holding the migration to be
         *
         * @var string
         */
        protected $fieldToMigrate;
        /**
         * the source file resides here
         *
         * @var string
         */
        protected $sourcePath;
        /**
         * target folder after migration
         * Relative to fileadmin
         *
         * @var string
         */
        protected $targetPath;

        /**
         * Constructor
         */
        public function __construct() {}
        public function checkForUpdate($description) {}
        public function performUpdate(array $dbQueries, $customMessage) {}
        protected function getRecordsFromTable($dbQueries) {}
/** @var File $file */
        protected function migrateField(/** @var File $file */
$row, /** @var File $file */
$customMessage, /** @var File $file */
$dbQueries) {}
    }

    /**
     * Move "wizard done" flags to system registry
     */
    class WizardDoneToRegistry extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $dbQueries, $customMessage) {}
    }

    /**
     * Generic class that every update wizard class inherits from.
     * Used by the update wizard in the install tool.
     */
    abstract class AbstractUpdate {
        /**
         * The human-readable title of the upgrade wizard
         *
         * @var string
         */
        protected $title;
        /**
         * The update wizard identifier
         *
         * @var string
         */
        protected $identifier;
        /**
         * User input, set from outside
         *
         * @var string
         */
        public $userInput;

        /**
         * Returns the title attribute
         *
         * @return string The title of this update wizard
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * Returns the identifier of this class
         *
         * @return string The identifier of this update wizard
         */
        public function getIdentifier() {}
        public function setIdentifier($identifier) {}
        /**
         * Simple wrapper function that helps dealing with the compatibility
         * layer that some update wizards don't have a second parameter
         * thus, it evaluates everything already
         *
         * @return bool If the wizard should be shown at all on the overview page
         * @see checkForUpdate()
         */
        public function shouldRenderWizard() {}
        protected function checkIfTableExists($table) {}
        abstract public function checkForUpdate($description) ;
        abstract public function performUpdate(array $dbQueries, $customMessage) ;
/** @var $installUtility \TYPO3\CMS\Extensionmanager\Utility\InstallUtility */
        protected function installExtensions(/** @var $installUtility \TYPO3\CMS\Extensionmanager\Utility\InstallUtility */
array $extensionKeys) {}
        protected function markWizardAsDone($confValue = 1) {}
        /**
         * Checks if this wizard has been "done" before
         *
         * @return bool TRUE if wizard has been done before, FALSE otherwise
         */
        protected function isWizardDone() {}
    }

    /**
     * Migrate the field 'section_frame' for all content elements to 'frame_class'
     */
    class SectionFrameToFrameClassUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
        protected function mapSectionFrame($sectionFrame) {}
    }

    /**
     * Remove all backend users starting with _CLI_
     */
    class CommandLineBackendUserRemovalUpdate extends \typo3\cms\install\updates\abstractupdate {
        /**
         * @var string
         */
        protected $title;

        public function checkForUpdate($description) {}
        public function getUserInput($formFieldNamePrefix) {}
        public function performUpdate(array $databaseQueries, $customMessage) {}
        /**
         * Find all backend users starting with _CLI_ that are not deleted yet.
         *
         * @return array a list of uids
         */
        protected function getUnneededCommandLineUsers() {}
    }

}

namespace TYPO3\CMS\Install\Updates\RowUpdater {
    /**
     * Migrate values for database records having columns
     * using "l10n_mode" set to "mergeIfNotBlank" or "exclude".
     */
    class L10nModeUpdater implements \typo3\cms\install\updates\rowupdater\rowupdaterinterface {
        /**
         * List of tables with information about to migrate fields.
         * Created during hasPotentialUpdateForTable(), used in updateTableRow()
         *
         * @var array
         */
        protected $payload;

        /**
         * Get title
         *
         * @return string
         */
        public function getTitle() : string {}
        public function hasPotentialUpdateForTable(string $tableName) : bool {}
        public function updateTableRow(string $tableName, array $inputRow) : array {}
        protected function getL10nModePayloadForTable(string $tableName) : array {}
        protected function getRow(string $tableName, int $id) {}
    }

    /**
     * Move '<link ...' syntax to '<a href' in rte fields
     */
    class RteLinkSyntaxUpdater implements \typo3\cms\install\updates\rowupdater\rowupdaterinterface {
        /**
         * Table list with field list that may have links them
         *
         * @var array
         */
        protected $tableFieldListToConsider;
        /**
         * @var array Table names that should be ignored.
         */
        protected $blackListedTables;
        /**
         * Regular expressions to match the <link ...>content</link> inside
         * @var array
         */
        protected $regularExpressions;
        /**
         * @var LoggerInterface
         */
        protected $logger;

        /**
         * Get title
         *
         * @return string Title
         */
        public function getTitle() : string {}
        public function hasPotentialUpdateForTable(string $tableName) : bool {}
        public function updateTableRow(string $tableName, array $row) : array {}
        protected function transformLinkTagsIfFound(string $tableName, string $fieldName, array $row, bool $isFlexformField) {}
    }

    /**
     * Migrate values for database records having columns
     * using "l10n_mode" set to "mergeIfNotBlank".
     */
    class ImageCropUpdater implements \typo3\cms\install\updates\rowupdater\rowupdaterinterface {
        /**
         * List of tables with information about to migrate fields.
         * Created during hasPotentialUpdateForTable(), used in updateTableRow()
         *
         * @var array
         */
        protected $payload;

        /**
         * Get title
         *
         * @return string
         */
        public function getTitle() : string {}
        public function hasPotentialUpdateForTable(string $tableName) : bool {}
        public function updateTableRow(string $tableName, array $inputRow) : array {}
        protected function getPayloadForTable(string $tableName) : array {}
        private function getFile(array $row, $fieldName) {}
    }


    /**
     * Interface each single row updater must implement.
     */
    interface RowUpdaterInterface {
        /**
         * Get a description of this single row updater
         *
         * @return string
         */
        function getTitle() : string ;
        function hasPotentialUpdateForTable(string $tableName) : bool ;
        function updateTableRow(string $tableName, array $row) : array ;
    }

}

namespace TYPO3\CMS\Install\Controller {
    /**
     * Install step controller, dispatcher class of step actions.
     */
    class InstallerController {
        /**
         * Init action loads <head> with JS initiating further stuff
         *
         * @return ResponseInterface
         */
        public function initAction() : ResponseInterface {}
        /**
         * Main layout with progress bar, header
         *
         * @return ResponseInterface
         */
        public function mainLayoutAction() : ResponseInterface {}
        /**
         * Render "FIRST_INSTALL file need to exist" view
         *
         * @return ResponseInterface
         */
        public function showInstallerNotAvailableAction() : ResponseInterface {}
        /**
         * Check if "environment and folders" should be shown
         *
         * @return ResponseInterface
         */
        public function checkEnvironmentAndFoldersAction() : ResponseInterface {}
        /**
         * Render "environment and folders"
         *
         * @return ResponseInterface
         */
        public function showEnvironmentAndFoldersAction() : ResponseInterface {}
        /**
         * Create main folder layout, LocalConfiguration, PackageStates
         *
         * @return ResponseInterface
         */
        public function executeEnvironmentAndFoldersAction() : ResponseInterface {}
        /**
         * Check if trusted hosts pattern needs to be adjusted
         *
         * @return ResponseInterface
         */
        public function checkTrustedHostsPatternAction() : ResponseInterface {}
        /**
         * Adjust trusted hosts pattern to '.*' if it does not match yet
         *
         * @return ResponseInterface
         */
        public function executeAdjustTrustedHostsPatternAction() : ResponseInterface {}
        /**
         * Execute silent configuration update. May be called multiple times until success = true is returned.
         *
         * @return ResponseInterface success = true if no change has been done
         */
        public function executeSilentConfigurationUpdateAction() : ResponseInterface {}
        /**
         * Check if database connect step needs to be shown
         *
         * @return ResponseInterface
         */
        public function checkDatabaseConnectAction() : ResponseInterface {}
        /**
         * Show database connect step
         *
         * @return ResponseInterface
         */
        public function showDatabaseConnectAction() : ResponseInterface {}
        public function executeDatabaseConnectAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Check if a database needs to be selected
         *
         * @return ResponseInterface
         */
        public function checkDatabaseSelectAction() : ResponseInterface {}
        /**
         * Render "select a database"
         *
         * @return ResponseInterface
         */
        public function showDatabaseSelectAction() : ResponseInterface {}
        public function executeDatabaseSelectAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Check if initial data needs to be imported
         *
         * @return ResponseInterface
         */
        public function checkDatabaseDataAction() : ResponseInterface {}
        /**
         * Render "import initial data"
         *
         * @return ResponseInterface
         */
        public function showDatabaseDataAction() : ResponseInterface {}
        public function executeDatabaseDataAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Show last "create empty site / install distribution"
         *
         * @return ResponseInterface
         */
        public function showDefaultConfigurationAction() : ResponseInterface {}
        public function executeDefaultConfigurationAction(ServerRequestInterface $request) : ResponseInterface {}
        protected function initializeStandaloneView(string $templatePath) : StandaloneView {}
        /**
         * Test connection with given credentials and return exception message if exception trown
         *
         * @return bool
         */
        protected function isDatabaseConnectSuccessful() : bool {}
        /**
         * Check LocalConfiguration.php for required database settings:
         * - 'username' and 'password' are mandatory, but may be empty
         *
         * @return bool TRUE if required settings are present
         */
        protected function isDatabaseConfigurationComplete() {}
        /**
         * Returns configured socket, if set.
         *
         * @return string
         */
        protected function getDatabaseConfiguredMysqliSocket() {}
        /**
         * Try to fetch db credentials from a .env file and see if connect works
         *
         * @return array Empty array if no file is found or connect is not successful, else working credentials
         */
        protected function getDatabaseConfigurationFromEnvironment() : array {}
        /**
         * Returns list of available databases (with access-check based on username/password)
         *
         * @return array List of available databases
         */
        protected function getDatabaseList() {}
        protected function createNewDatabase($dbName) {}
        protected function isValidDatabaseName($databaseName) {}
        protected function checkExistingDatabase($dbName) {}
        protected function getDefaultDatabaseCharset(string $dbName) : string {}
        protected function getHashedPassword($password) {}
        /**
         * Create tables and import static rows
         *
         * @return FlashMessage[]
         */
        protected function importDatabaseData() {}
        /**
         * Some actions like the database analyzer and the upgrade wizards need additional
         * bootstrap actions performed.
         *
         * Those actions can potentially fatal if some old extension is loaded that triggers
         * a fatal in ext_localconf or ext_tables code! Use only if really needed.
         */
        protected function loadExtLocalconfDatabaseAndExtTables() {}
    }

    /**
     * Backend module controller to the install tool. Sets an install tool session
     * marked as "initialized by a valid system administrator backend user" and
     * redirects to the install tool entry point.
     *
     * This is a classic backend module that does not interfere with other code
     * within the install tool, it can be seen as a facade around install tool just
     * to embed the install tool in backend.
     */
    class BackendModuleController {
        public function maintenanceAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        public function settingsAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        public function upgradeAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        public function environmentAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        protected function setAuthorizedAndRedirect(string $controller) : ResponseInterface {}
    }

    /**
     * Login controller
     */
    class LoginController extends \typo3\cms\install\controller\abstractcontroller {
        public function showEnableInstallToolFileAction(ServerRequestInterface $request) : ResponseInterface {}
        public function showLoginAction(ServerRequestInterface $request) : ResponseInterface {}
    }

    /**
     * Layout controller
     *
     * Renders a first "load the Javascript in <head>" view, and the
     * main layout of the install tool in second action.
     */
    class LayoutController extends \typo3\cms\install\controller\abstractcontroller {
        public function initAction(ServerRequestInterface $request) : ResponseInterface {}
        public function mainLayoutAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Execute silent configuration update. May be called multiple times until success = true is returned.
         *
         * @return ResponseInterface success = true if no change has been done
         */
        public function executeSilentConfigurationUpdateAction() : ResponseInterface {}
        /**
         * Legacy ajax call. This silent updater takes care that all extensions configured in LocalConfiguration
         * EXT/extConf serialized array are "upmerged" to arrays within EXTENSIONS if this extension does not
         * exist in EXTENSIONS yet.
         *
         * @return ResponseInterface
         * @deprecated since core v9, will be removed with core v10
         */
        public function executeSilentLegacyExtConfExtensionConfigurationUpdateAction() : ResponseInterface {}
        /**
         * Synchronize TYPO3_CONF_VARS['EXTENSIONS'] with possibly new defaults from extensions
         * ext_conf_template.txt files. This make LocalConfiguration the only source of truth for
         * extension configuration and it is always up to date, also if an extension has been
         * updated.
         *
         * @return ResponseInterface
         */
        public function executeSilentExtensionConfigurationSynchronizationAction() : ResponseInterface {}
        private function removeDotsFromArrayKeysRecursive(array $settings) : array {}
    }

    /**
     * Upgrade controller
     */
    class UpgradeController extends \typo3\cms\install\controller\abstractcontroller {
        /**
         * @var CoreUpdateService
         */
        protected $coreUpdateService;
        /**
         * @var CoreVersionService
         */
        protected $coreVersionService;
        /**
         * Matcher registry of extension scanner.
         * Node visitors that implement CodeScannerInterface
         *
         * @var array
         */
        protected $matchers;

        public function cardsAction(ServerRequestInterface $request) : ResponseInterface {}
        public function coreUpdateActivateAction(ServerRequestInterface $request) : ResponseInterface {}
        public function coreUpdateCheckPreConditionsAction(ServerRequestInterface $request) : ResponseInterface {}
        public function coreUpdateDownloadAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Check for new core
         *
         * @return ResponseInterface
         */
        public function coreUpdateIsUpdateAvailableAction() : ResponseInterface {}
        public function coreUpdateMoveAction(ServerRequestInterface $request) : ResponseInterface {}
        public function coreUpdateUnpackAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Update available core version list
         *
         * @return ResponseInterface
         */
        public function coreUpdateUpdateVersionMatrixAction() : ResponseInterface {}
        public function coreUpdateVerifyChecksumAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Get list of loaded extensions
         *
         * @return ResponseInterface
         */
        public function extensionCompatTesterLoadedExtensionListAction() : ResponseInterface {}
        public function extensionCompatTesterLoadExtLocalconfAction(ServerRequestInterface $request) : ResponseInterface {}
        public function extensionCompatTesterLoadExtTablesAction(ServerRequestInterface $request) : ResponseInterface {}
        public function extensionCompatTesterUninstallExtensionAction(ServerRequestInterface $request) : ResponseInterface {}
/** @var $file SplFileInfo */
        public function extensionScannerFilesAction(/** @var $file SplFileInfo */
ServerRequestInterface $request) : ResponseInterface {}
/** @var $restFile SplFileInfo */
        public function extensionScannerMarkFullyScannedRestFilesAction(/** @var $restFile SplFileInfo */
ServerRequestInterface $request) : ResponseInterface {}
/** @var SplFileInfo $restFile */
        public function extensionScannerScanFileAction(/** @var SplFileInfo $restFile */
ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Check if loading ext_tables.php files still changes TCA
         *
         * @return ResponseInterface
         */
        public function tcaExtTablesCheckAction() : ResponseInterface {}
        /**
         * Check TCA for needed migrations
         *
         * @return ResponseInterface
         */
        public function tcaMigrationsCheckAction() : ResponseInterface {}
        public function upgradeDocsGetContentAction(ServerRequestInterface $request) : ResponseInterface {}
        public function upgradeDocsMarkReadAction(ServerRequestInterface $request) : ResponseInterface {}
        public function upgradeDocsUnmarkReadAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Check if new tables and fields should be added before executing wizards
         *
         * @return ResponseInterface
         */
        public function upgradeWizardsBlockingDatabaseAddsAction() : ResponseInterface {}
        /**
         * Add new tables and fields
         *
         * @return ResponseInterface
         */
        public function upgradeWizardsBlockingDatabaseExecuteAction() : ResponseInterface {}
        /**
         * Fix a broken DB charset setting
         *
         * @return ResponseInterface
         */
        public function upgradeWizardsBlockingDatabaseCharsetFixAction() : ResponseInterface {}
        /**
         * Test if database charset is ok
         *
         * @return ResponseInterface
         */
        public function upgradeWizardsBlockingDatabaseCharsetTestAction() : ResponseInterface {}
        /**
         * Get list of upgrade wizards marked as done
         *
         * @return ResponseInterface
         */
        public function upgradeWizardsDoneUpgradesAction() : ResponseInterface {}
        public function upgradeWizardsExecuteAction(ServerRequestInterface $request) : ResponseInterface {}
        public function upgradeWizardsInputAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * List available upgrade wizards
         *
         * @return ResponseInterface
         */
        public function upgradeWizardsListAction() : ResponseInterface {}
        public function upgradeWizardsMarkUndoneAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Execute silent database field adds like cache framework tables
         *
         * @return ResponseInterface
         */
        public function upgradeWizardsSilentUpgradesAction() : ResponseInterface {}
        /**
         * Initialize the core upgrade actions
         *
         * @throws \RuntimeException
         */
        protected function coreUpdateInitialize() {}
        protected function coreUpdateGetVersionToHandle(ServerRequestInterface $request) : string {}
        protected function extensionCompatTesterLoadExtLocalconfForExtension($extensionKey, array $extension) {}
        protected function extensionCompatTesterLoadExtTablesForExtension($extensionKey, array $extension) {}
        /**
         * Get a list of '.rst' files and their details for "Upgrade documentation" view.
         *
         * @return array
         */
        protected function getDocumentationFiles() : array {}
        protected function extensionScannerGetLineFromFile(string $file, int $lineNumber) : string {}
    }

    /**
     * Controller abstract for shared parts of the install tool
     */
    class AbstractController {
        protected function initializeStandaloneView(ServerRequestInterface $request, string $templatePath) : StandaloneView {}
        /**
         * Some actions like the database analyzer and the upgrade wizards need additional
         * bootstrap actions performed.
         *
         * Those actions can potentially fatal if some old extension is loaded that triggers
         * a fatal in ext_localconf or ext_tables code! Use only if really needed.
         */
        protected function loadExtLocalconfDatabaseAndExtTables() {}
    }

    /**
     * Maintenance controller
     */
    class MaintenanceController extends \typo3\cms\install\controller\abstractcontroller {
        public function cardsAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Clear cache framework and opcode caches
         *
         * @return ResponseInterface
         */
        public function cacheClearAllAction() : ResponseInterface {}
        /**
         * Clear typo3temp files statistics action
         *
         * @return ResponseInterface
         */
        public function clearTypo3tempFilesStatsAction() : ResponseInterface {}
        public function clearTypo3tempFilesAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Dump autoload information
         *
         * @return ResponseInterface
         */
        public function dumpAutoloadAction() : ResponseInterface {}
        /**
         * Analyze current database situation
         *
         * @return ResponseInterface
         */
        public function databaseAnalyzerAnalyzeAction() : ResponseInterface {}
        public function databaseAnalyzerExecuteAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Clear table overview statistics action
         *
         * @return ResponseInterface
         */
        public function clearTablesStatsAction() : ResponseInterface {}
        public function clearTablesClearAction(ServerRequestInterface $request) : ResponseInterface {}
        public function createAdminAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Set 'uc' field of all backend users to empty string
         *
         * @return ResponseInterface
         */
        public function resetBackendUserUcAction() : ResponseInterface {}
    }

    /**
     * Settings controller
     */
    class SettingsController extends \typo3\cms\install\controller\abstractcontroller {
        public function cardsAction(ServerRequestInterface $request) : ResponseInterface {}
        public function changeInstallToolPasswordAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Return a list of possible and active system maintainers
         *
         * @return ResponseInterface
         */
        public function systemMaintainerGetListAction() : ResponseInterface {}
        public function systemMaintainerWriteAction(ServerRequestInterface $request) : ResponseInterface {}
        public function localConfigurationGetContentAction(ServerRequestInterface $request) : ResponseInterface {}
        public function localConfigurationWriteAction(ServerRequestInterface $request) : ResponseInterface {}
        public function presetsGetContentAction(ServerRequestInterface $request) : ResponseInterface {}
        public function presetsActivateAction(ServerRequestInterface $request) : ResponseInterface {}
        public function extensionConfigurationGetContentAction(ServerRequestInterface $request) : ResponseInterface {}
        public function extensionConfigurationWriteAction(ServerRequestInterface $request) : ResponseInterface {}
    }

    /**
     * Environment controller
     */
    class EnvironmentController extends \typo3\cms\install\controller\abstractcontroller {
        public function cardsAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Get environment status
         *
         * @return ResponseInterface
         */
        public function environmentCheckGetStatusAction() : ResponseInterface {}
        /**
         * Get folder structure status
         *
         * @return ResponseInterface
         */
        public function folderStructureGetStatusAction() : ResponseInterface {}
        /**
         * Try to fix folder structure errors
         *
         * @return ResponseInterface
         */
        public function folderStructureFixAction() : ResponseInterface {}
        public function mailTestAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Create true type font test image
         *
         * @return ResponseInterface
         */
        public function imageProcessingTrueTypeAction() : ResponseInterface {}
        /**
         * Convert to jpg from jpg
         *
         * @return ResponseInterface
         */
        public function imageProcessingReadJpgAction() : ResponseInterface {}
        /**
         * Convert to jpg from gif
         *
         * @return ResponseInterface
         */
        public function imageProcessingReadGifAction() : ResponseInterface {}
        /**
         * Convert to jpg from png
         *
         * @return ResponseInterface
         */
        public function imageProcessingReadPngAction() : ResponseInterface {}
        /**
         * Convert to jpg from tif
         *
         * @return ResponseInterface
         */
        public function imageProcessingReadTifAction() : ResponseInterface {}
        /**
         * Convert to jpg from pdf
         *
         * @return ResponseInterface
         */
        public function imageProcessingReadPdfAction() : ResponseInterface {}
        /**
         * Convert to jpg from ai
         *
         * @return ResponseInterface
         */
        public function imageProcessingReadAiAction() : ResponseInterface {}
        /**
         * Writing gif test
         *
         * @return ResponseInterface
         */
        public function imageProcessingWriteGifAction() : ResponseInterface {}
        /**
         * Writing png test
         *
         * @return ResponseInterface
         */
        public function imageProcessingWritePngAction() : ResponseInterface {}
        /**
         * Scaling transparent files - gif to gif
         *
         * @return ResponseInterface
         */
        public function imageProcessingGifToGifAction() : ResponseInterface {}
        /**
         * Scaling transparent files - png to png
         *
         * @return ResponseInterface
         */
        public function imageProcessingPngToPngAction() : ResponseInterface {}
        /**
         * Scaling transparent files - gif to jpg
         *
         * @return ResponseInterface
         */
        public function imageProcessingGifToJpgAction() : ResponseInterface {}
        /**
         * Combine images with gif mask
         *
         * @return ResponseInterface
         */
        public function imageProcessingCombineGifMaskAction() : ResponseInterface {}
        /**
         * Combine images with jpg mask
         *
         * @return ResponseInterface
         */
        public function imageProcessingCombineJpgMaskAction() : ResponseInterface {}
        /**
         * GD with simple box
         *
         * @return ResponseInterface
         */
        public function imageProcessingGdlibSimpleAction() : ResponseInterface {}
        /**
         * GD from image with box
         *
         * @return ResponseInterface
         */
        public function imageProcessingGdlibFromFileAction() : ResponseInterface {}
        /**
         * GD with text
         *
         * @return ResponseInterface
         */
        public function imageProcessingGdlibRenderTextAction() : ResponseInterface {}
        /**
         * GD with text, niceText
         *
         * @return ResponseInterface
         */
        public function imageProcessingGdlibNiceTextAction() : ResponseInterface {}
        /**
         * GD with text, niceText, shadow
         *
         * @return ResponseInterface
         */
        public function imageProcessingGdlibNiceTextShadowAction() : ResponseInterface {}
        /**
         * Initialize image processor
         *
         * @return GraphicalFunctions Initialized image processor
         */
        protected function initializeImageProcessor() : GraphicalFunctions {}
        /**
         * Determine ImageMagick / GraphicsMagick version
         *
         * @return string Version
         */
        protected function determineImageMagickVersion() : string {}
        protected function convertImageFormatsToJpg(string $inputFormat) : ResponseInterface {}
        /**
         * Get details about all configured database connections
         *
         * @return array
         */
        protected function getDatabaseConnectionInformation() : array {}
        /**
         * Get sender address from configuration
         * ['TYPO3_CONF_VARS']['MAIL']['defaultMailFromAddress']
         * If this setting is empty fall back to 'no-reply@example.com'
         *
         * @return string Returns an email address
         */
        protected function getSenderEmailAddress() : string {}
        /**
         * Gets sender name from configuration
         * ['TYPO3_CONF_VARS']['MAIL']['defaultMailFromName']
         * If this setting is empty, it falls back to a default string.
         *
         * @return string
         */
        protected function getSenderEmailName() : string {}
        /**
         * Gets email subject from configuration
         * ['TYPO3_CONF_VARS']['SYS']['sitename']
         * If this setting is empty, it falls back to a default string.
         *
         * @return string
         */
        protected function getEmailSubject() : string {}
        protected function getImageTestResponse(array $testResult) : ResponseInterface {}
        /**
         * Create a 'image generation failed' message
         *
         * @return FlashMessage
         */
        protected function imageGenerationFailedMessage() : FlashMessage {}
        /**
         * Find out if ImageMagick or GraphicsMagick is enabled and set up
         *
         * @return bool TRUE if enabled and path is set
         */
        protected function isImageMagickEnabledAndConfigured() : bool {}
        /**
         * Create a 'imageMagick disabled' message
         *
         * @return FlashMessage
         */
        protected function imageMagickDisabledMessage() : FlashMessage {}
        protected function getImagesPath(GraphicalFunctions $imageProcessor) : string {}
    }

}

namespace TYPO3\CMS\Install\SystemEnvironment {
    /**
     * Check system environment status
     *
     * This class is a hardcoded requirement check of the underlying
     * server and PHP system.
     *
     * The class *must not* check for any TYPO3 specific things like
     * specific configuration values or directories. It should not fail
     * if there is no TYPO3 at all.
     *
     * The only core code used is the class loader
     *
     * This class is instantiated as the *very first* class during
     * installation. It is meant to be *standalone* und must not have
     * any requirements, except the status classes. It must be possible
     * to run this script separated from the rest of the core, without
     * dependencies.
     *
     * This means especially:
     * * No hooks or anything like that
     * * No usage of *any* TYPO3 code like GeneralUtility
     * * No require of anything but the status classes
     * * No localization
     *
     * The status messages and title *must not* include HTML, use plain
     * text only. The return values of this class are not bound to HTML
     * and can be used in different scopes (eg. as json array).
     */
    class Check implements \typo3\cms\install\systemenvironment\checkinterface {
        /**
         * @var FlashMessageQueue
         */
        protected $messageQueue;
        /**
         * @var array List of required PHP extensions
         */
        protected $requiredPhpExtensions;
        /**
         * @var string[]
         */
        protected $suggestedPhpExtensions;

        /**
         * Get all status information as array with status objects
         *
         * @return FlashMessageQueue
         */
        public function getStatus() : FlashMessageQueue {}
        /**
         * Checks if current directory (.) is in PHP include path
         */
        protected function checkCurrentDirectoryIsInIncludePath() {}
        /**
         * Check if file uploads are enabled in PHP
         */
        protected function checkFileUploadEnabled() {}
        /**
         * Check maximum post upload size correlates with maximum file upload
         */
        protected function checkPostUploadSizeIsHigherOrEqualMaximumFileUploadSize() {}
        /**
         * Check memory settings
         */
        protected function checkMemorySettings() {}
        /**
         * Check minimum PHP version
         */
        protected function checkPhpVersion() {}
        /**
         * Check PRCE module is loaded and minimum version
         */
        protected function checkPcreVersion() {}
        /**
         * Check maximum execution time
         */
        protected function checkMaxExecutionTime() {}
        /**
         * Check for disabled functions
         */
        protected function checkDisableFunctions() {}
        /**
         * Verify that mysqli.reconnect is set to 0 in order to avoid improper reconnects
         */
        protected function checkMysqliReconnectSetting() {}
        /**
         * Check for doc_root ini setting
         */
        protected function checkDocRoot() {}
        /**
         * Check open_basedir
         */
        protected function checkOpenBaseDir() {}
        /**
         * If xdebug is loaded, the default max_nesting_level of 100 must be raised
         */
        protected function checkXdebugMaxNestingLevel() {}
        /**
         * Check accessibility and functionality of OpenSSL
         */
        protected function checkOpenSslInstalled() {}
        /**
         * Get max_input_vars status
         */
        protected function checkMaxInputVars() {}
        /**
         * Check doc comments can be fetched by reflection
         */
        protected function checkReflectionDocComment() {}
        /**
         * Checks thread stack size if on windows with apache
         */
        protected function checkWindowsApacheThreadStackSize() {}
        protected function checkPhpExtension(string $extension, bool $required = true, string $purpose = '') {}
        /**
         * Check imagecreatetruecolor to verify gdlib works as expected
         */
        protected function checkGdLibTrueColorSupport() {}
        /**
         * Check gif support of GD library
         */
        protected function checkGdLibGifSupport() {}
        /**
         * Check jgp support of GD library
         */
        protected function checkGdLibJpgSupport() {}
        /**
         * Check png support of GD library
         */
        protected function checkGdLibPngSupport() {}
        /**
         * Check gdlib supports freetype
         */
        protected function checkGdLibFreeTypeSupport() {}
        protected function isValidIp($ip) {}
        /**
         * Test if this instance runs on windows OS
         *
         * @return bool TRUE if operating system is windows
         */
        protected function isWindowsOs() {}
        protected function trimExplode($delimiter, $string) {}
        protected function getBytesFromSizeMeasurement($measurement) {}
    }

    /**
     * Check TYPO3 setup status
     *
     * This class is a hardcoded requirement check for the TYPO3 setup.
     *
     * The status messages and title *must not* include HTML, use plain
     * text only. The return values of this class are not bound to HTML
     * and can be used in different scopes (eg. as json array).
     */
    class SetupCheck implements \typo3\cms\install\systemenvironment\checkinterface {
        /**
         * @var FlashMessageQueue
         */
        protected $messageQueue;

        /**
         * Get all status information as array with status objects
         *
         * @return FlashMessageQueue
         */
        public function getStatus() : FlashMessageQueue {}
        /**
         * Checks the status of the trusted hosts pattern check
         */
        protected function checkTrustedHostPattern() {}
        /**
         * Check if it is possible to download external data (e.g. TER)
         * Either allow_url_fopen must be enabled or curl must be used
         */
        protected function checkDownloadsPossible() {}
        /**
         * Check if systemLocale setting is correct (locale exists in the OS)
         */
        protected function checkSystemLocale() {}
        /**
         * Checks whether we can use file names with UTF-8 characters.
         * Configured system locale must support UTF-8 when UTF8filesystem is set
         */
        protected function checkLocaleWithUTF8filesystem() {}
        /**
         * Check if some opcode cache is loaded
         */
        protected function checkSomePhpOpcodeCacheIsLoaded() {}
        /**
         * Create true type font test image
         */
        protected function isTrueTypeFontWorking() {}
        /**
         * Check for bug in libxml
         */
        protected function checkLibXmlBug() {}
    }

    /**
     * Check database configuration status
     *
     * This class is a hardcoded requirement check for the database server.
     *
     * The status messages and title *must not* include HTML, use plain
     * text only. The return values of this class are not bound to HTML
     * and can be used in different scopes (eg. as json array).
     */
    class DatabaseCheck implements \typo3\cms\install\systemenvironment\checkinterface {
        /**
         * List of database platforms to check
         *
         * @var array
         */
        protected $databasePlatformChecks;

        /**
         * Get status of each database platform defined in the list
         *
         * @return FlashMessageQueue
         */
        public function getStatus() : FlashMessageQueue {}
    }


    /**
     * Check system environment status
     *
     * This interface needs to be implemented by hardcoded requirement
     * checks of the underlying server and PHP system.
     *
     * The status messages and title *must not* include HTML, use
     * plain text only. The return values of this class can be used
     * in different scopes (eg. as json array).
     */
    interface CheckInterface {
        /**
         * Get all status information as array with status objects
         *
         * @return FlashMessageQueue
         */
        function getStatus() : FlashMessageQueue ;
    }

}

namespace TYPO3\CMS\Install\SystemEnvironment\DatabasePlatform {
    /**
     * Check database configuration status for MySQL server
     *
     * This class is a hardcoded requirement check for the database server.
     *
     * The status messages and title *must not* include HTML, use plain
     * text only. The return values of this class are not bound to HTML
     * and can be used in different scopes (eg. as json array).
     */
    class MySqlCheck implements \typo3\cms\install\systemenvironment\checkinterface {
        /**
         * @var FlashMessageQueue
         */
        protected $messageQueue;
        /**
         * Minimum supported MySQL version
         *
         * @var string
         */
        protected $minimumMySQLVersion;
        /**
         * List of MySQL modes that are incompatible with TYPO3 CMS
         *
         * @var array
         */
        protected $incompatibleSqlModes;

        /**
         * Get all status information as array with status objects
         *
         * @return FlashMessageQueue
         * @throws \InvalidArgumentException
         * @throws \Doctrine\DBAL\DBALException
         */
        public function getStatus() : FlashMessageQueue {}
        protected function checkInvalidSqlModes(Connection $connection) {}
        protected function checkMysqlVersion(Connection $connection) {}
        protected function checkMysqlDatabaseUtf8Status(Connection $connection) {}
        protected function getIncompatibleSqlModes(Connection $connection) : array {}
    }

    /**
     * Check database configuration status for PostgreSQL
     *
     * This class is a hardcoded requirement check for the database server.
     *
     * The status messages and title *must not* include HTML, use plain
     * text only. The return values of this class are not bound to HTML
     * and can be used in different scopes (eg. as json array).
     */
    class PostgreSqlCheck implements \typo3\cms\install\systemenvironment\checkinterface {
        /**
         * @var FlashMessageQueue
         */
        protected $messageQueue;
        /**
         * Minimum supported PostgreSQL Server version
         *
         * @var string
         */
        protected $minimumPostgreSQLVerion;
        /**
         * Minimum supported libpq version
         * @var string
         */
        protected $minimumLibPQVersion;

        /**
         * Get all status information as array with status objects
         *
         * @return FlashMessageQueue
         * @throws \Doctrine\DBAL\DBALException
         * @throws \InvalidArgumentException
         */
        public function getStatus() : FlashMessageQueue {}
        protected function checkPostgreSqlVersion(Connection $connection) {}
        /**
         * Check the version of ligpq within the PostgreSQL driver
         */
        protected function checkLibpqVersion() {}
    }

}

namespace TYPO3\CMS\Install\Http {
    define('TYPO3_MODE', 'BE');

    /**
     * Entry point for the TYPO3 Install Tool
     */
    class Application implements \typo3\cms\core\core\applicationinterface {
        /**
         * @var Bootstrap
         */
        protected $bootstrap;
        /**
         * Number of subdirectories where the entry script is located, relative to PATH_site
         * @var int
         */
        protected $entryPointLevel;
        /**
         * All available request handlers that can handle an install tool request
         * @var array
         */
        protected $availableRequestHandlers;

        public function __construct($classLoader) {}
        public function run(callable $execute = null) {}
        /**
         * Set caching to NullBackend, install tool must not cache anything
         */
        protected function disableCachingFramework() {}
        /**
         * Define constants
         */
        protected function defineLegacyConstants() {}
    }

    /**
     * Request handler to walk through the web installation process of TYPO3
     */
    class InstallerRequestHandler implements \typo3\cms\core\http\requesthandlerinterface {
        public function handleRequest(ServerRequestInterface $request) : ResponseInterface {}
        public function canHandleRequest(ServerRequestInterface $request) {}
        /**
         * Returns the priority - how eager the handler is to actually handle the request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() : int {}
        /**
         * @throws \RuntimeException If installer is not available due to missing FIRST_INSTALL
         */
        protected function throwIfInstallerIsNotAvailable() {}
        /**
         * @return bool TRUE if FIRST_INSTALL file exists
         */
        protected function isInstallerAvailable() : bool {}
    }

    /**
     * Default request handler for all requests inside the TYPO3 Install Tool, which does a simple hardcoded
     * dispatching to a controller based on the get/post variable.
     */
    class RequestHandler implements \typo3\cms\core\http\requesthandlerinterface {
        /**
         * Instance of the current TYPO3 bootstrap
         * @var Bootstrap
         */
        protected $bootstrap;
        /**
         * @var array List of valid controllers
         */
        protected $controllers;

        public function __construct(Bootstrap $bootstrap) {}
/** @var AbstractController $controller */
        public function handleRequest(/** @var AbstractController $controller */
ServerRequestInterface $request) : ResponseInterface {}
        public function canHandleRequest(ServerRequestInterface $request) {}
        /**
         * Returns the priority - how eager the handler is to actually handle the request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() {}
        /**
         * Checks if ENABLE_INSTALL_TOOL exists.
         *
         * @return bool
         */
        protected function checkEnableInstallToolFile() {}
        /**
         * Initialize session object.
         * Subclass will throw exception if session can not be created or if
         * preconditions like a valid encryption key are not set.
         *
         * @return SessionService
         */
        protected function initializeSession() {}
        protected function checkSessionToken(ServerRequestInterface $request, SessionService $session) : bool {}
        protected function checkSessionLifetime(SessionService $session) : bool {}
    }

}

namespace TYPO3\CMS\Install\Report {
    /**
     * Provides an environment status report
     */
    class EnvironmentStatusReport implements \typo3\cms\reports\statusproviderinterface, \typo3\cms\reports\extendedstatusproviderinterface {
        /**
         * Compile environment status report
         *
         * @return Status[]
         */
        public function getStatus() {}
        /**
         * Returns the detailed status of an extension or (sub)system
         *
         * @return Status[]
         */
        public function getDetailedStatus() {}
        protected function getStatusInternal($verbose) {}
    }

    /**
     * Provides an status report of the security of the install tool
     */
    class SecurityStatusReport implements \typo3\cms\reports\statusproviderinterface {
        /**
         * Compiles a collection of system status checks as a status report.
         *
         * @return Status[]
         */
        public function getStatus() {}
        /**
         * Checks whether the Install Tool password is set to its default value.
         *
         * @return Status An object representing the security of the install tool password
         */
        protected function getInstallToolPasswordStatus() {}
        /**
         * Checks for the existence of the ENABLE_INSTALL_TOOL file.
         *
         * @return Status An object representing whether ENABLE_INSTALL_TOOL exists
         */
        protected function getInstallToolProtectionStatus() {}
        /**
         * Executes commands like removing the Install Tool enable file.
         */
        protected function executeAdminCommand() {}
    }

    /**
     * Provides an installation status report.
     */
    class InstallStatusReport implements \typo3\cms\reports\statusproviderinterface {
        /**
         * Compiles a collection of system status checks as a status report.
         *
         * @return Status[]
         */
        public function getStatus() {}
        /**
         * Checks for several directories being writable.
         *
         * @return Status Indicates status of the file system
         */
        protected function getFileSystemStatus() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function getRemainingUpdatesStatus() {}
        /**
         * Checks if there is a new minor TYPO3 version to update to.
         *
         * @return Status Represents whether there is a new version available online
         */
        protected function getNewVersionStatus() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Install\Service {
    /**
     * Service handling bulk read and write of LocalConfiguration values.
     *
     * Used by "Configure global settings" / "All configuration" view.
     */
    class LocalConfigurationValueService {
        /**
         * Get up configuration data. Prepares main TYPO3_CONF_VARS
         * array to be displayed and merges is with the description file
         *
         * @return array Configuration data
         */
        public function getCurrentConfigurationData() : array {}
        protected function recursiveConfigurationFetching(array $sections, array $sectionsFromCurrentConfiguration, array $descriptions, array $path = [ ]) : array {}
        public function updateLocalConfigurationValues(array $valueList) : FlashMessageQueue {}
        /**
         * Returns an array of available sections and their description
         *
         * @return string[]
         */
        public function getSpeakingSectionNames() : array {}
        /**
         * Read descriptions from description file
         *
         * @return array
         */
        protected function getDefaultConfigArrayComments() : array {}
    }

    /**
     * Service class to manage typo3temp/assets folder cleanup
     */
    class Typo3tempFileService {
        /**
         * Returns a list of directory names in typo3temp/assets and their number of files
         *
         * @return array
         */
        public function getDirectoryStatistics() {}
        /**
         * Clear processed files
         *
         * The sys_file_processedfile table is truncated and the physical files of local storages are deleted.
         *
         * @return int 0 if all went well, if >0 this number of files couldn't be deleted
         */
        public function clearProcessedFiles() {}
/** @var $file SplFileInfo */
        public function clearAssetsFolder(/** @var $file SplFileInfo */
string $folderName) {}
    }

    /**
     * Basic service to clear caches within the install tool.
     * This is NOT an API class, it is for internal use in the install tool only.
     */
    class ClearCacheService {
        /**
         * This clear cache implementation follows a pretty brutal approach.
         * Goal is to reliably get rid of cache entries, even if some broken
         * extension is loaded that would kill the backend 'clear cache' action.
         *
         * Therefor this method "knows" implementation details of the cache
         * framework and uses them to clear all file based cache (typo3temp/Cache)
         * and database caches (tables prefixed with cf_) manually.
         *
         * After that ext_tables and ext_localconf of extensions are loaded, those
         * may register additional caches in the caching framework with different
         * backend, and will then clear them with the usual flush() method.
         */
        public function clearAll() {}
    }

    /**
     * Service handling clearing and statistics of semi-persistent
     * core tables.
     */
    class ClearTableService {
        /**
         * @var array List of table and their description
         */
        protected $tableList;

        /**
         * Get an array of all affected tables, a short description and their row counts
         *
         * @return array Details per table
         */
        public function getTableStatistics() : array {}
        public function clearSelectedTable(string $tableName) {}
    }

    /**
     * Service class helping managing upgrade wizards
     */
    class UpgradeWizardsService {
        /**
         * Force creation / update of caching framework tables that are needed by some update wizards
         *
         * @return array List of executed statements
         */
        public function silentCacheFrameworkTableSchemaMigration() : array {}
        /**
         * @return array List of wizards marked as done in registry
         */
        public function listOfWizardsDoneInRegistry() : array {}
        /**
         * @return array List of row updaters marked as done in registry
         * @throws \RuntimeException
         */
        public function listOfRowUpdatersDoneInRegistry() : array {}
        public function markWizardUndoneInRegistry(string $identifier) : bool {}
        /** $var Index $addedIndex */
        public function getBlockingDatabaseAdds() : array {}
        /**
         * Add missing tables, indexes and fields to DB.
         */
        public function addMissingTablesAndFields() {}
        /**
         * True if DB main charset on mysql is utf8
         *
         * @return bool True if charset is ok
         */
        public function isDatabaseCharsetUtf8() : bool {}
        /**
         * Set default connection MySQL database charset to utf8.
         * Should be called only *if* default database connection is actually MySQL
         */
        public function setDatabaseCharsetUtf8() {}
        /**
         * Get list of registered upgrade wizards.
         *
         * @return array List of upgrade wizards in correct order with detail information
         */
        public function getUpgradeWizardsList() : array {}
        public function getWizardUserInput(string $identifier) : array {}
        public function executeWizard(string $identifier, array $postValues = [ ]) : FlashMessageQueue {}
    }

    /**
     * Basic Service to check and create install tool files
     */
    class EnableFileService {
        const FIRST_INSTALL_FILE_PATH = 'FIRST_INSTALL';
        const INSTALL_TOOL_ENABLE_FILE_LIFETIME = 3600;
        const INSTALL_TOOL_ENABLE_FILE_PATH = 'typo3conf/ENABLE_INSTALL_TOOL';

        /**
         * Path site property, needed for unit testing
         *
         * @var string
         */
        static protected $sitePath;

        /**
         * @return bool
         */
        public static function isFirstInstallAllowed() {}
        /**
         * Creates the INSTALL_TOOL_ENABLE file
         *
         * @return bool
         */
        public static function createInstallToolEnableFile() {}
        /**
         * Removes the INSTALL_TOOL_ENABLE file
         *
         * @return bool
         */
        public static function removeInstallToolEnableFile() {}
        /**
         * Removes the FIRST_INSTALL file
         *
         * @return bool
         */
        public static function removeFirstInstallFile() {}
        /**
         * Checks if the install tool file exists
         *
         * @return bool
         */
        public static function installToolEnableFileExists() {}
        /**
         * Checks if the install tool file exists
         *
         * @return bool
         */
        public static function checkInstallToolEnableFile() {}
        /**
         * Checks if the install tool file should be kept
         *
         * @return bool
         */
        public static function isInstallToolEnableFilePermanent() {}
        /**
         * Checks if the lifetime of the install tool file is expired
         *
         * @return bool
         */
        public static function installToolEnableFileLifetimeExpired() {}
        /**
         * Updates the last modification of the ENABLE_INSTALL_TOOL file
         */
        protected static function extendInstallToolEnableFileLifetime() {}
        /**
         * Returns the path to the INSTALL_TOOL_ENABLE file
         *
         * @return string
         */
        protected static function getInstallToolEnableFilePath() {}
        /**
         * Returns the paths to the FIRST_INSTALL files
         *
         * @return array
         */
        protected static function getFirstInstallFilePaths() {}
    }

    /**
     * Core update service.
     * This service handles core updates, all the nasty details are encapsulated
     * here. The single public methods 'depend' on each other, for example a new
     * core has to be downloaded before it can be unpacked.
     *
     * Each method returns only TRUE of FALSE indicating if it was successful or
     * not. Detailed information can be fetched with getMessages() and will return
     * a list of status messages of the previous operation.
     */
    class CoreUpdateService {
        /**
         * @var \TYPO3\CMS\Install\Service\CoreVersionService
         */
        protected $coreVersionService;
        /**
         * @var FlashMessageQueue
         */
        protected $messages;
        /**
         * Absolute path to download location
         *
         * @var string
         */
        protected $downloadTargetPath;
        /**
         * Absolute path to the symlink pointing to the currently used TYPO3 core files
         *
         * @var string
         */
        protected $symlinkToCoreFiles;
        /**
         * Base URI for TYPO3 downloads
         *
         * @var string
         */
        protected $downloadBaseUri;

        public function __construct(CoreVersionService $coreVersionService = null) {}
        /**
         * Check if this installation wants to enable the core updater
         *
         * @return bool
         */
        public function isCoreUpdateEnabled() {}
        /**
         * In future implementations we might implement some smarter logic here
         *
         * @return string
         */
        protected function discoverCurrentCoreSymlink() {}
        protected function setDownloadTargetPath($downloadTargetPath) {}
        /**
         * Get messages of previous method call
         *
         * @return FlashMessageQueue
         */
        public function getMessages() : FlashMessageQueue {}
        /**
         * Wrapper method for CoreVersionService
         *
         * @return bool TRUE on success
         */
        public function updateVersionMatrix() {}
        public function checkPreConditions($version) {}
        public function downloadVersion($version) {}
        public function verifyFileChecksum($version) {}
        public function unpackVersion($version) {}
        public function moveVersion($version) {}
        public function activateVersion($version) {}
        protected function getDownloadTarGzTargetPath($version) {}
        protected function getRelativePath($absolutePath) {}
        protected function checkCoreFilesAvailable($version) {}
    }

    /**
     * Core version service
     */
    class CoreVersionService {
        /**
         * @var \TYPO3\CMS\Core\Registry
         */
        protected $registry;
        /**
         * Base URI for TYPO3 downloads
         *
         * @var string
         */
        protected $downloadBaseUri;

        public function __construct(Registry $registry = null) {}
        /**
         * @return mixed
         */
        public function getDownloadBaseUri() {}
        /**
         * Update version matrix from remote and store in registry
         *
         * @throws Exception\RemoteFetchException
         */
        public function updateVersionMatrix() {}
        /**
         * Development git checkout versions always end with '-dev'. They are
         * not "released" as such and can not be updated.
         *
         * @return bool FALSE If some development version is installed
         */
        public function isInstalledVersionAReleasedVersion() {}
        public function getTarGzSha1OfVersion($version) {}
        /**
         * Get current installed version number
         *
         * @return string
         */
        public function getInstalledVersion() {}
        /**
         * Checks if TYPO3 version (e.g. 6.2) is an actively maintained version
         *
         * @return bool TRUE if version is actively maintained
         */
        public function isVersionActivelyMaintained() {}
        /**
         * Returns TRUE if a younger patch level release exists in version matrix.
         *
         * @return bool TRUE if younger patch release is exists
         */
        public function isYoungerPatchReleaseAvailable() {}
        /**
         * Returns TRUE if a younger patch level release exists in version matrix that may be a development release.
         *
         * @return bool TRUE if younger patch release is exists
         */
        public function isYoungerPatchDevelopmentReleaseAvailable() {}
        /**
         * Returns TRUE if an upgrade from current version is security relevant
         *
         * @return bool TRUE if there is a pending security update
         */
        public function isUpdateSecurityRelevant() {}
        /**
         * Youngest patch release, e.g., 6.2.2
         *
         * @return string Version string of youngest patch level release
         */
        public function getYoungestPatchRelease() {}
        /**
         * Youngest development patch release, e.g., 6.2.0alpha3 or 6.2-snapshot-20131004
         *
         * @return string
         */
        public function getYoungestPatchDevelopmentRelease() {}
        protected function getYoungestReleaseByType(array $types) {}
        /**
         * Get 'major version' from installed version of TYPO3, e.g., '7' from '7.3.0'
         *
         * @return string For example 7
         */
        protected function getInstalledMajorVersion() {}
        protected function getMajorVersion($version) {}
        /**
         * Get version matrix from registry
         *
         * @return array
         * @throws Exception
         */
        protected function getVersionMatrix() {}
        /**
         * Get available version string from get.typo3.org
         *
         * @return array
         * @throws Exception\RemoteFetchException
         */
        protected function fetchVersionMatrixFromRemote() {}
        protected function getReleaseTimestampOfVersion($version) {}
        protected function ensureVersionExistsInMatrix($version) {}
    }

    /**
     * Utility for dealing with ext_conf_template settings and their instance
     * specific LocalConfiguration settings. This class is @internal and only
     * used by extension manager and install tool itself.
     *
     * Extension authors should use TYPO3\CMS\Core\Configuration\ExtensionConfiguration
     * class to get() and set() extension configuration settings.
     *
     * @internal
     */
    class ExtensionConfigurationService {
        /**
         * TypoScript hierarchy being build.
         * Used parsing ext_conf_template.txt
         *
         * @var array
         */
        protected $setup;
        /**
         * Raw data, the input string exploded by LF.
         * Used parsing ext_conf_template.txt
         *
         * @var array
         */
        protected $raw;
        /**
         * Pointer to entry in raw data array.
         * Used parsing ext_conf_template.txt
         *
         * @var int
         */
        protected $rawPointer;
        /**
         * Holding the value of the last comment
         * Used parsing ext_conf_template.txt
         *
         * @var string
         */
        protected $lastComment;
        /**
         * Internal flag to create a multi-line comment (one of those like /* ... * /)
         * Used parsing ext_conf_template.txt
         *
         * @var bool
         */
        protected $commentSet;
        /**
         * Internally set, when in brace. Counter.
         * Used parsing ext_conf_template.txt
         *
         * @var int
         */
        protected $inBrace;
        /**
         * This will be filled with the available categories of the current template.
         * Used parsing ext_conf_template.txt
         *
         * @var array
         */
        protected $subCategories;

        /**
         * If there are new config settings in ext_conf_template of an extenison,
         * they are found here and synchronized to LocalConfiguration['EXTENSIONS'].
         *
         * Used when entering the install tool and during installation.
         */
        public function synchronizeExtConfTemplateWithLocalConfigurationOfAllExtensions() {}
        public function synchronizeExtConfTemplateWithLocalConfiguration(string $extensionKey) {}
        public function getConfigurationPreparedForView(string $extensionKey) : array {}
        protected function getExtConfTablesWithoutCommentsAsNestedArrayWithoutDots(string $extensionKey) {}
        protected function buildConfigurationArray(array $configurationOption) : array {}
        protected function extractInformationForConfigFieldsOfTypeOptions(array $configurationOption) : array {}
        protected function extractInformationForConfigFieldsOfTypeUser(array $configurationOption) : array {}
        protected function getDefaultConfigurationFromExtConfTemplateAsValuedArray(string $extensionKey) : array {}
        protected function getDefaultConfigurationRawString(string $extensionKey) : string {}
        protected function parseComments($flatSetup) {}
        protected function parseSub(array $setup) {}
        protected function rollParseSub($string, array $setup) {}
        protected function setVal($string, array $setup, $value) {}
        protected function parseNextKeySegment($key) {}
        protected function removeCommentsAndDotsRecursive(array $config) : array {}
        protected function flattenSetup($setupArray, $prefix = '') {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Service for loading the TCA
     */
    class LoadTcaService {
        /**
         * Load TCA
         * Mostly a copy of ExtensionManagementUtility to include TCA without migrations.
         * To be used in install tool only.
         *
         * This will set up $GLOBALS['TCA']
         *
         * @see \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::buildBaseTcaFromSingleFiles
         */
        public function loadExtensionTablesWithoutMigration() {}
        public function loadSingleExtTablesFile(string $extensionKey) {}
    }

    /**
     * Secure session handling for the install tool.
     */
    class SessionService implements \typo3\cms\core\singletoninterface {
        /**
         * The path to our typo3temp/var/ (where we can write our sessions). Set in the
         * constructor.
         *
         * @var string
         */
        private $basePath;
        /**
         * Path where to store our session files in typo3temp. %s will be
         * non-guessable.
         *
         * @var string
         */
        private $sessionPath;
        /**
         * the cookie to store the session ID of the install tool
         *
         * @var string
         */
        private $cookieName;
        /**
         * time (minutes) to expire an unused session
         *
         * @var int
         */
        private $expireTimeInMinutes;
        /**
         * time (minutes) to generate a new session id for our current session
         *
         * @var int
         */
        private $regenerateSessionIdTime;

        /**
         * Constructor. Starts PHP session handling in our own private store
         *
         * Side-effect: might set a cookie, so must be called before any other output.
         */
        public function __construct() {}
        /**
         * Returns the path where to store our session files
         *
         * @throws \TYPO3\CMS\Install\Exception
         * @return string Session save path
         */
        private function getSessionSavePath() {}
        private function ensureSessionSavePathExists($sessionSavePath) {}
        /**
         * Starts a new session
         *
         * @return string The session ID
         */
        public function startSession() {}
        /**
         * Destroys a session
         */
        public function destroySession() {}
        /**
         * Reset session. Sets _SESSION to empty array.
         */
        public function resetSession() {}
        /**
         * Generates a new session ID and sends it to the client.
         *
         * @return string the new session ID
         */
        private function renewSession() {}
        /**
         * Checks whether we already have an active session.
         *
         * @return bool TRUE if there is an active session, FALSE otherwise
         */
        public function hasSession() {}
        /**
         * Returns the session ID of the running session.
         *
         * @return string the session ID
         */
        public function getSessionId() {}
        private function getSessionHash($sessionId = '') {}
        /**
         * Marks this session as an "authorized" one (login successful).
         * Should only be called if:
         * a) we have a valid session running
         * b) the "password" or some other authorization mechanism really matched
         */
        public function setAuthorized() {}
        /**
         * Marks this session as an "authorized by backend user" one.
         * This is called by BackendModuleController from backend context.
         */
        public function setAuthorizedBackendSession() {}
        /**
         * Check if we have an already authorized session
         *
         * @return bool TRUE if this session has been authorized before (by a correct password)
         */
        public function isAuthorized() {}
        /**
         * Check if we have an authorized session from a system maintainer
         *
         * @return bool TRUE if this session has been authorized before and initialized by a backend system maintainer
         */
        public function isAuthorizedBackendUserSession() {}
        /**
         * Check if our session is expired.
         * Useful only right after a FALSE "isAuthorized" to see if this is the
         * reason for not being authorized anymore.
         *
         * @return bool TRUE if an authorized session exists, but is expired
         */
        public function isExpired() {}
        /**
         * Refreshes our session information, rising the expire time.
         * Also generates a new session ID every 5 minutes to minimize the risk of
         * session hijacking.
         */
        public function refreshSession() {}
        public function addMessage(FlashMessage $message) {}
        /**
         * Return stored session messages and flush.
         *
         * @return FlashMessage[] Messages
         */
        public function getMessagesAndFlush() {}
        private function getSessionFile($id) {}
        public function open($savePath, $sessionName) {}
        /**
         * Close function. See @session_set_save_handler
         *
         * @return bool
         */
        public function close() {}
        public function read($id) {}
        public function write($id, $sessionData) {}
        public function destroy($id) {}
        public function gc($maxLifeTime) {}
        /**
         * Writes the session data at the end, to overcome a PHP APC bug.
         *
         * Writes the session data in a proper context that is not affected by the APC bug:
         * http://pecl.php.net/bugs/bug.php?id=16721.
         *
         * This behaviour was introduced in #17511, where self::write() made use of GeneralUtility
         * which due to the APC bug throws a "Fatal error: Class 'GeneralUtility' not found"
         * (and the session data is not saved). Calling session_write_close() at this point
         * seems to be the most easy solution, according to PHP author.
         */
        public function __destruct() {}
    }

    /**
     * A service exception
     */
    class Exception extends \typo3\cms\install\exception {}

    /**
     * Execute "silent" LocalConfiguration upgrades if needed.
     *
     * Some LocalConfiguration settings are obsolete or changed over time.
     * This class handles upgrades of these settings. It is called by
     * the step controller at an early point.
     *
     * Every change is encapsulated in one method an must throw a ConfigurationChangedException
     * if new data is written to LocalConfiguration. This is caught by above
     * step controller to initiate a redirect and start again with adapted configuration.
     */
    class SilentConfigurationUpgradeService {
        /**
         * @var \TYPO3\CMS\Core\Configuration\ConfigurationManager
         */
        protected $configurationManager;
        /**
         * List of obsolete configuration options in LocalConfiguration to be removed
         * Example:
         *    // #forge-ticket
         *    'BE/somesetting',
         *
         * @var array
         */
        protected $obsoleteLocalConfigurationSettings;

        public function __construct(ConfigurationManager $configurationManager = null) {}
        /**
         * Executed configuration upgrades. Single upgrade methods must throw a
         * ConfigurationChangedException if something was written to LocalConfiguration.
         */
        public function execute() {}
        /**
         * Some settings in LocalConfiguration vanished in DefaultConfiguration
         * and have no impact on the core anymore.
         * To keep the configuration clean, those old settings are just silently
         * removed from LocalConfiguration if set.
         */
        protected function removeObsoleteLocalConfigurationSettings() {}
        /**
         * Backend login security is set to rsa if rsaauth
         * is installed (but not used) otherwise the default value "normal" has to be used.
         * This forces either 'normal' or 'rsa' to be set in LocalConfiguration.
         */
        protected function configureBackendLoginSecurity() {}
        /**
         * The encryption key is crucial for securing form tokens
         * and the whole TYPO3 link rendering later on. A random key is set here in
         * LocalConfiguration if it does not exist yet. This might possible happen
         * during upgrading and will happen during first install.
         */
        protected function generateEncryptionKeyIfNeeded() {}
        /**
         * Parse old curl and HTTP options and set new HTTP options, related to Guzzle
         */
        protected function transferHttpSettings() {}
        /**
         * Detail configuration of Image Magick settings must be cleared
         * if Image Magick handling is disabled.
         *
         * "Configuration presets" in install tool is not type safe, so value
         * comparisons here are not type safe too, to not trigger changes to
         * LocalConfiguration again.
         */
        protected function disableImageMagickDetailSettingsIfImageMagickIsDisabled() {}
        /**
         * Detail configuration of Image Magick and Graphics Magick settings
         * depending on main values.
         *
         * "Configuration presets" in install tool is not type safe, so value
         * comparisons here are not type safe too, to not trigger changes to
         * LocalConfiguration again.
         */
        protected function setImageMagickDetailSettings() {}
        /**
         * Migrate the definition of the image processor from the configuration value
         * im_version_5 to the setting processor.
         */
        protected function migrateImageProcessorSetting() {}
        /**
         * Throw exception after configuration change to trigger a redirect.
         *
         * @throws ConfigurationChangedException
         */
        protected function throwConfigurationChangedException() {}
        /**
         * Migrate the configuration value thumbnails_png to a boolean value.
         */
        protected function migrateThumbnailsPngSetting() {}
        /**
         * Migrate the configuration setting BE/lockSSL to boolean if set in the LocalConfiguration.php file
         */
        protected function migrateLockSslSetting() {}
        /**
         * Move the database connection settings to a "Default" connection
         */
        protected function migrateDatabaseConnectionSettings() {}
        /**
         * Migrate the configuration setting DB/Connections/Default/charset to 'utf8' as
         * 'utf-8' is not supported by all MySQL versions.
         */
        protected function migrateDatabaseConnectionCharset() {}
        /**
         * Migrate the configuration setting DB/Connections/Default/driverOptions to array type.
         */
        protected function migrateDatabaseDriverOptions() {}
        /**
         * Migrate the configuration setting BE/lang/debug if set in the LocalConfiguration.php file
         */
        protected function migrateLangDebug() {}
        /**
         * Migrate single cache hash related options under "FE" into "FE/cacheHash"
         */
        protected function migrateCacheHashOptions() {}
        /**
         * Migrate SYS/exceptionalErrors to not contain E_USER_DEPRECATED
         */
        protected function migrateExceptionErrors() {}
    }

}

namespace TYPO3\CMS\Install\Service\Exception {
    /**
     * An exception thrown if the silent configuration updater changed configuration
     */
    class ConfigurationChangedException extends \typo3\cms\install\service\exception {}

    /**
     * An exception thrown if fetching a resource from a remote server fails
     */
    class RemoteFetchException extends \typo3\cms\install\service\exception\coreversionserviceexception {}

    /**
     * An exception thrown if version validation against official version matrix fails
     */
    class CoreVersionServiceException extends \typo3\cms\install\service\exception {}

}

namespace TYPO3\CMS\Install\ExtensionScanner {
    /**
     * Interface to be implemented by all classes which can search and find code places.
     */
    interface CodeScannerInterface {
        /**
         * Each match is an array with detail information
         *
         * @return array
         */
        function getMatches() : array ;
    }

}

namespace TYPO3\CMS\Install\ExtensionScanner\Php {
    /**
     * Create a fully qualified class name object from first argument of
     * GeneralUtility::makeInstance('My\\Package\\Class\\Name') if given as string
     * and not as My\Package\Class\Name::class language construct.
     *
     * This resolver is to be called after generic NameResolver::class, but before
     * other search and find visitors that implement CodeScannerInterface::class
     */
    class GeneratorClassesResolver extends \phpparser\nodevisitorabstract {
        public function enterNode(Node $node) {}
    }

    /**
     * A visitor doing some counting.
     * It sums the number of ignored lines and lines of effective code.
     */
    class CodeStatistics extends \phpparser\nodevisitorabstract {
        /**
         * @var int True if a class statement has @extensionScannerIgnoreFile
         */
        protected $isCurrentFileIgnored;
        /**
         * @var int Counts @extensionScannerIgnoreLine statements
         */
        protected $numberOfIgnoreLines;
        /**
         * @var int Number of effective code lines - class and method statements, function calls ...
         */
        protected $numberOfEffectiveCodeLines;
        /**
         * @var int Current line number given not is in, runtime helper var
         */
        protected $currentLineNumber;

        public function enterNode(Node $node) {}
        /**
         * True if a @extensionScannerIgnoreFile has been found.
         * Called externally *after* traversing
         *
         * @return int
         */
        public function isFileIgnored() {}
        /**
         * Number of "effective" code lines: No comments, no empty lines,
         * but "class" statements, "function" statements, "use xy", etc.
         * Called externally *after* traversing
         *
         * @return int
         */
        public function getNumberOfEffectiveCodeLines() {}
        /**
         * Returns number of found @extensionScannerIgnoreLine comments
         * Called externally *after* traversing
         *
         * @return int
         */
        public function getNumberOfIgnoredLines() {}
    }

    /**
     * Factory preparing matcher instances
     */
    class MatcherFactory {
        public function createAll(array $matcherConfigurations) {}
    }

}

namespace TYPO3\CMS\Install\ExtensionScanner\Php\Matcher {
    /**
     * Find usages of properties which were removed / deprecated.
     */
    class PropertyPublicMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Match method usages where arguments "in between" are unused but not given as "null":
     *
     * public function foo($arg1, $unsused1 = null, $unused2 = null, $arg4)
     * but called with:
     * ->foo('arg1', 'notNull', null, 'arg4');
     */
    class MethodArgumentUnusedMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher implements \typo3\cms\install\extensionscanner\codescannerinterface {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of class constants.
     *
     * Test for "Class\Name::THE_CONSTANT", matches are considered "strong"
     */
    class ClassConstantMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of method calls which were removed / deprecated.
     * This is a "weak" match since we're just testing for method name
     * but not connected class.
     */
    class MethodCallMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of method calls which changed signature and added required arguments.
     * This is a "weak" match since we're just testing for method name
     * but not connected class.
     */
    class MethodArgumentRequiredMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher implements \typo3\cms\install\extensionscanner\codescannerinterface {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Single "core matcher" classes extend from this.
     * It brings a set of protected methods to help single matcher classes doing common stuff.
     * This abstract extends the nikic/php-parser NodeVisitorAbstract which implements the main
     * parser interface, and it implements the TYPO3 specific CodeScannerInterface to retrieve matches.
     */
    abstract class AbstractCoreMatcher extends \phpparser\nodevisitorabstract implements \typo3\cms\install\extensionscanner\codescannerinterface {
        /**
         * Incoming main configuration array.
         *
         * @var array
         */
        protected $matcherDefinitions;
        /**
         * @var array List of accumulated matches
         */
        protected $matches;
        /**
         * Helper property containing an array derived from $this->matcherDefinitions
         * created in __construct() if needed.
         *
         * @var array
         */
        protected $flatMatcherDefinitions;
        /**
         * @var int Helper variable for ignored line detection
         */
        protected $currentCodeLine;
        /**
         * @var bool True if line with $lastIgnoredLineNumber is ignored
         */
        protected $isCurrentLineIgnored;
        /**
         * @var bool True if the entire file is ignored due to a @extensionScannerIgnoreFile class comment
         */
        protected $isFullFileIgnored;

        /**
         * Return list of matches after processing
         *
         * @return array
         */
        public function getMatches() : array {}
        protected function validateMatcherDefinitions(array $requiredArrayKeys = [ ]) {}
        /**
         * Initialize helper lookup array $this->flatMatcherDefinitions.
         * For class\name->foo matcherDefinitions, it creates a helper array
         * containing only the method name as array keys for "weak" matches.
         *
         * If methods with the same name from different classes are defined,
         * a "candidate" array is created containing details of single possible
         * matches for further analysis.
         *
         * @throws \RuntimeException
         */
        protected function initializeFlatMatcherDefinitions() {}
        protected function isArgumentUnpackingUsed(array $arguments = [ ]) : bool {}
        protected function isLineIgnored(Node $node) : bool {}
        protected function isFileIgnored(Node $node) : bool {}
    }

    /**
     * Find usages of global function calls which were removed / deprecated.
     * This is a strong match.
     */
    class FunctionCallMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of class constants.
     *
     * Test for "THE_CONSTANT", matches are considered "strong"
     */
    class ConstantMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Match access to a one dimensional $GLOBAL array
     * Example "$GLOBALS['TYPO3_DB']"
     */
    class ArrayGlobalMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of static method calls which were removed / deprecated.
     * This is a "strong" match if class name is given and "weak" if not.
     */
    class MethodArgumentDroppedStaticMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher implements \typo3\cms\install\extensionscanner\codescannerinterface {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of method annotations
     */
    class MethodAnnotationMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Matches interface method arguments which have been dropped.
     *
     * This does *not* test if a class implements an interface.
     * The scanner only looks for:
     * - Class method names not having specified number of arguments
     * - Method calls with given method name not having this number of arguments
     */
    class InterfaceMethodChangedMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of static method calls which were removed / deprecated.
     *
     * This match is performed either is case of a direct "foo\bar::aMethod()" call
     * as "strong" match, or as only "::aMethod()" as "weak" match.
     *
     * As additional indicator, the number of required, mandatory arguments is
     * recognized: If calling a static method as "$foo::aMethod($arg1), but the
     * method needs two arguments, this is *not* considered a match. This would
     * have raised a fatal PHP error anyway and this is nothing we test here.
     */
    class MethodCallStaticMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of class / interface names which are entirely deprecated or removed
     */
    class ClassNameMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of property annotations
     */
    class PropertyAnnotationMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
/** @var PropertyProperty $property */
        public function enterNode(/** @var PropertyProperty $property */
Node $node) {}
    }

    /**
     * Find usages of dropped configuration values and hook registrations.
     * Matches on "last" key only.
     * Definition of $GLOBALS['foo']['bar'] and usage as $foo['bar'] matches.
     */
    class ArrayDimensionMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
        /**
         * Prepare 'lastKey' => [$details] array in flatMatcherDefinitions
         */
        protected function initializeLastArrayKeyNameArray() {}
    }

    /**
     * Find usages of properties which have been made protected and are
     * not called in $this context.
     */
    class PropertyProtectedMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

    /**
     * Find usages of method calls which changed signature and dropped arguments,
     * but are called with more arguments.
     * This is a "weak" match since we're just testing for method name
     * but not connected class.
     */
    class MethodArgumentDroppedMatcher extends \typo3\cms\install\extensionscanner\php\matcher\abstractcorematcher implements \typo3\cms\install\extensionscanner\codescannerinterface {
        public function __construct(array $matcherDefinitions) {}
        public function enterNode(Node $node) {}
    }

}

namespace TYPO3\CMS\Install\Authentication {
    /**
     * Authenticates a user (currently comparing it through the install tool password, but could be extended)
     */
    class AuthenticationService {
        /**
         * @var SessionService
         */
        protected $sessionService;

        public function __construct(SessionService $sessionService) {}
        public function loginWithPassword($password = null) : bool {}
        /**
         * If install tool login mail is set, send a mail for a successful login.
         */
        protected function sendLoginSuccessfulMail() {}
        /**
         * If install tool login mail is set, send a mail for a failed login.
         */
        protected function sendLoginFailedMail() {}
        /**
         * Get sender address from configuration
         * ['TYPO3_CONF_VARS']['MAIL']['defaultMailFromAddress']
         * If this setting is empty fall back to 'no-reply@example.com'
         *
         * @return string Returns an email address
         */
        protected function getSenderEmailAddress() {}
        /**
         * Gets sender name from configuration
         * ['TYPO3_CONF_VARS']['MAIL']['defaultMailFromName']
         * If this setting is empty, it falls back to a default string.
         *
         * @return string
         */
        protected function getSenderEmailName() {}
    }

}

namespace TYPO3\CMS\Install\FolderStructure {
    /**
     * Service class to check the default folder permissions
     */
    class DefaultPermissionsCheck {
        /**
         * @var array Recommended values for a secure production site
         *
         * These are not the default settings (which are 0664/2775), because they might not work on every installation.
         * For security reasons these are the recommended values nevertheless (no world-readable files).
         * It's up to the admins to decide if these recommended secure values can be applied to their installation.
         */
        protected $recommended;
        /**
         * @var array Verbose names of the settings
         */
        protected $names;

        public function getMaskStatus($which) : FlashMessage {}
    }

    /**
     * A link
     */
    class LinkNode extends \typo3\cms\install\folderstructure\abstractnode implements \typo3\cms\install\folderstructure\nodeinterface {
        /**
         * @var string Optional link target
         */
        protected $target;

        public function __construct(array $structure, NodeInterface $parent = null) {}
        /**
         * Get own status
         * Returns information status if running on Windows
         * Returns OK status if is link and possible target is correct
         * Else returns error (not fixable)
         *
         * @return FlashMessage[]
         */
        public function getStatus() : array {}
        /**
         * Fix structure
         *
         * If there is nothing to fix, returns an empty array
         *
         * @return FlashMessage[]
         */
        public function fix() : array {}
        /**
         * Get link target
         *
         * @return string Link target
         */
        protected function getTarget() {}
        /**
         * Find out if node is a link
         *
         * @throws Exception\InvalidArgumentException
         * @return bool TRUE if node is a link
         */
        protected function isLink() {}
        /**
         * Checks if the real link target is identical to given target
         *
         * @throws Exception\InvalidArgumentException
         * @return bool TRUE if target is correct
         */
        protected function isTargetCorrect() {}
        /**
         * Return current target of link
         *
         * @return string target
         */
        protected function getCurrentTarget() {}
    }

    /**
     * A file
     */
    class FileNode extends \typo3\cms\install\folderstructure\abstractnode implements \typo3\cms\install\folderstructure\nodeinterface {
        /**
         * @var int|null Default for files is octal 0664 == decimal 436
         */
        protected $targetPermission;
        /**
         * @var string|null Target content of file. If NULL, target content is ignored
         */
        protected $targetContent;

        public function __construct(array $structure, NodeInterface $parent = null) {}
        /**
         * Get own status
         * Returns warning if file not exists
         * Returns error if file exists but content is not as expected (can / shouldn't be fixed)
         *
         * @return FlashMessage[]
         */
        public function getStatus() : array {}
        /**
         * Fix structure
         *
         * If there is nothing to fix, returns an empty array
         *
         * @return FlashMessage[]
         */
        public function fix() : array {}
        /**
         * Fix this node: create if not there, fix permissions
         *
         * @return FlashMessage[]
         */
        protected function fixSelf() : array {}
        /**
         * Create file if not exists
         *
         * @throws Exception
         * @return FlashMessage
         */
        protected function createFile() : FlashMessage {}
        /**
         * Get status of file
         *
         * @return FlashMessage[]
         */
        protected function getSelfStatus() : array {}
        /**
         * Compare current file content with target file content
         *
         * @throws Exception If file does not exist
         * @return bool TRUE if current and target file content are identical
         */
        protected function isContentCorrect() {}
        /**
         * Sets content of file to target content
         *
         * @throws Exception If file does not exist
         * @return FlashMessage
         */
        protected function setContent() : FlashMessage {}
        /**
         * Checks if not is a file
         *
         * @return bool
         */
        protected function isFile() {}
    }

    /**
     * Structure facade, a facade class in front of root node.
     * This is the main API interface to the node structure and should
     * be the only class used from outside.
     *
     * @api
     */
    class StructureFacade implements \typo3\cms\install\folderstructure\structurefacadeinterface {
        /**
         * @var RootNodeInterface The structure to work on
         */
        protected $structure;

        public function __construct(RootNodeInterface $structure) {}
        /**
         * Get status of node tree
         *
         * @return FlashMessageQueue
         */
        public function getStatus() : FlashMessageQueue {}
        /**
         * Fix structure
         *
         * @return FlashMessageQueue
         */
        public function fix() : FlashMessageQueue {}
    }

    /**
     * Abstract node implements common methods
     */
    abstract class AbstractNode {
        /**
         * @var string Name
         */
        protected $name;
        /**
         * @var string|null Target permissions for unix, eg. '2775' or '0664' (4 characters string)
         */
        protected $targetPermission;
        /**
         * @var NodeInterface|null Parent object of this structure node
         */
        protected $parent;
        /**
         * @var array Directories and root may have children, files and link always empty array
         */
        protected $children;

        /**
         * Get name
         *
         * @return string Name
         */
        public function getName() {}
        /**
         * Get target permission
         *
         * Make sure to call octdec on the value when passing this to chmod
         *
         * @return string Permissions as a 4 character octal string, i.e. 2775 or 0644
         */
        protected function getTargetPermission() {}
        protected function setTargetPermission($permission) {}
        /**
         * Get children
         *
         * @return array
         */
        protected function getChildren() {}
        /**
         * Get parent
         *
         * @return NodeInterface|null
         */
        protected function getParent() {}
        /**
         * Get absolute path of node
         *
         * @return string
         */
        public function getAbsolutePath() {}
        /**
         * Current node is writable if parent is writable
         *
         * @return bool TRUE if parent is writable
         */
        public function isWritable() {}
        /**
         * Checks if node exists.
         * Returns TRUE if it is there, even if it is only a link.
         * Does not check the type!
         *
         * @return bool
         */
        protected function exists() {}
        /**
         * Fix permission if they are not equal to target permission
         *
         * @throws Exception
         * @return FlashMessage
         */
        protected function fixPermission() : FlashMessage {}
        /**
         * Checks if current permission are identical to target permission
         *
         * @return bool
         */
        protected function isPermissionCorrect() {}
        /**
         * Get current permission of node
         *
         * @return string, eg. 2775 for dirs, 0664 for files
         */
        protected function getCurrentPermission() {}
        /**
         * Returns TRUE if OS is windows
         *
         * @return bool TRUE on windows
         */
        protected function isWindowsOs() {}
        protected function getRelativePathBelowSiteRoot($path = null) {}
    }

    /**
     * Root node of structure
     */
    class RootNode extends \typo3\cms\install\folderstructure\directorynode implements \typo3\cms\install\folderstructure\rootnodeinterface {
        public function __construct(array $structure, NodeInterface $parent = null) {}
        /**
         * Get own status and status of child objects - Root node gives error status if not exists
         *
         * @return FlashMessage[]
         */
        public function getStatus() : array {}
        /**
         * Root node does not call parent, but returns own name only
         *
         * @return string Absolute path
         */
        public function getAbsolutePath() {}
    }

    /**
     * A directory
     */
    class DirectoryNode extends \typo3\cms\install\folderstructure\abstractnode implements \typo3\cms\install\folderstructure\nodeinterface {
        /**
         * @var int|null Default for directories is octal 02775 == decimal 1533
         */
        protected $targetPermission;

        public function __construct(array $structure, NodeInterface $parent = null) {}
        /**
         * Get own status and status of child objects
         *
         * @return FlashMessage[]
         */
        public function getStatus() : array {}
        /**
         * Create a test file and delete again if directory exists
         *
         * @return bool TRUE if test file creation was successful
         */
        public function isWritable() {}
        /** @var $child NodeInterface */
        public function fix() : array {}
        /**
         * Fix this directory:
         *
         * - create with correct permissions if it was not existing
         * - if there is no "write" permissions, try to fix it
         * - leave it alone otherwise
         *
         * @return FlashMessage[]
         */
        protected function fixSelf() {}
        /**
         * Create directory if not exists
         *
         * @throws Exception
         * @return FlashMessage
         */
        protected function createDirectory() : FlashMessage {}
        /**
         * Get status of directory - used in root and directory node
         *
         * @return FlashMessage[]
         */
        protected function getSelfStatus() : array {}
        /** @var $child NodeInterface */
        protected function getChildrenStatus() : array {}
        /**
         * Create a test file and delete again - helper for isWritable
         *
         * @return bool TRUE if test file creation was successful
         */
        protected function canFileBeCreated() {}
        /**
         * Checks if not is a directory
         *
         * @return bool True if node is a directory
         */
        protected function isDirectory() {}
/** @var $existingChild NodeInterface */
        protected function createChildren(/** @var $existingChild NodeInterface */
array $structure) {}
    }

    /**
     * Factory returns default folder structure object hierarchy
     */
    class DefaultFactory {
        /**
         * Get default structure object hierarchy
         *
         * @return StructureFacadeInterface
         */
        public function getStructure() {}
        /**
         * Default definition of folder and file structure with dynamic
         * permission settings
         *
         * @return array
         */
        protected function getDefaultStructureDefinition() {}
    }

    /**
     * A folder structure exception
     */
    class Exception extends \typo3\cms\install\exception {}


    /**
     * Interface of structure facade, a facade class in front of root node
     */
    interface StructureFacadeInterface {
        function __construct(RootNodeInterface $structure) ;
        /**
         * Get status of node tree
         *
         * @return FlashMessageQueue
         */
        function getStatus() : FlashMessageQueue ;
        /**
         * Fix structure
         *
         * @return FlashMessageQueue
         */
        function fix() : FlashMessageQueue ;
    }

    /**
     * Interface implemented by root node
     */
    interface RootNodeInterface extends \typo3\cms\install\folderstructure\nodeinterface {}

    /**
     * Interface for structure nodes root, link, file, ...
     */
    interface NodeInterface {
        function __construct(array $structure, NodeInterface $parent = null) ;
        /**
         * Get node name
         *
         * @return string Node name
         */
        function getName() ;
        /**
         * Get absolute path of node
         *
         * @return string Absolute path
         */
        function getAbsolutePath() ;
        /**
         * Get the status of the object tree, recursive for directory and root node
         *
         * @return FlashMessage[]
         */
        function getStatus() : array ;
        /**
         * Check if node is writable - can be created and permission can be fixed
         *
         * @return bool TRUE if node is writable
         */
        function isWritable() ;
        /**
         * Fix structure
         *
         * If there is nothing to fix, returns an empty array
         *
         * @return FlashMessage[]
         */
        function fix() : array ;
    }

}

namespace TYPO3\CMS\Install\FolderStructure\Exception {
    /**
     * A root node exception
     */
    class RootNodeException extends \typo3\cms\install\folderstructure\exception {}

    /**
     * An invalid argument exception
     */
    class InvalidArgumentException extends \typo3\cms\install\folderstructure\exception {}

}

namespace TYPO3\CMS\Install\Tests\Unit {
    /**
     * Test case
     */
    abstract class FolderStructureTestCase extends \typo3\testingframework\core\unit\unittestcase {
        protected function getVirtualTestDir($prefix = 'root_') {}
        protected function getVirtualTestFilePath($prefix = 'file_') {}
    }

}

namespace TYPO3\CMS\Install\Tests\Unit\UpgradeAnalysis {
    class DocumentationFileTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DocumentationFile
         */
        protected $documentationFileService;
        /**
         * @var  vfsStreamDirectory
         */
        protected $docRoot;
        /**
         * @var Registry
         */
        protected $registry;

        /**
         * set up test environment
         */
        public function setUp() {}
        /**
         * dataprovider with invalid dir path. They should raise an exception and don't process.
         * @return array
         */
        public function invalidDirProvider() {}
        public function findDocumentationFilesThrowsExceptionIfPathIsNotInGivenChangelogDir(string $path) {}
        /**
         * @test
         */
        public function findDocumentationFilesReturnsArrayOfFiles() {}
        /**
         * @test
         */
        public function extractingTagsProvidesTagsAsDesired() {}
        /**
         * @test
         */
        public function filesAreFilteredByUsersChoice() {}
        /**
         * @return array
         */
        public function invalidFilesProvider() : array {}
        public function getListEntryThrowsExceptionForFilesNotBelongToChangelogDir(string $path) {}
    }

}

namespace TYPO3\CMS\Install\Tests\Unit\ViewHelpers\Format {
    /**
     * Test case
     */
    class PhpErrorCodeViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Format\NumberViewHelper
         */
        protected $viewHelper;

        /**
         * Setup the test case scenario
         */
        protected function setUp() {}
        /**
         * @return array
         */
        public function errorCodesDataProvider() {}
        public function renderPhpCodesCorrectly($errorCode, $expectedString) {}
    }

}

namespace TYPO3\CMS\Install\Tests\Unit\Updates\RowUpdater {
    /**
     * Test Class for ContentTypesToTextMediaUpdate
     */
    class L10nModeUpdaterTest extends \typo3\cms\core\tests\unit\resource\basetestcase {
        /**
         * @test
         */
        public function hasPotentialUpdateForTableThrowsExceptionIfGlobalsTcaIsNoArray() {}
        /**
         * @test
         */
        public function hasPotentialUpdateForTableReturnFalseForTableWithoutL10nMode() {}
        /**
         * @test
         */
        public function hasPotentialUpdateForTableReturnTrueForTableWithL10nModeExclude() {}
        /**
         * @test
         */
        public function hasPotentialUpdateForTableReturnTrueForTableWithBehaviourAllowLanguageSynchronization() {}
    }

}

namespace TYPO3\CMS\Install\Tests\Unit\Service {
    /**
     * Test case
     */
    class Typo3tempFileServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function clearAssetsFolderThrowsWithInvalidPath() {}
        /**
         * @test
         */
        public function clearAssetsFolderThrowsWithNotExistingPath() {}
    }

    /**
     * Test case
     */
    class CoreUpdateServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getMessagesReturnsPreviouslySetMessage() {}
        /**
         * @test
         */
        public function isCoreUpdateEnabledReturnsTrueForEnvironmentVariableNotSet() {}
        /**
         * @test
         */
        public function isCoreUpdateEnabledReturnsFalseFor_TYPO3_DISABLE_CORE_UPDATER_EnvironmentVariableSet() {}
        /**
         * @test
         */
        public function isCoreUpdateEnabledReturnsFalseFor_REDIRECT_TYPO3_DISABLE_CORE_UPDATER_EnvironmentVariableSet() {}
        /**
         * @test
         */
        public function isCoreUpdateEnabledReturnsFalseFor_TYPO3_COMPOSER_MODE_EnvironmentVariableSet() {}
    }

    /**
     * Test case
     */
    class ClearTableServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function clearSelectedTableThrowsWithInvalidTableName() {}
    }

    /**
     * Test case
     */
    class CoreVersionServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function updateVersionMatrixStoresVersionMatrixInRegistry() {}
        /**
         * @test
         */
        public function updateVersionMatrixRemovesOldReleasesFromMatrix() {}
        /**
         * @test
         */
        public function isInstalledVersionAReleasedVersionReturnsTrueForNonDevelopmentVersion() {}
        /**
         * @test
         */
        public function isInstalledVersionAReleasedVersionReturnsFalseForDevelopmentVersion() {}
        /**
         * @test
         */
        public function getTarGzSha1OfVersionThrowsExceptionIfSha1DoesNotExistInMatrix() {}
        /** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getTarGzSha1OfVersionReturnsSha1OfSpecifiedVersion() {}
        /** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isYoungerPatchReleaseAvailableReturnsTrueIfYoungerReleaseIsAvailable() {}
        /**
         * Whitebox test of API method: This tests multiple methods, only 'current version' and 'version matrix' are mocked.
         *
         * @test
         */
        public function isYoungerReleaseAvailableReturnsFalseIfNoYoungerReleaseExists() {}
        /**
         * Whitebox test of API method: This tests multiple methods, only 'current version' and 'version matrix' are mocked.
         *
         * @test
         */
        public function isYoungerReleaseAvailableReturnsFalseIfOnlyADevelopmentReleaseIsYounger() {}
        /**
         * Whitebox test of API method: This tests multiple methods, only 'current version' and 'version matrix' are mocked.
         *
         * @test
         */
        public function isYoungerDevelopmentReleaseAvailableReturnsTrueIfADevelopmentReleaseIsYounger() {}
        /** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isUpdateSecurityRelevantReturnsTrueIfAnUpdateIsSecurityRelevant() {}
        /**
         * Whitebox test of API method: This tests multiple methods, only 'current version' and 'version matrix' are mocked.
         *
         * @test
         */
        public function isUpdateSecurityRelevantReturnsFalseIfUpdateIsNotSecurityRelevant() {}
        /**
         * @test
         */
        public function getInstalledMajorVersionFetchesInstalledVersionNumber() {}
        /**
         * Data provider
         */
        public function getMajorVersionDataProvider() {}
/** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getMajorVersionReturnsCorrectMajorVersion(/** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
$version, /** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
$expectedMajor) {}
        /**
         * @test
         */
        public function getVersionMatrixThrowsExceptionIfVersionMatrixIsNotYetSetInRegistry() {}
        /** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getVersionMatrixReturnsMatrixFromRegistry() {}
        /** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getReleaseTimestampOfVersionThrowsExceptionIfReleaseDateIsNotDefined() {}
        /**
         * @test
         */
        public function getReleaseTimestampOfVersionReturnsTimestamp() {}
        /** @var $instance CoreVersionService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function ensureVersionExistsInMatrixThrowsExceptionIfMinorVersionDoesNotExist() {}
        /**
         * @test
         */
        public function ensureVersionExistsInMatrixThrowsExceptionIfPatchLevelDoesNotExist() {}
    }

    /**
     * Test case
     */
    class EnableFileServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider
         *
         * @return array
         */
        public function getFirstInstallFilePathsDataProvider() {}
/** @var $instance EnableFileService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getFirstInstallFilePaths(/** @var $instance EnableFileService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
$structure, /** @var $instance EnableFileService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
$expected) {}
        /**
         * Data provider
         *
         * @return array
         */
        public function removeFirstInstallFileDataProvider() {}
/** @var $instance EnableFileService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function removeFirstInstallFile(/** @var $instance EnableFileService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
$structure, /** @var $instance EnableFileService|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
$expected) {}
    }

    /**
     * Test case
     */
    class SilentConfigurationUpgradeServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ConfigurationManager|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Core\Package\UnitTestPackageManager A backup of unit test package manager
         */
        protected $backupPackageManager;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        protected function createConfigurationManagerWithMockedMethods(array $methods) {}
        /**
         * Dataprovider for configureBackendLoginSecurity
         *
         * @return array
         */
        public function configureBackendLoginSecurityLocalconfiguration() {}
        public function configureBackendLoginSecurity($current, $setting, $isPackageActive, $hasLocalConfig) {}
        /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function removeObsoleteLocalConfigurationSettingsIfThereAreOldSettings() {}
        /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function doNotRemoveObsoleteLocalConfigurationSettingsIfThereAreNoOldSettings() {}
        /**
         * @test
         */
        public function doNotGenerateEncryptionKeyIfExists() {}
        /**
         * @test
         */
        public function generateEncryptionKeyIfNotExists() {}
        /** SSL key + passphrase */
        public function httpSettingsMappingDataProvider() {}
/** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function transferHttpSettingsIfSet(/** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$currentLocalConfiguration, /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$newSettings, /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$localConfigurationNeedsUpdate) {}
        /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function disableImageMagickDetailSettingsIfImageMagickIsDisabled() {}
        /**
         * @test
         */
        public function doNotDisableImageMagickDetailSettingsIfImageMagickIsEnabled() {}
        /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function setImageMagickDetailSettings() {}
        /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function doNotSetImageMagickDetailSettings() {}
        /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function migrateNonExistingLangDebug() {}
        /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function migrateExistingLangDebug() {}
/** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function migrateCacheHashOptions(/** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
array $oldValues, /** @var $silentConfigurationUpgradeServiceInstance SilentConfigurationUpgradeService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
array $newValues) {}
        /**
         * @return array
         */
        public function migrateCacheHashOptionsDataProvider() {}
    }

}

namespace TYPO3\CMS\Install\Tests\Unit\ExtensionScanner\Php {
    /**
     * Test case
     */
    class CodeStatisticsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function enterNodeSumsStatistics() {}
    }

    /**
     * Test case
     */
    class GeneratorClassesResolverTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function visitorCreatesFullyQualifiedNameFromStringArgumentInMakeInstance() {}
        /**
         * @test
         */
        public function visitorDoesNotTransformDynamicallyCreatesFullyQualifiedNameFromStringArgumentInMakeInstance() {}
    }

    /**
     * Test case
     */
    class MatcherFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function createAllThrowWithMissingClass() {}
        /**
         * @test
         */
        public function createAllThrowsWithMissingConfiration() {}
        /**
         * @test
         */
        public function createAllThrowsWithBothConfigurationFileAndConfigurationArray() {}
        /**
         * @test
         */
        public function createAllThrowsIfConfigurationFileDoesNotExist() {}
        /**
         * @test
         */
        public function createAllThrowsIfConfigurationFileDoesNotReturnArray() {}
        /**
         * @test
         */
        public function createAllThrowsIfConfigurationArrayIsNotAnArray() {}
        /**
         * @test
         */
        public function createAllThrowIfMatcherDoesNotImplementCodeScannerInterface() {}
    }

}

namespace TYPO3\CMS\Install\Tests\Unit\ExtensionScanner\Php\Matcher {
    /**
     * Test case
     */
    class MethodArgumentDroppedStaticMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class MethodCallStaticMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class MethodCallMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @test
         */
        public function matchIsIgnoredIfIgnoreFileIsSet() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class ArrayGlobalMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class ClassConstantMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class MethodArgumentRequiredMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class MethodArgumentDroppedMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class AbstractCoreMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function validateMatcherDefinitionsRunsFineWithProperDefinition() {}
        /**
         * @test
         */
        public function validateMatcherDefinitionsThrowsIfRequiredArgIsNotInConfig() {}
        /**
         * @test
         */
        public function validateMatcherDefinitionsThrowsWithMissingRestFiles() {}
        /**
         * @test
         */
        public function validateMatcherDefinitionsThrowsWithEmptySingleRestFile() {}
        /**
         * @test
         */
        public function initializeMethodNameArrayThrowsWithInvalidKeys() {}
    }

    /**
     * Test case
     */
    class FunctionCallMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @test
         */
        public function matchIsIgnoredIfIgnoreFileIsSet() {}
    }

    /**
     * Test case
     */
    class MethodArgumentUnusedMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class ConstantMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class PropertyProtectedMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class ArrayDimensionMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class InterfaceMethodChangedMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
    }

    /**
     * Test case
     */
    class MethodAnnotationMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
    }

    /**
     * Test case
     */
    class PropertyPublicMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
        /**
         * @return array
         */
        public function matchesReturnsExpectedRestFilesDataProvider() {}
        public function matchesReturnsExpectedRestFiles(array $configuration, string $phpCode, array $expected) {}
    }

    /**
     * Test case
     */
    class PropertyAnnotationMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
    }

    /**
     * Test case
     */
    class ClassNameMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function hitsFromFixtureAreFound() {}
    }

}

namespace TYPO3\CMS\Install\Tests\Unit\ExtensionScanner\Php\Matcher\Fixtures {
    /**
     * Fixture file
     */
    class MethodAnnotationMatcherFixture {
        /**
         * @inject
         */
        public function foo() {}
    }

    /**
     * Fixture file
     */
    class ConstantMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class ClassNameMatcherFixture extends \typo3\cms\backend\console\application implements \typo3\cms\backend\console\application, \typo3\cms\backend\console\application {
        public function aMethod(Con2\Application $app) {}
    }

    /**
     * Fixture file
     */
    class MethodArgumentDroppedStaticMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class MethodArgumentUnusedMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class InterfaceMethodChangedMatcherFixture {
        public function like1($arg1, $arg2, $arg3) {}
        public function like2($arg1, $arg2, $arg3) {}
        public function like3($arg1, $arg2) {}
        public static function like4($arg1, $arg2, $arg3) {}
        protected function like5($arg1, $arg2, $arg3) {}
    }

    /**
     * Fixture file
     */
    class MethodArgumentRequiredMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class ArrayDimensionMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class MethodCallMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class PropertyProtectedMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class ArrayGlobalMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class MethodCallStaticMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class MethodArgumentDroppedMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class FunctionCallMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class ClassConstantMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class PropertyPublicMatcherFixture {
        public function aMethod() {}
    }

    /**
     * Fixture file
     */
    class PropertyAnnotationMatcherFixture {
        /**
         * @inject
         */
        public $property;

    }

}

namespace TYPO3\CMS\Install\Tests\Unit\CodeScanner\Php\Fixtures {
    /**
     * @extensionScannerIgnoreFile
     */
    class CodeStatisticsFixture {
        /**
         * Some comment
         */
        public function aMethod() {}
    }

}

namespace TYPO3\CMS\Install\Tests\Unit\FolderStructure {
    /**
     * Test case
     */
    class FileNodeTest extends \typo3\cms\install\tests\unit\folderstructuretestcase {
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorThrowsExceptionIfParentIsNull() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorThrowsExceptionIfNameContainsForwardSlash() {}
        /**
         * @test
         */
        public function constructorSetsParent() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsTargetPermission() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsName() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorThrowsExceptionIfBothTargetContentAndTargetContentFileAreSet() {}
        /**
         * @test
         */
        public function constructorSetsTargetContent() {}
        /**
         * @test
         */
        public function constructorSetsTargetContentToContentOfTargetContentFile() {}
        /**
         * @test
         */
        public function constructorThrowsExceptionIfTargetContentFileDoesNotExist() {}
        /**
         * @test
         */
        public function targetContentIsNullIfNotGiven() {}
        /**
         * @test
         */
        public function getStatusReturnsArray() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithWarningStatusIFileNotExists() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithErrorStatusIfNodeIsNotAFile() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsArrayNoticeStatusIfFileExistsButIsNotWritable() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithNoticeStatusIfFileExistsButPermissionAreNotCorrect() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithNoticeStatusIfFileExistsButContentIsNotCorrect() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithOkStatusIfFileExistsAndPermissionAreCorrect() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixCallsFixSelfAndReturnsItsResult() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixSelfCallsCreateFileIfFileDoesNotExistAndReturnsResult() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixSelfCallsSetsContentIfFileCreationWasSuccessfulAndTargetContentIsNotNullAndReturnsResult() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixSelfDoesNotCallSetContentIfFileCreationFailed() {}
        /**
         * @test
         */
        public function fixSelfDoesNotCallSetContentIfFileTargetContentIsNull() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixSelfReturnsErrorStatusIfNodeExistsButIsNotAFileAndReturnsResult() {}
        /**
         * @test
         */
        public function fixSelfCallsFixPermissionIfFileExistsButPermissionAreWrong() {}
        /**
         * @test
         */
        public function fixSelfReturnsArrayOfStatusMessages() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function createFileThrowsExceptionIfNodeExists() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function createFileReturnsOkStatusIfFileWasCreated() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function createFileCreatesFile() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function createFileReturnsErrorStatusIfFileWasNotCreated() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isContentCorrectThrowsExceptionIfTargetIsNotAFile() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isContentCorrectReturnsTrueIfTargetContentPropertyIsNull() {}
        /**
         * @test
         */
        public function isContentCorrectReturnsTrueIfTargetContentEqualsCurrentContent() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isContentCorrectReturnsFalseIfTargetContentNotEqualsCurrentContent() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isPermissionCorrectReturnsTrueIfTargetPermissionAndCurrentPermissionAreIdentical() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function setContentThrowsExceptionIfTargetIsNotAFile() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function setContentThrowsExceptionIfTargetContentIsNull() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function setContentSetsContentToFile() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function setContentReturnsOkStatusIfContentWasSuccessfullySet() {}
        /**
         * @test
         */
        public function setContentReturnsErrorStatusIfContentCanNotBeSetSet() {}
        /** @var $node FileNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isFileReturnsTrueIfNameIsFile() {}
        /**
         * @test
         * @see https://github.com/mikey179/vfsStream/wiki/Known-Issues - symlink doesn't work with vfsStream
         */
        public function isFileReturnsFalseIfNameIsALinkFile() {}
    }

    /**
     * Test case
     */
    class RootNodeTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructorThrowsExceptionIfParentIsNotNull() {}
        /**
         * @test
         */
        public function constructorThrowsExceptionIfAbsolutePathIsNotSet() {}
        /**
         * @test
         */
        public function constructorThrowsExceptionIfAbsolutePathIsNotAbsoluteOnWindows() {}
        /** @var $node RootNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorThrowsExceptionIfAbsolutePathIsNotAbsoluteOnUnix() {}
        /** @var $node RootNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsParentToNull() {}
        /**
         * @test
         */
        public function getChildrenReturnsChildCreatedByConstructor() {}
        /** @var $node RootNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsTargetPermission() {}
        /**
         * @test
         */
        public function constructorSetsName() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithOkStatusAndCallsOwnStatusMethods() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusCallsGetChildrenStatusForStatus() {}
        /**
         * @test
         */
        public function getAbsolutePathReturnsGivenName() {}
    }

    /**
     * Test case
     */
    class LinkNodeTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorThrowsExceptionIfParentIsNull() {}
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorThrowsExceptionIfNameContainsForwardSlash() {}
        /**
         * @test
         */
        public function constructorSetsParent() {}
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsName() {}
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsTarget() {}
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsArray() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithInformationStatusIfRunningOnWindows() {}
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsArrayWithErrorStatusIfLinkNotExists() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithWarningStatusIfNodeIsNotALink() {}
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsErrorStatusIfLinkTargetIsNotCorrect() {}
        /**
         * @test
         */
        public function getStatusReturnsOkStatusIfLinkExistsAndTargetIsCorrect() {}
        /**
         * @test
         */
        public function fixReturnsEmptyArray() {}
        /**
         * @test
         */
        public function isLinkThrowsExceptionIfLinkNotExists() {}
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isLinkReturnsTrueIfNameIsLink() {}
        /**
         * @test
         */
        public function isFileReturnsFalseIfNameIsAFile() {}
        /**
         * @test
         */
        public function isTargetCorrectThrowsExceptionIfLinkNotExists() {}
        /** @var $node LinkNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isTargetCorrectThrowsExceptionIfNodeIsNotALink() {}
        /**
         * @test
         */
        public function isTargetCorrectReturnsTrueIfNoExpectedLinkTargetIsSpecified() {}
        /**
         * @test
         */
        public function isTargetCorrectAcceptsATargetWithATrailingSlash() {}
        /**
         * @test
         * @see https://github.com/mikey179/vfsStream/wiki/Known-Issues - symlink doesn't work with vfsStream
         */
        public function isTargetCorrectReturnsTrueIfActualTargetIsIdenticalToSpecifiedTarget() {}
        /**
         * @test
         * @see https://github.com/mikey179/vfsStream/wiki/Known-Issues - symlink doesn't work with vfsStream
         */
        public function isTargetCorrectReturnsFalseIfActualTargetIsNotIdenticalToSpecifiedTarget() {}
    }

    /**
     * Test case
     */
    class DirectoryNodeTest extends \typo3\cms\install\tests\unit\folderstructuretestcase {
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorThrowsExceptionIfParentIsNull() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorThrowsExceptionIfNameContainsForwardSlash() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorCallsCreateChildrenIfChildrenAreSet() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsParent() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsTargetPermission() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function constructorSetsName() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsArray() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithWarningStatusIfDirectoryNotExists() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsArrayWithErrorStatusIfNodeIsNotADirectory() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsArrayWithErrorStatusIfDirectoryExistsButIsNotWritable() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsArrayWithNoticeStatusIfDirectoryExistsButPermissionAreNotCorrect() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsArrayWithOkStatusIfDirectoryExistsAndPermissionAreCorrect() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusCallsGetStatusOnChildren() {}
        /**
         * @test
         */
        public function getStatusReturnsArrayWithOwnStatusAndStatusOfChild() {}
        /**
         * @test
         */
        public function fixCallsFixSelfAndReturnsItsResult() {}
        /**
         * @test
         */
        public function fixCallsFixOnChildrenAndReturnsMergedResult() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixSelfCallsCreateDirectoryIfDirectoryDoesNotExistAndReturnsResult() {}
        /**
         * @test
         */
        public function fixSelfReturnsErrorStatusIfNodeExistsButIsNotADirectoryAndReturnsResult() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixSelfCallsFixPermissionIfDirectoryExistsButIsNotWritable() {}
        /**
         * @test
         */
        public function createDirectoryThrowsExceptionIfNodeExists() {}
        /**
         * @test
         */
        public function createDirectoryCreatesDirectory() {}
        /**
         * @test
         */
        public function createDirectoryReturnsOkStatusIfDirectoryWasCreated() {}
        /**
         * @test
         */
        public function createDirectoryReturnsErrorStatusIfDirectoryWasNotCreated() {}
        /** @var $node DirectoryNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function createChildrenThrowsExceptionIfAChildTypeIsNotSet() {}
        /**
         * @test
         */
        public function createChildrenThrowsExceptionIfAChildNameIsNotSet() {}
        /**
         * @test
         */
        public function createChildrenThrowsExceptionForMultipleChildrenWithSameName() {}
        /** @var $child NodeInterface */
        public function getChildrenReturnsCreatedChild() {}
        /**
         * @test
         */
        public function isWritableReturnsFalseIfNodeDoesNotExist() {}
        /**
         * @test
         */
        public function isWritableReturnsTrueIfNodeExistsAndFileCanBeCreated() {}
        /**
         * @test
         */
        public function isWritableReturnsFalseIfNodeExistsButFileCanNotBeCreated() {}
        /**
         * @test
         */
        public function isDirectoryReturnsTrueIfNameIsADirectory() {}
        /**
         * @test
         * @see https://github.com/mikey179/vfsStream/wiki/Known-Issues - symlink doesn't work with vfsStream
         */
        public function isDirectoryReturnsFalseIfNameIsALinkToADirectory() {}
    }

    /**
     * Test case
     */
    class StructureFacadeTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var $facade StructureFacade|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getStatusReturnsStatusOfStructureAndReturnsItsResult() {}
        /** @var $facade StructureFacade|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixCallsFixOfStructureAndReturnsItsResult() {}
    }

    /**
     * Test case
     */
    class AbstractNodeTest extends \typo3\cms\install\tests\unit\folderstructuretestcase {
        /**
         * @test
         */
        public function getNameReturnsSetName() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getTargetPermissionReturnsSetTargetPermission() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getChildrenReturnsSetChildren() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function getParentReturnsSetParent() {}
        /**
         * @test
         */
        public function getAbsolutePathCallsParentForPathAndAppendsOwnName() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isWritableCallsParentIsWritable() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isWritableReturnsWritableStatusOfParent() {}
        /**
         * @test
         */
        public function existsReturnsTrueIfNodeExists() {}
        /**
         * @test
         * @see https://github.com/mikey179/vfsStream/wiki/Known-Issues - symlink doesn't work with vfsStream
         */
        public function existsReturnsTrueIfIsLinkAndTargetIsDead() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function existsReturnsFalseIfNodeNotExists() {}
        /**
         * @test
         */
        public function fixPermissionThrowsExceptionIfPermissionAreAlreadyCorrect() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixPermissionReturnsNoticeStatusIfPermissionCanNotBeChanged() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixPermissionReturnsNoticeStatusIfPermissionsCanNotBeChanged() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function fixPermissionReturnsOkStatusIfPermissionCanBeFixedAndSetsPermissionToCorrectValue() {}
        /**
         * @test
         */
        public function isPermissionCorrectReturnsTrueOnWindowsOs() {}
        /** @var $node AbstractNode|AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject */
        public function isPermissionCorrectReturnsFalseIfTargetPermissionAndCurrentPermissionAreNotIdentical() {}
        /**
         * @test
         */
        public function getCurrentPermissionReturnsCurrentDirectoryPermission() {}
        /**
         * @test
         */
        public function getCurrentPermissionReturnsCurrentFilePermission() {}
        /**
         * @test
         */
        public function getRelativePathBelowSiteRootThrowsExceptionIfGivenPathIsNotBelowPathSiteConstant() {}
        /**
         * @test
         */
        public function getRelativePathCallsGetAbsolutePathIfPathIsNull() {}
        /**
         * @test
         */
        public function getRelativePathBelowSiteRootReturnsSingleForwardSlashIfGivenPathEqualsPathSiteConstant() {}
        /**
         * @test
         */
        public function getRelativePathBelowSiteRootReturnsSubPath() {}
    }

    /**
     * Test case
     */
    class DefaultFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getStructureReturnsInstanceOfStructureFacadeInterface() {}
    }

}

namespace TYPO3\CMS\Install\Tests\Functional\Updates\RowUpdater {
    /**
     * Test Class for L10nModeUpdater
     */
    class L10nModeUpdaterTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;
        /**
         * @var string[]
         */
        protected $coreExtensionsToLoad;
        /**
         * @var string[]
         */
        protected $testExtensionsToLoad;

        protected function setUp() {}
        protected function importScenarioDataSet($dataSetName) {}
        protected function assertAssertionDataSet($dataSetName) {}
        /**
         * @return array
         */
        protected function getTableNames() : array {}
        /**
         * @test
         */
        public function recordsCanBeUpdated() {}
    }

}

namespace TYPO3\CMS\Filemetadata\Tests\Unit\Tca {
    class FileMetadataVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var array
         */
        static protected $fileMetadataFields;

        /**
         * @test
         */
        public function fileMetadataFormContainsExpectedFields() {}
    }

}

namespace TYPO3\CMS\Lang {
    class LanguageService extends \typo3\cms\core\localization\languageservice {}

    /**
     * A generic Lang exception
     */
    class Exception extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\ContextHelp\Controller {
    class ContextHelpAjaxController extends \typo3\cms\backend\controller\contexthelpajaxcontroller {}

}

namespace TYPO3\CMS\Sv {
    class AbstractAuthenticationService extends \typo3\cms\core\authentication\abstractauthenticationservice {}

    class AuthenticationService extends \typo3\cms\core\authentication\authenticationservice {}

}

namespace TYPO3\CMS\Core {
    /**
     * A class to store and retrieve entries in a registry database table.
     *
     * This is a simple, persistent key-value-pair store.
     *
     * The intention is to have a place where we can store things (mainly settings)
     * that should live for more than one request, longer than a session, and that
     * shouldn't expire like it would with a cache. You can actually think of it
     * being like the Windows Registry in some ways.
     */
    class Registry implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $entries;
        /**
         * @var array
         */
        protected $loadedNamespaces;

        public function get($namespace, $key, $defaultValue = null) {}
        public function set($namespace, $key, $value) {}
        public function remove($namespace, $key) {}
        public function removeAllByNamespace($namespace) {}
        protected function isNamespaceLoaded($namespace) {}
        protected function loadEntriesByNamespace($namespace) {}
        protected function validateNamespace($namespace) {}
    }

    /**
     * An exception
     */
    class Exception extends \exception {}


    /**
     * "empty" interface for singletons (marker interface pattern)
     * @see \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance()
     */
    interface SingletonInterface {}

}

namespace TYPO3\CMS\Core\Compatibility {
    /**
     * Class to simulate the "old" extension information array element
     *
     * @internal
     */
    class LoadedExtensionArrayElement implements \serializable, \countable, \iteratoraggregate, \arrayaccess {
        /**
         * @var PackageInterface Instance of package manager
         */
        protected $package;
        /**
         * @var array List of relevant extension files
         */
        protected $extensionFilesToCheckFor;
        /**
         * @var array Final extension information
         */
        protected $extensionInformation;

        public function __construct(PackageInterface $package) {}
        /**
         * Create main information
         */
        protected function initializeBasicExtensionInformation() {}
        /**
         * Initialize extension icon
         */
        protected function initializeExtensionIcon() {}
        /**
         * Register found files in extension array if extension was found
         */
        protected function initializeExtensionFiles() {}
        /**
         * Retrieve an external iterator
         *
         * @link http://php.net/manual/en/iteratoraggregate.getiterator.php
         * @return \Traversable An instance of an object implementing Iterator or Traversable
         */
        public function getIterator() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
        /**
         * String representation of object
         *
         * @link http://php.net/manual/en/serializable.serialize.php
         * @return string the string representation of the object or null
         */
        public function serialize() {}
        public function unserialize($serialized) {}
        /**
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         * @return int The custom count as an integer. The return value is cast to an integer.
         */
        public function count() {}
        /**
         * @return array
         */
        public function toArray() {}
    }

    /**
     * Class to simulate the "old" extension information array
     *
     * @internal
     */
    class LoadedExtensionsArray implements \countable, \serializable, \arrayaccess, \iterator {
        /**
         * @var \TYPO3\CMS\Core\Package\PackageManager Instance of package manager
         */
        protected $packageManager;
        /**
         * @var array Loaded element cache
         */
        protected $loadedExtensionArrayElementCache;
        /**
         * @var string Pointer to current position
         */
        protected $iteratorPosition;

        public function __construct(\TYPO3\CMS\Core\Package\PackageManager $packageManager) {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
        /**
         * String representation of object
         *
         * @link http://php.net/manual/en/serializable.serialize.php
         * @return string the string representation of the object or null
         */
        public function serialize() {}
        public function unserialize($serialized) {}
        /**
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         * @return int The custom count as an integer.
         */
        public function count() {}
        /**
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         * @return mixed Can return any type.
         */
        public function current() {}
        /**
         * Move forward to next element
         *
         * @link http://php.net/manual/en/iterator.next.php
         */
        public function next() {}
        /**
         * Return the key of the current element
         *
         * @link http://php.net/manual/en/iterator.key.php
         * @return mixed scalar on success, or null on failure.
         */
        public function key() {}
        /**
         * Checks if current position is valid
         *
         * @link http://php.net/manual/en/iterator.valid.php
         * @return bool The return value will be casted to boolean and then evaluated. Returns true on success or false on failure.
         */
        public function valid() {}
        /**
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         */
        public function rewind() {}
        /**
         * Reset
         */
        public function reset() {}
        /**
         * Whether package manager is set in class
         *
         * @return bool TRUE if package manager is set
         */
        public function hasPackageManager() {}
        /**
         * @return array
         */
        public function toArray() {}
    }


    /**
     * This trait has no public properties by default, ensure to add a $deprecatedPublicProperties to your class
     * when using this trait.
     */
    trait PublicPropertyDeprecationTrait {
        public function __isset(string $propertyName) {}
        public function __get(string $propertyName) {}
        public function __set(string $propertyName, $propertyValue) {}
        public function __unset(string $propertyName) {}
    }

}

namespace TYPO3\CMS\Core\Tree\TableConfiguration {
    /**
     * Builds a \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider
     * object based on some TCA configuration
     */
    class TreeDataProviderFactory {
/** @var $dataProvider \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider */
        public static function getDataProvider(/** @var $dataProvider \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider */
array $tcaConfiguration, /** @var $dataProvider \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider */
$table, /** @var $dataProvider \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider */
$field, /** @var $dataProvider \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider */
$currentValue) {}
    }

    /**
     * TCA tree data provider
     */
    class DatabaseTreeDataProvider extends \typo3\cms\core\tree\tableconfiguration\abstracttableconfigurationtreedataprovider {
        const SIGNAL_PostProcessTreeData = 'PostProcessTreeData';
        const MODE_CHILDREN = 1;
        const MODE_PARENT = 2;

        /**
         * @var string
         */
        protected $tableName;
        /**
         * @var string
         */
        protected $treeId;
        /**
         * @var string
         */
        protected $labelField;
        /**
         * @var string
         */
        protected $tableWhere;
        /**
         * @var int
         */
        protected $lookupMode;
        /**
         * @var string
         */
        protected $lookupField;
        /**
         * @var int
         */
        protected $rootUid;
        /**
         * @var array
         */
        protected $idCache;
        /**
         * Stores TCA-Configuration of the LookUpField in tableName
         *
         * @var array
         */
        protected $columnConfiguration;
        /**
         * node sort values (the orderings from foreign_Table_where evaluation)
         *
         * @var array
         */
        protected $nodeSortValues;
        /**
         * @var array TCEforms compiled TSConfig array
         */
        protected $generatedTSConfig;
        /**
         * @var Dispatcher
         */
        protected $signalSlotDispatcher;

        public function setLabelField($labelField) {}
        /**
         * Gets the label field
         *
         * @return string
         */
        public function getLabelField() {}
        public function setTableName($tableName) {}
        /**
         * Gets the table name
         *
         * @return string
         */
        public function getTableName() {}
        public function setLookupField($lookupField) {}
        /**
         * Gets the lookup field
         *
         * @return string
         */
        public function getLookupField() {}
        public function setLookupMode($lookupMode) {}
        /**
         * Gets the lookup mode
         *
         * @return int
         */
        public function getLookupMode() {}
        public function getNodes(\TYPO3\CMS\Backend\Tree\TreeNode $node) {}
        /**
         * Gets the root node
         *
         * @return \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeNode
         */
        public function getRoot() {}
        public function setRootUid($rootUid) {}
        /**
         * Gets the root uid
         *
         * @return int
         */
        public function getRootUid() {}
        public function setTableWhere($tableWhere) {}
        /**
         * Gets the tableWhere clause
         *
         * @return string
         */
        public function getTableWhere() {}
/** @var $childNodes \TYPO3\CMS\Backend\Tree\SortedTreeNodeCollection */
        protected function buildRepresentationForNode(/** @var $childNodes \TYPO3\CMS\Backend\Tree\SortedTreeNodeCollection */
\TYPO3\CMS\Backend\Tree\TreeNode $basicNode, /** @var $childNodes \TYPO3\CMS\Backend\Tree\SortedTreeNodeCollection */
DatabaseTreeNode $parent = null, /** @var $childNodes \TYPO3\CMS\Backend\Tree\SortedTreeNodeCollection */
$level = 0) {}
        /**
         * Init the tree data
         */
        public function initializeTreeData() {}
        /**
         * Loads the tree data (all possible children)
         */
        protected function loadTreeData() {}
/** @var $storage \TYPO3\CMS\Backend\Tree\TreeNodeCollection */
        protected function getChildrenOf(/** @var $storage \TYPO3\CMS\Backend\Tree\TreeNodeCollection */
\TYPO3\CMS\Backend\Tree\TreeNode $node, /** @var $storage \TYPO3\CMS\Backend\Tree\TreeNodeCollection */
$level) {}
        protected function getRelatedRecords(array $row) {}
/** @var $dbGroup \TYPO3\CMS\Core\Database\RelationHandler */
        protected function getChildrenUidsFromParentRelation(/** @var $dbGroup \TYPO3\CMS\Core\Database\RelationHandler */
array $row) {}
        protected function getChildrenUidsFromChildrenRelation(array $row) {}
        protected function listFieldQuery($fieldName, $queryId) {}
        /**
         * Emits the post processing tree data signal.
         */
        protected function emitPostProcessTreeDataSignal() {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        /**
         * Get the ObjectManager
         *
         * @return ObjectManager
         */
        protected function getObjectManager() {}
    }

    /**
     * Class for tca tree
     */
    class TableConfigurationTree extends \typo3\cms\backend\tree\abstracttree {
        /**
         * Returns the root node
         *
         * @return \TYPO3\CMS\Backend\Tree\TreeNode
         */
        public function getRoot() {}
        /**
         * Renders a tree
         *
         * @return mixed
         */
        public function render() {}
    }

    /**
     * Renders a tca tree array for ExtJS
     */
    class ArrayTreeRenderer extends \typo3\cms\backend\tree\renderer\abstracttreerenderer {
        /**
         * recursion level
         *
         * @var int
         */
        protected $recursionLevel;

        public function renderNode(\TYPO3\CMS\Backend\Tree\TreeRepresentationNode $node, $recursive = true) {}
        protected function getNodeArray(\TYPO3\CMS\Backend\Tree\TreeRepresentationNode $node) {}
        public function renderTree(\TYPO3\CMS\Backend\Tree\AbstractTree $tree, $recursive = true) {}
        public function renderNodeCollection(TreeNodeCollection $collection, $recursive = true) {}
    }

    /**
     * An abstract TCA tree data provider
     */
    abstract class AbstractTableConfigurationTreeDataProvider extends \typo3\cms\backend\tree\abstracttreedataprovider {
        /**
         * @var bool
         */
        protected $expandAll;
        /**
         * @var int
         */
        protected $levelMaximum;
        /**
         * @var \TYPO3\CMS\Backend\Tree\TreeNode
         */
        protected $treeData;
        /**
         * @var string
         */
        protected $treeId;
        /**
         * @var string
         */
        protected $nonSelectableLevelList;
        /**
         * @var string
         */
        protected $expandedList;
        /**
         * @var string
         */
        protected $selectedList;
        /**
         * Contains all ids which may be allowed to display according to
         * beUser Rights and foreign_table_where (if type db)
         *
         * @var array $itemWhiteList
         */
        protected $itemWhiteList;
        /**
         * Contains all ids which are not allowed to be selected
         */
        protected $itemUnselectableList;

        public function setTreeId($treeId) {}
        /**
         * Gets the id of the tree
         *
         * @return string
         */
        public function getTreeId() {}
        public function setExpandAll($expandAll) {}
        /**
         * Gets the expamdAll
         *
         * @return bool
         */
        public function getExpandAll() {}
        public function setLevelMaximum($levelMaximum) {}
        /**
         * Gets the levelMaximum
         *
         * @return int
         */
        public function getLevelMaximum() {}
        protected function isExpanded(\TYPO3\CMS\Backend\Tree\TreeNode $node) {}
        public function setExpandedList($expandedList) {}
        /**
         * Gets the list for expanded nodes
         *
         * @return string
         */
        public function getExpandedList() {}
        /**
         * Read the list for expanded nodes from user settings
         */
        public function initializeTreeData() {}
        public function setSelectedList($selectedList) {}
        /**
         * Gets the list for selected nodes
         *
         * @return string
         */
        public function getSelectedList() {}
        public function setNonSelectableLevelList($nonSelectableLevelList) {}
        /**
         * Gets the list for non selectable tree levels
         *
         * @return string
         */
        public function getNonSelectableLevelList() {}
        public function setItemWhiteList(array $itemWhiteList) {}
        /**
         * Getter for the itemWhiteList
         *
         * @return array
         */
        public function getItemWhiteList() {}
        public function setItemUnselectableList(array $itemUnselectableList) {}
        /**
         * Getter for $itemUnselectableList
         *
         * @return array
         */
        public function getItemUnselectableList() {}
    }

    /**
     * Represents a node in a TCA database setup
     */
    class DatabaseTreeNode extends \typo3\cms\backend\tree\treerepresentationnode {
        /**
         * @var bool
         */
        protected $selectable;
        /**
         * @var bool
         */
        protected $selected;
        /**
         * @var bool
         */
        protected $expanded;
        /**
         * @var bool
         */
        protected $hasChildren;
        /**
         * @var mixed
         */
        private $sortValue;

        public function setExpanded($expanded) {}
        /**
         * Gets the expand state
         *
         * @return bool
         */
        public function getExpanded() {}
        public function setSelectable($selectable) {}
        /**
         * Gets the selectable property
         *
         * @return bool
         */
        public function getSelectable() {}
        public function setSelected($selected) {}
        /**
         * Gets the select state
         *
         * @return bool
         */
        public function getSelected() {}
        /**
         * Gets the hasChildren property
         *
         * @return bool
         */
        public function hasChildren() {}
        public function setHasChildren($value) {}
        public function compareTo($other) {}
        /**
         * Gets the sort value
         *
         * @return mixed
         */
        public function getSortValue() {}
        public function setSortValue($sortValue) {}
    }

}

namespace TYPO3\CMS\Core\Database {
    class Connection extends \doctrine\dbal\connection implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        const PARAM_NULL = \PDO::PARAM_NULL;
        const PARAM_INT = \PDO::PARAM_INT;
        const PARAM_LOB = \PDO::PARAM_LOB;
        const PARAM_STR = \PDO::PARAM_STR;
        const PARAM_BOOL = \PDO::PARAM_BOOL;
        const PARAM_STMT = \PDO::PARAM_STMT;

        /**
         * Prevents the duplicate registration of event handlers and types for this connection.
         * If true the events will not be initialized any more in the connect() method.
         *
         * @var bool
         */
        private $customTypesAndEventsInitialized;

        /**
         * Returns the list of custom Doctrine data types implemented by TYPO3.
         * This method is needed by the Schema parser to register the types as it
         * does not require a database connection and thus the types don't get
         * registered automatically.
         *
         * @internal
         * @return array
         */
        public static function getCustomDoctrineTypes() : array {}
        public function __construct(array $params, Driver $driver, Configuration $config = null, EventManager $em = null) {}
        /**
         * Establishes the connection with the database.
         *
         * @return bool true if the connection was successfully established, false if the connection is already open.
         */
        public function connect() : bool {}
        /**
         * Creates a new instance of a SQL query builder.
         *
         * @return \TYPO3\CMS\Core\Database\Query\QueryBuilder
         */
        public function createQueryBuilder() : QueryBuilder {}
        public function quoteIdentifier($identifier) : string {}
        public function quoteIdentifiers(array $input) : array {}
        public function quoteColumnValuePairs(array $input) : array {}
        protected function quoteColumnTypes(array $input) : array {}
        public function insert($tableName, array $data, array $types = [ ]) : int {}
        public function bulkInsert(string $tableName, array $data, array $columns = [ ], array $types = [ ]) : int {}
        public function select(array $columns, string $tableName, array $identifiers = [ ], array $groupBy = [ ], array $orderBy = [ ], int $limit = 0, int $offset = 0) : Statement {}
        public function update($tableName, array $data, array $identifier, array $types = [ ]) : int {}
        public function delete($tableName, array $identifier, array $types = [ ]) : int {}
        public function truncate(string $tableName, bool $cascade = false) : int {}
        public function count(string $item, string $tableName, array $identifiers) : int {}
        /**
         * Returns the version of the current platform if applicable.
         *
         * If no version information is available only the platform name will be shown.
         * If the platform name is unknown or unsupported the driver name will be shown.
         *
         * @return string
         * @internal
         */
        public function getServerVersion() : string {}
        public function prepareConnection(string $commands) {}
        public function lastInsertId($tableName = null, string $fieldName = 'uid') : string {}
    }

    /**
     * Class used in module tools/dbint (advanced search) and which may hold code specific for that module
     * However the class has a general principle in it which may be used in the web/export module.
     */
    class QueryView {
        /**
         * @var string
         */
        public $storeList;
        /**
         * @var string
         */
        public $downloadScript;
        /**
         * @var int
         */
        public $formW;
        /**
         * @var int
         */
        public $noDownloadB;
        /**
         * @var array
         */
        public $hookArray;
        /**
         * @var string
         */
        protected $formName;
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconFactory
         */
        protected $iconFactory;
        /**
         * @var array
         */
        protected $tableArray;
        /**
         * @var LanguageService
         */
        protected $languageService;
        /**
         * @var BackendUserAuthentication
         */
        protected $backendUserAuthentication;

        /**
         * constructor
         */
        public function __construct() {}
        /**
         * Get form
         *
         * @return string
         */
        public function form() {}
        /**
         * Make store control
         *
         * @return string
         */
        public function makeStoreControl() {}
        /**
         * Init store array
         *
         * @return array
         */
        public function initStoreArray() {}
        public function cleanStoreQueryConfigs($storeQueryConfigs, $storeArray) {}
        public function addToStoreQueryConfigs($storeQueryConfigs, $index) {}
/** @var \TYPO3\CMS\Core\Database\QueryGenerator */
        public function saveQueryInAction(/** @var \TYPO3\CMS\Core\Database\QueryGenerator */
$uid) {}
        public function loadStoreQueryConfigs($storeQueryConfigs, $storeIndex, $writeArray) {}
        /**
         * Process store control
         *
         * @return string
         */
        public function procesStoreControl() {}
        /**
         * Query marker
         *
         * @return string
         */
        public function queryMaker() {}
        public function getQueryResultCode($type, array $dataRows, $table) {}
        public function csvValues($row, $delim = ',', $quote = '"', $conf = [ ], $table = '') {}
        /**
         * Search
         *
         * @return string
         */
        public function search() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function resultRowDisplay(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$row, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$conf, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table) {}
        public function getProcessedValueExtra($table, $fieldName, $fieldValue, $conf, $splitString) {}
        public function getTreeList($id, $depth, $begin = 0, $permsClause = null) {}
        public function makeValueList($fieldName, $fieldValue, $conf, $table, $splitString) {}
        public function resultRowTitles($row, $conf, $table) {}
        public function csvRowTitles($row, $conf, $table) {}
        public function setFormName($formName) {}
    }

    /**
     * Class for generating front end for building queries
     */
    class QueryGenerator {
        /**
         * @var array
         */
        public $lang;
        /**
         * @var array
         */
        public $compSQL;
        /**
         * @var array
         */
        public $comp_offsets;
        /**
         * @var string
         */
        public $noWrap;
        /**
         * Form data name prefix
         *
         * @var string
         */
        public $name;
        /**
         * Table for the query
         *
         * @var string
         */
        public $table;
        /**
         * @var array
         */
        public $tableArray;
        /**
         * Field list
         *
         * @var string
         */
        public $fieldList;
        /**
         * Array of the fields possible
         *
         * @var array
         */
        public $fields;
        /**
         * @var array
         */
        public $extFieldLists;
        /**
         * The query config
         *
         * @var array
         */
        public $queryConfig;
        /**
         * @var bool
         */
        public $enablePrefix;
        /**
         * @var bool
         */
        public $enableQueryParts;
        /**
         * @var string
         */
        protected $formName;
        /**
         * @var int
         */
        protected $limitBegin;
        /**
         * @var int
         */
        protected $limitLength;
        /**
         * @var string
         */
        protected $fieldName;

        /**
         * Make a list of fields for current table
         *
         * @return string Separated list of fields
         */
        public function makeFieldList() {}
        public function init($name, $table, $fieldList = '') {}
        public function setAndCleanUpExternalLists($name, $list, $force = '') {}
        public function procesData($qC = '') {}
        public function cleanUpQueryConfig($queryConfig) {}
        public function getFormElements($subLevel = 0, $queryConfig = '', $parent = '') {}
        protected function makeComparisonSelector($subscript, $fieldName, $conf) {}
        public function makeOptionList($fieldName, $conf, $table) {}
        public function printCodeArray($codeArr, $recursionLevel = 0) {}
        public function mkOperatorSelect($name, $op, $draw, $submit) {}
        public function mkTypeSelect($name, $fieldName, $prepend = 'FIELD_') {}
        public function verifyType($fieldName) {}
        public function verifyComparison($comparison, $neg) {}
        public function mkFieldToInputSelect($name, $fieldName) {}
        public function mkTableSelect($name, $cur) {}
        public function mkCompSelect($name, $comparison, $neg) {}
        public function getSubscript($arr) {}
        /**
         * Init user definition
         */
        public function initUserDef() {}
        public function userDef($fieldPrefix, $conf, $fieldName, $fieldType) {}
        public function userDefCleanUp($queryConfig) {}
        public function getQuery($queryConfig, $pad = '') {}
        public function getQuerySingle($conf, $first) {}
        public function cleanInputVal($conf, $suffix = '') {}
        public function getUserDefQuery($qcArr, $first) {}
        /**
         * Update icon
         *
         * @return string
         */
        public function updateIcon() {}
        /**
         * Get label column
         *
         * @return string
         */
        public function getLabelCol() {}
        public function makeSelectorTable($modSettings, $enableList = 'table,fields,query,group,order,limit') {}
        public function getTreeList($id, $depth, $begin = 0, $permClause = '') {}
        public function getSelectQuery($qString = '') : string {}
        protected function getDateTimePickerField($name, $timestamp, $type) {}
        public function setFormName($formName) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return BaseScriptClass
         */
        protected function getModule() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Class for processing of the default soft reference types for CMS:
     *
     * - 'substitute' : A full field value targeted for manual substitution (for import /export features)
     * - 'notify' : Just report if a value is found, nothing more.
     * - 'images' : HTML <img> tags for RTE images
     * - 'typolink' : references to page id or file, possibly with anchor/target, possibly commaseparated list.
     * - 'typolink_tag' : As typolink, but searching for <link> tag to encapsulate it.
     * - 'email' : Email highlight
     * - 'url' : URL highlights (with a scheme)
     */
    class SoftReferenceIndex {
        /**
         * @var string
         */
        public $tokenID_basePrefix;

        public function findRef($table, $field, $uid, $content, $spKey, $spParams, $structurePath = '') {}
        public function findRef_images($content, $spParams) {}
        public function findRef_typolink($content, $spParams) {}
        public function findRef_typolink_tag($content, $spParams) {}
        public function findRef_email($content, $spParams) {}
        public function findRef_url($content, $spParams) {}
        public function findRef_extension_fileref($content, $spParams) {}
        public function getTypoLinkParts($typolinkValue) {}
        public function setTypoLinkPartsElement($tLP, $elements, $content, $idx) {}
        public function getPageIdFromAlias($link_param) {}
        public function makeTokenID($index = '') {}
        /**
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        protected function emitGetTypoLinkParts($linkHandlerFound, $finalTagParts, $linkHandlerKeyword, $linkHandlerValue) {}
        protected function emitSetTypoLinkPartsElement($linkHandlerFound, $tLP, $content, $elements, $idx, $tokenID) {}
    }

    /**
     * A helper class for handling PDO databases
     * Backport of FLOW3 class PdoHelper, last synced version: 3528
     */
    class PdoHelper {
        public static function importSql(\PDO $databaseHandle, $pdoDriver, $pathAndFilename) {}
    }

    /**
     * Reference index processing and relation extraction
     *
     * NOTICE: When the reference index is updated for an offline version the results may not be correct.
     * First, lets assumed that the reference update happens in LIVE workspace (ALWAYS update from Live workspace if you analyse whole database!)
     * Secondly, lets assume that in a Draft workspace you have changed the data structure of a parent page record - this is (in TemplaVoila) inherited by subpages.
     * When in the LIVE workspace the data structure for the records/pages in the offline workspace will not be evaluated to the right one simply because the data
     * structure is taken from a rootline traversal and in the Live workspace that will NOT include the changed DataStructure! Thus the evaluation will be based
     * on the Data Structure set in the Live workspace!
     * Somehow this scenario is rarely going to happen. Yet, it is an inconsistency and I see now practical way to handle it - other than simply ignoring
     * maintaining the index for workspace records. Or we can say that the index is precise for all Live elements while glitches might happen in an offline workspace?
     * Anyway, I just wanted to document this finding - I don't think we can find a solution for it. And its very TemplaVoila specific.
     */
    class ReferenceIndex implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * Definition of tables to exclude from the ReferenceIndex
         *
         * Only tables which do not contain any relations and never did so far since references also won't be deleted for
         * these. Since only tables with an entry in $GLOBALS['TCA] are handled by ReferenceIndex there is no need to add
         * *_mm-tables.
         *
         * Implemented as array with fields as keys and booleans as values for fast isset() lookup instead of slow in_array()
         *
         * @var array
         * @see updateRefIndexTable()
         * @see shouldExcludeTableFromReferenceIndex()
         */
        static protected $excludedTables;
        /**
         * Definition of fields to exclude from ReferenceIndex in *every* table
         *
         * Implemented as array with fields as keys and booleans as values for fast isset() lookup instead of slow in_array()
         *
         * @var array
         * @see getRelations()
         * @see fetchTableRelationFields()
         * @see shouldExcludeTableColumnFromReferenceIndex()
         */
        static protected $excludedColumns;
        /**
         * Fields of tables that could contain relations are cached per table. This is the prefix for the cache entries since
         * the runtimeCache has a global scope.
         *
         * @var string
         */
        static protected $cachePrefixTableRelationFields;
        /**
         * This array holds the FlexForm references of a record
         *
         * @var array
         * @see getRelations(),FlexFormTools::traverseFlexFormXMLData(),getRelations_flexFormCallBack()
         */
        public $temp_flexRelations;
        /**
         * This variable used to indicate whether referencing should take workspace overlays into account
         * It is not used since commit 0c34dac08605ba from 10.04.2006, the bug is investigated in https://forge.typo3.org/issues/65725
         *
         * @var bool
         * @see getRelations()
         */
        public $WSOL;
        /**
         * An index of all found references of a single record created in createEntryData() and accumulated in generateRefIndexData()
         *
         * @var array
         * @see createEntryData(),generateRefIndexData()
         */
        public $relations;
        /**
         * A cache to avoid that identical rows are refetched from the database
         *
         * @var array
         * @see getRecordRawCached()
         */
        protected $recordCache;
        /**
         * Number which we can increase if a change in the code means we will have to force a re-generation of the index.
         *
         * @var int
         * @see updateRefIndexTable()
         */
        public $hashVersion;
        /**
         * Current workspace id
         *
         * @var int
         */
        protected $workspaceId;
        /**
         * Runtime Cache to store and retrieve data computed for a single request
         *
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected $runtimeCache;
        /**
         * Enables $runtimeCache and $recordCache
         * @var bool
         */
        protected $useRuntimeCache;

        /**
         * Constructor
         */
        public function __construct() {}
        public function setWorkspaceId($workspaceId) {}
        /**
         * Gets the current workspace id
         *
         * @return int
         * @see updateRefIndexTable(),createEntryData()
         */
        public function getWorkspaceId() {}
        public function updateRefIndexTable($tableName, $uid, $testOnly = false) {}
        public function generateRefIndexData($tableName, $uid) {}
        protected function generateDataUsingRecord(string $tableName, array $record) : array {}
        public function createEntryData($table, $uid, $field, $flexPointer, $deleted, $ref_table, $ref_uid, $ref_string = '', $sort = -1, $softref_key = '', $softref_id = '') {}
        protected function createEntryDataUsingRecord(string $tableName, array $record, string $fieldName, string $flexPointer, int $deleted, string $referencedTable, int $referencedUid, string $referenceString = '', int $sort = -1, string $softReferenceKey = '', string $softReferenceId = '') {}
        public function createEntryData_dbRels($table, $uid, $fieldName, $flexPointer, $deleted, $items) {}
        protected function createEntryDataForDatabaseRelationsUsingRecord(string $tableName, array $record, string $fieldName, string $flexPointer, int $deleted, array $items) {}
        public function createEntryData_fileRels($table, $uid, $fieldName, $flexPointer, $deleted, $items) {}
        protected function createEntryDataForFileRelationsUsingRecord(string $tableName, array $record, string $fieldName, string $flexPointer, int $deleted, array $items) {}
        public function createEntryData_softreferences($table, $uid, $fieldName, $flexPointer, $deleted, $keys) {}
        protected function createEntryDataForSoftReferencesUsingRecord(string $tableName, array $record, string $fieldName, string $flexPointer, int $deleted, array $keys) {}
        public function getRelations($table, $row, $onlyField = '') {}
        public function getRelations_flexFormCallBack($dsArr, $dataValue, $PA, $structurePath) {}
        public function getRelations_procFiles($value, $conf, $uid) {}
        public function getRelations_procDB($value, $conf, $uid, $table = '') {}
        public function setReferenceValue($hash, $newValue, $returnDataArray = false, $bypassWorkspaceAdminCheck = false) {}
        public function setReferenceValue_dbRels($refRec, $itemArray, $newValue, $dataArray, $flexPointer = '') {}
        public function setReferenceValue_fileRels($refRec, $itemArray, $newValue, $dataArray, $flexPointer = '') {}
        public function setReferenceValue_softreferences($refRec, $softref, $newValue, $dataArray, $flexPointer = '') {}
        protected function isDbReferenceField(array $configuration) {}
        public function isReferenceField(array $configuration) {}
        protected function fetchTableRelationFields($tableName) {}
        public function destPathFromUploadFolder($folder) {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        public function updateIndex(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$testOnly, /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$cli_echo = false) {}
        protected function getRecordRawCached(string $tableName, int $uid) {}
        protected function shouldExcludeTableFromReferenceIndex($tableName) {}
        protected function shouldExcludeTableColumnFromReferenceIndex($tableName, $column, $onlyColumn) {}
        /**
         * Enables the runtime-based caches
         * Could lead to side effects, depending if the reference index instance is run multiple times
         * while records would be changed.
         */
        public function enableRuntimeCache() {}
        /**
         * Disables the runtime-based cache
         */
        public function disableRuntimeCache() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Manager that handles opening/retrieving database connections.
     *
     * It's a facade to the actual Doctrine DBAL DriverManager that implements TYPO3
     * specific functionality like mapping individual tables to different database
     * connections.
     *
     * getConnectionForTable() is the only supported way to get a connection that
     * honors the table mapping configuration.
     */
    class ConnectionPool {
        const DEFAULT_CONNECTION_NAME = 'Default';

        /**
         * @var Connection[]
         */
        static protected $connections;

        public function getConnectionForTable(string $tableName) : Connection {}
        public function getConnectionByName(string $connectionName) : Connection {}
/** @var Connection $conn */
        protected function getDatabaseConnection(/** @var Connection $conn */
array $connectionParams) : Connection {}
        public function getQueryBuilderForTable(string $tableName) : QueryBuilder {}
        /**
         * Returns an array containing the names of all currently configured connections.
         *
         * This method should only be used in edge cases. Use getConnectionForTable() so
         * that the tablename<>databaseConnection mapping will be taken into account.
         *
         * @internal
         * @return array
         */
        public function getConnectionNames() : array {}
    }

    /**
     * Load database groups (relations)
     * Used to process the relations created by the TCA element types "group" and "select" for database records.
     * Manages MM-relations as well.
     */
    class RelationHandler {
        /**
         * $fetchAllFields if false getFromDB() fetches only uid, pid, thumbnail and label fields (as defined in TCA)
         *
         * @var bool
         */
        protected $fetchAllFields;
        /**
         * If set, values that are not ids in tables are normally discarded. By this options they will be preserved.
         *
         * @var bool
         */
        public $registerNonTableValues;
        /**
         * Contains the table names as keys. The values are the id-values for each table.
         * Should ONLY contain proper table names.
         *
         * @var array
         */
        public $tableArray;
        /**
         * Contains items in an numeric array (table/id for each). Tablenames here might be "_NO_TABLE"
         *
         * @var array
         */
        public $itemArray;
        /**
         * Array for NON-table elements
         *
         * @var array
         */
        public $nonTableArray;
        /**
         * @var array
         */
        public $additionalWhere;
        /**
         * Deleted-column is added to additionalWhere... if this is set...
         *
         * @var bool
         */
        public $checkIfDeleted;
        /**
         * @var array
         */
        public $dbPaths;
        /**
         * Will contain the first table name in the $tablelist (for positive ids)
         *
         * @var string
         */
        public $firstTable;
        /**
         * Will contain the second table name in the $tablelist (for negative ids)
         *
         * @var string
         */
        public $secondTable;
        /**
         * If TRUE, uid_local and uid_foreign are switched, and the current table
         * is inserted as tablename - this means you display a foreign relation "from the opposite side"
         *
         * @var bool
         */
        public $MM_is_foreign;
        /**
         * Field name at the "local" side of the MM relation
         *
         * @var string
         */
        public $MM_oppositeField;
        /**
         * Only set if MM_is_foreign is set
         *
         * @var string
         */
        public $MM_oppositeTable;
        /**
         * Only set if MM_is_foreign is set
         *
         * @var string
         */
        public $MM_oppositeFieldConf;
        /**
         * Is empty by default; if MM_is_foreign is set and there is more than one table
         * allowed (on the "local" side), then it contains the first table (as a fallback)
         * @var string
         */
        public $MM_isMultiTableRelationship;
        /**
         * Current table => Only needed for reverse relations
         *
         * @var string
         */
        public $currentTable;
        /**
         * If a record should be undeleted
         * (so do not use the $useDeleteClause on \TYPO3\CMS\Backend\Utility\BackendUtility)
         *
         * @var bool
         */
        public $undeleteRecord;
        /**
         * Array of fields value pairs that should match while SELECT
         * and will be written into MM table if $MM_insert_fields is not set
         *
         * @var array
         */
        public $MM_match_fields;
        /**
         * This is set to TRUE if the MM table has a UID field.
         *
         * @var bool
         */
        public $MM_hasUidField;
        /**
         * Array of fields and value pairs used for insert in MM table
         *
         * @var array
         */
        public $MM_insert_fields;
        /**
         * Extra MM table where
         *
         * @var string
         */
        public $MM_table_where;
        /**
         * Usage of a MM field on the opposite relation.
         *
         * @var array
         */
        protected $MM_oppositeUsage;
        /**
         * @var bool
         */
        protected $updateReferenceIndex;
        /**
         * @var bool
         */
        protected $useLiveParentIds;
        /**
         * @var bool
         */
        protected $useLiveReferenceIds;
        /**
         * @var int
         */
        protected $workspaceId;
        /**
         * @var bool
         */
        protected $purged;
        /**
         * This array will be filled by getFromDB().
         *
         * @var array
         */
        public $results;

        /**
         * Gets the current workspace id.
         *
         * @return int
         */
        public function getWorkspaceId() {}
        public function setWorkspaceId($workspaceId) {}
        /**
         * Whether item array has been purged in this instance.
         *
         * @return bool
         */
        public function isPurged() {}
        public function start($itemlist, $tablelist, $MMtable = '', $MMuid = 0, $currentTable = '', $conf = [ ]) {}
        public function setFetchAllFields($allFields) {}
        public function setUpdateReferenceIndex($updateReferenceIndex) {}
        public function setUseLiveParentIds($useLiveParentIds) {}
        public function setUseLiveReferenceIds($useLiveReferenceIds) {}
        public function readList($itemlist, array $configuration) {}
        public function sortList($sortby) {}
        public function readMM($tableName, $uid) {}
        public function writeMM($MM_tableName, $uid, $prependTableName = false) {}
        public function remapMM($MM_tableName, $uid, $newUid, $prependTableName = false) {}
        public function readForeignField($uid, $conf) {}
        public function writeForeignField($conf, $parentUid, $updateToUid = 0, $skipSorting = false) {}
        public function getValueArray($prependTableName = false) {}
        /**
         * Reads all records from internal tableArray into the internal ->results array
         * where keys are table names and for each table, records are stored with uids as their keys.
         * If $this->fetchAllFields is false you can save a little memory
         * since only uid,pid and a few other fields are selected.
         *
         * @return array
         */
        public function getFromDB() {}
        /**
         * This method is typically called after getFromDB().
         * $this->results holds a list of resolved and valid relations,
         * $this->itemArray hold a list of "selected" relations from the incoming selection array.
         * The difference is that "itemArray" may hold a single table/uid combination multiple times,
         * for instance in a type=group relation having multiple=true, while "results" hold each
         * resolved relation only once.
         * The methods creates a sanitized "itemArray" from resolved "results" list, normalized
         * the return array to always contain both table name and uid, and keep incoming
         * "itemArray" sort order and keeps "multiple" selections.
         *
         * @return array
         */
        public function getResolvedItemArray() : array {}
        public function countItems($returnAsArray = true) {}
/** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
        public function updateRefIndex(/** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$table, /** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$id) {}
        /**
         * Converts elements in the local item array to use version ids instead of
         * live ids, if possible. The most common use case is, to call that prior
         * to processing with MM relations in a workspace context. For tha special
         * case, ids on both side of the MM relation must use version ids if
         * available.
         *
         * @return bool Whether items have been converted
         */
        public function convertItemArray() {}
        public function purgeItemArray($workspaceId = null) {}
        /**
         * Removes items having a delete placeholder from $this->itemArray
         *
         * @return bool Whether items have been purged
         */
        public function processDeletePlaceholder() {}
        protected function purgeItemArrayHandler($purgeCallback) {}
        protected function purgeVersionedIds($tableName, array $ids) {}
        protected function purgeLiveVersionedIds($tableName, array $ids) {}
        protected function purgeDeletePlaceholder($tableName, array $ids) {}
        protected function removeFromItemArray($tableName, $id) {}
        public static function isOnSymmetricSide($parentUid, $parentConf, $childRec) {}
        protected function completeOppositeUsageValues($tableName, array $referenceValues) {}
        protected function getLiveDefaultId($tableName, $id) {}
/** @var PlainDataResolver $resolver */
        protected function getResolver(/** @var PlainDataResolver $resolver */
$tableName, /** @var PlainDataResolver $resolver */
array $ids, /** @var PlainDataResolver $resolver */
array $sortingStatement = null) {}
        protected function getConnectionForTableName(string $tableName) {}
    }


    /**
     * interface for classes with hook for postprocessing extTables after loading
     */
    interface TableConfigurationPostProcessingHookInterface {
        /**
         * Function which may process data created / registered by extTables
         * scripts (f.e. modifying TCA data of all extensions)
         */
        function processData() ;
    }

}

namespace TYPO3\CMS\Core\Database\Schema {
    /**
     * Helper methods to handle SQL files and transform them into individual statements
     * for further processing.
     *
     * @internal
     */
    class SchemaMigrator {
        /**
         * @var Schema[]
         */
        protected $schema;

        public function getUpdateSuggestions(array $statements, bool $remove = false) : array {}
        public function getSchemaDiffs(array $statements) : array {}
        public function migrate(array $statements, array $selectedStatements) : array {}
        public function install(array $statements, bool $createOnly = false) : array {}
        public function importStaticData(array $statements, bool $truncate = false) : array {}
        public function parseCreateTableStatements(array $statements) : array {}
    }

    /**
     * Helper methods to handle raw SQL input and transform it into individual statements
     * for further processing.
     *
     * @internal
     */
    class TableDiff extends \doctrine\dbal\schema\tablediff {
        /**
         * Platform specific table options
         *
         * @var array
         */
        protected $tableOptions;

        /**
         * Getter for table options.
         *
         * @return array
         */
        public function getTableOptions() : array {}
        public function setTableOptions(array $tableOptions) : TableDiff {}
        public function hasTableOption(string $optionName) : bool {}
        public function getTableOption(string $optionName) : string {}
    }

    /**
     * Handling schema migrations per connection.
     *
     * @internal
     */
    class ConnectionMigrator {
        /**
         * @var string Prefix of deleted tables
         */
        protected $deletedPrefix;
        /**
         * @var array
         */
        protected $tableAndFieldMaxNameLengthsPerDbPlatform;
        /**
         * @var Connection
         */
        protected $connection;
        /**
         * @var string
         */
        protected $connectionName;
        /**
         * @var Table[]
         */
        protected $tables;

        public function __construct(string $connectionName, array $tables) {}
        public static function create(string $connectionName, array $tables) {}
        /**
         * Return the raw Doctrine SchemaDiff object for the current connection.
         * This diff contains all changes without any pre-processing.
         *
         * @return SchemaDiff
         */
        public function getSchemaDiff() : SchemaDiff {}
        public function getUpdateSuggestions(bool $remove = false) : array {}
        public function install(bool $createOnly = false) : array {}
        protected function buildSchemaDiff(bool $renameUnused = true) : SchemaDiff {}
/** @var Table[] $tablesForConnection */
        protected function buildExpectedSchemaDefinitions(/** @var Table[] $tablesForConnection */
string $connectionName) : Schema {}
        protected function getNewTableUpdateSuggestions(SchemaDiff $schemaDiff) : array {}
        protected function getNewFieldUpdateSuggestions(SchemaDiff $schemaDiff) : array {}
        protected function getChangedTableOptions(SchemaDiff $schemaDiff) : array {}
        protected function getChangedFieldUpdateSuggestions(SchemaDiff $schemaDiff) : array {}
        protected function getUnusedTableUpdateSuggestions(SchemaDiff $schemaDiff) : array {}
        protected function getUnusedFieldUpdateSuggestions(SchemaDiff $schemaDiff) : array {}
        protected function getDropFieldUpdateSuggestions(SchemaDiff $schemaDiff) : array {}
        protected function getDropTableUpdateSuggestions(SchemaDiff $schemaDiff) : array {}
        protected function migrateUnprefixedRemovedTablesToRenames(SchemaDiff $schemaDiff) : SchemaDiff {}
        protected function migrateUnprefixedRemovedFieldsToRenames(SchemaDiff $schemaDiff) : SchemaDiff {}
        protected function migrateColumnRenamesToDistinctActions(SchemaDiff $schemaDiff) : SchemaDiff {}
        protected function getTableAndFieldNameMaxLengths(string $databasePlatform = '') {}
        protected function getMaxTableNameLength(string $databasePlatform = '') {}
        protected function getMaxColumnNameLength(string $databasePlatform = '') {}
        protected function getTableRecordCount(string $tableName) : int {}
        protected function getConnectionNameForTable(string $tableName) : string {}
        protected function calculateUpdateSuggestionsHashes(array $statements) : array {}
        protected function removeUnrelatedTables(array $tableDiffs, array $validTableNames) : array {}
        protected function transformTablesForDatabasePlatform(array $tables, Connection $connection) : array {}
        protected function getTableOptions(array $tableNames) : array {}
        protected function buildQuotedTable(Table $table) : Table {}
        protected function buildQuotedColumn(Column $column) : Column {}
        protected function buildQuotedIndex(Index $index) : Index {}
        protected function buildQuotedForeignKey(ForeignKeyConstraint $index) : ForeignKeyConstraint {}
    }

    /**
     * Compares two Schemas and returns an instance of SchemaDiff.
     *
     * @internal
     */
    class Comparator extends \doctrine\dbal\schema\comparator {
        /**
         * @var AbstractPlatform
         */
        protected $databasePlatform;

        public function __construct(AbstractPlatform $platform = null) {}
        public function diffTable(Table $fromTable, Table $toTable) {}
        public function diffColumn(Column $column1, Column $column2) {}
    }

    /**
     * Helper methods to handle raw SQL input and transform it into individual statements
     * for further processing.
     *
     * @internal
     */
    class SqlReader {
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;

        public function __construct(Dispatcher $signalSlotDispatcher = null) {}
        public function getTablesDefinitionString(bool $withStatic = false) : string {}
        public function getStatementArray(string $dumpContent, string $queryRegex = null) : array {}
        public function getInsertStatementArray(string $dumpContent) : array {}
        public function getCreateTableStatementArray(string $dumpContent) : array {}
        protected function emitTablesDefinitionIsBeingBuiltSignal(array $sqlString) : array {}
    }

}

namespace TYPO3\CMS\Core\Database\Schema\Types {
    /**
     * Type that maps an TYPE field.
     */
    class SetType extends \doctrine\dbal\types\type {
        const TYPE = 'set';

        public function getSQLDeclaration(array $fieldDeclaration, AbstractPlatform $platform) : string {}
        /**
         * Gets the name of this type.
         *
         * @return string
         */
        public function getName() : string {}
    }

    /**
     * Type that maps an TYPE field.
     */
    class EnumType extends \doctrine\dbal\types\type {
        const TYPE = 'enum';

        public function getSQLDeclaration(array $fieldDeclaration, AbstractPlatform $platform) : string {}
        /**
         * Gets the name of this type.
         *
         * @return string
         */
        public function getName() : string {}
    }

}

namespace TYPO3\CMS\Core\Database\Schema\Parser {
    /**
     * An LL(*) recursive-descent parser for MySQL CREATE TABLE statements.
     * Parses a CREATE TABLE statement, reports any errors in it, and generates an AST.
     */
    class Parser {
        /**
         * The lexer.
         *
         * @var Lexer
         */
        protected $lexer;
        /**
         * The statement to parse.
         *
         * @var string
         */
        protected $statement;

        public function __construct(string $statement) {}
        /**
         * Gets the lexer used by the parser.
         *
         * @return Lexer
         */
        public function getLexer() : Lexer {}
        /**
         * Parses and builds AST for the given Query.
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\AbstractCreateStatement
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        public function getAST() : AST\AbstractCreateStatement {}
        public function match($token) {}
        public function free($deep = false, $position = 0) {}
        /**
         * Parses a statement string.
         *
         * @return Table[]
         * @throws \Doctrine\DBAL\Schema\SchemaException
         * @throws \RuntimeException
         * @throws \InvalidArgumentException
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        public function parse() : array {}
        public function syntaxError($expected = '', $token = null) {}
        public function semanticalError($message = '', $token = null) {}
        protected function peekBeyondClosingParenthesis($resetPeek = true) {}
        /**
         * queryLanguage ::= CreateTableStatement
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\AbstractCreateStatement
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        public function queryLanguage() : AST\AbstractCreateStatement {}
        /**
         * CreateStatement ::= CREATE [TEMPORARY] TABLE
         * Abstraction to allow for support of other schema objects like views in the future.
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\AbstractCreateStatement
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        public function createStatement() : AST\AbstractCreateStatement {}
        /**
         * CreateTableStatement ::= CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name (create_definition,...) [tbl_options]
         *
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function createTableStatement() : AST\CreateTableStatement {}
        /**
         * CreateTableClause ::= CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\CreateTableClause
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function createTableClause() : AST\CreateTableClause {}
        /**
         * Parses the table field/index definition
         *
         * createDefinition ::= (
         *  col_name column_definition
         *  | [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...) [index_option] ...
         *  | {INDEX|KEY} [index_name] [index_type] (index_col_name,...) [index_option] ...
         *  | [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name,...) [index_option] ...
         *  | {FULLTEXT|SPATIAL} [INDEX|KEY] [index_name] (index_col_name,...) [index_option] ...
         *  | [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,...) reference_definition
         *  | CHECK (expr)
         * )
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\CreateDefinition
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function createDefinition() : AST\CreateDefinition {}
        /**
         * Parse the definition of a single column or index
         *
         * @see createDefinition()
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\AbstractCreateDefinitionItem
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function createDefinitionItem() : AST\AbstractCreateDefinitionItem {}
        /**
         * Parses an index definition item contained in the create definition
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\CreateIndexDefinitionItem
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function createIndexDefinitionItem() : AST\CreateIndexDefinitionItem {}
        /**
         * Parses an foreign key definition item contained in the create definition
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\CreateForeignKeyDefinitionItem
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function createForeignKeyDefinitionItem() : AST\CreateForeignKeyDefinitionItem {}
        /**
         * Return the name of an index. No name has been supplied if the next token is USING
         * which defines the index type.
         *
         * @return AST\Identifier
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        public function indexName() : AST\Identifier {}
        /**
         * IndexType ::= USING { BTREE | HASH }
         *
         * @return string
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        public function indexType() : string {}
        /**
         * IndexOptions ::=  KEY_BLOCK_SIZE [=] value
         *  | index_type
         *  | WITH PARSER parser_name
         *  | COMMENT 'string'
         *
         * @return array
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        public function indexOptions() : array {}
        /**
         * CreateColumnDefinitionItem ::= col_name column_definition
         *
         * column_definition:
         *   data_type [NOT NULL | NULL] [DEFAULT default_value]
         *     [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY]
         *     [COMMENT 'string']
         *     [COLUMN_FORMAT {FIXED|DYNAMIC|DEFAULT}]
         *     [STORAGE {DISK|MEMORY|DEFAULT}]
         *     [reference_definition]
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\CreateColumnDefinitionItem
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function createColumnDefinitionItem() : AST\CreateColumnDefinitionItem {}
        /**
         * DataType ::= BIT[(length)]
         *   | TINYINT[(length)] [UNSIGNED] [ZEROFILL]
         *   | SMALLINT[(length)] [UNSIGNED] [ZEROFILL]
         *   | MEDIUMINT[(length)] [UNSIGNED] [ZEROFILL]
         *   | INT[(length)] [UNSIGNED] [ZEROFILL]
         *   | INTEGER[(length)] [UNSIGNED] [ZEROFILL]
         *   | BIGINT[(length)] [UNSIGNED] [ZEROFILL]
         *   | REAL[(length,decimals)] [UNSIGNED] [ZEROFILL]
         *   | DOUBLE[(length,decimals)] [UNSIGNED] [ZEROFILL]
         *   | FLOAT[(length,decimals)] [UNSIGNED] [ZEROFILL]
         *   | DECIMAL[(length[,decimals])] [UNSIGNED] [ZEROFILL]
         *   | NUMERIC[(length[,decimals])] [UNSIGNED] [ZEROFILL]
         *   | DATE
         *   | TIME[(fsp)]
         *   | TIMESTAMP[(fsp)]
         *   | DATETIME[(fsp)]
         *   | YEAR
         *   | CHAR[(length)] [BINARY] [CHARACTER SET charset_name] [COLLATE collation_name]
         *   | VARCHAR(length) [BINARY] [CHARACTER SET charset_name] [COLLATE collation_name]
         *   | BINARY[(length)]
         *   | VARBINARY(length)
         *   | TINYBLOB
         *   | BLOB
         *   | MEDIUMBLOB
         *   | LONGBLOB
         *   | TINYTEXT [BINARY] [CHARACTER SET charset_name] [COLLATE collation_name]
         *   | TEXT [BINARY] [CHARACTER SET charset_name] [COLLATE collation_name]
         *   | MEDIUMTEXT [BINARY] [CHARACTER SET charset_name] [COLLATE collation_name]
         *   | LONGTEXT [BINARY] [CHARACTER SET charset_name] [COLLATE collation_name]
         *   | ENUM(value1,value2,value3,...) [CHARACTER SET charset_name] [COLLATE collation_name]
         *   | SET(value1,value2,value3,...) [CHARACTER SET charset_name] [COLLATE collation_name]
         *   | JSON
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\DataType\AbstractDataType
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function columnDataType() : AST\DataType\AbstractDataType {}
        /**
         * DefaultValue::= DEFAULT default_value
         *
         * @return mixed
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function columnDefaultValue() {}
        protected function dataTypeLength(bool $required = false) : int {}
        /**
         * Determine length and optional decimal parameter of a column field definition, i.E. DECIMAL(10,6)
         *
         * @return array
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        private function dataTypeDecimals() : array {}
        /**
         * Parse common options for numeric datatypes
         *
         * @return array
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function numericDataTypeOptions() : array {}
        /**
         * Determine the fractional seconds part support for TIME, DATETIME and TIMESTAMP columns
         *
         * @return int
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function fractionalSecondsPart() : int {}
        /**
         * Parse common options for numeric datatypes
         *
         * @return array
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function characterDataTypeOptions() : array {}
        /**
         * Parse shared options for enumeration datatypes (ENUM and SET)
         *
         * @return array
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function enumerationDataTypeOptions() : array {}
        /**
         * Return all defined values for an enumeration datatype (ENUM, SET)
         *
         * @return array
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function valueList() : array {}
        /**
         * Return a value list item for an enumeration set
         *
         * @return string
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function valueListItem() : string {}
        /**
         * ReferenceDefinition ::= REFERENCES tbl_name (index_col_name,...)
         *  [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]
         *  [ON DELETE reference_option]
         *  [ON UPDATE reference_option]
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\ReferenceDefinition
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function referenceDefinition() : AST\ReferenceDefinition {}
        /**
         * IndexColumnName ::= col_name [(length)] [ASC | DESC]
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\IndexColumnName
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function indexColumnName() : AST\IndexColumnName {}
        /**
         * ReferenceOption ::= RESTRICT | CASCADE | SET NULL | NO ACTION
         *
         * @return string
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function referenceOption() : string {}
        /**
         * Parse MySQL table options
         *
         *  ENGINE [=] engine_name
         *  | AUTO_INCREMENT [=] value
         *  | AVG_ROW_LENGTH [=] value
         *  | [DEFAULT] CHARACTER SET [=] charset_name
         *  | CHECKSUM [=] {0 | 1}
         *  | [DEFAULT] COLLATE [=] collation_name
         *  | COMMENT [=] 'string'
         *  | COMPRESSION [=] {'ZLIB'|'LZ4'|'NONE'}
         *  | CONNECTION [=] 'connect_string'
         *  | DATA DIRECTORY [=] 'absolute path to directory'
         *  | DELAY_KEY_WRITE [=] {0 | 1}
         *  | ENCRYPTION [=] {'Y' | 'N'}
         *  | INDEX DIRECTORY [=] 'absolute path to directory'
         *  | INSERT_METHOD [=] { NO | FIRST | LAST }
         *  | KEY_BLOCK_SIZE [=] value
         *  | MAX_ROWS [=] value
         *  | MIN_ROWS [=] value
         *  | PACK_KEYS [=] {0 | 1 | DEFAULT}
         *  | PASSWORD [=] 'string'
         *  | ROW_FORMAT [=] {DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT}
         *  | STATS_AUTO_RECALC [=] {DEFAULT|0|1}
         *  | STATS_PERSISTENT [=] {DEFAULT|0|1}
         *  | STATS_SAMPLE_PAGES [=] value
         *  | TABLESPACE tablespace_name
         *  | UNION [=] (tbl_name[,tbl_name]...)
         *
         * @return array
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function tableOptions() : array {}
        /**
         * Return the value of an option, skipping the optional equal sign.
         *
         * @return mixed
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function tableOptionValue() {}
        /**
         * Certain objects within MySQL, including database, table, index, column, alias, view, stored procedure,
         * partition, tablespace, and other object names are known as identifiers.
         *
         * @return \TYPO3\CMS\Core\Database\Schema\Parser\AST\Identifier
         * @throws \TYPO3\CMS\Core\Database\Schema\Exception\StatementException
         */
        protected function schemaObjectName() {}
    }

    /**
     * Converts a CreateTableStatement syntax node into a Doctrine Table
     * object that represents the table defined in the original SQL statement.
     */
    class TableBuilder {
        /**
         * @var Table
         */
        protected $table;
        /**
         * @var AbstractPlatform
         */
        protected $platform;

        public function __construct(AbstractPlatform $platform = null) {}
        public function create(CreateTableStatement $tableStatement) : Table {}
        protected function addColumn(CreateColumnDefinitionItem $item) : Column {}
        protected function addIndex(CreateIndexDefinitionItem $item) : Index {}
        protected function addForeignKey(CreateForeignKeyDefinitionItem $item) {}
        protected function addForeignKeyConstraint(array $localColumnNames, ReferenceDefinition $referenceDefinition, string $indexName = null) {}
        protected function getDoctrineColumnTypeName(DataType\AbstractDataType $dataType) : string {}
        protected function buildTableOptions(array $tableOptions) : array {}
    }

    /**
     * Scans a MySQL CREATE TABLE statement for tokens.
     */
    class Lexer extends \doctrine\common\lexer {
        const T_ROW_FORMAT = 364;
        const T_STATS_AUTO_RECALC = 365;
        const T_STATS_PERSISTENT = 366;
        const T_STATS_SAMPLE_PAGES = 367;
        const T_TABLESPACE = 368;
        const T_UNION = 369;
        const T_PRECISION = 370;
        const T_PARSER = 348;
        const T_FOREIGN = 349;
        const T_ENGINE = 350;
        const T_AVG_ROW_LENGTH = 351;
        const T_CHECKSUM = 352;
        const T_COMPRESSION = 353;
        const T_CONNECTION = 354;
        const T_DATA = 355;
        const T_DIRECTORY = 356;
        const T_DELAY_KEY_WRITE = 357;
        const T_ENCRYPTION = 358;
        const T_INSERT_METHOD = 359;
        const T_MAX_ROWS = 360;
        const T_MIN_ROWS = 361;
        const T_PACK_KEYS = 362;
        const T_PASSWORD = 363;
        const T_FULL = 333;
        const T_MATCH = 332;
        const T_SIMPLE = 335;
        const T_PARTIAL = 334;
        const T_UPDATE = 337;
        const T_ON = 336;
        const T_RESTRICT = 339;
        const T_DELETE = 338;
        const T_NO = 341;
        const T_CASCADE = 340;
        const T_USING = 343;
        const T_ACTION = 342;
        const T_HASH = 345;
        const T_BTREE = 344;
        const T_WITH = 347;
        const T_KEY_BLOCK_SIZE = 346;
        const T_STORAGE = 318;
        const T_REFERENCES = 319;
        const T_COMMENT = 316;
        const T_COLUMN_FORMAT = 317;
        const T_DYNAMIC = 322;
        const T_MEMORY = 323;
        const T_NULL = 320;
        const T_FIXED = 321;
        const T_ZEROFILL = 326;
        const T_CURRENT_TIMESTAMP = 327;
        const T_DISK = 324;
        const T_UNSIGNED = 325;
        const T_ASC = 330;
        const T_DESC = 331;
        const T_CHARACTER = 328;
        const T_COLLATE = 329;
        const T_IF = 303;
        const T_TABLE = 302;
        const T_TEMPORARY = 301;
        const T_CREATE = 300;
        const T_INDEX = 307;
        const T_CONSTRAINT = 306;
        const T_EXISTS = 305;
        const T_NOT = 304;
        const T_PRIMARY = 311;
        const T_SPATIAL = 310;
        const T_FULLTEXT = 309;
        const T_KEY = 308;
        const T_AUTO_INCREMENT = 315;
        const T_DEFAULT = 314;
        const T_CHECK = 313;
        const T_UNIQUE = 312;
        const T_VARBINARY = 221;
        const T_TINYBLOB = 222;
        const T_BLOB = 223;
        const T_MEDIUMBLOB = 224;
        const T_NONE = 1;
        const T_STRING = 2;
        const T_INPUT_PARAMETER = 3;
        const T_MULTIPLY = 13;
        const T_MINUS = 12;
        const T_PLUS = 15;
        const T_NEGATE = 14;
        const T_CLOSE_CURLY_BRACE = 17;
        const T_OPEN_CURLY_BRACE = 16;
        const T_IDENTIFIER = 100;
        const T_SEMICOLON = 18;
        const T_OPEN_PARENTHESIS = 5;
        const T_CLOSE_PARENTHESIS = 4;
        const T_DIVIDE = 7;
        const T_COMMA = 6;
        const T_EQUALS = 9;
        const T_DOT = 8;
        const T_LOWER_THAN = 11;
        const T_GREATER_THAN = 10;
        const T_DECIMAL = 211;
        const T_NUMERIC = 212;
        const T_DOUBLE = 209;
        const T_FLOAT = 210;
        const T_TIMESTAMP = 215;
        const T_DATETIME = 216;
        const T_DATE = 213;
        const T_TIME = 214;
        const T_SMALLINT = 203;
        const T_MEDIUMINT = 204;
        const T_BIT = 201;
        const T_TINYINT = 202;
        const T_BIGINT = 207;
        const T_REAL = 208;
        const T_INT = 205;
        const T_INTEGER = 206;
        const T_MEDIUMTEXT = 228;
        const T_TEXT = 227;
        const T_TINYTEXT = 226;
        const T_LONGBLOB = 225;
        const T_JSON = 232;
        const T_SET = 231;
        const T_ENUM = 230;
        const T_LONGTEXT = 229;
        const T_BINARY = 220;
        const T_VARCHAR = 219;
        const T_CHAR = 218;
        const T_YEAR = 217;

        public function __construct($input) {}
        /**
         * Lexical catchable patterns.
         *
         * @return array
         */
        protected function getCatchablePatterns() : array {}
        /**
         * Lexical non-catchable patterns.
         *
         * @return array
         */
        protected function getNonCatchablePatterns() : array {}
        protected function getType($value) : int {}
    }

}

namespace TYPO3\CMS\Core\Database\Schema\Parser\AST {
    /**
     * Syntax node to represent identifiers used in various parts of a
     * SQL statements like table, field or index names.
     */
    class Identifier {
        /**
         * @var string
         */
        public $schemaObjectName;
        /**
         * @var string
         */
        protected $quoteChar;

        public function __construct(string $schemaObjectName = null) {}
        /**
         * Quotes the schema object name.
         *
         * @return string
         */
        public function getQuotedName() : string {}
    }

    /**
     * Syntax node to structure a foreign key definition.
     */
    class CreateForeignKeyDefinitionItem extends \typo3\cms\core\database\schema\parser\ast\abstractcreatedefinitionitem {
        /**
         * @var
         */
        public $indexName;
        /**
         * The index name
         *
         * @var string
         */
        public $name;
        /**
         * @var IndexColumnName[]
         */
        public $columnNames;
        /**
         * Reference definition
         *
         * @var ReferenceDefinition
         */
        public $reference;

        public function __construct(Identifier $indexName, array $columnNames, ReferenceDefinition $reference) {}
    }

    /**
     * Syntax node to represent the REFERENCES part of a foreign key
     * definition, encapsulating ON UPDATE/ON DELETE actions as well
     * as the foreign table name and columns.
     */
    class ReferenceDefinition {
        /**
         * Match type: FULL, PARTIAL or SIMPLE
         *
         * @var string
         */
        public $match;
        /**
         * Reference Option: RESTRICT | CASCADE | SET NULL | NO ACTION
         *
         * @var string
         */
        public $onDelete;
        /**
         * Reference Option: RESTRICT | CASCADE | SET NULL | NO ACTION
         *
         * @var string
         */
        public $onUpdate;
        /**
         * @var \TYPO3\CMS\Core\Database\Schema\Parser\AST\Identifier
         */
        public $tableName;
        /**
         * @var IndexColumnName[]
         */
        public $columnNames;

        public function __construct(Identifier $tableName, array $columnNames) {}
    }

    /**
     * Syntax tree node for column definitions within a create statements.
     * Holds basic attributes common to all types of columns.
     */
    class CreateColumnDefinitionItem extends \typo3\cms\core\database\schema\parser\ast\abstractcreatedefinitionitem {
        /**
         * @var \TYPO3\CMS\Core\Database\Schema\Parser\AST\Identifier
         */
        public $columnName;
        /**
         * @var \TYPO3\CMS\Core\Database\Schema\Parser\AST\DataType\AbstractDataType
         */
        public $dataType;
        /**
         * Allow NULL values
         *
         * @var bool
         */
        public $allowNull;
        /**
         * Explicit default value
         *
         * @var bool
         */
        public $hasDefaultValue;
        /**
         * The explicit default value
         *
         * @var mixed
         */
        public $defaultValue;
        /**
         * Set auto increment flag
         *
         * @var bool
         */
        public $autoIncrement;
        /**
         * Create non-unique index for column
         *
         * @var bool
         */
        public $index;
        /**
         * Create unique constraint for column
         *
         * @var bool
         */
        public $unique;
        /**
         * Use column as primary key for table
         *
         * @var bool
         */
        public $primary;
        /**
         * Column comment
         *
         * @var string
         */
        public $comment;
        /**
         * The column format (DYNAMIC or FIXED)
         *
         * @var string
         */
        public $columnFormat;
        /**
         * The storage type for the column (ignored unless MySQL Cluster with NDB Engine)
         *
         * @var string
         */
        public $storage;
        /**
         * @var ReferenceDefinition
         */
        public $reference;

        public function __construct(Identifier $columnName, AbstractDataType $dataType) {}
    }

    /**
     * Syntax node to represent the initial CREATE TABLE statement in the
     * syntax tree. Represents everything up to the start of the definition
     * of fields/indexes/foreign keys
     */
    class CreateTableClause {
        /**
         * @var \TYPO3\CMS\Core\Database\Schema\Parser\AST\Identifier
         */
        public $tableName;
        /**
         * @var bool
         */
        public $isTemporary;

        public function __construct(Identifier $tableName, bool $isTemporary = false) {}
    }

    /**
     * Base class for all definition items that can occur in the definition
     * of a table, namely fields, indexes and foreign keys.
     */
    abstract class AbstractCreateDefinitionItem {}

    /**
     * Base class for all create type statements like CREATE TABLE
     * or CREATE VIEW.
     */
    abstract class AbstractCreateStatement {}

    /**
     * Syntax node to represent a column within an index, which can in MySQL
     * context consist of the actual column name, length information for a partial
     * index and a direction which influences default sorting and access patterns.
     */
    class IndexColumnName {
        /**
         * @var \TYPO3\CMS\Core\Database\Schema\Parser\AST\Identifier
         */
        public $columnName;
        /**
         * @var int
         */
        public $length;
        /**
         * @var string
         */
        public $direction;

        public function __construct(Identifier $columnName, int $length, string $direction = null) {}
    }

    /**
     * Syntax node for the whole definition of a table/view. Collects
     * the nodes for fields, indexes and foreign keys.
     */
    class CreateDefinition {
        /**
         * @var array
         */
        public $items;

        public function __construct(array $items) {}
    }

    /**
     * Syntax node to structure an index definition.
     */
    class CreateIndexDefinitionItem extends \typo3\cms\core\database\schema\parser\ast\abstractcreatedefinitionitem {
        /**
         * @var
         */
        public $indexName;
        /**
         * Create the primary key
         *
         * @var bool
         */
        public $isPrimary;
        /**
         * Create a unique index
         *
         * @var bool
         */
        public $isUnique;
        /**
         * Create a fulltext index
         *
         * @var bool
         */
        public $isFulltext;
        /**
         * Create a spatial (geo) index
         *
         * @var bool
         */
        public $isSpatial;
        /**
         * Use a special index type (MySQL: BTREE | HASH)
         *
         * @var string
         */
        public $indexType;
        /**
         * The index name
         *
         * @var string
         */
        public $name;
        /**
         * @var IndexColumnName[]
         */
        public $columnNames;
        /**
         * Index options KEY_BLOCK_SIZE, USING, WITH PARSER or COMMENT
         *
         * @var array
         */
        public $options;

        public function __construct(Identifier $indexName = null, bool $isPrimary = false, bool $isUnique = false, bool $isSpatial = false, bool $isFulltext = false) {}
    }

    /**
     * Root node for a CREATE TABLE statement in the syntax tree.
     */
    class CreateTableStatement extends \typo3\cms\core\database\schema\parser\ast\abstractcreatestatement {
        /**
         * @var \TYPO3\CMS\Core\Database\Schema\Parser\AST\Identifier
         */
        public $tableName;
        /**
         * @var bool
         */
        public $isTemporary;
        /**
         * @var \TYPO3\CMS\Core\Database\Schema\Parser\AST\CreateDefinition
         */
        public $createDefinition;
        /**
         * @var array
         */
        public $tableOptions;

        public function __construct(CreateTableClause $createTableClause, CreateDefinition $createDefinition) {}
    }

}

namespace TYPO3\CMS\Core\Database\Schema\Parser\AST\DataType {
    /**
     * Node representing the REAL SQL column type
     */
    class RealDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\floatdatatype {}

    /**
     * Node representing the VARBINARY SQL column type
     */
    class VarBinaryDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length) {}
    }

    /**
     * Node representing the SMALLINT SQL column type
     */
    class SmallIntDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\integerdatatype {}

    /**
     * Node representing the LONGTEXT SQL column type
     */
    class LongTextDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\textdatatype {
        public function __construct(array $options) {}
    }

    /**
     * Node representing the FLOAT SQL column type
     */
    class FloatDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(array $dataTypeDecimals, array $dataTypeOptions) {}
    }

    /**
     * Node representing the TINYTEXT SQL column type
     */
    class TinyTextDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\textdatatype {
        public function __construct(array $options) {}
    }

    /**
     * Node representing the LONGBLOB SQL column type
     */
    class LongBlobDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\blobdatatype {
        /**
         * LongBlobDataType constructor.
         */
        public function __construct() {}
    }

    /**
     * Node representing the BIGINT SQL column type
     */
    class BigIntDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\integerdatatype {}

    /**
     * Node representing the TIMESTAMP SQL column type
     */
    class TimestampDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length) {}
    }

    /**
     * Node representing the TINYBLOB SQL column type
     */
    class TinyBlobDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\blobdatatype {
        /**
         * TinyBlobDataType constructor.
         */
        public function __construct() {}
    }

    /**
     * Node representing the CHAR SQL column type
     */
    class CharDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length, array $options) {}
    }

    /**
     * Node representing the DATETIME SQL column type
     */
    class DateTimeDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length) {}
    }

    /**
     * Node representing the VARCHAR SQL column type
     */
    class VarCharDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length, array $options) {}
    }

    /**
     * Node representing the BINARY SQL column type
     */
    class BinaryDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length) {}
    }

    /**
     * Node representing the SET SQL column type
     */
    class SetDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(array $values, array $options) {}
    }

    /**
     * Node representing the TINYINT SQL column type
     */
    class TinyIntDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\integerdatatype {}

    /**
     * Node representing the INT SQL column type
     */
    class IntegerDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length, array $options) {}
    }

    /**
     * Node representing the BLOB SQL column type
     */
    class BlobDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        /**
         * BlobDataType constructor.
         */
        public function __construct() {}
    }

    /**
     * Node representing the MEDIUMBLOB SQL column type
     */
    class MediumBlobDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\blobdatatype {
        /**
         * MediumBlobDataType constructor.
         */
        public function __construct() {}
    }

    /**
     * Node representing the NUMERIC SQL column type
     */
    class NumericDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\decimaldatatype {}

    /**
     * Node representing the MEDIUMINT SQL column type
     */
    class MediumIntDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\integerdatatype {}

    /**
     * Node representing the TIME SQL column type
     */
    class TimeDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length) {}
    }

    /**
     * Node representing the ENUM SQL column type
     */
    class EnumDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(array $values, array $options) {}
    }

    /**
     * Node representing the BIT SQL column type
     */
    class BitDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(int $length) {}
    }

    /**
     * Node representing the DECIMAL SQL column type
     */
    class DecimalDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(array $dataTypeDecimals, array $dataTypeOptions) {}
    }

    /**
     * Node representing the MEDIUMTEXT SQL column type
     */
    class MediumTextDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\textdatatype {
        public function __construct(array $options) {}
    }

    /**
     * Node representing the TEXT SQL column type
     */
    class TextDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        public function __construct(array $options) {}
    }

    /**
     * Node representing the DOUBLE SQL column type
     */
    class DoubleDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\floatdatatype {}

    /**
     * Node representing the DATE SQL column type
     */
    class DateDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        /**
         * DateDataType constructor.
         */
        public function __construct() {}
    }

    /**
     * Node representing the YEAR SQL column type
     */
    class YearDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        /**
         * YearDataType constructor.
         */
        public function __construct() {}
    }

    /**
     * Base class for all data types that contains properties
     * common to all data types.
     */
    abstract class AbstractDataType {
        /**
         * Used by most field types for length/precision information
         *
         * @var int
         */
        protected $length;
        /**
         * Used for floating point type columns
         * -1 is used to indicate that no value has been set.
         *
         * @var int
         */
        protected $precision;
        /**
         * Used for floating point type columns
         * -1 is used to indicate that no value has been set.
         *
         * @var int
         */
        protected $scale;
        /**
         * Differentiate between CHAR/VARCHAR and BINARY/VARBINARY
         *
         * @var bool
         */
        protected $fixed;
        /**
         * Unsigned flag for numeric columns
         *
         * @var bool
         */
        protected $unsigned;
        /**
         * Extra options for a column that control specific features/flags
         *
         * @var array
         */
        protected $options;
        /**
         * Options for ENUM/SET data types
         *
         * @var array
         */
        protected $values;

        /**
         * @return int
         */
        public function getLength() : int {}
        public function setLength(int $length) {}
        /**
         * @return int
         */
        public function getPrecision() : int {}
        public function setPrecision(int $precision) {}
        /**
         * @return int
         */
        public function getScale() : int {}
        public function setScale(int $scale) {}
        /**
         * @return bool
         */
        public function isFixed() : bool {}
        public function setFixed(bool $fixed) {}
        /**
         * @return array
         */
        public function getOptions() : array {}
        public function setOptions(array $options) {}
        /**
         * @return bool
         */
        public function isUnsigned() : bool {}
        public function setUnsigned(bool $unsigned) {}
        /**
         * @return array
         */
        public function getValues() : array {}
        public function setValues(array $values) {}
    }

    /**
     * Node representing the JSON SQL column type
     */
    class JsonDataType extends \typo3\cms\core\database\schema\parser\ast\datatype\abstractdatatype {
        /**
         * JsonDataType constructor.
         */
        public function __construct() {}
    }

}

namespace TYPO3\CMS\Core\Database\Schema\Exception {
    /**
     * An exception thrown if the return value type of a signal is not the expected one.
     */
    class UnexpectedSignalReturnValueTypeException extends \exception {}

    /**
     * Class StatementException
     */
    class StatementException extends \exception {
        public static function sqlError(string $sql) : StatementException {}
        public static function syntaxError(string $message, \Exception $previous = null) : StatementException {}
        public static function semanticalError(string $message, \Exception $previous = null) : StatementException {}
    }

}

namespace TYPO3\CMS\Core\Database\Schema\EventListener {
    /**
     * Event listener to handle additional processing for custom
     * doctrine types.
     */
    class SchemaColumnDefinitionListener {
        public function onSchemaColumnDefinition(SchemaColumnDefinitionEventArgs $event) {}
        protected function getEnumerationTableColumnDefinition(array $tableColumn, AbstractPlatform $platform) : Column {}
        protected function getDatabaseType(string $typeDefiniton) : string {}
        protected function getUnquotedEnumerationValues(string $typeDefiniton) : array {}
    }

    /**
     * Event listener to handle additional processing for table alterations.
     */
    class SchemaAlterTableListener {
/** @var TableDiff $tableDiff */
        public function onSchemaAlterTable(/** @var TableDiff $tableDiff */
SchemaAlterTableEventArgs $event) {}
    }

    /**
     * Event listener to handle additional processing for index definitions to integrate
     * MySQL index sub parts.
     */
    class SchemaIndexDefinitionListener {
        public function onSchemaIndexDefinition(SchemaIndexDefinitionEventArgs $event) {}
        protected function buildIndex(array $tableIndexRows) : Index {}
    }

}

namespace TYPO3\CMS\Core\Database\Query {
    /**
     * Contains misc helper methods to build syntactically valid SQL queries.
     * Most helper functions are required to deal with legacy data where the
     * format of the input is not strict enough to reliably use the SQL parts
     * in queries directly.
     *
     * @internal
     */
    class QueryHelper {
        public static function parseOrderBy(string $input) : array {}
        public static function parseTableList(string $input) : array {}
        public static function parseGroupBy(string $input) : array {}
        public static function parseJoin(string $input) : array {}
        public static function stripLogicalOperatorPrefix(string $constraint) : string {}
        /**
         * Returns the date and time formats compatible with the given database.
         *
         * This simple method should probably be deprecated and removed later.
         *
         * @return array
         */
        public static function getDateTimeFormats() {}
        /**
         * Returns the date and time types compatible with the given database.
         *
         * This simple method should probably be deprecated and removed later.
         *
         * @return array
         */
        public static function getDateTimeTypes() {}
        public static function quoteDatabaseIdentifiers(Connection $connection, string $sql) : string {}
    }

    /**
     * Provides functionality to generate and execute row based bulk INSERT statements.
     *
     * Based on work by Steve Müller <st.mueller@dzh-online.de> for the Doctrine project,
     * licensend under the MIT license.
     *
     * This class will be removed from core and the functionality will be provided by
     * the upstream implemention once the pull request has been merged into Doctrine DBAL.
     *
     * @see https://github.com/doctrine/dbal/pull/682
     * @internal
     */
    class BulkInsertQuery {
        /**
         * @var string[]
         */
        protected $columns;
        /**
         * @var Connection
         */
        protected $connection;
        /**
         * @var string
         */
        protected $table;
        /**
         * @var array
         */
        protected $parameters;
        /**
         * @var array
         */
        protected $types;
        /**
         * @var array
         */
        protected $values;

        public function __construct(Connection $connection, string $table, array $columns = [ ]) {}
        /**
         * Render the bulk insert statement as string.
         *
         * @return string
         */
        public function __toString() : string {}
        public function addValues(array $values, array $types = [ ]) {}
        /**
         * Executes this INSERT query using the bound parameters and their types.
         *
         * @return int The number of affected rows.
         *
         * @throws \LogicException if this query contains more rows than acceptable
         *                         for a single INSERT statement by the underlying platform.
         */
        public function execute() : int {}
        /**
         * Return the maximum number of rows that can be inserted at the same time.
         *
         * @return int
         */
        protected function getInsertMaxRows() : int {}
        /**
         * Returns the parameters for this INSERT query being constructed indexed by parameter index.
         *
         * @return array
         */
        public function getParameters() : array {}
        /**
         * Returns the parameter types for this INSERT query being constructed indexed by parameter index.
         *
         * @return array
         */
        public function getParameterTypes() : array {}
        /**
         * Returns the SQL formed by the current specifications of this INSERT query.
         *
         * @return string
         *
         * @throws \LogicException if no values have been specified yet.
         */
        public function getSQL() : string {}
    }

    /**
     * Object oriented approach to building SQL queries.
     *
     * It's a facade to the Doctrine DBAL QueryBuilder that implements PHP7 type hinting and automatic
     * quoting of table and column names.
     *
     * <code>
     * $query->select('aField', 'anotherField')
     *       ->from('aTable')
     *       ->where($query->expr()->eq('aField', 1))
     *       ->andWhere($query->expr()->gte('anotherField',10'))
     *       ->execute()
     * </code>
     *
     * Additional functionality included is support for COUNT() and TRUNCATE() statements.
     */
    class QueryBuilder {
        /**
         * The DBAL Connection.
         *
         * @var Connection
         */
        protected $connection;
        /**
         * @var \Doctrine\DBAL\Query\QueryBuilder
         */
        protected $concreteQueryBuilder;
        /**
         * @var QueryRestrictionContainerInterface
         */
        protected $restrictionContainer;

        public function __construct(Connection $connection, QueryRestrictionContainerInterface $restrictionContainer = null, \Doctrine\DBAL\Query\QueryBuilder $concreteQueryBuilder = null) {}
        /**
         * @return QueryRestrictionContainerInterface
         */
        public function getRestrictions() {}
        public function setRestrictions(QueryRestrictionContainerInterface $restrictionContainer) {}
        /**
         * Re-apply default restrictions
         */
        public function resetRestrictions() {}
        /**
         * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
         * This producer method is intended for convenient inline usage. Example:
         *
         * For more complex expression construction, consider storing the expression
         * builder object in a local variable.
         *
         * @return ExpressionBuilder
         */
        public function expr() : ExpressionBuilder {}
        /**
         * Gets the type of the currently built query.
         *
         * @return int
         * @internal
         */
        public function getType() : int {}
        /**
         * Gets the associated DBAL Connection for this query builder.
         *
         * @return Connection
         */
        public function getConnection() : Connection {}
        /**
         * Gets the state of this query builder instance.
         *
         * @return int Either QueryBuilder::STATE_DIRTY or QueryBuilder::STATE_CLEAN.
         * @internal
         */
        public function getState() : int {}
        /**
         * Gets the concrete implementation of the query builder
         *
         * @return \Doctrine\DBAL\Query\QueryBuilder
         * @internal
         */
        public function getConcreteQueryBuilder() : \Doctrine\DBAL\Query\QueryBuilder {}
        /**
         * Executes this query using the bound parameters and their types.
         *
         * @return \Doctrine\DBAL\Driver\Statement|int
         */
        public function execute() {}
        /**
         * Gets the complete SQL string formed by the current specifications of this QueryBuilder.
         *
         * If the statement is a SELECT TYPE query restrictions based on TCA settings will
         * automatically be applied based on the current QuerySettings.
         *
         * @return string The SQL query string.
         */
        public function getSQL() : string {}
        public function setParameter($key, $value, int $type = null) : QueryBuilder {}
        public function setParameters(array $params, array $types = [ ]) : QueryBuilder {}
        /**
         * Gets all defined query parameters for the query being constructed indexed by parameter index or name.
         *
         * @return array The currently defined query parameters indexed by parameter index or name.
         */
        public function getParameters() : array {}
        public function getParameter($key) {}
        /**
         * Gets all defined query parameter types for the query being constructed indexed by parameter index or name.
         *
         * @return array The currently defined query parameter types indexed by parameter index or name.
         */
        public function getParameterTypes() : array {}
        public function getParameterType($key) {}
        public function setFirstResult(int $firstResult) : QueryBuilder {}
        /**
         * Gets the position of the first result the query object was set to retrieve (the "offset").
         * Returns NULL if {@link setFirstResult} was not applied to this QueryBuilder.
         *
         * @return int The position of the first result.
         */
        public function getFirstResult() : int {}
        public function setMaxResults(int $maxResults) : QueryBuilder {}
        /**
         * Gets the maximum number of results the query object was set to retrieve (the "limit").
         * Returns 0 if setMaxResults was not applied to this query builder.
         *
         * @return int The maximum number of results.
         */
        public function getMaxResults() : int {}
        public function add(string $sqlPartName, string $sqlPart, bool $append = false) : QueryBuilder {}
        public function count(string $item) : QueryBuilder {}
        public function select(string $selects) : QueryBuilder {}
        public function addSelect(string $selects) : QueryBuilder {}
        public function selectLiteral(string $selects) : QueryBuilder {}
        public function addSelectLiteral(string $selects) : QueryBuilder {}
        public function delete(string $delete, string $alias = null) : QueryBuilder {}
        public function update(string $update, string $alias = null) : QueryBuilder {}
        public function insert(string $insert) : QueryBuilder {}
        public function from(string $from, string $alias = null) : QueryBuilder {}
        public function join(string $fromAlias, string $join, string $alias, string $condition = null) : QueryBuilder {}
        public function innerJoin(string $fromAlias, string $join, string $alias, string $condition = null) : QueryBuilder {}
        public function leftJoin(string $fromAlias, string $join, string $alias, string $condition = null) : QueryBuilder {}
        public function rightJoin(string $fromAlias, string $join, string $alias, string $condition = null) : QueryBuilder {}
        public function set(string $key, $value, bool $createNamedParameter = true) : QueryBuilder {}
        public function where($predicates) : QueryBuilder {}
        public function andWhere($where) : QueryBuilder {}
        public function orWhere($where) : QueryBuilder {}
        public function groupBy($groupBy) : QueryBuilder {}
        public function addGroupBy($groupBy) : QueryBuilder {}
        public function setValue(string $column, $value, bool $createNamedParameter = true) : QueryBuilder {}
        public function values(array $values, bool $createNamedParameters = true) : QueryBuilder {}
        public function having($having) : QueryBuilder {}
        public function andHaving($having) : QueryBuilder {}
        public function orHaving($having) : QueryBuilder {}
        public function orderBy(string $fieldName, string $order = null) : QueryBuilder {}
        public function addOrderBy(string $fieldName, string $order = null) : QueryBuilder {}
        public function getQueryPart(string $queryPartName) {}
        /**
         * Gets all query parts.
         *
         * @return array
         */
        public function getQueryParts() : array {}
        public function resetQueryParts(array $queryPartNames = null) : QueryBuilder {}
        public function resetQueryPart($queryPartName) : QueryBuilder {}
        /**
         * Gets a string representation of this QueryBuilder which corresponds to
         * the final SQL query being constructed.
         *
         * @return string The string representation of this QueryBuilder.
         */
        public function __toString() : string {}
        public function createNamedParameter($value, int $type = \PDO::PARAM_STR, string $placeHolder = null) : string {}
        public function createPositionalParameter($value, int $type = \PDO::PARAM_STR) : string {}
        public function escapeLikeWildcards(string $value) : string {}
        public function quote($input, int $type = null) {}
        public function quoteIdentifier(string $identifier) : string {}
        public function quoteIdentifiers(array $input) : array {}
        public function quoteIdentifiersForSelect(array $input) : array {}
        public function quoteColumnValuePairs(array $input) : array {}
        protected function unquoteSingleIdentifier(string $identifier) : string {}
        /**
         * Return all tables/aliases used in FROM or JOIN query parts from the query builder.
         *
         * The table names are automatically unquoted. This is a helper for to build the list
         * of queried tables for the AbstractRestrictionContainer.
         *
         * @return string[]
         */
        protected function getQueriedTables() : array {}
        /**
         * Add the additional query conditions returned by the QueryRestrictionBuilder
         * to the current query and return the original set of conditions so that they
         * can be restored after the query has been built/executed.
         *
         * @return \Doctrine\DBAL\Query\Expression\CompositeExpression|mixed
         */
        protected function addAdditionalWhereConditions() {}
        /**
         * Deep clone of the QueryBuilder
         * @see \Doctrine\DBAL\Query\QueryBuilder::__clone()
         */
        public function __clone() {}
    }

}

namespace TYPO3\CMS\Core\Database\Query\Restriction {
    /**
     * Restriction to make queries in TYPO3 backend context versioning/ workspace aware
     */
    class BackendWorkspaceRestriction implements \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        /**
         * @var int
         */
        protected $workspaceId;
        /**
         * @var bool
         */
        protected $includeRowsForWorkspaceOverlay;

        public function __construct(int $workspaceId = null, $includeRowsForWorkspaceOverlay = true) {}
        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }

    /**
     * Restriction to filter records, which are limited to the given user groups
     */
    class FrontendGroupRestriction implements \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        /**
         * @var array
         */
        protected $frontendGroupIds;

        public function __construct(array $frontendGroupIds = null) {}
        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }

    /**
     * This is the container with restrictions, that are added to any doctrine query
     */
    class DefaultRestrictionContainer extends \typo3\cms\core\database\query\restriction\abstractrestrictioncontainer {
        /**
         * Default restriction classes.
         *
         * @var QueryRestrictionInterface[]
         */
        protected $defaultRestrictionTypes;

        /**
         * Creates instances of the registered default restriction classes
         */
        public function __construct() {}
    }

    /**
     * Base class for query restriction collections
     */
    abstract class AbstractRestrictionContainer implements \typo3\cms\core\database\query\restriction\queryrestrictioncontainerinterface {
        /**
         * @var QueryRestrictionInterface[]
         */
        protected $restrictions;

        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
        /**
         * Removes all restrictions stored within this container
         *
         * @return QueryRestrictionContainerInterface
         */
        public function removeAll() {}
        public function removeByType(string $restrictionType) {}
        public function add(QueryRestrictionInterface $restriction) {}
        protected function createRestriction($restrictionClass) {}
    }

    /**
     * Restriction to respect the soft-delete functionality of TYPO3.
     * Filters out records, that were marked as deleted.
     */
    class DeletedRestriction implements \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }

    /**
     * A collection of restrictions to be used in frontend context.
     * This is a replacement for PageRepository::enableFields()
     */
    class FrontendRestrictionContainer extends \typo3\cms\core\database\query\restriction\abstractrestrictioncontainer {
        /**
         * @var QueryRestrictionInterface[]
         */
        protected $defaultRestrictionTypes;

        /**
         * FrontendRestrictionContainer constructor.
         * Initializes the default restrictions for frontend requests
         */
        public function __construct() {}
/** @var TypoScriptFrontendController $typoScriptFrontendController */
        public function buildExpression(/** @var TypoScriptFrontendController $typoScriptFrontendController */
array $queriedTables, /** @var TypoScriptFrontendController $typoScriptFrontendController */
ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }

    /**
     * Restriction to filter records for fronted workspaces preview
     */
    class FrontendWorkspaceRestriction implements \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        /**
         * @var int
         */
        protected $workspaceId;
        /**
         * @var bool
         */
        protected $includeRowsForWorkspacePreview;
        /**
         * @var bool
         */
        protected $enforceLiveRowsOnly;

        public function __construct(int $workspaceId = null, bool $includeRowsForWorkspacePreview = null, bool $enforceLiveRowsOnly = true) {}
        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }

    /**
     * Restriction to filter records which are not stored on the root page.
     */
    class RootLevelRestriction implements \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        /**
         * @var array
         */
        protected $tableNames;

        public function __construct(array $tableNames = [ ]) {}
        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }

    /**
     * Restriction to filter records with an end time set that has passed
     */
    class EndTimeRestriction implements \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        /**
         * @var int
         */
        protected $accessTimeStamp;

        public function __construct(int $accessTimeStamp = null) {}
        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }

    /**
     * Restriction to filter records, that should not be shown until the start time has been reached
     */
    class StartTimeRestriction implements \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        /**
         * @var int
         */
        protected $accessTimeStamp;

        public function __construct(int $accessTimeStamp = null) {}
        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }

    /**
     * Restriction to filter records that have been marked as hidden
     */
    class HiddenRestriction implements \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        public function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression {}
    }


    /**
     * Interface that all restriction collections must implement.
     * It is an extension of the QueryRestrictionInterface, so collections can be treated as single restriction
     */
    interface QueryRestrictionContainerInterface extends \typo3\cms\core\database\query\restriction\queryrestrictioninterface {
        /**
         * Removes all restrictions stored within this container
         *
         * @return QueryRestrictionContainerInterface
         */
        function removeAll() ;
        function removeByType(string $restrictionType) ;
        function add(QueryRestrictionInterface $restriction) ;
    }

    /**
     * The main restriction interface. All restrictions (including the collections) must implement this.
     */
    interface QueryRestrictionInterface {
        function buildExpression(array $queriedTables, ExpressionBuilder $expressionBuilder) : CompositeExpression ;
    }

}

namespace TYPO3\CMS\Core\Database\Query\Expression {
    /**
     * ExpressionBuilder class is responsible to dynamically create SQL query parts.
     *
     * It takes care building query conditions while ensuring table and column names
     * are quoted within the created expressions / SQL fragments. It is a facade to
     * the actual Doctrine ExpressionBuilder.
     *
     * The ExpressionBuilder is used within the context of the QueryBuilder to ensure
     * queries are being build based on the requirements of the database platform in
     * use.
     */
    class ExpressionBuilder {
        const EQ = '=';
        const LTE = '<=';
        const GT = '>';
        const NEQ = '<>';
        const LT = '<';
        const QUOTE_IDENTIFIER = 1;
        const QUOTE_PARAMETER = 2;
        const GTE = '>=';
        const QUOTE_NOTHING = 0;

        /**
         * The DBAL Connection.
         *
         * @var Connection
         */
        protected $connection;

        public function __construct(Connection $connection) {}
        public function andX($expressions) : CompositeExpression {}
        public function orX($expressions) : CompositeExpression {}
        public function comparison($leftExpression, string $operator, $rightExpression) : string {}
        public function eq(string $fieldName, $value) : string {}
        public function neq(string $fieldName, $value) : string {}
        public function lt($fieldName, $value) : string {}
        public function lte(string $fieldName, $value) : string {}
        public function gt(string $fieldName, $value) : string {}
        public function gte(string $fieldName, $value) : string {}
        public function isNull(string $fieldName) : string {}
        public function isNotNull(string $fieldName) : string {}
        public function like(string $fieldName, $value) : string {}
        public function notLike(string $fieldName, $value) : string {}
        public function in(string $fieldName, $value) : string {}
        public function notIn(string $fieldName, $value) : string {}
        public function inSet(string $fieldName, string $value, bool $isColumn = false) : string {}
        public function bitAnd(string $fieldName, int $value) : string {}
        public function min(string $fieldName, string $alias = null) : string {}
        public function max(string $fieldName, string $alias = null) : string {}
        public function avg(string $fieldName, string $alias = null) : string {}
        public function sum(string $fieldName, string $alias = null) : string {}
        public function count(string $fieldName, string $alias = null) : string {}
        public function length(string $fieldName, string $alias = null) : string {}
        protected function calculation(string $aggregateName, string $fieldName, string $alias = null) : string {}
        public function trim(string $fieldName, int $position = AbstractPlatform::TRIM_UNSPECIFIED, string $char = null) {}
        public function literal($input, string $type = null) {}
        protected function unquoteLiteral(string $value) : string {}
    }

    /**
     * Facade of the Doctrine DBAL CompositeExpression to have
     * all Query related classes with in TYPO3\CMS namespace.
     */
    class CompositeExpression extends \doctrine\dbal\query\expression\compositeexpression {
        /**
         * Retrieves the string representation of this composite expression.
         * If expression is empty, just return an empty string.
         * Native Doctrine expression would return () instead.
         *
         * @return string
         */
        public function __toString() {}
        public function add($part) {}
    }

}

namespace TYPO3\CMS\Core\FormProtection {
    /**
     * This class provides protection against cross-site request forgery (XSRF/CSRF)
     * for forms.
     *
     * For documentation on how to use this class, please see the documentation of
     * the corresponding subclasses
     */
    abstract class AbstractFormProtection {
        /**
         * @var \Closure
         */
        protected $validationFailedCallback;
        /**
         * The session token which is used to be hashed during token generation.
         *
         * @var string
         */
        protected $sessionToken;

        /**
         * @return string
         */
        protected function getSessionToken() {}
        /**
         * Frees as much memory as possible.
         */
        public function __destruct() {}
        /**
         * Deletes the session token and persists the (empty) token.
         *
         * This function is intended to be called when a user logs on or off.
         */
        public function clean() {}
        public function generateToken($formName, $action = '', $formInstanceName = '') {}
        public function validateToken($tokenId, $formName, $action = '', $formInstanceName = '') {}
        /**
         * Generates the random token which is used in the hash for the form tokens.
         *
         * @return string
         */
        protected function generateSessionToken() {}
        /**
         * Creates or displays an error message telling the user that the submitted
         * form token is invalid.
         */
        protected function createValidationErrorMessage() {}
        /**
         * Retrieves the session token.
         *
         * @return string
         */
        abstract protected function retrieveSessionToken() ;
        /**
         * Saves the session token so that it can be used by a later incarnation
         * of this class.
         *
         * @access private
         */
        abstract public function persistSessionToken() ;
    }

    /**
     * This class creates and manages instances of the various form protection
     * classes.
     *
     * This class provides only static methods. It can not be instantiated.
     *
     * Usage for the back-end form protection:
     *
     * <pre>
     * $formProtection = \TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get();
     * </pre>
     *
     * Usage for the install tool form protection:
     *
     * <pre>
     * $formProtection = \TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get();
     * </pre>
     */
    class FormProtectionFactory {
        /**
         * created instances of form protections using the type as array key
         *
         * @var array<AbstracFormtProtection>
         */
        static protected $instances;

        /**
         * Private constructor to prevent instantiation.
         */
        private function __construct() {}
        public static function get($classNameOrType = 'default', $constructorArguments) {}
        protected static function getClassNameAndConstructorArgumentsByType($type) {}
        /**
         * Check if we are in the install tool
         *
         * @return bool
         */
        protected static function isInstallToolSession() {}
        /**
         * Checks if a user is logged in and the session is active.
         *
         * @return bool
         */
        protected static function isBackendSession() {}
        /**
         * Checks if a frontend user is logged in and the session is active.
         *
         * @return bool
         */
        protected static function isFrontendSession() {}
/** @var FlashMessage $flashMessage */
        public static function getMessageClosure(/** @var FlashMessage $flashMessage */
LanguageService $languageService, /** @var FlashMessage $flashMessage */
FlashMessageQueue $messageQueue, /** @var FlashMessage $flashMessage */
$isAjaxCall) {}
        protected static function createInstance($className, $constructorArguments) {}
        public static function set($classNameOrType, AbstractFormProtection $instance) {}
        /**
         * Purges all existing instances.
         *
         * This function is particularly useful when cleaning up in unit testing.
         */
        public static function purgeInstances() {}
    }

    /**
     * This class provides protection against cross-site request forgery (XSRF/CSRF)
     * for forms in the BE.
     *
     * How to use:
     *
     * For each form in the BE (or link that changes some data), create a token and
     * insert is as a hidden form element. The name of the form element does not
     * matter; you only need it to get the form token for verifying it.
     *
     * <pre>
     * $formToken = TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
     * ->generateToken(
     * 'BE user setup', 'edit'
     * );
     * $this->content .= '<input type="hidden" name="formToken" value="' .
     * $formToken . '" />';
     * </pre>
     *
     * The three parameters $formName, $action and $formInstanceName can be
     * arbitrary strings, but they should make the form token as specific as
     * possible. For different forms (e.g. BE user setup and editing a tt_content
     * record) or different records (with different UIDs) from the same table,
     * those values should be different.
     *
     * For editing a tt_content record, the call could look like this:
     *
     * <pre>
     * $formToken = \TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
     * ->getFormProtection()->generateToken(
     * 'tt_content', 'edit', $uid
     * );
     * </pre>
     *
     *
     * When processing the data that has been submitted by the form, you can check
     * that the form token is valid like this:
     *
     * <pre>
     * if ($dataHasBeenSubmitted && TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
     * ->validateToken(
     * \TYPO3\CMS\Core\Utility\GeneralUtility::_POST('formToken'),
     * 'BE user setup', 'edit
     * )
     * ) {
     * processes the data
     * } else {
     * no need to do anything here as the BE form protection will create a
     * flash message for an invalid token
     * }
     * </pre>
     */
    class BackendFormProtection extends \typo3\cms\core\formprotection\abstractformprotection {
        /**
         * Keeps the instance of the user which existed during creation
         * of the object.
         *
         * @var BackendUserAuthentication
         */
        protected $backendUser;
        /**
         * Instance of the registry, which is used to permanently persist
         * the session token so that it can be restored during re-login.
         *
         * @var Registry
         */
        protected $registry;

        public function __construct(BackendUserAuthentication $backendUser, Registry $registry, \Closure $validationFailedCallback = null) {}
        /**
         * Retrieves the saved session token or generates a new one.
         *
         * @return string
         */
        protected function retrieveSessionToken() {}
        /**
         * Saves the tokens so that they can be used by a later incarnation of this
         * class.
         *
         * @access private
         */
        public function persistSessionToken() {}
        /**
         * Sets the session token for the user from the registry
         * and returns it additionally.
         *
         * @access private
         * @return string
         * @throws \UnexpectedValueException
         */
        public function setSessionTokenFromRegistry() {}
        /**
         * Stores the session token in the registry to have it
         * available during re-login of the user.
         *
         * @access private
         */
        public function storeSessionTokenInRegistry() {}
        /**
         * Removes the session token for the user from the registry.
         *
         * @access private
         */
        public function removeSessionTokenFromRegistry() {}
        /**
         * Checks if a user is logged in and the session is active.
         *
         * @return bool
         */
        protected function isAuthorizedBackendSession() {}
    }

    /**
     * This class provides protection against cross-site request forgery (XSRF/CSRF)
     * for actions in the frontend that change data.
     *
     * How to use:
     *
     * For each form (or link that changes some data), create a token and
     * insert is as a hidden form element or use it as GET argument. The name of the form element does not
     * matter; you only need it to get the form token for verifying it.
     *
     * <pre>
     * $formToken = TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
     * ->generateToken(
     * 'User setup', 'edit'
     * );
     * $this->content .= '<input type="hidden" name="formToken" value="' .
     * $formToken . '" />';
     * </pre>
     *
     * The three parameters $formName, $action and $formInstanceName can be
     * arbitrary strings, but they should make the form token as specific as
     * possible. For different forms (e.g. User setup and editing a news
     * record) or different records (with different UIDs) from the same table,
     * those values should be different.
     *
     * For editing a news record, the call could look like this:
     *
     * <pre>
     * $formToken = \TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
     * ->getFormProtection()->generateToken(
     * 'news', 'edit', $uid
     * );
     * </pre>
     *
     *
     * When processing the data that has been submitted by the form, you can check
     * that the form token is valid like this:
     *
     * <pre>
     * if ($dataHasBeenSubmitted && \TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
     * ->validateToken(
     * \TYPO3\CMS\Core\Utility\GeneralUtility::_POST('formToken'),
     * 'User setup', 'edit
     * )
     * ) {
     * Processes the data.
     * } else {
     * Create a flash message for the invalid token or just discard this request.
     * }
     * </pre>
     */
    class FrontendFormProtection extends \typo3\cms\core\formprotection\abstractformprotection {
        /**
         * Keeps the instance of the user which existed during creation
         * of the object.
         *
         * @var FrontendUserAuthentication
         */
        protected $frontendUser;

        public function __construct(FrontendUserAuthentication $frontendUser, \Closure $validationFailedCallback = null) {}
        /**
         * Retrieves the saved session token or generates a new one.
         *
         * @return string
         */
        protected function retrieveSessionToken() {}
        /**
         * Saves the tokens so that they can be used by a later incarnation of this
         * class.
         *
         * @access private
         */
        public function persistSessionToken() {}
        /**
         * Checks if a user is logged in and the session is active.
         *
         * @return bool
         */
        protected function isAuthorizedFrontendSession() {}
    }

    /**
     * This class is a dummy implementation of the form protection,
     * which is used when no authentication is used.
     */
    class DisabledFormProtection extends \typo3\cms\core\formprotection\abstractformprotection {
        public function generateToken($formName, $action = '', $formInstanceName = '') {}
        public function validateToken($tokenId, $formName, $action = '', $formInstanceName = '') {}
        /**
         * Dummy implementation
         */
        protected function retrieveSessionToken() {}
        /**
         * Dummy implementation
         */
        public function persistSessionToken() {}
    }

    /**
     * Install Tool form protection
     */
    class InstallToolFormProtection extends \typo3\cms\core\formprotection\abstractformprotection {
        /**
         * Retrieves or generates the session token.
         */
        protected function retrieveSessionToken() {}
        /**
         * Saves the tokens so that they can be used by a later incarnation of this
         * class.
         */
        public function persistSessionToken() {}
    }

    /**
     * Invalid token exception
     *
     * @api
     */
    class Exception extends \unexpectedvalueexception {}

}

namespace TYPO3\CMS\Core\Migrations {
    /**
     * Migrate TCA from old to new syntax. Used in bootstrap and Flex Form Data Structures.
     *
     * @internal Class and API may change any time.
     */
    class TcaMigration {
        /**
         * Accumulate migration messages
         *
         * @var array
         */
        protected $messages;

        public function migrate(array $tca) : array {}
        /**
         * Get messages of migrated fields. Can be used for deprecation messages after migrate() was called.
         *
         * @return array Migration messages
         */
        public function getMessages() : array {}
        protected function validateTcaType(array $tca) {}
        protected function migrateColumnsConfig(array $tca) : array {}
        protected function migrateT3editorWizardToRenderTypeT3editorIfNotEnabledByTypeConfig(array $tca) : array {}
        protected function migrateSpecialConfigurationAndRemoveShowItemStylePointerConfig(array $tca) : array {}
        protected function migrateT3editorWizardWithEnabledByTypeConfigToColumnsOverrides(array $tca) : array {}
        protected function migrateShowItemAdditionalPaletteToOwnPalette(array $tca) : array {}
        protected function migrateIconsForFormFieldWizardToNewLocation(array $tca) : array {}
        protected function migrateExtAndSysextPathToEXTPath(array $tca) : array {}
        protected function migrateIconsInOptionTags(array $tca) : array {}
        protected function migrateIconfileRelativePathOrFilenameOnlyToExtReference(array $tca) : array {}
        public function migrateSelectFieldRenderType(array $tca) : array {}
        public function migrateSelectFieldIconTable(array $tca) : array {}
        protected function migrateElementBrowserWizardToLinkHandler(array $tca) : array {}
        protected function migrateDefaultExtrasRteTransFormOptions(array $tca) : array {}
        protected function migrateSelectTreeOptions(array $tca) : array {}
        protected function migrateTSconfigSoftReferences(array $tca) : array {}
        protected function migrateShowIfRteOption(array $tca) : array {}
        protected function migrateWorkspacesOptions(array $tca) : array {}
        protected function migrateTranslationTable(array $tca) : array {}
        protected function migrateL10nModeDefinitions(array $tca) {}
        protected function migratePageLocalizationDefinitions(array $tca) {}
        protected function migrateInlineLocalizationMode(array $tca) {}
        protected function migrateRequestUpdate(array $tca) : array {}
        protected function migrateInputDateTimeToRenderType(array $tca) : array {}
        public function migrateWizardEnableByTypeConfigToColumnsOverrides(array $tca) : array {}
        protected function migrateColorPickerWizardToRenderType(array $tca) : array {}
        protected function migrateSelectWizardToValuePicker(array $tca) : array {}
        protected function migrateSliderWizardToSliderConfiguration(array $tca) : array {}
        protected function migrateLinkWizardToRenderTypeAndFieldControl(array $tca) : array {}
        protected function migrateEditWizardToFieldControl(array $tca) : array {}
        protected function migrateAddWizardToFieldControl(array $tca) : array {}
        protected function migrateListWizardToFieldControl(array $tca) : array {}
        protected function migrateLastPiecesOfDefaultExtras(array $tca) : array {}
        protected function migrateTableWizardToRenderType(array $tca) : array {}
        protected function migrateFullScreenRichtextToFieldControl(array $tca) : array {}
        protected function migrateSuggestWizardTypeGroup(array $tca) : array {}
        protected function migrateOptionsOfTypeGroup(array $tca) : array {}
        protected function migrateSelectShowIconTable(array $tca) : array {}
        protected function migrateImageManipulationConfig(array $tca) : array {}
        protected function migrateinputDateTimeMax(array $tca) : array {}
        protected function migrateInlineOverrideChildTca(array $tca) : array {}
        protected function migrateLocalizeChildrenAtParentLocalization(array $tca) : array {}
        protected function migratePagesLanguageOverlayRemoval(array $tca) {}
    }

}

namespace TYPO3\CMS\Core\Crypto {
    /**
     * Crypto safe pseudo-random value generation
     */
    class Random {
        public function generateRandomBytes(int $length) : string {}
        public function generateRandomInteger(int $min, int $max) : int {}
        public function generateRandomHexString(int $length) : string {}
    }

}

namespace TYPO3\CMS\Core\Configuration {
    /**
     * Prepare richtext configuration. Used in DataHandler and FormEngine
     *
     * @internal Internal class for the time being - may change / vanish any time
     * @todo When I grow up, I want to become a data provider
     */
    class Richtext {
        public function getConfiguration(string $table, string $field, int $pid, string $recordType, array $tcaFieldConf) : array {}
        protected function loadConfigurationFromPreset(string $presetName = '') : array {}
        protected function getRtePageTsConfigOfPid(int $pid) : array {}
        protected function convertPlainArrayToTypoScriptArray(array $plainArray) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() : BackendUserAuthentication {}
/** @var TypoScriptService $typoScriptService */
        protected function addFlattenedPageTsConfig(/** @var TypoScriptService $typoScriptService */
array $typoScriptArray) : array {}
        protected function getPageTsConfiguration(string $table, string $field, int $pid, string $recordType) : array {}
    }

    /**
     * API to get() and set() instance specific extension configuration options.
     *
     * Extension authors are encouraged to use this API - it is currently a simple
     * wrapper to access TYPO3_CONF_VARS['EXTENSIONS'] but could later become something
     * different in case core decides to store extension configuration elsewhere.
     *
     * Extension authors must not access TYPO3_CONF_VARS['EXTENSIONS'] on their own.
     *
     * Extension configurations are often 'feature flags' currently defined by
     * ext_conf_template.txt files. The core (more specifically the install tool)
     * takes care default values and overridden values are properly prepared upon
     * loading or updating an extension.
     */
    class ExtensionConfiguration {
        public function get(string $extension, string $path = '') {}
        public function set(string $extension, string $path = '', $value = null) {}
        private function addDotsToArrayKeysRecursiveForLegacyExtConf(array $extensionConfig) {}
    }

    /**
     * Handle loading and writing of global and local (instance specific)
     * configuration.
     *
     * This class handles the access to the files
     * - EXT:core/Configuration/DefaultConfiguration.php (default TYPO3_CONF_VARS)
     * - typo3conf/LocalConfiguration.php (overrides of TYPO3_CONF_VARS)
     * - typo3conf/AdditionalConfiguration.php (optional additional local code blocks)
     *
     * IMPORTANT:
     *   This class is intended for internal core use ONLY.
     *   Extensions should usually use the resulting $GLOBALS['TYPO3_CONF_VARS'] array,
     *   do not try to modify settings in LocalConfiguration.php with an extension.
     * @internal
     */
    class ConfigurationManager {
        /**
         * @var string Path to default TYPO3_CONF_VARS file, relative to PATH_site
         */
        protected $defaultConfigurationFile;
        /**
         * @var string Path to description file for TYPO3_CONF_VARS, relative to PATH_site
         */
        protected $defaultConfigurationDescriptionFile;
        /**
         * @var string Path to local overload TYPO3_CONF_VARS file, relative to PATH_site
         */
        protected $localConfigurationFile;
        /**
         * @var string Path to additional local file, relative to PATH_site
         */
        protected $additionalConfigurationFile;
        /**
         * @var string Path to factory configuration file used during installation as LocalConfiguration boilerplate
         */
        protected $factoryConfigurationFile;
        /**
         * @var string Path to possible additional factory configuration file delivered by packages
         */
        protected $additionalFactoryConfigurationFile;
        /**
         * Writing to these configuration paths is always allowed,
         * even if the requested sub path does not exist yet.
         *
         * @var array
         */
        protected $whiteListedLocalConfigurationPaths;

        /**
         * Return default configuration array
         *
         * @return array
         */
        public function getDefaultConfiguration() {}
        /**
         * Get the file location of the default configuration file,
         * currently the path and filename.
         *
         * @return string
         * @access private
         */
        public function getDefaultConfigurationFileLocation() {}
        /**
         * Get the file location of the default configuration description file,
         * currently the path and filename.
         *
         * @return string
         * @access private
         */
        public function getDefaultConfigurationDescriptionFileLocation() {}
        /**
         * Return local configuration array typo3conf/LocalConfiguration.php
         *
         * @return array Content array of local configuration file
         */
        public function getLocalConfiguration() {}
        /**
         * Get the file location of the local configuration file,
         * currently the path and filename.
         *
         * @return string
         * @access private
         */
        public function getLocalConfigurationFileLocation() {}
        /**
         * Returns local configuration array merged with default configuration
         *
         * @return array
         */
        public function getMergedLocalConfiguration() : array {}
        /**
         * Get the file location of the additional configuration file,
         * currently the path and filename.
         *
         * @return string
         * @access private
         */
        public function getAdditionalConfigurationFileLocation() {}
        /**
         * Get absolute file location of factory configuration file
         *
         * @return string
         */
        protected function getFactoryConfigurationFileLocation() {}
        /**
         * Get absolute file location of factory configuration file
         *
         * @return string
         */
        protected function getAdditionalFactoryConfigurationFileLocation() {}
        public function updateLocalConfiguration(array $configurationToMerge) {}
        public function getDefaultConfigurationValueByPath($path) {}
        public function getLocalConfigurationValueByPath($path) {}
        public function getConfigurationValueByPath($path) {}
        public function setLocalConfigurationValueByPath($path, $value) {}
        public function setLocalConfigurationValuesByPathValuePairs(array $pairs) {}
        public function removeLocalConfigurationKeysByPath(array $keys) {}
        /**
         * Checks if the configuration can be written.
         *
         * @return bool
         * @access private
         */
        public function canWriteConfiguration() {}
        /**
         * Reads the configuration array and exports it to the global variable
         *
         * @access private
         * @throws \UnexpectedValueException
         */
        public function exportConfiguration() {}
        public function writeLocalConfiguration(array $configuration) {}
        public function writeAdditionalConfiguration(array $additionalConfigurationLines) {}
        /**
         * Uses FactoryConfiguration file and a possible AdditionalFactoryConfiguration
         * file in typo3conf to create a basic LocalConfiguration.php. This is used
         * by the install tool in an early step.
         *
         * @throws \RuntimeException
         * @access private
         */
        public function createLocalConfigurationFromFactoryConfiguration() {}
        protected function isValidLocalConfigurationPath($path) {}
    }

}

namespace TYPO3\CMS\Core\Configuration\FlexForm {
    /**
     * Contains functions for manipulating flex form data
     */
    class FlexFormTools {
        /**
         * If set, section indexes are re-numbered before processing
         *
         * @var bool
         */
        public $reNumberIndexesOfSectionData;
        /**
         * Options for array2xml() for flexform.
         * This will map the weird keys from the internal array to tags that could potentially be checked with a DTD/schema
         *
         * @var array
         */
        public $flexArray2Xml_options;
        /**
         * Reference to object called
         *
         * @var object
         */
        public $callBackObj;
        /**
         * Used for accumulation of clean XML
         *
         * @var array
         */
        public $cleanFlexFormXML;

        public function getDataStructureIdentifier(array $fieldTca, string $tableName, string $fieldName, array $row) : string {}
        protected function getDataStructureIdentifierFromRecord(array $fieldTca, string $tableName, string $fieldName, array $row) : array {}
        protected function getDataStructureIdentifierFromTcaArray(array $fieldTca, string $tableName, string $fieldName, array $row) : array {}
        public function parseDataStructureByIdentifier(string $identifier) : array {}
        public function traverseFlexFormXMLData($table, $field, $row, $callBackObj, $callBackMethod_value) {}
        public function traverseFlexFormXMLData_recurse($dataStruct, $editData, $PA, $path = '') {}
        protected function executeCallBackMethod($methodName, array $parameterArray) {}
        public function cleanFlexFormXML($table, $field, $row) {}
        public function cleanFlexFormXML_callBackFunction($dsArr, $data, $PA, $path, $pObj) {}
        public function &getArrayValueByPath($pathArray, $array) {}
        public function setArrayValueByPath($pathArray, $array, $value) {}
        public function flexArray2Xml($array, $addPrologue = false) {}
    }

}

namespace TYPO3\CMS\Core\Configuration\FlexForm\Exception {
    /**
     * Thrown if a combined ds_pointerField can not be resolved.
     */
    class InvalidCombinedPointerFieldException extends \typo3\cms\core\configuration\flexform\exception\abstractinvaliddatastructureexception {}

    /**
     * Exception thrown if lookup of a parent row in a tree does not return a valid result
     * during flex from structure lookup.
     */
    class InvalidParentRowException extends \typo3\cms\core\configuration\flexform\exception\abstractinvaliddatastructureexception {}

    /**
     * Abstract exception thrown if data structures can not be resolved,
     * found or parsed.
     */
    abstract class AbstractInvalidDataStructureException extends \typo3\cms\core\exception {}

    /**
     * Thrown if a single ds_pointerField can not be resolved.
     */
    class InvalidSinglePointerFieldException extends \typo3\cms\core\configuration\flexform\exception\abstractinvaliddatastructureexception {}

    /**
     * Thrown if parseFlexFormDataStructureByIdentifier() is given an empty string
     */
    class InvalidIdentifierException extends \typo3\cms\core\configuration\flexform\exception\abstractinvaliddatastructureexception {}

    /**
     * Exception thrown if lookup of a parent row in a tree is root node and still nothing was found.
     */
    class InvalidParentRowRootException extends \typo3\cms\core\configuration\flexform\exception\abstractinvaliddatastructureexception {}

    /**
     * Exception thrown if lookup of a parent row in a tree results in a loop.
     */
    class InvalidParentRowLoopException extends \typo3\cms\core\configuration\flexform\exception\abstractinvaliddatastructureexception {}

    /**
     * Thrown if TCA is invalid.
     * This may happen if a record is opened that points to a data structure of
     * a no longer loaded extension
     */
    class InvalidTcaException extends \typo3\cms\core\configuration\flexform\exception\abstractinvaliddatastructureexception {}

    /**
     * Exception thrown if ds_pointerField does not point to a valid value.
     */
    class InvalidPointerFieldValueException extends \typo3\cms\core\configuration\flexform\exception\abstractinvaliddatastructureexception {}

}

namespace TYPO3\CMS\Core\Configuration\TypoScript\ConditionMatching {
    /**
     * Matching TypoScript conditions
     *
     * Used with the TypoScript parser.
     * Matches IPnumbers etc. for use with templates
     */
    abstract class AbstractConditionMatcher {
        /**
         * Id of the current page.
         *
         * @var int
         */
        protected $pageId;
        /**
         * The rootline for the current page.
         *
         * @var array
         */
        protected $rootline;
        /**
         * Whether to simulate the behaviour and match all conditions
         * (used in TypoScript object browser).
         *
         * @var bool
         */
        protected $simulateMatchResult;
        /**
         * Whether to simulat the behaviour and match specific conditions
         * (used in TypoScript object browser).
         *
         * @var array
         */
        protected $simulateMatchConditions;

        public function setPageId($pageId) {}
        /**
         * Gets the id of the page to evaluate conditions for.
         *
         * @return int Id of the page
         */
        public function getPageId() {}
        public function setRootline(array $rootline) {}
        /**
         * Gets the rootline.
         *
         * @return array The rootline to be used for matching
         */
        public function getRootline() {}
        public function setSimulateMatchResult($simulateMatchResult) {}
        public function setSimulateMatchConditions(array $simulateMatchConditions) {}
        protected function normalizeExpression($expression) {}
        public function match($expression) {}
        protected function evaluateConditionCommon($key, $value) {}
/** @var \TYPO3\CMS\Core\Configuration\TypoScript\ConditionMatching\AbstractCondition $conditionObject */
        protected function evaluateCustomDefinedCondition(/** @var \TYPO3\CMS\Core\Configuration\TypoScript\ConditionMatching\AbstractCondition $conditionObject */
$condition) {}
        protected function parseUserFuncArguments($arguments) {}
        protected function getVariableCommon(array $vars) {}
        protected function compareNumber($test, $leftValue) {}
        protected function searchStringWildcard($haystack, $needle) {}
        protected function getGlobal($var, $source = null) {}
        abstract protected function evaluateCondition($string) ;
        abstract protected function getVariable($name) ;
        /**
         * Gets the usergroup list of the current user.
         *
         * @return string The usergroup list of the current user
         */
        abstract protected function getGroupList() ;
        /**
         * Determines the current page Id.
         *
         * @return int The current page Id
         */
        abstract protected function determinePageId() ;
        /**
         * Gets the properties for the current page.
         *
         * @return array The properties for the current page.
         */
        abstract protected function getPage() ;
        /**
         * Determines the rootline for the current page.
         *
         * @return array The rootline for the current page.
         */
        abstract protected function determineRootline() ;
        /**
         * Gets the id of the current user.
         *
         * @return int The id of the current user
         */
        abstract protected function getUserId() ;
        /**
         * Determines if a user is logged in.
         *
         * @return bool Determines if a user is logged in
         */
        abstract protected function isUserLoggedIn() ;
    }

    /**
     * Abstract class to define own custom TypoScript conditions.
     *
     * Used with the TypoScript parser.
     */
    abstract class AbstractCondition {
        /**
         * @var \TYPO3\CMS\Core\Configuration\TypoScript\ConditionMatching\AbstractConditionMatcher
         */
        protected $conditionMatcherInstance;

        /**
         * @return \TYPO3\CMS\Core\Configuration\TypoScript\ConditionMatching\AbstractConditionMatcher
         */
        protected function getConditionMatcherInstance() {}
        public function setConditionMatcherInstance($conditionMatcherInstance) {}
        abstract public function matchCondition(array $conditionParameters) ;
    }

}

namespace TYPO3\CMS\Core\Configuration\TypoScript\Exception {
    /**
     * A "Your TypoScript condition is invalid" exception
     * used when a TypoScript condition is called but not extending
     * from the AbstractCondition class.
     *
     * @api
     */
    class InvalidTypoScriptConditionException extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Core\Configuration\Loader {
    /**
     * A YAML file loader that allows to load YAML files, based on the Symfony/Yaml component
     *
     * In addition to just load a YAML file, it adds some special functionality.
     *
     * - A special "imports" key in the YAML file allows to include other YAML files recursively
     *   where the actual YAML file gets loaded after the import statements, which are interpreted at the very beginning
     *
     * - Merging configuration options of import files when having simple "lists" will add items to the list instead
     *   of overwriting them.
     *
     * - Special placeholder values set via %optionA.suboptionB% replace the value with the named path of the configuration
     *   The placeholders will act as a full replacement of this value.
     */
    class YamlFileLoader {
        public function load(string $fileName) : array {}
        protected function getFileContents(string $fileName) : string {}
        protected function processImports(array $content) : array {}
        protected function processPlaceholders(array $content, array $referenceArray) : array {}
        protected function getValueFromReferenceArray(string $placeholder, array $referenceArray) {}
        protected function isPlaceholder($value) : bool {}
        protected function merge(array $val1, array $val2) : array {}
    }

}

namespace TYPO3\CMS\Core\Configuration\Exception {
    /**
     * An exception thrown if ExtensionConfiguration->get() is called for
     * an extension that has no configuration.
     *
     * @internal
     */
    class ExtensionConfigurationExtensionNotConfiguredException extends \typo3\cms\core\exception {}

    /**
     * An exception thrown if ExtensionConfiguration->get() is called with
     * a path that does not exist within the extension configuration.
     *
     * @internal
     */
    class ExtensionConfigurationPathDoesNotExistException extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Core\Page {
    /**
     * TYPO3 pageRender class (new in TYPO3 4.3.0)
     * This class render the HTML of a webpage, usable for BE and FE
     */
    class PageRenderer implements \typo3\cms\core\singletoninterface {
        const JQUERY_NAMESPACE_NONE = 'none';
        const JQUERY_VERSION_LATEST = '3.2.1';
        const PART_FOOTER = 2;
        const PART_HEADER = 1;
        const PART_COMPLETE = 0;

        /**
         * @var bool
         */
        protected $compressJavascript;
        /**
         * @var bool
         */
        protected $compressCss;
        /**
         * @var bool
         */
        protected $removeLineBreaksFromTemplate;
        /**
         * @var bool
         */
        protected $concatenateFiles;
        /**
         * @var bool
         */
        protected $concatenateJavascript;
        /**
         * @var bool
         */
        protected $concatenateCss;
        /**
         * @var bool
         */
        protected $moveJsFromHeaderToFooter;
        /**
         * @var \TYPO3\CMS\Core\Charset\CharsetConverter
         */
        protected $csConvObj;
        /**
         * @var \TYPO3\CMS\Core\Localization\Locales
         */
        protected $locales;
        /**
         * The language key
         * Two character string or 'default'
         *
         * @var string
         */
        protected $lang;
        /**
         * List of language dependencies for actual language. This is used for local variants of a language
         * that depend on their "main" language, like Brazilian Portuguese or Canadian French.
         *
         * @var array
         */
        protected $languageDependencies;
        /**
         * @var \TYPO3\CMS\Core\Resource\ResourceCompressor
         */
        protected $compressor;
        /**
         * @var array
         */
        protected $jsFiles;
        /**
         * @var array
         */
        protected $jsFooterFiles;
        /**
         * @var array
         */
        protected $jsLibs;
        /**
         * @var array
         */
        protected $jsFooterLibs;
        /**
         * @var array
         */
        protected $cssFiles;
        /**
         * @var array
         */
        protected $cssLibs;
        /**
         * The title of the page
         *
         * @var string
         */
        protected $title;
        /**
         * Charset for the rendering
         *
         * @var string
         */
        protected $charSet;
        /**
         * @var string
         */
        protected $favIcon;
        /**
         * @var string
         */
        protected $baseUrl;
        /**
         * @var bool
         */
        protected $renderXhtml;
        /**
         * @var string
         */
        protected $xmlPrologAndDocType;
        /**
         * @var array
         */
        protected $metaTags;
        /**
         * META Tags added via the API
         *
         * @var array
         */
        protected $metaTagsByAPI;
        /**
         * @var array
         */
        protected $inlineComments;
        /**
         * @var array
         */
        protected $headerData;
        /**
         * @var array
         */
        protected $footerData;
        /**
         * @var string
         */
        protected $titleTag;
        /**
         * @var string
         */
        protected $metaCharsetTag;
        /**
         * @var string
         */
        protected $htmlTag;
        /**
         * @var string
         */
        protected $headTag;
        /**
         * @var string
         */
        protected $baseUrlTag;
        /**
         * @var string
         */
        protected $iconMimeType;
        /**
         * @var string
         */
        protected $shortcutTag;
        /**
         * @var array
         */
        protected $jsInline;
        /**
         * @var array
         */
        protected $jsFooterInline;
        /**
         * @var array
         */
        protected $extOnReadyCode;
        /**
         * @var array
         */
        protected $cssInline;
        /**
         * @var string
         */
        protected $bodyContent;
        /**
         * @var string
         */
        protected $templateFile;
        /**
         * default path to the requireJS library, relative to the typo3/ directory
         * @var string
         */
        protected $requireJsPath;
        /**
         * The local directory where one can find jQuery versions and plugins
         *
         * @var string
         */
        protected $jQueryPath;
        /**
         * This array holds all jQuery versions that should be included in the
         * current page.
         * Each version is described by "source", "version" and "namespace"
         *
         * The namespace of every particular version is the key
         * of that array, because only one version per namespace can exist.
         *
         * The type "source" describes where the jQuery core should be included from
         * currently, TYPO3 supports "local" (make use of jQuery path), "google",
         * "jquery", "msn" and "cloudflare".
         *
         * Currently there are downsides to "local" which supports only the latest/shipped
         * jQuery core out of the box.
         *
         * @var array
         */
        protected $jQueryVersions;
        /**
         * Array of jQuery version numbers shipped with the core
         *
         * @var array
         */
        protected $availableLocalJqueryVersions;
        /**
         * Array of jQuery CDNs with placeholders
         *
         * @var array
         */
        protected $jQueryCdnUrls;
        /**
         * if set, the requireJS library is included
         * @var bool
         */
        protected $addRequireJs;
        /**
         * inline configuration for requireJS
         * @var array
         */
        protected $requireJsConfig;
        /**
         * @var bool
         */
        protected $enableJqueryDebug;
        /**
         * @var array
         */
        protected $inlineLanguageLabels;
        /**
         * @var array
         */
        protected $inlineLanguageLabelFiles;
        /**
         * @var array
         */
        protected $inlineSettings;
        /**
         * @var array
         */
        protected $inlineJavascriptWrap;
        /**
         * @var array
         */
        protected $inlineCssWrap;
        /**
         * Saves error messages generated during compression
         *
         * @var string
         */
        protected $compressError;
        /**
         * Is empty string for HTML and ' /' for XHTML rendering
         *
         * @var string
         */
        protected $endingSlash;

        public function __construct($templateFile = '') {}
        /**
         * Reset all vars to initial values
         */
        protected function reset() {}
        public function setTitle($title) {}
        public function setRenderXhtml($enable) {}
        public function setXmlPrologAndDocType($xmlPrologAndDocType) {}
        public function setCharSet($charSet) {}
        public function setLanguage($lang) {}
        public function setMetaCharsetTag($metaCharsetTag) {}
        public function setHtmlTag($htmlTag) {}
        public function setHeadTag($headTag) {}
        public function setFavIcon($favIcon) {}
        public function setIconMimeType($iconMimeType) {}
        public function setBaseUrl($baseUrl) {}
        public function setTemplateFile($file) {}
        public function setBodyContent($content) {}
        public function setRequireJsPath($path) {}
        /**
         * Enables MoveJsFromHeaderToFooter
         */
        public function enableMoveJsFromHeaderToFooter() {}
        /**
         * Disables MoveJsFromHeaderToFooter
         */
        public function disableMoveJsFromHeaderToFooter() {}
        /**
         * Enables compression of javascript
         */
        public function enableCompressJavascript() {}
        /**
         * Disables compression of javascript
         */
        public function disableCompressJavascript() {}
        /**
         * Enables compression of css
         */
        public function enableCompressCss() {}
        /**
         * Disables compression of css
         */
        public function disableCompressCss() {}
        /**
         * Enables concatenation of js and css files
         */
        public function enableConcatenateFiles() {}
        /**
         * Disables concatenation of js and css files
         */
        public function disableConcatenateFiles() {}
        /**
         * Enables concatenation of js files
         */
        public function enableConcatenateJavascript() {}
        /**
         * Disables concatenation of js files
         */
        public function disableConcatenateJavascript() {}
        /**
         * Enables concatenation of css files
         */
        public function enableConcatenateCss() {}
        /**
         * Disables concatenation of css files
         */
        public function disableConcatenateCss() {}
        /**
         * Sets removal of all line breaks in template
         */
        public function enableRemoveLineBreaksFromTemplate() {}
        /**
         * Unsets removal of all line breaks in template
         */
        public function disableRemoveLineBreaksFromTemplate() {}
        /**
         * Enables Debug Mode
         * This is a shortcut to switch off all compress/concatenate features to enable easier debug
         */
        public function enableDebugMode() {}
        /**
         * Gets the title
         *
         * @return string $title Title of webpage
         */
        public function getTitle() {}
        /**
         * Gets the charSet
         *
         * @return string $charSet
         */
        public function getCharSet() {}
        /**
         * Gets the language
         *
         * @return string $lang
         */
        public function getLanguage() {}
        /**
         * Returns rendering mode XHTML or HTML
         *
         * @return bool TRUE if XHTML, FALSE if HTML
         */
        public function getRenderXhtml() {}
        /**
         * Gets html tag
         *
         * @return string $htmlTag Html tag
         */
        public function getHtmlTag() {}
        /**
         * Get meta charset
         *
         * @return string
         */
        public function getMetaCharsetTag() {}
        /**
         * Gets head tag
         *
         * @return string $tag Head tag
         */
        public function getHeadTag() {}
        /**
         * Gets favicon
         *
         * @return string $favIcon
         */
        public function getFavIcon() {}
        /**
         * Gets icon mime type
         *
         * @return string $iconMimeType
         */
        public function getIconMimeType() {}
        /**
         * Gets HTML base URL
         *
         * @return string $url
         */
        public function getBaseUrl() {}
        /**
         * Gets template file
         *
         * @return string
         */
        public function getTemplateFile() {}
        /**
         * Gets MoveJsFromHeaderToFooter
         *
         * @return bool
         */
        public function getMoveJsFromHeaderToFooter() {}
        /**
         * Gets compress of javascript
         *
         * @return bool
         */
        public function getCompressJavascript() {}
        /**
         * Gets compress of css
         *
         * @return bool
         */
        public function getCompressCss() {}
        /**
         * Gets concatenate of js and css files
         *
         * @return bool
         */
        public function getConcatenateFiles() {}
        /**
         * Gets concatenate of js files
         *
         * @return bool
         */
        public function getConcatenateJavascript() {}
        /**
         * Gets concatenate of css files
         *
         * @return bool
         */
        public function getConcatenateCss() {}
        /**
         * Gets remove of empty lines from template
         *
         * @return bool
         */
        public function getRemoveLineBreaksFromTemplate() {}
        /**
         * Gets content for body
         *
         * @return string
         */
        public function getBodyContent() {}
        /**
         * Gets the inline language labels.
         *
         * @return array The inline language labels
         */
        public function getInlineLanguageLabels() {}
        /**
         * Gets the inline language files
         *
         * @return array
         */
        public function getInlineLanguageLabelFiles() {}
        public function addMetaTag($meta) {}
/**
 * Lowercase all the things
 */
        public function setMetaTag(/**
 * Lowercase all the things
 */
string $type, /**
 * Lowercase all the things
 */
string $name, /**
 * Lowercase all the things
 */
string $content) {}
/**
 * Lowercase all the things
 */
        public function getMetaTag(/**
 * Lowercase all the things
 */
string $type, /**
 * Lowercase all the things
 */
string $name) : array {}
/**
 * Lowercase all the things
 */
        public function removeMetaTag(/**
 * Lowercase all the things
 */
string $type, /**
 * Lowercase all the things
 */
string $name) {}
        public function addInlineComment($comment) {}
        public function addHeaderData($data) {}
        public function addFooterData($data) {}
        public function addJsLibrary($name, $file, $type = 'text/javascript', $compress = false, $forceOnTop = false, $allWrap = '', $excludeFromConcatenation = false, $splitChar = '|', $async = false, $integrity = '', $defer = false, $crossorigin = '') {}
        public function addJsFooterLibrary($name, $file, $type = 'text/javascript', $compress = false, $forceOnTop = false, $allWrap = '', $excludeFromConcatenation = false, $splitChar = '|', $async = false, $integrity = '', $defer = false, $crossorigin = '') {}
        public function addJsFile($file, $type = 'text/javascript', $compress = true, $forceOnTop = false, $allWrap = '', $excludeFromConcatenation = false, $splitChar = '|', $async = false, $integrity = '', $defer = false, $crossorigin = '') {}
        public function addJsFooterFile($file, $type = 'text/javascript', $compress = true, $forceOnTop = false, $allWrap = '', $excludeFromConcatenation = false, $splitChar = '|', $async = false, $integrity = '', $defer = false, $crossorigin = '') {}
        public function addJsInlineCode($name, $block, $compress = true, $forceOnTop = false) {}
        public function addJsFooterInlineCode($name, $block, $compress = true, $forceOnTop = false) {}
        public function addCssFile($file, $rel = 'stylesheet', $media = 'all', $title = '', $compress = true, $forceOnTop = false, $allWrap = '', $excludeFromConcatenation = false, $splitChar = '|', $inline = false) {}
        public function addCssLibrary($file, $rel = 'stylesheet', $media = 'all', $title = '', $compress = true, $forceOnTop = false, $allWrap = '', $excludeFromConcatenation = false, $splitChar = '|', $inline = false) {}
        public function addCssInlineBlock($name, $block, $compress = false, $forceOnTop = false) {}
        public function loadJquery($version = null, $source = null, $namespace = self::JQUERY_NAMESPACE_NONE) {}
        /**
         * Call function if you need the requireJS library
         * this automatically adds the JavaScript path of all loaded extensions in the requireJS path option
         * so it resolves names like TYPO3/CMS/MyExtension/MyJsFile to EXT:MyExtension/Resources/Public/JavaScript/MyJsFile.js
         * when using requireJS
         */
        public function loadRequireJs() {}
        protected function computeRequireJsConfig($isDevelopment, array $loadedExtensions) {}
        public function addRequireJsConfiguration(array $configuration) {}
        public function loadRequireJsModule($mainModuleName, $callBackFunction = null) {}
        public function addInlineLanguageLabel($key, $value) {}
        public function addInlineLanguageLabelArray(array $array, $parseWithLanguageService = false) {}
        public function addInlineLanguageLabelFile($fileRef, $selectionPrefix = '', $stripFromSelectionName = '') {}
        public function addInlineSetting($namespace, $key, $value) {}
        public function addInlineSettingArray($namespace, array $array) {}
        public function addBodyContent($content) {}
        public function render($part = self::PART_COMPLETE) {}
        /**
         * Renders metaTags based on tags added via the API
         *
         * @return array
         */
        protected function renderMetaTagsFromAPI() {}
        public function renderPageWithUncachedObjects($substituteHash) {}
        public function renderJavaScriptAndCssForProcessingOfUncachedContentObjects($cachedPageContent, $substituteHash) {}
        /**
         * Remove ending slashes from static header block
         * if the page is being rendered as html (not xhtml)
         * and define property $this->endingSlash for further use
         */
        protected function prepareRendering() {}
        /**
         * Renders all JavaScript and CSS
         *
         * @return array<string>
         */
        protected function renderJavaScriptAndCss() {}
        protected function getPreparedMarkerArray($jsLibs, $jsFiles, $jsFooterFiles, $cssLibs, $cssFiles, $jsInline, $cssInline, $jsFooterInline, $jsFooterLibs, $metaTags) {}
        protected function getPreparedMarkerArrayForPageWithUncachedObjects($substituteHash) {}
        protected function getTemplateForPart($part) {}
        /**
         * Helper function for render the main JavaScript libraries,
         * currently: RequireJS, jQuery
         *
         * @return string Content with JavaScript libraries
         */
        protected function renderMainJavaScriptLibraries() {}
        /**
         * Load the language strings into JavaScript
         */
        protected function loadJavaScriptLanguageStrings() {}
        protected function convertCharsetRecursivelyToUtf8($data, string $fromCharset) {}
        /** @var Router $router */
        protected function addAjaxUrlsToInlineSettings() {}
        protected function renderJqueryScriptTag($version, $source, $namespace) {}
        /**
         * Render CSS library files
         *
         * @return string
         */
        protected function renderCssLibraries() {}
        /**
         * Render CSS files
         *
         * @return string
         */
        protected function renderCssFiles() {}
        private function createCssTag(array $properties, string $file) : string {}
        /**
         * Render inline CSS
         *
         * @return string
         */
        protected function renderCssInline() {}
        /**
         * Render JavaScipt libraries
         *
         * @return array<string> jsLibs and jsFooterLibs strings
         */
        protected function renderAdditionalJavaScriptLibraries() {}
        /**
         * Render JavaScript files
         *
         * @return array<string> jsFiles and jsFooterFiles strings
         */
        protected function renderJavaScriptFiles() {}
        /**
         * Render inline JavaScript
         *
         * @return array<string> jsInline and jsFooterInline string
         */
        protected function renderInlineJavaScript() {}
        protected function includeLanguageFileForInline($fileRef, $selectionPrefix = '', $stripFromSelectionName = '') {}
/** @var $languageFactory LocalizationFactory */
        protected function readLLfile(/** @var $languageFactory LocalizationFactory */
$fileRef) {}
        /**
         * Concatenate files into one file
         * registered handler
         */
        protected function doConcatenate() {}
        /**
         * Concatenate JavaScript files according to the configuration.
         */
        protected function doConcatenateJavaScript() {}
        /**
         * Concatenate CSS files according to configuration.
         */
        protected function doConcatenateCss() {}
        /**
         * Compresses inline code
         */
        protected function doCompress() {}
        /**
         * Compresses CSS according to configuration.
         */
        protected function doCompressCss() {}
        /**
         * Compresses JavaScript according to configuration.
         */
        protected function doCompressJavaScript() {}
        /**
         * Returns instance of \TYPO3\CMS\Core\Resource\ResourceCompressor
         *
         * @return \TYPO3\CMS\Core\Resource\ResourceCompressor
         */
        protected function getCompressor() {}
        protected function processJsFile($filename) {}
        protected function getStreamlinedFileName($file, $prepareForOutput = true) {}
        /**
         * Returns global frontend controller
         *
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
        /**
         * Returns global language service instance
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Execute PreRenderHook for possible manipulation
         */
        protected function executePreRenderHook() {}
        /**
         * PostTransform for possible manipulation of concatenated and compressed files
         */
        protected function executeRenderPostTransformHook() {}
        protected function executePostRenderHook($jsLibs, $jsFiles, $jsFooterFiles, $cssLibs, $cssFiles, $jsInline, $cssInline, $jsFooterInline, $jsFooterLibs) {}
        protected function createInlineCssTagFromFile(string $file, array $properties) : string {}
    }

}

namespace TYPO3\CMS\Core\TimeTracker {
    /**
     * Frontend Timetracking functions
     *
     * Is used to register how much time is used with operations in TypoScript
     */
    class TimeTracker implements \typo3\cms\core\singletoninterface {
        /**
         * If set to true (see constructor) then then the timetracking is enabled
         * @var bool
         */
        protected $isEnabled;
        /**
         * Is loaded with the millisecond time when this object is created
         *
         * @var int
         */
        public $starttime;
        /**
         * Log Rendering flag. If set, ->push() and ->pull() is called from the cObj->cObjGetSingle().
         * This determines whether or not the TypoScript parsing activity is logged. But it also slows down the rendering
         *
         * @var bool
         */
        public $LR;
        /**
         * @var array
         */
        public $printConf;
        /**
         * @var array
         */
        public $wrapError;
        /**
         * @var array
         */
        public $wrapIcon;
        /**
         * @var int
         */
        public $uniqueCounter;
        /**
         * @var array
         */
        public $tsStack;
        /**
         * @var int
         */
        public $tsStackLevel;
        /**
         * @var array
         */
        public $tsStackLevelMax;
        /**
         * @var array
         */
        public $tsStackLog;
        /**
         * @var int
         */
        public $tsStackPointer;
        /**
         * @var array
         */
        public $currentHashPointer;
        /**
         * Log entries that take than this number of milliseconds (own time) will be highlighted during log display. Set 0 to disable highlighting.
         *
         * @var int
         */
        public $highlightLongerThan;

        public function __construct($isEnabled = true) {}
        /**
         * Sets the starting time
         */
        public function start() {}
        public function push($tslabel, $value = '') {}
        public function pull($content = '') {}
        public function setTSlogMessage($content, $num = 0) {}
        public function setTSselectQuery(array $data, $msg = '') {}
        /**
         * Increases the stack pointer
         *
         * @see decStackPointer(), \TYPO3\CMS\Frontend\Page\PageGenerator::renderContent(), \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::cObjGetSingle()
         */
        public function incStackPointer() {}
        /**
         * Decreases the stack pointer
         *
         * @see incStackPointer(), \TYPO3\CMS\Frontend\Page\PageGenerator::renderContent(), \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::cObjGetSingle()
         */
        public function decStackPointer() {}
        public function getMilliseconds($microtime = null) {}
        public function getDifferenceToStarttime($microtime = null) {}
        /**
         * Get total parse time in milliseconds(without backend user initialization)
         *
         * @return int
         */
        public function getParseTime() : int {}
        /**
         * Print TypoScript parsing log
         *
         * @return string HTML table with the information about parsing times.
         */
        public function printTSlog() {}
        protected function fixContent($arr, $content, $depthData = '', $first = 0, $vKey = '') {}
        protected function fixCLen($c, $v) {}
        protected function fw($str) {}
        protected function createHierarchyArray($arr, $pointer, $uniqueId) {}
    }

}

namespace TYPO3\CMS\Core\Collection {
    /**
     * Abstract implementation of a RecordCollection
     *
     * RecordCollection is a collections of TCA-Records.
     * The collection is meant to be stored in TCA-table sys_collections and is manageable
     * via TCEforms.
     *
     * A RecordCollection might be used to group a set of records (e.g. news, images, contentElements)
     * for output in frontend
     *
     * The AbstractRecordCollection uses SplDoublyLinkedList for internal storage
     */
    abstract class AbstractRecordCollection implements \typo3\cms\core\collection\recordcollectioninterface, \typo3\cms\core\collection\persistablecollectioninterface, \typo3\cms\core\collection\sortablecollectioninterface {
        /**
         * The table name collections are stored to
         *
         * @var string
         */
        static protected $storageTableName;
        /**
         * The table name collections are stored to
         *
         * @var string
         */
        static protected $storageItemsField;
        /**
         * Uid of the storage
         *
         * @var int
         */
        protected $uid;
        /**
         * Collection title
         *
         * @var string
         */
        protected $title;
        /**
         * Collection description
         *
         * @var string
         */
        protected $description;
        /**
         * Table name of the records stored in this collection
         *
         * @var string
         */
        protected $itemTableName;
        /**
         * The local storage
         *
         * @var \SplDoublyLinkedList
         */
        protected $storage;

        /**
         * Creates this object.
         */
        public function __construct() {}
        /**
         * (PHP 5 >= 5.1.0)
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         * @return mixed Can return any type.
         */
        public function current() {}
        /**
         * (PHP 5 >= 5.1.0)
         * Move forward to next element
         *
         * @link http://php.net/manual/en/iterator.next.php
         */
        public function next() {}
        /**
         * (PHP 5 >= 5.1.0)
         * Return the key of the current element
         *
         * @link http://php.net/manual/en/iterator.key.php
         * @return int 0 on failure.
         */
        public function key() {}
        /**
         * (PHP 5 >= 5.1.0)
         * Checks if current position is valid
         *
         * @link http://php.net/manual/en/iterator.valid.php
         * @return bool The return value will be casted to boolean and then evaluated.
         */
        public function valid() {}
        /**
         * (PHP 5 >= 5.1.0)
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         */
        public function rewind() {}
        /**
         * (PHP 5 >= 5.1.0)
         * String representation of object
         *
         * @link http://php.net/manual/en/serializable.serialize.php
         * @return string the string representation of the object or &null;
         */
        public function serialize() {}
        public function unserialize($serialized) {}
        /**
         * (PHP 5 >= 5.1.0)
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         * @return int The custom count as an integer.
         */
        public function count() {}
        /**
         * Getter for the title
         *
         * @return string
         */
        public function getTitle() {}
        /**
         * Getter for the UID
         *
         * @return int
         */
        public function getUid() {}
        /**
         * Getter for the description
         *
         * @return string
         */
        public function getDescription() {}
        public function setTitle($title) {}
        public function setDescription($desc) {}
        /**
         * Setter for the name of the data-source table
         *
         * @return string
         */
        public function getItemTableName() {}
        public function setItemTableName($tableName) {}
        public function usort($callbackFunction) {}
        public function moveItemAt($currentPosition, $newPosition = 0) {}
        /**
         * Returns the uid of the collection
         *
         * @return int
         */
        public function getIdentifier() {}
        public function setIdentifier($id) {}
        public static function load($id, $fillItems = false) {}
        public static function create(array $collectionRecord, $fillItems = false) {}
        /** @var \TYPO3\CMS\Core\DataHandling\DataHandler $tce */
        public function persist() {}
        /**
         * Returns an array of the persistable properties and contents
         * which are processable by DataHandler.
         *
         * For internal usage in persist only.
         *
         * @return array
         */
        abstract protected function getPersistableDataArray() ;
        protected function getItemUidList($includeTableName = true) {}
        /**
         * Builds an array representation of this collection
         *
         * @return array
         */
        public function toArray() {}
        public function fromArray(array $array) {}
    }

    /**
     * Implementation of a RecordCollection for static TCA-Records
     */
    class StaticRecordCollection extends \typo3\cms\core\collection\abstractrecordcollection implements \typo3\cms\core\collection\editablecollectioninterface {
/** @var $collection StaticRecordCollection */
        public static function create(/** @var $collection StaticRecordCollection */
array $collectionRecord, /** @var $collection StaticRecordCollection */
$fillItems = false) {}
        public function __construct($tableName = null) {}
        /**
         * Populates the content-entries of the storage
         *
         * Queries the underlying storage for entries of the collection
         * and adds them to the collection data.
         *
         * If the content entries of the storage had not been loaded on creation
         * ($fillItems = false) this function is to be used for loading the contents
         * afterwards.
         */
        public function loadContents() {}
        /**
         * Returns an array of the persistable properties and contents
         * which are processable by DataHandler.
         *
         * for internal usage in persist only.
         *
         * @return array
         */
        protected function getPersistableDataArray() {}
        public function add($data) {}
        public function addAll(CollectionInterface $other) {}
        public function remove($data) {}
        /**
         * Removes all entries from the collection
         *
         * collection will be empty afterwards
         */
        public function removeAll() {}
        /**
         * Gets the collected records in this collection, by
         * looking up the MM relations of this record to the
         * table name defined in the local field 'table_name'.
         *
         * @return array
         */
        protected function getCollectedRecords() {}
    }

    /**
     * Implements the repository for record collections.
     */
    class RecordCollectionRepository {
        const TYPE_Static = 'static';

        /**
         * Name of the table the collection records are stored to
         *
         * @var string
         */
        protected $table;
        /**
         * @var string
         */
        protected $typeField;
        /**
         * @var string
         */
        protected $tableField;

        public function findByUid($uid) {}
        /**
         * Finds all record collections.
         *
         * @return \TYPO3\CMS\Core\Collection\AbstractRecordCollection[]|null
         */
        public function findAll() {}
        public function findByTableName($tableName) {}
        public function findByType($type) {}
        public function findByTypeAndTableName($type, $tableName) {}
        public function deleteByUid($uid) {}
        protected function queryMultipleRecords(array $conditions = [ ]) {}
        protected function createDomainObject(array $record) {}
        protected function createMultipleDomainObjects(array $data) {}
        /**
         * Function to return the current TYPO3_MODE.
         * This function can be mocked in unit tests to be able to test frontend behaviour.
         *
         * @return string
         */
        protected function getEnvironmentMode() {}
    }


    /**
     * Interface for collection class being sortable
     *
     * This interface allows you to either define a callback implementing
     * your own sorting method and explicitly move an item from one position
     * to another.
     *
     * This assumes that entries are sortable and therefore an index can be assigned
     */
    interface SortableCollectionInterface {
        function usort($callbackFunction) ;
        function moveItemAt($currentPosition, $newPosition = 0) ;
    }

    /**
     * Interface for collection classes which es enabled to be modified
     */
    interface EditableCollectionInterface {
        function add($data) ;
        function addAll(CollectionInterface $other) ;
        function remove($data) ;
        /**
         * Removes all entries from the collection
         *
         * collection will be empty afterwards
         */
        function removeAll() ;
    }

    /**
     * Interface for collection class being persistable
     *
     * Collections are containers-classes handling the storage
     * of data values (f.e. strings, records, relations) in a
     * common and generic way, while the class manages the storage
     * in an appropriate way itself
     */
    interface PersistableCollectionInterface {
        /**
         * Get the identifier of the collection
         *
         * For database stored collections, this will be an integer,
         * session stored, registry stored or other collections might
         * use a string as well
         *
         * @return int|string
         */
        function getIdentifier() ;
        function setIdentifier($id) ;
        static function load($id, $fillItems = false) ;
        /**
         * Persists current collection state to underlying storage
         */
        function persist() ;
        /**
         * Populates the content-entries of the storage
         *
         * Queries the underlying storage for entries of the collection
         * and adds them to the collection data.
         *
         * If the content entries of the storage had not been loaded on creation
         * ($fillItems = false) this function is to be used for loading the contents
         * afterwards.
         */
        function loadContents() ;
    }

    /**
     * Collection for handling records from a single database-table.
     */
    interface RecordCollectionInterface extends \typo3\cms\core\collection\nameablecollectioninterface {
        function setItemTableName($tableName) ;
        /**
         * Setter for the name of the data-source table
         *
         * @return string
         */
        function getItemTableName() ;
    }

    /**
     * Marker interface for a collection class with title and description
     *
     * Collections might be used internally as well as being shown
     * With the nameable interface a title and a description are added
     * to an collection, allowing every collection implementing Nameable
     * being display by the same logic.
     */
    interface NameableCollectionInterface {
        function setTitle($title) ;
        function setDescription($description) ;
        /**
         * Getter for the title
         *
         * @return string
         */
        function getTitle() ;
        /**
         * Getter for the description
         */
        function getDescription() ;
    }

    /**
     * Marker interface for collection classes
     *
     * Collections are containers-classes handling the storage
     * of data values (f.e. strings, records, relations) in a
     * common and generic way, while the class manages the storage
     * in an appropriate way itself
     */
    interface CollectionInterface extends \iterator {}

}

namespace TYPO3\CMS\Core\FrontendEditing {
    /**
     * Controller class for frontend editing.
     */
    class FrontendEditingController {
        /**
         * GET/POST parameters for the FE editing.
         * Accessed as $GLOBALS['BE_USER']->frontendEdit->TSFE_EDIT, thus public
         *
         * @var array
         */
        public $TSFE_EDIT;
        /**
         * @var \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        protected $tce;

        /**
         * Initializes configuration options.
         */
        public function initConfigOptions() {}
        public function displayEditPanel($content, array $conf, $currentRecord, array $dataArray) {}
        public function displayEditIcons($content, $params, array $conf = [ ], $currentRecord = '', array $dataArray = [ ], $addUrlParamStr = '') {}
        /**
         * Returns TRUE if an edit-action is sent from the Admin Panel
         *
         * @return bool
         * @see \TYPO3\CMS\Frontend\Http\RequestHandler
         */
        public function isEditAction() {}
        /**
         * Returns TRUE if an edit form is shown on the page.
         * Used from RequestHandler where a TRUE return-value will result in classes etc. being included.
         *
         * @return bool
         * @see \TYPO3\CMS\Frontend\Http\RequestHandler
         */
        public function isEditFormShown() {}
        /**
         * Management of the on-page frontend editing forms and edit panels.
         * Basically taking in the data and commands and passes them on to the proper classes as they should be.
         *
         * @throws \UnexpectedValueException if TSFE_EDIT[cmd] is not a valid command
         * @see \TYPO3\CMS\Frontend\Http\RequestHandler
         */
        public function editAction() {}
        public function doHide($table, $uid) {}
        public function doUnhide($table, $uid) {}
        public function doUp($table, $uid) {}
        public function doDown($table, $uid) {}
        public function doMoveAfter($table, $uid) {}
        protected function move($table, $uid, $direction = '', $afterUID = 0) {}
        public function doDelete($table, $uid) {}
        public function doSave($table, $uid) {}
        public function doSaveAndClose($table, $uid) {}
        public function doClose($table, $uid) {}
        protected function allowedToEditLanguage($table, array $currentRecord) {}
        protected function allowedToEdit($table, array $dataArray, array $conf, $checkEditAccessInternals = true) {}
        protected function getAllowedEditActions($table, array $conf, $pid, $allow = '') {}
        /**
         * Adds any extra Javascript includes needed for Front-end editing
         *
         * @return string
         */
        public function getJavascriptIncludes() {}
        public function getHiddenFields(array $dataArray) {}
        /**
         * Initializes \TYPO3\CMS\Core\DataHandling\DataHandler since it is used on modification actions.
         */
        protected function initializeTceMain() {}
    }

}

namespace TYPO3\CMS\Core\Core {
    define('TYPO3_version', '9.0.0');
    define('TYPO3_branch', '9.0');
    define('TYPO3_copyright_year', '1998-2017');
    define('TYPO3_URL_GENERAL', 'https://typo3.org/');
    define('TYPO3_URL_LICENSE', 'https://typo3.org/typo3-cms/overview/licenses/');
    define('TYPO3_URL_EXCEPTION', 'https://typo3.org/go/exception/CMS/');
    define('TYPO3_URL_MAILINGLISTS', 'http://lists.typo3.org/cgi-bin/mailman/listinfo');
    define('TYPO3_URL_DOCUMENTATION', 'https://typo3.org/documentation/');
    define('TYPO3_URL_DOCUMENTATION_TSREF', 'https://docs.typo3.org/typo3cms/TyposcriptReference/');
    define('TYPO3_URL_DOCUMENTATION_TSCONFIG', 'https://docs.typo3.org/typo3cms/TSconfigReference/');
    define('TYPO3_URL_CONSULTANCY', 'https://typo3.org/support/professional-services/');
    define('TYPO3_URL_CONTRIBUTE', 'https://typo3.org/contribute/');
    define('TYPO3_URL_SECURITY', 'https://typo3.org/teams/security/');
    define('TYPO3_URL_DOWNLOAD', 'https://typo3.org/download/');
    define('TYPO3_URL_SYSTEMREQUIREMENTS', 'https://typo3.org/typo3-cms/overview/requirements/');
    define('TYPO3_URL_DONATE', 'https://typo3.org/donate/online-donation/');
    define('TYPO3_URL_WIKI_OPCODECACHE', 'https://wiki.typo3.org/Opcode_Cache');
    define('CRLF', CR . LF);
    define('FILE_DENY_PATTERN_DEFAULT', '\\.(php[3-7]?|phpsh|phtml|pht)(\\..*)?$|^\\.htaccess$');
    define('PHP_EXTENSIONS_DEFAULT', 'php,php3,php4,php5,php6,php7,phpsh,inc,phtml,pht');
    define('T3_ERR_SV_GENERAL', -1);
    define('T3_ERR_SV_NOT_AVAIL', -2);
    define('T3_ERR_SV_WRONG_SUBTYPE', -3);
    define('T3_ERR_SV_NO_INPUT', -4);
    define('T3_ERR_SV_FILE_NOT_FOUND', -20);
    define('T3_ERR_SV_FILE_READ', -21);
    define('T3_ERR_SV_FILE_WRITE', -22);
    define('T3_ERR_SV_PROG_NOT_FOUND', -40);
    define('T3_ERR_SV_PROG_FAILED', -41);
    define('TYPO3_mainDir', 'typo3/');
    define('PATH_typo3', PATH_site . TYPO3_mainDir);
    define('PATH_typo3conf', PATH_site . 'typo3conf/');
    define('TYPO3_REQUESTTYPE_FE', 1);
    define('TYPO3_REQUESTTYPE_BE', 2);
    define('TYPO3_REQUESTTYPE_CLI', 4);
    define('TYPO3_REQUESTTYPE_AJAX', 8);
    define('TYPO3_REQUESTTYPE_INSTALL', 16);

    /**
     * The TYPO3 Context object.
     *
     * A TYPO3 Application context is something like "Production", "Development",
     * "Production/StagingSystem", and is set using the TYPO3_CONTEXT environment variable.
     *
     * A context can contain arbitrary sub-contexts, which are delimited with slash
     * ("Production/StagingSystem", "Production/Staging/Server1"). The top-level
     * contexts, however, must be one of "Testing", "Development" and "Production".
     *
     * Mainly, you will use $context->isProduction(), $context->isTesting() and
     * $context->isDevelopment() inside your custom code.
     *
     * This class is derived from the TYPO3 Flow framework.
     * Credits go to the respective authors.
     */
    class ApplicationContext {
        /**
         * The (internal) context string; could be something like "Development" or "Development/MyLocalMacBook"
         *
         * @var string
         */
        protected $contextString;
        /**
         * The root context; must be one of "Development", "Testing" or "Production"
         *
         * @var string
         */
        protected $rootContextString;
        /**
         * The parent context, or NULL if there is no parent context
         *
         * @var \TYPO3\CMS\Core\Core\ApplicationContext
         */
        protected $parentContext;

        public function __construct($contextString) {}
        /**
         * Returns the full context string, for example "Development", or "Production/LiveSystem"
         *
         * @return string
         * @api
         */
        public function __toString() {}
        /**
         * Returns TRUE if this context is the Development context or a sub-context of it
         *
         * @return bool
         * @api
         */
        public function isDevelopment() {}
        /**
         * Returns TRUE if this context is the Production context or a sub-context of it
         *
         * @return bool
         * @api
         */
        public function isProduction() {}
        /**
         * Returns TRUE if this context is the Testing context or a sub-context of it
         *
         * @return bool
         * @api
         */
        public function isTesting() {}
        /**
         * Returns the parent context object, if any
         *
         * @return \TYPO3\CMS\Core\Core\ApplicationContext the parent context or NULL, if there is none
         * @api
         */
        public function getParent() {}
    }

    /**
     * Class to encapsulate base setup of bootstrap.
     *
     * This class contains all code that must be executed by every entry script.
     *
     * It sets up all basic paths, constants, global variables and checks
     * the basic environment TYPO3 runs in.
     *
     * This class does not use any TYPO3 instance specific configuration, it only
     * sets up things based on the server environment and core code. Even with a
     * missing typo3conf/localconf.php this script will be successful.
     *
     * The script aborts execution with an error message if
     * some part fails or conditions are not met.
     *
     * This script is internal code and subject to change.
     * DO NOT use it in own code, or be prepared your code might
     * break in future versions of the core.
     */
    class SystemEnvironmentBuilder {
        /**
         * A list of supported CGI server APIs
         * NOTICE: This is a duplicate of the SAME array in GeneralUtility!
         *         It is duplicated here as this information is needed early in bootstrap
         *         and GeneralUtility is not available yet.
         * @var array
         */
        static protected $supportedCgiServerApis;
        /**
         * An array of disabled methods
         *
         * @var string[]
         */
        static protected $disabledFunctions;

        public static function run($entryPointLevel = 0) {}
        /**
         * Define all simple constants that have no dependency to local configuration
         */
        protected static function defineBaseConstants() {}
        protected static function definePaths($entryPointLevel = 0) {}
        /**
         * Check if path and script file name calculation was successful, exit if not.
         */
        protected static function checkMainPathsExist() {}
        /**
         * Set up / initialize several globals variables
         */
        protected static function initializeGlobalVariables() {}
        /**
         * Initialize global time tracking variables.
         * These are helpers to for example output script parsetime at the end of a script.
         */
        protected static function initializeGlobalTimeTrackingVariables() {}
        /**
         * Initialize basic error reporting.
         *
         * There are a lot of extensions that have no strict / notice / deprecated free
         * ext_localconf or ext_tables. Since the final error reporting must be set up
         * after those extension files are read, a default configuration is needed to
         * suppress error reporting meanwhile during further bootstrap.
         */
        protected static function initializeBasicErrorReporting() {}
        /**
         * Determine the operating system TYPO3 is running on.
         *
         * @return string Either 'WIN' if running on Windows, else empty string
         */
        protected static function getTypo3Os() {}
        /**
         * Calculate PATH_thisScript
         *
         * First step in path calculation: Goal is to find the absolute path of the entry script
         * that was called without resolving any links. This is important since the TYPO3 entry
         * points are often linked to a central core location, so we can not use the php magic
         * __FILE__ here, but resolve the called script path from given server environments.
         *
         * This path is important to calculate the document root (PATH_site). The strategy is to
         * find out the script name that was called in the first place and to subtract the local
         * part from it to find the document root.
         *
         * @return string Absolute path to entry script
         */
        protected static function getPathThisScript() {}
        /**
         * Calculate path to entry script if not in cli mode.
         *
         * Depending on the environment, the script path is found in different $_SERVER variables.
         *
         * @return string Absolute path to entry script
         */
        protected static function getPathThisScriptNonCli() {}
        /**
         * Calculate path to entry script if in cli mode.
         *
         * First argument of a cli script is the path to the script that was called. If the script does not start
         * with / (or A:\ for Windows), the path is not absolute yet, and the current working directory is added.
         *
         * @return string Absolute path to entry script
         */
        protected static function getPathThisScriptCli() {}
        protected static function getRootPathFromScriptPath($scriptPath, $entryPointLevel) {}
        protected static function exitWithMessage($message) {}
        public static function isFunctionDisabled($function) {}
    }

    /**
     * Get and manipulate class loading information, only necessary/in use
     * when TYPO3 is not purely set up by composer but when e.g. extensions are installed via the extension manager
     * by utilizing the composer class loader and adding more information built by the ClassLoadingInformationGenerator
     * class.
     *
     * @internal
     */
    class ClassLoadingInformation {
        const AUTOLOAD_CLASSMAP_FILENAME = 'autoload_classmap.php';
        const AUTOLOAD_INFO_DIR_TESTS = 'typo3conf/autoload-tests/';
        const AUTOLOAD_INFO_DIR = 'typo3conf/autoload/';
        const AUTOLOAD_CLASSALIASMAP_FILENAME = 'autoload_classaliasmap.php';
        const AUTOLOAD_PSR4_FILENAME = 'autoload_psr4.php';

        /**
         * Checks if the autoload_classmap.php exists and we are not in testing context.
         * Used to see if the ClassLoadingInformationGenerator should be called.
         *
         * @return bool
         */
        public static function isClassLoadingInformationAvailable() {}
        /** @var ClassLoadingInformationGenerator  $generator */
        public static function dumpClassLoadingInformation() {}
        /**
         * Registers the class aliases, the class maps and the PSR4 prefixes previously identified by
         * the ClassLoadingInformationGenerator during runtime.
         */
        public static function registerClassLoadingInformation() {}
/** @var ClassLoadingInformationGenerator  $generator */
        public static function registerTransientClassLoadingInformationForPackage(/** @var ClassLoadingInformationGenerator  $generator */
PackageInterface $package) {}
        /**
         * @return string
         */
        protected static function getClassLoadingInformationDirectory() {}
        public static function getClassNameForAlias($alias) {}
        /**
         * Ensures the defined path for class information files exists
         * And clears it in case we're in testing context
         */
        protected static function ensureAutoloadInfoDirExists() {}
        /**
         * Internal method calling the bootstrap to fetch the composer class loader
         *
         * @return ClassLoader
         * @throws \TYPO3\CMS\Core\Exception
         */
        protected static function getClassLoader() {}
        /**
         * Internal method calling the bootstrap to get application context information
         *
         * @return bool
         * @throws \TYPO3\CMS\Core\Exception
         */
        protected static function isTestingContext() {}
        /**
         * Get all packages except the protected ones, as they are covered already
         *
         * @return PackageInterface[]
         */
        protected static function getActiveExtensionPackages() {}
    }

    /**
     * This class encapsulates bootstrap related methods.
     * It is required directly as the very first thing in entry scripts and
     * used to define all base things like constants and paths and so on.
     *
     * Most methods in this class have dependencies to each other. They can
     * not be called in arbitrary order. The methods are ordered top down, so
     * a method at the beginning has lower dependencies than a method further
     * down. Do not fiddle with the load order in own scripts except you know
     * exactly what you are doing!
     */
    class Bootstrap {
        /**
         * @var \TYPO3\CMS\Core\Core\Bootstrap
         */
        static protected $instance;
        /**
         * Unique Request ID
         *
         * @var string
         */
        protected $requestId;
        /**
         * The application context
         *
         * @var \TYPO3\CMS\Core\Core\ApplicationContext
         */
        protected $applicationContext;
        /**
         * @var array List of early instances
         */
        protected $earlyInstances;
        /**
         * @var string Path to install tool
         */
        protected $installToolPath;
        /**
         * A list of all registered request handlers, see the Application class / entry points for the registration
         * @var \TYPO3\CMS\Core\Http\RequestHandlerInterface[]|\TYPO3\CMS\Core\Console\RequestHandlerInterface[]
         */
        protected $availableRequestHandlers;
        /**
         * The Response object when using Request/Response logic
         * @var \Psr\Http\Message\ResponseInterface
         * @see shutdown()
         */
        protected $response;
        /**
         * @var bool
         */
        static protected $usesComposerClassLoading;

        protected function __construct($applicationContext) {}
        /**
         * @return bool
         */
        public static function usesComposerClassLoading() {}
        /**
         * Disable direct cloning of this object.
         */
        protected function __clone() {}
        /**
         * Return 'this' as singleton
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public static function getInstance() {}
        /**
         * Gets the request's unique ID
         *
         * @return string Unique request ID
         * @internal This is not a public API method, do not use in own extensions
         */
        public function getRequestId() {}
        /**
         * Returns the application context this bootstrap was started in.
         *
         * @return \TYPO3\CMS\Core\Core\ApplicationContext The application context encapsulated in an object
         * @internal This is not a public API method, do not use in own extensions.
         * Use \TYPO3\CMS\Core\Utility\GeneralUtility::getApplicationContext() instead
         */
        public function getApplicationContext() {}
        /**
         * Prevent any unwanted output that may corrupt AJAX/compression.
         * This does not interfere with "die()" or "echo"+"exit()" messages!
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function startOutputBuffering() {}
        /**
         * Main entry point called at every request usually from Global scope. Checks if everything is correct,
         * and loads the Configuration.
         *
         * Make sure that the baseSetup() is called before and the class loader is present
         *
         * @return Bootstrap
         */
        public function configure() {}
        public function baseSetup($entryPointLevel = 0) {}
/** @see initializeAnnotationRegistry */
        public function initializeClassLoader(/** @see initializeAnnotationRegistry */
$classLoader) {}
        /**
         * checks if LocalConfiguration.php or PackageStates.php is missing,
         * used to see if a redirect to the install tool is needed
         *
         * @return bool TRUE when the essential configuration is available, otherwise FALSE
         * @internal This is not a public API method, do not use in own extensions
         */
        public function checkIfEssentialConfigurationExists() {}
        public function redirectToInstallTool($entryPointLevel = 0) {}
        public function registerRequestHandlerImplementation($requestHandler) {}
/** @var \TYPO3\CMS\Core\Http\RequestHandlerInterface|\TYPO3\CMS\Core\Console\RequestHandlerInterface $requestHandler */
        protected function resolveRequestHandler(/** @var \TYPO3\CMS\Core\Http\RequestHandlerInterface|\TYPO3\CMS\Core\Console\RequestHandlerInterface $requestHandler */
$request) {}
        public function handleRequest($request) {}
        /**
         * Outputs content if there is a proper Response object.
         *
         * @return Bootstrap
         */
        protected function sendResponse() {}
        public function setEarlyInstance($objectName, $instance) {}
        public function getEarlyInstance($objectName) {}
        /**
         * Returns all registered early instances indexed by object name
         *
         * @return array
         * @internal This is not a public API method, do not use in own extensions
         */
        public function getEarlyInstances() {}
        public function loadConfigurationAndInitialize($allowCaching = true, $packageManagerClassName = \TYPO3\CMS\Core\Package\PackageManager::class) {}
/** @var \TYPO3\CMS\Core\Package\PackageManager $packageManager */
        public function initializePackageManagement(/** @var \TYPO3\CMS\Core\Package\PackageManager $packageManager */
$packageManagerClassName) {}
        /** @var \TYPO3\CMS\Core\Package\PackageManager $packageManager */
        protected function initializeRuntimeActivatedPackagesFromConfiguration() {}
        public function loadTypo3LoadedExtAndExtLocalconf($allowCaching = true) {}
        /**
         * We need an early instance of the configuration manager.
         * Since makeInstance relies on the object configuration, we create it here with new instead.
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function populateLocalConfiguration() {}
        /**
         * Set cache_core to null backend, effectively disabling eg. the cache for ext_localconf and PackageManager etc.
         *
         * @return \TYPO3\CMS\Core\Core\Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function disableCoreCache() {}
        /**
         * Initialize caching framework, and re-initializes it (e.g. in the install tool) by recreating the instances
         * again despite the Singleton instance
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function initializeCachingFramework() {}
        /**
         * Set default timezone
         *
         * @return Bootstrap
         */
        protected function setDefaultTimezone() {}
        /**
         * Initialize the locales handled by TYPO3
         *
         * @return Bootstrap
         */
        protected function initializeL10nLocales() {}
        /**
         * Configure and set up exception and error handling
         *
         * @return Bootstrap
         * @throws \RuntimeException
         */
        protected function initializeErrorHandling() {}
        /**
         * Set PHP memory limit depending on value of
         * $GLOBALS['TYPO3_CONF_VARS']['SYS']['setMemoryLimit']
         *
         * @return Bootstrap
         */
        protected function setMemoryLimit() {}
        /**
         * Define TYPO3_REQUESTTYPE* constants that can be used for developers to see if any context has been hit
         * also see setRequestType(). Is done at the very beginning so these parameters are always available.
         *
         * @return Bootstrap
         */
        protected function defineTypo3RequestTypes() {}
        public function setRequestType($requestType) {}
        /**
         * Extensions may register new caches, so we set the
         * global cache array to the manager again at this point
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function setFinalCachingFrameworkCacheConfiguration() {}
        /**
         * Unsetting reserved global variables:
         * Those are set in "ext:core/ext_tables.php" file:
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function unsetReservedGlobalVariables() {}
        public function checkLockedBackendAndRedirectOrDie($forceProceeding = false) {}
        /**
         * Compare client IP with IPmaskList and exit the script run
         * if the client is not allowed to access the backend
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         * @throws \RuntimeException
         */
        public function checkBackendIpOrDie() {}
        /**
         * Check lockSSL configuration variable and redirect
         * to https version of the backend if needed
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         * @throws \RuntimeException
         */
        public function checkSslBackendAndRedirectIfNeeded() {}
        public function loadBaseTca(bool $allowCaching = true) : Bootstrap {}
        public function loadExtTables(bool $allowCaching = true) : Bootstrap {}
        /**
         * Check for registered ext tables hooks and run them
         *
         * @throws \UnexpectedValueException
         */
        protected function runExtTablesPostProcessingHooks() {}
        /** @var $codeCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
        public function initializeBackendRouter() {}
/** @var $backendUser \TYPO3\CMS\Core\Authentication\BackendUserAuthentication */
        public function initializeBackendUser(/** @var $backendUser \TYPO3\CMS\Core\Authentication\BackendUserAuthentication */
$className = \TYPO3\CMS\Core\Authentication\BackendUserAuthentication::class) {}
        public function initializeBackendAuthentication($proceedIfNoUserIsLoggedIn = false) {}
        /** @var $GLOBALS['LANG'] \TYPO3\CMS\Core\Localization\LanguageService */
        public function initializeLanguageObject() {}
        /**
         * Throw away all output that may have happened during bootstrapping by weird extensions
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function endOutputBufferingAndCleanPreviousOutput() {}
        /**
         * Initialize output compression if configured
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function initializeOutputCompression() {}
        /**
         * Send HTTP headers if configured
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function sendHttpHeaders() {}
        /**
         * Things that should be performed to shut down the framework.
         * This method is called in all important scripts for a clean
         * shut down of the system.
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function shutdown() {}
        /**
         * Provides an instance of "template" for backend-modules to
         * work with.
         *
         * @return Bootstrap
         * @internal This is not a public API method, do not use in own extensions
         */
        public function initializeBackendTemplate() {}
    }

    /**
     * Generates class loading information (class maps, class aliases etc.) and writes it to files
     * for further inclusion in the bootstrap
     * @internal
     */
    class ClassLoadingInformationGenerator {
        /**
         * @var PackageInterface[]
         */
        protected $activeExtensionPackages;
        /**
         * @var ClassLoader
         */
        protected $classLoader;
        /**
         * @var string
         */
        protected $installationRoot;
        /**
         * @var bool
         */
        protected $isDevMode;

        public function __construct(ClassLoader $classLoader, array $activeExtensionPackages, $installationRoot, $isDevMode = false) {}
        public function buildClassLoadingInformationForPackage(PackageInterface $package, $useRelativePaths = false) {}
        protected function getAutoloadSectionFromManifest($manifest, $section) {}
        protected function createClassMap($classesPath, $useRelativePaths = false, $ignorePotentialTestClasses = false, $namespace = null) {}
        public function buildClassAliasMapForPackage(PackageInterface $package) {}
        /**
         * Generate the class map file
         * @return string[]
         * @internal
         */
        public function buildAutoloadInformationFiles() {}
        protected function makePathRelative($packagePath, $realPathOfClassFile, $relativeToRoot = true) {}
        protected function getPathCode($relativePathToClassFile) {}
        /**
         * Build class alias mapping file
         *
         * @return string
         * @throws \Exception
         * @internal
         */
        public function buildClassAliasMapFile() {}
    }


    /**
     * The base ApplicationInterface which
     * is used for all Entry Points for TYPO3, may it be
     * Frontend, Backend, Install Tool or Command Line.
     */
    interface ApplicationInterface {
        function run(callable $execute = null) ;
    }

}

namespace TYPO3\CMS\Core\Cache {
    /**
     * The Cache Manager
     *
     * This file is a backport from FLOW3
     * @api
     */
    class CacheManager implements \typo3\cms\core\singletoninterface {
        /**
         * @var FrontendInterface[]
         */
        protected $caches;
        /**
         * @var array
         */
        protected $cacheConfigurations;
        /**
         * Used to flush caches of a specific group
         * is an associative array containing the group identifier as key
         * and the identifier as an array within that group
         * groups are set via the cache configurations of each cache.
         *
         * @var array
         */
        protected $cacheGroups;
        /**
         * @var array Default cache configuration as fallback
         */
        protected $defaultCacheConfiguration;

        public function setCacheConfigurations(array $cacheConfigurations) {}
        public function registerCache(FrontendInterface $cache) {}
        public function getCache($identifier) {}
        public function hasCache($identifier) {}
        /**
         * Flushes all registered caches
         *
         * @api
         */
        public function flushCaches() {}
        public function flushCachesInGroup($groupIdentifier) {}
        public function flushCachesInGroupByTag($groupIdentifier, $tag) {}
        public function flushCachesInGroupByTags($groupIdentifier, array $tags) {}
        public function flushCachesByTag($tag) {}
        public function flushCachesByTags(array $tags) {}
        /**
         * Instantiates all registered caches.
         */
        protected function createAllCaches() {}
        protected function createCache($identifier) {}
    }

    /**
     * This service provides the sql schema for the caching framework
     */
    class DatabaseSchemaService {
        /**
         * Get schema SQL of required cache framework tables.
         *
         * This method needs ext_localconf and ext_tables loaded!
         *
         * @return string Cache framework SQL
         */
        public function getCachingFrameworkRequiredDatabaseSchema() {}
        public function addCachingFrameworkRequiredDatabaseSchemaForInstallUtility(array $sqlString, $extensionKey) {}
        public function addCachingFrameworkRequiredDatabaseSchemaForSqlExpectedSchemaService(array $sqlString) {}
    }

    /**
     * A generic Cache exception
     *
     * This file is a backport from FLOW3
     *
     * @api
     */
    class Exception extends \exception {}

}

namespace TYPO3\CMS\Core\Cache\Frontend {
    /**
     * A cache frontend for any kinds of PHP variables
     */
    class VariableFrontend extends \typo3\cms\core\cache\frontend\abstractfrontend {
        public function set($entryIdentifier, $variable, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function getByTag($tag) {}
    }

    /**
     * A cache frontend tailored to PHP code.
     *
     * This file is a backport from FLOW3
     * @api
     */
    class PhpFrontend extends \typo3\cms\core\cache\frontend\stringfrontend {
        public function __construct($identifier, PhpCapableBackendInterface $backend) {}
        public function set($entryIdentifier, $sourceCode, array $tags = [ ], $lifetime = null) {}
        public function requireOnce($entryIdentifier) {}
    }

    /**
     * An abstract cache
     *
     * This file is a backport from FLOW3
     * @api
     */
    abstract class AbstractFrontend implements \typo3\cms\core\cache\frontend\frontendinterface {
        /**
         * Identifies this cache
         *
         * @var string
         */
        protected $identifier;
        /**
         * @var AbstractBackend|TaggableBackendInterface
         */
        protected $backend;

        public function __construct($identifier, BackendInterface $backend) {}
        /**
         * Returns this cache's identifier
         *
         * @return string The identifier for this cache
         * @api
         */
        public function getIdentifier() {}
        /**
         * Returns the backend used by this cache
         *
         * @return BackendInterface The backend used by this cache
         * @api
         */
        public function getBackend() {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        /**
         * Removes all cache entries of this cache.
         *
         * @api
         */
        public function flush() {}
        public function flushByTags(array $tags) {}
        public function flushByTag($tag) {}
        /**
         * Does garbage collection
         *
         * @api
         */
        public function collectGarbage() {}
        public function isValidEntryIdentifier($identifier) {}
        public function isValidTag($tag) {}
    }

    /**
     * A cache frontend for strings. Nothing else.
     *
     * This file is a backport from FLOW3
     * @api
     */
    class StringFrontend extends \typo3\cms\core\cache\frontend\abstractfrontend {
        public function set($entryIdentifier, $string, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function getByTag($tag) {}
    }


    /**
     * Contract for a Cache (frontend)
     * @api
     */
    interface FrontendInterface {
    const TAG_PACKAGE = '%PACKAGE%';
    const TAG_CLASS = '%CLASS%';
    const PATTERN_ENTRYIDENTIFIER = '/^[a-zA-Z0-9_%\\-&]{1,250}$/';
    const PATTERN_TAG = '/^[a-zA-Z0-9_%\\-&]{1,250}$/';
        /**
         * Returns this cache's identifier
         *
         * @return string The identifier for this cache
         * @api
         */
        function getIdentifier() ;
        /**
         * Returns the backend used by this cache
         *
         * @return \TYPO3\CMS\Core\Cache\Backend\BackendInterface The backend used by this cache
         */
        function getBackend() ;
        function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) ;
        function get($entryIdentifier) ;
        function has($entryIdentifier) ;
        function remove($entryIdentifier) ;
        /**
         * Removes all cache entries of this cache.
         */
        function flush() ;
        function flushByTag($tag) ;
        function flushByTags(array $tags) ;
        /**
         * Does garbage collection
         *
         * @api
         */
        function collectGarbage() ;
        function isValidEntryIdentifier($identifier) ;
        function isValidTag($tag) ;
    }

}

namespace TYPO3\CMS\Core\Cache\Backend {
    /**
     * A caching backend which stores cache entries by using Memcached.
     *
     * This backend uses the following types of Memcache keys:
     * - tag_xxx
     * xxx is tag name, value is array of associated identifiers identifier. This
     * is "forward" tag index. It is mainly used for obtaining content by tag
     * (get identifier by tag -> get content by identifier)
     * - ident_xxx
     * xxx is identifier, value is array of associated tags. This is "reverse" tag
     * index. It provides quick access for all tags associated with this identifier
     * and used when removing the identifier
     *
     * Each key is prepended with a prefix. By default prefix consists from two parts
     * separated by underscore character and ends in yet another underscore character:
     * - "TYPO3"
     * - Current site path obtained from the PATH_site constant
     * This prefix makes sure that keys from the different installations do not
     * conflict.
     *
     * Note: When using the Memcached backend to store values of more than ~1 MB,
     * the data will be split into chunks to make them fit into the memcached limits.
     *
     * This file is a backport from FLOW3 by Ingo Renner.
     * @api
     */
    class MemcachedBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\transientbackendinterface, \typo3\cms\core\cache\backend\taggablebackendinterface {
        const MAX_BUCKET_SIZE = 1048534;

        /**
         * Instance of the PHP Memcache class
         *
         * @var \Memcache|\Memcached
         */
        protected $memcache;
        /**
         * Used PECL module for memcached
         *
         * @var string
         */
        protected $usedPeclModule;
        /**
         * Array of Memcache server configurations
         *
         * @var array
         */
        protected $servers;
        /**
         * Indicates whether the memcache uses compression or not (requires zlib),
         * either 0 or \Memcached::OPT_COMPRESSION / MEMCACHE_COMPRESSED
         *
         * @var int
         */
        protected $flags;
        /**
         * A prefix to separate stored data from other data possibly stored in the memcache
         *
         * @var string
         */
        protected $identifierPrefix;

        public function __construct($context, array $options = [ ]) {}
        protected function setServers(array $servers) {}
        protected function setCompression($useCompression) {}
        /**
         * Getter for compression flag
         *
         * @return bool
         * @api
         */
        protected function getCompression() {}
        /**
         * Initializes the identifier prefix
         *
         * @throws Exception
         */
        public function initializeObject() {}
        public function setPeclModule($peclModule) {}
        public function setCache(FrontendInterface $cache) {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        protected function setInternal($entryIdentifier, $data, $expiration) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($tag) {}
        /**
         * Removes all cache entries of this cache.
         *
         * @throws Exception
         * @api
         */
        public function flush() {}
        public function flushByTag($tag) {}
        protected function addIdentifierToTags($entryIdentifier, array $tags) {}
        protected function removeIdentifierFromAllTags($entryIdentifier) {}
        protected function findTagsByIdentifier($identifier) {}
        /**
         * Does nothing, as memcached does GC itself
         *
         * @api
         */
        public function collectGarbage() {}
    }

    /**
     * A caching backend which stores cache entries by using Redis with phpredis
     * PHP module. Redis is a noSQL database with very good scaling characteristics
     * in proportion to the amount of entries and data size.
     *
     * @see http://code.google.com/p/redis/
     * @see http://github.com/owlient/phpredis
     * @api
     */
    class RedisBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\taggablebackendinterface {
        const TAG_IDENTIFIERS_PREFIX = 'tagIdents:';
        const IDENTIFIER_TAGS_PREFIX = 'identTags:';
        const IDENTIFIER_DATA_PREFIX = 'identData:';
        const FAKED_UNLIMITED_LIFETIME = 31536000;

        /**
         * Instance of the PHP redis class
         *
         * @var \Redis
         */
        protected $redis;
        /**
         * Indicates whether the server is connected
         *
         * @var bool
         */
        protected $connected;
        /**
         * Persistent connection
         *
         * @var bool
         */
        protected $persistentConnection;
        /**
         * Hostname / IP of the Redis server, defaults to 127.0.0.1.
         *
         * @var string
         */
        protected $hostname;
        /**
         * Port of the Redis server, defaults to 6379
         *
         * @var int
         */
        protected $port;
        /**
         * Number of selected database, defaults to 0
         *
         * @var int
         */
        protected $database;
        /**
         * Password for redis authentication
         *
         * @var string
         */
        protected $password;
        /**
         * Indicates whether data is compressed or not (requires php zlib)
         *
         * @var bool
         */
        protected $compression;
        /**
         * -1 to 9, indicates zlib compression level: -1 = default level 6, 0 = no compression, 9 maximum compression
         *
         * @var int
         */
        protected $compressionLevel;
        /**
         * limit in seconds (default is 0 meaning unlimited)
         *
         * @var int
         */
        protected $connectionTimeout;

        public function __construct($context, array $options = [ ]) {}
        /**
         * Initializes the redis backend
         *
         * @throws \TYPO3\CMS\Core\Cache\Exception if access to redis with password is denied or if database selection fails
         */
        public function initializeObject() {}
        public function setPersistentConnection($persistentConnection) {}
        public function setHostname($hostname) {}
        public function setPort($port) {}
        public function setDatabase($database) {}
        public function setPassword($password) {}
        public function setCompression($compression) {}
        public function setCompressionLevel($compressionLevel) {}
        public function setConnectionTimeout($connectionTimeout) {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($tag) {}
        /**
         * Removes all cache entries of this cache.
         *
         * Scales O(1) with number of cache entries
         *
         * @api
         */
        public function flush() {}
        public function flushByTag($tag) {}
        /**
         * With the current internal structure, only the identifier to data entries
         * have a redis internal lifetime. If an entry expires, attached
         * identifier to tags and tag to identifiers entries will be left over.
         * This methods finds those entries and cleans them up.
         *
         * Scales O(n*m) with number of cache entries (n) and number of tags (m)
         *
         * @api
         */
        public function collectGarbage() {}
        protected function removeIdentifierEntriesAndRelations(array $identifiers, array $tags) {}
        protected function canBeUsedInStringContext($variable) {}
    }

    /**
     * A caching backend which forgets everything immediately
     *
     * This file is a backport from FLOW3
     * @api
     */
    class NullBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\phpcapablebackendinterface, \typo3\cms\core\cache\backend\taggablebackendinterface {
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function setCompression($compression) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($tag) {}
        /**
         * Does nothing
         *
         * @api
         */
        public function flush() {}
        public function flushByTag($tag) {}
        /**
         * Does nothing
         *
         * @api
         */
        public function collectGarbage() {}
        public function requireOnce($identifier) {}
    }

    /**
     * A caching backend which stores cache entries in files, but does not support or
     * care about expiry times and tags.
     *
     * @api
     */
    class SimpleFileBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\phpcapablebackendinterface {
        const EXPIRYTIME_LENGTH = 14;
        const DATASIZE_DIGITS = 10;
        const SEPARATOR = '^';
        const EXPIRYTIME_FORMAT = 'YmdHis';

        /**
         * Directory where the files are stored
         *
         * @var string
         */
        protected $cacheDirectory;
        /**
         * TYPO3 v4 note: This variable is only available in v5
         * Temporary path to cache directory before setCache() was called. It is
         * set by setCacheDirectory() and used in setCache() method which calls
         * the directory creation if needed. The variable is not used afterwards,
         * the final cache directory path is stored in $this->cacheDirectory then.
         *
         * @var string Temporary path to cache directory
         */
        protected $temporaryCacheDirectory;
        /**
         * A file extension to use for each cache entry.
         *
         * @var string
         */
        protected $cacheEntryFileExtension;
        /**
         * @var array
         */
        protected $cacheEntryIdentifiers;
        /**
         * @var bool
         */
        protected $frozen;

        public function setCache(\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache) {}
        public function setCacheDirectory($cacheDirectory) {}
        protected function createFinalCacheDirectory($finalCacheDirectory) {}
        /**
         * Returns the directory where the cache files are stored
         *
         * @return string Full path of the cache directory
         * @api
         */
        public function getCacheDirectory() {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        /**
         * Removes all cache entries of this cache.
         *
         * @api
         */
        public function flush() {}
        protected function isCacheFileExpired($cacheEntryPathAndFilename) {}
        /**
         * Not necessary
         *
         * @api
         */
        public function collectGarbage() {}
        protected function findCacheFilesByIdentifier($entryIdentifier) {}
        public function requireOnce($entryIdentifier) {}
    }

    /**
     * A caching backend which stores cache entries by using wincache.
     *
     * This backend uses the following types of keys:
     * - tag_xxx
     * xxx is tag name, value is array of associated identifiers identifier. This
     * is "forward" tag index. It is mainly used for obtaining content by tag
     * (get identifier by tag -> get content by identifier)
     * - ident_xxx
     * xxx is identifier, value is array of associated tags. This is "reverse" tag
     * index. It provides quick access for all tags associated with this identifier
     * and used when removing the identifier
     *
     * Each key is prepended with a prefix. By default prefix consists from two parts
     * separated by underscore character and ends in yet another underscore character:
     * - "TYPO3"
     * - MD5 of script path and filename and SAPI name
     * This prefix makes sure that keys from the different installations do not
     * conflict.
     */
    class WincacheBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\taggablebackendinterface {
        /**
         * A prefix to separate stored data from other data possible stored in the wincache
         *
         * @var string
         */
        protected $identifierPrefix;

        public function __construct($context, array $options = [ ]) {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($tag) {}
        protected function findTagsByIdentifier($identifier) {}
        /**
         * Removes all cache entries of this cache
         *
         * @throws \TYPO3\CMS\Core\Cache\Exception
         */
        public function flush() {}
        public function flushByTag($tag) {}
        protected function addIdentifierToTags($entryIdentifier, array $tags) {}
        protected function removeIdentifierFromAllTags($entryIdentifier) {}
        /**
         * Does nothing, as wincache does GC itself
         */
        public function collectGarbage() {}
    }

    /**
     * A caching backend which stores cache entries by using APCu.
     *
     * This backend uses the following types of keys:
     * - tag_xxx
     * xxx is tag name, value is array of associated identifiers identifier. This
     * is "forward" tag index. It is mainly used for obtaining content by tag
     * (get identifier by tag -> get content by identifier)
     * - ident_xxx
     * xxx is identifier, value is array of associated tags. This is "reverse" tag
     * index. It provides quick access for all tags associated with this identifier
     * and used when removing the identifier
     *
     * Each key is prepended with a prefix. By default prefix consists from two parts
     * separated by underscore character and ends in yet another underscore character:
     * - "TYPO3"
     * - MD5 of path to TYPO3 and user running TYPO3
     * This prefix makes sure that keys from the different installations do not
     * conflict.
     *
     * @api
     */
    class ApcuBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\taggablebackendinterface {
        /**
         * A prefix to separate stored data from other data possible stored in the APC
         *
         * @var string
         */
        protected $identifierPrefix;

        protected function setIdentifierPrefix($identifierPrefix) {}
        /**
         * Retrieves the cache identifier prefix.
         *
         * @return string
         */
        protected function getIdentifierPrefix() {}
        public function __construct($context, array $options = [ ]) {}
        public function setCache(\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache) {}
        /**
         * Returns the current user data with posix_getpwuid or a default structure when
         * posix_getpwuid is not available.
         *
         * @return array
         */
        protected function getCurrentUserData() {}
        /**
         * Returns the PATH_site constant.
         *
         * @return string
         */
        protected function getPathSite() {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($tag) {}
        protected function findTagsByIdentifier($identifier) {}
        /**
         * Removes all cache entries of this cache.
         *
         * @throws Cache\Exception
         * @api
         */
        public function flush() {}
        public function flushByTag($tag) {}
        protected function addIdentifierToTags($entryIdentifier, array $tags) {}
        protected function removeIdentifierFromAllTags($entryIdentifier) {}
        /**
         * Does nothing, as APCu does GC itself
         */
        public function collectGarbage() {}
    }

    /**
     * A PDO database cache backend
     * @api
     */
    class PdoBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\taggablebackendinterface {
        /**
         * @var string
         */
        protected $dataSourceName;
        /**
         * @var string
         */
        protected $username;
        /**
         * @var string
         */
        protected $password;
        /**
         * @var \PDO
         */
        protected $databaseHandle;
        /**
         * @var string
         */
        protected $pdoDriver;

        public function setDataSourceName($DSN) {}
        public function setUsername($username) {}
        public function setPassword($password) {}
        /**
         * Initialize the cache backend.
         */
        public function initializeObject() {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        /**
         * Removes all cache entries of this cache.
         *
         * @api
         */
        public function flush() {}
        public function flushByTag($tag) {}
        public function findIdentifiersByTag($tag) {}
        /**
         * Does garbage collection
         *
         * @api
         */
        public function collectGarbage() {}
        /**
         * Returns an SQL statement that evaluates to TRUE if the entry is not expired.
         *
         * @return string
         */
        protected function getNotExpiredStatement() {}
        /**
         * Connect to the database
         *
         * @throws \RuntimeException if something goes wrong
         */
        protected function connect() {}
        /**
         * Creates the tables needed for the cache backend.
         *
         * @throws \RuntimeException if something goes wrong
         */
        protected function createCacheTables() {}
    }

    /**
     * A caching backend which stores cache entries by using APC.
     *
     * This backend uses the following types of keys:
     * - tag_xxx
     * xxx is tag name, value is array of associated identifiers identifier. This
     * is "forward" tag index. It is mainly used for obtaining content by tag
     * (get identifier by tag -> get content by identifier)
     * - ident_xxx
     * xxx is identifier, value is array of associated tags. This is "reverse" tag
     * index. It provides quick access for all tags associated with this identifier
     * and used when removing the identifier
     *
     * Each key is prepended with a prefix. By default prefix consists from two parts
     * separated by underscore character and ends in yet another underscore character:
     * - "TYPO3"
     * - MD5 of path to TYPO3 and user running TYPO3
     * This prefix makes sure that keys from the different installations do not
     * conflict.
     *
     * This file is a backport from FLOW3
     * @api
     */
    class ApcBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\taggablebackendinterface {
        /**
         * A prefix to separate stored data from other data possible stored in the APC
         *
         * @var string
         */
        protected $identifierPrefix;

        protected function setIdentifierPrefix($identifierPrefix) {}
        /**
         * Retrieves the cache identifier prefix.
         *
         * @return string
         */
        protected function getIdentifierPrefix() {}
        public function __construct($context, array $options = [ ]) {}
        public function setCache(\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache) {}
        /**
         * Returns the current user data with posix_getpwuid or a default structure when
         * posix_getpwuid is not available.
         *
         * @return array
         */
        protected function getCurrentUserData() {}
        /**
         * Returns the PATH_site constant.
         *
         * @return string
         */
        protected function getPathSite() {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($tag) {}
        protected function findTagsByIdentifier($identifier) {}
        /**
         * Removes all cache entries of this cache.
         *
         * @throws \TYPO3\CMS\Core\Cache\Exception
         * @api
         */
        public function flush() {}
        public function flushByTag($tag) {}
        protected function addIdentifierToTags($entryIdentifier, array $tags) {}
        protected function removeIdentifierFromAllTags($entryIdentifier) {}
        /**
         * Does nothing, as APC does GC itself
         */
        public function collectGarbage() {}
    }

    /**
     * An abstract caching backend
     *
     * This file is a backport from FLOW3
     * @api
     */
    abstract class AbstractBackend implements \psr\log\loggerawareinterface, \typo3\cms\core\cache\backend\backendinterface {
    use \psr\log\loggerawaretrait;

        const DATETIME_EXPIRYTIME_UNLIMITED = '9999-12-31T23:59:59+0000';
        const UNLIMITED_LIFETIME = 0;

        /**
         * Reference to the cache which uses this backend
         *
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected $cache;
        /**
         * @var string
         */
        protected $cacheIdentifier;
        /**
         * The current application context
         *
         * TYPO3 v4 note: This variable is currently unused in v4 context and set to
         * "production" always. It is only kept to stay in sync with
         * FLOW3 code.
         *
         * @var string
         */
        protected $context;
        /**
         * Default lifetime of a cache entry in seconds
         *
         * @var int
         */
        protected $defaultLifetime;

        public function __construct($context, array $options = [ ]) {}
        public function setCache(\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache) {}
        public function setDefaultLifetime($defaultLifetime) {}
        public function flushByTags(array $tags) {}
        protected function calculateExpiryTime($lifetime = null) {}
    }

    /**
     * A caching backend which stores cache entries in database tables
     * @api
     */
    class Typo3DatabaseBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\taggablebackendinterface {
        const FAKED_UNLIMITED_EXPIRE = 2145909600;

        /**
         * @var string Name of the cache data table
         */
        protected $cacheTable;
        /**
         * @var string Name of the cache tags table
         */
        protected $tagsTable;
        /**
         * @var bool Indicates whether data is compressed or not (requires php zlib)
         */
        protected $compression;
        /**
         * @var int -1 to 9, indicates zlib compression level: -1 = default level 6, 0 = no compression, 9 maximum compression
         */
        protected $compressionLevel;
        /**
         * @var int Maximum lifetime to stay with expire field below FAKED_UNLIMITED_LIFETIME
         */
        protected $maximumLifetime;

        public function setCache(FrontendInterface $cache) {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($tag) {}
        /**
         * Removes all cache entries of this cache.
         */
        public function flush() {}
        public function flushByTags(array $tags) {}
/** @var Connection $connection */
        public function flushByTag(/** @var Connection $connection */
$tag) {}
        /**
         * Does garbage collection
         */
        public function collectGarbage() {}
        /**
         * Returns the table where the cache entries are stored.
         *
         * @return string The cache table.
         */
        public function getCacheTable() {}
        /**
         * Gets the table where cache tags are stored.
         *
         * @return string Name of the table storing tags
         */
        public function getTagsTable() {}
        public function setCompression($compression) {}
        public function setCompressionLevel($compressionLevel) {}
        protected function isConnectionMysql(Connection $connection) : bool {}
        /**
         * Check if required frontend instance exists
         *
         * @throws Exception If there is no frontend instance in $this->cache
         */
        protected function throwExceptionIfFrontendDoesNotExist() {}
        /**
         * Calculate needed table definitions for this cache.
         * This helper method is used by install tool and extension manager
         * and is not part of the public API!
         *
         * @return string SQL of table definitions
         */
        public function getTableDefinitions() {}
    }

    /**
     * A caching backend which stores cache entries during one script run.
     *
     * This file is a backport from FLOW3
     * @api
     */
    class TransientMemoryBackend extends \typo3\cms\core\cache\backend\abstractbackend implements \typo3\cms\core\cache\backend\taggablebackendinterface, \typo3\cms\core\cache\backend\transientbackendinterface {
        /**
         * @var array
         */
        protected $entries;
        /**
         * @var array
         */
        protected $tagsAndEntries;

        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($tag) {}
        /**
         * Removes all cache entries of this cache.
         *
         * @api
         */
        public function flush() {}
        public function flushByTag($tag) {}
        /**
         * Does nothing
         *
         * @api
         */
        public function collectGarbage() {}
    }

    /**
     * A caching backend which stores cache entries in files
     *
     * This file is a backport from FLOW3
     * @api
     */
    class FileBackend extends \typo3\cms\core\cache\backend\simplefilebackend implements \typo3\cms\core\cache\backend\taggablebackendinterface, \typo3\cms\core\cache\backend\freezablebackendinterface, \typo3\cms\core\cache\backend\phpcapablebackendinterface {
        const SEPARATOR = '^';
        const EXPIRYTIME_FORMAT = 'YmdHis';
        const DATASIZE_DIGITS = 10;
        const EXPIRYTIME_LENGTH = 14;

        /**
         * A file extension to use for each cache entry.
         *
         * @var string
         */
        protected $cacheEntryFileExtension;
        /**
         * @var array
         */
        protected $cacheEntryIdentifiers;
        /**
         * @var bool
         */
        protected $frozen;

        /**
         * Freezes this cache backend.
         *
         * All data in a frozen backend remains unchanged and methods which try to add
         * or modify data result in an exception thrown. Possible expiry times of
         * individual cache entries are ignored.
         *
         * On the positive side, a frozen cache backend is much faster on read access.
         * A frozen backend can only be thawed by calling the flush() method.
         *
         * @throws \RuntimeException
         */
        public function freeze() {}
        /**
         * Tells if this backend is frozen.
         *
         * @return bool
         */
        public function isFrozen() {}
        public function setCache(\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache) {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function findIdentifiersByTag($searchedTag) {}
        /**
         * Removes all cache entries of this cache and sets the frozen flag to FALSE.
         *
         * @api
         */
        public function flush() {}
        public function flushByTag($tag) {}
        protected function isCacheFileExpired($cacheEntryPathAndFilename) {}
        /**
         * Does garbage collection
         *
         * @api
         */
        public function collectGarbage() {}
        protected function findCacheFilesByIdentifier($entryIdentifier) {}
        public function requireOnce($entryIdentifier) {}
    }


    /**
     * A contract for a cache backend which is capable of storing, retrieving and
     * including PHP source code.
     *
     * @api
     */
    interface PhpCapableBackendInterface extends \typo3\cms\core\cache\backend\backendinterface {
        function requireOnce($entryIdentifier) ;
    }

    /**
     * A contract for a cache backends which store variables in volatile
     * memory and as such support receiving any variable type to store.
     *
     * Note: respect for this contract is up to each individual frontend.
     * The contract can be respected for a small performance boost, but
     * the result is marginal except for cases with huge serialized
     * data sets.
     *
     * Respected by the VariableFrontend which checks if the backend
     * has this interface, in which case it allows the backend to store
     * the value directly without serializing it to a string, and does
     * not attempt to unserialize the string on every get() request.
     *
     * @api
     */
    interface TransientBackendInterface extends \typo3\cms\core\cache\backend\backendinterface {}

    /**
     * A contract for a cache backend which supports tagging.
     *
     * @api
     */
    interface TaggableBackendInterface extends \typo3\cms\core\cache\backend\backendinterface {
        function flushByTag($tag) ;
        function flushByTags(array $tags) ;
        function findIdentifiersByTag($tag) ;
    }

    /**
     * A contract for a cache backend which can be frozen.
     *
     * @api
     */
    interface FreezableBackendInterface extends \typo3\cms\core\cache\backend\backendinterface {
        /**
         * Freezes this cache backend.
         *
         * All data in a frozen backend remains unchanged and methods which try to add
         * or modify data result in an exception thrown. Possible expiry times of
         * individual cache entries are ignored.
         *
         * On the positive side, a frozen cache backend is much faster on read access.
         * A frozen backend can only be thawn by calling the flush() method.
         */
        function freeze() ;
        /**
         * Tells if this backend is frozen.
         *
         * @return bool
         */
        function isFrozen() ;
    }

    /**
     * A contract for a Cache Backend
     * @api
     */
    interface BackendInterface {
        function setCache(\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache) ;
        function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) ;
        function get($entryIdentifier) ;
        function has($entryIdentifier) ;
        function remove($entryIdentifier) ;
        /**
         * Removes all cache entries of this cache.
         *
         * @api
         */
        function flush() ;
        /**
         * Does garbage collection
         *
         * @api
         */
        function collectGarbage() ;
    }

}

namespace TYPO3\CMS\Core\Cache\Exception {
    /**
     * A "Duplicate Identifier" exception
     *
     * This file is a backport from FLOW3
     *
     * @api
     */
    class DuplicateIdentifierException extends \typo3\cms\core\cache\exception {}

    /**
     * A "No Such Cache" exception
     *
     * This file is a backport from FLOW3
     *
     * @api
     */
    class NoSuchCacheException extends \typo3\cms\core\cache\exception {}

    /**
     * An "Invalid Backend" exception
     *
     * This file is a backport from FLOW3
     *
     * @api
     */
    class InvalidBackendException extends \typo3\cms\core\cache\exception {}

    /**
     * An "Invalid Cache" exception
     *
     * This file is a backport from FLOW3
     *
     * @api
     */
    class InvalidCacheException extends \typo3\cms\core\cache\exception {}

    /**
     * A "No Such Cache Group" exception
     *
     * @api
     */
    class NoSuchCacheGroupException extends \typo3\cms\core\cache\exception {}

    /**
     * An "Invalid Data" exception
     *
     * This file is a backport from FLOW3
     *
     * @api
     */
    class InvalidDataException extends \typo3\cms\core\cache\exception {}

}

namespace TYPO3\CMS\Core\Category {
    /**
     * Class to register category configurations.
     */
    class CategoryRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $registry;
        /**
         * @var array
         */
        protected $extensions;
        /**
         * @var array
         */
        protected $addedCategoryTabs;
        /**
         * @var string
         */
        protected $template;

        /**
         * Returns a class instance
         *
         * @return CategoryRegistry
         */
        public static function getInstance() {}
        /**
         * Creates this object.
         */
        public function __construct() {}
        public function add($extensionKey, $tableName, $fieldName = 'categories', array $options = [ ], $override = false) {}
        /**
         * Gets all extension keys that registered a category configuration.
         *
         * @return array
         */
        public function getExtensionKeys() {}
        /**
         * Gets all categorized tables
         *
         * @return array
         */
        public function getCategorizedTables() {}
        public function getCategoryFieldsForTable(array $configuration) {}
        public function isRegistered($tableName, $fieldName = 'categories') {}
        /**
         * Generates tables definitions for all registered tables.
         *
         * @return string
         */
        public function getDatabaseTableDefinitions() {}
        public function getDatabaseTableDefinition($extensionKey) {}
        /**
         * Apply TCA to all registered tables
         *
         * @internal
         */
        public function applyTcaForPreRegisteredTables() {}
        protected function applyTcaForTableAndField($tableName, $fieldName) {}
        /**
         * Add default categorized tables to the registry
         */
        protected function registerDefaultCategorizedTables() {}
        protected function addToAllTCAtypes($tableName, $fieldName, array $options) {}
        protected function addCategoryTab($tableName, $fieldName) {}
        protected function addTcaColumn($tableName, $fieldName, array $options) {}
        public static function getTcaFieldConfiguration($tableName, $fieldName = 'categories', array $fieldConfigurationOverride = [ ]) {}
        public function addCategoryDatabaseSchemaToTablesDefinition(array $sqlString) {}
        public function addExtensionCategoryDatabaseSchemaToTablesDefinition(array $sqlString, $extensionKey) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        protected function remove($tableName, $fieldName) {}
    }

}

namespace TYPO3\CMS\Core\Category\Collection {
    /**
     * Category Collection to handle records attached to a category
     */
    class CategoryCollection extends \typo3\cms\core\collection\abstractrecordcollection implements \typo3\cms\core\collection\editablecollectioninterface {
        /**
         * The table name collections are stored to
         *
         * @var string
         */
        static protected $storageTableName;
        /**
         * Name of the categories-relation field (used in the MM_match_fields/fieldname property of the TCA)
         *
         * @var string
         */
        protected $relationFieldName;

        public function __construct($tableName = null, $fieldName = null) {}
/** @var $collection CategoryCollection */
        public static function create(/** @var $collection CategoryCollection */
array $collectionRecord, /** @var $collection CategoryCollection */
$fillItems = false) {}
        public static function load($id, $fillItems = false, $tableName = '', $fieldName = '') {}
        /**
         * Selects the collected records in this collection, by
         * looking up the MM relations of this record to the
         * table name defined in the local field 'table_name'.
         *
         * @return QueryBuilder
         */
        protected function getCollectedRecordsQueryBuilder() {}
        /**
         * Gets the collected records in this collection, by
         * using <getCollectedRecordsQueryBuilder>.
         *
         * @return array
         */
        protected function getCollectedRecords() {}
        /**
         * Populates the content-entries of the storage
         * Queries the underlying storage for entries of the collection
         * and adds them to the collection data.
         * If the content entries of the storage had not been loaded on creation
         * ($fillItems = false) this function is to be used for loading the contents
         * afterwards.
         */
        public function loadContents() {}
        /**
         * Returns an array of the persistable properties and contents
         * which are processable by DataHandler.
         * for internal usage in persist only.
         *
         * @return array
         */
        protected function getPersistableDataArray() {}
        public function add($data) {}
        public function addAll(CollectionInterface $other) {}
        public function remove($data) {}
        /**
         * Removes all entries from the collection
         * collection will be empty afterwards
         */
        public function removeAll() {}
        /**
         * Gets the current available items.
         *
         * @return array
         */
        public function getItems() {}
        public function setRelationFieldName($field) {}
        /**
         * Gets the name of the categories relation field
         *
         * @return string
         */
        public function getRelationFieldName() {}
        /**
         * Getter for the storage table name
         *
         * @return string
         */
        public static function getStorageTableName() {}
        /**
         * Getter for the storage items field
         *
         * @return string
         */
        public static function getStorageItemsField() {}
    }

}

namespace TYPO3\CMS\Core\Mail {
    /**
     * Adapter for Swift_Mailer to be used by TYPO3 extensions.
     *
     * This will use the setting in TYPO3_CONF_VARS to choose the correct transport
     * for it to work out-of-the-box.
     */
    class Mailer extends \swift_mailer {
        /**
         * @var \Swift_Transport
         */
        protected $transport;
        /**
         * @var array
         */
        protected $mailSettings;

        public function __construct(\Swift_Transport $transport = null) {}
        /**
         * Prepares a transport using the TYPO3_CONF_VARS configuration
         *
         * Used options:
         * $TYPO3_CONF_VARS['MAIL']['transport'] = 'smtp' | 'sendmail' | 'mail' | 'mbox'
         *
         * $TYPO3_CONF_VARS['MAIL']['transport_smtp_server'] = 'smtp.example.org';
         * $TYPO3_CONF_VARS['MAIL']['transport_smtp_port'] = '25';
         * $TYPO3_CONF_VARS['MAIL']['transport_smtp_encrypt'] = FALSE; # requires openssl in PHP
         * $TYPO3_CONF_VARS['MAIL']['transport_smtp_username'] = 'username';
         * $TYPO3_CONF_VARS['MAIL']['transport_smtp_password'] = 'password';
         *
         * $TYPO3_CONF_VARS['MAIL']['transport_sendmail_command'] = '/usr/sbin/sendmail -bs'
         *
         * @throws \TYPO3\CMS\Core\Exception
         * @throws \RuntimeException
         */
        private function initializeTransport() {}
        public function injectMailSettings(array $mailSettings = null) {}
        /**
         * Get the object manager
         *
         * @return \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected function getObjectManager() {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        /**
         * Emits a signal after mailer initialization
         */
        protected function emitPostInitializeMailerSignal() {}
    }

    /**
     * Adapter for Swift_Mailer to be used by TYPO3 extensions
     */
    class MailMessage extends \swift_message {
        /**
         * @var \TYPO3\CMS\Core\Mail\Mailer
         */
        protected $mailer;
        /**
         * @var string This will be added as X-Mailer to all outgoing mails
         */
        protected $mailerHeader;
        /**
         * TRUE if the message has been sent.
         *
         * @var bool
         */
        protected $sent;
        /**
         * Holds the failed recipients after the message has been sent
         *
         * @var array
         */
        protected $failedRecipients;

        /**
         */
        private function initializeMailer() {}
        /**
         * Sends the message.
         *
         * @return int the number of recipients who were accepted for delivery
         */
        public function send() {}
        /**
         * Checks whether the message has been sent.
         *
         * @return bool
         */
        public function isSent() {}
        /**
         * Returns the recipients for which the mail was not accepted for delivery.
         *
         * @return array the recipients who were not accepted for delivery
         */
        public function getFailedRecipients() {}
        public function setReturnPath($address) {}
        public function setSender($address, $name = null) {}
        public function setFrom($addresses, $name = null) {}
        public function setReplyTo($addresses, $name = null) {}
        public function setTo($addresses, $name = null) {}
        public function setCc($addresses, $name = null) {}
        public function setBcc($addresses, $name = null) {}
        public function setReadReceiptTo($addresses) {}
        protected function idnaEncodeAddresses($addresses) {}
        protected function idnaEncodeAddress($email) {}
    }

    /**
     * RFC 822 Email address list validation Utility
     *
     * What is it?
     *
     * This class will take an address string, and parse it into it's consituent
     * parts, be that either addresses, groups, or combinations. Nested groups
     * are not supported. The structure it returns is pretty straight forward,
     * and is similar to that provided by the imap_rfc822_parse_adrlist(). Use
     * print_r() to view the structure.
     *
     * How do I use it?
     *
     * $address_string = 'My Group: "Richard" <richard@localhost> (A comment), ted@example.com (Ted Bloggs), Barney;';
     * $structure = Mail_RFC822::parseAddressList($address_string, 'example.com', TRUE)
     * print_r($structure);
     * @version $Revision: 294749 $
     * @license BSD
     */
    class Rfc822AddressesParser {
        /**
         * The address being parsed by the RFC822 object.
         *
         * @var string $address
         */
        private $address;
        /**
         * The default domain to use for unqualified addresses.
         *
         * @var string $default_domain
         */
        private $default_domain;
        /**
         * Whether or not to validate atoms for non-ascii characters.
         *
         * @var bool $validate
         */
        private $validate;
        /**
         * The array of raw addresses built up as we parse.
         *
         * @var array $addresses
         */
        private $addresses;
        /**
         * The final array of parsed address information that we build up.
         *
         * @var array $structure
         */
        private $structure;
        /**
         * The current error message, if any.
         *
         * @var string $error
         */
        private $error;
        /**
         * An internal counter/pointer.
         *
         * @var int $index
         */
        private $index;
        /**
         * The number of groups that have been found in the address list.
         *
         * @var int $num_groups
         * @access public
         */
        private $num_groups;
        /**
         * A limit after which processing stops
         *
         * @var int $limit
         */
        private $limit;

        public function __construct($address = null, $default_domain = null, $validate = null, $limit = null) {}
        public function parseAddressList($address = null, $default_domain = null, $validate = null, $limit = null) {}
        protected function _splitAddresses($address) {}
        protected function _isGroup($address) {}
        protected function _splitCheck($parts, $char) {}
        protected function _hasUnclosedQuotes($string) {}
        protected function _hasUnclosedBrackets($string, $chars) {}
        protected function _hasUnclosedBracketsSub($string, $num, $char) {}
        protected function _validateAddress($address) {}
        protected function _validatePhrase($phrase) {}
        protected function _validateAtom($atom) {}
        protected function _validateQuotedString($qstring) {}
        protected function validateMailbox($mailbox) {}
        protected function _validateRouteAddr($route_addr) {}
        protected function _validateRoute($route) {}
        protected function _validateDomain($domain) {}
        protected function _validateSubdomain($subdomain) {}
        protected function _validateDliteral($dliteral) {}
        protected function _validateAddrSpec($addr_spec) {}
        protected function _validateLocalPart($local_part) {}
    }

    /**
     * Adapter for Swift_Mailer to be used by TYPO3 extensions.
     *
     * This will use the setting in TYPO3_CONF_VARS to choose the correct transport
     * for it to work out-of-the-box.
     */
    class MboxTransport implements \swift_transport {
        /**
         * @var string The file to write our mails into
         */
        private $debugFile;

        public function __construct($debugFile) {}
        /**
         * Not used.
         */
        public function isStarted() {}
        /**
         * Not used.
         */
        public function start() {}
        /**
         * Not used.
         */
        public function stop() {}
        public function send(\Swift_Mime_Message $message, $failedRecipients = null) {}
        private function getReversePath(\Swift_Mime_Message $message) {}
        public function registerPlugin(\Swift_Events_EventListener $plugin) {}
    }


    /**
     * Mailer Adapter interface
     */
    interface MailerAdapterInterface {
        function mail($to, $subject, $messageBody, $additionalHeaders = null, $additionalParameters = null, $fakeSending = false) ;
    }

}

namespace TYPO3\CMS\Core\Encoder {
    /**
     * Adopted from OWASP Enterprise Security API (ESAPI) reference implementation for the JavaScript Codec.
     * Original Author: Mike Boberski
     *
     * This class provides encoding for user input that is intended to be used in a JavaScript context.
     * It encodes all characters except alphanumericals and the immune characters to a hex representation.
     * @copyright 2009-2010 The OWASP Foundation
     * @link http://www.owasp.org/index.php/ESAPI
     */
    class JavaScriptEncoder implements \typo3\cms\core\singletoninterface {
        /**
         * A map where the keys are ordinal values of non-alphanumeric single-byte
         * characters and the values are hexadecimal equivalents as strings.
         *
         * @var array
         */
        protected $hexMatrix;
        /**
         * Characters that are immune (not dangerous) in the JavaScript context
         *
         * @var array
         */
        protected $immuneCharacters;
        /**
         * TYPO3 charset encoding object
         *
         * @var \TYPO3\CMS\Core\Charset\CharsetConverter
         */
        protected $charsetConversion;

        /**
         * Populates the $hex map of non-alphanumeric single-byte characters.
         *
         * Alphanumerical character are set to NULL in the matrix.
         */
        public function __construct() {}
        public function encode($input) {}
        protected function encodeCharacter($character) {}
        protected function isImmuneCharacter($character) {}
        protected function getHexForNonAlphanumeric($ordinalValue) {}
    }

}

namespace TYPO3\CMS\Core\Locking {
    /**
     * flock() locking
     */
    class FileLockStrategy implements \typo3\cms\core\locking\lockingstrategyinterface {
        const FILE_LOCK_FOLDER = 'typo3temp/var/locks/';

        /**
         * @var resource File pointer if using flock method
         */
        protected $filePointer;
        /**
         * @var string File used for locking
         */
        protected $filePath;
        /**
         * @var bool True if lock is acquired
         */
        protected $isAcquired;

        public function __construct($subject) {}
        /**
         * Destructor:
         * Releases lock automatically when instance is destroyed and release resources
         */
        public function __destruct() {}
        public function acquire($mode = self::LOCK_CAPABILITY_EXCLUSIVE) {}
        /**
         * Release the lock
         *
         * @return bool Returns TRUE on success or FALSE on failure
         */
        public function release() {}
        /**
         * Get status of this lock
         *
         * @return bool Returns TRUE if lock is acquired by this locker, FALSE otherwise
         */
        public function isAcquired() {}
        /**
         * @return int Returns a priority for the method. 0 to 100, 100 is highest
         */
        public static function getPriority() {}
        /**
         * @return int LOCK_CAPABILITY_* elements combined with bit-wise OR
         */
        public static function getCapabilities() {}
        /**
         * Destroys the resource associated with the lock
         */
        public function destroy() {}
    }

    /**
     * Simple file locking
     */
    class SimpleLockStrategy implements \typo3\cms\core\locking\lockingstrategyinterface {
        const FILE_LOCK_FOLDER = 'typo3temp/var/locks/';

        /**
         * @var string File path used for this lock
         */
        protected $filePath;
        /**
         * @var bool True if lock is acquired
         */
        protected $isAcquired;
        /**
         * @var int Number of times a locked resource is tried to be acquired. Only used in manual locks method "simple".
         */
        protected $loops;
        /**
         * @var int Milliseconds after lock acquire is retried. $loops * $step results in the maximum delay of a lock. Only used in manual lock method "simple".
         */
        protected $step;

        public function __construct($subject) {}
        public function init($loops = 0, $step = 0) {}
        /**
         * Destructor:
         * Releases lock automatically when instance is destroyed and release resources
         */
        public function __destruct() {}
        /**
         * Release the lock
         *
         * @return bool Returns TRUE on success or FALSE on failure
         */
        public function release() {}
        /**
         * Get status of this lock
         *
         * @return bool Returns TRUE if lock is acquired by this locker, FALSE otherwise
         */
        public function isAcquired() {}
        /**
         * @return int LOCK_CAPABILITY_* elements combined with bit-wise OR
         */
        public static function getCapabilities() {}
        public function acquire($mode = self::LOCK_CAPABILITY_EXCLUSIVE) {}
        /**
         * @return int Returns a priority for the method. 0 to 100, 100 is highest
         */
        public static function getPriority() {}
        /**
         * Destroys the resource associated with the lock
         */
        public function destroy() {}
    }

    /**
     * Semaphore locking
     */
    class SemaphoreLockStrategy implements \typo3\cms\core\locking\lockingstrategyinterface {
        const FILE_LOCK_FOLDER = 'typo3temp/var/locks/';

        /**
         * @var mixed Identifier used for this lock
         */
        protected $id;
        /**
         * @var resource Semaphore Resource used for this lock
         */
        protected $resource;
        /**
         * @var string
         */
        protected $filePath;
        /**
         * @var bool TRUE if lock is acquired
         */
        protected $isAcquired;

        public function __construct($subject) {}
        /**
         * Destructor
         */
        public function __destruct() {}
        /**
         * Release the lock
         *
         * @return bool Returns TRUE on success or FALSE on failure
         */
        public function release() {}
        /**
         * Get status of this lock
         *
         * @return bool Returns TRUE if lock is acquired by this locker, FALSE otherwise
         */
        public function isAcquired() {}
        /**
         * @return int LOCK_CAPABILITY_* elements combined with bit-wise OR
         */
        public static function getCapabilities() {}
        public function acquire($mode = self::LOCK_CAPABILITY_EXCLUSIVE) {}
        /**
         * @return int Returns a priority for the method. 0 to 100, 100 is highest
         */
        public static function getPriority() {}
        /**
         * Destroys the resource associated with the lock
         */
        public function destroy() {}
    }

    /**
     * A locking exception
     */
    class Exception extends \typo3\cms\core\exception {}

    /**
     * Factory class to retrieve a locking method
     */
    class LockFactory implements \typo3\cms\core\singletoninterface {
        /**
         * @var bool[]
         */
        protected $lockingStrategy;

        public function addLockingStrategy($className) {}
        public function removeLockingStrategy($className) {}
/** @var LockingStrategyInterface $method */
        public function createLocker(/** @var LockingStrategyInterface $method */
$id, /** @var LockingStrategyInterface $method */
$capabilities = LockingStrategyInterface::LOCK_CAPABILITY_EXCLUSIVE) {}
    }


    /**
     * Interface for locking methods
     */
    interface LockingStrategyInterface {
    const LOCK_CAPABILITY_EXCLUSIVE = 1;
    const LOCK_CAPABILITY_NOBLOCK = 4;
    const LOCK_CAPABILITY_SHARED = 2;
        /**
         * @return int LOCK_CAPABILITY_* elements combined with bit-wise OR
         */
        static function getCapabilities() ;
        /**
         * @return int Returns a priority for the method. 0 to 100, 100 is highest
         */
        static function getPriority() ;
        function __construct($subject) ;
        function acquire($mode = self::LOCK_CAPABILITY_EXCLUSIVE) ;
        /**
         * Release the lock
         *
         * @return bool Returns TRUE on success or FALSE on failure
         */
        function release() ;
        /**
         * Destroys the resource associated with the lock
         */
        function destroy() ;
        /**
         * Get status of this lock
         *
         * @return bool Returns TRUE if lock is acquired by this locker, FALSE otherwise
         */
        function isAcquired() ;
    }

}

namespace TYPO3\CMS\Core\Locking\Exception {
    /**
     * An exception indicating that acquiring a lock would have blocked
     */
    class LockAcquireWouldBlockException extends \typo3\cms\core\locking\exception\lockacquireexception {}

    /**
     * An exception indicating a lock acquisition error
     */
    class LockAcquireException extends \typo3\cms\core\locking\exception {}

    /**
     * An exception indicating a lock creation error
     */
    class LockCreateException extends \typo3\cms\core\locking\exception {}

}

namespace TYPO3\CMS\Core\ViewHelpers {
    /**
     * Displays icon for record
     */
    class IconForRecordViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * View helper returns HTML, thus we need to disable output escaping
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
/** @var IconFactory $iconFactory */
        public static function renderStatic(/** @var IconFactory $iconFactory */
array $arguments, /** @var IconFactory $iconFactory */
\Closure $renderChildrenClosure, /** @var IconFactory $iconFactory */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Displays icon identified by icon identifier
     */
    class IconViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * View helper returns HTML, thus we need to disable output escaping
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Core\Imaging {
    /**
     * Icon object, holds all information for one icon, identified by the "identifier" property.
     * Is available to render itself as string.
     */
    class Icon {
        const SIZE_SMALL = 'small';
        const SIZE_DEFAULT = 'default';
        const SIZE_OVERLAY = 'overlay';
        const SIZE_LARGE = 'large';

        /**
         * The identifier which the PHP code that calls the IconFactory hands over
         *
         * @var string
         */
        protected $identifier;
        /**
         * The identifier for a possible overlay icon
         *
         * @var Icon
         */
        protected $overlayIcon;
        /**
         * Contains the size string ("large", "small" or "default")
         *
         * @var string
         */
        protected $size;
        /**
         * Flag to indicate if the icon has a spinning animation
         *
         * @var bool
         */
        protected $spinning;
        /**
         * Contains the state information
         *
         * @var IconState
         */
        protected $state;
        /**
         * @var Dimension
         */
        protected $dimension;
        /**
         * @var string
         */
        protected $markup;
        /**
         * @var array
         */
        protected $alternativeMarkups;

        public function getMarkup($alternativeMarkupIdentifier = null) {}
        public function setMarkup($markup) {}
        public function getAlternativeMarkup($markupIdentifier) {}
        public function setAlternativeMarkup($markupIdentifier, $markup) {}
        /**
         * @return string
         */
        public function getIdentifier() {}
        public function setIdentifier($identifier) {}
        /**
         * @return Icon
         */
        public function getOverlayIcon() {}
        public function setOverlayIcon($overlayIcon) {}
        /**
         * @return string
         */
        public function getSize() {}
        public function setSize($size) {}
        /**
         * @return bool
         */
        public function isSpinning() {}
        public function setSpinning($spinning) {}
        /**
         * @return IconState
         */
        public function getState() {}
        public function setState(IconState $state) {}
        /**
         * @return Dimension
         */
        public function getDimension() {}
        public function render($alternativeMarkupIdentifier = null) {}
        /**
         * Render the icon as HTML code
         *
         * @return string
         */
        public function __toString() {}
        protected function wrappedIcon($alternativeMarkupIdentifier = null) {}
    }

    /**
     * The main factory class, which acts as the entrypoint for generating an Icon object which
     * is responsible for rendering an icon. Checks for the correct icon provider through the IconRegistry.
     */
    class IconFactory {
        /**
         * @var IconRegistry
         */
        protected $iconRegistry;
        /**
         * Mapping of record status to overlays.
         * $GLOBALS['TYPO3_CONF_VARS']['SYS']['IconFactory']['recordStatusMapping']
         *
         * @var string[]
         */
        protected $recordStatusMapping;
        /**
         * Order of priorities for overlays.
         * $GLOBALS['TYPO3_CONF_VARS']['SYS']['IconFactory']['overlayPriorities']
         *
         * @var string[]
         */
        protected $overlayPriorities;
        /**
         * Runtime icon cache
         *
         * @var array
         */
        static protected $iconCache;

        public function __construct(IconRegistry $iconRegistry = null) {}
        public function processAjaxRequest(ServerRequestInterface $request, ResponseInterface $response) {}
/** @var IconProviderInterface $iconProvider */
        public function getIcon(/** @var IconProviderInterface $iconProvider */
$identifier, /** @var IconProviderInterface $iconProvider */
$size = Icon::SIZE_DEFAULT, /** @var IconProviderInterface $iconProvider */
$overlayIdentifier = null, /** @var IconProviderInterface $iconProvider */
IconState $state = null) {}
        public function getIconForRecord($table, array $row, $size = Icon::SIZE_DEFAULT) {}
        public function mapRecordTypeToIconIdentifier($table, array $row) {}
        protected function mapRecordTypeToOverlayIdentifier($table, array $row) {}
        public function getIconForFileExtension($fileExtension, $size = Icon::SIZE_DEFAULT, $overlayIdentifier = null) {}
        public function getIconForResource(ResourceInterface $resource, $size = Icon::SIZE_DEFAULT, $overlayIdentifier = null, array $options = [ ]) {}
        protected function createIcon($identifier, $size, $overlayIdentifier = null, array $iconConfiguration = [ ]) {}
        protected function emitBuildIconForResourceSignal(ResourceInterface $resource, $size, array $options, $iconIdentifier, $overlayIdentifier) {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        /**
         * clear icon cache
         */
        public function clearIconCache() {}
    }

    /**
     * Dimension class holds width and height for an icon
     */
    class Dimension {
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $height;

        public function __construct($size = Icon::SIZE_DEFAULT) {}
        /**
         * Returns the width
         * @return int
         */
        public function getWidth() {}
        /**
         * Returns the height
         * @return int
         */
        public function getHeight() {}
    }

    /**
     * Class IconRegistry, which makes it possible to register custom icons
     * from within an extension.
     */
    class IconRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * @var bool
         */
        protected $fullInitialized;
        /**
         * @var bool
         */
        protected $tcaInitialized;
        /**
         * @var bool
         */
        protected $flagsInitialized;
        /**
         * @var bool
         */
        protected $moduleIconsInitialized;
        /**
         * @var bool
         */
        protected $backendIconsInitialized;
        /**
         * Registered icons
         *
         * @var array
         */
        protected $icons;
        /**
         * Paths to backend icon folders for automatic registration
         *
         * @var string[]
         */
        protected $backendIconPaths;
        /**
         * List of allowed icon file extensions with their Provider class
         *
         * @var string[]
         */
        protected $backendIconAllowedExtensionsWithProvider;
        /**
         * manually registered icons
         * hopefully obsolete one day
         *
         * @var array
         */
        protected $staticIcons;
        /**
         * Mapping of file extensions to mimetypes
         *
         * @var string[]
         */
        protected $fileExtensionMapping;
        /**
         * Mapping of mime types to icons
         *
         * @var string[]
         */
        protected $mimeTypeMapping;
        /**
         * Array of deprecated icons, add deprecated icons to this array and remove it from registry
         * - Index of this array contains the deprecated icon
         * - Value of each entry may contain a possible new identifier
         *
         * Example:
         * [
         *   'deprecated-icon-identifier' => 'new-icon-identifier',
         *   'another-deprecated-identifier' => null,
         * ]
         *
         * @var array
         */
        protected $deprecatedIcons;
        /**
         * @var string
         */
        protected $defaultIconIdentifier;

        /**
         * The constructor
         */
        public function __construct() {}
        /**
         * Initialize the registry
         * This method can be called multiple times, depending on initialization status.
         * In some cases e.g. TCA is not available, the method must be called multiple times.
         */
        protected function initialize() {}
        /** @var \TYPO3\CMS\Core\Cache\Frontend\VariableFrontend $assetsCache */
        protected function getCachedBackendIcons() {}
        /**
         * Automatically find and register the core backend icons
         */
        protected function registerBackendIcons() {}
        public function isRegistered($identifier) {}
        public function isDeprecated($identifier) {}
        /**
         * @return string
         */
        public function getDefaultIconIdentifier() {}
        public function registerIcon($identifier, $iconProviderClassName, array $options = [ ]) {}
        public function registerFileExtension($fileExtension, $iconIdentifier) {}
        public function registerMimeTypeIcon($mimeType, $iconIdentifier) {}
        public function getIconConfigurationByIdentifier($identifier) {}
        /**
         * @return array
         */
        public function getAllRegisteredIconIdentifiers() {}
        public function getIconIdentifierForFileExtension($fileExtension) {}
        public function getIconIdentifierForMimeType($mimeType) {}
        /**
         * Load icons from TCA for each table and add them as "tcarecords-XX" to $this->icons
         */
        protected function registerTCAIcons() {}
        /**
         * Register module icons
         */
        protected function registerModuleIcons() {}
        /**
         * Register flags
         */
        protected function registerFlags() {}
        public function detectIconProvider($iconReference) {}
    }

    /**
     * Standard graphical functions
     *
     * Class contains a bunch of cool functions for manipulating graphics with GDlib/Freetype and ImageMagick.
     * VERY OFTEN used with gifbuilder that extends this class and provides a TypoScript API to using these functions
     */
    class GraphicalFunctions {
        /**
         * If set, the frame pointer is appended to the filenames.
         *
         * @var bool
         */
        public $addFrameSelection;
        /**
         * This should be changed to 'png' if you want this class to read/make PNG-files instead!
         *
         * @var string
         */
        public $gifExtension;
        /**
         * File formats supported by gdlib. This variable get's filled in "init" method
         *
         * @var array
         */
        protected $gdlibExtensions;
        /**
         * defines the RGB colorspace to use
         *
         * @var string
         */
        protected $colorspace;
        /**
         * colorspace names allowed
         *
         * @var array
         */
        protected $allowedColorSpaceNames;
        /**
         * 16777216 Colors is the maximum value for PNG, JPEG truecolor images (24-bit, 8-bit / Channel)
         *
         * @var int
         */
        public $truecolorColors;
        /**
         * Allowed file extensions perceived as images by TYPO3.
         * List should be set to 'gif,png,jpeg,jpg' if IM is not available.
         *
         * @var array
         */
        protected $imageFileExt;
        /**
         * Web image extensions (can be shown by a webbrowser)
         *
         * @var array
         */
        protected $webImageExt;
        /**
         * Enable ImageMagick effects, disabled by default as IM5+ effects slow down the image generation
         *
         * @var bool
         */
        protected $processorEffectsEnabled;
        /**
         * @var array
         */
        public $cmds;
        /**
         * @var bool
         */
        protected $NO_IMAGE_MAGICK;
        /**
         * @var bool
         */
        protected $mayScaleUp;
        /**
         * Filename prefix for images scaled in imageMagickConvert()
         *
         * @var string
         */
        public $filenamePrefix;
        /**
         * Forcing the output filename of imageMagickConvert() to this value. However after calling imageMagickConvert() it will be set blank again.
         *
         * @var string
         */
        public $imageMagickConvert_forceFileNameBody;
        /**
         * This flag should always be FALSE. If set TRUE, imageMagickConvert will always write a new file to the tempdir! Used for debugging.
         *
         * @var bool
         */
        public $dontCheckForExistingTempFile;
        /**
         * Prevents imageMagickConvert() from compressing the gif-files with self::gifCompress()
         *
         * @var bool
         */
        public $dontCompress;
        /**
         * For debugging only.
         * Filenames will not be based on mtime and only filename (not path) will be used.
         * This key is also included in the hash of the filename...
         *
         * @var string
         */
        public $alternativeOutputKey;
        /**
         * All ImageMagick commands executed is stored in this array for tracking. Used by the Install Tools Image section
         *
         * @var array
         */
        public $IM_commands;
        /**
         * @var array
         */
        public $workArea;
        /**
         * Preserve the alpha transparency layer of read PNG images
         *
         * @var bool
         */
        protected $saveAlphaLayer;
        /**
         * ImageMagick scaling command; "-geometry" or "-sample". Used in makeText() and imageMagickConvert()
         *
         * @var string
         */
        public $scalecmd;
        /**
         * Used by v5_blur() to simulate 10 continuous steps of blurring
         *
         * @var string
         */
        protected $im5fx_blurSteps;
        /**
         * Used by v5_sharpen() to simulate 10 continuous steps of sharpening.
         *
         * @var string
         */
        protected $im5fx_sharpenSteps;
        /**
         * This is the limit for the number of pixels in an image before it will be rendered as JPG instead of GIF/PNG
         *
         * @var int
         */
        protected $pixelLimitGif;
        /**
         * Array mapping HTML color names to RGB values.
         *
         * @var array
         */
        protected $colMap;
        /**
         * Charset conversion object:
         *
         * @var CharsetConverter
         */
        protected $csConvObj;
        /**
         * @var int
         */
        protected $jpegQuality;
        /**
         * @var string
         */
        public $map;
        /**
         * This holds the operational setup.
         * Basically this is a TypoScript array with properties.
         *
         * @var array
         */
        public $setup;
        /**
         * @var int
         */
        public $w;
        /**
         * @var int
         */
        public $h;
        /**
         * @var array
         */
        protected $OFFSET;
        /**
         * @var resource
         */
        protected $im;

        /**
         * Init function. Must always call this when using the class.
         * This function will read the configuration information from $GLOBALS['TYPO3_CONF_VARS']['GFX'] can set some values in internal variables.
         */
        public function init() {}
        public function maskImageOntoImage($im, $conf, $workArea) {}
        public function copyImageOntoImage($im, $conf, $workArea) {}
        public function copyGifOntoGif($im, $cpImg, $conf, $workArea) {}
        public function imagecopyresized($dstImg, $srcImg, $dstX, $dstY, $srcX, $srcY, $dstWidth, $dstHeight, $srcWidth, $srcHeight) {}
        public function makeText($im, $conf, $workArea) {}
        public function txtPosition($conf, $workArea, $BB) {}
        public function calcBBox($conf) {}
        public function addToMap($cords, $conf) {}
        public function calcTextCordsForMap($cords, $offset, $conf) {}
        public function SpacedImageTTFText($im, $fontSize, $angle, $x, $y, $Fcolor, $fontFile, $text, $spacing, $wordSpacing, $splitRenderingConf, $sF = 1) {}
        public function fontResize($conf) {}
/**
 * Calculate Bounding Box for part.
 * Due to a PHP bug, we must retry if $calc[2] is negative.
 *
 * @see https://bugs.php.net/bug.php?id=51315
 * @see https://bugs.php.net/bug.php?id=22513
 */
        public function ImageTTFBBoxWrapper(/**
 * Calculate Bounding Box for part.
 * Due to a PHP bug, we must retry if $calc[2] is negative.
 *
 * @see https://bugs.php.net/bug.php?id=51315
 * @see https://bugs.php.net/bug.php?id=22513
 */
$fontSize, /**
 * Calculate Bounding Box for part.
 * Due to a PHP bug, we must retry if $calc[2] is negative.
 *
 * @see https://bugs.php.net/bug.php?id=51315
 * @see https://bugs.php.net/bug.php?id=22513
 */
$angle, /**
 * Calculate Bounding Box for part.
 * Due to a PHP bug, we must retry if $calc[2] is negative.
 *
 * @see https://bugs.php.net/bug.php?id=51315
 * @see https://bugs.php.net/bug.php?id=22513
 */
$fontFile, /**
 * Calculate Bounding Box for part.
 * Due to a PHP bug, we must retry if $calc[2] is negative.
 *
 * @see https://bugs.php.net/bug.php?id=51315
 * @see https://bugs.php.net/bug.php?id=22513
 */
$string, /**
 * Calculate Bounding Box for part.
 * Due to a PHP bug, we must retry if $calc[2] is negative.
 *
 * @see https://bugs.php.net/bug.php?id=51315
 * @see https://bugs.php.net/bug.php?id=22513
 */
$splitRendering, /**
 * Calculate Bounding Box for part.
 * Due to a PHP bug, we must retry if $calc[2] is negative.
 *
 * @see https://bugs.php.net/bug.php?id=51315
 * @see https://bugs.php.net/bug.php?id=22513
 */
$sF = 1) {}
        public function ImageTTFTextWrapper($im, $fontSize, $angle, $x, $y, $color, $fontFile, $string, $splitRendering, $sF = 1) {}
        public function splitString($string, $splitRendering, $fontSize, $fontFile) {}
        public function calcWordSpacing($conf, $scaleFactor = 1) {}
        public function getTextScalFactor($conf) {}
        protected function renderTTFText($im, $fontSize, $angle, $x, $y, $color, $fontFile, $string, $splitRendering, $conf, $sF = 1) {}
        protected function getWordPairsForLineBreak($string) {}
        protected function getRenderedTextWidth($text, $conf) {}
        protected function getBreakSpace($conf, array $boundingBox = null) {}
        public function makeOutline($im, $conf, $workArea, $txtConf) {}
        public function circleOffset($distance, $iterations) {}
        public function makeEmboss($im, $conf, $workArea, $txtConf) {}
        public function makeShadow($im, $conf, $workArea, $txtConf) {}
        public function makeBox($im, $conf, $workArea) {}
        public function makeEllipse($im, array $conf, array $workArea) {}
        public function makeEffect($im, $conf) {}
        public function IMparams($setup) {}
        public function adjust($im, $conf) {}
        public function crop($im, $conf) {}
        public function scale($im, $conf) {}
        public function setWorkArea($workArea) {}
        public function autolevels($im) {}
        public function outputLevels($im, $low, $high, $swap = false) {}
        public function inputLevels($im, $low, $high) {}
        public function IMreduceColors($file, $cols) {}
        public function v5_sharpen($factor) {}
        public function v5_blur($factor) {}
        /**
         * Returns a random filename prefixed with "temp_" and then 32 char md5 hash (without extension).
         * Used by functions in this class to create truly temporary files for the on-the-fly processing. These files will most likely be deleted right away.
         *
         * @return string
         */
        public function randomName() {}
        public function applyOffset($cords, $OFFSET) {}
        public function convertColor($string) {}
        public function objPosition($conf, $workArea, $BB) {}
        public function imageMagickConvert($imagefile, $newExt = '', $w = '', $h = '', $params = '', $frame = '', $options = [ ], $mustCreate = false) {}
        public function getImageDimensions($imageFile) {}
/** @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache */
        public function cacheImageDimensions(/** @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache */
array $identifyResult) {}
/** @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache */
        public function getCachedImageDimensions(/** @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache */
$filePath) {}
        protected function generateCacheKeyForImageFile($filePath) {}
        protected function generateStatusHashForImageFile($filePath) {}
        public function getImageScale($info, $w, $h, $options) {}
        public function imageMagickIdentify($imagefile) {}
        public function imageMagickExec($input, $output, $params, $frame = 0) {}
        public function combineExec($input, $overlay, $mask, $output) {}
        public static function gifCompress($theFile, $type) {}
        public static function readPngGif($theFile, $output_png = false) {}
        public function applyImageMagickToPHPGif($im, $command) {}
        public function gif_or_jpg($type, $w, $h) {}
        public function output($file) {}
        /**
         * Destroy internal image pointer, $this->im
         *
         * @see \TYPO3\CMS\Frontend\Imaging\GifBuilder::gifBuild()
         */
        public function destroy() {}
        public function imgTag($imgInfo) {}
        public function ImageWrite($destImg, $theImage, $quality = 0) {}
        public function imageCreateFromFile($sourceImg) {}
        public function hexColor($color) {}
        public function unifyColors($img, $colArr, $closest = false) {}
        public function getTemporaryImageWithText($filename, $textline1, $textline2, $textline3) {}
        protected function compensateFontSizeiBasedOnFreetypeDpi($fontSize) {}
    }


    /**
     * Interface IconProviderInterface
     */
    interface IconProviderInterface {
        function prepareIconMarkup(Icon $icon, array $options = [ ]) ;
    }

}

namespace TYPO3\CMS\Core\Imaging\IconProvider {
    /**
     * Class FontawesomeIconProvider
     */
    class FontawesomeIconProvider implements \typo3\cms\core\imaging\iconproviderinterface {
        public function prepareIconMarkup(Icon $icon, array $options = [ ]) {}
        protected function generateMarkup(Icon $icon, array $options) {}
    }

    /**
     * Class SvgIconProvider provides icons that are classic <img> tags using vectors as source
     */
    class SvgIconProvider implements \typo3\cms\core\imaging\iconproviderinterface {
        const MARKUP_IDENTIFIER_INLINE = 'inline';

        public function prepareIconMarkup(Icon $icon, array $options = [ ]) {}
        protected function generateMarkup(Icon $icon, array $options) {}
        protected function generateInlineMarkup(Icon $icon, array $options) {}
        protected function getInlineSvg($source) {}
    }

    /**
     * Class BitmapIconProvider provides icons that are classic <img> tags using bitmaps as source
     */
    class BitmapIconProvider implements \typo3\cms\core\imaging\iconproviderinterface {
        const MARKUP_IDENTIFIER_INLINE = 'inline';

        public function prepareIconMarkup(Icon $icon, array $options = [ ]) {}
        protected function generateMarkup(Icon $icon, array $options) {}
        protected function generateInlineMarkup(Icon $icon, array $options) {}
    }

}

namespace TYPO3\CMS\Core\Imaging\ImageManipulation {
    class Area {
        /**
         * @var float
         */
        protected $x;
        /**
         * @var float
         */
        protected $y;
        /**
         * @var float
         */
        protected $width;
        /**
         * @var float
         */
        protected $height;

        public function __construct(float $x, float $y, float $width, float $height) {}
        public static function createFromConfiguration(array $config) : Area {}
        public static function createMultipleFromConfiguration(array $config) : array {}
        /**
         * @return Area
         */
        public static function createEmpty() {}
        /**
         * @return array
         * @internal
         */
        public function asArray() : array {}
        public function makeAbsoluteBasedOnFile(FileInterface $file) {}
        public function makeRelativeBasedOnFile(FileInterface $file) {}
        public function applyRatioRestriction(Ratio $ratio) : Area {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    class CropVariantCollection {
        /**
         * @var CropVariant[]
         */
        protected $cropVariants;

        public function __construct(array $cropVariants) {}
        public static function create(string $jsonString, array $tcaConfig = [ ]) : CropVariantCollection {}
        /**
         * @return array
         * @internal
         */
        public function asArray() : array {}
        public function applyRatioRestrictionToSelectedCropArea(FileInterface $file) : CropVariantCollection {}
        public function __toString() {}
        public function getCropArea(string $id = 'default') : Area {}
        public function getFocusArea(string $id = 'default') : Area {}
        /**
         * @return CropVariantCollection
         */
        protected static function createEmpty() : CropVariantCollection {}
        protected function setCropVariants(CropVariant $cropVariants) {}
        protected function addCropVariant(CropVariant $cropVariant) {}
    }

    class Ratio {
        /**
         * @var string
         */
        protected $id;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var float
         */
        protected $value;

        public function __construct(string $id, string $title, float $value) {}
        /**
         * @return string
         */
        public function getId() : string {}
        public static function createMultipleFromConfiguration(array $config) : array {}
        /**
         * @return array
         * @internal
         */
        public function asArray() : array {}
        /**
         * @return float
         */
        public function getRatioValue() : float {}
        /**
         * @return bool
         */
        public function isFree() : bool {}
    }

    /**
     * Thrown when an invalid TCA configuration for the image manipulation is detected
     */
    class InvalidConfigurationException extends \exception {}

    class CropVariant {
        /**
         * @var string
         */
        protected $id;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var Area
         */
        protected $cropArea;
        /**
         * @var Ratio[]
         */
        protected $allowedAspectRatios;
        /**
         * @var string
         */
        protected $selectedRatio;
        /**
         * @var Area|null
         */
        protected $focusArea;
        /**
         * @var Area[]|null
         */
        protected $coverAreas;

        public function __construct(string $id, string $title, Area $cropArea, array $allowedAspectRatios = null, string $selectedRatio = null, Area $focusArea = null, array $coverAreas = null) {}
        public static function createFromConfiguration(string $id, array $config) : CropVariant {}
        /**
         * @return array
         * @internal
         */
        public function asArray() : array {}
        /**
         * @return string
         */
        public function getId() : string {}
        /**
         * @return Area
         */
        public function getCropArea() : Area {}
        /**
         * @return Area|null
         */
        public function getFocusArea() {}
        public function applyRatioRestrictionToSelectedCropArea(FileInterface $file) : CropVariant {}
        protected function setAllowedAspectRatios(Ratio $ratios) {}
        protected function addAllowedAspectRatio(Ratio $ratio) {}
        protected function setCoverAreas(Area $areas) {}
        protected function addCoverArea(Area $area) {}
    }

}

namespace TYPO3\CMS\Core\Html {
    /**
     * Functions for parsing HTML.
     * You are encouraged to use this class in your own applications
     */
    class HtmlParser {
        const VOID_ELEMENTS = 'area|base|br|col|command|embed|hr|img|input|keygen|meta|param|source|track|wbr';

        /**
         * @var array
         */
        protected $caseShift_cache;

        public function splitIntoBlock($tag, $content, $eliminateExtraEndTags = false) {}
        public function splitIntoBlockRecursiveProc($tag, $content, $procObj, $callBackContent, $callBackTags, $level = 0) {}
        public function splitTags($tag, $content) {}
        public function removeFirstAndLastTag($str) {}
        public function getFirstTag($str) {}
        public function getFirstTagName($str, $preserveCase = false) {}
        public function get_tag_attributes($tag, $deHSC = false) {}
        public function split_tag_attributes($tag) {}
/** @var ContentObjectRenderer $contentObjectRenderer */
        public function HTMLcleaner(/** @var ContentObjectRenderer $contentObjectRenderer */
$content, /** @var ContentObjectRenderer $contentObjectRenderer */
$tags = [ ], /** @var ContentObjectRenderer $contentObjectRenderer */
$keepAll = 0, /** @var ContentObjectRenderer $contentObjectRenderer */
$hSC = 0, /** @var ContentObjectRenderer $contentObjectRenderer */
$addConfig = [ ]) {}
        public function bidir_htmlspecialchars($value, $dir) {}
        public function prefixResourcePath($main_prefix, $content, $alternatives = [ ], $suffix = '') {}
        public function prefixRelPath($prefix, $srcVal, $suffix = '') {}
        public function caseShift($str, $caseSensitiveComparison, $cacheKey = '') {}
        public function compileTagAttribs($tagAttrib, $meta = [ ]) {}
        public function HTMLparserConfig($TSconfig, $keepTags = [ ]) {}
        public function stripEmptyTags($content, $tagList = '', $treatNonBreakingSpaceAsEmpty = false, $keepTags = false) {}
        protected function stripEmptyTagsIfConfigured($value, $configuration) {}
    }

    /**
     * Class for parsing HTML for the Rich Text Editor. (also called transformations)
     *
     * Concerning line breaks:
     * Regardless if LF (Unix-style) or CRLF (Windows) was put in, the HtmlParser works with LFs and migrates all
     * line breaks to LFs internally, however when all transformations are done, all LFs are transformed to CRLFs.
     * This means: RteHtmlParser always returns CRLFs to be maximum compatible with all formats.
     */
    class RteHtmlParser extends \typo3\cms\core\html\htmlparser implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * List of elements that are not wrapped into a "p" tag while doing the transformation.
         * @var string
         */
        public $blockElementList;
        /**
         * List of all tags that are allowed by default
         * @var string
         */
        protected $defaultAllowedTagsList;
        /**
         * Set this to the pid of the record manipulated by the class.
         *
         * @var int
         */
        public $recPid;
        /**
         * Element reference [table]:[field], eg. "tt_content:bodytext"
         *
         * @var string
         */
        public $elRef;
        /**
         * Current Page TSConfig
         *
         * @var array
         */
        public $tsConfig;
        /**
         * Set to the TSconfig options coming from Page TSconfig
         *
         * @var array
         */
        public $procOptions;
        /**
         * Run-away brake for recursive calls.
         *
         * @var int
         */
        public $TS_transform_db_safecounter;
        /**
         * Data caching for processing function
         *
         * @var array
         */
        public $getKeepTags_cache;
        /**
         * Storage of the allowed CSS class names in the RTE
         *
         * @var array
         */
        public $allowedClasses;
        /**
         * A list of HTML attributes for <p> tags. Because <p> tags are wrapped currently in a special handling,
         * they have a special place for configuration via 'proc.keepPDIVattribs'
         *
         * @var array
         */
        protected $allowedAttributesForParagraphTags;
        /**
         * Any tags that are allowed outside of <p> sections - usually similar to the block elements
         * plus some special tags like <hr> and <img> (if images are allowed).
         * Completely overrideable via 'proc.allowTagsOutside'
         *
         * @var array
         */
        protected $allowedTagsOutsideOfParagraphs;

        public function init($elRef = '', $recPid = 0) {}
        public function RTE_transform($value, $_ = null, $direction = 'rte', $thisConfig = [ ]) {}
        protected function resolveAppliedTransformationModes(string $direction, array $modes) {}
        protected function runHtmlParserIfConfigured($content, $configurationDirective) {}
/** @var Resource\AbstractFile $fileObject */
        public function TS_images_db(/** @var Resource\AbstractFile $fileObject */
$value) {}
        public function TS_images_rte($value) {}
        public function TS_links_db($value) {}
        public function TS_links_rte($value, $internallyCalledFromCore = null) {}
        public function TS_transform_db($value) {}
        public function transformStyledATags($value) {}
        public function TS_transform_rte($value) {}
        public function HTMLcleaner_db($content) {}
        public function getKeepTags($direction = 'rte') {}
        public function divideIntoLines($value, $count = 5, $returnArray = false) {}
        public function setDivTags($value) {}
        protected function processContentWithinParagraph(string $content, string $fullContentWithTag) {}
        protected function sanitizeLineBreaksForContentOnly(string $content) {}
        public function getWHFromAttribs($attribArray) {}
        public function urlInfoForLinkTags($url) {}
        public function TS_AtagToAbs($value) {}
        protected function applyPlainImageModeSettings($imageInfo, $attribArray) {}
        protected function streamlineLineBreaksForProcessing(string $content) {}
        protected function streamlineLineBreaksAfterProcessing(string $content) {}
        protected function markBrokenLinks(string $content) : string {}
        protected function removeBrokenLinkMarkers(string $content) : string {}
    }

}

namespace TYPO3\CMS\Core\Controller {
    /**
     * A class representing error messages shown on a page, rendered via fluid.
     * Classic Example: "No pages are found on rootlevel"
     */
    class ErrorPageController {
        /**
         * The view object
         * @var TemplateView
         */
        protected $view;
        /**
         * The severity level
         * @var int
         */
        protected $severity;

        /**
         * Sets up the view
         */
        public function __construct() {}
        public function errorAction(string $title, string $message, int $severity = AbstractMessage::ERROR, int $errorCode = 0) : string {}
    }

    /**
     * Class FileDumpController
     */
    class FileDumpController {
        public function dumpAction(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function getGetOrPost(ServerRequestInterface $request, $parameter) {}
    }

}

namespace TYPO3\CMS\Core\TypoScript {
    /**
     * Utilities to manage and convert TypoScript
     * Also contains the functionality in TypoScript called "optionSplit"
     */
    class TypoScriptService {
        public function convertTypoScriptArrayToPlainArray(array $typoScriptArray) : array {}
        public function convertPlainArrayToTypoScriptArray(array $plainArray) : array {}
        public function explodeConfigurationForOptionSplit(array $originalConfiguration, int $splitCount) : array {}
    }

    /**
     * Template object that is responsible for generating the TypoScript template based on template records.
     * @see \TYPO3\CMS\Core\TypoScript\Parser\TypoScriptParser
     * @see \TYPO3\CMS\Core\Configuration\TypoScript\ConditionMatching\AbstractConditionMatcher
     */
    class TemplateService {
    use \typo3\cms\core\compatibility\publicpropertydeprecationtrait;

        /**
         * Properties which have been moved to protected status from public
         * @var array
         */
        protected $deprecatedPublicProperties;
        /**
         * option to enable logging, time-tracking (FE-only)
         * usually, this is only done when
         *  - in FE a BE_USER is logged-in
         *  - in BE when the BE_USER needs information about the template (TypoScript module)
         * @var bool
         */
        protected $verbose;
        /**
         * If set, the global tt-timeobject is used to log the performance.
         *
         * @var bool
         */
        public $tt_track;
        /**
         * If set, the template is always rendered. Used from Admin Panel.
         *
         * @var bool
         */
        public $forceTemplateParsing;
        /**
         * This array is passed on to matchObj by generateConfig().
         * If it holds elements, they are used for matching instead. See comment at the match-class.
         * Used for backend modules only. Never frontend!
         *
         * @var array
         */
        public $matchAlternative;
        /**
         * If set, the match-class matches everything! Used for backend modules only. Never frontend!
         *
         * @var bool
         */
        protected $matchAll;
        /**
         * Externally set breakpoints (used by Backend Modules)
         *
         * @var int
         */
        public $ext_constants_BRP;
        /**
         * @var int
         */
        public $ext_config_BRP;
        /**
         * @var bool
         */
        public $ext_regLinenumbers;
        /**
         * @var bool
         */
        public $ext_regComments;
        /**
         * This MUST be initialized by the init() function
         *
         * @var string
         */
        protected $whereClause;
        /**
         * @var bool
         */
        protected $debug;
        /**
         * This is the only paths (relative!!) that are allowed for resources in TypoScript.
         * Should all be appended with '/'. You can extend these by the global array TYPO3_CONF_VARS. See init() function.
         *
         * @var array
         */
        protected $allowedPaths;
        /**
         * See init(); Set if preview of some kind is enabled.
         *
         * @var int
         */
        protected $simulationHiddenOrTime;
        /**
         * Set, if the TypoScript template structure is loaded and OK, see ->start()
         *
         * @var bool
         */
        public $loaded;
        /**
         * @var array Contains TypoScript setup part after parsing
         */
        public $setup;
        /**
         * @var array
         */
        public $flatSetup;
        /**
         * For fetching TypoScript code from template hierarchy before parsing it.
         * Each array contains code field values from template records/files:
         * Setup field
         *
         * @var array
         */
        public $config;
        /**
         * Constant field
         *
         * @var array
         */
        public $constants;
        /**
         * Holds the include paths of the templates (empty if from database)
         *
         * @var array
         */
        protected $templateIncludePaths;
        /**
         * For Template Analyser in backend
         *
         * @var array
         */
        public $hierarchyInfo;
        /**
         * For Template Analyser in backend (setup content only)
         *
         * @var array
         */
        protected $hierarchyInfoToRoot;
        /**
         * Next-level flag (see runThroughTemplates())
         *
         * @var int
         */
        protected $nextLevel;
        /**
         * The Page UID of the root page
         *
         * @var int
         */
        protected $rootId;
        /**
         * The rootline from current page to the root page
         *
         * @var array
         */
        public $rootLine;
        /**
         * Rootline all the way to the root. Set but runThroughTemplates
         *
         * @var array
         */
        protected $absoluteRootLine;
        /**
         * A pointer to the last entry in the rootline where a template was found.
         *
         * @var int
         */
        protected $outermostRootlineIndexWithTemplate;
        /**
         * Array of arrays with title/uid of templates in hierarchy
         *
         * @var array
         */
        protected $rowSum;
        /**
         * The current site title field.
         *
         * @var string
         */
        protected $sitetitle;
        /**
         * Tracking all conditions found during parsing of TypoScript. Used for the "all" key in currentPageData
         *
         * @var string
         */
        public $sections;
        /**
         * Tracking all matching conditions found
         *
         * @var array
         */
        protected $sectionsMatch;
        /**
         * Used by Backend only (Typoscript Template Analyzer)
         */
        public $clearList_const;
        /**
         * Used by Backend only (Typoscript Template Analyzer)
         *
         * @var array
         */
        public $clearList_setup;
        /**
         * @var array
         */
        public $parserErrors;
        /**
         * @var array
         */
        public $setup_constants;
        /**
         * Used by getFileName for caching of references to file resources
         *
         * @var array
         */
        public $fileCache;
        /**
         * Keys are frame names and values are type-values, which must be used to refer correctly to the content of the frames.
         *
         * @var array
         */
        protected $frames;
        /**
         * Contains mapping of Page id numbers to MP variables.
         *
         * @var string
         */
        protected $MPmap;
        /**
         * Indicator that extension statics are processed.
         *
         * These files are considered if either a root template
         * has been processed or the $processExtensionStatics
         * property has been set to TRUE.
         *
         * @var bool
         */
        protected $extensionStaticsProcessed;
        /**
         * Trigger value, to ensure that extension statics are processed.
         *
         * @var bool
         */
        protected $processExtensionStatics;
        /**
         * Set to TRUE after the default TypoScript was added during parsing.
         * This prevents double inclusion of the same TypoScript code.
         *
         * @see addDefaultTypoScript()
         * @var bool
         */
        protected $isDefaultTypoScriptAdded;
        /**
         * Set to TRUE after $this->config and $this->constants have processed all <INCLUDE_TYPOSCRIPT:> instructions.
         *
         * This prevents double processing of INCLUDES.
         *
         * @see processIncludes()
         * @var bool
         */
        protected $processIncludesHasBeenRun;
        /**
         * Contains the restrictions about deleted, and some frontend related topics
         * @var AbstractRestrictionContainer
         */
        protected $queryBuilderRestrictions;

        /**
         * @return bool
         */
        public function getProcessExtensionStatics() {}
        public function setProcessExtensionStatics($processExtensionStatics) {}
        public function setVerbose($verbose) {}
        /**
         * Initialize
         * MUST be called directly after creating a new template-object
         *
         * @see \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController::initTemplate()
         */
        public function init() {}
        /**
         * $this->whereclause is kept for backwards compatibility
         */
        protected function initializeDatabaseQueryRestrictions() {}
        /**
         * Fetches the "currentPageData" array from cache
         *
         * NOTE about currentPageData:
         * It holds information about the TypoScript conditions along with the list
         * of template uid's which is used on the page. In the getFromCache() function
         * in TSFE, currentPageData is used to evaluate if there is a template and
         * if the matching conditions are alright. Unfortunately this does not take
         * into account if the templates in the rowSum of currentPageData has
         * changed composition, eg. due to hidden fields or start/end time. So if a
         * template is hidden or times out, it'll not be discovered unless the page
         * is regenerated - at least the this->start function must be called,
         * because this will make a new portion of data in currentPageData string.
         *
         * @return array Returns the unmatched array $currentPageData if found cached in "cache_pagesection". Otherwise FALSE is returned which means that the array must be generated and stored in the cache
         */
        public function getCurrentPageData() {}
/** @var $matchObj ConditionMatcher */
        public function matching(/** @var $matchObj ConditionMatcher */
$cc) {}
/** @var $pageSectionCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
        public function start(/** @var $pageSectionCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
$theRootLine) {}
        public function runThroughTemplates($theRootLine, $start_template_uid = 0) {}
        public function processTemplate($row, $idList, $pid, $templateID = '', $templateParent = '', $includePath = '') {}
        public function updateRootlineData($fullRootLine) {}
        public function includeStaticTypoScriptSources($idList, $templateID, $pid, $row) {}
        protected function getTypoScriptSourceFileContent($filePath, $baseName) {}
        public function addExtensionStatics($idList, $templateID, $pid, $row) {}
        public function prependStaticExtra($subrow) {}
        public function versionOL($row) {}
        /**
         * Generates the configuration array by replacing constants and parsing the whole thing.
         * Depends on $this->config and $this->constants to be set prior to this! (done by processTemplate/runThroughTemplates)
         *
         * @see \TYPO3\CMS\Core\TypoScript\Parser\TypoScriptParser, start()
         */
        public function generateConfig() {}
        /**
         * Searching TypoScript code text (for constants and config (Setup))
         * for include instructions and does the inclusion of external TypoScript files
         * if needed.
         *
         * @see \TYPO3\CMS\Core\TypoScript\Parser\TypoScriptParser, generateConfig()
         */
        public function processIncludes() {}
/** @var $parseObj Parser\TypoScriptParser */
        public function mergeConstantsFromPageTSconfig(/** @var $parseObj Parser\TypoScriptParser */
$constArray) {}
        protected function mergeConstantsFromIncludedTsConfigFiles($filesToInclude, $TSdataArray) {}
        public function flattenSetup($setupArray, $prefix) {}
        public function substituteConstants($all) {}
        public function substituteConstantsCallBack($matches) {}
        public function getFileName($fileFromSetup) {}
        public function printTitle($pageTitle, $noTitle = false, $showTitleFirst = false, $pageTitleSeparator = '') {}
        public function getRootlineLevel($list) {}
        public function linkData($page, $oTarget, $no_cache, $_ = null, $overrideArray = null, $addParams = '', $typeOverride = '', $targetDomain = '') {}
        public function getFromMPmap($pageId = 0) {}
        public function initMPmap_create($id, $MP_array = [ ], $level = 0) {}
        /**
         * Adds the TypoScript from the global array.
         * The class property isDefaultTypoScriptAdded ensures
         * that the adding only happens once.
         *
         * @see isDefaultTypoScriptAdded
         */
        protected function addDefaultTypoScript() {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
        protected function getCacheEntry($identifier) {}
        protected function setCacheEntry($identifier, $data, $tag) {}
    }

    /**
     * TSParser extension class to TemplateService
     * Contains functions for the TS module in TYPO3 backend
     */
    class ExtendedTemplateService extends \typo3\cms\core\typoscript\templateservice {
        /**
         * Disabled in backend context
         *
         * @var bool
         */
        public $tt_track;
        /**
         * @var array
         */
        public $categories;
        /**
         * Translated categories
         *
         * @var array
         */
        protected $categoryLabels;
        /**
         * This will be filled with the available categories of the current template.
         *
         * @var array
         */
        public $subCategories;
        /**
         * Tsconstanteditor
         *
         * @var int
         */
        public $ext_inBrace;
        /**
         * Tsbrowser
         *
         * @var array
         */
        public $tsbrowser_searchKeys;
        /**
         * @var array
         */
        public $tsbrowser_depthKeys;
        /**
         * @var string
         */
        public $constantMode;
        /**
         * @var string
         */
        public $regexMode;
        /**
         * @var string
         */
        public $fixedLgd;
        /**
         * @var int
         */
        public $ext_lineNumberOffset;
        /**
         * @var int
         */
        public $ext_expandAllNotes;
        /**
         * @var int
         */
        public $ext_noPMicons;
        /**
         * @var array
         */
        public $ext_listOfTemplatesArr;
        /**
         * @var string
         */
        public $ext_lineNumberOffset_mode;
        /**
         * Don't change
         *
         * @var int
         */
        public $ext_dontCheckIssetValues;
        /**
         * @var int
         */
        public $ext_printAll;
        /**
         * @var string
         */
        public $ext_CEformName;
        /**
         * @var bool
         */
        public $doNotSortCategoriesBeforeMakingForm;
        /**
         * Ts analyzer
         *
         * @var array
         */
        public $templateTitles;
        /**
         * @var array|null
         */
        protected $lnToScript;
        /**
         * @var array
         */
        public $clearList_const_temp;
        /**
         * @var array
         */
        public $clearList_setup_temp;
        /**
         * @var string
         */
        public $bType;
        /**
         * @var bool
         */
        public $linkObjects;
        /**
         * @var bool
         */
        public $changed;
        /**
         * @var int[]
         */
        protected $objReg;
        /**
         * @var array
         */
        public $raw;
        /**
         * @var int
         */
        public $rawP;
        /**
         * @var string
         */
        public $lastComment;
        /**
         * @var array
         */
        protected $inlineJavaScript;

        /**
         * Gets the inline JavaScript.
         *
         * @return array
         */
        public function getInlineJavaScript() {}
        public function substituteConstants($all) {}
        public function substituteConstantsCallBack($matches) {}
        public function substituteCMarkers($all) {}
        /** @var ConditionMatcher $matchObj */
        public function generateConfig_constants() {}
        public function ext_getSetup($theSetup, $theKey) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function ext_getObjTree(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$arr, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$depth_in, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$depthData, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$parentType = '', /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$parentValue = '', /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$alphaSort = '0') {}
        public function lineNumberToScript(array $lnArr) {}
        public function ext_getSearchKeys($arr, $depth_in, $searchString, $keyArray) {}
        public function ext_getRootlineNumber($pid) {}
/** @var IconFactory $iconFactory */
        public function ext_getTemplateHierarchyArr(/** @var IconFactory $iconFactory */
$arr, /** @var IconFactory $iconFactory */
$depthData, /** @var IconFactory $iconFactory */
$keyArray, /** @var IconFactory $iconFactory */
$first = 0) {}
        public function ext_process_hierarchyInfo(array $depthDataArr, $pointer) {}
        public function ext_outputTS(array $config, $lineNumbers = false, $comments = false, $crop = false, $syntaxHL = false, $syntaxHLBlockmode = 0) {}
        public function ext_fixed_lgd($string, $chars) {}
        public function ext_lnBreakPointWrap($lineNumber, $str) {}
        public function ext_formatTS($input, $ln, $comments = true, $crop = false) {}
        public function ext_getFirstTemplate($pid, $templateUid = 0) {}
        public function ext_getAllTemplates($pid) : array {}
        protected function getTemplateQueryBuilder(int $pid) : QueryBuilder {}
        public function ext_compareFlatSetups($default) {}
        public function ext_categorizeEditableConstants($editConstArray) {}
        /**
         * @return array
         */
        public function ext_getCategoryLabelArray() {}
        public function ext_getTypeData($type) {}
        public function ext_fNandV($params) {}
/** @var IconFactory $iconFactory */
        public function ext_printFields(/** @var IconFactory $iconFactory */
$theConstants, /** @var IconFactory $iconFactory */
$category) {}
        public function ext_regObjectPositions($constants) {}
        public function ext_regObjects($pre) {}
        public function ext_putValueInConf($key, $var) {}
        public function ext_removeValueInConf($key) {}
        public function ext_depthKeys($arr, $settings) {}
        public function ext_procesInput($http_post_vars, $http_post_files, $theConstants, $tplRow) {}
        public function ext_prevPageWithTemplate($id, $perms_clause) {}
        /**
         * Is set by runThroughTemplates(), previously set via TemplateAnalyzerModuleFunctionController from the outside
         *
         * @return array
         */
        protected function getRootLine() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return DocumentTemplate
         */
        protected function getDocumentTemplate() {}
    }

    /**
     * Provides a simplified layer for making Constant Editor style configuration forms
     */
    class ConfigurationForm extends \typo3\cms\core\typoscript\extendedtemplateservice {
        /**
         * @var array
         */
        public $categories;
        /**
         * @var bool
         */
        public $ext_dontCheckIssetValues;
        /**
         * @var string
         */
        public $ext_CEformName;
        /**
         * @var bool
         */
        public $ext_printAll;
        /**
         * @var array
         */
        public $ext_incomingValues;
        /**
         * @var array
         */
        protected $ext_realValues;

        /**
         * Deprecate this class
         */
        public function __construct() {}
        public function ext_initTSstyleConfig($configTemplate) {}
        public function ext_setValueArray($theConstants, $valueArray) {}
        /**
         * @return array
         */
        public function ext_getCategoriesForModMenu() {}
        public function ext_getForm($cat, $theConstants, $script = '', $addFields = '', $extKey = '', $addFormTag = true) {}
        public function ext_mergeIncomingWithExisting($arr) {}
        public function ext_fNandV($params) {}
        public function ext_putValueInConf($key, $var) {}
        public function ext_removeValueInConf($key) {}
    }

}

namespace TYPO3\CMS\Core\TypoScript\Parser {
    /**
     * The TypoScript parser
     */
    class TypoScriptParser {
        /**
         * TypoScript hierarchy being build during parsing.
         *
         * @var array
         */
        public $setup;
        /**
         * Raw data, the input string exploded by LF
         *
         * @var array
         */
        public $raw;
        /**
         * Pointer to entry in raw data array
         *
         * @var int
         */
        public $rawP;
        /**
         * Holding the value of the last comment
         *
         * @var string
         */
        public $lastComment;
        /**
         * Internally set, used as internal flag to create a multi-line comment (one of those like /* ... * /
         *
         * @var bool
         */
        public $commentSet;
        /**
         * Internally set, when multiline value is accumulated
         *
         * @var bool
         */
        public $multiLineEnabled;
        /**
         * Internally set, when multiline value is accumulated
         *
         * @var string
         */
        public $multiLineObject;
        /**
         * Internally set, when multiline value is accumulated
         *
         * @var array
         */
        public $multiLineValue;
        /**
         * Internally set, when in brace. Counter.
         *
         * @var int
         */
        public $inBrace;
        /**
         * For each condition this flag is set, if the condition is TRUE,
         * else it's cleared. Then it's used by the [ELSE] condition to determine if the next part should be parsed.
         *
         * @var bool
         */
        public $lastConditionTrue;
        /**
         * Tracking all conditions found
         *
         * @var array
         */
        public $sections;
        /**
         * Tracking all matching conditions found
         *
         * @var array
         */
        public $sectionsMatch;
        /**
         * If set, then syntax highlight mode is on; Call the function syntaxHighlight() to use this function
         *
         * @var bool
         */
        public $syntaxHighLight;
        /**
         * Syntax highlight data is accumulated in this array. Used by syntaxHighlight_print() to construct the output.
         *
         * @var array
         */
        public $highLightData;
        /**
         * Syntax highlight data keeping track of the curly brace level for each line
         *
         * @var array
         */
        public $highLightData_bracelevel;
        /**
         * DO NOT register the comments. This is default for the ordinary sitetemplate!
         *
         * @var bool
         */
        public $regComments;
        /**
         * DO NOT register the linenumbers. This is default for the ordinary sitetemplate!
         *
         * @var bool
         */
        public $regLinenumbers;
        /**
         * Error accumulation array.
         *
         * @var array
         */
        public $errors;
        /**
         * Used for the error messages line number reporting. Set externally.
         *
         * @var int
         */
        public $lineNumberOffset;
        /**
         * Line for break point.
         *
         * @var int
         */
        public $breakPointLN;
        /**
         * @var array
         */
        public $highLightStyles;
        /**
         * Additional attributes for the <span> tags for a blockmode line
         *
         * @var string
         */
        public $highLightBlockStyles;
        /**
         * The hex-HTML color for the blockmode
         *
         * @var string
         */
        public $highLightBlockStyles_basecolor;
        /**
         * @var \TYPO3\CMS\Core\TypoScript\ExtendedTemplateService
         */
        public $parentObject;

        public function parse($string, $matchObj = '') {}
        /**
         * Will search for the next condition. When found it will return the line content (the condition value) and have advanced the internal $this->rawP pointer to point to the next line after the condition.
         *
         * @return string The condition value
         * @see parse()
         */
        public function nextDivider() {}
        public function parseSub(array $setup) {}
        protected function executeValueModifier($modifierName, $modifierArgument = null, $currentValue = null) {}
        public function rollParseSub($string, array $setup) {}
        public function getVal($string, $setup) {}
        public function setVal($string, array $setup, $value, $wipeOut = false) {}
        protected function parseNextKeySegment($key) {}
        public function error($err, $num = 2) {}
/** @var AbstractConditionMatcher $conditionMatcher */
        public static function checkIncludeLines(/** @var AbstractConditionMatcher $conditionMatcher */
$string, /** @var AbstractConditionMatcher $conditionMatcher */
$cycle_counter = 1, /** @var AbstractConditionMatcher $conditionMatcher */
$returnFiles = false, /** @var AbstractConditionMatcher $conditionMatcher */
$parentFilenameOrPath = '') {}
        protected static function addImportsFromExternalFiles($typoScript, $cycleCounter, $returnFiles, $includedFiles, $parentFilenameOrPath) {}
        protected static function importExternalTypoScriptFile($filename, $cycleCounter, $returnFiles, array $includedFiles) {}
        public static function includeFile($filename, $cycle_counter = 1, $returnFiles = false, $newString = '', array $includedFiles = [ ], $optionalProperties = '', $parentFilenameOrPath = '') {}
        protected static function includeDirectory($dirPath, $cycle_counter = 1, $returnFiles = false, $newString = '', array $includedFiles = [ ], $optionalProperties = '', $parentFilenameOrPath = '') {}
        protected static function typoscriptIncludeError($error) {}
        public static function checkIncludeLines_array(array $array) {}
        public static function extractIncludes($string, $cycle_counter = 1, array $extractedFileNames = [ ], $parentFilenameOrPath = '') {}
        public static function extractIncludes_array(array $array) {}
        public function doSyntaxHighlight($string, $lineNum = '', $highlightBlockMode = false) {}
        public function regHighLight($code, $pointer, $strlen = -1) {}
        public function syntaxHighlight_print($lineNumDat, $highlightBlockMode) {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
        protected function modifyHTMLColor($color, $R, $G, $B) {}
        protected function modifyHTMLColorAll($color, $all) {}
        /**
         * Get a logger instance
         *
         * This class uses logging mostly in static functions, hence we need a static getter for the logger.
         * Injection of a logger instance via GeneralUtility::makeInstance is not possible.
         *
         * @return LoggerInterface
         */
        protected static function getLogger() {}
    }

}

namespace TYPO3\CMS\Core\Type {
    /**
     * Abstract class for Enumeration.
     * Inspired by SplEnum.
     *
     * The prefix "Abstract" has been left out by intention because
     * a "type" is abstract by definition.
     */
    abstract class Enumeration implements \typo3\cms\core\type\typeinterface {
        /**
         * @var mixed
         */
        protected $value;
        /**
         * @var array
         */
        static protected $enumConstants;

        public function __construct($value = null) {}
        /**
         * @throws Exception\InvalidEnumerationValueException
         * @throws Exception\InvalidEnumerationDefinitionException
         * @internal param string $class
         */
        protected static function loadValues() {}
        protected function setValue($value) {}
        protected function isValid($value) {}
        public static function getConstants($include_default = false) {}
        public static function cast($value) {}
        public function equals($value) {}
        /**
         * @return string
         */
        public function __toString() {}
        public static function getName($value) {}
        public static function getHumanReadableName($value) {}
    }

    /**
     * A generic Type exception
     */
    class Exception extends \typo3\cms\core\exception {}


    /**
     * This is an interface that has to be used by all Core Types.
     * All of them have to implement a __toString() method that is
     * used to get a flatten string for the persistence of the object.
     */
    interface TypeInterface {
        /**
         * Core types must implement the __toString function in order to be
         * serialized to the database;
         *
         * @return string
         */
        function __toString() ;
    }

}

namespace TYPO3\CMS\Core\Type\File {
    /**
     * A SPL FileInfo class providing information related to an image.
     */
    class ImageInfo extends \typo3\cms\core\type\file\fileinfo implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var array
         */
        protected $imageSizes;

        /**
         * Returns the width of the Image.
         *
         * @return int
         */
        public function getWidth() {}
        /**
         * Returns the height of the Image.
         *
         * @return int
         */
        public function getHeight() {}
        /**
         * @return array
         */
        protected function getImageSizes() {}
        /**
         * Try to read SVG as XML file and
         * find width and height
         *
         * @return false|array
         */
        protected function extractSvgImageSizes() {}
        /**
         * @return GraphicalFunctions
         */
        protected function getGraphicalFunctions() {}
    }

    /**
     * A SPL FileInfo class providing general information related to a file.
     */
    class FileInfo extends \splfileinfo implements \typo3\cms\core\type\typeinterface {
        /**
         * Return the mime type of a file.
         *
         * @return string|bool Returns the mime type or FALSE if the mime type could not be discovered
         */
        public function getMimeType() {}
    }

}

namespace TYPO3\CMS\Core\Type\Bitmask {
    /**
     * A class providing constants for bitwise operations on page access check
     */
    class Permission extends \typo3\cms\core\type\enumeration {
        const ALL = 31;
        const PAGE_SHOW = 1;
        const PAGE_EDIT = 2;
        const NOTHING = 0;
        const PAGE_NEW = 8;
        const CONTENT_EDIT = 16;
        const PAGE_DELETE = 4;

    }

    /**
     * A class providing constants for bitwise operations on javascript confirmation popups
     */
    class JsConfirmation extends \typo3\cms\core\type\enumeration {
        const COPY_MOVE_PASTE = 0b00000010;
        const TYPE_CHANGE = 0b00000001;
        const __default = self::ALL;
        const OTHER = 0b10000000;
        const ALL = 255;
        const DELETE = 0b00000100;
        const FE_EDIT = 0b00001000;

        /**
         * Bitmask of allowed values beside 255
         *
         * @var int
         */
        static protected $allowedValues;

        public function matches(JsConfirmation $value) {}
        protected function setValue($value) {}
        protected function isValid($value) {}
    }

}

namespace TYPO3\CMS\Core\Type\Icon {
    /**
     * A class providing constants for icon states
     */
    class IconState extends \typo3\cms\core\type\enumeration {
        const STATE_DISABLED = 'disabled';
        const __default = self::STATE_DEFAULT;
        const STATE_DEFAULT = 'default';

    }

}

namespace TYPO3\CMS\Core\Type\Exception {
    /**
     * Exception for an invalid enumeration definition
     */
    class InvalidEnumerationDefinitionException extends \typo3\cms\core\type\exception {}

    /**
     * Exception for an invalid enumeration value
     */
    class InvalidEnumerationValueException extends \typo3\cms\core\type\exception implements \typo3\cms\core\type\exception\invalidvalueexceptioninterface {}


    /**
     * Interface for Invalid value exception
     */
    interface InvalidValueExceptionInterface {}

}

namespace TYPO3\CMS\Core\Http {
    /**
     * A default HTML response object
     *
     * Highly inspired by ZF zend-diactoros
     *
     * @internal Note that this is not public API yet.
     */
    class HtmlResponse extends \typo3\cms\core\http\response {
        public function __construct($content, $status = 200, array $headers = [ ]) {}
    }

    /**
     * Default implementation for the ResponseInterface of the PSR-7 standard.
     *
     * Highly inspired by https://github.com/phly/http/
     *
     * @internal Note that this is not public API yet.
     */
    class Response extends \typo3\cms\core\http\message implements \psr\http\message\responseinterface {
        /**
         * The HTTP status code of the response
         * @var int $statusCode
         */
        protected $statusCode;
        /**
         * The reason phrase of the response
         * @var string $reasonPhrase
         */
        protected $reasonPhrase;
        /**
         * The standardized and other important HTTP Status Codes
         * @var array
         */
        protected $availableStatusCodes;

        public function __construct($body = 'php://temp', $statusCode = 200, $headers = [ ]) {}
        /**
         * Gets the response status code.
         *
         * The status code is a 3-digit integer result code of the server's attempt
         * to understand and satisfy the request.
         *
         * @return int Status code.
         */
        public function getStatusCode() {}
        public function withStatus($code, $reasonPhrase = '') {}
        /**
         * Gets the response reason phrase associated with the status code.
         *
         * Because a reason phrase is not a required element in a response
         * status line, the reason phrase value MAY be null. Implementations MAY
         * choose to return the default RFC 7231 recommended reason phrase (or those
         * listed in the IANA HTTP Status Code Registry) for the response's
         * status code.
         *
         * @link http://tools.ietf.org/html/rfc7231#section-6
         * @link http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
         * @return string Reason phrase; must return an empty string if none present.
         */
        public function getReasonPhrase() {}
    }

    /**
     * Dispatcher which resolves a target, which was given to the request to call a controller and method (but also a callable)
     * where the request contains a "target" as attribute.
     *
     * Used in eID Frontend Requests, see EidRequestHandler
     */
    class Dispatcher implements \typo3\cms\core\http\dispatcherinterface {
        public function dispatch(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function getCallableFromTarget($target) {}
    }

    /**
     * A default redirect response object
     *
     * Highly inspired by ZF zend-diactoros
     *
     * @internal Note that this is not public API yet.
     */
    class RedirectResponse extends \typo3\cms\core\http\response {
        public function __construct($uri, $status = 302, array $headers = [ ]) {}
    }

    /**
     * Standard values for a JSON response
     *
     * Highly inspired by ZF zend-diactoros
     *
     * @internal Note that this is not public API yet.
     */
    class JsonResponse extends \typo3\cms\core\http\response {
        const DEFAULT_JSON_FLAGS = JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT | JSON_UNESCAPED_SLASHES;

        public function __construct($data = [ ], $status = 200, array $headers = [ ], $encodingOptions = self::DEFAULT_JSON_FLAGS) {}
        public function setPayload(array $data = [ ], $encodingOptions = self::DEFAULT_JSON_FLAGS) : JsonResponse {}
        private function jsonEncode($data, $encodingOptions) {}
    }

    /**
     * Default implementation for the StreamInterface of the PSR-7 standard
     * Acts mainly as a decorator class for streams/resources.
     *
     * Highly inspired by https://github.com/phly/http/
     *
     * @internal Note that this is not public API yet.
     */
    class Stream implements \psr\http\message\streaminterface {
        /**
         * The actual PHP resource
         * @var resource
         */
        protected $resource;
        /**
         * @var string|resource
         */
        protected $stream;

        public function __construct($stream, $mode = 'r') {}
        /**
         * Reads all data from the stream into a string, from the beginning to end.
         *
         * This method MUST attempt to seek to the beginning of the stream before
         * reading data and read the stream until the end is reached.
         *
         * Warning: This could attempt to load a large amount of data into memory.
         *
         * This method MUST NOT raise an exception in order to conform with PHP's
         * string casting operations.
         *
         * @see http://php.net/manual/en/language.oop5.magic.php#object.tostring
         * @return string
         */
        public function __toString() {}
        /**
         * Closes the stream and any underlying resources.
         */
        public function close() {}
        /**
         * Separates any underlying resources from the stream.
         *
         * After the stream has been detached, the stream is in an unusable state.
         *
         * @return resource|null Underlying PHP stream, if any
         */
        public function detach() {}
        /**
         * Get the size of the stream if known.
         *
         * @return int|null Returns the size in bytes if known, or null if unknown.
         */
        public function getSize() {}
        /**
         * Returns the current position of the file read/write pointer
         *
         * @return int Position of the file pointer
         * @throws \RuntimeException on error.
         */
        public function tell() {}
        /**
         * Returns true if the stream is at the end of the stream.
         *
         * @return bool
         */
        public function eof() {}
        /**
         * Returns whether or not the stream is seekable.
         *
         * @return bool
         */
        public function isSeekable() {}
        public function seek($offset, $whence = SEEK_SET) {}
        /**
         * Seek to the beginning of the stream.
         *
         * If the stream is not seekable, this method will raise an exception;
         * otherwise, it will perform a seek(0).
         *
         * @see seek()
         * @link http://www.php.net/manual/en/function.fseek.php
         * @throws \RuntimeException on failure.
         */
        public function rewind() {}
        /**
         * Returns whether or not the stream is writable.
         *
         * @return bool
         */
        public function isWritable() {}
        public function write($string) {}
        /**
         * Returns whether or not the stream is readable.
         *
         * @return bool
         */
        public function isReadable() {}
        public function read($length) {}
        /**
         * Returns the remaining contents in a string
         *
         * @return string
         * @throws \RuntimeException if unable to read or an error occurs while
         *     reading.
         */
        public function getContents() {}
        public function getMetadata($key = null) {}
        public function attach($resource, $mode = 'r') {}
    }

    /**
     * Default implementation for the RequestInterface of the PSR-7 standard
     * It is the base for any request sent BY PHP.
     *
     * Please see ServerRequest for the typical use cases in the framework.
     *
     * Highly inspired by https://github.com/phly/http/
     *
     * @internal Note that this is not public API yet.
     */
    class Request extends \typo3\cms\core\http\message implements \psr\http\message\requestinterface {
        /**
         * The request-target, if it has been provided or calculated.
         * @var string|null
         */
        protected $requestTarget;
        /**
         * The HTTP method, defaults to GET
         *
         * @var string
         */
        protected $method;
        /**
         * Supported HTTP methods
         *
         * @var array
         */
        protected $supportedMethods;
        /**
         * An instance of the Uri object
         * @var UriInterface
         */
        protected $uri;

        public function __construct($uri = null, $method = null, $body = 'php://input', array $headers = [ ]) {}
        /**
         * Retrieves all message header values.
         *
         * The keys represent the header name as it will be sent over the wire, and
         * each value is an array of strings associated with the header.
         *
         *     // Represent the headers as a string
         *     foreach ($message->getHeaders() as $name => $values) {
         *         echo $name . ": " . implode(", ", $values);
         *     }
         *
         *     // Emit headers iteratively:
         *     foreach ($message->getHeaders() as $name => $values) {
         *         foreach ($values as $value) {
         *             header(sprintf('%s: %s', $name, $value), false);
         *         }
         *     }
         *
         * While header names are not case-sensitive, getHeaders() will preserve the
         * exact case in which headers were originally specified.
         *
         * @return array Returns an associative array of the message's headers. Each
         *     key MUST be a header name, and each value MUST be an array of strings
         *     for that header.
         */
        public function getHeaders() {}
        public function getHeader($header) {}
        /**
         * Retrieve the host from the URI instance
         *
         * @return string
         */
        protected function getHostFromUri() {}
        /**
         * Retrieves the message's request target.
         *
         * Retrieves the message's request-target either as it will appear (for
         * clients), as it appeared at request (for servers), or as it was
         * specified for the instance (see withRequestTarget()).
         *
         * In most cases, this will be the origin-form of the composed URI,
         * unless a value was provided to the concrete implementation (see
         * withRequestTarget() below).
         *
         * If no URI is available, and no request-target has been specifically
         * provided, this method MUST return the string "/".
         *
         * @return string
         */
        public function getRequestTarget() {}
        public function withRequestTarget($requestTarget) {}
        /**
         * Retrieves the HTTP method of the request, defaults to GET
         *
         * @return string Returns the request method.
         */
        public function getMethod() {}
        public function withMethod($method) {}
        /**
         * Retrieves the URI instance.
         *
         * This method MUST return a UriInterface instance.
         *
         * @link http://tools.ietf.org/html/rfc3986#section-4.3
         * @return \Psr\Http\Message\UriInterface Returns a UriInterface instance
         *     representing the URI of the request.
         */
        public function getUri() {}
        public function withUri(UriInterface $uri, $preserveHost = false) {}
        protected function validateMethod($method) {}
    }

    /**
     * Represents a URI based on the PSR-7 Standard.
     *
     * Highly inspired by https://github.com/phly/http/
     *
     * @internal Note that this is not public API yet.
     */
    class Uri implements \psr\http\message\uriinterface {
        const UNRESERVED_CHARLIST = 'a-zA-Z0-9_\-\.~';
        const SUBDELIMITER_CHARLIST = '!\$&\'\(\)\*\+,;=';

        /**
         * The default scheme for the URI
         * @var string
         */
        protected $scheme;
        /**
         * @var int[] Associative array containing schemes and their default ports.
         */
        protected $supportedSchemes;
        /**
         * The authority part of the URI
         * @var string
         */
        protected $authority;
        /**
         * The userInfo part of the URI
         * @var string
         */
        protected $userInfo;
        /**
         * The host part of the URI
         * @var string
         */
        protected $host;
        /**
         * The port of the URI (empty if it is the standard port for the scheme)
         * @var int|null
         */
        protected $port;
        /**
         * The path part of the URI (can be empty or /)
         * @var string
         */
        protected $path;
        /**
         * The query part of the URI without the ?
         * @var string
         */
        protected $query;
        /**
         * The fragment part of the URI without the # before
         * @var string
         */
        protected $fragment;

        public function __construct($uri = '') {}
        protected function parseUri($uri) {}
        /**
         * Retrieve the scheme component of the URI.
         *
         * If no scheme is present, this method MUST return an empty string.
         *
         * The value returned MUST be normalized to lowercase, per RFC 3986
         * Section 3.1.
         *
         * The trailing ":" character is not part of the scheme and MUST NOT be
         * added.
         *
         * @see https://tools.ietf.org/html/rfc3986#section-3.1
         * @return string The URI scheme.
         */
        public function getScheme() {}
        /**
         * Retrieve the authority component of the URI.
         *
         * If no authority information is present, this method MUST return an empty
         * string.
         *
         * The authority syntax of the URI is:
         *
         * <pre>
         * [user-info@]host[:port]
         * </pre>
         *
         * If the port component is not set or is the standard port for the current
         * scheme, it SHOULD NOT be included.
         *
         * @see https://tools.ietf.org/html/rfc3986#section-3.2
         * @return string The URI authority, in "[user-info@]host[:port]" format.
         */
        public function getAuthority() {}
        /**
         * Retrieve the user information component of the URI.
         *
         * If no user information is present, this method MUST return an empty
         * string.
         *
         * If a user is present in the URI, this will return that value;
         * additionally, if the password is also present, it will be appended to the
         * user value, with a colon (":") separating the values.
         *
         * The trailing "@" character is not part of the user information and MUST
         * NOT be added.
         *
         * @return string The URI user information, in "username[:password]" format.
         */
        public function getUserInfo() {}
        /**
         * Retrieve the host component of the URI.
         *
         * If no host is present, this method MUST return an empty string.
         *
         * The value returned MUST be normalized to lowercase, per RFC 3986
         * Section 3.2.2.
         *
         * @see http://tools.ietf.org/html/rfc3986#section-3.2.2
         * @return string The URI host.
         */
        public function getHost() {}
        /**
         * Retrieve the port component of the URI.
         *
         * If a port is present, and it is non-standard for the current scheme,
         * this method MUST return it as an integer. If the port is the standard port
         * used with the current scheme, this method SHOULD return null.
         *
         * If no port is present, and no scheme is present, this method MUST return
         * a null value.
         *
         * If no port is present, but a scheme is present, this method MAY return
         * the standard port for that scheme, but SHOULD return null.
         *
         * @return int|null The URI port.
         */
        public function getPort() {}
        /**
         * Retrieve the path component of the URI.
         *
         * The path can either be empty or absolute (starting with a slash) or
         * rootless (not starting with a slash). Implementations MUST support all
         * three syntaxes.
         *
         * Normally, the empty path "" and absolute path "/" are considered equal as
         * defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically
         * do this normalization because in contexts with a trimmed base path, e.g.
         * the front controller, this difference becomes significant. It's the task
         * of the user to handle both "" and "/".
         *
         * The value returned MUST be percent-encoded, but MUST NOT double-encode
         * any characters. To determine what characters to encode, please refer to
         * RFC 3986, Sections 2 and 3.3.
         *
         * As an example, if the value should include a slash ("/") not intended as
         * delimiter between path segments, that value MUST be passed in encoded
         * form (e.g., "%2F") to the instance.
         *
         * @see https://tools.ietf.org/html/rfc3986#section-2
         * @see https://tools.ietf.org/html/rfc3986#section-3.3
         * @return string The URI path.
         */
        public function getPath() {}
        /**
         * Retrieve the query string of the URI.
         *
         * If no query string is present, this method MUST return an empty string.
         *
         * The leading "?" character is not part of the query and MUST NOT be
         * added.
         *
         * The value returned MUST be percent-encoded, but MUST NOT double-encode
         * any characters. To determine what characters to encode, please refer to
         * RFC 3986, Sections 2 and 3.4.
         *
         * As an example, if a value in a key/value pair of the query string should
         * include an ampersand ("&") not intended as a delimiter between values,
         * that value MUST be passed in encoded form (e.g., "%26") to the instance.
         *
         * @see https://tools.ietf.org/html/rfc3986#section-2
         * @see https://tools.ietf.org/html/rfc3986#section-3.4
         * @return string The URI query string.
         */
        public function getQuery() {}
        /**
         * Retrieve the fragment component of the URI.
         *
         * If no fragment is present, this method MUST return an empty string.
         *
         * The leading "#" character is not part of the fragment and MUST NOT be
         * added.
         *
         * The value returned MUST be percent-encoded, but MUST NOT double-encode
         * any characters. To determine what characters to encode, please refer to
         * RFC 3986, Sections 2 and 3.5.
         *
         * @see https://tools.ietf.org/html/rfc3986#section-2
         * @see https://tools.ietf.org/html/rfc3986#section-3.5
         * @return string The URI fragment.
         */
        public function getFragment() {}
        public function withScheme($scheme) {}
        public function withUserInfo($user, $password = null) {}
        public function withHost($host) {}
        public function withPort($port) {}
        public function withPath($path) {}
        public function withQuery($query) {}
        public function withFragment($fragment) {}
        /**
         * Return the string representation as a URI reference.
         *
         * Depending on which components of the URI are present, the resulting
         * string is either a full URI or relative reference according to RFC 3986,
         * Section 4.1. The method concatenates the various components of the URI,
         * using the appropriate delimiters:
         *
         * - If a scheme is present, it MUST be suffixed by ":".
         * - If an authority is present, it MUST be prefixed by "//".
         * - The path can be concatenated without delimiters. But there are two
         *   cases where the path has to be adjusted to make the URI reference
         *   valid as PHP does not allow to throw an exception in __toString():
         *     - If the path is rootless and an authority is present, the path MUST
         *       be prefixed by "/".
         *     - If the path is starting with more than one "/" and no authority is
         *       present, the starting slashes MUST be reduced to one.
         * - If a query is present, it MUST be prefixed by "?".
         * - If a fragment is present, it MUST be prefixed by "#".
         *
         * @see http://tools.ietf.org/html/rfc3986#section-4.1
         * @return string
         */
        public function __toString() {}
        protected function isNonStandardPort($scheme, $host, $port) {}
        protected function sanitizeScheme($scheme) {}
        protected function sanitizePath($path) {}
        protected function sanitizeQuery($query) {}
        protected function splitQueryValue($value) {}
        protected function sanitizeFragment($fragment) {}
        protected function sanitizeQueryOrFragment($value) {}
    }

    /**
     * Class UploadedFile which represents one uploaded file, usually coming
     * from $_FILES, according to PSR-7 standard.
     *
     * Highly inspired by https://github.com/phly/http/
     *
     * @internal Note that this is not public API yet.
     */
    class UploadedFile implements \psr\http\message\uploadedfileinterface {
        /**
         * @var string|null
         */
        protected $file;
        /**
         * @var StreamInterface|null
         */
        protected $stream;
        /**
         * @var string
         */
        protected $clientFilename;
        /**
         * @var string
         */
        protected $clientMediaType;
        /**
         * @var int
         */
        protected $error;
        /**
         * @var bool
         */
        protected $moved;
        /**
         * @var int
         */
        protected $size;

        public function __construct($input, $size, $errorStatus, $clientFilename = null, $clientMediaType = null) {}
        /**
         * Retrieve a stream representing the uploaded file.
         * Returns a StreamInterface instance, representing the uploaded file. The purpose of this method
         * is to allow utilizing native PHP stream functionality to manipulate the file upload, such as
         * stream_copy_to_stream() (though the result will need to be decorated in a native PHP stream wrapper
         * to work with such functions).
         *
         * If the moveTo() method has been called previously, this method raises an exception.
         *
         * @return StreamInterface Stream representation of the uploaded file.
         * @throws \RuntimeException in cases when no stream is available or can be created.
         */
        public function getStream() {}
        public function moveTo($targetPath) {}
        /**
         * Retrieve the file size.
         * Usually returns the value stored in the "size" key of
         * the file in the $_FILES array if available, as PHP calculates this based
         * on the actual size transmitted.
         *
         * @return int|null The file size in bytes or null if unknown.
         */
        public function getSize() {}
        /**
         * Retrieve the error associated with the uploaded file.
         * Usually returns the value stored in the "error" key of
         * the file in the $_FILES array.
         *
         * The return value MUST be one of PHP's UPLOAD_ERR_XXX constants.
         *
         * If the file was uploaded successfully, this method MUST return
         * UPLOAD_ERR_OK.
         *
         * @see http://php.net/manual/en/features.file-upload.errors.php
         * @return int One of PHP's UPLOAD_ERR_XXX constants.
         */
        public function getError() {}
        /**
         * Retrieve the filename sent by the client.
         * Usually returns the value stored in the "name" key of
         * the file in the $_FILES array.
         *
         * Do not trust the value returned by this method. A client could send
         * a malicious filename with the intention to corrupt or hack your
         * application.
         *
         * @return string|null The filename sent by the client or null if none was provided.
         */
        public function getClientFilename() {}
        /**
         * Retrieve the media type sent by the client.
         * Usually returns the value stored in the "type" key of
         * the file in the $_FILES array.
         *
         * Do not trust the value returned by this method. A client could send
         * a malicious media type with the intention to corrupt or hack your
         * application.
         *
         * @return string|null The media type sent by the client or null if none was provided.
         */
        public function getClientMediaType() {}
    }

    /**
     * Class RequestFactory to create Request objects
     * Returns PSR-7 Request objects (currently the Guzzle implementation).
     */
    class RequestFactory {
        public function request(string $uri, string $method = 'GET', array $options = [ ]) : ResponseInterface {}
        /**
         * Creates the client to do requests
         * @return ClientInterface
         */
        protected function getClient() : ClientInterface {}
    }

    /**
     * Represents a typical request incoming from the server to be processed
     * by the TYPO3 Core. The original request is built from the ServerRequestFactory
     * inside TYPO3's Bootstrap.
     *
     * Note that the PSR-7 standard works with immutable value objects, meaning that
     * any modification to a Request object using the "with" methods will result
     * in a new Request object.
     *
     * Highly inspired by https://github.com/phly/http/
     *
     * @internal Note that this is not public API yet.
     */
    class ServerRequest extends \typo3\cms\core\http\request implements \psr\http\message\serverrequestinterface {
        /**
         * @var array
         */
        protected $attributes;
        /**
         * @var array
         */
        protected $cookieParams;
        /**
         * @var array
         */
        protected $parsedBody;
        /**
         * @var array
         */
        protected $queryParams;
        /**
         * @var array
         */
        protected $serverParams;
        /**
         * @var array
         */
        protected $uploadedFiles;

        public function __construct($uri = null, $method = null, $body = 'php://input', array $headers = [ ], array $serverParams = [ ], array $uploadedFiles = null) {}
        /**
         * Retrieve server parameters.
         *
         * Retrieves data related to the incoming request environment,
         * typically derived from PHP's $_SERVER superglobal. The data IS NOT
         * REQUIRED to originate from $_SERVER.
         *
         * @return array
         */
        public function getServerParams() {}
        /**
         * Retrieve cookies.
         *
         * Retrieves cookies sent by the client to the server.
         *
         * The data MUST be compatible with the structure of the $_COOKIE
         * superglobal.
         *
         * @return array
         */
        public function getCookieParams() {}
        public function withCookieParams(array $cookies) {}
        /**
         * Retrieve query string arguments.
         *
         * Retrieves the deserialized query string arguments, if any.
         *
         * Note: the query params might not be in sync with the URI or server
         * params. If you need to ensure you are only getting the original
         * values, you may need to parse the query string from `getUri()->getQuery()`
         * or from the `QUERY_STRING` server param.
         *
         * @return array
         */
        public function getQueryParams() {}
        public function withQueryParams(array $query) {}
        /**
         * Retrieve normalized file upload data.
         *
         * This method returns upload metadata in a normalized tree, with each leaf
         * an instance of Psr\Http\Message\UploadedFileInterface.
         *
         * These values MAY be prepared from $_FILES or the message body during
         * instantiation, or MAY be injected via withUploadedFiles().
         *
         * @return array An array tree of UploadedFileInterface instances; an empty
         *     array MUST be returned if no data is present.
         */
        public function getUploadedFiles() {}
        public function withUploadedFiles(array $uploadedFiles) {}
        /**
         * Retrieve any parameters provided in the request body.
         *
         * If the request Content-Type is either application/x-www-form-urlencoded
         * or multipart/form-data, and the request method is POST, this method MUST
         * return the contents of $_POST.
         *
         * Otherwise, this method may return any results of deserializing
         * the request body content; as parsing returns structured content, the
         * potential types MUST be arrays or objects only. A null value indicates
         * the absence of body content.
         *
         * @return array|object|null The deserialized body parameters, if any.
         *     These will typically be an array or object.
         */
        public function getParsedBody() {}
        public function withParsedBody($data) {}
        /**
         * Retrieve attributes derived from the request.
         *
         * The request "attributes" may be used to allow injection of any
         * parameters derived from the request: e.g., the results of path
         * match operations; the results of decrypting cookies; the results of
         * deserializing non-form-encoded message bodies; etc. Attributes
         * will be application and request specific, and CAN be mutable.
         *
         * @return array Attributes derived from the request.
         */
        public function getAttributes() {}
        public function getAttribute($name, $default = null) {}
        public function withAttribute($name, $value) {}
        public function withoutAttribute($name) {}
        protected function validateUploadedFiles(array $uploadedFiles) {}
    }

    /**
     * Default implementation for the MessageInterface of the PSR-7 standard
     * It is the base for any request or response for PSR-7.
     *
     * Highly inspired by https://github.com/phly/http/
     *
     * @internal Note that this is not public API yet.
     */
    class Message implements \psr\http\message\messageinterface {
        /**
         * The HTTP Protocol version, defaults to 1.1
         * @var string
         */
        protected $protocolVersion;
        /**
         * Associative array containing all headers of this Message
         * This is a mixed-case list of the headers (as due to the specification)
         * @var array
         */
        protected $headers;
        /**
         * Lowercased version of all headers, in order to check if a header is set or not
         * this way a lot of checks are easier to be set
         * @var array
         */
        protected $lowercasedHeaderNames;
        /**
         * The body as a Stream object
         * @var StreamInterface
         */
        protected $body;

        /**
         * Retrieves the HTTP protocol version as a string.
         *
         * The string MUST contain only the HTTP version number (e.g., "1.1", "1.0").
         *
         * @return string HTTP protocol version.
         */
        public function getProtocolVersion() {}
        public function withProtocolVersion($version) {}
        /**
         * Retrieves all message header values.
         *
         * The keys represent the header name as it will be sent over the wire, and
         * each value is an array of strings associated with the header.
         *
         *     // Represent the headers as a string
         *     foreach ($message->getHeaders() as $name => $values) {
         *         echo $name . ": " . implode(", ", $values);
         *     }
         *
         *     // Emit headers iteratively:
         *     foreach ($message->getHeaders() as $name => $values) {
         *         foreach ($values as $value) {
         *             header(sprintf('%s: %s', $name, $value), false);
         *         }
         *     }
         *
         * While header names are not case-sensitive, getHeaders() will preserve the
         * exact case in which headers were originally specified.
         *
         * @return array Returns an associative array of the message's headers. Each
         *     key MUST be a header name, and each value MUST be an array of strings
         *     for that header.
         */
        public function getHeaders() {}
        public function hasHeader($name) {}
        public function getHeader($name) {}
        public function getHeaderLine($name) {}
        public function withHeader($name, $value) {}
        public function withAddedHeader($name, $value) {}
        public function withoutHeader($name) {}
        /**
         * Gets the body of the message.
         *
         * @return \Psr\Http\Message\StreamInterface Returns the body as a stream.
         */
        public function getBody() {}
        public function withBody(StreamInterface $body) {}
        protected function assertHeaders(array $headers) {}
        protected function filterHeaders(array $originalHeaders) {}
        protected function arrayContainsOnlyStrings(array $data) {}
        protected function validateHeaderValues(array $values) {}
        public function filter($value) {}
        public function validateHeaderName($name) {}
        public function isValidHeaderValue($value) {}
    }

    /**
     * Class ServerRequestFactory to create ServerRequest objects
     *
     * Highly inspired by https://github.com/phly/http/
     *
     * @internal Note that this is not public API yet.
     */
    class ServerRequestFactory {
        /**
         * Create a request from the original superglobal variables.
         *
         * @return ServerRequest
         * @throws \InvalidArgumentException when invalid file values given
         * @internal Note that this is not public API yet.
         */
        public static function fromGlobals() {}
        protected static function prepareHeaders(array $server) {}
        protected static function normalizeUploadedFiles(array $files) {}
        protected static function createUploadedFile(array $value) {}
    }


    /**
     * The interface for a request handler
     * see RequestHandler in EXT:backend/Classes/Http/ and EXT:frontend/Classes/Http
     *
     * @api
     */
    interface RequestHandlerInterface {
        function handleRequest(\Psr\Http\Message\ServerRequestInterface $request) ;
        function canHandleRequest(\Psr\Http\Message\ServerRequestInterface $request) ;
        /**
         * Returns the priority - how eager the handler is to actually handle the
         * request. An integer > 0 means "I want to handle this request" where
         * "100" is default. "0" means "I am a fallback solution".
         *
         * @return int The priority of the request handler
         * @api
         */
        function getPriority() ;
    }

    /**
     * An interface for dispatcher that delegate requests/responses to a certain callable, typically a
     * controller / action combination.
     *
     * Is usually called from the RequestHandler,
     */
    interface DispatcherInterface {
        function dispatch(ServerRequestInterface $request, ResponseInterface $response) ;
    }

}

namespace TYPO3\CMS\Core\Hooks {
    /**
     * DataHandler hook class to check the integrity of submitted be_groups data
     */
    class BackendUserGroupIntegrityCheck {
/** @var $defaultFlashMessageQueue FlashMessageQueue */
        public function processDatamap_afterDatabaseOperations(/** @var $defaultFlashMessageQueue FlashMessageQueue */
$status, /** @var $defaultFlashMessageQueue FlashMessageQueue */
$table, /** @var $defaultFlashMessageQueue FlashMessageQueue */
$id, /** @var $defaultFlashMessageQueue FlashMessageQueue */
$fieldArray, /** @var $defaultFlashMessageQueue FlashMessageQueue */
$parentObject) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Core\History {
    /**
     * Used to save any history to a record
     *
     * @internal should only be used by the TYPO3 Core
     */
    class RecordHistoryStore {
        const USER_ANONYMOUS = '';
        const USER_FRONTEND = 'FE';
        const ACTION_DELETE = 4;
        const ACTION_MOVE = 3;
        const USER_BACKEND = 'BE';
        const ACTION_UNDELETE = 5;
        const ACTION_MODIFY = 2;
        const ACTION_ADD = 1;

        /**
         * @var int|null
         */
        protected $userId;
        protected $userType;
        protected $originalUserId;
        protected $tstamp;
        protected $workspaceId;

        public function __construct(string $userType = self::USER_BACKEND, int $userId = null, int $originalUserId = null, int $tstamp = null, int $workspaceId = 0) {}
        public function addRecord(string $table, int $uid, array $payload) : string {}
        public function modifyRecord(string $table, int $uid, array $payload) : string {}
        public function deleteRecord(string $table, int $uid) : string {}
        public function undeleteRecord(string $table, int $uid) : string {}
        public function moveRecord(string $table, int $uid, array $payload) : string {}
        /**
         * @return Connection
         */
        protected function getDatabaseConnection() : Connection {}
    }

}

namespace TYPO3\CMS\Core\LinkHandling {
    /**
     * Class LinkService, responsible to find what kind of resource (type) is used
     * to link to (email, external url, file, page etc)
     * with the possibility to get a system-wide understandable "urn" to identify
     * what type it actually is, based on the scheme or prefix.
     */
    class LinkService implements \typo3\cms\core\singletoninterface {
        const TYPE_PAGE = 'page';
        const TYPE_FOLDER = 'folder';
        const TYPE_FILE = 'file';
        const TYPE_EMAIL = 'email';
        const TYPE_URL = 'url';
        const TYPE_UNKNOWN = 'unknown';
        const TYPE_RECORD = 'record';

        /**
         * All registered LinkHandlers
         *
         * @var LinkHandlingInterface[]
         */
        protected $handlers;

        /**
         * LinkService constructor initializes the registered handlers.
         */
        public function __construct() {}
        public function resolve(string $linkParameter) : array {}
        public function resolveByStringRepresentation(string $urn) : array {}
        public function asString(array $parameters) : string {}
    }

    /**
     * Interface for classes which are transforming a tag link hrefs for folders, in order to
     * use FAL to store them in database, which means that folders can be moved in the fileadmin
     * without breaking folder links in the frontend/backend
     */
    class FolderLinkHandler implements \typo3\cms\core\linkhandling\linkhandlinginterface {
        /**
         * The Base URN
         * @var string
         */
        protected $baseUrn;
        /**
         * The resource factory to resolve
         * @var \TYPO3\CMS\Core\Resource\ResourceFactory
         */
        protected $resourceFactory;

        public function asString(array $parameters) : string {}
        public function resolveHandlerData(array $data) : array {}
        /**
         * Initializes the resource factory (only once)
         *
         * @return ResourceFactory
         */
        protected function getResourceFactory() : ResourceFactory {}
    }

    /**
     * Resolves emails
     */
    class EmailLinkHandler implements \typo3\cms\core\linkhandling\linkhandlinginterface {
        public function asString(array $parameters) : string {}
        public function resolveHandlerData(array $data) : array {}
    }

    /**
     * Interface for classes which are transforming a tag link hrefs for folders, in order to
     * use FAL to store them in database, which means that files can be moved in the fileadmin
     * without breaking file links in the frontend/backend
     */
    class FileLinkHandler implements \typo3\cms\core\linkhandling\linkhandlinginterface {
        /**
         * The Base URN
         * @var string
         */
        protected $baseUrn;
        /**
         * The resource factory object to resolve file objects
         * @var ResourceFactory
         */
        protected $resourceFactory;

        public function asString(array $parameters) : string {}
        public function resolveHandlerData(array $data) : array {}
        /**
         * Initializes the resource factory (only once)
         *
         * @return ResourceFactory
         */
        protected function getResourceFactory() : ResourceFactory {}
    }

    /**
     * Resolves links to records and the parameters given
     */
    class RecordLinkHandler implements \typo3\cms\core\linkhandling\linkhandlinginterface {
        /**
         * The Base URN for this link handling to act on
         *
         * @var string
         */
        protected $baseUrn;

        public function asString(array $parameters) : string {}
        public function resolveHandlerData(array $data) : array {}
    }

    /**
     * Resolves URLs (simple, no magic needed)
     */
    class UrlLinkHandler implements \typo3\cms\core\linkhandling\linkhandlinginterface {
        public function asString(array $parameters) : string {}
        public function resolveHandlerData(array $data) : array {}
        protected function addHttpSchemeAsFallback(string $url) : string {}
    }

    /**
     * Resolves links to pages and the parameters given
     */
    class PageLinkHandler implements \typo3\cms\core\linkhandling\linkhandlinginterface {
        /**
         * The Base URN for this link handling to act on
         * @var string
         */
        protected $baseUrn;

        public function asString(array $parameters) : string {}
        public function resolveHandlerData(array $data) : array {}
    }

    /**
     * Class to resolve and convert the "old" link information (email, external url, file, page etc)
     * to a URL or new format for migration
     *
     * @internal
     */
    class LegacyLinkNotationConverter {
        /**
         * @var ResourceFactory
         */
        protected $resourceFactory;

        public function resolve(string $linkParameter) : array {}
        protected function resolvePageRelatedParameters(string $data) : array {}
        protected function getFileOrFolderObjectFromMixedIdentifier(string $mixedIdentifier) : array {}
        /**
         * Initializes the resource factory (only once)
         *
         * @return ResourceFactory
         */
        protected function getResourceFactory() : ResourceFactory {}
    }


    /**
     * Interface for classes which are transforming a tag link hrefs to records or resources
     * basically any URLs that should not be saved directly in the database on as is basis
     * since they might be moved, changed by admin working in backend
     */
    interface LinkHandlingInterface {
        function asString(array $parameters) : string ;
        function resolveHandlerData(array $data) : array ;
    }

}

namespace TYPO3\CMS\Core\LinkHandling\Exception {
    /**
     * Exception raised if no matching link handler is found.
     */
    class UnknownLinkHandlerException extends \typo3\cms\core\exception {}

    /**
     * Exception raised if urn is not known.
     */
    class UnknownUrnException extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Core\Log {
    /**
     * Logger to log events and data for different components.
     */
    class Logger implements \psr\log\loggerinterface {
        /**
         * Logger name or component for which this logger is meant to be used for.
         * This should be a dot-separated name and should normally be based on
         * the class name or the name of a subsystem, such as
         * core.t3lib.cache.manager, core.backend.workspaces or extension.news
         *
         * @var string
         */
        protected $name;
        /**
         * Minimum log level, anything below this level will be ignored.
         *
         * @var int
         */
        protected $minimumLogLevel;
        /**
         * Writers used by this logger
         *
         * @var array
         */
        protected $writers;
        /**
         * Processors used by this logger
         *
         * @var array
         */
        protected $processors;

        public function __construct($name) {}
        protected function setMinimumLogLevel($level) {}
        /**
         * Gets the minimum log level for which log records are written.
         *
         * @return int Minimum log level
         */
        protected function getMinimumLogLevel() {}
        /**
         * Gets the logger's name.
         *
         * @return string Logger name.
         */
        public function getName() {}
        public function addWriter($minimumLevel, Writer\WriterInterface $writer) {}
        /**
         * Returns all configured writers indexed by log level
         *
         * @return array
         */
        public function getWriters() {}
        public function addProcessor($minimumLevel, Processor\ProcessorInterface $processor) {}
        /**
         * Returns all added processors indexed by log level
         *
         * @return array
         */
        public function getProcessors() {}
/** @var $record \TYPO3\CMS\Core\Log\LogRecord */
        public function log(/** @var $record \TYPO3\CMS\Core\Log\LogRecord */
$level, /** @var $record \TYPO3\CMS\Core\Log\LogRecord */
$message, /** @var $record \TYPO3\CMS\Core\Log\LogRecord */
array $data = [ ]) {}
        protected function callProcessors(LogRecord $record) {}
        protected function writeLog(LogRecord $record) {}
        public function emergency($message, array $data = [ ]) {}
        public function alert($message, array $data = [ ]) {}
        public function critical($message, array $data = [ ]) {}
        public function error($message, array $data = [ ]) {}
        public function warning($message, array $data = [ ]) {}
        public function notice($message, array $data = [ ]) {}
        public function info($message, array $data = [ ]) {}
        public function debug($message, array $data = [ ]) {}
    }

    /**
     * Log levels according to RFC 3164
     */
    class LogLevel {
        const DEBUG = 7;
        const WARNING = 4;
        const NOTICE = 5;
        const INFO = 6;
        const ERROR = 3;
        const CRITICAL = 2;
        const ALERT = 1;
        const EMERGENCY = 0;

        /**
         * Reverse look up of log level to level name.
         *
         * @var array
         */
        static protected $levels;

        public static function getName($level) {}
        public static function isValidLevel($level) {}
        public static function validateLevel($level) {}
        public static function normalizeLevel($level) {}
    }

    /**
     * Global LogManager that keeps track of global logging information.
     *
     * Inspired by java.util.logging
     */
    class LogManager implements \typo3\cms\core\log\logmanagerinterface, \typo3\cms\core\singletoninterface {
        const CONFIGURATION_TYPE_WRITER = 'writer';
        const CONFIGURATION_TYPE_PROCESSOR = 'processor';

        /**
         * Loggers to retrieve them for repeated use.
         *
         * @var array
         */
        protected $loggers;
        /**
         * Default / global / root logger.
         *
         * @var \TYPO3\CMS\Core\Log\Logger
         */
        protected $rootLogger;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * For use in unit test context only. Resets the internal logger registry.
         */
        public function reset() {}
/** @var $logger \TYPO3\CMS\Core\Log\Logger */
        public function getLogger(/** @var $logger \TYPO3\CMS\Core\Log\Logger */
$name = '') {}
        public function registerLogger($name) {}
        /**
         * For use in unit test context only.
         *
         * @return array
         */
        public function getLoggerNames() {}
/** @var $logWriter \TYPO3\CMS\Core\Log\Writer\WriterInterface */
        protected function setWritersForLogger(/** @var $logWriter \TYPO3\CMS\Core\Log\Writer\WriterInterface */
Logger $logger) {}
/** @var $logProcessor \TYPO3\CMS\Core\Log\Processor\ProcessorInterface */
        protected function setProcessorsForLogger(/** @var $logProcessor \TYPO3\CMS\Core\Log\Processor\ProcessorInterface */
Logger $logger) {}
        protected function getConfigurationForLogger($configurationType, $loggerName) {}
    }

    /**
     * Log record
     */
    class LogRecord implements \arrayaccess {
        /**
         * Unique ID of the request
         *
         * @var string
         */
        protected $requestId;
        /**
         * Creation timestamp with microseconds
         *
         * @var float
         */
        protected $created;
        /**
         * The component where the record was created
         *
         * @var string
         */
        protected $component;
        /**
         * Severity level
         *
         * @var int
         */
        protected $level;
        /**
         * Log message one-liner
         *
         * @var string
         */
        protected $message;
        /**
         * Additional log data
         *
         * @var array
         */
        protected $data;
        /**
         * Gettable properties for ArrayAccess
         *
         * @var array
         */
        private $gettableProperties;
        /**
         * Settable properties for ArrayAccess
         *
         * @var array
         */
        private $settableProperties;

        public function __construct($component = '', $level, $message, array $data = [ ]) {}
        public function setComponent($component) {}
        /**
         * Returns the component
         *
         * @return string Component key
         */
        public function getComponent() {}
        public function setCreated($created) {}
        /**
         * Returns the creation time
         *
         * @return float Creation time as float
         */
        public function getCreated() {}
        public function setLevel($level) {}
        /**
         * Returns the severity level
         *
         * @see \TYPO3\CMS\Core\Log\Level
         * @return int Severity level
         */
        public function getLevel() {}
        public function setData($data) {}
        /**
         * Returns the log data
         *
         * @return array
         */
        public function getData() {}
        public function addData(array $data) {}
        public function setMessage($message) {}
        /**
         * Returns the log message
         *
         * @return string Log message
         */
        public function getMessage() {}
        public function setRequestId($requestId) {}
        /**
         * Returns the request ID
         *
         * @return string
         */
        public function getRequestId() {}
        /**
         * Convert record to string for simple output, like echo().
         * Contents of data array is appended as JSON-encoded string
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Convert record to array
         *
         * @return array
         */
        public function toArray() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
    }

    /**
     * An exception when something is wrong with the file handling
     */
    class Exception extends \typo3\cms\core\exception {}


    /**
     * LogManager Contract for delivering log instances.
     */
    interface LogManagerInterface {
        function getLogger($name = '') ;
    }

}

namespace TYPO3\CMS\Core\Log\Processor {
    /**
     * Common memory processor methods.
     */
    abstract class AbstractMemoryProcessor extends \typo3\cms\core\log\processor\abstractprocessor {
        /**
         * Allocated memory usage type to use
         * If set, the real size of memory allocated from system is used.
         * Otherwise the memory used by emalloc() is used.
         *
         * @var bool
         * @see memory_get_usage()
         * @see memory_get_peak_usage()
         */
        protected $realMemoryUsage;
        /**
         * Whether the size is formatted, e.g. in megabytes
         *
         * @var bool
         * @see \TYPO3\CMS\Core\Utility\GeneralUtility::formatSize()
         */
        protected $formatSize;

        public function setRealMemoryUsage($realMemoryUsage) {}
        /**
         * Returns the allocated memory usage type
         *
         * @return bool
         */
        public function getRealMemoryUsage() {}
        public function setFormatSize($formatSize) {}
        /**
         * Returns whether size should be formatted
         *
         * @return bool
         */
        public function getFormatSize() {}
    }

    /**
     * Web log processor to automatically add web request related data to a log
     * record.
     */
    class WebProcessor extends \typo3\cms\core\log\processor\abstractprocessor {
        public function processLogRecord(\TYPO3\CMS\Core\Log\LogRecord $logRecord) {}
    }

    /**
     * Memory peak usage processor methods.
     */
    class MemoryPeakUsageProcessor extends \typo3\cms\core\log\processor\abstractmemoryprocessor {
        public function processLogRecord(\TYPO3\CMS\Core\Log\LogRecord $logRecord) {}
    }

    /**
     * A log processor that does nothing. Used in unit tests.
     */
    class NullProcessor extends \typo3\cms\core\log\processor\abstractprocessor {
        public function processLogRecord(\TYPO3\CMS\Core\Log\LogRecord $logRecord) {}
    }

    /**
     * Abstract implementation of a log processor
     */
    abstract class AbstractProcessor implements \typo3\cms\core\log\processor\processorinterface {
        public function __construct(array $options = [ ]) {}
    }

    /**
     * Introspection processor to automatically add where the log record came from.
     */
    class IntrospectionProcessor extends \typo3\cms\core\log\processor\abstractprocessor {
        /**
         * Add the full backtrace to the log entry or
         * just the last entry of the backtrace
         *
         * @var bool
         */
        protected $appendFullBackTrace;
        /**
         * Number of entries to shift from the backtrace
         *
         * @var int
         */
        protected $shiftBackTraceLevel;
        /**
         * Temporary storage of the preceding backtrace line number
         *
         * @var string
         */
        private $precedingBacktraceLine;
        /**
         * Temporary storage of the preceding backtrace file
         *
         * @var string
         */
        private $precedingBacktraceFile;

        public function setShiftBackTraceLevel($shiftBackTraceLevel) {}
        public function setAppendFullBackTrace($appendFullBackTrace) {}
        public function processLogRecord(LogRecord $logRecord) {}
        protected function shiftBacktraceLevel(array $backtrace) {}
        /**
         * Get the debug backtrace
         *
         * @return array
         */
        protected function getDebugBacktrace() {}
    }

    /**
     * Memory usage processor methods.
     */
    class MemoryUsageProcessor extends \typo3\cms\core\log\processor\abstractmemoryprocessor {
        public function processLogRecord(\TYPO3\CMS\Core\Log\LogRecord $logRecord) {}
    }


    /**
     * Log processor interface
     *
     * Processors provide additional data in an automatic way, without having to
     * collect that data yourself.
     */
    interface ProcessorInterface {
        function processLogRecord(\TYPO3\CMS\Core\Log\LogRecord $logRecord) ;
    }

}

namespace TYPO3\CMS\Core\Log\Writer {
    /**
     * Log writer that writes the log records into PHP error log.
     */
    class PhpErrorLogWriter extends \typo3\cms\core\log\writer\abstractwriter {
        public function writeLog(LogRecord $record) {}
    }

    /**
     * Log writer that writes the log records into a file.
     */
    class FileWriter extends \typo3\cms\core\log\writer\abstractwriter {
        /**
         * Log file path, relative to PATH_site
         *
         * @var string
         */
        protected $logFile;
        /**
         * Default log file path
         *
         * @var string
         */
        protected $defaultLogFileTemplate;
        /**
         * Log file handle storage
         *
         * To avoid concurrent file handles on a the same file when using several FileWriter instances,
         * we share the file handles in a static class variable
         *
         * @static
         * @var array
         */
        static protected $logFileHandles;

        public function __construct(array $options = [ ]) {}
        /**
         * Destructor, closes the log file handle
         */
        public function __destruct() {}
        public function setLogFile($relativeLogFile) {}
        /**
         * Gets the path to the log file.
         *
         * @return string Path to the log file.
         */
        public function getLogFile() {}
        public function writeLog(LogRecord $record) {}
        /**
         * Opens the log file handle
         *
         * @throws \RuntimeException if the log file can't be opened.
         */
        protected function openLogFile() {}
        /**
         * Closes the log file handle.
         */
        protected function closeLogFile() {}
        /**
         * Creates the log file with correct permissions
         * and parent directories, if needed
         */
        protected function createLogFile() {}
        protected function createHtaccessFile($htaccessFile) {}
        /**
         * Returns the path to the default log file.
         *
         * Uses the defaultLogFileTemplate and replaces the %s placeholder with a short MD5 hash
         * based on a static string and the current encryption key.
         *
         * @return string
         */
        protected function getDefaultLogFileName() {}
    }

    /**
     * Null writer - just forgets about everything
     */
    class NullWriter extends \typo3\cms\core\log\writer\abstractwriter {
        public function writeLog(LogRecord $record) {}
    }

    /**
     * Log writer that writes to syslog
     */
    class SyslogWriter extends \typo3\cms\core\log\writer\abstractwriter {
        /**
         * List of valid syslog facility names.
         * private as it's not supposed to be changed.
         *
         * @var int[] Facilities
         */
        private $facilities;
        /**
         * Type of program that is logging to syslog.
         *
         * @var int
         */
        protected $facility;

        public function __construct(array $options = [ ]) {}
        /**
         * Destructor, closes connection to syslog.
         */
        public function __destruct() {}
        public function setFacility($facility) {}
        public function getMessageForSyslog(LogRecord $record) {}
        public function writeLog(LogRecord $record) {}
    }

    /**
     * Abstract implementation of a log writer
     */
    abstract class AbstractWriter implements \typo3\cms\core\log\writer\writerinterface {
        public function __construct(array $options = [ ]) {}
    }

    /**
     * Log writer that writes the log records into a database table.
     */
    class DatabaseWriter extends \typo3\cms\core\log\writer\abstractwriter {
        /**
         * Table to write the log records to.
         *
         * @var string
         */
        protected $logTable;

        public function setLogTable($tableName) {}
        /**
         * Get name of database log table
         *
         * @return string Database table name
         */
        public function getLogTable() {}
        public function writeLog(LogRecord $record) {}
    }


    /**
     * Log writer interface
     */
    interface WriterInterface {
        function writeLog(\TYPO3\CMS\Core\Log\LogRecord $record) ;
    }

}

namespace TYPO3\CMS\Core\Log\Exception {
    /**
     * An exception when something is wrong with the configuration for a LogWriter
     */
    class InvalidLogWriterConfigurationException extends \typo3\cms\core\log\exception {}

    /**
     * An exception when something is wrong with the configuration for a LogProcessor
     */
    class InvalidLogProcessorConfigurationException extends \typo3\cms\core\log\exception {}

}

namespace TYPO3\CMS\Core\Integrity {
    /**
     * This class holds functions used by the TYPO3 backend to check the integrity of the database (The DBint module, 'lowlevel' extension)
     *
     * Depends on \TYPO3\CMS\Core\Database\RelationHandler
     *
     * @todo Need to really extend this class when the DataHandler library has been updated and the whole API is better defined. There are some known bugs in this library. Further it would be nice with a facility to not only analyze but also clean up!
     * @see \TYPO3\CMS\Lowlevel\Controller\DatabaseIntegrityController::func_relations(), \TYPO3\CMS\Lowlevel\Controller\DatabaseIntegrityController::func_records()
     */
    class DatabaseIntegrityCheck {
        /**
         * @var bool If set, genTree() includes deleted pages. This is default.
         */
        public $genTree_includeDeleted;
        /**
         * @var bool If set, genTree() includes versionized pages/records. This is default.
         */
        public $genTree_includeVersions;
        /**
         * @var bool If set, genTree() includes records from pages.
         */
        public $genTree_includeRecords;
        /**
         * @var array Will hold id/rec pairs from genTree()
         */
        public $page_idArray;
        /**
         * @var array
         */
        public $rec_idArray;
        /**
         * @var array
         */
        public $checkFileRefs;
        /**
         * @var array From the select-fields
         */
        public $checkSelectDBRefs;
        /**
         * @var array From the group-fields
         */
        public $checkGroupDBRefs;
        /**
         * @var array Statistics
         */
        public $recStats;
        /**
         * @var array
         */
        public $lRecords;
        /**
         * @var string
         */
        public $lostPagesList;

        public function genTree($theID, $depthData = '', $versions = false) {}
        public function genTree_records($theID, $_ = '', $table = '', $versions = false) {}
        public function lostRecords($pid_list) {}
        public function fixLostRecord($table, $uid) {}
        public function countRecords($pid_list) {}
        public function getGroupFields($mode) {}
        public function getFileFields($uploadfolder) {}
        public function getDBFields($theSearchTable) {}
        public function selectNonEmptyRecordsWithFkeys($fkey_arrays) {}
        /**
         * Depends on selectNonEmpty.... to be executed first!!
         *
         * @return array Report over files; keys are "moreReferences", "noReferences", "noFile", "error
         */
        public function testFileRefs() {}
        public function testDBRefs($theArray) {}
        public function whereIsRecordReferenced($searchTable, $id) {}
        public function whereIsFileReferenced($uploadFolder, $filename) {}
    }

}

namespace TYPO3\CMS\Core\DataHandling {
    /**
     * The main data handler class which takes care of correctly updating and inserting records.
     * This class was formerly known as TCEmain.
     *
     * This is the TYPO3 Core Engine class for manipulation of the database
     * This class is used by eg. the tce_db.php script which provides an the interface for POST forms to this class.
     *
     * Dependencies:
     * - $GLOBALS['TCA'] must exist
     * - $GLOBALS['LANG'] must exist
     *
     * tce_db.php for further comments and SYNTAX! Also see document 'TYPO3 Core API' for details.
     */
    class DataHandler implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * If TRUE, the default log-messages will be stored. This should not be necessary if the locallang-file for the
         * log-display is properly configured. So disabling this will just save some database-space as the default messages are not saved.
         *
         * @var bool
         */
        public $storeLogMessages;
        /**
         * If TRUE, actions are logged to sys_log.
         *
         * @var bool
         */
        public $enableLogging;
        /**
         * If TRUE, the datamap array is reversed in the order, which is a nice thing if you're creating a whole new
         * bunch of records.
         *
         * @var bool
         */
        public $reverseOrder;
        /**
         * If TRUE, only fields which are different from the database values are saved! In fact, if a whole input array
         * is similar, it's not saved then.
         *
         * @var bool
         */
        public $checkSimilar;
        /**
         * This will read the record after having updated or inserted it. If anything is not properly submitted an error
         * is written to the log. This feature consumes extra time by selecting records
         *
         * @var bool
         */
        public $checkStoredRecords;
        /**
         * If set, values '' and 0 will equal each other when the stored records are checked.
         *
         * @var bool
         */
        public $checkStoredRecords_loose;
        /**
         * If this is set, then a page is deleted by deleting the whole branch under it (user must have
         * delete permissions to it all). If not set, then the page is deleted ONLY if it has no branch.
         *
         * @var bool
         */
        public $deleteTree;
        /**
         * If set, then the 'hideAtCopy' flag for tables will be ignored.
         *
         * @var bool
         */
        public $neverHideAtCopy;
        /**
         * If set, then the TCE class has been instantiated during an import action of a T3D
         *
         * @var bool
         */
        public $isImporting;
        /**
         * If set, then transformations are NOT performed on the input.
         *
         * @var bool
         */
        public $dontProcessTransformations;
        /**
         * Will distinguish between translations (with parent) and localizations (without parent) while still using the same methods to copy the records
         * TRUE: translation of a record connected to the default language
         * FALSE: localization of a record without connection to the default language
         *
         * @var bool
         */
        protected $useTransOrigPointerField;
        /**
         * TRUE: (traditional) Updates when record is saved. For flexforms, updates if change is made to the localized value.
         * FALSE: Will not update anything.
         * "FORCE_FFUPD" (string): Like TRUE, but will force update to the FlexForm Field
         *
         * @var bool|string
         */
        public $updateModeL10NdiffData;
        /**
         * If TRUE, the translation diff. fields will in fact be reset so that they indicate that all needs to change again!
         * It's meant as the opposite of declaring the record translated.
         *
         * @var bool
         */
        public $updateModeL10NdiffDataClear;
        /**
         * If TRUE, workspace restrictions are bypassed on edit an create actions (process_datamap()).
         * YOU MUST KNOW what you do if you use this feature!
         *
         * @var bool
         */
        public $bypassWorkspaceRestrictions;
        /**
         * If TRUE, file handling of attached files (addition, deletion etc) is bypassed - the value is saved straight away.
         * YOU MUST KNOW what you are doing with this feature!
         *
         * @var bool
         */
        public $bypassFileHandling;
        /**
         * If TRUE, access check, check for deleted etc. for records is bypassed.
         * YOU MUST KNOW what you are doing if you use this feature!
         *
         * @var bool
         */
        public $bypassAccessCheckForRecords;
        /**
         * Comma-separated list. This list of tables decides which tables will be copied. If empty then none will.
         * If '*' then all will (that the user has permission to of course)
         *
         * @var string
         */
        public $copyWhichTables;
        /**
         * If 0 then branch is NOT copied.
         * If 1 then pages on the 1st level is copied.
         * If 2 then pages on the second level is copied ... and so on
         *
         * @var int
         */
        public $copyTree;
        /**
         * [table][fields]=value: New records are created with default values and you can set this array on the
         * form $defaultValues[$table][$field] = $value to override the default values fetched from TCA.
         * If ->setDefaultsFromUserTS is called UserTSconfig default values will overrule existing values in this array
         * (thus UserTSconfig overrules externally set defaults which overrules TCA defaults)
         *
         * @var array
         */
        public $defaultValues;
        /**
         * [table][fields]=value: You can set this array on the form $overrideValues[$table][$field] = $value to
         * override the incoming data. You must set this externally. You must make sure the fields in this array are also
         * found in the table, because it's not checked. All columns can be set by this array!
         *
         * @var array
         */
        public $overrideValues;
        /**
         * [filename]=alternative_filename: Use this array to force another name onto a file.
         * Eg. if you set ['/tmp/blablabal'] = 'my_file.txt' and '/tmp/blablabal' is set for a certain file-field,
         * then 'my_file.txt' will be used as the name instead.
         *
         * @var array
         */
        public $alternativeFileName;
        /**
         * Array [filename]=alternative_filepath: Same as alternativeFileName but with relative path to the file
         *
         * @var array
         */
        public $alternativeFilePath;
        /**
         * If entries are set in this array corresponding to fields for update, they are ignored and thus NOT updated.
         * You could set this array from a series of checkboxes with value=0 and hidden fields before the checkbox with 1.
         * Then an empty checkbox will disable the field.
         *
         * @var array
         */
        public $data_disableFields;
        /**
         * Use this array to validate suggested uids for tables by setting [table]:[uid]. This is a dangerous option
         * since it will force the inserted record to have a certain UID. The value just have to be TRUE, but if you set
         * it to "DELETE" it will make sure any record with that UID will be deleted first (raw delete).
         * The option is used for import of T3D files when synchronizing between two mirrored servers.
         * As a security measure this feature is available only for Admin Users (for now)
         *
         * @var array
         */
        public $suggestedInsertUids;
        /**
         * Object. Call back object for FlexForm traversal. Useful when external classes wants to use the
         * iteration functions inside DataHandler for traversing a FlexForm structure.
         *
         * @var object
         */
        public $callBackObj;
        /**
         * Contains mapping of auto-versionized records.
         *
         * @var array
         */
        public $autoVersionIdMap;
        /**
         * When new elements are created, this array contains a map between their "NEW..." string IDs and the eventual UID they got when stored in database
         *
         * @var array
         */
        public $substNEWwithIDs;
        /**
         * Like $substNEWwithIDs, but where each old "NEW..." id is mapped to the table it was from.
         *
         * @var array
         */
        public $substNEWwithIDs_table;
        /**
         * Holds the tables and there the ids of newly created child records from IRRE
         *
         * @var array
         */
        public $newRelatedIDs;
        /**
         * This array is the sum of all copying operations in this class. May be READ from outside, thus partly public.
         *
         * @var array
         */
        public $copyMappingArray_merged;
        /**
         * Per-table array with UIDs that have been deleted.
         *
         * @var array
         */
        protected $deletedRecords;
        /**
         * A map between input file name and final destination for files being attached to records.
         *
         * @var array
         */
        public $copiedFileMap;
        /**
         * Contains [table][id][field] of fiels where RTEmagic images was copied. Holds old filename as key and new filename as value.
         *
         * @var array
         */
        public $RTEmagic_copyIndex;
        /**
         * Errors are collected in this variable.
         *
         * @var array
         */
        public $errorLog;
        /**
         * Fields from the pages-table for which changes will trigger a pagetree refresh
         *
         * @var array
         */
        public $pagetreeRefreshFieldsFromPages;
        /**
         * Indicates whether the pagetree needs a refresh because of important changes
         *
         * @var bool
         */
        public $pagetreeNeedsRefresh;
        /**
         * The user-object the script uses. If not set from outside, this is set to the current global $BE_USER.
         *
         * @var BackendUserAuthentication
         */
        public $BE_USER;
        /**
         * Will be set to uid of be_user executing this script
         *
         * @var int
         */
        public $userid;
        /**
         * Will be set to username of be_user executing this script
         *
         * @var string
         */
        public $username;
        /**
         * Will be set if user is admin
         *
         * @var bool
         */
        public $admin;
        /**
         * Can be overridden from $GLOBALS['TYPO3_CONF_VARS']
         *
         * @var array
         */
        public $defaultPermissions;
        /**
         * The list of <table>-<fields> that cannot be edited by user. This is compiled from TCA/exclude-flag combined with non_exclude_fields for the user.
         *
         * @var array
         */
        protected $excludedTablesAndFields;
        /**
         * Data submitted from the form view, used to control behaviours,
         * e.g. this is used to activate/deactivate fields and thus store NULL values
         *
         * @var array
         */
        protected $control;
        /**
         * Set with incoming data array
         *
         * @var array
         */
        public $datamap;
        /**
         * Set with incoming cmd array
         *
         * @var array
         */
        public $cmdmap;
        /**
         * List of changed old record ids to new records ids
         *
         * @var array
         */
        protected $mmHistoryRecords;
        /**
         * List of changed old record ids to new records ids
         *
         * @var array
         */
        protected $historyRecords;
        /**
         * Permission mapping
         *
         * @var array
         */
        public $pMap;
        /**
         * Integer: The interval between sorting numbers used with tables with a 'sorting' field defined. Min 1
         *
         * @var int
         */
        public $sortIntervals;
        /**
         * Used by function checkRecordUpdateAccess() to store whether a record is updatable or not.
         *
         * @var array
         */
        protected $recUpdateAccessCache;
        /**
         * User by function checkRecordInsertAccess() to store whether a record can be inserted on a page id
         *
         * @var array
         */
        protected $recInsertAccessCache;
        /**
         * Caching array for check of whether records are in a webmount
         *
         * @var array
         */
        protected $isRecordInWebMount_Cache;
        /**
         * Caching array for page ids in webmounts
         *
         * @var array
         */
        protected $isInWebMount_Cache;
        /**
         * Caching for collecting TSconfig for page ids
         *
         * @var array
         */
        protected $cachedTSconfig;
        /**
         * Used for caching page records in pageInfo()
         *
         * @var array
         */
        protected $pageCache;
        /**
         * For accumulation of MM relations that must be written after new records are created.
         *
         * @var array
         */
        public $dbAnalysisStore;
        /**
         * For accumulation of files which must be deleted after processing of all input content
         *
         * @var array
         */
        public $removeFilesStore;
        /**
         * Uploaded files, set by process_uploads()
         *
         * @var array
         */
        public $uploadedFileArray;
        /**
         * Used for tracking references that might need correction after operations
         *
         * @var array
         */
        public $registerDBList;
        /**
         * Used for tracking references that might need correction in pid field after operations (e.g. IRRE)
         *
         * @var array
         */
        public $registerDBPids;
        /**
         * Used by the copy action to track the ids of new pages so subpages are correctly inserted!
         * THIS is internally cleared for each executed copy operation! DO NOT USE THIS FROM OUTSIDE!
         * Read from copyMappingArray_merged instead which is accumulating this information.
         *
         * NOTE: This is used by some outside scripts (e.g. hooks), as the results in $copyMappingArray_merged
         * are only available after an action has been completed.
         *
         * @var array
         */
        public $copyMappingArray;
        /**
         * Array used for remapping uids and values at the end of process_datamap
         *
         * @var array
         */
        public $remapStack;
        /**
         * Array used for remapping uids and values at the end of process_datamap
         * (e.g. $remapStackRecords[<table>][<uid>] = <index in $remapStack>)
         *
         * @var array
         */
        public $remapStackRecords;
        /**
         * Array used for checking whether new children need to be remapped
         *
         * @var array
         */
        protected $remapStackChildIds;
        /**
         * Array used for executing addition actions after remapping happened (set processRemapStack())
         *
         * @var array
         */
        protected $remapStackActions;
        /**
         * Array used for executing post-processing on the reference index
         *
         * @var array
         */
        protected $remapStackRefIndex;
        /**
         * Array used for additional calls to $this->updateRefIndex
         *
         * @var array
         */
        public $updateRefIndexStack;
        /**
         * Tells, that this DataHandler instance was called from \TYPO3\CMS\Impext\ImportExport.
         * This variable is set by \TYPO3\CMS\Impext\ImportExport
         *
         * @var array
         */
        public $callFromImpExp;
        /**
         * basicFileFunctions object
         * For "singleton" file-manipulation object
         *
         * @var BasicFileUtility
         */
        public $fileFunc;
        /**
         * Set to "currentRecord" during checking of values.
         *
         * @var array
         */
        public $checkValue_currentRecord;
        /**
         * A signal flag used to tell file processing that auto versioning has happened and hence certain action should be applied.
         *
         * @var bool
         */
        public $autoVersioningUpdate;
        /**
         * Disable delete clause
         *
         * @var bool
         */
        protected $disableDeleteClause;
        /**
         * @var array
         */
        protected $checkModifyAccessListHookObjects;
        /**
         * @var array
         */
        protected $version_remapMMForVersionSwap_reg;
        /**
         * The outer most instance of \TYPO3\CMS\Core\DataHandling\DataHandler:
         * This object instantiates itself on versioning and localization ...
         *
         * @var \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        protected $outerMostInstance;
        /**
         * Internal cache for collecting records that should trigger cache clearing
         *
         * @var array
         */
        static protected $recordsToClearCacheFor;
        /**
         * Internal cache for pids of records which were deleted. It's not possible
         * to retrieve the parent folder/page at a later stage
         *
         * @var array
         */
        static protected $recordPidsForDeletedRecords;
        /**
         * Runtime Cache to store and retrieve data computed for a single request
         *
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected $runtimeCache;
        /**
         * Prefix for the cache entries of nested element calls since the runtimeCache has a global scope.
         *
         * @var string
         */
        protected $cachePrefixNestedElementCalls;

        /**
         * Sets up the data handler cache and some additional options, the main logic is done in the start() method.
         */
        public function __construct() {}
        public function setControl(array $control) {}
        public function start($data, $cmd, $altUserObject = null) {}
        public function setMirror($mirror) {}
        public function setDefaultsFromUserTS($userTS) {}
        public function process_uploads($postFiles) {}
        public function process_uploads_traverseArray($outputArr, $inputArr, $keyToSet) {}
        public function hook_processDatamap_afterDatabaseOperations($hookObjectsArr, $status, $table, $id, $fieldArray) {}
        /**
         * Gets the 'checkModifyAccessList' hook objects.
         * The first call initializes the accordant objects.
         *
         * @return array The 'checkModifyAccessList' hook objects (if any)
         * @throws \UnexpectedValueException
         */
        protected function getCheckModifyAccessListHookObjects() {}
        /** @var $tce DataHandler */
        public function process_datamap() {}
        protected function normalizeTimeFormat(string $table, string $value, string $dbType) : string {}
        protected function resolveSortingAndPidForNewRecord(string $table, int $pid, array $fieldArray) : array {}
        public function placeholderShadowing($table, $id) {}
        public function getPlaceholderTitleForTableLabel($table, $placeholderContent = null) {}
        public function fillInFieldArray($table, $id, $fieldArray, $incomingFieldArray, $realPid, $status, $tscPID) {}
        public function checkValue($table, $field, $value, $id, $status, $realPid, $tscPID) {}
        public function checkValue_SW($res, $value, $tcaFieldConf, $table, $id, $curValue, $status, $realPid, $recFID, $field, $uploadedFiles, $tscPID, array $additionalData = null) {}
        protected function checkValueForInternalReferences(array $res, $value, $tcaFieldConf, $table, $id, $field) {}
        protected function checkValueForText($value, $tcaFieldConf, $table, $id, $realPid, $field) {}
        protected function checkValueForInput($value, $tcaFieldConf, $table, $id, $realPid, $field) {}
/** @var ItemProcessingService $processingService */
        protected function checkValueForCheck(/** @var ItemProcessingService $processingService */
$res, /** @var ItemProcessingService $processingService */
$value, /** @var ItemProcessingService $processingService */
$tcaFieldConf, /** @var ItemProcessingService $processingService */
$table, /** @var ItemProcessingService $processingService */
$id, /** @var ItemProcessingService $processingService */
$realPid, /** @var ItemProcessingService $processingService */
$field) {}
        protected function checkValueForRadio($res, $value, $tcaFieldConf, $table, $id, $pid, $field) {}
        protected function checkValueForGroupSelect($res, $value, $tcaFieldConf, $table, $id, $curValue, $status, $recFID, $uploadedFiles, $field) {}
        protected function applyFiltersToValues(array $tcaFieldConfiguration, array $values) {}
/** @var $dbAnalysis RelationHandler */
        public function checkValue_group_select_file(/** @var $dbAnalysis RelationHandler */
$valueArray, /** @var $dbAnalysis RelationHandler */
$tcaFieldConf, /** @var $dbAnalysis RelationHandler */
$curValue, /** @var $dbAnalysis RelationHandler */
$uploadedFileArray, /** @var $dbAnalysis RelationHandler */
$status, /** @var $dbAnalysis RelationHandler */
$table, /** @var $dbAnalysis RelationHandler */
$id, /** @var $dbAnalysis RelationHandler */
$recFID) {}
        protected function checkValueForFlex($res, $value, $tcaFieldConf, $table, $id, $curValue, $status, $realPid, $recFID, $tscPID, $uploadedFiles, $field) {}
/** @var $flexObj FlexFormTools */
        public function checkValue_flexArray2Xml(/** @var $flexObj FlexFormTools */
$array, /** @var $flexObj FlexFormTools */
$addPrologue = false) {}
        protected function _ACTION_FLEX_FORMdata($valueArray, $actionCMDs) {}
        public function checkValue_inline($res, $value, $tcaFieldConf, $PP, $field, array $additionalData = null) {}
        public function checkValueForInline($res, $value, $tcaFieldConf, $table, $id, $status, $field, array $additionalData = null) {}
        public function checkValue_checkMax($tcaFieldConf, $valueArray) {}
        public function getUnique($table, $field, $value, $id, $newPid = 0) {}
        protected function getUniqueCountStatement(string $value, string $table, string $field, int $uid, int $pid) : Statement {}
        public function getRecordsWithSameValue($tableName, $uid, $fieldName, $value, $pageId = 0) {}
        public function checkValue_text_Eval($value, $evalArray, $is_in) {}
        public function checkValue_input_Eval($value, $evalArray, $is_in) {}
/** @var $flashMessageService FlashMessageService */
        protected function checkValue_input_ValidateEmail(/** @var $flashMessageService FlashMessageService */
$value, /** @var $flashMessageService FlashMessageService */
$set) {}
/** @var $oldRelations_dbAnalysis RelationHandler */
        public function checkValue_group_select_processDBdata(/** @var $oldRelations_dbAnalysis RelationHandler */
$valueArray, /** @var $oldRelations_dbAnalysis RelationHandler */
$tcaFieldConf, /** @var $oldRelations_dbAnalysis RelationHandler */
$id, /** @var $oldRelations_dbAnalysis RelationHandler */
$status, /** @var $oldRelations_dbAnalysis RelationHandler */
$type, /** @var $oldRelations_dbAnalysis RelationHandler */
$currentTable, /** @var $oldRelations_dbAnalysis RelationHandler */
$currentField) {}
        public function checkValue_group_select_explodeSelectGroupValue($value) {}
        public function checkValue_flex_procInData($dataPart, $dataPart_current, $uploadedFiles, $dataStructure, $pParams, $callBackFunc = '', array $workspaceOptions = [ ]) {}
        public function checkValue_flex_procInData_travDS($dataValues, $dataValues_current, $uploadedFiles, $DSelements, $pParams, $callBackFunc, $structurePath, array $workspaceOptions = [ ]) {}
/** @var $dbAnalysis RelationHandler */
        protected function checkValue_inline_processDBdata(/** @var $dbAnalysis RelationHandler */
$valueArray, /** @var $dbAnalysis RelationHandler */
$tcaFieldConf, /** @var $dbAnalysis RelationHandler */
$id, /** @var $dbAnalysis RelationHandler */
$status, /** @var $dbAnalysis RelationHandler */
$table, /** @var $dbAnalysis RelationHandler */
$field, /** @var $dbAnalysis RelationHandler */
array $additionalData = null) {}
        /**
         * Processing the cmd-array
         * See "TYPO3 Core API" for a description of the options.
         *
         * @return void|bool
         */
        public function process_cmdmap() {}
/** @var $copyTCE DataHandler */
        public function copyRecord(/** @var $copyTCE DataHandler */
$table, /** @var $copyTCE DataHandler */
$uid, /** @var $copyTCE DataHandler */
$destPid, /** @var $copyTCE DataHandler */
$first = false, /** @var $copyTCE DataHandler */
$overrideValues = [ ], /** @var $copyTCE DataHandler */
$excludeFields = '', /** @var $copyTCE DataHandler */
$language = 0, /** @var $copyTCE DataHandler */
$ignoreLocalization = false) {}
        public function copyPages($uid, $destPid) {}
        /**
         * Compile a list of tables that should be copied along when a page is about to be copied.
         *
         * First, get the list that the user is allowed to modify (all if admin),
         * and then check against a possible limitation within "DataHandler->copyWhichTables" if not set to "*"
         * to limit the list further down
         *
         * @return array
         */
        protected function getAllowedTablesToCopyWhenCopyingAPage() : array {}
        public function copySpecificPage($uid, $destPid, $copyTablesArray, $first = false) {}
        public function copyRecord_raw($table, $uid, $pid, $overrideArray = [ ], array $workspaceOptions = [ ]) {}
        public function insertNewCopyVersion($table, $fieldArray, $realPid) {}
        public function copyRecord_procBasedOnFieldType($table, $uid, $field, $value, $row, $conf, $realDestPid, $language = 0, array $workspaceOptions = [ ]) {}
/** @var $dbAnalysis RelationHandler */
        protected function copyRecord_processManyToMany(/** @var $dbAnalysis RelationHandler */
$table, /** @var $dbAnalysis RelationHandler */
$uid, /** @var $dbAnalysis RelationHandler */
$field, /** @var $dbAnalysis RelationHandler */
$value, /** @var $dbAnalysis RelationHandler */
$conf, /** @var $dbAnalysis RelationHandler */
$language) {}
/** @var $dbAnalysis RelationHandler */
        protected function copyRecord_processInline(/** @var $dbAnalysis RelationHandler */
$table, /** @var $dbAnalysis RelationHandler */
$uid, /** @var $dbAnalysis RelationHandler */
$field, /** @var $dbAnalysis RelationHandler */
$value, /** @var $dbAnalysis RelationHandler */
$row, /** @var $dbAnalysis RelationHandler */
$conf, /** @var $dbAnalysis RelationHandler */
$realDestPid, /** @var $dbAnalysis RelationHandler */
$language, /** @var $dbAnalysis RelationHandler */
array $workspaceOptions, /** @var $dbAnalysis RelationHandler */
$inlineSubType) {}
        public function copyRecord_flexFormCallBack($pParams, $dsConf, $dataValue, $_1, $_2, $_3, $workspaceOptions) {}
/** @var $dbAnalysis RelationHandler */
        public function copyRecord_procFilesRefs(/** @var $dbAnalysis RelationHandler */
$conf, /** @var $dbAnalysis RelationHandler */
$uid, /** @var $dbAnalysis RelationHandler */
$value) {}
/** @var ReferenceIndex $sysRefObj */
        public function copyRecord_fixRTEmagicImages(/** @var ReferenceIndex $sysRefObj */
$table, /** @var ReferenceIndex $sysRefObj */
$theNewSQLID) {}
        public function copyL10nOverlayRecords($table, $uid, $destPid, $first = false, $overrideValues = [ ], $excludeFields = '') {}
        protected function copy_remapTranslationSourceField($table, $l10nRecords, $languageSourceMap) {}
        public function moveRecord($table, $uid, $destPid) {}
        public function moveRecord_raw($table, $uid, $destPid) {}
        public function moveRecord_procFields($table, $uid, $destPid) {}
        public function moveRecord_procBasedOnFieldType($table, $uid, $destPid, $field, $value, $conf) {}
        public function moveL10nOverlayRecords($table, $uid, $destPid, $originalRecordDestinationPid) {}
        public function localize($table, $uid, $language) {}
/** @var DataHandler $tce */
        protected function inlineLocalizeSynchronize(/** @var DataHandler $tce */
$table, /** @var DataHandler $tce */
$id, /** @var DataHandler $tce */
$command) {}
        public function deleteAction($table, $id) {}
        public function deleteEl($table, $uid, $noRecordCheck = false, $forceHardDelete = false) {}
        public function deleteVersionsForRecord($table, $uid, $forceHardDelete) {}
        public function undeleteRecord($table, $uid) {}
        public function deleteRecord($table, $uid, $noRecordCheck = false, $forceHardDelete = false, $undeleteRecord = false) {}
/** @var ReferenceIndex $refIndexObj */
        public function deleteRecord_flexFormCallBack(/** @var ReferenceIndex $refIndexObj */
$dsArr, /** @var ReferenceIndex $refIndexObj */
$dataValue, /** @var ReferenceIndex $refIndexObj */
$PA, /** @var ReferenceIndex $refIndexObj */
$structurePath, /** @var ReferenceIndex $refIndexObj */
$pObj) {}
/** @var $flashMessageService FlashMessageService */
        public function deletePages(/** @var $flashMessageService FlashMessageService */
$uid, /** @var $flashMessageService FlashMessageService */
$force = false, /** @var $flashMessageService FlashMessageService */
$forceHardDelete = false) {}
        public function deleteSpecificPage($uid, $forceHardDelete = false) {}
/** @var DataHandler $dataHandler */
        protected function copyMovedRecordToNewLocation(/** @var DataHandler $dataHandler */
$table, /** @var DataHandler $dataHandler */
$uid) {}
        public function canDeletePage($uid) {}
        public function cannotDeleteRecord($table, $id) {}
        public function isRecordUndeletable($table, $uid) {}
        public function deleteRecord_procFields($table, $uid, $undeleteRecord = false) {}
/** @var RelationHandler $dbAnalysis */
        public function deleteRecord_procBasedOnFieldType(/** @var RelationHandler $dbAnalysis */
$table, /** @var RelationHandler $dbAnalysis */
$uid, /** @var RelationHandler $dbAnalysis */
$field, /** @var RelationHandler $dbAnalysis */
$value, /** @var RelationHandler $dbAnalysis */
$conf, /** @var RelationHandler $dbAnalysis */
$undeleteRecord = false) {}
        public function deleteL10nOverlayRecords($table, $uid) {}
        public function versionizeRecord($table, $id, $label, $delete = false) {}
/** @var $dbAnalysis RelationHandler */
        public function version_remapMMForVersionSwap(/** @var $dbAnalysis RelationHandler */
$table, /** @var $dbAnalysis RelationHandler */
$id, /** @var $dbAnalysis RelationHandler */
$swapWith) {}
/** @var $dbAnalysis RelationHandler */
        public function version_remapMMForVersionSwap_flexFormCallBack(/** @var $dbAnalysis RelationHandler */
$pParams, /** @var $dbAnalysis RelationHandler */
$dsConf, /** @var $dbAnalysis RelationHandler */
$dataValue, /** @var $dbAnalysis RelationHandler */
$dataValue_ext1, /** @var $dbAnalysis RelationHandler */
$dataValue_ext2, /** @var $dbAnalysis RelationHandler */
$path) {}
        public function version_remapMMForVersionSwap_execSwap($table, $id, $swapWith) {}
        /**
         * Returns an instance of DataHandler for handling local datamaps/cmdmaps
         *
         * @return DataHandler
         */
        protected function getLocalTCE() {}
        /**
         * Processes the fields with references as registered during the copy process. This includes all FlexForm fields which had references.
         */
        public function remapListedDBRecords() {}
        public function remapListedDBRecords_flexFormCallBack($pParams, $dsConf, $dataValue, $dataValue_ext1, $dataValue_ext2) {}
        public function remapListedDBRecords_procDBRefs($conf, $value, $MM_localUid, $table) {}
/** @var $dbAnalysis RelationHandler */
        public function remapListedDBRecords_procInline(/** @var $dbAnalysis RelationHandler */
$conf, /** @var $dbAnalysis RelationHandler */
$value, /** @var $dbAnalysis RelationHandler */
$uid, /** @var $dbAnalysis RelationHandler */
$table) {}
        /**
         * Processes the $this->remapStack at the end of copying, inserting, etc. actions.
         * The remapStack takes care about the correct mapping of new and old uids in case of relational data.
         */
        public function processRemapStack() {}
        protected function updateFlexFormData($flexFormId, array $modifications) {}
        protected function triggerRemapAction($table, $id, array $callback, array $arguments, $forceRemapStackActions = false) {}
        public function addRemapAction($table, $id, array $callback, array $arguments) {}
        public function addRemapStackRefIndex($table, $id) {}
        public function getVersionizedIncomingFieldArray($table, $id, $incomingFieldArray, $registerDBList) {}
/** @var $hookObject DataHandlerCheckModifyAccessListHookInterface */
        public function checkModifyAccessList(/** @var $hookObject DataHandlerCheckModifyAccessListHookInterface */
$table) {}
        public function isRecordInWebMount($table, $id) {}
        public function isInWebMount($pid) {}
        public function checkRecordUpdateAccess($table, $id, $data = false, $hookObjectsArr = null) {}
        public function checkRecordInsertAccess($insertTable, $pid, $action = 1) {}
        public function isTableAllowedForThisPage($page_uid, $checkTable) {}
        public function doesRecordExist($table, $id, $perms) {}
        protected function doesRecordExist_pageLookUp($id, $perms, $columns = ['uid']) {}
        public function doesBranchExist($inList, $pid, $perms, $recurse) {}
        public function tableReadOnly($table) {}
        public function tableAdminOnly($table) {}
        public function destNotInsideSelf($destinationId, $id) {}
        /**
         * Generate an array of fields to be excluded from editing for the user. Based on "exclude"-field in TCA and a look up in non_exclude_fields
         * Will also generate this list for admin-users so they must be check for before calling the function
         *
         * @return array Array of [table]-[field] pairs to exclude from editing.
         */
        public function getExcludeListArray() {}
        public function doesPageHaveUnallowedTables($page_uid, $doktype) {}
        public function pageInfo($id, $field) {}
        public function recordInfo($table, $id, $fieldList) {}
        protected function recordInfoWithPermissionCheck(string $table, int $id, $perms, string $fieldList = '*') {}
        public function getRecordProperties($table, $id, $noWSOL = false) {}
        public function getRecordPropertiesFromRow($table, $row) {}
        public function eventPid($table, $uid, $pid) {}
        public function updateDB($table, $id, $fieldArray) {}
        public function insertDB($table, $id, $fieldArray, $newVersion = false, $suggestedUid = 0, $dontSetNewIdIndex = false) {}
        public function checkStoredRecord($table, $id, $fieldArray, $action) {}
        public function setHistory($table, $id, $logId) {}
        /**
         * @return RecordHistoryStore
         */
        protected function getRecordHistoryStore() : RecordHistoryStore {}
/** @var $refIndexObj ReferenceIndex */
        public function updateRefIndex(/** @var $refIndexObj ReferenceIndex */
$table, /** @var $refIndexObj ReferenceIndex */
$id) {}
        public function getSortNumber($table, $uid, $pid) {}
        public function resorting($table, $pid, $sortRow, $return_SortNumber_After_This_Uid) {}
        protected function getPreviousLocalizedRecordUid($table, $uid, $pid, $language) {}
        public function setTSconfigPermissions($fieldArray, $TSConfig_p) {}
        public function newFieldArray($table) {}
        public function addDefaultPermittedLanguageIfNotSet($table, $incomingFieldArray) {}
        public function overrideFieldArray($table, $data) {}
        public function compareFieldArrayWithCurrentAndUnset($table, $id, $fieldArray) {}
        protected function isSubmittedValueEqualToStoredValue($submittedValue, $storedValue, $storedType, $allowNull = false) {}
        public function assemblePermissions($string) {}
        public function convNumEntityToByteValue($input) {}
        /**
         * Disables the delete clause for fetching records.
         * In general only undeleted records will be used. If the delete
         * clause is disabled, also deleted records are taken into account.
         */
        public function disableDeleteClause() {}
        public function deleteClause($table) {}
        protected function addDeleteRestriction(QueryRestrictionContainerInterface $restrictions) {}
        protected function getOriginalParentOfRecord($table, $uid) {}
        public function getTCEMAIN_TSconfig($tscPID) {}
        public function getTableEntries($table, $TSconfig) {}
        public function getPID($table, $uid) {}
        /**
         * Executing dbAnalysisStore
         * This will save MM relations for new records but is executed after records are created because we need to know the ID of them
         */
        public function dbAnalysisStoreExec() {}
        /**
         * Removing files registered for removal before exit
         */
        public function removeRegisteredFiles() {}
        public function int_pageTreeInfo($CPtable, $pid, $counter, $rootID) {}
        /**
         * List of all tables (those administrators has access to = array_keys of $GLOBALS['TCA'])
         *
         * @return array Array of all TCA table names
         */
        public function compileAdminTables() {}
        public function fixUniqueInPid($table, $uid) {}
        public function fixCopyAfterDuplFields($table, $uid, $prevUid, $update, $newData = [ ]) {}
        public function extFileFields($table) {}
        protected function castReferenceValue($value, array $configuration) {}
        public function isReferenceField($conf) {}
        public function getInlineFieldType($conf) {}
        public function getCopyHeader($table, $pid, $field, $value, $count, $prevTitle = '') {}
        public function prependLabel($table) {}
        public function resolvePid($table, $pid) {}
        public function clearPrefixFromValue($table, $value) {}
        public function extFileFunctions($table, $field, $filelist) {}
        protected function checkForRecordsFromDisallowedTables(array $pageIds) {}
        public function isRecordCopied($table, $uid) {}
        public function registerRecordIdForPageCacheClearing($table, $uid, $pid = null) {}
        /**
         * Do the actual clear cache
         */
        protected function processClearCacheQueue() {}
        protected function prepareCacheFlush($table, $uid, $pid) {}
        public function clear_cacheCmd($cacheCmd) {}
        public function log($table, $recuid, $action, $recpid, $error, $details, $details_nr = -1, $data = [ ], $event_pid = -1, $NEWid = '') {}
        public function newlog($message, $error = 0) {}
        public function newlog2($message, $table, $uid, $pid = null, $error = 0) {}
        /**
         * Print log error messages from the operations of this script instance
         */
        public function printLogErrorMessages() {}
        protected function getDefaultLanguagePageId(int $pageId) : int {}
        public function insertUpdateDB_preprocessBasedOnFieldType($table, $fieldArray) {}
        public function hasDeletedRecord($tableName, $uid) {}
        public function getAutoVersionId($table, $id) {}
        protected function overlayAutoVersionId($table, $id) {}
        protected function addNewValuesToRemapStackChildIds(array $idValues) {}
/** @var PlainDataResolver $resolver */
        protected function resolveVersionedRecords(/** @var PlainDataResolver $resolver */
$tableName, /** @var PlainDataResolver $resolver */
$fieldNames, /** @var PlainDataResolver $resolver */
$sortingField, /** @var PlainDataResolver $resolver */
array $liveIds) {}
        /**
         * Gets the outer most instance of \TYPO3\CMS\Core\DataHandling\DataHandler
         * Since \TYPO3\CMS\Core\DataHandling\DataHandler can create nested objects of itself,
         * this method helps to determine the first (= outer most) one.
         *
         * @return DataHandler
         */
        protected function getOuterMostInstance() {}
        /**
         * Determines whether the this object is the outer most instance of itself
         * Since DataHandler can create nested objects of itself,
         * this method helps to determine the first (= outer most) one.
         *
         * @return bool
         */
        public function isOuterMostInstance() {}
        /**
         * Gets an instance of the runtime cache.
         *
         * @return FrontendInterface
         */
        protected function getRuntimeCache() {}
        protected function isNestedElementCallRegistered($table, $id, $identifier) {}
        protected function registerNestedElementCall($table, $id, $identifier) {}
        /**
         * Resets the nested element calls.
         */
        protected function resetNestedElementCalls() {}
        protected function isElementToBeDeleted($table, $id) {}
        /**
         * Registers elements to be deleted in the registry.
         *
         * @see process_datamap
         */
        protected function registerElementsToBeDeleted() {}
        /**
         * Resets the elements to be deleted in the registry.
         *
         * @see process_datamap
         */
        protected function resetElementsToBeDeleted() {}
        protected function unsetElementsToBeDeleted(array $elements) {}
        protected function getCommandMapElements($needle) {}
        /**
         * Controls active elements and sets NULL values if not active.
         * Datamap is modified accordant to submitted control values.
         */
        protected function controlActiveElements() {}
        protected function setNullValues(array $active, array $haystack) {}
        protected function postProcessDatabaseInsert(Connection $connection, string $tableName, int $suggestedUid) : int {}
        protected function postProcessPostgresqlInsert(Connection $connection, string $tableName) {}
        protected function getFieldEvalCacheIdentifier($additionalIdentifier) {}
        /**
         * @return RelationHandler
         */
        protected function createRelationHandlerInstance() {}
        /**
         * Create and returns an instance of the CacheManager
         *
         * @return CacheManager
         */
        protected function getCacheManager() {}
        /**
         * Gets the resourceFactory
         *
         * @return ResourceFactory
         */
        protected function getResourceFactory() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Plain data resolving.
     *
     * This component resolves data constraints for given IDs of a
     * particular table on a plain/raw database level. Thus, workspaces
     * placeholders and overlay related resorting is applied automatically.
     */
    class PlainDataResolver {
        /**
         * @var string
         */
        protected $tableName;
        /**
         * @var int[]
         */
        protected $liveIds;
        /**
         * @var array
         */
        protected $sortingStatement;
        /**
         * @var int
         */
        protected $workspaceId;
        /**
         * @var bool
         */
        protected $keepLiveIds;
        /**
         * @var bool
         */
        protected $keepDeletePlaceholder;
        /**
         * @var bool
         */
        protected $keepMovePlaceholder;
        /**
         * @var int[]
         */
        protected $resolvedIds;

        public function __construct($tableName, array $liveIds, array $sortingStatement = null) {}
        public function setWorkspaceId($workspaceId) {}
        public function setKeepLiveIds($keepLiveIds) {}
        public function setKeepDeletePlaceholder($keepDeletePlaceholder) {}
        public function setKeepMovePlaceholder($keepMovePlaceholder) {}
        /**
         * @return int[]
         */
        public function get() {}
        public function processVersionOverlays(array $ids) {}
        public function processVersionMovePlaceholders(array $ids) {}
        public function processSorting(array $ids) {}
        public function applyLiveIds(array $ids) {}
        protected function reindex(array $ids) {}
        /**
         * @return bool
         */
        protected function isWorkspaceEnabled() {}
    }

    /**
     * Enumeration object for tca internal type
     */
    class TableColumnSubType extends \typo3\cms\core\type\enumeration {
        const DB = 'DB';
        const FILE = 'FILE';
        const FILE_REFERENCE = 'FILE_REFERENCE';
        const FOLDER = 'FOLDER';
        const __default = self::DEFAULT_TYPE;
        const DEFAULT_TYPE = '';

        public function __construct($subType = null) {}
    }

    /**
     * Enumeration object for tca type
     */
    class TableColumnType extends \typo3\cms\core\type\enumeration {
        const IMAGEMANIPULATION = 'IMAGEMANIPULATION';
        const INLINE = 'INLINE';
        const FLEX = 'FLEX';
        const USER = 'USER';
        const PASSTHROUGH = 'PASSTHROUGH';
        const NONE = 'NONE';
        const GROUP = 'GROUP';
        const SELECT = 'SELECT';
        const RADIO = 'RADIO';
        const CHECK = 'CHECK';
        const TEXT = 'TEXT';
        const INPUT = 'INPUT';
        const __default = self::INPUT;

        public function __construct($type = null) {}
    }

    /**
     * This service provides the sql schema database records.
     */
    class DatabaseSchemaService {
        const TABLE_TEMPLATE = 'CREATE TABLE %s (' . LF . '%s' . LF . ');';
        const FIELD_L10N_STATE_TEMPLATE = '  l10n_state text';

        public function getLocalizationRequiredDatabaseSchema(array $sqlString) {}
        public function getLocalizationRequiredDatabaseSchemaForExtension(array $sqlString, string $extensionKey) {}
        /**
         * Add l10n_state field to tables that provide localization
         *
         * @return string Localization fields database schema
         */
        protected function buildLocalizationRequiredDatabaseSchema() {}
    }

    /**
     * Provides services around item processing
     */
    class ItemProcessingService {
/** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
        public function getProcessingItems(/** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
$table, /** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
$pageId, /** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
$field, /** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
$row, /** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
$tcaConfig, /** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
$selectedItems) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }


    /**
     * Interface for hook in \TYPO3\CMS\Core\DataHandling\DataHandler::checkModifyAccessList
     */
    interface DataHandlerCheckModifyAccessListHookInterface {
        function checkModifyAccessList($accessAllowed, $table, \TYPO3\CMS\Core\DataHandling\DataHandler $parent) ;
    }

    /**
     * Interface for classes which hook into DataHandler and do additional processing
     * after the upload of a file.
     */
    interface DataHandlerProcessUploadHookInterface {
        function processUpload_postProcessAction($filename, \TYPO3\CMS\Core\DataHandling\DataHandler $parentObject) ;
    }

}

namespace TYPO3\CMS\Core\DataHandling\Localization {
    /**
     * Entity for data-map item.
     */
    class DataMapItem {
        const TYPE_DIRECT_CHILD = 'directChild';
        const TYPE_GRAND_CHILD = 'grandChild';
        const SCOPE_PARENT = State::STATE_PARENT;
        const TYPE_PARENT = 'parent';
        const SCOPE_SOURCE = State::STATE_SOURCE;
        const SCOPE_EXCLUDE = 'exclude';

        /**
         * @var string
         */
        protected $tableName;
        /**
         * @var string|int
         */
        protected $id;
        /**
         * @var array
         */
        protected $suggestedValues;
        /**
         * @var array
         */
        protected $persistedValues;
        /**
         * @var array
         */
        protected $configurationFieldNames;
        /**
         * @var bool
         */
        protected $new;
        /**
         * @var string
         */
        protected $type;
        /**
         * @var State
         */
        protected $state;
        /**
         * @var string|int
         */
        protected $language;
        /**
         * @var string|int
         */
        protected $parent;
        /**
         * @var string|int
         */
        protected $source;
        /**
         * @var DataMapItem[][]
         */
        protected $dependencies;

        public static function build(string $tableName, $id, array $suggestedValues, array $persistedValues, array $configurationFieldNames) {}
        public function __construct(string $tableName, $id, array $suggestedValues, array $persistedValues, array $configurationFieldNames) {}
        /**
         * Gets the current table name of this data-map item.
         *
         * @return string
         */
        public function getTableName() : string {}
        /**
         * Gets the id of this data-map item.
         *
         * @return mixed
         */
        public function getId() {}
        /**
         * Gets the suggested values that were initially
         * submitted as the whole data-map to the DataHandler.
         *
         * @return array
         */
        public function getSuggestedValues() : array {}
        /**
         * Gets the persisted values that represent the persisted state
         * of the record this data-map item is a surrogate for - does only
         * contain relevant field values.
         *
         * @return array
         */
        public function getPersistedValues() : array {}
        /**
         * @return array
         */
        public function getConfigurationFieldNames() : array {}
        /**
         * @return string
         */
        public function getLanguageFieldName() : string {}
        /**
         * @return string
         */
        public function getParentFieldName() : string {}
        /**
         * @return string|null
         */
        public function getSourceFieldName() {}
        /**
         * @return bool
         */
        public function isNew() : bool {}
        /**
         * @return string
         */
        public function getType() : string {}
        /**
         * @return bool
         */
        public function isParentType() : bool {}
        /**
         * @return bool
         */
        public function isDirectChildType() : bool {}
        /**
         * @return bool
         */
        public function isGrandChildType() : bool {}
        /**
         * @return State
         */
        public function getState() : State {}
        /**
         * @return string|int
         */
        public function getLanguage() {}
        public function setLanguage($language) {}
        /**
         * @return string|int
         */
        public function getParent() {}
        public function setParent($parent) {}
        /**
         * @return string|int
         */
        public function getSource() {}
        public function setSource($source) {}
        public function getIdForScope($scope) {}
        /**
         * @return DataMapItem[][]
         */
        public function getDependencies() : array {}
        public function setDependencies(array $dependencies) {}
        public function findDependencies(string $scope) {}
        /**
         * @return string[]
         */
        public function getApplicableScopes() {}
        protected function extractId($idValue) {}
        /**
         * @return State|null
         */
        protected function buildState() {}
    }

    /**
     * Value object for l10n_state field value.
     */
    class State {
        const STATE_PARENT = 'parent';
        const STATE_SOURCE = 'source';
        const STATE_CUSTOM = 'custom';

        /**
         * @var string
         */
        protected $tableName;
        /**
         * @var array
         */
        protected $states;
        /**
         * @var array
         */
        protected $originalStates;
        /**
         * @var array
         */
        protected $validStates;

        public static function create(string $tableName) {}
        public static function fromJSON(string $tableName, string $json = null) {}
        public static function isApplicable(string $tableName) {}
        public static function getFieldNames(string $tableName) {}
        protected static function hasColumns(string $tableName) {}
        protected static function hasLanguageFieldName(string $tableName) {}
        protected static function hasTranslationParentFieldName(string $tableName) {}
        public function __construct(string $tableName, array $states = [ ]) {}
        public function update(array $states) {}
        public function updateStates(string $currentState, string $targetState) {}
        /**
         * @return string|null
         */
        public function export() {}
        /**
         * @return array
         */
        public function toArray() : array {}
        /**
         * @return string[]
         */
        public function getModifiedFieldNames() {}
        /**
         * @return bool
         */
        public function isModified() {}
        public function isUndefined(string $fieldName) {}
        public function isCustomState(string $fieldName) {}
        public function isParentState(string $fieldName) {}
        public function isSourceState(string $fieldName) {}
        public function getState(string $fieldName) {}
        public function filterFieldNames(string $desiredState, bool $modified = false) {}
        protected function sanitize(array $states) {}
        protected function enrich(array $states) {}
    }

    /**
     * This processor analyses the provided data-map before actually being process
     * in the calling DataHandler instance. Field names that are configured to have
     * "allowLanguageSynchronization" enabled are either synchronized from there
     * relative parent records (could be a default language record, or a l10n_source
     * record) or to their dependent records (in case a default language record or
     * nested records pointing upwards with l10n_source).
     *
     * Except inline relational record editing, all modifications are applied to
     * the data-map directly, which ensures proper history entries as a side-effect.
     * For inline relational record editing, this processor either triggers the copy
     * or localize actions by instantiation a new local DataHandler instance.
     *
     * Namings in this class:
     * + forTableName, forId always refers to dependencies data is provided *for*
     * + fromTableName, fromId always refers to ancestors data is retrieved *from*
     */
    class DataMapProcessor {
        /**
         * @var array
         */
        protected $allDataMap;
        /**
         * @var array
         */
        protected $modifiedDataMap;
        /**
         * @var array
         */
        protected $sanitizationMap;
        /**
         * @var BackendUserAuthentication
         */
        protected $backendUser;
        /**
         * @var DataMapItem[]
         */
        protected $allItems;
        /**
         * @var DataMapItem[]
         */
        protected $nextItems;

        public static function instance(array $dataMap, BackendUserAuthentication $backendUser) {}
        public function __construct(array $dataMap, BackendUserAuthentication $backendUser) {}
        /**
         * Processes the submitted data-map and returns the sanitized and enriched
         * version depending on accordant localization states and dependencies.
         *
         * @return array
         */
        public function process() {}
        protected function purgeDataMap(array $dataMap) : array {}
        protected function collectItems(string $tableName, array $idValues) {}
        protected function sanitize(array $items) {}
        protected function enrich(array $items) {}
        protected function sanitizeTranslationItem(DataMapItem $item) {}
        protected function synchronizeTranslationItem(DataMapItem $item, array $fieldNames, $fromId) {}
        protected function populateTranslationItem(DataMapItem $item) {}
        protected function finishTranslationItem(DataMapItem $item) {}
        protected function synchronizeFieldValues(DataMapItem $item, string $fieldName, array $fromRecord, array $forRecord) {}
        protected function synchronizeDirectRelations(DataMapItem $item, string $fieldName, array $fromRecord) {}
        protected function synchronizeInlineRelations(DataMapItem $item, string $fieldName, array $fromRecord, array $forRecord) {}
        protected function resolveSuggestedInlineRelations(DataMapItem $item, string $fieldName, array $fromRecord) : array {}
        private function resolvePersistedInlineRelations(DataMapItem $item, string $fieldName, array $forRecord) : array {}
        protected function isSetInDataMap(string $tableName, $id, string $fieldName) {}
        protected function modifyDataMap(string $tableName, $id, array $values) {}
        protected function addNextItem(DataMapItem $item) {}
        protected function fetchTranslationValues(string $tableName, array $fieldNames, array $ids) {}
        protected function fetchDependencies(string $tableName, array $ids) {}
        protected function fetchDependentIdMap(string $tableName, array $ids, int $desiredLanguage) {}
        protected function fetchDependentElements(string $tableName, array $ids, array $fieldNames) {}
        protected function filterItemsByType(string $type, array $items) {}
        protected function filterNumericIds(array $ids, bool $numeric = true) {}
        protected function filterNewItemIds(string $tableName, array $ids) {}
        protected function mapRelationItemId(array $relationItems) {}
        protected function resolveAncestorId(array $fieldNames, array $element) {}
        protected function buildElementAncestorIdMap(array $fieldNames, array $elements) {}
        protected function findItem(string $tableName, $id) {}
        protected function duplicateFromDataMap(string $tableName, $fromId, int $language, array $fieldNames, bool $localize) {}
        protected function getFieldNamesForItemScope(DataMapItem $item, string $scope, bool $modified) {}
        protected function getLocalizationModeExcludeFieldNames(string $tableName) {}
        protected function getFieldNamesToBeHandled(string $tableName) {}
        protected function getPrefixLanguageTitleFieldNames(string $tableName) {}
        protected function isRelationField(string $tableName, string $fieldName) : bool {}
        protected function isInlineRelationField(string $tableName, string $fieldName) : bool {}
        protected function isApplicable(string $tableName) : bool {}
        /**
         * @return RelationHandler
         */
        protected function createRelationHandler() {}
        /**
         * @return LanguageService|null
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Core\Service {
    /**
     * Helper functionality for dealing with ISO codes.
     */
    class IsoCodeService {
        public function renderIsoCodeSelectDropdown(array $conf = [ ]) {}
        /**
         * Returns the list of ISO 639-1 codes.
         *
         * List taken from http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
         *
         * @return array
         */
        protected function getIsoCodes() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Parent class for "Services" classes
     */
    abstract class AbstractService implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var array service description array
         */
        public $info;
        /**
         * @var array error stack
         */
        public $error;
        /**
         * @var string The output content. That's what the services produced as result.
         */
        public $out;
        /**
         * @var string The file that should be processed.
         */
        public $inputFile;
        /**
         * @var string The content that should be processed.
         */
        public $inputContent;
        /**
         * @var string The type of the input content (or file). Might be the same as the service subtypes.
         */
        public $inputType;
        /**
         * @var string The file where the output should be written to.
         */
        public $outputFile;
        /**
         * Temporary files which have to be deleted
         *
         * @private
         * @var array
         */
        public $tempFiles;
        /**
         * @var array list of registered shutdown functions; should be used to prevent registering the same function multiple times
         */
        protected $shutdownRegistry;
        /**
         * @var string Prefix for temporary files
         */
        protected $prefixId;

        /**
         * Returns internal information array for service
         *
         * @return array Service description array
         */
        public function getServiceInfo() {}
        /**
         * Returns the service key of the service
         *
         * @return string Service key
         */
        public function getServiceKey() {}
        /**
         * Returns the title of the service
         *
         * @return string Service title
         */
        public function getServiceTitle() {}
        public function getServiceOption($optionName, $defaultValue = '', $includeDefaultConfig = true) {}
        public function devLog($msg, $severity = 0, $dataVar = false) {}
/** @var \TYPO3\CMS\Core\TimeTracker\TimeTracker $timeTracker */
        public function errorPush(/** @var \TYPO3\CMS\Core\TimeTracker\TimeTracker $timeTracker */
$errNum = T3_ERR_SV_GENERAL, /** @var \TYPO3\CMS\Core\TimeTracker\TimeTracker $timeTracker */
$errMsg = 'Unspecified error occurred') {}
        /**
         * Removes the last error from the error stack.
         */
        public function errorPull() {}
        /**
         * Returns the last error number from the error stack.
         *
         * @return int|bool Error number (or TRUE if no error)
         */
        public function getLastError() {}
        /**
         * Returns the last message from the error stack.
         *
         * @return string Error message
         */
        public function getLastErrorMsg() {}
        /**
         * Returns all error messages as array.
         *
         * @return array Error messages
         */
        public function getErrorMsgArray() {}
        /**
         * Returns the last array from the error stack.
         *
         * @return array Error number and message
         */
        public function getLastErrorArray() {}
        /**
         * Reset the error stack.
         */
        public function resetErrors() {}
        public function checkExec($progList) {}
        /**
         * Deactivate the service. Use this if the service fails at runtime and will not be available.
         */
        public function deactivateService() {}
        public function checkInputFile($absFile) {}
        public function readFile($absFile, $length = 0) {}
        public function writeFile($content, $absFile = '') {}
        public function tempFile($filePrefix) {}
        public function registerTempFile($absFile) {}
        /**
         * Delete registered temporary files.
         */
        public function unlinkTempFiles() {}
        public function setInput($content, $type = '') {}
        public function setInputFile($absFile, $type = '') {}
        /**
         * Get the input content.
         * Will be read from input file if needed. (That is if ->inputContent is empty and ->inputFile is not)
         *
         * @return mixed
         */
        public function getInput() {}
        public function getInputFile($createFile = '') {}
        public function setOutputFile($absFile) {}
        /**
         * Get the output content.
         *
         * @return mixed
         */
        public function getOutput() {}
        public function getOutputFile($absFile = '') {}
        /**
         * Initialization of the service.
         *
         * The class have to do a strict check if the service is available.
         * example: check if the perl interpreter is available which is needed to run an extern perl script.
         *
         * @return bool TRUE if the service is available
         */
        public function init() {}
        /**
         * Resets the service.
         * Will be called by init(). Should be used before every use if a service instance is used multiple times.
         */
        public function reset() {}
        /**
         * Clean up the service.
         * Child classes should explicitly call parent::__destruct() in their destructors for this to work
         */
        public function __destruct() {}
    }

    /**
     * Helper functionality for subparts and marker substitution
     * ###MYMARKER###
     */
    class MarkerBasedTemplateService {
        public function getSubpart($content, $marker) {}
        public function substituteSubpart($content, $marker, $subpartContent, $recursive = true, $keepMarker = false) {}
        public function substituteSubpartArray($content, array $subpartsContent) {}
        public function substituteMarker($content, $marker, $markContent) {}
        public function substituteMarkerArray($content, $markContentArray, $wrap = '', $uppercase = false, $deleteUnused = false) {}
        public function substituteMarkerAndSubpartArrayRecursive($content, array $markersAndSubparts, $wrap = '', $uppercase = false, $deleteUnused = false) {}
        public function substituteMarkerArrayCached($content, array $markContentArray = null, array $subpartContentArray = null, array $wrappedSubpartContentArray = null) {}
        public function substituteMarkerInObject($tree, array $markContentArray) {}
        public function fillInMarkerArray(array $markContentArray, array $row, $fieldList = '', $nl2br = true, $prefix = 'FIELD_', $htmlSpecialCharsValue = false, $respectXhtml = false) {}
        /**
         * Second-level cache
         *
         * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected function getCache() {}
        /**
         * First-level cache (runtime cache)
         *
         * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected function getRuntimeCache() {}
    }

    /**
     * Class with helper functions for clearing the PHP opcache.
     * It auto detects the opcache system and invalidates/resets it.
     * http://forge.typo3.org/issues/55252
     * Supported opcaches are: OPcache >= 7.0 (PHP 5.5)
     */
    class OpcodeCacheService {
        /**
         * Returns all supported and active opcaches
         *
         * @return array Array filled with supported and active opcaches
         */
        public function getAllActive() {}
        public function clearAllActive($fileAbsPath = null) {}
    }

    /**
     * This class provides functionality to build
     * an ordered list from a set of dependencies.
     *
     * We use an adjacency matrix for the dependency graph (DAG)
     *
     * Example structure of the DAG is:
     *    A => (A => FALSE, B => TRUE,  C => FALSE)
     *    B => (A => FALSE, B => FALSE, C => FALSE)
     *    C => (A => TRUE,  B => FALSE, C => FALSE)
     *
     *    A depends on B, C depends on A, B is independent
     */
    class DependencyOrderingService {
        public function orderByDependencies(array $items, $beforeKey = 'before', $afterKey = 'after') {}
/** @var bool[][] $dependencyGraph */
        public function buildDependencyGraph(/** @var bool[][] $dependencyGraph */
array $dependencies, /** @var bool[][] $dependencyGraph */
$beforeKey = 'before', /** @var bool[][] $dependencyGraph */
$afterKey = 'after') {}
        public function calculateOrder(array $dependencyGraph) {}
        protected function getIncomingEdgeCount(array $dependencyGraph, $identifier) {}
        public function findRootIds(array $dependencyGraph) {}
        protected function findPathInGraph(array $graph, $from, $to) {}
        protected function prepareDependencies(array $dependencies, $beforeKey = 'before', $afterKey = 'after') {}
    }

}

namespace TYPO3\CMS\Core\Versioning {
    /**
     * Enumeration object for VersionState
     */
    class VersionState extends \typo3\cms\core\type\enumeration {
        const NEW_PLACEHOLDER_VERSION = -1;
        const DEFAULT_STATE = 0;
        const __default = self::DEFAULT_STATE;
        const DELETE_PLACEHOLDER = 2;
        const MOVE_PLACEHOLDER = 3;
        const NEW_PLACEHOLDER = 1;
        const MOVE_POINTER = 4;

        /**
         * @return bool
         */
        public function indicatesPlaceholder() {}
    }

}

namespace TYPO3\CMS\Core\Resource {
    /**
     * Compressor
     * This merges and compresses CSS and JavaScript files of the TYPO3 Backend.
     */
    class ResourceCompressor {
        /**
         * @var string
         */
        protected $targetDirectory;
        /**
         * @var string
         */
        protected $rootPath;
        /**
         * gzipped versions are only created if $TYPO3_CONF_VARS[TYPO3_MODE]['compressionLevel'] is set
         *
         * @var bool
         */
        protected $createGzipped;
        /**
         * @var int
         */
        protected $gzipCompressionLevel;
        /**
         * @var string
         */
        protected $htaccessTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        public function setRootPath($rootPath) {}
        public function concatenateCssFiles(array $cssFiles, array $options = [ ]) {}
        public function concatenateJsFiles(array $jsFiles) {}
        protected function createMergedCssFile(array $filesToInclude) {}
        protected function createMergedJsFile(array $filesToInclude) {}
        protected function createMergedFile(array $filesToInclude, $type = 'css') {}
        public function compressCssFiles(array $cssFiles) {}
        public function compressCssFile($filename) {}
        public function compressJsFiles(array $jsFiles) {}
        public function compressJsFile($filename) {}
        protected function getFilenameFromMainDir($filename) {}
        protected function checkBaseDirectory($filename, array $baseDirectories) {}
        protected function cssFixRelativeUrlPaths($contents, $oldDir) {}
        protected function findAndReplaceUrlPathsByRegex($contents, $regex, $newDir, $wrap = '|') {}
        protected function cssFixStatements($contents) {}
        protected function writeFileAndCompressed($filename, $contents) {}
        protected function returnFileReference($filename) {}
        protected function retrieveExternalFile($url) {}
        protected function compressCssString($contents) {}
    }

    /**
     * Representation of a specific usage of a file with possibilities to override certain
     * properties of the original file just for this usage of the file.
     *
     * It acts as a decorator over the original file in the way that most method calls are
     * directly passed along to the original file object.
     *
     * All file related methods are directly passed along; only meta data functionality is adopted
     * in this decorator class to priorities possible overrides for the metadata for this specific usage
     * of the file.
     */
    class FileReference implements \typo3\cms\core\resource\fileinterface {
        /**
         * Various properties of the FileReference. Note that these information can be different
         * to the ones found in the originalFile.
         *
         * @var array
         */
        protected $propertiesOfFileReference;
        /**
         * The identifier of this file to identify it on the storage.
         * On some drivers, this is the path to the file, but drivers could also just
         * provide any other unique identifier for this file on the specific storage.
         *
         * @var string
         */
        protected $uidOfFileReference;
        /**
         * The file name of this file. It's either the fileName of the original underlying file,
         * or the overlay file name supplied by the user for this particular usage (FileReference) of the file.
         *
         * @var string
         */
        protected $name;
        /**
         * Reference to the original File object underlying this FileReference.
         *
         * @var File
         */
        protected $originalFile;
        /**
         * Properties merged with the parent object (File) if
         * the value is not defined (NULL). Thus, FileReference properties act
         * as overlays for the defined File properties.
         *
         * @var array
         */
        protected $mergedProperties;

/** @var $factory ResourceFactory */
        public function __construct(/** @var $factory ResourceFactory */
array $fileReferenceData, /** @var $factory ResourceFactory */
$factory = null) {}
        public function hasProperty($key) {}
        public function getProperty($key) {}
        public function getReferenceProperty($key) {}
        /**
         * Gets all properties, falling back to values of the parent.
         *
         * @return array
         */
        public function getProperties() {}
        protected function restoreNonNullValuesCallback($value, $key) {}
        /**
         * Gets all properties of the file reference.
         *
         * @return array
         */
        public function getReferenceProperties() {}
        /**
         * Returns the name of this file
         *
         * @return string
         */
        public function getName() {}
        /**
         * Returns the title text to this image
         *
         * @todo Possibly move this to the image domain object instead
         *
         * @return string
         */
        public function getTitle() {}
        /**
         * Returns the alternative text to this image
         *
         * @todo Possibly move this to the image domain object instead
         *
         * @return string
         */
        public function getAlternative() {}
        /**
         * Returns the description text to this file
         *
         * @todo Possibly move this to the image domain object instead
         *
         * @return string
         */
        public function getDescription() {}
        /**
         * Returns the link that should be active when clicking on this image
         *
         * @todo Move this to the image domain object instead
         *
         * @return string
         */
        public function getLink() {}
        /**
         * Returns the uid of this File In Use
         *
         * @return int
         */
        public function getUid() {}
        /**
         * Returns the size of this file
         *
         * @return int
         */
        public function getSize() {}
        /**
         * Returns the Sha1 of this file
         *
         * @return string
         */
        public function getSha1() {}
        /**
         * Get the file extension of this file
         *
         * @return string The file extension
         */
        public function getExtension() {}
        /**
         * Returns the basename (the name without extension) of this file.
         *
         * @return string
         */
        public function getNameWithoutExtension() {}
        /**
         * Get the MIME type of this file
         *
         * @return string mime type
         */
        public function getMimeType() {}
        /**
         * Returns the modification time of the file as Unix timestamp
         *
         * @return int
         */
        public function getModificationTime() {}
        /**
         * Returns the creation time of the file as Unix timestamp
         *
         * @return int
         */
        public function getCreationTime() {}
        /**
         * Returns the fileType of this file
         *
         * @return int $fileType
         */
        public function getType() {}
        /**
         * Check if file is marked as missing by indexer
         *
         * @return bool
         */
        public function isMissing() {}
        /**
         * Get the contents of this file
         *
         * @return string File contents
         */
        public function getContents() {}
        public function setContents($contents) {}
        /**
         * Get the storage the original file is located in
         *
         * @return ResourceStorage
         */
        public function getStorage() {}
        /**
         * Returns the identifier of the underlying original file
         *
         * @return string
         */
        public function getIdentifier() {}
        /**
         * Returns a combined identifier of the underlying original file
         *
         * @return string Combined storage and file identifier, e.g. StorageUID:path/and/fileName.png
         */
        public function getCombinedIdentifier() {}
        /**
         * Deletes only this particular FileReference from the persistence layer
         * (database table sys_file_reference) but leaves the original file untouched.
         *
         * @throws \BadMethodCallException
         * @return bool TRUE if deletion succeeded
         */
        public function delete() {}
        public function rename($newName, $conflictMode = DuplicationBehavior::RENAME) {}
        public function getPublicUrl($relativeToCurrentScript = false) {}
        /**
         * Returns TRUE if this file is indexed.
         * This is always true for FileReference objects, as they rely on a
         * sys_file_reference record to be present, which in turn can only exist if
         * the original file is indexed.
         *
         * @return bool
         */
        public function isIndexed() {}
        public function getForLocalProcessing($writable = true) {}
        /**
         * Returns an array representation of the file.
         * (This is used by the generic listing module vidi when displaying file records.)
         *
         * @return array Array of main data of the file. Don't rely on all data to be present here, it's just a selection of the most relevant information.
         */
        public function toArray() {}
        /**
         * Gets the original file being referenced.
         *
         * @return File
         */
        public function getOriginalFile() {}
        /**
         * Get hashed identifier
         *
         * @return string
         */
        public function getHashedIdentifier() {}
        /**
         * Returns the parent folder.
         *
         * @return FolderInterface
         */
        public function getParentFolder() {}
    }

    /**
     * A "mount point" inside the TYPO3 file handling.
     *
     * A "storage" object handles
     * - abstraction to the driver
     * - permissions (from the driver, and from the user, + capabilities)
     * - an entry point for files, folders, and for most other operations
     *
     * == Driver entry point
     * The driver itself, that does the actual work on the file system,
     * is inside the storage but completely shadowed by
     * the storage, as the storage also handles the abstraction to the
     * driver
     *
     * The storage can be on the local system, but can also be on a remote
     * system. The combination of driver + configurable capabilities (storage
     * is read-only e.g.) allows for flexible uses.
     *
     *
     * == Permission system
     * As all requests have to run through the storage, the storage knows about the
     * permissions of a BE/FE user, the file permissions / limitations of the driver
     * and has some configurable capabilities.
     * Additionally, a BE user can use "filemounts" (known from previous installations)
     * to limit his/her work-zone to only a subset (identifier and its subfolders/subfolders)
     * of the user itself.
     *
     * Check 1: "User Permissions" [is the user allowed to write a file) [is the user allowed to write a file]
     * Check 2: "File Mounts" of the User (act as subsets / filters to the identifiers) [is the user allowed to do something in this folder?]
     * Check 3: "Capabilities" of Storage (then: of Driver) [is the storage/driver writable?]
     * Check 4: "File permissions" of the Driver [is the folder writable?]
     */
    class ResourceStorage implements \typo3\cms\core\resource\resourcestorageinterface {
        const PROCESSING_FOLDER_LEVELS = 2;

        /**
         * The storage driver instance belonging to this storage.
         *
         * @var Driver\DriverInterface
         */
        protected $driver;
        /**
         * The database record for this storage
         *
         * @var array
         */
        protected $storageRecord;
        /**
         * The configuration belonging to this storage (decoded from the configuration field).
         *
         * @var array
         */
        protected $configuration;
        /**
         * @var Service\FileProcessingService
         */
        protected $fileProcessingService;
        /**
         * Whether to check if file or folder is in user mounts
         * and the action is allowed for a user
         * Default is FALSE so that resources are accessible for
         * front end rendering or admins.
         *
         * @var bool
         */
        protected $evaluatePermissions;
        /**
         * User filemounts, added as an array, and used as filters
         *
         * @var array
         */
        protected $fileMounts;
        /**
         * The file permissions of the user (and their group) merged together and
         * available as an array
         *
         * @var array
         */
        protected $userPermissions;
        /**
         * The capabilities of this storage as defined in the storage record.
         * Also see the CAPABILITY_* constants below
         *
         * @var int
         */
        protected $capabilities;
        /**
         * @var Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * @var Folder
         */
        protected $processingFolder;
        /**
         * All processing folders of this storage used in any storage
         *
         * @var Folder[]
         */
        protected $processingFolders;
        /**
         * whether this storage is online or offline in this request
         *
         * @var bool
         */
        protected $isOnline;
        /**
         * @var bool
         */
        protected $isDefault;
        /**
         * The filters used for the files and folder names.
         *
         * @var array
         */
        protected $fileAndFolderNameFilters;

        public function __construct(Driver\DriverInterface $driver, array $storageRecord) {}
        /**
         * Gets the configuration.
         *
         * @return array
         */
        public function getConfiguration() {}
        public function setConfiguration(array $configuration) {}
        /**
         * Gets the storage record.
         *
         * @return array
         */
        public function getStorageRecord() {}
        public function setDriver(Driver\DriverInterface $driver) {}
        /**
         * Returns the driver object belonging to this storage.
         *
         * @return Driver\DriverInterface
         */
        protected function getDriver() {}
        /**
         * Returns the name of this storage.
         *
         * @return string
         */
        public function getName() {}
        /**
         * Returns the UID of this storage.
         *
         * @return int
         */
        public function getUid() {}
        /**
         * Tells whether there are children in this storage.
         *
         * @return bool
         */
        public function hasChildren() {}
        /**
         * Returns the capabilities of this storage.
         *
         * @return int
         * @see CAPABILITY_* constants
         */
        public function getCapabilities() {}
        protected function hasCapability($capability) {}
        /**
         * Returns TRUE if this storage is publicly available. This is just a
         * configuration option and does not mean that it really *is* public. OTOH
         * a storage that is marked as not publicly available will trigger the file
         * publishing mechanisms of TYPO3.
         *
         * @return bool
         */
        public function isPublic() {}
        /**
         * Returns TRUE if this storage is writable. This is determined by the
         * driver and the storage configuration; user permissions are not taken into account.
         *
         * @return bool
         */
        public function isWritable() {}
        /**
         * Returns TRUE if this storage is browsable by a (backend) user of TYPO3.
         *
         * @return bool
         */
        public function isBrowsable() {}
        /**
         * Returns TRUE if the identifiers used by this storage are case-sensitive.
         *
         * @return bool
         */
        public function usesCaseSensitiveIdentifiers() {}
        /**
         * Returns TRUE if this storage is browsable by a (backend) user of TYPO3.
         *
         * @return bool
         */
        public function isOnline() {}
        /**
         * Returns TRUE if auto extracting of metadata is enabled
         *
         * @return bool
         */
        public function autoExtractMetadataEnabled() {}
        /**
         * Blows the "fuse" and marks the storage as offline.
         *
         * Can only be modified by an admin.
         *
         * Typically, this is only done if the configuration is wrong.
         */
        public function markAsPermanentlyOffline() {}
        /**
         * Marks this storage as offline for the next 5 minutes.
         *
         * Non-permanent: This typically happens for remote storages
         * that are "flaky" and not available all the time.
         */
        public function markAsTemporaryOffline() {}
        public function addFileMount($folderIdentifier, $additionalData = [ ]) {}
        /**
         * Returns all file mounts that are registered with this storage.
         *
         * @return array
         */
        public function getFileMounts() {}
/** @var Folder $folder */
        public function isWithinFileMountBoundaries(/** @var Folder $folder */
$subject, /** @var Folder $folder */
$checkWriteAccess = false) {}
        public function setEvaluatePermissions($evaluatePermissions) {}
        /**
         * Gets whether the permissions to access or write
         * into this storage should be checked or not.
         *
         * @return bool $evaluatePermissions
         */
        public function getEvaluatePermissions() {}
        public function setUserPermissions(array $userPermissions) {}
        public function checkUserActionPermission($action, $type) {}
        public function checkFileActionPermission($action, FileInterface $file) {}
        public function checkFolderActionPermission($action, Folder $folder = null) {}
        protected function checkFileExtensionPermission($fileName) {}
        protected function assureFolderReadPermission(Folder $folder = null) {}
        protected function assureFolderDeletePermission(Folder $folder, $checkDeleteRecursively) {}
        protected function assureFileReadPermission(FileInterface $file) {}
        protected function assureFileWritePermissions(FileInterface $file) {}
        protected function assureFileReplacePermissions(FileInterface $file) {}
        protected function assureFileDeletePermissions(FileInterface $file) {}
        protected function assureFileAddPermissions($targetFolder, $targetFileName) {}
        protected function assureFileUploadPermissions($localFilePath, $targetFolder, $targetFileName, $uploadedFileSize) {}
        protected function assureFileMovePermissions(FileInterface $file, Folder $targetFolder, $targetFileName) {}
        protected function assureFileRenamePermissions(FileInterface $file, $targetFileName) {}
        protected function assureFileCopyPermissions(FileInterface $file, Folder $targetFolder, $targetFileName) {}
        protected function assureFolderCopyPermissions(FolderInterface $folderToCopy, FolderInterface $targetParentFolder) {}
        protected function assureFolderMovePermissions(FolderInterface $folderToMove, FolderInterface $targetParentFolder) {}
        public function sanitizeFileName($fileName, Folder $targetFolder = null) {}
        public function addFile($localFilePath, Folder $targetFolder, $targetFileName = '', $conflictMode = DuplicationBehavior::RENAME, $removeOriginal = true) {}
        public function updateProcessedFile($localFilePath, ProcessedFile $processedFile, Folder $processingFolder = null) {}
        public function hashFile(FileInterface $fileObject, $hash) {}
        public function hashFileByIdentifier($fileIdentifier, $hash) {}
/** @var FileInterface $file */
        public function hashFileIdentifier(/** @var FileInterface $file */
$file) {}
        public function getPublicUrl(ResourceInterface $resourceObject, $relativeToCurrentScript = false) {}
        public function processFile(FileInterface $fileObject, $context, array $configuration) {}
        public function getFileForLocalProcessing(FileInterface $fileObject, $writable = true) {}
        public function getFile($identifier) {}
        public function getFileInfo(FileInterface $fileObject) {}
        public function getFileInfoByIdentifier($identifier, array $propertiesToExtract = [ ]) {}
        /**
         * Unsets the file and folder name filters, thus making this storage return unfiltered filelists.
         */
        public function unsetFileAndFolderNameFilters() {}
        /**
         * Resets the file and folder name filters to the default values defined in the TYPO3 configuration.
         */
        public function resetFileAndFolderNameFiltersToDefault() {}
        /**
         * Returns the file and folder name filters used by this storage.
         *
         * @return array
         */
        public function getFileAndFolderNameFilters() {}
        public function setFileAndFolderNameFilters(array $filters) {}
        public function addFileAndFolderNameFilter($filter) {}
        public function getFolderIdentifierFromFileIdentifier($fileIdentifier) {}
        public function getFileInFolder($fileName, Folder $folder) {}
        public function getFilesInFolder(Folder $folder, $start = 0, $maxNumberOfItems = 0, $useFilters = true, $recursive = false, $sort = '', $sortRev = false) {}
        public function getFileIdentifiersInFolder($folderIdentifier, $useFilters = true, $recursive = false) {}
        public function countFilesInFolder(Folder $folder, $useFilters = true, $recursive = false) {}
        public function getFolderIdentifiersInFolder($folderIdentifier, $useFilters = true, $recursive = false) {}
        public function hasFile($identifier) {}
        /**
         * Get all processing folders that live in this storage
         *
         * @return Folder[]
         */
        public function getProcessingFolders() {}
        public function isProcessingFolder(Folder $folder) {}
        public function hasFileInFolder($fileName, Folder $folder) {}
        public function getFileContents($file) {}
        public function dumpFileContents(FileInterface $file, $asDownload = false, $alternativeFilename = null, $overrideMimeType = null) {}
        public function setFileContents(AbstractFile $file, $contents) {}
        public function createFile($fileName, Folder $targetFolderObject) {}
        public function deleteFile($fileObject) {}
        public function copyFile(FileInterface $file, Folder $targetFolder, $targetFileName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        public function moveFile($file, $targetFolder, $targetFileName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        public function renameFile($file, $targetFileName, $conflictMode = DuplicationBehavior::RENAME) {}
        public function replaceFile(FileInterface $file, $localFilePath) {}
        public function addUploadedFile(array $uploadedFileData, Folder $targetFolder = null, $targetFileName = null, $conflictMode = DuplicationBehavior::CANCEL) {}
/** @var FileInterface $file */
        protected function getAllFileObjectsInFolder(/** @var FileInterface $file */
Folder $folder) {}
        public function moveFolder(Folder $folderToMove, Folder $targetParentFolder, $newFolderName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        protected function moveFolderBetweenStorages(Folder $folderToMove, Folder $targetParentFolder, $newFolderName) {}
        public function copyFolder(FolderInterface $folderToCopy, FolderInterface $targetParentFolder, $newFolderName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        protected function copyFolderBetweenStorages(Folder $folderToCopy, Folder $targetParentFolder, $newFolderName) {}
        public function renameFolder($folderObject, $newName) {}
        public function deleteFolder($folderObject, $deleteRecursively = false) {}
        public function getFolderInFolder($folderName, Folder $parentFolder, $returnInaccessibleFolderObject = false) {}
        public function getFoldersInFolder(Folder $folder, $start = 0, $maxNumberOfItems = 0, $useFilters = true, $recursive = false, $sort = '', $sortRev = false) {}
        public function countFoldersInFolder(Folder $folder, $useFilters = true, $recursive = false) {}
        public function hasFolder($identifier) {}
        public function hasFolderInFolder($folderName, Folder $folder) {}
        public function createFolder($folderName, Folder $parentFolder = null) {}
        public function getFolderInfo(Folder $folder) {}
        /**
         * Returns the default folder where new files are stored if no other folder is given.
         *
         * @return Folder
         */
        public function getDefaultFolder() {}
        public function getFolder($identifier, $returnInaccessibleFolderObject = false) {}
        public function isWithinProcessingFolder($identifier) {}
        public function isWithinFolder(Folder $folder, ResourceInterface $resource) {}
        public function getRootLevelFolder($respectFileMounts = true) {}
        protected function emitSanitizeFileNameSignal($fileName, Folder $targetFolder) {}
        protected function emitPreFileAddSignal($targetFileName, Folder $targetFolder, $sourceFilePath) {}
        protected function emitPostFileAddSignal(FileInterface $file, Folder $targetFolder) {}
        protected function emitPreFileCopySignal(FileInterface $file, Folder $targetFolder) {}
        protected function emitPostFileCopySignal(FileInterface $file, Folder $targetFolder) {}
        protected function emitPreFileMoveSignal(FileInterface $file, Folder $targetFolder) {}
        protected function emitPostFileMoveSignal(FileInterface $file, Folder $targetFolder, FolderInterface $originalFolder) {}
        protected function emitPreFileRenameSignal(FileInterface $file, $targetFolder) {}
        protected function emitPostFileRenameSignal(FileInterface $file, $sanitizedTargetFileName) {}
        protected function emitPreFileReplaceSignal(FileInterface $file, $localFilePath) {}
        protected function emitPostFileReplaceSignal(FileInterface $file, $localFilePath) {}
        protected function emitPostFileCreateSignal($newFileIdentifier, Folder $targetFolder) {}
        protected function emitPreFileDeleteSignal(FileInterface $file) {}
        protected function emitPostFileDeleteSignal(FileInterface $file) {}
        protected function emitPostFileSetContentsSignal(FileInterface $file, $content) {}
        protected function emitPreFolderAddSignal(Folder $targetFolder, $name) {}
        protected function emitPostFolderAddSignal(Folder $folder) {}
        protected function emitPreFolderCopySignal(Folder $folder, Folder $targetFolder, $newName) {}
        protected function emitPostFolderCopySignal(Folder $folder, Folder $targetFolder, $newName) {}
        protected function emitPreFolderMoveSignal(Folder $folder, Folder $targetFolder, $newName) {}
        protected function emitPostFolderMoveSignal(Folder $folder, Folder $targetFolder, $newName, Folder $originalFolder) {}
        protected function emitPreFolderRenameSignal(Folder $folder, $newName) {}
        protected function emitPostFolderRenameSignal(Folder $folder, $newName) {}
        protected function emitPreFolderDeleteSignal(Folder $folder) {}
        protected function emitPostFolderDeleteSignal(Folder $folder) {}
        protected function emitPreGeneratePublicUrlSignal(ResourceInterface $resourceObject, $relativeToCurrentScript, array $urlData) {}
        protected function getUniqueName(FolderInterface $folder, $theFile, $dontCheckForUnique = false) {}
        /**
         * Get the SignalSlot dispatcher.
         *
         * @return Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        /**
         * Gets the ObjectManager.
         *
         * @return ObjectManager
         */
        protected function getObjectManager() {}
        /**
         * @return ResourceFactory
         */
        protected function getFileFactory() {}
        /**
         * @return Index\FileIndexRepository
         */
        protected function getFileIndexRepository() {}
        /**
         * @return Service\FileProcessingService
         */
        protected function getFileProcessingService() {}
        public function getRole(FolderInterface $folder) {}
        public function getProcessingFolder(File $file = null) {}
        protected function getNestedProcessingFolder(File $file, Folder $rootProcessingFolder) {}
        protected function getNamesForNestedProcessingFolder($fileIdentifier, $levels) {}
        /**
         * Gets the driver Type configured for this storage.
         *
         * @return string
         */
        public function getDriverType() {}
        /**
         * Gets the Indexer.
         *
         * @return Index\Indexer
         */
        protected function getIndexer() {}
        public function setDefault($isDefault) {}
        /**
         * @return bool
         */
        public function isDefault() {}
        /**
         * @return ResourceFactory
         */
        public function getResourceFactoryInstance() : ResourceFactory {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Repository for accessing files
     * it also serves as the public API for the indexing part of files in general
     */
    class ProcessedFileRepository extends \typo3\cms\core\resource\abstractrepository implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * The main object type of this class. In some cases (fileReference) this
         * repository can also return FileReference objects, implementing the
         * common FileInterface.
         *
         * @var string
         */
        protected $objectType;
        /**
         * Main File object storage table. Note that this repository also works on
         * the sys_file_reference table when returning FileReference objects.
         *
         * @var string
         */
        protected $table;
        /**
         * As determining the table columns is a costly operation this is done only once during runtime and cached then
         *
         * @var array
         * @see cleanUnavailableColumns()
         */
        protected $tableColumns;

        /**
         * Creates this object.
         */
        public function __construct() {}
        public function createNewProcessedFileObject(FileInterface $originalFile, $taskType, array $configuration) {}
        protected function createDomainObject(array $databaseRow) {}
        public function findByStorageAndIdentifier(ResourceStorage $storage, $identifier) {}
        public function add($processedFile) {}
        public function update($processedFile) {}
        public function findOneByOriginalFileAndTaskTypeAndConfiguration(FileInterface $file, $taskType, array $configuration) {}
        public function findAllByOriginalFile(FileInterface $file) {}
        public function removeAll($storageUid = null) {}
        protected function cleanUnavailableColumns(array $data) {}
    }

    /**
     * File representation in the file abstraction layer.
     */
    class File extends \typo3\cms\core\resource\abstractfile {
        /**
         * @var bool
         */
        protected $metaDataLoaded;
        /**
         * @var array
         */
        protected $metaDataProperties;
        /**
         * Set to TRUE while this file is being indexed - used to prevent some endless loops
         *
         * @var bool
         */
        protected $indexingInProgress;
        /**
         * Contains the names of all properties that have been update since the
         * instantiation of this object
         *
         * @var array
         */
        protected $updatedProperties;

        public function __construct(array $fileData, ResourceStorage $storage, array $metaData = [ ]) {}
        public function getProperty($key) {}
        public function hasProperty($key) {}
        /**
         * Returns the properties of this object.
         *
         * @return array
         */
        public function getProperties() {}
        /**
         * Returns the MetaData
         *
         * @return array
         * @internal
         */
        public function _getMetaData() {}
        /**
         * Get the contents of this file
         *
         * @return string File contents
         */
        public function getContents() {}
        /**
         * Gets SHA1 hash.
         *
         * @return string
         */
        public function getSha1() {}
        public function setContents($contents) {}
        /**
         * Returns TRUE if this file is indexed
         *
         * @return bool|null
         */
        public function isIndexed() {}
        /**
         * Loads MetaData from Repository
         */
        protected function loadMetaData() {}
        public function updateProperties(array $properties) {}
        public function _updateMetaDataProperties(array $properties) {}
        /**
         * Returns the names of all properties that have been updated in this record
         *
         * @return array
         */
        public function getUpdatedProperties() {}
        public function checkActionPermission($action) {}
        /**
         * Creates a MD5 hash checksum based on the combined identifier of the file,
         * the files' mimetype and the systems' encryption key.
         * used to generate a thumbnail, and this hash is checked if valid
         *
         * @return string the MD5 hash
         */
        public function calculateChecksum() {}
        public function process($taskType, array $configuration) {}
        /**
         * Returns an array representation of the file.
         * (This is used by the generic listing module vidi when displaying file records.)
         *
         * @return array Array of main data of the file. Don't rely on all data to be present here, it's just a selection of the most relevant information.
         */
        public function toArray() {}
        /**
         * @return bool
         */
        public function isMissing() {}
        public function setMissing($missing) {}
        public function getPublicUrl($relativeToCurrentScript = false) {}
        /**
         * @return Index\MetaDataRepository
         */
        protected function getMetaDataRepository() {}
        /**
         * @return Index\FileIndexRepository
         */
        protected function getFileIndexRepository() {}
        public function setIndexingInProgess($indexingState) {}
        public function _getPropertyRaw($key) {}
    }

    /**
     * Abstract repository implementing the basic repository methods
     */
    abstract class AbstractRepository implements \typo3\cms\core\singletoninterface, \typo3\cms\extbase\persistence\repositoryinterface {
        /**
         * @var string
         */
        protected $table;
        /**
         * @var ResourceFactory
         */
        protected $factory;
        /**
         * @var string
         */
        protected $typeField;
        /**
         * @var string
         */
        protected $type;
        /**
         * The main object type of this class
         *
         * @var string
         */
        protected $objectType;

        /**
         * Creates this object.
         */
        public function __construct() {}
        public function add($object) {}
        public function remove($object) {}
        public function replace($existingObject, $newObject) {}
        public function update($modifiedObject) {}
        /**
         * Returns all objects of this repository add()ed but not yet persisted to
         * the storage layer.
         *
         * @return array An array of objects
         */
        public function getAddedObjects() {}
        /**
         * Returns an array with objects remove()d from the repository that
         * had been persisted to the storage layer before.
         *
         * @return array
         */
        public function getRemovedObjects() {}
        /**
         * Returns all objects of this repository.
         *
         * @return array An array of objects, empty if no objects found
         * @api
         */
        public function findAll() {}
        abstract protected function createDomainObject(array $databaseRow) ;
        /**
         * Returns the total number objects of this repository.
         *
         * @return int The object count
         * @api
         */
        public function countAll() {}
        /**
         * Removes all objects of this repository as if remove() was called for
         * all of them.
         *
         * @api
         */
        public function removeAll() {}
        public function findByUid($uid) {}
        public function setDefaultOrderings(array $defaultOrderings) {}
        public function setDefaultQuerySettings(\TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface $defaultQuerySettings) {}
        /**
         * Returns a query for objects of this repository
         *
         * @throws \BadMethodCallException
         * @return \TYPO3\CMS\Extbase\Persistence\QueryInterface
         * @api
         */
        public function createQuery() {}
        public function findByIdentifier($identifier) {}
        public function __call($method, $arguments) {}
        /**
         * Returns the object type this repository is managing.
         *
         * @return string
         * @api
         */
        public function getEntityClassName() {}
        /**
         * Function to return the current TYPO3_MODE.
         * This function can be mocked in unit tests to be able to test frontend behaviour.
         *
         * @return string
         */
        protected function getEnvironmentMode() {}
    }

    /**
     * A representation for an inaccessible folder.
     *
     * If a folder has execution rights you can list it's contents
     * despite the access rights on the subfolders. If a subfolder
     * has no rights it has to be shown anyhow, but marked as
     * inaccessible.
     */
    class InaccessibleFolder extends \typo3\cms\core\resource\folder {
        /**
         * Throws an Exception,
         * used to prevent duplicate code in all the methods
         *
         * @throws Exception\InsufficientFolderReadPermissionsException
         */
        protected function throwInaccessibleException() {}
        public function setName($name) {}
        public function getPublicUrl($relativeToCurrentScript = false) {}
        public function getFiles($start = 0, $numberOfItems = 0, $filterMode = self::FILTER_MODE_USE_OWN_AND_STORAGE_FILTERS, $recursive = false, $sort = '', $sortRev = false) {}
        public function getFileCount(array $filterMethods = [ ], $recursive = false) {}
        public function getSubfolder($name) {}
        public function getSubfolders($start = 0, $numberOfItems = 0, $filterMode = self::FILTER_MODE_USE_OWN_AND_STORAGE_FILTERS, $recursive = false) {}
        public function addFile($localFilePath, $fileName = null, $conflictMode = DuplicationBehavior::CANCEL) {}
        public function addUploadedFile(array $uploadedFileData, $conflictMode = DuplicationBehavior::CANCEL) {}
        public function rename($newName) {}
        public function delete($deleteRecursively = true) {}
        public function createFile($fileName) {}
        public function createFolder($folderName) {}
        public function copyTo(Folder $targetFolder, $targetFolderName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        public function moveTo(Folder $targetFolder, $targetFolderName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        public function hasFile($name) {}
        public function hasFolder($name) {}
        public function updateProperties(array $properties) {}
        public function setFileAndFolderNameFilters(array $filters) {}
        /**
         * @return int
         */
        public function getModificationTime() {}
        /**
         * @return int
         */
        public function getCreationTime() {}
    }

    /**
     * Enumeration object for DuplicationBehavior
     */
    class DuplicationBehavior extends \typo3\cms\core\type\enumeration {
        const __default = self::CANCEL;
        const REPLACE = 'replace';
        const RENAME = 'rename';
        const CANCEL = 'cancel';

    }

    /**
     * Repository for accessing the file mounts
     */
    class StorageRepository extends \typo3\cms\core\resource\abstractrepository {
        /**
         * @var NULL|array‚
         */
        static protected $storageRowCache;
        /**
         * @var string
         */
        protected $objectType;
        /**
         * @var string
         */
        protected $table;
        /**
         * @var string
         */
        protected $typeField;
        /**
         * @var string
         */
        protected $driverField;
        /**
         * @var \TYPO3\CMS\Core\Log\Logger
         */
        protected $logger;

        /** @var $logManager LogManager */
        public function __construct() {}
        public function findByUid($uid) {}
        /**
         * Initializes the Storage
         */
        protected function initializeLocalCache() {}
/** @var $driverRegistry Driver\DriverRegistry */
        public function findByStorageType(/** @var $driverRegistry Driver\DriverRegistry */
$storageType) {}
        /**
         * Returns a list of mountpoints that are available in the VFS.
         * In case no storage exists this automatically created a storage for fileadmin/
         *
         * @return ResourceStorage[]
         */
        public function findAll() {}
/** @var $flexObj FlexFormTools */
        public function createLocalStorage(/** @var $flexObj FlexFormTools */
$name, /** @var $flexObj FlexFormTools */
$basePath, /** @var $flexObj FlexFormTools */
$pathType, /** @var $flexObj FlexFormTools */
$description = '', /** @var $flexObj FlexFormTools */
$default = false) {}
        protected function createDomainObject(array $databaseRow) {}
        protected function testCaseSensitivity($absolutePath) {}
    }

    /**
     * A folder that groups files in a storage. This may be a folder on the local
     * disk, a bucket in Amazon S3 or a user or a tag in Flickr.
     *
     * This object is not persisted in TYPO3 locally, but created on the fly by
     * storage drivers for the folders they "offer".
     *
     * Some folders serve as a physical container for files (e.g. folders on the
     * local disk, S3 buckets or Flickr users). Other folders just group files by a
     * certain criterion, e.g. a tag.
     * The way this is implemented depends on the storage driver.
     */
    class Folder implements \typo3\cms\core\resource\folderinterface {
        const FILTER_MODE_USE_OWN_AND_STORAGE_FILTERS = 1;
        const FILTER_MODE_USE_STORAGE_FILTERS = 2;
        const FILTER_MODE_NO_FILTERS = 0;
        const FILTER_MODE_USE_OWN_FILTERS = 3;

        /**
         * The storage this folder belongs to.
         *
         * @var ResourceStorage
         */
        protected $storage;
        /**
         * The identifier of this folder to identify it on the storage.
         * On some drivers, this is the path to the folder, but drivers could also just
         * provide any other unique identifier for this folder on the specific storage.
         *
         * @var string
         */
        protected $identifier;
        /**
         * The name of this folder
         *
         * @var string
         */
        protected $name;
        /**
         * The filters this folder should use for a filelist.
         *
         * @var callable[]
         */
        protected $fileAndFolderNameFilters;

        public function __construct(ResourceStorage $storage, $identifier, $name) {}
        /**
         * Returns the name of this folder.
         *
         * @return string
         */
        public function getName() {}
        public function getReadablePath($rootId = null) {}
        public function setName($name) {}
        /**
         * Returns the storage this folder belongs to.
         *
         * @return ResourceStorage
         */
        public function getStorage() {}
        /**
         * Returns the path of this folder inside the storage. It depends on the
         * type of storage whether this is a real path or just some unique identifier.
         *
         * @return string
         */
        public function getIdentifier() {}
        /**
         * Get hashed identifier
         *
         * @return string
         */
        public function getHashedIdentifier() {}
        /**
         * Returns a combined identifier of this folder, i.e. the storage UID and
         * the folder identifier separated by a colon ":".
         *
         * @return string Combined storage and folder identifier, e.g. StorageUID:folder/path/
         */
        public function getCombinedIdentifier() {}
        public function getPublicUrl($relativeToCurrentScript = false) {}
        public function getFiles($start = 0, $numberOfItems = 0, $filterMode = self::FILTER_MODE_USE_OWN_AND_STORAGE_FILTERS, $recursive = false, $sort = '', $sortRev = false) {}
        public function getFileCount(array $filterMethods = [ ], $recursive = false) {}
        public function getSubfolder($name) {}
        public function getSubfolders($start = 0, $numberOfItems = 0, $filterMode = self::FILTER_MODE_USE_OWN_AND_STORAGE_FILTERS, $recursive = false) {}
        public function addFile($localFilePath, $fileName = null, $conflictMode = DuplicationBehavior::CANCEL) {}
        public function addUploadedFile(array $uploadedFileData, $conflictMode = DuplicationBehavior::CANCEL) {}
        public function rename($newName) {}
        public function delete($deleteRecursively = true) {}
        public function createFile($fileName) {}
        public function createFolder($folderName) {}
        public function copyTo(Folder $targetFolder, $targetFolderName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        public function moveTo(Folder $targetFolder, $targetFolderName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        public function hasFile($name) {}
        public function hasFolder($name) {}
        public function checkActionPermission($action) {}
        public function updateProperties(array $properties) {}
        protected function prepareFiltersInStorage($filterMode) {}
        protected function restoreBackedUpFiltersInStorage($backedUpFilters) {}
        public function setFileAndFolderNameFilters(array $filters) {}
        /**
         * Returns the role of this folder (if any). See FolderInterface::ROLE_* constants for possible values.
         *
         * @return int
         */
        public function getRole() {}
        /**
         * Returns the parent folder.
         *
         * In non-hierarchical storages, that always is the root folder.
         *
         * The parent folder of the root folder is the root folder.
         *
         * @return Folder
         */
        public function getParentFolder() {}
        /**
         * Returns the modification time of the file as Unix timestamp
         *
         * @return int
         */
        public function getModificationTime() {}
        /**
         * Returns the creation time of the file as Unix timestamp
         *
         * @return int
         */
        public function getCreationTime() {}
    }

    /**
     * Factory class for FAL objects
     */
    class ResourceFactory implements \typo3\cms\core\singletoninterface, \typo3\cms\core\resource\resourcefactoryinterface {
        /**
         * @var ResourceStorage[]
         */
        protected $storageInstances;
        /**
         * @var Collection\AbstractFileCollection[]
         */
        protected $collectionInstances;
        /**
         * @var File[]
         */
        protected $fileInstances;
        /**
         * @var FileReference[]
         */
        protected $fileReferenceInstances;
        /**
         * A list of the base paths of "local" driver storages. Used to make the detection of base paths easier.
         *
         * @var array
         */
        protected $localDriverStorageCache;
        /**
         * @var Dispatcher
         */
        protected $signalSlotDispatcher;

        /**
         * Gets a singleton instance of this class.
         *
         * @return ResourceFactory
         */
        public static function getInstance() {}
        public function __construct(Dispatcher $signalSlotDispatcher = null) {}
/** @var $driverRegistry Driver\DriverRegistry */
        public function getDriverObject(/** @var $driverRegistry Driver\DriverRegistry */
$driverIdentificationString, /** @var $driverRegistry Driver\DriverRegistry */
array $driverConfiguration) {}
        /**
         * Returns the Default Storage
         *
         * The Default Storage is considered to be the replacement for the fileadmin/ construct.
         * It is automatically created with the setting fileadminDir from install tool.
         * getDefaultStorage->getDefaultFolder() will get you fileadmin/user_upload/ in a standard
         * TYPO3 installation.
         *
         * @return ResourceStorage|null
         */
        public function getDefaultStorage() {}
/** @var $storage ResourceStorage */
        public function getStorageObject(/** @var $storage ResourceStorage */
$uid, /** @var $storage ResourceStorage */
array $recordData = [ ], /** @var $storage ResourceStorage */
$fileIdentifier = null) {}
        protected function emitPreProcessStorageSignal($uid, $recordData, $fileIdentifier) {}
        protected function emitPostProcessStorageSignal(ResourceStorage $storageObject) {}
        protected function findBestMatchingStorageByLocalPath($localPath) {}
        /** @var $storageObjects ResourceStorage[] */
        protected function initializeLocalStorageCache() {}
        public function convertFlexFormDataToConfigurationArray($flexFormData) {}
        public function getCollectionObject($uid, array $recordData = [ ]) {}
/** @var \TYPO3\CMS\Core\Collection\AbstractRecordCollection $class */
        public function createCollectionObject(/** @var \TYPO3\CMS\Core\Collection\AbstractRecordCollection $class */
array $collectionData) {}
        public function createStorageObject(array $storageRecord, array $storageConfiguration = null) {}
        public function createFolderObject(ResourceStorage $storage, $identifier, $name) {}
        public function getFileObject($uid, array $fileData = [ ]) {}
        public function getFileObjectFromCombinedIdentifier($identifier) {}
        public function getFileObjectByStorageAndIdentifier($storageUid, $fileIdentifier) {}
        public function retrieveFileOrFolderObject($input) {}
        public function getFolderObjectFromCombinedIdentifier($identifier) {}
        public function getStorageObjectFromCombinedIdentifier($identifier) {}
        public function getObjectFromCombinedIdentifier($identifier) {}
/** @var File $fileObject */
        public function createFileObject(/** @var File $fileObject */
array $fileData, /** @var File $fileObject */
ResourceStorage $storage = null) {}
        public function getFileReferenceObject($uid, array $fileReferenceData = [ ], $raw = false) {}
/** @var FileReference $fileReferenceObject */
        public function createFileReferenceObject(/** @var FileReference $fileReferenceObject */
array $fileReferenceData) {}
        protected function getFileReferenceData($uid, $raw = false) {}
        /**
         * Returns an instance of the FileIndexRepository
         *
         * @return FileIndexRepository
         */
        protected function getFileIndexRepository() {}
        /**
         * Returns an instance of the ProcessedFileRepository
         *
         * @return ProcessedFileRepository
         */
        protected function getProcessedFileRepository() {}
        protected function getIndexer(ResourceStorage $storage) {}
    }

    /**
     * Abstract file representation in the file abstraction layer.
     */
    abstract class AbstractFile implements \typo3\cms\core\resource\fileinterface {
        const FILETYPE_APPLICATION = 5;
        const FILETYPE_AUDIO = 3;
        const FILETYPE_VIDEO = 4;
        const FILETYPE_IMAGE = 2;
        const FILETYPE_UNKNOWN = 0;
        const FILETYPE_TEXT = 1;

        /**
         * Various file properties
         *
         * Note that all properties, which only the persisted (indexed) files have are stored in this
         * overall properties array only. The only properties which really exist as object properties of
         * the file object are the storage, the identifier, the fileName and the indexing status.
         *
         * @var array
         */
        protected $properties;
        /**
         * The storage this file is located in
         *
         * @var ResourceStorage
         */
        protected $storage;
        /**
         * The identifier of this file to identify it on the storage.
         * On some drivers, this is the path to the file, but drivers could also just
         * provide any other unique identifier for this file on the specific storage.
         *
         * @var string
         */
        protected $identifier;
        /**
         * The file name of this file
         *
         * @var string
         */
        protected $name;
        /**
         * If set to true, this file is regarded as being deleted.
         *
         * @var bool
         */
        protected $deleted;

        public function hasProperty($key) {}
        public function getProperty($key) {}
        /**
         * Returns the properties of this object.
         *
         * @return array
         */
        public function getProperties() {}
        /**
         * Returns the identifier of this file
         *
         * @return string
         */
        public function getIdentifier() {}
        /**
         * Get hashed identifier
         *
         * @return string
         */
        public function getHashedIdentifier() {}
        /**
         * Returns the name of this file
         *
         * @return string
         */
        public function getName() {}
        /**
         * Returns the basename (the name without extension) of this file.
         *
         * @return string
         */
        public function getNameWithoutExtension() {}
        /**
         * Returns the size of this file
         *
         * @throws \RuntimeException
         * @return int|null Returns null if size is not available for the file
         */
        public function getSize() {}
        /**
         * Returns the uid of this file
         *
         * @return int
         */
        public function getUid() {}
        /**
         * Returns the Sha1 of this file
         *
         * @throws \RuntimeException
         * @return string
         */
        public function getSha1() {}
        /**
         * Returns the creation time of the file as Unix timestamp
         *
         * @throws \RuntimeException
         * @return int
         */
        public function getCreationTime() {}
        /**
         * Returns the date (as UNIX timestamp) the file was last modified.
         *
         * @throws \RuntimeException
         * @return int
         */
        public function getModificationTime() {}
        /**
         * Get the extension of this file in a lower-case variant
         *
         * @return string The file extension
         */
        public function getExtension() {}
        /**
         * Get the MIME type of this file
         *
         * @return string mime type
         */
        public function getMimeType() {}
        /**
         * Returns the fileType of this file
         * basically there are only five main "file types"
         * "audio"
         * "image"
         * "software"
         * "text"
         * "video"
         * "other"
         * see the constants in this class
         *
         * @return int $fileType
         */
        public function getType() {}
        /**
         * Get the contents of this file
         *
         * @throws \RuntimeException
         * @return string File contents
         */
        public function getContents() {}
        public function setContents($contents) {}
        /**
         * Get the storage this file is located in
         *
         * @return ResourceStorage
         * @throws \RuntimeException
         */
        public function getStorage() {}
        /**
         * Checks if this file exists. This should normally always return TRUE;
         * it might only return FALSE when this object has been created from an
         * index record without checking for.
         *
         * @return bool TRUE if this file physically exists
         */
        public function exists() {}
        public function setStorage(ResourceStorage $storage) {}
        public function setIdentifier($identifier) {}
        /**
         * Returns a combined identifier of this file, i.e. the storage UID and the
         * folder identifier separated by a colon ":".
         *
         * @return string Combined storage and file identifier, e.g. StorageUID:path/and/fileName.png
         */
        public function getCombinedIdentifier() {}
        /**
         * Deletes this file from its storage. This also means that this object becomes useless.
         *
         * @return bool TRUE if deletion succeeded
         */
        public function delete() {}
        /**
         * Marks this file as deleted. This should only be used inside the
         * File Abstraction Layer, as it is a low-level API method.
         */
        public function setDeleted() {}
        /**
         * Returns TRUE if this file has been deleted
         *
         * @return bool
         */
        public function isDeleted() {}
        public function rename($newName, $conflictMode = DuplicationBehavior::RENAME) {}
        public function copyTo(Folder $targetFolder, $targetFileName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        public function moveTo(Folder $targetFolder, $targetFileName = null, $conflictMode = DuplicationBehavior::RENAME) {}
        public function getPublicUrl($relativeToCurrentScript = false) {}
        public function getForLocalProcessing($writable = true) {}
        abstract public function updateProperties(array $properties) ;
        /**
         * Returns the parent folder.
         *
         * @return FolderInterface
         */
        public function getParentFolder() {}
    }

    /**
     * Representation of a specific processed version of a file. These are created by the FileProcessingService,
     * which in turn uses helper classes for doing the actual file processing. See there for a detailed description.
     *
     * Objects of this class may be freshly created during runtime or being fetched from the database. The latter
     * indicates that the file has been processed earlier and was then cached.
     *
     * Each processed file—besides belonging to one file—has been created for a certain task (context) and
     * configuration. All these won't change during the lifetime of a processed file; the only thing
     * that can change is the original file, or rather it's contents. In that case, the processed file has to
     * be processed again. Detecting this is done via comparing the current SHA1 hash of the original file against
     * the one it had at the time the file was processed.
     * The configuration of a processed file indicates what should be done to the original file to create the
     * processed version. This may include things like cropping, scaling, rotating, flipping or using some special
     * magic.
     * A file may also meet the expectations set in the configuration without any processing. In that case, the
     * ProcessedFile object still exists, but there is no physical file directly linked to it. Instead, it then
     * redirects most method calls to the original file object. The data of these objects are also stored in the
     * database, to indicate that no processing is required. With such files, the identifier and name fields in the
     * database are empty to show this.
     */
    class ProcessedFile extends \typo3\cms\core\resource\abstractfile {
        const CONTEXT_IMAGECROPSCALEMASK = 'Image.CropScaleMask';
        const CONTEXT_IMAGEPREVIEW = 'Image.Preview';

        /**
         * Processing context, i.e. the type of processing done
         *
         * @var string
         */
        protected $taskType;
        /**
         * @var Processing\TaskInterface
         */
        protected $task;
        /**
         * @var Processing\TaskTypeRegistry
         */
        protected $taskTypeRegistry;
        /**
         * Processing configuration
         *
         * @var array
         */
        protected $processingConfiguration;
        /**
         * Reference to the original file this processed file has been created from.
         *
         * @var File
         */
        protected $originalFile;
        /**
         * The SHA1 hash of the original file this processed version has been created for.
         * Is used for detecting changes if the original file has been changed and thus
         * we have to recreate this processed file.
         *
         * @var string
         */
        protected $originalFileSha1;
        /**
         * A flag that shows if this object has been updated during its lifetime, i.e. the file has been
         * replaced with a new one.
         *
         * @var bool
         */
        protected $updated;

        public function __construct(File $originalFile, $taskType, array $processingConfiguration, array $databaseRow = null) {}
        protected function reconstituteFromDatabaseRecord(array $databaseRow) {}
        /**
         * Returns a unique checksum for this file's processing configuration and original file.
         *
         * @return string
         */
        public function calculateChecksum() {}
        public function setContents($contents) {}
        public function updateWithLocalFile($filePath) {}
        /**
         * Returns TRUE if this file is indexed
         *
         * @return bool
         */
        public function isIndexed() {}
        /**
         * Checks whether the ProcessedFile already has an entry in sys_file_processedfile table
         *
         * @return bool
         */
        public function isPersisted() {}
        /**
         * Checks whether the ProcessedFile Object is newly created
         *
         * @return bool
         */
        public function isNew() {}
        /**
         * Checks whether the object since last reconstitution, and therefore
         * needs persistence again
         *
         * @return bool
         */
        public function isUpdated() {}
        public function setName($name) {}
        /**
         * Returns TRUE if this file is already processed.
         *
         * @return bool
         */
        public function isProcessed() {}
        /**
         * Getter for the Original, unprocessed File
         *
         * @return File
         */
        public function getOriginalFile() {}
        /**
         * Get the identifier of the file
         *
         * If there is no processed file in the file system  (as the original file did not have to be modified e.g.
         * when the original image is in the boundaries of the maxW/maxH stuff), then just return the identifier of
         * the original file
         *
         * @return string
         */
        public function getIdentifier() {}
        /**
         * Get the name of the file
         *
         * If there is no processed file in the file system (as the original file did not have to be modified e.g.
         * when the original image is in the boundaries of the maxW/maxH stuff)
         * then just return the name of the original file
         *
         * @return string
         */
        public function getName() {}
        public function updateProperties(array $properties) {}
        /**
         * Basic array function for the DB update
         *
         * @return array
         */
        public function toArray() {}
        /**
         * Returns TRUE if this file has not been changed during processing (i.e., we just deliver the original file)
         *
         * @return bool
         */
        protected function isUnchanged() {}
        /**
         * Defines that the original file should be used.
         */
        public function setUsesOriginalFile() {}
        /**
         * @return bool
         */
        public function usesOriginalFile() {}
        /**
         * Returns TRUE if the original file of this file changed and the file should be processed again.
         *
         * @return bool
         */
        public function isOutdated() {}
        public function delete($force = false) {}
        public function getProperty($key) {}
        /**
         * Returns the uid of this file
         *
         * @return int
         */
        public function getUid() {}
        /**
         * Checks if the ProcessedFile needs reprocessing
         *
         * @return bool
         */
        public function needsReprocessing() {}
        /**
         * Returns the processing information
         *
         * @return array
         */
        public function getProcessingConfiguration() {}
        /**
         * Getter for the task identifier.
         *
         * @return string
         */
        public function getTaskIdentifier() {}
        /**
         * Returns the task object associated with this processed file.
         *
         * @return Processing\TaskInterface
         * @throws \RuntimeException
         */
        public function getTask() {}
        /**
         * Generate the name of of the new File
         *
         * @return string
         */
        public function generateProcessedFileNameWithoutExtension() {}
        public function getPublicUrl($relativeToCurrentScript = false) {}
    }

    /**
     * Repository for accessing the collections stored in the database
     */
    class FileCollectionRepository extends \typo3\cms\core\collection\recordcollectionrepository {
        /**
         * @var string
         */
        protected $table;
        /**
         * @var string
         */
        protected $typeField;

        public function findByUid($uid) {}
        protected function createDomainObject(array $record) {}
        /**
         * Gets the file factory.
         *
         * @return ResourceFactory
         */
        protected function getFileFactory() {}
    }

    /**
     * An exception when something is wrong with the file handling
     */
    class Exception extends \typo3\cms\core\exception {}

    /**
     * Repository for accessing files
     * it also serves as the public API for the indexing part of files in general
     */
    class FileRepository extends \typo3\cms\core\resource\abstractrepository {
        /**
         * The main object type of this class. In some cases (fileReference) this
         * repository can also return FileReference objects, implementing the
         * common FileInterface.
         *
         * @var string
         */
        protected $objectType;
        /**
         * Main File object storage table. Note that this repository also works on
         * the sys_file_reference table when returning FileReference objects.
         *
         * @var string
         */
        protected $table;

        protected function createDomainObject(array $databaseRow) {}
/** @var $relationHandler RelationHandler */
        public function findByRelation(/** @var $relationHandler RelationHandler */
$tableName, /** @var $relationHandler RelationHandler */
$fieldName, /** @var $relationHandler RelationHandler */
$uid) {}
        public function findFileReferenceByUid($uid) {}
/** @var ResourceFactory $fileFactory */
        public function searchByName(/** @var ResourceFactory $fileFactory */
Folder $folder, /** @var ResourceFactory $fileFactory */
$fileName) {}
        /**
         * Return a file index repository
         *
         * @return FileIndexRepository
         */
        protected function getFileIndexRepository() {}
    }


    /**
     * File Interface
     */
    interface FileInterface extends \typo3\cms\core\resource\resourceinterface {
        function hasProperty($key) ;
        function getProperty($key) ;
        /**
         * Returns the size of this file
         *
         * @return int
         */
        function getSize() ;
        /**
         * Returns the Sha1 of this file
         *
         * @return string
         */
        function getSha1() ;
        /**
         * Returns the basename (the name without extension) of this file.
         *
         * @return string
         */
        function getNameWithoutExtension() ;
        /**
         * Get the file extension
         *
         * @return string The file extension
         */
        function getExtension() ;
        /**
         * Get the MIME type of this file
         *
         * @return string mime type
         */
        function getMimeType() ;
        /**
         * Returns the modification time of the file as Unix timestamp
         *
         * @return int
         */
        function getModificationTime() ;
        /**
         * Returns the creation time of the file as Unix timestamp
         *
         * @return int
         */
        function getCreationTime() ;
        /**
         * Get the contents of this file
         *
         * @return string File contents
         */
        function getContents() ;
        function setContents($contents) ;
        /**
         * Deletes this file from its storage. This also means that this object becomes useless.
         *
         * @return bool TRUE if deletion succeeded
         */
        function delete() ;
        function rename($newName, $conflictMode = DuplicationBehavior::RENAME) ;
        function getPublicUrl($relativeToCurrentScript = false) ;
        /**
         * Returns TRUE if this file is indexed
         *
         * @return bool
         */
        function isIndexed() ;
        function getForLocalProcessing($writable = true) ;
        /**
         * Returns an array representation of the file.
         * (This is used by the generic listing module vidi when displaying file records.)
         *
         * @return array Array of main data of the file. Don't rely on all data to be present here, it's just a selection of the most relevant information.
         */
        function toArray() ;
    }

    /**
     * Interface for folders
     */
    interface FolderInterface extends \typo3\cms\core\resource\resourceinterface {
    const ROLE_DEFAULT = 'default';
    const ROLE_PROCESSING = 'processing';
    const ROLE_RECYCLER = 'recycler';
    const ROLE_USERUPLOAD = 'userupload';
    const ROLE_TEMPORARY = 'temporary';
    const ROLE_READONLY_MOUNT = 'readonly-mount';
    const ROLE_MOUNT = 'mount';
    const ROLE_USER_MOUNT = 'user-mount';
        /**
         * Returns a list of all subfolders
         *
         * @return Folder[]
         */
        function getSubfolders() ;
        function getSubfolder($name) ;
        function hasFolder($name) ;
        function hasFile($name) ;
        function rename($newName) ;
        /**
         * Deletes this folder from its storage. This also means that this object becomes useless.
         *
         * @return bool TRUE if deletion succeeded
         */
        function delete() ;
        /**
         * Returns the modification time of the folder as Unix timestamp
         *
         * @return int
         */
        function getModificationTime() ;
        /**
         * Returns the creation time of the folder as Unix timestamp
         *
         * @return int
         */
        function getCreationTime() ;
    }

    /**
     * An interface containing constants for the resource factory
     */
    interface ResourceFactoryInterface {
    const SIGNAL_PreProcessStorage = 'preProcessStorage';
    const SIGNAL_PostProcessStorage = 'postProcessStorage';
    }

    /**
     * The interface for a resource storage containing all constants
     */
    interface ResourceStorageInterface {
    const SIGNAL_PostFileReplace = 'postFileReplace';
    const SIGNAL_PreFileReplace = 'preFileReplace';
    const SIGNAL_PostFileRename = 'postFileRename';
    const SIGNAL_PreFileRename = 'preFileRename';
    const SIGNAL_PostFileDelete = 'postFileDelete';
    const SIGNAL_PreFileDelete = 'preFileDelete';
    const SIGNAL_PostFileMove = 'postFileMove';
    const SIGNAL_PreFileMove = 'preFileMove';
    const SIGNAL_PostFileCopy = 'postFileCopy';
    const SIGNAL_PreFileCopy = 'preFileCopy';
    const SIGNAL_PostFileCreate = 'postFileCreate';
    const SIGNAL_PostFileAdd = 'postFileAdd';
    const SIGNAL_PreFileAdd = 'preFileAdd';
    const SIGNAL_SanitizeFileName = 'sanitizeFileName';
    const CAPABILITY_WRITABLE = 4;
    const CAPABILITY_BROWSABLE = 1;
    const CAPABILITY_PUBLIC = 2;
    const SIGNAL_PostFolderRename = 'postFolderRename';
    const SIGNAL_PreGeneratePublicUrl = 'preGeneratePublicUrl';
    const SIGNAL_PostFolderDelete = 'postFolderDelete';
    const SIGNAL_PreFolderRename = 'preFolderRename';
    const SIGNAL_PostFolderMove = 'postFolderMove';
    const SIGNAL_PreFolderDelete = 'preFolderDelete';
    const SIGNAL_PostFolderCopy = 'postFolderCopy';
    const SIGNAL_PreFolderMove = 'preFolderMove';
    const SIGNAL_PostFolderAdd = 'postFolderAdd';
    const SIGNAL_PreFolderCopy = 'preFolderCopy';
    const SIGNAL_PostFileSetContents = 'postFileSetContents';
    const SIGNAL_PreFolderAdd = 'preFolderAdd';
    const DEFAULT_ProcessingFolder = '_processed_';
    }

    /**
     * ResourceInterface
     */
    interface ResourceInterface {
        /**
         * Returns the identifier of this file
         *
         * @return string
         */
        function getIdentifier() ;
        /**
         * Returns the name of this file
         *
         * @return string
         */
        function getName() ;
        /**
         * Get the storage this file is located in
         *
         * @return ResourceStorage
         */
        function getStorage() ;
        /**
         * Get hashed identifier
         *
         * @return string
         */
        function getHashedIdentifier() ;
        /**
         * @return FolderInterface
         */
        function getParentFolder() ;
    }

}

namespace TYPO3\CMS\Core\Resource\Collection {
    /**
     * A collection containing a static set of files. This collection is persisted
     * to the database with references to all files it contains.
     */
    class StaticFileCollection extends \typo3\cms\core\resource\collection\abstractfilecollection {
        /**
         * @var string
         */
        static protected $type;
        /**
         * @var string
         */
        static protected $itemsCriteriaField;
        /**
         * @var string
         */
        protected $itemTableName;

        /** @var FileRepository $fileRepository */
        public function loadContents() {}
    }

    /**
     * Registry for FileCollection classes
     */
    class FileCollectionRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * Registered FileCollection types
         *
         * @var array
         */
        protected $types;

        /**
         * Constructor
         */
        public function __construct() {}
        public function registerFileCollectionClass($className, $type, $override = false) {}
        public function addTypeToTCA($type, $label, $availableFields, array $additionalColumns = [ ]) {}
        public function getFileCollectionClass($type) {}
        public function fileCollectionTypeExists($type) {}
    }

    /**
     * Abstract collection.
     */
    abstract class AbstractFileCollection extends \typo3\cms\core\collection\abstractrecordcollection {
        /**
         * The table name collections are stored to
         *
         * @var string
         */
        static protected $storageTableName;
        /**
         * The type of file collection
         * (see \TYPO3\CMS\Core\Collection\RecordCollectionRepository::TYPE constants)
         *
         * @var string
         */
        static protected $type;
        /**
         * The name of the field items are handled with
         * (usually either criteria, items or folder)
         *
         * @var string
         */
        static protected $itemsCriteriaField;
        /**
         * Field contents of $itemsCriteriaField. Defines which the items or search criteria for the items
         * depending on the type (see self::$type above) of this file collection.
         *
         * @var mixed
         */
        protected $itemsCriteria;
        /**
         * Name of the table records of this collection are stored in
         *
         * @var string
         */
        protected $itemTableName;

        public function setDescription($description) {}
        public function setTitle($title) {}
        /** @var $currentRecord File */
        public function key() {}
/** @var $entry File */
        protected function getItemUidList(/** @var $entry File */
$includeTableName = false) {}
        /**
         * Returns an array of the persistable properties and contents
         * which are processable by DataHandler.
         *
         * @return array
         */
        protected function getPersistableDataArray() {}
        /**
         * Similar to method in \TYPO3\CMS\Core\Collection\AbstractRecordCollection,
         * but without 'table_name' => $this->getItemTableName()
         *
         * @return array
         */
        public function toArray() {}
        /** @var $item File */
        public function getItems() {}
        public function fromArray(array $array) {}
        /**
         * Gets ths items criteria.
         *
         * @return mixed
         */
        public function getItemsCriteria() {}
        public function setItemsCriteria($itemsCriteria) {}
        public function add(FileInterface $data) {}
/** @var $value File */
        public function addAll(/** @var $value File */
CollectionInterface $other) {}
/** @var $value File */
        public function remove(/** @var $value File */
File $file) {}
        /**
         * Removes all elements of the current collection.
         */
        public function removeAll() {}
    }

    /**
     * A collection containing a set files belonging to certain categories.
     * This collection is persisted to the database with the accordant category identifiers.
     */
    class CategoryBasedFileCollection extends \typo3\cms\core\resource\collection\abstractfilecollection {
        /**
         * @var string
         */
        static protected $storageTableName;
        /**
         * @var string
         */
        static protected $type;
        /**
         * @var string
         */
        static protected $itemsCriteriaField;
        /**
         * @var string
         */
        protected $itemTableName;

        /**
         * Populates the content-entries of the collection
         */
        public function loadContents() {}
    }

    /**
     * A collection containing a set of files to be represented as a (virtual) folder.
     * This collection is persisted to the database with the accordant folder reference.
     */
    class FolderBasedFileCollection extends \typo3\cms\core\resource\collection\abstractfilecollection {
        /**
         * @var string
         */
        static protected $storageTableName;
        /**
         * @var string
         */
        static protected $type;
        /**
         * @var string
         */
        static protected $itemsCriteriaField;
        /**
         * The folder
         *
         * @var \TYPO3\CMS\Core\Resource\Folder
         */
        protected $folder;
        /**
         * @var bool
         */
        protected $recursive;

        /**
         * Populates the content-entries of the storage
         *
         * Queries the underlying storage for entries of the collection
         * and adds them to the collection data.
         *
         * If the content entries of the storage had not been loaded on creation
         * ($fillItems = false) this function is to be used for loading the contents
         * afterwards.
         */
        public function loadContents() {}
        /**
         * Gets the items criteria.
         *
         * @return string
         */
        public function getItemsCriteria() {}
        /**
         * Returns an array of the persistable properties and contents
         * which are processable by DataHandler.
         *
         * @return array
         */
        protected function getPersistableDataArray() {}
/** @var $storage \TYPO3\CMS\Core\Resource\ResourceStorage */
        public function fromArray(/** @var $storage \TYPO3\CMS\Core\Resource\ResourceStorage */
array $array) {}
    }

}

namespace TYPO3\CMS\Core\Resource\Security {
    /**
     * Class StoragePermissionsAspect
     *
     * We do not have AOP in TYPO3 for now, thus the acspect which
     * deals with resource security is a slot which reacts on a signal
     * on storage object creation.
     *
     * The aspect injects user permissions and mount points into the storage
     * based on user or group configuration.
     */
    class StoragePermissionsAspect {
        /**
         * @var BackendUserAuthentication
         */
        protected $backendUserAuthentication;
        /**
         * @var array
         */
        protected $defaultStorageZeroPermissions;

        public function __construct($backendUserAuthentication = null) {}
        public function addUserPermissionsToStorage(ResourceFactory $resourceFactory, ResourceStorage $storage) {}
        protected function addFileMountsToStorage(ResourceStorage $storage) {}
    }

    /**
     * We do not have AOP in TYPO3 for now, thus the aspect which
     * deals with file metadata data security is an assembly of hooks to
     * check permissions on files belonging to file meta data records
     */
    class FileMetadataPermissionsAspect implements \typo3\cms\core\singletoninterface, \typo3\cms\core\datahandling\datahandlercheckmodifyaccesslisthookinterface {
        public function checkRecordUpdateAccess($table, $id, $fileMetadataRecord, $otherHookGrantedAccess, DataHandler $dataHandler) {}
        public function checkModifyAccessList($accessAllowed, $table, DataHandler $parent) {}
        public function isAllowedToShowEditForm(array $parameters) {}
        protected function checkFileWriteAccessForFileMetaData($fileMetadataRecord) {}
    }

}

namespace TYPO3\CMS\Core\Resource\Processing {
    /**
     * Abstract base implementation of a task.
     *
     * If you extend this class, make sure that you redefine the member variables $type and $name
     * or set them in the constructor. Otherwise your task won't be recognized by the system and several
     * things will fail.
     */
    abstract class AbstractGraphicalTask extends \typo3\cms\core\resource\processing\abstracttask {
        /**
         * @var string
         */
        protected $targetFileExtension;

        /**
         * Returns the name the processed file should have
         * in the filesystem.
         *
         * @return string
         */
        public function getTargetFilename() {}
        /**
         * Determines the file extension the processed file
         * should have in the filesystem.
         *
         * @return string
         */
        public function getTargetFileExtension() {}
        /**
         * Gets the file extension the processed file should
         * have in the filesystem by either using the configuration
         * setting, or the extension of the original file.
         *
         * @return string
         */
        protected function determineTargetFileExtension() {}
    }

    /**
     * A task that takes care of cropping, scaling and/or masking an image.
     */
    class ImageCropScaleMaskTask extends \typo3\cms\core\resource\processing\abstractgraphicaltask {
        /**
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $name;

        /**
         * @return string
         */
        public function getTargetFileName() {}
        protected function isValidConfiguration(array $configuration) {}
        public function fileNeedsProcessing() {}
    }

    /**
     * Helper class to locally perform a crop/scale/mask task with the TYPO3 image processing classes.
     */
    class LocalCropScaleMaskHelper {
        /**
         * @var LocalImageProcessor
         */
        protected $processor;

        public function __construct(LocalImageProcessor $processor) {}
/** @var $gifBuilder GifBuilder */
        public function process(/** @var $gifBuilder GifBuilder */
TaskInterface $task) {}
        protected function getNewSvgDimensions($file, array $configuration, array $options, GifBuilder $gifBuilder) {}
        protected function getConfigurationForImageCropScaleMask(Resource\ProcessedFile $processedFile, \TYPO3\CMS\Frontend\Imaging\GifBuilder $gifBuilder) {}
        protected function getFilenameForImageCropScaleMask(TaskInterface $task) {}
        protected function modifyImageMagickStripProfileParameters($parameters, array $configuration) {}
    }

    /**
     * Processes Local Images files
     */
    class LocalImageProcessor implements \typo3\cms\core\resource\processing\processorinterface {
        /**
         * @var \TYPO3\CMS\Core\Log\Logger
         */
        protected $logger;

        /** @var $logManager LogManager */
        public function __construct() {}
        public function canProcessTask(TaskInterface $task) {}
        public function processTask(TaskInterface $task) {}
        protected function checkForExistingTargetFile(TaskInterface $task) {}
        protected function getHelperByTaskName($taskName) {}
        /**
         * @return GraphicalFunctions
         */
        protected function getGraphicalFunctionsObject() {}
    }

    /**
     * A task for generating an image preview.
     */
    class ImagePreviewTask extends \typo3\cms\core\resource\processing\abstractgraphicaltask {
        /**
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $name;

        /**
         * Returns the target filename for this task.
         *
         * @return string
         */
        public function getTargetFileName() {}
/**
 * Checks to perform:
 * - width and/or height given, integer values?
 */
        protected function isValidConfiguration(/**
 * Checks to perform:
 * - width and/or height given, integer values?
 */
array $configuration) {}
        /**
         * Checks to perform:
         * - width/height smaller than image, keeping aspect ratio?
         */
        public function fileNeedsProcessing() {}
    }

    /**
     * Class FileDeletionAspect
     *
     * We do not have AOP in TYPO3 for now, thus the aspect which
     * deals with deleted files is a slot which reacts on a signal
     * on file deletion.
     *
     * The aspect cleans up database records, processed files and filereferences
     */
    class FileDeletionAspect {
        /**
         * Return a file index repository
         *
         * @return \TYPO3\CMS\Core\Resource\Index\FileIndexRepository
         */
        protected function getFileIndexRepository() {}
        /**
         * Return a metadata repository
         *
         * @return \TYPO3\CMS\Core\Resource\Index\MetaDataRepository
         */
        protected function getMetaDataRepository() {}
        /**
         * Return a processed file repository
         *
         * @return \TYPO3\CMS\Core\Resource\ProcessedFileRepository
         */
        protected function getProcessedFileRepository() {}
        public function removeFromRepository(FileInterface $fileObject) {}
        public function cleanupProcessedFilesPostFileAdd(FileInterface $file, $targetFolder) {}
        public function cleanupProcessedFilesPostFileReplace(FileInterface $file, $localFilePath) {}
        protected function cleanupCategoryReferences(File $fileObject) {}
/** @var $processedFile \TYPO3\CMS\Core\Resource\ProcessedFile */
        protected function cleanupProcessedFiles(/** @var $processedFile \TYPO3\CMS\Core\Resource\ProcessedFile */
FileInterface $fileObject) {}
    }

    /**
     * Abstract base implementation of a task.
     *
     * If you extend this class, make sure that you redefine the member variables $type and $name
     * or set them in the constructor. Otherwise your task won't be recognized by the system and several
     * things will fail.
     */
    abstract class AbstractTask implements \typo3\cms\core\resource\processing\taskinterface {
        /**
         * @var array
         */
        protected $checksumData;
        /**
         * @var Resource\ProcessedFile
         */
        protected $targetFile;
        /**
         * @var Resource\File
         */
        protected $sourceFile;
        /**
         * @var array
         */
        protected $configuration;
        /**
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var bool
         */
        protected $executed;
        /**
         * @var bool
         */
        protected $successful;

        public function __construct(Resource\ProcessedFile $targetFile, array $configuration) {}
        /**
         * Sets parameters needed in the checksum. Can be overridden to add additional parameters to the checksum.
         * This should include all parameters that could possibly vary between different task instances, e.g. the
         * TYPO3 image configuration in TYPO3_CONF_VARS[GFX] for graphic processing tasks.
         *
         * @return array
         */
        protected function getChecksumData() {}
        /**
         * Returns the checksum for this task's configuration, also taking the file and task type into account.
         *
         * @return string
         */
        public function getConfigurationChecksum() {}
        /**
         * Returns the filename
         *
         * @return string
         */
        public function getTargetFilename() {}
        /**
         * Gets the file extension the processed file should
         * have in the filesystem.
         *
         * @return string
         */
        public function getTargetFileExtension() {}
        /**
         * Returns the name of this task
         *
         * @return string
         */
        public function getName() {}
        /**
         * Returns the type of this task
         *
         * @return string
         */
        public function getType() {}
        /**
         * @return Resource\ProcessedFile
         */
        public function getTargetFile() {}
        public function setTargetFile(Resource\ProcessedFile $targetFile) {}
        /**
         * @return Resource\File
         */
        public function getSourceFile() {}
        public function setSourceFile(Resource\File $sourceFile) {}
        /**
         * @return array
         */
        public function getConfiguration() {}
        abstract protected function isValidConfiguration(array $configuration) ;
        /**
         * Returns TRUE if this task has been executed, no matter if the execution was successful.
         *
         * @return bool
         */
        public function isExecuted() {}
        public function setExecuted($successful) {}
        /**
         * Returns TRUE if this task has been successfully executed. Only call this method if the task has been processed
         * at all.
         * @return bool
         * @throws \LogicException If the task has not been executed already
         */
        public function isSuccessful() {}
    }

    /**
     * Helper for creating local image previews using TYPO3s image processing classes.
     */
    class LocalPreviewHelper {
        /**
         * @var LocalImageProcessor
         */
        protected $processor;

        public function __construct(LocalImageProcessor $processor) {}
        public function process(TaskInterface $task) {}
        protected function getTemporaryFilePath(TaskInterface $task) {}
/** @var $gifBuilder \TYPO3\CMS\Frontend\Imaging\GifBuilder */
        protected function generatePreviewFromFile(/** @var $gifBuilder \TYPO3\CMS\Frontend\Imaging\GifBuilder */
File $file, /** @var $gifBuilder \TYPO3\CMS\Frontend\Imaging\GifBuilder */
array $configuration, /** @var $gifBuilder \TYPO3\CMS\Frontend\Imaging\GifBuilder */
$targetFilePath) {}
    }

    /**
     * The registry for task types.
     */
    class TaskTypeRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $registeredTaskTypes;

        /**
         * Register task types from configuration
         */
        public function __construct() {}
        protected function getClassForTaskType($taskType) {}
        public function getTaskForType($taskType, ProcessedFile $processedFile, array $processingConfiguration) {}
    }


    /**
     * Interface for file processors. All classes capable of processing a file have to implement this interface.
     */
    interface ProcessorInterface {
        function canProcessTask(TaskInterface $task) ;
        function processTask(TaskInterface $task) ;
    }

    /**
     * A task is a unit of work that can be performed by a file processor. This may include multiple steps in any order,
     * details depend on the configuration of the task and the tools the processor uses.
     *
     * Each task has a type and a name. The type describes the category of the task, like "image" and "video". If your task
     * is generic or applies to multiple types of files, use "general".
     *
     * A task also already has to know the target file it should be executed on, so there is no "abstract" task that just
     * specifies the steps to be executed without a concrete file. However, new tasks can easily be created from an
     * existing task object.
     */
    interface TaskInterface {
        function __construct(Resource\ProcessedFile $targetFile, array $configuration) ;
        /**
         * Returns the name of this task.
         *
         * @return string
         */
        function getName() ;
        /**
         * Returns the type of this task.
         *
         * @return string
         */
        function getType() ;
        /**
         * Returns the processed file this task is executed on.
         *
         * @return Resource\ProcessedFile
         */
        function getTargetFile() ;
        /**
         * Returns the original file this task is based on.
         *
         * @return Resource\File
         */
        function getSourceFile() ;
        /**
         * Returns the configuration for this task.
         *
         * @return array
         */
        function getConfiguration() ;
        /**
         * Returns the configuration checksum of this task.
         *
         * @return string
         */
        function getConfigurationChecksum() ;
        /**
         * Returns the name the processed file should have in the filesystem.
         *
         * @return string
         */
        function getTargetFileName() ;
        /**
         * Gets the file extension the processed file should have in the filesystem.
         *
         * @return string
         */
        function getTargetFileExtension() ;
        /**
         * Returns TRUE if the file has to be processed at all, such as e.g. the original file does.
         *
         * Note: This does not indicate if the concrete ProcessedFile attached to this task has to be (re)processed.
         * This check is done in ProcessedFile::isOutdated(). @todo isOutdated()/needsReprocessing()?
         *
         * @return bool
         */
        function fileNeedsProcessing() ;
        /**
         * Returns TRUE if this task has been executed, no matter if the execution was successful.
         *
         * @return bool
         */
        function isExecuted() ;
        function setExecuted($successful) ;
        /**
         * Returns TRUE if this task has been successfully executed. Only call this method if the task has been processed
         * at all.
         *
         * @return bool
         * @throws \LogicException If the task has not been executed already
         */
        function isSuccessful() ;
    }

}

namespace TYPO3\CMS\Core\Resource\Driver {
    /**
     * Driver for the local file system
     */
    class LocalDriver extends \typo3\cms\core\resource\driver\abstracthierarchicalfilesystemdriver {
        const UNSAFE_FILENAME_CHARACTER_EXPRESSION = '\\x00-\\x2C\\/\\x3A-\\x3F\\x5B-\\x60\\x7B-\\xBF';

        /**
         * The absolute base path. It always contains a trailing slash.
         *
         * @var string
         */
        protected $absoluteBasePath;
        /**
         * A list of all supported hash algorithms, written all lower case.
         *
         * @var array
         */
        protected $supportedHashAlgorithms;
        /**
         * The base URL that points to this driver's storage. As long is this
         * is not set, it is assumed that this folder is not publicly available
         *
         * @var string
         */
        protected $baseUri;
        /** @var array */
        protected $mappingFolderNameToRole;

        public function __construct(array $configuration = [ ]) {}
        public function mergeConfigurationCapabilities($capabilities) {}
        /**
         * Processes the configuration for this driver.
         */
        public function processConfiguration() {}
        /**
         * Initializes this object. This is called by the storage after the driver
         * has been attached.
         */
        public function initialize() {}
        /**
         * Determines the base URL for this driver, from the configuration or
         * the TypoScript frontend object
         */
        protected function determineBaseUrl() {}
        protected function calculateBasePath(array $configuration) {}
        public function getPublicUrl($identifier) {}
        /**
         * Returns the Identifier of the root level folder of the storage.
         *
         * @return string
         */
        public function getRootLevelFolder() {}
        /**
         * Returns identifier of the default folder new files should be put into.
         *
         * @return string
         */
        public function getDefaultFolder() {}
        public function createFolder($newFolderName, $parentFolderIdentifier = '', $recursive = false) {}
        public function getFileInfoByIdentifier($fileIdentifier, array $propertiesToExtract = [ ]) {}
        public function getFolderInfoByIdentifier($folderIdentifier) {}
        public function sanitizeFileName($fileName, $charset = 'utf-8') {}
        protected function getDirectoryItemList($folderIdentifier, $start = 0, $numberOfItems = 0, array $filterMethods, $includeFiles = true, $includeDirs = true, $recursive = false, $sort = '', $sortRev = false) {}
        protected function applyFilterMethodsToDirectoryItem(array $filterMethods, $itemName, $itemIdentifier, $parentIdentifier) {}
        public function getFileInFolder($fileName, $folderIdentifier) {}
        public function getFilesInFolder($folderIdentifier, $start = 0, $numberOfItems = 0, $recursive = false, array $filenameFilterCallbacks = [ ], $sort = '', $sortRev = false) {}
        public function countFilesInFolder($folderIdentifier, $recursive = false, array $filenameFilterCallbacks = [ ]) {}
        public function getFoldersInFolder($folderIdentifier, $start = 0, $numberOfItems = 0, $recursive = false, array $folderNameFilterCallbacks = [ ], $sort = '', $sortRev = false) {}
        public function countFoldersInFolder($folderIdentifier, $recursive = false, array $folderNameFilterCallbacks = [ ]) {}
/** @var $entry \SplFileInfo */
        protected function retrieveFileAndFoldersInPath(/** @var $entry \SplFileInfo */
$path, /** @var $entry \SplFileInfo */
$recursive = false, /** @var $entry \SplFileInfo */
$includeFiles = true, /** @var $entry \SplFileInfo */
$includeDirs = true, /** @var $entry \SplFileInfo */
$sort = '', /** @var $entry \SplFileInfo */
$sortRev = false) {}
        protected function sortDirectoryEntries($directoryEntries, $sort = '', $sortRev = false) {}
        protected function extractFileInformation($filePath, $containerPath, array $propertiesToExtract = [ ]) {}
/** @var FileInfo $fileInfo */
        public function getSpecificFileInformation(/** @var FileInfo $fileInfo */
$fileIdentifier, /** @var FileInfo $fileInfo */
$containerPath, /** @var FileInfo $fileInfo */
$property) {}
        /**
         * Returns the absolute path of the folder this driver operates on.
         *
         * @return string
         */
        protected function getAbsoluteBasePath() {}
        protected function getAbsolutePath($fileIdentifier) {}
        public function hash($fileIdentifier, $hashAlgorithm) {}
        public function addFile($localFilePath, $targetFolderIdentifier, $newFileName = '', $removeOriginal = true) {}
        public function fileExists($fileIdentifier) {}
        public function fileExistsInFolder($fileName, $folderIdentifier) {}
        public function folderExists($folderIdentifier) {}
        public function folderExistsInFolder($folderName, $folderIdentifier) {}
        public function getFolderInFolder($folderName, $folderIdentifier) {}
        public function replaceFile($fileIdentifier, $localFilePath) {}
        public function copyFileWithinStorage($fileIdentifier, $targetFolderIdentifier, $fileName) {}
        public function moveFileWithinStorage($fileIdentifier, $targetFolderIdentifier, $newFileName) {}
        protected function copyFileToTemporaryPath($fileIdentifier) {}
        protected function recycleFileOrFolder($filePath, $recycleDirectory) {}
        protected function createIdentifierMap(array $filesAndFolders, $sourceFolderIdentifier, $targetFolderIdentifier) {}
        public function moveFolderWithinStorage($sourceFolderIdentifier, $targetFolderIdentifier, $newFolderName) {}
/** @var $current \RecursiveDirectoryIterator */
        public function copyFolderWithinStorage(/** @var $current \RecursiveDirectoryIterator */
$sourceFolderIdentifier, /** @var $current \RecursiveDirectoryIterator */
$targetFolderIdentifier, /** @var $current \RecursiveDirectoryIterator */
$newFolderName) {}
        public function renameFile($fileIdentifier, $newName) {}
        public function renameFolder($folderIdentifier, $newName) {}
        public function deleteFile($fileIdentifier) {}
        public function deleteFolder($folderIdentifier, $deleteRecursively = false) {}
        public function isFolderEmpty($folderIdentifier) {}
        public function getFileForLocalProcessing($fileIdentifier, $writable = true) {}
        public function getPermissions($identifier) {}
        public function isWithin($folderIdentifier, $identifier) {}
        public function createFile($fileName, $parentFolderIdentifier) {}
        public function getFileContents($fileIdentifier) {}
        public function setFileContents($fileIdentifier, $contents) {}
        public function getRole($folderIdentifier) {}
        public function dumpFileContents($identifier) {}
        protected function getRecycleDirectory($path) {}
    }

    /**
     * Registry for driver classes.
     */
    class DriverRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $drivers;
        /**
         * @var array
         */
        protected $driverConfigurations;

        /**
         * Creates this object by detecting all available drivers registered in $TYPO3_CONF_VARS.
         */
        public function __construct() {}
        public function registerDriverClass($className, $shortName = null, $label = null, $flexFormDataStructurePathAndFilename = null) {}
        /**
         * Adds the TCA information so the registered drivers can be selected when creating a sys_file_storage
         * in the TYPO3 Backend.
         */
        public function addDriversToTCA() {}
        public function getDriverClass($shortName) {}
        public function driverExists($shortName) {}
    }

    /**
     * Class AbstractHierarchicalFilesystemDriver
     */
    abstract class AbstractHierarchicalFilesystemDriver extends \typo3\cms\core\resource\driver\abstractdriver {
        /**
         * @var CharsetConverter
         */
        protected $charsetConversion;

        /**
         * Gets the charset conversion object.
         *
         * @return CharsetConverter
         */
        protected function getCharsetConversion() {}
        protected function isPathValid($theFile) {}
        protected function canonicalizeAndCheckFilePath($filePath) {}
        protected function canonicalizeAndCheckFileIdentifier($fileIdentifier) {}
        protected function canonicalizeAndCheckFolderIdentifier($folderPath) {}
        public function getParentFolderIdentifierOfIdentifier($fileIdentifier) {}
    }

    /**
     * An abstract implementation of a storage driver.
     */
    abstract class AbstractDriver implements \typo3\cms\core\resource\driver\driverinterface {
        /**
         * The capabilities of this driver. See Storage::CAPABILITY_* constants for possible values. This value should be set
         * in the constructor of derived classes.
         *
         * @var int
         */
        protected $capabilities;
        /**
         * The storage uid the driver was instantiated for
         *
         * @var int
         */
        protected $storageUid;
        /**
         * A list of all supported hash algorithms, written all lower case and
         * without any dashes etc. (e.g. sha1 instead of SHA-1)
         * Be sure to set this in inherited classes!
         *
         * @var array
         */
        protected $supportedHashAlgorithms;
        /**
         * The configuration of this driver
         *
         * @var array
         */
        protected $configuration;

        public function __construct(array $configuration = [ ]) {}
        protected function isValidFilename($fileName) {}
        public function setStorageUid($storageUid) {}
        /**
         * Returns the capabilities of this driver.
         *
         * @return int
         * @see Storage::CAPABILITY_* constants
         */
        public function getCapabilities() {}
        public function hasCapability($capability) {}
        protected function getTemporaryPathForFile($fileIdentifier) {}
        public function hashIdentifier($identifier) {}
        public function sanitizeFileName($fileName, $charset = '') {}
        /**
         * Returns TRUE if this driver uses case-sensitive identifiers. NOTE: This
         * is a configurable setting, but the setting does not change the way the
         * underlying file system treats the identifiers; the setting should
         * therefore always reflect the file system and not try to change its
         * behaviour
         *
         * @return bool
         */
        public function isCaseSensitiveFileSystem() {}
        abstract protected function canonicalizeAndCheckFilePath($filePath) ;
        abstract protected function canonicalizeAndCheckFileIdentifier($fileIdentifier) ;
        abstract protected function canonicalizeAndCheckFolderIdentifier($folderIdentifier) ;
    }


    /**
     * An interface Drivers have to implement to fulfil the needs
     * of the FAL API.
     */
    interface DriverInterface {
        /**
         * Processes the configuration for this driver.
         */
        function processConfiguration() ;
        function setStorageUid($storageUid) ;
        /**
         * Initializes this object. This is called by the storage after the driver
         * has been attached.
         */
        function initialize() ;
        /**
         * Returns the capabilities of this driver.
         *
         * @return int
         * @see Storage::CAPABILITY_* constants
         */
        function getCapabilities() ;
        function mergeConfigurationCapabilities($capabilities) ;
        function hasCapability($capability) ;
        /**
         * Returns TRUE if this driver uses case-sensitive identifiers. NOTE: This
         * is a configurable setting, but the setting does not change the way the
         * underlying file system treats the identifiers; the setting should
         * therefore always reflect the file system and not try to change its
         * behaviour
         *
         * @return bool
         */
        function isCaseSensitiveFileSystem() ;
        function sanitizeFileName($fileName, $charset = '') ;
        function hashIdentifier($identifier) ;
        /**
         * Returns the identifier of the root level folder of the storage.
         *
         * @return string
         */
        function getRootLevelFolder() ;
        /**
         * Returns the identifier of the default folder new files should be put into.
         *
         * @return string
         */
        function getDefaultFolder() ;
        function getParentFolderIdentifierOfIdentifier($fileIdentifier) ;
        function getPublicUrl($identifier) ;
        function createFolder($newFolderName, $parentFolderIdentifier = '', $recursive = false) ;
        function renameFolder($folderIdentifier, $newName) ;
        function deleteFolder($folderIdentifier, $deleteRecursively = false) ;
        function fileExists($fileIdentifier) ;
        function folderExists($folderIdentifier) ;
        function isFolderEmpty($folderIdentifier) ;
        function addFile($localFilePath, $targetFolderIdentifier, $newFileName = '', $removeOriginal = true) ;
        function createFile($fileName, $parentFolderIdentifier) ;
        function copyFileWithinStorage($fileIdentifier, $targetFolderIdentifier, $fileName) ;
        function renameFile($fileIdentifier, $newName) ;
        function replaceFile($fileIdentifier, $localFilePath) ;
        function deleteFile($fileIdentifier) ;
        function hash($fileIdentifier, $hashAlgorithm) ;
        function moveFileWithinStorage($fileIdentifier, $targetFolderIdentifier, $newFileName) ;
        function moveFolderWithinStorage($sourceFolderIdentifier, $targetFolderIdentifier, $newFolderName) ;
        function copyFolderWithinStorage($sourceFolderIdentifier, $targetFolderIdentifier, $newFolderName) ;
        function getFileContents($fileIdentifier) ;
        function setFileContents($fileIdentifier, $contents) ;
        function fileExistsInFolder($fileName, $folderIdentifier) ;
        function folderExistsInFolder($folderName, $folderIdentifier) ;
        function getFileForLocalProcessing($fileIdentifier, $writable = true) ;
        function getPermissions($identifier) ;
        function dumpFileContents($identifier) ;
        function isWithin($folderIdentifier, $identifier) ;
        function getFileInfoByIdentifier($fileIdentifier, array $propertiesToExtract = [ ]) ;
        function getFolderInfoByIdentifier($folderIdentifier) ;
        function getFileInFolder($fileName, $folderIdentifier) ;
        function getFilesInFolder($folderIdentifier, $start = 0, $numberOfItems = 0, $recursive = false, array $filenameFilterCallbacks = [ ], $sort = '', $sortRev = false) ;
        function getFolderInFolder($folderName, $folderIdentifier) ;
        function getFoldersInFolder($folderIdentifier, $start = 0, $numberOfItems = 0, $recursive = false, array $folderNameFilterCallbacks = [ ], $sort = '', $sortRev = false) ;
        function countFilesInFolder($folderIdentifier, $recursive = false, array $filenameFilterCallbacks = [ ]) ;
        function countFoldersInFolder($folderIdentifier, $recursive = false, array $folderNameFilterCallbacks = [ ]) ;
    }

}

namespace TYPO3\CMS\Core\Resource\TextExtraction {
    /**
     * A simple text extractor to extract text from plain text files.
     */
    class PlainTextExtractor implements \typo3\cms\core\resource\textextraction\textextractorinterface {
        public function canExtractText(FileInterface $file) {}
        public function extractText(FileInterface $file) {}
    }

    /**
     * Class TextExtractorRegistry
     */
    class TextExtractorRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * Registered text extractor class names
         *
         * @var array
         */
        protected $textExtractorClasses;
        /**
         * Instance cache for text extractor classes
         *
         * @var TextExtractorInterface[]
         */
        protected $instances;

        /**
         * Returns an instance of this class
         *
         * @return TextExtractorRegistry
         */
        public static function getInstance() {}
        public function registerTextExtractor($className) {}
        /**
         * Get all registered text extractor instances
         *
         * @return TextExtractorInterface[]
         */
        public function getTextExtractorInstances() {}
        protected function createTextExtractorInstance($className) {}
        public function getTextExtractor(FileInterface $file) {}
    }


    /**
     * An interface for text extractors
     */
    interface TextExtractorInterface {
        function canExtractText(FileInterface $file) ;
        function extractText(FileInterface $file) ;
    }

}

namespace TYPO3\CMS\Core\Resource\OnlineMedia\Processing {
    /**
     * Preview of Online Media item Processing
     */
    class PreviewProcessing {
        /**
         * @var LocalImageProcessor
         */
        protected $processor;

        protected function needsReprocessing($processedFile) {}
/** @var ProcessedFileRepository $processedFileRepository */
        public function processFile(/** @var ProcessedFileRepository $processedFileRepository */
FileProcessingService $fileProcessingService, /** @var ProcessedFileRepository $processedFileRepository */
DriverInterface $driver, /** @var ProcessedFileRepository $processedFileRepository */
ProcessedFile $processedFile, /** @var ProcessedFileRepository $processedFileRepository */
File $file, /** @var ProcessedFileRepository $processedFileRepository */
$taskType, /** @var ProcessedFileRepository $processedFileRepository */
array $configuration) {}
        protected function getTargetFileName(ProcessedFile $processedFile, $prefix = 'preview_') {}
        protected function resizeImage($originalFileName, $temporaryFileName, $configuration) {}
/** @var $gifBuilder GifBuilder */
        protected function cropScaleImage(/** @var $gifBuilder GifBuilder */
$originalFileName, /** @var $gifBuilder GifBuilder */
$temporaryFileName, /** @var $gifBuilder GifBuilder */
$configuration) {}
        protected function getConfigurationForImageCropScaleMask(array $configuration, GifBuilder $gifBuilder) {}
        /**
         * @return LocalImageProcessor
         */
        protected function getProcessor() {}
        /**
         * @return GraphicalFunctions
         */
        protected function getGraphicalFunctionsObject() {}
    }

}

namespace TYPO3\CMS\Core\Resource\OnlineMedia\Metadata {
    /**
     * Class Extractor
     */
    class Extractor implements \typo3\cms\core\resource\index\extractorinterface {
        /**
         * Returns an array of supported file types
         *
         * @return array
         */
        public function getFileTypeRestrictions() {}
        /**
         * Get all supported DriverClasses
         * empty array indicates no restrictions
         *
         * @return array
         */
        public function getDriverRestrictions() {}
        /**
         * Returns the data priority of the extraction Service
         *
         * @return int
         */
        public function getPriority() {}
        /**
         * Returns the execution priority of the extraction Service
         *
         * @return int
         */
        public function getExecutionPriority() {}
        public function canProcess(File $file) {}
/** @var OnlineMediaHelperInterface $helper */
        public function extractMetaData(/** @var OnlineMediaHelperInterface $helper */
File $file, /** @var OnlineMediaHelperInterface $helper */
array $previousExtractedData = [ ]) {}
    }

}

namespace TYPO3\CMS\Core\Resource\OnlineMedia\Helpers {
    /**
     * Class AbstractOEmbedHelper
     * See http://oembed.com/ for more on OEmbed specification
     */
    abstract class AbstractOEmbedHelper extends \typo3\cms\core\resource\onlinemedia\helpers\abstractonlinemediahelper {
        abstract protected function getOEmbedUrl($mediaId, $format = 'json') ;
        protected function transformMediaIdToFile($mediaId, Folder $targetFolder, $fileExtension) {}
        protected function getOEmbedData($mediaId) {}
        public function getMetaData(File $file) {}
    }

    /**
     * SlideShare helper class
     */
    class YouTubeHelper extends \typo3\cms\core\resource\onlinemedia\helpers\abstractoembedhelper {
        public function getPublicUrl(File $file, $relativeToCurrentScript = false) {}
        public function getPreviewImage(File $file) {}
        public function transformUrlToFile($url, Folder $targetFolder) {}
        protected function getOEmbedUrl($mediaId, $format = 'json') {}
    }

    /**
     * Vimeo helper class
     */
    class VimeoHelper extends \typo3\cms\core\resource\onlinemedia\helpers\abstractoembedhelper {
        public function getPublicUrl(File $file, $relativeToCurrentScript = false) {}
        public function getPreviewImage(File $file) {}
        public function transformUrlToFile($url, Folder $targetFolder) {}
        protected function getOEmbedUrl($mediaId, $format = 'json') {}
    }

    /**
     * Class AbstractOnlineMediaHelper
     */
    abstract class AbstractOnlineMediaHelper implements \typo3\cms\core\resource\onlinemedia\helpers\onlinemediahelperinterface {
        /**
         * Cached OnlineMediaIds [fileUid => id]
         *
         * @var array
         */
        protected $onlineMediaIdCache;
        /**
         * File extension bind to the OnlineMedia helper
         *
         * @var string
         */
        protected $extension;

        public function __construct($extension) {}
        public function getOnlineMediaId(File $file) {}
        protected function findExistingFileByOnlineMediaId($onlineMediaId, Folder $targetFolder, $fileExtension) {}
        protected function createNewFile(Folder $targetFolder, $fileName, $onlineMediaId) {}
        /**
         * Get temporary folder path to save preview images
         *
         * @return string
         */
        protected function getTempFolderPath() {}
        /**
         * Returns an instance of the FileIndexRepository
         *
         * @return FileIndexRepository
         */
        protected function getFileIndexRepository() {}
        /**
         * Returns the ResourceFactory
         *
         * @return ResourceFactory
         */
        protected function getResourceFactory() {}
    }

    /**
     * Online Media Source Registry
     */
    class OnlineMediaHelperRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * Returns an instance of this class
         *
         * @return OnlineMediaHelperRegistry
         */
        public static function getInstance() {}
        public function getOnlineMediaHelper(File $file) {}
/** @var OnlineMediaHelperInterface $helper */
        public function transformUrlToFile(/** @var OnlineMediaHelperInterface $helper */
$url, /** @var OnlineMediaHelperInterface $helper */
Folder $targetFolder, /** @var OnlineMediaHelperInterface $helper */
$allowedExtensions = [ ]) {}
        /**
         * Get all file extensions that have a OnlineMediaHelper
         *
         * @return string[]
         */
        public function getSupportedFileExtensions() {}
    }


    /**
     * Interface OnlineMediaInterface
     */
    interface OnlineMediaHelperInterface {
        function __construct($extension) ;
        function transformUrlToFile($url, Folder $targetFolder) ;
        function getOnlineMediaId(File $file) ;
        function getPublicUrl(File $file, $relativeToCurrentScript = false) ;
        function getPreviewImage(File $file) ;
        function getMetaData(File $file) ;
    }

}

namespace TYPO3\CMS\Core\Resource\Index {
    /**
     * Registry for MetaData extraction Services
     */
    class ExtractorRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * Registered ClassNames
         * @var array
         */
        protected $extractors;
        /**
         * Instance Cache for Extractors
         *
         * @var ExtractorInterface[]
         */
        protected $instances;

        /**
         * Returns an instance of this class
         *
         * @return ExtractorRegistry
         */
        public static function getInstance() {}
        public function registerExtractionService($className) {}
        /** @var ExtractorInterface $object */
        public function getExtractors() {}
        public function getExtractorsWithDriverSupport($driverType) {}
        protected function compareExtractorPriority(ExtractorInterface $extractorA, ExtractorInterface $extractorB) {}
        protected function createExtractorInstance($className) {}
    }

    /**
     * Repository Class as an abstraction layer to sys_file
     *
     * Every access to table sys_file_metadata which is not handled by DataHandler
     * has to use this Repository class.
     *
     * This is meant for FAL internal use only!.
     */
    class FileIndexRepository implements \typo3\cms\core\singletoninterface {
        /**
         * @var string
         */
        protected $table;
        /**
         * A list of properties which are to be persisted
         *
         * @var array
         */
        protected $fields;

        /**
         * Gets the Resource Factory
         *
         * @return ResourceFactory
         */
        protected function getResourceFactory() {}
        /**
         * Returns an Instance of the Repository
         *
         * @return FileIndexRepository
         */
        public static function getInstance() {}
        public function findOneByCombinedIdentifier($combinedIdentifier) {}
        public function findOneByUid($fileUid) {}
        public function findOneByStorageUidAndIdentifier($storageUid, $identifier) {}
        public function findOneByStorageUidAndIdentifierHash($storageUid, $identifierHash) {}
        public function findOneByFileObject(FileInterface $fileObject) {}
        public function findByContentHash($hash) {}
        public function findByFolder(Folder $folder) {}
        public function findByFolders(array $folders, $includeMissing = true, $fileName = null) {}
        public function add(File $file) {}
        public function addRaw(array $data) {}
        protected function insertRecord(array $data) {}
        public function hasIndexRecord(File $file) {}
        public function update(File $file) {}
        public function findInStorageWithIndexOutstanding(ResourceStorage $storage, $limit = -1) {}
        public function findInStorageAndNotInUidList(ResourceStorage $storage, array $uidList) {}
        public function updateIndexingTime($fileUid) {}
        public function markFileAsMissing($fileUid) {}
        public function remove($fileUid) {}
/** @var $refIndexObj ReferenceIndex */
        public function updateRefIndex(/** @var $refIndexObj ReferenceIndex */
$id) {}
        protected function getSignalSlotDispatcher() {}
        /**
         * Get the ObjectManager
         *
         * @return ObjectManager
         */
        protected function getObjectManager() {}
        protected function emitRecordUpdatedSignal(array $data) {}
        protected function emitRecordCreatedSignal(array $data) {}
        protected function emitRecordDeletedSignal($fileUid) {}
        protected function emitRecordMarkedAsMissingSignal($fileUid) {}
    }

    /**
     * Repository Class as an abstraction layer to sys_file_metadata
     *
     * Every access to table sys_file_metadata which is not handled by DataHandler
     * has to use this Repository class
     */
    class MetaDataRepository implements \typo3\cms\core\singletoninterface {
        /**
         * @var string
         */
        protected $tableName;
        /**
         * Internal storage for database table fields
         *
         * @var array
         */
        protected $tableFields;

        public function findByFile(File $file) {}
        public function findByFileUid($uid) {}
        public function createMetaDataRecord($fileUid, array $additionalFields = [ ]) {}
        public function update($fileUid, array $data) {}
        public function removeByFileUid($fileUid) {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        /**
         * Get the ObjectManager
         *
         * @return ObjectManager
         */
        protected function getObjectManager() {}
        protected function emitRecordPostRetrievalSignal(\ArrayObject $data) {}
        protected function emitRecordUpdatedSignal(array $data) {}
        protected function emitRecordCreatedSignal(array $data) {}
        protected function emitRecordDeletedSignal($fileUid) {}
        /**
         * @return MetaDataRepository
         */
        public static function getInstance() {}
    }

    /**
     * The New FAL Indexer
     */
    class Indexer {
        /**
         * @var array
         */
        protected $filesToUpdate;
        /**
         * @var int[]
         */
        protected $identifiedFileUids;
        /**
         * @var ResourceStorage
         */
        protected $storage;
        /**
         * @var ExtractorInterface[]
         */
        protected $extractionServices;

        public function __construct(ResourceStorage $storage) {}
        public function createIndexEntry($identifier) {}
        public function updateIndexEntry(File $fileObject) {}
        /**
         */
        public function processChangesInStorages() {}
        public function runMetaDataExtraction($maximumFileCount = -1) {}
        public function extractMetaData(File $fileObject) {}
        /**
         * Get available extraction services
         *
         * @return ExtractorInterface[]
         */
        protected function getExtractionServices() {}
        /**
         * Since by now all files in filesystem have been looked at it is save to assume,
         * that files that are in indexed but not touched in this run are missing
         */
        protected function detectMissingFiles() {}
        protected function isFileTypeSupportedByExtractor(File $file, ExtractorInterface $extractor) {}
        protected function detectChangedFilesInStorage(array $fileIdentifierArray) {}
        /**
         * Processes the Files which have been detected as "changed or new"
         * in the storage
         */
        protected function processChangedAndNewFiles() {}
        protected function extractRequiredMetaData(File $fileObject) {}
        protected function gatherFileInformationArray($identifier) {}
        protected function getFileType($mimeType) {}
        protected function transformFromDriverFileInfoArrayToFileObjectFormat(array $fileInfo) {}
        /**
         * Returns an instance of the FileIndexRepository
         *
         * @return FileIndexRepository
         */
        protected function getFileIndexRepository() {}
        /**
         * Returns an instance of the FileIndexRepository
         *
         * @return MetaDataRepository
         */
        protected function getMetaDataRepository() {}
        /**
         * Returns the ResourceFactory
         *
         * @return ResourceFactory
         */
        protected function getResourceFactory() {}
        /**
         * Returns an instance of the FileIndexRepository
         *
         * @return ExtractorRegistry
         */
        protected function getExtractorRegistry() {}
    }


    /**
     * An Interface for MetaData extractors the FAL Indexer uses
     */
    interface ExtractorInterface {
        /**
         * Returns an array of supported file types;
         * An empty array indicates all filetypes
         *
         * @return array
         */
        function getFileTypeRestrictions() ;
        /**
         * Get all supported DriverClasses
         *
         * Since some extractors may only work for local files, and other extractors
         * are especially made for grabbing data from remote.
         *
         * Returns array of string with driver names of Drivers which are supported,
         * If the driver did not register a name, it's the classname.
         * empty array indicates no restrictions
         *
         * @return array
         */
        function getDriverRestrictions() ;
        /**
         * Returns the data priority of the extraction Service.
         * Defines the precedence of Data if several extractors
         * extracted the same property.
         *
         * Should be between 1 and 100, 100 is more important than 1
         *
         * @return int
         */
        function getPriority() ;
        /**
         * Returns the execution priority of the extraction Service
         * Should be between 1 and 100, 100 means runs as first service, 1 runs at last service
         *
         * @return int
         */
        function getExecutionPriority() ;
        function canProcess(Resource\File $file) ;
        function extractMetaData(Resource\File $file, array $previousExtractedData = [ ]) ;
    }

}

namespace TYPO3\CMS\Core\Resource\Rendering {
    /**
     * Class AudioTagRenderer
     */
    class AudioTagRenderer implements \typo3\cms\core\resource\rendering\filerendererinterface {
        /**
         * Mime types that can be used in the HTML Video tag
         *
         * @var array
         */
        protected $possibleMimeTypes;

        /**
         * Returns the priority of the renderer
         * This way it is possible to define/overrule a renderer
         * for a specific file type/context.
         * For example create a video renderer for a certain storage/driver type.
         * Should be between 1 and 100, 100 is more important than 1
         *
         * @return int
         */
        public function getPriority() {}
        public function canRender(FileInterface $file) {}
        public function render(FileInterface $file, $width, $height, array $options = [ ], $usedPathsRelativeToCurrentScript = false) {}
    }

    /**
     * YouTube renderer class
     */
    class YouTubeRenderer implements \typo3\cms\core\resource\rendering\filerendererinterface {
        /**
         * @var OnlineMediaHelperInterface
         */
        protected $onlineMediaHelper;

        /**
         * Returns the priority of the renderer
         * This way it is possible to define/overrule a renderer
         * for a specific file type/context.
         * For example create a video renderer for a certain storage/driver type.
         * Should be between 1 and 100, 100 is more important than 1
         *
         * @return int
         */
        public function getPriority() {}
        public function canRender(FileInterface $file) {}
        protected function getOnlineMediaHelper(FileInterface $file) {}
        public function render(FileInterface $file, $width, $height, array $options = null, $usedPathsRelativeToCurrentScript = false) {}
    }

    /**
     * Vimeo renderer class
     */
    class VimeoRenderer implements \typo3\cms\core\resource\rendering\filerendererinterface {
        /**
         * @var OnlineMediaHelperInterface
         */
        protected $onlineMediaHelper;

        /**
         * Returns the priority of the renderer
         * This way it is possible to define/overrule a renderer
         * for a specific file type/context.
         * For example create a video renderer for a certain storage/driver type.
         * Should be between 1 and 100, 100 is more important than 1
         *
         * @return int
         */
        public function getPriority() {}
        public function canRender(FileInterface $file) {}
        protected function getOnlineMediaHelper(FileInterface $file) {}
        public function render(FileInterface $file, $width, $height, array $options = null, $usedPathsRelativeToCurrentScript = false) {}
    }

    /**
     * Class RendererRegistry
     */
    class RendererRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * Registered class names
         *
         * @var array
         */
        protected $classNames;
        /**
         * Instance cache for renderer classes
         *
         * @var FileRendererInterface[]
         */
        protected $instances;

        /**
         * Returns an instance of this class
         *
         * @return RendererRegistry
         */
        public static function getInstance() {}
        public function registerRendererClass($className) {}
        /** @var FileRendererInterface $object */
        public function getRendererInstances() {}
        protected function createRendererInstance($className) {}
        protected function compareRendererPriority(FileRendererInterface $rendererA, FileRendererInterface $rendererB) {}
/** @var FileRendererInterface $fileRenderer */
        public function getRenderer(/** @var FileRendererInterface $fileRenderer */
FileInterface $file) {}
    }

    /**
     * Class VideoTagRenderer
     */
    class VideoTagRenderer implements \typo3\cms\core\resource\rendering\filerendererinterface {
        /**
         * Mime types that can be used in the HTML Video tag
         *
         * @var array
         */
        protected $possibleMimeTypes;

        /**
         * Returns the priority of the renderer
         * This way it is possible to define/overrule a renderer
         * for a specific file type/context.
         * For example create a video renderer for a certain storage/driver type.
         * Should be between 1 and 100, 100 is more important than 1
         *
         * @return int
         */
        public function getPriority() {}
        public function canRender(FileInterface $file) {}
        public function render(FileInterface $file, $width, $height, array $options = [ ], $usedPathsRelativeToCurrentScript = false) {}
    }


    /**
     * Class FileRendererInterface
     */
    interface FileRendererInterface extends \typo3\cms\core\singletoninterface {
        /**
         * Returns the priority of the renderer
         * This way it is possible to define/overrule a renderer
         * for a specific file type/context.
         *
         * For example create a video renderer for a certain storage/driver type.
         *
         * Should be between 1 and 100, 100 is more important than 1
         *
         * @return int
         */
        function getPriority() ;
        function canRender(FileInterface $file) ;
        function render(FileInterface $file, $width, $height, array $options = [ ], $usedPathsRelativeToCurrentScript = false) ;
    }

}

namespace TYPO3\CMS\Core\Resource\Filter {
    /**
     * Utility methods for filtering filenames
     */
    class FileNameFilter {
        /**
         * whether to also show the hidden files (don't show them by default)
         *
         * @var bool
         */
        static protected $showHiddenFilesAndFolders;

        public static function filterHiddenFilesAndFolders($itemName, $itemIdentifier, $parentIdentifier, array $additionalInformation, DriverInterface $driverInstance) {}
        /**
         * Gets the info whether the hidden files are also displayed currently
         *
         * @static
         * @return bool
         */
        public static function getShowHiddenFilesAndFolders() {}
        public static function setShowHiddenFilesAndFolders($showHiddenFilesAndFolders) {}
    }

    /**
     * Utility methods for filtering filenames
     */
    class FileExtensionFilter {
        /**
         * Allowed file extensions. If NULL, all extensions are allowed.
         *
         * @var array
         */
        protected $allowedFileExtensions;
        /**
         * Disallowed file extensions. If NULL, no extension is disallowed (i.e. all are allowed).
         *
         * @var array
         */
        protected $disallowedFileExtensions;

        public function filterInlineChildren(array $parameters, DataHandler $dataHandler) {}
        public function filterFileList($itemName, $itemIdentifier, $parentIdentifier, array $additionalInformation, DriverInterface $driver) {}
        protected function isAllowed($fileName) {}
        public function setAllowedFileExtensions($allowedFileExtensions) {}
        public function setDisallowedFileExtensions($disallowedFileExtensions) {}
        protected function convertToLowercaseArray($inputArgument) {}
    }

}

namespace TYPO3\CMS\Core\Resource\Service {
    /**
     * User file inline label service
     */
    class UserFileInlineLabelService {
/**
 * We just catch the exception here
 * Reasoning: There is nothing an editor or even admin could do
 */
        public function getInlineLabel(/**
 * We just catch the exception here
 * Reasoning: There is nothing an editor or even admin could do
 */
array $params) {}
    }

    /**
     * Magic image service
     */
    class MagicImageService {
        /**
         * Maximum width of magic images
         * These defaults allow images to be based on their width - to a certain degree - by setting a high height.
         * Then we're almost certain the image will be based on the width
         * @var int
         */
        protected $magicImageMaximumWidth;
        /**
         * Maximum height of magic images
         * @var int
         */
        protected $magicImageMaximumHeight;

        public function createMagicImage(Resource\File $imageFileObject, array $fileConfiguration) {}
        public function setMagicImageMaximumDimensions(array $rteConfiguration) {}
    }

    /**
     * File processing service
     */
    class FileProcessingService {
        const SIGNAL_PostFileProcess = 'postFileProcess';
        const SIGNAL_PreFileProcess = 'preFileProcess';

        /**
         * @var Resource\ResourceStorage
         */
        protected $storage;
        /**
         * @var Resource\Driver\DriverInterface
         */
        protected $driver;
        /**
         * @var Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * @var \TYPO3\CMS\Core\Log\Logger
         */
        protected $logger;

/** @var $logManager LogManager */
        public function __construct(/** @var $logManager LogManager */
Resource\ResourceStorage $storage, /** @var $logManager LogManager */
Resource\Driver\DriverInterface $driver) {}
/** @var $processedFileRepository Resource\ProcessedFileRepository */
        public function processFile(/** @var $processedFileRepository Resource\ProcessedFileRepository */
Resource\FileInterface $fileObject, /** @var $processedFileRepository Resource\ProcessedFileRepository */
Resource\ResourceStorage $targetStorage, /** @var $processedFileRepository Resource\ProcessedFileRepository */
$taskType, /** @var $processedFileRepository Resource\ProcessedFileRepository */
$configuration) {}
/** @var $processedFileRepository Resource\ProcessedFileRepository */
        protected function process(/** @var $processedFileRepository Resource\ProcessedFileRepository */
Resource\ProcessedFile $processedFile, /** @var $processedFileRepository Resource\ProcessedFileRepository */
Resource\ResourceStorage $targetStorage) {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        protected function emitPreFileProcessSignal(Resource\ProcessedFile $processedFile, Resource\FileInterface $file, $context, array $configuration = [ ]) {}
        protected function emitPostFileProcessSignal(Resource\ProcessedFile $processedFile, Resource\FileInterface $file, $context, array $configuration = [ ]) {}
    }

    /**
     * Service class for implementing the user filemounts,
     * used for BE_USER (\TYPO3\CMS\Core\Authentication\BackendUserAuthentication)
     * and TCEforms hooks
     *
     * Note: This is now also used by sys_file_category table (fieldname "folder")!
     */
    class UserFileMountService {
/** @var FlashMessageService $flashMessageService */
        public function renderTceformsSelectDropdown(/** @var FlashMessageService $flashMessageService */
$PA) {}
        protected function getSubfoldersForOptionList(Folder $parentFolder, $level = 0) {}
        /**
         * Returns the BE USER Object
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() : BackendUserAuthentication {}
    }

    /**
     * Utility class to render capabilities of the storage.
     */
    class UserStorageCapabilityService {
/** @var $defaultFlashMessageQueue FlashMessageQueue */
        public function renderIsPublic(/** @var $defaultFlashMessageQueue FlashMessageQueue */
array $propertyArray) {}
        protected function renderFileInformationContent(array $fileRecord, $isPublic) {}
    }

}

namespace TYPO3\CMS\Core\Resource\Exception {
    /**
     * An exception when something is wrong with the file handling
     */
    class InsufficientFolderAccessPermissionsException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception to throw if a folder does not exist
     */
    class FolderDoesNotExistException extends \typo3\cms\core\resource\exception\resourcedoesnotexistexception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class InsufficientFileAccessPermissionsException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the Mount Point
     */
    class NotInMountPointException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the path
     */
    class InvalidPathException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class InsufficientFileReadPermissionsException extends \typo3\cms\core\resource\exception\insufficientfileaccesspermissionsexception {}

    /**
     * An exception when something is wrong with fetching the permissions for a file or a folder.
     *
     * Extending \RuntimeException for backwards compatibility.
     */
    class ResourcePermissionsUnavailableException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception to throw if a file does not exist
     */
    class FileDoesNotExistException extends \typo3\cms\core\resource\exception\resourcedoesnotexistexception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class FileOperationErrorException extends \typo3\cms\core\resource\exception\abstractfileoperationexception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class InsufficientFolderReadPermissionsException extends \typo3\cms\core\resource\exception\insufficientfolderaccesspermissionsexception {}

    /**
     * An exception when something is wrong with the File name
     */
    class InvalidFileNameException extends \typo3\cms\core\resource\exception {}

    /**
     * Thrown if an invalid uid is handled.
     */
    class InvalidUidException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class InsufficientFileWritePermissionsException extends \typo3\cms\core\resource\exception\insufficientfileaccesspermissionsexception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class InsufficientFolderWritePermissionsException extends \typo3\cms\core\resource\exception\insufficientfolderaccesspermissionsexception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class InvalidTargetFolderException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception to throw if a resource (file/folder) does not exist
     */
    class ResourceDoesNotExistException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when the size of the uploaded file has exceeded
     */
    class UploadSizeException extends \typo3\cms\core\resource\exception\abstractfileoperationexception {}

    /**
     * An exception when something is wrong with the configuration
     */
    class InvalidConfigurationException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class InsufficientUserPermissionsException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the File
     */
    class InvalidFileException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when the upload goes wrong
     */
    class UploadException extends \typo3\cms\core\resource\exception\abstractfileoperationexception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class ExistingTargetFolderException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the file handling
     */
    abstract class AbstractFileOperationException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class IllegalFileExtensionException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the file handling
     */
    class ExistingTargetFileNameException extends \typo3\cms\core\resource\exception {}

    /**
     * An exception when something is wrong with the Folder
     */
    class InvalidFolderException extends \typo3\cms\core\resource\exception {}

}

namespace TYPO3\CMS\Core\Resource\Hook {
    /**
     * Interface for FileDumpEID Hook to perform some custom security/access checks
     * when accessing file thought FileDumpEID
     */
    interface FileDumpEIDHookInterface {
        function checkFileAccess(\TYPO3\CMS\Core\Resource\ResourceInterface $file) ;
    }

}

namespace TYPO3\CMS\Core\Resource\Utility {
    /**
     * Utility function for working with resource-lists
     */
    class ListUtility {
/** @var $folder \TYPO3\CMS\Core\Resource\Folder */
        public static function resolveSpecialFolderNames(/** @var $folder \TYPO3\CMS\Core\Resource\Folder */
array $folders) {}
    }

    /**
     * Some Backend Utility functions for working with resources
     */
    class BackendUtility {
/** @var FlashMessage $flashMessage */
        public static function getFlashMessageForMissingFile(/** @var FlashMessage $flashMessage */
AbstractFile $file) {}
    }

}

namespace TYPO3\CMS\Core\Preparations {
    /**
     * Prepare TCA. Used in bootstrap and Flex Form Data Structures.
     *
     * @internal Class and API may change any time.
     */
    class TcaPreparation {
        public function prepare(array $tca) : array {}
        protected function prepareQuotingOfTableNamesAndColumnNames(array $tca) : array {}
    }

}

namespace TYPO3\CMS\Core\Error {
    /**
     * A basic but solid exception handler which catches everything which
     * falls through the other exception handlers and provides useful debugging
     * information.
     *
     * This file is a backport from TYPO3 Flow
     */
    class DebugExceptionHandler extends \typo3\cms\core\error\abstractexceptionhandler {
        /**
         * Constructs this exception handler - registers itself as the default exception handler.
         */
        public function __construct() {}
        public function echoExceptionWeb(\Throwable $exception) {}
        public function echoExceptionCLI(\Throwable $exception) {}
        protected function getBacktraceCode(array $trace) {}
        protected function getCodeSnippet($filePathAndName, $lineNumber) {}
    }

    /**
     * A quite exception handler which catches but ignores any exception.
     *
     * This file is a backport from FLOW3
     */
    class ProductionExceptionHandler extends \typo3\cms\core\error\abstractexceptionhandler {
        /**
         * Default title for error messages
         *
         * @var string
         */
        protected $defaultTitle;
        /**
         * Default message for error messages
         *
         * @var string
         */
        protected $defaultMessage;

        /**
         * Constructs this exception handler - registers itself as the default exception handler.
         */
        public function __construct() {}
        public function echoExceptionWeb(\Throwable $exception) {}
        public function echoExceptionCLI(\Throwable $exception) {}
        protected function discloseExceptionInformation(\Throwable $exception) {}
        protected function getTitle(\Throwable $exception) {}
        protected function getMessage(\Throwable $exception) {}
    }

    /**
     * An abstract exception handler
     *
     * This file is a backport from TYPO3 Flow
     */
    abstract class AbstractExceptionHandler implements \psr\log\loggerawareinterface, \typo3\cms\core\singletoninterface, \typo3\cms\core\error\exceptionhandlerinterface {
    use \psr\log\loggerawaretrait;

        const CONTEXT_WEB = 'WEB';
        const CONTEXT_CLI = 'CLI';

        public function handleException(\Throwable $exception) {}
        protected function writeLogEntries(\Throwable $exception, $context) {}
        protected function writeLog($logMessage) {}
        protected function sendStatusHeaders(\Throwable $exception) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Global error handler for TYPO3
     *
     * This file is a backport from TYPO3 Flow
     */
    class ErrorHandler implements \psr\log\loggerawareinterface, \typo3\cms\core\error\errorhandlerinterface {
    use \psr\log\loggerawaretrait;

        /**
         * Error levels which should result in an exception thrown.
         *
         * @var int
         */
        protected $exceptionalErrors;
        /**
         * Whether to write a flash message in case of an error
         *
         * @var bool
         */
        protected $debugMode;

        public function __construct($errorHandlerErrors) {}
        public function setExceptionalErrors($exceptionalErrors) {}
        public function setDebugMode($debugMode) {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        public function handleError(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$errorLevel, /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$errorMessage, /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$errorFile, /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$errorLine) {}
        protected function writeLog($logMessage, $severity) {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * An exception which represents a PHP error.
     *
     * This file is a backport from FLOW3
     */
    class Exception extends \typo3\cms\core\exception {}


    /**
     * Contract for an exception handler
     *
     * This file is a backport from TYPO3 Flow
     */
    interface ExceptionHandlerInterface {
        /**
         * Constructs this exception handler - registers itself as the default exception handler.
         */
        function __construct() ;
        function handleException(\Throwable $exception) ;
        function echoExceptionWeb(\Throwable $exception) ;
        function echoExceptionCLI(\Throwable $exception) ;
    }

    /**
     * Error handler interface for TYPO3
     *
     * This file is a backport from TYPO3 Flow
     */
    interface ErrorHandlerInterface {
        function __construct($errorHandlerErrors) ;
        function setExceptionalErrors($exceptionalErrors) ;
        function handleError($errorLevel, $errorMessage, $errorFile, $errorLine) ;
    }

}

namespace TYPO3\CMS\Core\Error\Http {
    /**
     * Exception for Error 403 - Forbidden
     */
    class ForbiddenException extends \typo3\cms\core\error\http\abstractclienterrorexception {
        /**
         * @var array HTTP Status Header lines
         */
        protected $statusHeaders;
        /**
         * @var string Title of the message
         */
        protected $title;
        /**
         * @var string Error Message
         */
        protected $message;

        public function __construct($message = null, $code = 0) {}
    }

    /**
     * Exception for Error 404 - Page Not Found
     */
    class PageNotFoundException extends \typo3\cms\core\error\http\abstractclienterrorexception {
        /**
         * @var array HTTP Status Header lines
         */
        protected $statusHeaders;
        /**
         * @var string Title of the message
         */
        protected $title;
        /**
         * @var string Error Message
         */
        protected $message;

        public function __construct($message = null, $code = 0) {}
    }

    /**
     * Exception for Error 400 - Bad Request
     */
    class BadRequestException extends \typo3\cms\core\error\http\abstractclienterrorexception {
        /**
         * @var array HTTP Status Header lines
         */
        protected $statusHeaders;
        /**
         * @var string Title of the message
         */
        protected $title;
        /**
         * @var string Error Message
         */
        protected $message;

        public function __construct($message = null, $code = 0) {}
    }

    /**
     * HTTP Server Error Exception (Error 5xx)
     */
    abstract class AbstractServerErrorException extends \typo3\cms\core\error\http\statusexception {}

    /**
     * Exception for Error 401 - Unauthorized
     */
    class UnauthorizedException extends \typo3\cms\core\error\http\abstractclienterrorexception {
        /**
         * @var array HTTP Status Header lines
         */
        protected $statusHeaders;
        /**
         * @var string Title of the message
         */
        protected $title;
        /**
         * @var string Error Message
         */
        protected $message;

        public function __construct($message = null, $code = 0) {}
    }

    /**
     * HTTP Status Exception
     */
    class StatusException extends \typo3\cms\core\error\exception {
        /**
         * @var array HTTP Status Header lines
         */
        protected $statusHeaders;
        /**
         * @var string Title of the message
         */
        protected $title;

        public function __construct($statusHeaders, $message, $title = '', $code = 0) {}
        public function setTitle($title) {}
        /**
         * Getter for the title.
         *
         * @return string
         */
        public function getTitle() {}
        /**
         * Getter for the Status Header.
         *
         * @return string
         */
        public function getStatusHeaders() {}
    }

    /**
     * HTTP Client Error Exception (Error 4xx)
     */
    abstract class AbstractClientErrorException extends \typo3\cms\core\error\http\statusexception {}

    /**
     * Exception for Error 503 - Service Unavailable
     */
    class ServiceUnavailableException extends \typo3\cms\core\error\http\abstractservererrorexception {
        /**
         * @var array HTTP Status Header lines
         */
        protected $statusHeaders;
        /**
         * @var string Title of the message
         */
        protected $title;
        /**
         * @var string Error Message
         */
        protected $message;

        public function __construct($message = null, $code = 0) {}
    }

}

namespace TYPO3\CMS\Core\Messaging {
    /**
     * A class representing flash messages.
     */
    class FlashMessageService implements \typo3\cms\core\singletoninterface {
        /**
         * Array of \TYPO3\CMS\Core\Messaging\FlashMessageQueue objects
         *
         * @var FlashMessageQueue[]
         */
        protected $flashMessageQueues;

        public function getMessageQueueByIdentifier($identifier = 'core.template.flashMessages') : FlashMessageQueue {}
    }

    /**
     * A class for rendering flash messages.
     */
    class FlashMessageRendererResolver {
        /**
         * @var array
         */
        protected $renderer;

        /**
         * This method resolves a FlashMessageRendererInterface for the given $context.
         *
         * In case $context is null, the context will be detected automatic.
         *
         * @return FlashMessageRendererInterface
         */
        public function resolve() : FlashMessageRendererInterface {}
        /**
         * This method resolves the renderer class by given context.
         *
         * @return string
         */
        protected function resolveFlashMessageRenderClass() : string {}
        /**
         * This method detect the current context and return one of the
         * following strings:
         * - FE
         * - BE
         * - CLI
         *
         * @return string
         */
        protected function resolveContext() : string {}
    }

    /**
     * A class representing flash messages.
     */
    class FlashMessage extends \typo3\cms\core\messaging\abstractmessage {
        /**
         * Defines whether the message should be stored in the session (to survive redirects) or only for one request (default)
         *
         * @var bool
         */
        protected $storeInSession;

        public function __construct($message, $title = '', $severity = self::OK, $storeInSession = false) {}
        /**
         * Gets the message's storeInSession flag.
         *
         * @return bool TRUE if message should be stored in the session, otherwise FALSE.
         */
        public function isSessionMessage() {}
        public function setStoreInSession($storeInSession) {}
    }

    /**
     * A class which collects and renders flash messages.
     */
    class FlashMessageQueue extends \splqueue implements \jsonserializable {
        /**
         * A unique identifier for this queue
         *
         * @var string
         */
        protected $identifier;

        public function __construct($identifier) {}
        /**
         * @return string
         */
        public function getIdentifier() {}
        public function enqueue($message) : FlashMessageQueue {}
        public function addMessage(FlashMessage $message) {}
        /**
         * This method is empty, as it will not move any flash message (e.g. from the session)
         */
        public function dequeue() {}
        protected function addFlashMessageToSession(FlashMessage $message) {}
        public function getAllMessages($severity = null) {}
        public function getAllMessagesAndFlush($severity = null) {}
        protected function storeFlashMessagesInSession(array $flashMessages = null) {}
        protected function removeAllFlashMessagesFromSession($severity = null) {}
        /**
         * Returns current flash messages from the session, making sure to always
         * return an array.
         *
         * @return FlashMessage[]
         */
        protected function getFlashMessagesFromSession() : array {}
        /**
         * Gets user object by context
         *
         * @return AbstractUserAuthentication
         */
        protected function getUserByContext() {}
        public function renderFlashMessages(FlashMessageRendererInterface $flashMessageRenderer = null) {}
        /**
         * Returns all items of the queue as array
         *
         * @return FlashMessage[]
         */
        public function toArray() {}
        public function clear($severity = null) {}
        /**
         * @return array Data which can be serialized by json_encode()
         */
        public function jsonSerialize() : array {}
    }

    /**
     * A class used for any kind of messages.
     */
    abstract class AbstractMessage implements \jsonserializable {
        const ERROR = 2;
        const INFO = -1;
        const NOTICE = -2;
        const WARNING = 1;
        const OK = 0;

        /**
         * The message's title
         *
         * @var string
         */
        protected $title;
        /**
         * The message
         *
         * @var string
         */
        protected $message;
        /**
         * The message's severity
         *
         * @var int
         */
        protected $severity;

        /**
         * Gets the message's title.
         *
         * @return string The message's title.
         */
        public function getTitle() : string {}
        public function setTitle(string $title) {}
        /**
         * Gets the message.
         *
         * @return string The message.
         */
        public function getMessage() : string {}
        public function setMessage(string $message) {}
        /**
         * Gets the message' severity.
         *
         * @return int The message' severity, must be one of AbstractMessage::INFO or similar contstants
         */
        public function getSeverity() : int {}
        public function setSeverity(int $severity = self::OK) {}
        /**
         * Creates a string representation of the message. Useful for command
         * line use.
         *
         * @return string A string representation of the message.
         */
        public function __toString() {}
        /**
         * @return array Data which can be serialized by json_encode()
         */
        public function jsonSerialize() : array {}
    }

}

namespace TYPO3\CMS\Core\Messaging\Renderer {
    /**
     * A class representing a html flash message as plain text.
     * It is used in CLI context per default.
     * The created output contains at least the severity and the message
     * in the following format:
     * [SEVERITY] <message>
     *
     * Example:
     * [ERROR] No record found
     *
     * In case the FlashMessage object contains also a title, the
     * following format is used:
     * [SEVERITY] <title>: <message>
     *
     * Example:
     * [ERROR] An error occurred: No record found
     *
     * Multiple messages are separated by a new line (LF).
     */
    class PlaintextRenderer implements \typo3\cms\core\messaging\renderer\flashmessagerendererinterface {
        /**
         * Message types
         * @var array
         */
        static protected $type;

        public function render(array $flashMessages) : string {}
    }

    /**
     * A class representing a html flash message as unordered markup list.
     * It is used in frontend context per default.
     * The created output contains css classes which can be used to style
     * the output individual. Any message contains the message and an
     * optional title which is rendered as <h4> tag if it is set in
     * the FlashMessage object.
     */
    class ListRenderer implements \typo3\cms\core\messaging\renderer\flashmessagerendererinterface {
        /**
         * @var string The message severity class names
         */
        static protected $classes;
        /**
         * @var string The message severity icon names
         */
        static protected $icons;

        public function render(array $flashMessages) : string {}
        protected function getClass(FlashMessage $flashMessage) : string {}
        protected function getIconName(FlashMessage $flashMessage) : string {}
        protected function getMessageAsMarkup(array $flashMessages) : string {}
    }

    /**
     * A class representing a bootstrap flash messages.
     * This class renders flash messages as markup, based on the
     * bootstrap HTML/CSS framework. It is used in backend context.
     * The created output contains all classes which are required for
     * the TYPO3 backend. Any kind of message contains also a nice icon.
     */
    class BootstrapRenderer implements \typo3\cms\core\messaging\renderer\flashmessagerendererinterface {
        /**
         * @var string The message severity class names
         */
        static protected $classes;
        /**
         * @var string The message severity icon names
         */
        static protected $icons;

        public function render(array $flashMessages) : string {}
        protected function getClass(FlashMessage $flashMessage) : string {}
        protected function getIconName(FlashMessage $flashMessage) : string {}
        protected function getMessageAsMarkup(array $flashMessages) : string {}
    }


    /**
     * Interface must be implemented by all flash message renderer classes
     */
    interface FlashMessageRendererInterface {
        function render(array $flashMessages) : string ;
    }

}

namespace TYPO3\CMS\Core\Authentication {
    /**
     * Authentication services class
     */
    class AbstractAuthenticationService extends \typo3\cms\core\service\abstractservice {
        /**
         * User object
         *
         * @var AbstractUserAuthentication
         */
        public $pObj;
        /**
         * Subtype of the service which is used to call the service.
         *
         * @var string
         */
        public $mode;
        /**
         * Submitted login form data
         *
         * @var array
         */
        public $login;
        /**
         * Various data
         *
         * @var array
         */
        public $authInfo;
        /**
         * User db table definition
         *
         * @var array
         */
        public $db_user;
        /**
         * Usergroups db table definition
         *
         * @var array
         */
        public $db_groups;
        /**
         * If the writelog() functions is called if a login-attempt has be tried without success
         *
         * @var bool
         */
        public $writeAttemptLog;

        public function initAuth($mode, $loginData, $authInfo, $pObj) {}
        public function compareUident(array $user, array $loginData, $passwordCompareStrategy = '') {}
        public function writelog($type, $action, $error, $details_nr, $details, $data, $tablename = '', $recuid = '', $recpid = '') {}
        public function fetchUserRecord($username, $extraWhere = '', $dbUserSetup = '') {}
    }

    /**
     * Authentication services class
     */
    class AuthenticationService extends \typo3\cms\core\authentication\abstractauthenticationservice {
        public function processLoginData(array $loginData, $passwordTransmissionStrategy) {}
        /**
         * Find a user (eg. look up the user record in database when a login is sent)
         *
         * @return mixed User array or FALSE
         */
        public function getUser() {}
        public function authUser(array $user) {}
        public function getGroups($user, $knownGroups) {}
        public function getSubGroups($grList, $idList = '', $groups) {}
    }

    /**
     * TYPO3 backend user authentication
     * Contains most of the functions used for checking permissions, authenticating users,
     * setting up the user, and API for user from outside.
     * This class contains the configuration of the database fields used plus some
     * functions for the authentication process of backend users.
     */
    class BackendUserAuthentication extends \typo3\cms\core\authentication\abstractuserauthentication {
        const ROLE_SYSTEMMAINTAINER = 'systemMaintainer';

        /**
         * Should be set to the usergroup-column (id-list) in the user-record
         * @var string
         */
        public $usergroup_column;
        /**
         * The name of the group-table
         * @var string
         */
        public $usergroup_table;
        /**
         * holds lists of eg. tables, fields and other values related to the permission-system. See fetchGroupData
         * @var array
         * @internal
         */
        public $groupData;
        /**
         * This array will hold the groups that the user is a member of
         * @var array
         */
        public $userGroups;
        /**
         * This array holds the uid's of the groups in the listed order
         * @var array
         */
        public $userGroupsUID;
        /**
         * This is $this->userGroupsUID imploded to a comma list... Will correspond to the 'usergroup_cached_list'
         * @var string
         */
        public $groupList;
        /**
         * User workspace.
         * -99 is ERROR (none available)
         * -1 is offline
         * 0 is online
         * >0 is custom workspaces
         * @var int
         */
        public $workspace;
        /**
         * Custom workspace record if any
         * @var array
         */
        public $workspaceRec;
        /**
         * Used to accumulate data for the user-group.
         * DON NOT USE THIS EXTERNALLY!
         * Use $this->groupData instead
         * @var array
         * @internal
         */
        public $dataLists;
        /**
         * List of group_id's in the order they are processed.
         * @var array
         */
        public $includeGroupArray;
        /**
         * Used to accumulate the TSconfig data of the user
         * @var array
         */
        public $TSdataArray;
        /**
         * Contains the non-parsed user TSconfig
         * @var string
         */
        public $userTS_text;
        /**
         * Contains the parsed user TSconfig
         * @var array
         */
        public $userTS;
        /**
         * Set internally if the user TSconfig was parsed and needs to be cached.
         * @var bool
         */
        public $userTSUpdated;
        /**
         * Set this from outside if you want the user TSconfig to ALWAYS be parsed and not fetched from cache.
         * @var bool
         */
        public $userTS_dontGetCached;
        /**
         * Contains last error message
         * @var string
         */
        public $errorMsg;
        /**
         * Cache for checkWorkspaceCurrent()
         * @var array|null
         */
        public $checkWorkspaceCurrent_cache;
        /**
         * @var \TYPO3\CMS\Core\Resource\ResourceStorage[]
         */
        protected $fileStorages;
        /**
         * @var array
         */
        protected $filePermissions;
        /**
         * Table in database with user data
         * @var string
         */
        public $user_table;
        /**
         * Column for login-name
         * @var string
         */
        public $username_column;
        /**
         * Column for password
         * @var string
         */
        public $userident_column;
        /**
         * Column for user-id
         * @var string
         */
        public $userid_column;
        /**
         * @var string
         */
        public $lastLogin_column;
        /**
         * @var array
         */
        public $enablecolumns;
        /**
         * Form field with login-name
         * @var string
         */
        public $formfield_uname;
        /**
         * Form field with password
         * @var string
         */
        public $formfield_uident;
        /**
         * Form field with status: *'login', 'logout'
         * @var string
         */
        public $formfield_status;
        /**
         * Decides if the writelog() function is called at login and logout
         * @var bool
         */
        public $writeStdLog;
        /**
         * If the writelog() functions is called if a login-attempt has be tried without success
         * @var bool
         */
        public $writeAttemptLog;
        /**
         * Session timeout (on the server), defaults to 8 hours for backend user
         *
         * If >0: session-timeout in seconds.
         * If <=0: Instant logout after login.
         * The value must be at least 180 to avoid side effects.
         *
         * @var int
         */
        public $sessionTimeout;
        /**
         * @var int
         */
        public $firstMainGroup;
        /**
         * User Config
         * @var array
         */
        public $uc;
        /**
         * User Config Default values:
         * The array may contain other fields for configuration.
         * For this, see "setup" extension and "TSConfig" document (User TSconfig, "setup.[xxx]....")
         * Reserved keys for other storage of session data:
         * moduleData
         * moduleSessionID
         * @var array
         */
        public $uc_default;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Returns TRUE if user is admin
         * Basically this function evaluates if the ->user[admin] field has bit 0 set. If so, user is admin.
         *
         * @return bool
         */
        public function isAdmin() {}
        public function isMemberOfGroup($groupId) {}
        public function doesUserHaveAccess($row, $perms) {}
        public function isInWebMount($id, $readPerms = '', $exitOnError = 0) {}
        public function modAccess($conf, $exitOnError) {}
        /**
         * Checks if the user is in the valid list of allowed system maintainers. if the list is not set,
         * then all admins are system maintainers. If the list is empty, no one is system maintainer (good for production
         * systems). If the currently logged in user is in "switch user" mode, this method will return false.
         *
         * @return bool
         */
        public function isSystemMaintainer() : bool {}
        /**
         * If a user has actually logged in and switched to a different user (admins can use the SU switch user method)
         * the real UID is sometimes needed (when checking for permissions for example).
         */
        protected function getRealUserId() : int {}
        public function getPagePermsClause($perms) {}
        public function calcPerms($row) {}
        /**
         * Returns TRUE if the RTE (Rich Text Editor) is enabled for the user.
         *
         * @return bool
         */
        public function isRTE() {}
        public function check($type, $value) {}
        public function checkAuthMode($table, $field, $value, $authMode) {}
        public function checkLanguageAccess($langValue) {}
        public function checkFullLanguagesAccess($table, $record) {}
        public function recordEditAccessInternals($table, $idOrRow, $newRecord = false, $deletedRecord = false, $checkFullLanguageAccess = false) {}
        public function isPSet($compiledPermissions, $tableName, $actionType = '') {}
        /**
         * Returns TRUE if the BE_USER is allowed to *create* shortcuts in the backend modules
         *
         * @return bool
         */
        public function mayMakeShortcut() {}
        public function workspaceCannotEditRecord($table, $recData) {}
        public function workspaceCannotEditOfflineVersion($table, $recData) {}
        public function workspaceAllowLiveRecordsInPID($pid, $table) {}
        public function workspaceCreateNewRecord($pid, $table) {}
        public function workspaceAllowAutoCreation($table, $id, $recpid) {}
        public function workspaceCheckStageForCurrent($stage) {}
        public function workspacePublishAccess($wsid) {}
        /**
         * Workspace swap-mode access?
         *
         * @return bool Returns TRUE if records can be swapped in the current workspace, otherwise FALSE
         */
        public function workspaceSwapAccess() {}
        public function getTSConfig($objectString, $config = '') {}
        public function getTSConfigVal($objectString) {}
        public function getTSConfigProp($objectString) {}
        /**
         * Returns an array with the webmounts.
         * If no webmounts, and empty array is returned.
         * NOTICE: Deleted pages WILL NOT be filtered out! So if a mounted page has been deleted
         *         it is STILL coming out as a webmount. This is not checked due to performance.
         *
         * @return array
         */
        public function returnWebmounts() {}
        public function setWebmounts(array $mountPointUids, $append = false) {}
        public function jsConfirmation($bitmask) {}
        /**
         * Initializes a lot of stuff like the access-lists, database-mountpoints and filemountpoints
         * This method is called by ->backendCheckLogin() (from extending BackendUserAuthentication)
         * if the backend user login has verified OK.
         * Generally this is required initialization of a backend user.
         *
         * @access private
         * @see \TYPO3\CMS\Core\TypoScript\Parser\TypoScriptParser
         */
        public function fetchGroupData() {}
        public function fetchGroups($grList, $idList = '') {}
        public function setCachedList($cList) {}
        /**
         * Sets up all file storages for a user.
         * Needs to be called AFTER the groups have been loaded.
         */
        protected function initializeFileStorages() {}
        /**
         * Returns an array of category mount points. The category permissions from BE Groups
         * are also taken into consideration and are merged into User permissions.
         *
         * @return array
         */
        public function getCategoryMountPoints() {}
        /**
         * Returns an array of file mount records, taking workspaces and user home and group home directories into account
         * Needs to be called AFTER the groups have been loaded.
         *
         * @return array
         * @internal
         */
        public function getFileMountRecords() {}
        /**
         * Returns an array with the filemounts for the user.
         * Each filemount is represented with an array of a "name", "path" and "type".
         * If no filemounts an empty array is returned.
         *
         * @api
         * @return \TYPO3\CMS\Core\Resource\ResourceStorage[]
         */
        public function getFileStorages() {}
        /**
         * Adds filters based on what the user has set
         * this should be done in this place, and called whenever needed,
         * but only when needed
         */
        public function evaluateUserSpecificFileFilterSettings() {}
        /**
         * Returns the information about file permissions.
         * Previously, this was stored in the DB field fileoper_perms now it is file_permissions.
         * Besides it can be handled via userTSconfig
         *
         * permissions.file.default {
         * addFile = 1
         * readFile = 1
         * writeFile = 1
         * copyFile = 1
         * moveFile = 1
         * renameFile = 1
         * deleteFile = 1
         *
         * addFolder = 1
         * readFolder = 1
         * writeFolder = 1
         * copyFolder = 1
         * moveFolder = 1
         * renameFolder = 1
         * deleteFolder = 1
         * recursivedeleteFolder = 1
         * }
         *
         * # overwrite settings for a specific storageObject
         * permissions.file.storage.StorageUid {
         * readFile = 1
         * recursivedeleteFolder = 0
         * }
         *
         * Please note that these permissions only apply, if the storage has the
         * capabilities (browseable, writable), and if the driver allows for writing etc
         *
         * @api
         * @return array
         */
        public function getFilePermissions() {}
        public function getFilePermissionsForStorage(\TYPO3\CMS\Core\Resource\ResourceStorage $storageObject) {}
/** @var ResourceStorage $storage */
        public function getDefaultUploadFolder(/** @var ResourceStorage $storage */
$pid = null, /** @var ResourceStorage $storage */
$table = null, /** @var ResourceStorage $storage */
$field = null) {}
        /**
         * Returns a \TYPO3\CMS\Core\Resource\Folder object that could be used for uploading
         * temporary files in user context. The folder _temp_ below the default upload folder
         * of the user is used.
         *
         * @return \TYPO3\CMS\Core\Resource\Folder|null
         * @see \TYPO3\CMS\Core\Authentication\BackendUserAuthentication::getDefaultUploadFolder();
         */
        public function getDefaultUploadTemporaryFolder() {}
        public function addTScomment($str) {}
        /**
         * Initializing workspace.
         * Called from within this function, see fetchGroupData()
         *
         * @see fetchGroupData()
         */
        public function workspaceInit() {}
        /**
         * Limiting the DB mountpoints if there any selected in the workspace record
         */
        protected function initializeDbMountpointsInWorkspace() {}
        public function checkWorkspace($wsRec, $fields = 'uid,title,adminusers,members,reviewers,publish_access,stagechg_notification') {}
        /**
         * Uses checkWorkspace() to check if current workspace is available for user.
         * This function caches the result and so can be called many times with no performance loss.
         *
         * @return array See checkWorkspace()
         * @see checkWorkspace()
         */
        public function checkWorkspaceCurrent() {}
        public function setWorkspace($workspaceId) {}
        public function setTemporaryWorkspace($workspaceId) {}
        /**
         * Sets the default workspace in the context of the current backend user.
         */
        public function setDefaultWorkspace() {}
        public function setWorkspacePreview($previewState) {}
        /**
         * Return default workspace ID for user,
         * If EXT:workspaces is not installed the user will be pushed the the
         * Live workspace
         *
         * @return int Default workspace id. If no workspace is available it will be "-99
         */
        public function getDefaultWorkspace() {}
        public function writelog($type, $action, $error, $details_nr, $details, $data, $tablename = '', $recuid = '', $recpid = '', $event_pid = -1, $NEWid = '', $userId = 0) {}
        public function simplelog($message, $extKey = '', $error = 0) {}
/** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
        public function checkLogFailures(/** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
$email, /** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
$secondsBack = 3600, /** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
$max = 3) {}
        /**
         * Getter for the cookie name
         *
         * @static
         * @return string returns the configured cookie name
         */
        public static function getCookieName() {}
        /**
         * If TYPO3_CONF_VARS['BE']['enabledBeUserIPLock'] is enabled and
         * an IP-list is found in the User TSconfig objString "options.lockToIP",
         * then make an IP comparison with REMOTE_ADDR and check if the IP address matches
         *
         * @return bool TRUE, if IP address validates OK (or no check is done at all because no restriction is set)
         */
        public function checkLockToIP() {}
        public function backendCheckLogin($proceedIfNoUserIsLoggedIn = false) {}
        /**
         * Initialize the internal ->uc array for the backend user
         * Will make the overrides if necessary, and write the UC back to the be_users record if changes has happened
         *
         * @internal
         */
        public function backendSetUC() {}
        /**
         * Override: Call this function every time the uc is updated.
         * That is 1) by reverting to default values, 2) in the setup-module, 3) userTS changes (userauthgroup)
         *
         * @internal
         */
        public function overrideUC() {}
        /**
         * Clears the user[uc] and ->uc to blank strings. Then calls ->backendSetUC() to fill it again with reset contents
         *
         * @internal
         */
        public function resetUC() {}
        /**
         * Will send an email notification to warning_email_address/the login users email address when a login session is just started.
         * Depends on various parameters whether mails are send and to whom.
         *
         * @access private
         */
        private function emailAtLogin() {}
        /**
         * Determines whether a backend user is allowed to access the backend.
         *
         * The conditions are:
         * + backend user is a regular user and adminOnly is not defined
         * + backend user is an admin user
         * + backend user is used in CLI context and adminOnly is explicitly set to "2" (see CommandLineUserAuthentication)
         * + backend user is being controlled by an admin user
         *
         * @return bool Whether a backend user is allowed to access the backend
         */
        protected function isUserAllowedToLogin() {}
        /**
         * Logs out the current user and clears the form protection tokens.
         */
        public function logoff() {}
    }

    /**
     * TYPO3 backend user authentication on a CLI level
     * Auto-logs in, only allowed on CLI
     */
    class CommandLineUserAuthentication extends \typo3\cms\core\authentication\backenduserauthentication {
        /**
         * The username of the CLI user (there is only one)
         * @var string
         */
        protected $username;

        /**
         * Constructor, only allowed in CLI mode
         *
         * @throws \RuntimeException
         */
        public function __construct() {}
        /**
         * Logs-in the _CLI_ user. It does not need to check for credentials.
         *
         * @throws \RuntimeException when the user could not log in or it is an admin
         */
        public function authenticate() {}
        public function backendCheckLogin($proceedIfNoUserIsLoggedIn = false) {}
        /**
         * Determines whether a CLI backend user is allowed to access TYPO3.
         * Only when adminOnly is off (=0), and only allowed for admins and CLI users (=2)
         *
         * @return bool Whether the CLI user is allowed to access TYPO3
         */
        protected function isUserAllowedToLogin() {}
        /**
         * Check if a user with username "_cli_" exists. Deleted users are left out
         * but hidden and start / endtime restricted users are considered.
         *
         * @return bool true if the user exists
         */
        protected function checkIfCliUserExists() {}
        /**
         * Create a record in the DB table be_users called "_cli_" with no other information
         */
        protected function createCliUser() {}
        /**
         * This function returns a salted hashed key.
         *
         * @return string a random password
         */
        protected function generateHashedPassword() {}
    }

    /**
     * Authentication of users in TYPO3
     *
     * This class is used to authenticate a login user.
     * The class is used by both the frontend and backend.
     * In both cases this class is a parent class to BackendUserAuthentication and FrontenUserAuthentication
     *
     * See Inside TYPO3 for more information about the API of the class and internal variables.
     */
    abstract class AbstractUserAuthentication implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * Session/Cookie name
         * @var string
         */
        public $name;
        /**
         * Session/GET-var name
         * @var string
         */
        public $get_name;
        /**
         * Table in database with user data
         * @var string
         */
        public $user_table;
        /**
         * Table in database with user groups
         * @var string
         */
        public $usergroup_table;
        /**
         * Column for login-name
         * @var string
         */
        public $username_column;
        /**
         * Column for password
         * @var string
         */
        public $userident_column;
        /**
         * Column for user-id
         * @var string
         */
        public $userid_column;
        /**
         * Column for user group information
         * @var string
         */
        public $usergroup_column;
        /**
         * Column name for last login timestamp
         * @var string
         */
        public $lastLogin_column;
        /**
         * Enable field columns of user table
         * @var array
         */
        public $enablecolumns;
        /**
         * @var bool
         */
        public $showHiddenRecords;
        /**
         * Form field with login-name
         * @var string
         */
        public $formfield_uname;
        /**
         * Form field with password
         * @var string
         */
        public $formfield_uident;
        /**
         * Form field with status: *'login', 'logout'. If empty login is not verified.
         * @var string
         */
        public $formfield_status;
        /**
         * Session timeout (on the server)
         *
         * If >0: session-timeout in seconds.
         * If <=0: Instant logout after login.
         *
         * @var int
         */
        public $sessionTimeout;
        /**
         * Name for a field to fetch the server session timeout from.
         * If not empty this is a field name from the user table where the timeout can be found.
         * @var string
         */
        public $auth_timeout_field;
        /**
         * Lifetime for the session-cookie (on the client)
         *
         * If >0: permanent cookie with given lifetime
         * If 0: session-cookie
         * Session-cookie means the browser will remove it when the browser is closed.
         *
         * @var int
         */
        public $lifetime;
        /**
         * GarbageCollection
         * Purge all server session data older than $gc_time seconds.
         * 0 = default to $this->sessionTimeout or use 86400 seconds (1 day) if $this->sessionTimeout == 0
         * @var int
         */
        public $gc_time;
        /**
         * Probability for garbage collection to be run (in percent)
         * @var int
         */
        public $gc_probability;
        /**
         * Decides if the writelog() function is called at login and logout
         * @var bool
         */
        public $writeStdLog;
        /**
         * Log failed login attempts
         * @var bool
         */
        public $writeAttemptLog;
        /**
         * Send no-cache headers
         * @var bool
         */
        public $sendNoCacheHeaders;
        /**
         * If this is set, authentication is also accepted by $_GET.
         * Notice that the identification is NOT 128bit MD5 hash but reduced.
         * This is done in order to minimize the size for mobile-devices, such as WAP-phones
         * @var bool
         */
        public $getFallBack;
        /**
         * The ident-hash is normally 32 characters and should be!
         * But if you are making sites for WAP-devices or other low-bandwidth stuff,
         * you may shorten the length.
         * Never let this value drop below 6!
         * A length of 6 would give you more than 16 mio possibilities.
         * @var int
         */
        public $hash_length;
        /**
         * Setting this flag TRUE lets user-authentication happen from GET_VARS if
         * POST_VARS are not set. Thus you may supply username/password with the URL.
         * @var bool
         */
        public $getMethodEnabled;
        /**
         * If set to 4, the session will be locked to the user's IP address (all four numbers).
         * Reducing this to 1-3 means that only the given number of parts of the IP address is used.
         * @var int
         */
        public $lockIP;
        /**
         * @var string
         */
        public $warningEmail;
        /**
         * Time span (in seconds) within the number of failed logins are collected
         * @var int
         */
        public $warningPeriod;
        /**
         * The maximum accepted number of warnings before an email to $warningEmail is sent
         * @var int
         */
        public $warningMax;
        /**
         * If set, the user-record must be stored at the page defined by $checkPid_value
         * @var bool
         */
        public $checkPid;
        /**
         * The page id the user record must be stored at
         * @var int
         */
        public $checkPid_value;
        /**
         * session_id (MD5-hash)
         * @var string
         * @internal
         */
        public $id;
        /**
         * Indicates if an authentication was started but failed
         * @var bool
         */
        public $loginFailure;
        /**
         * Will be set to TRUE if the login session is actually written during auth-check.
         * @var bool
         */
        public $loginSessionStarted;
        /**
         * @var array|null contains user- AND session-data from database (joined tables)
         * @internal
         */
        public $user;
        /**
         * Will be added to the url (eg. '&login=ab7ef8d...')
         * GET-auth-var if getFallBack is TRUE. Should be inserted in links!
         * @var string
         * @internal
         */
        public $get_URL_ID;
        /**
         * Will be set to TRUE if a new session ID was created
         * @var bool
         */
        public $newSessionID;
        /**
         * Will force the session cookie to be set every time (lifetime must be 0)
         * @var bool
         */
        public $forceSetCookie;
        /**
         * Will prevent the setting of the session cookie (takes precedence over forceSetCookie)
         * @var bool
         */
        public $dontSetCookie;
        /**
         * @var bool
         */
        protected $cookieWasSetOnCurrentRequest;
        /**
         * Login type, used for services.
         * @var string
         */
        public $loginType;
        /**
         * "auth" services configuration array from $GLOBALS['TYPO3_CONF_VARS']['SVCONF']['auth']
         * @var array
         */
        public $svConfig;
        /**
         * @var array
         */
        public $uc;
        /**
         * @var SessionBackendInterface
         */
        protected $sessionBackend;
        /**
         * Holds deserialized data from session records.
         * 'Reserved' keys are:
         *   - 'sys': Reserved for TypoScript standard code.
         * @var array
         */
        protected $sessionData;

        /**
         * Initialize some important variables
         */
        public function __construct() {}
        /**
         * Starts a user session
         * Typical configurations will:
         * a) check if session cookie was set and if not, set one,
         * b) check if a password/username was sent and if so, try to authenticate the user
         * c) Lookup a session attached to a user and check timeout etc.
         * d) Garbage collection, setting of no-cache headers.
         * If a user is authenticated the database record of the user (array) will be set in the ->user internal variable.
         *
         * @throws Exception
         */
        public function start() {}
        /**
         * Sets the session cookie for the current disposal.
         *
         * @throws Exception
         */
        protected function setSessionCookie() {}
        /**
         * Gets the domain to be used on setting cookies.
         * The information is taken from the value in $GLOBALS['TYPO3_CONF_VARS']['SYS']['cookieDomain'].
         *
         * @return string The domain to be used on setting cookies
         */
        protected function getCookieDomain() {}
        protected function getCookie($cookieName) {}
        /**
         * Determine whether a session cookie needs to be set (lifetime=0)
         *
         * @return bool
         * @internal
         */
        public function isSetSessionCookie() {}
        /**
         * Determine whether a non-session cookie needs to be set (lifetime>0)
         *
         * @return bool
         * @internal
         */
        public function isRefreshTimeBasedCookie() {}
        /**
         * Checks if a submission of username and password is present or use other authentication by auth services
         *
         * @throws \RuntimeException
         * @internal
         */
        public function checkAuthentication() {}
        /**
         * Creates a new session ID.
         *
         * @return string The new session ID
         */
        public function createSessionId() {}
        protected function getAuthServices(string $subType, array $loginData, array $authInfo) : \Traversable {}
        protected function regenerateSessionId(array $existingSessionRecord = [ ], bool $anonymous = false) {}
        public function createUserSession($tempuser) {}
        protected function updateLoginTimestamp(int $userId) {}
        public function getNewSessionRecord($tempuser) {}
        public function fetchUserSession($skipSessionUpdate = false) {}
        /**
         * Log out current user!
         * Removes the current session record, sets the internal ->user array to a blank string;
         * Thereby the current user (if any) is effectively logged out!
         */
        public function logoff() {}
        /**
         * Perform the logoff action. Called from logoff() as a way to allow subclasses to override
         * what happens when a user logs off, without needing to reproduce the hook calls and logging
         * that happens in the public logoff() API method.
         */
        protected function performLogoff() {}
        public function removeCookie($cookieName) {}
        public function isExistingSessionRecord($id) {}
        /**
         * Returns whether this request is going to set a cookie
         * or a cookie was already found in the system
         *
         * @return bool Returns TRUE if a cookie is set
         */
        public function isCookieSet() {}
        /**
         * This returns the restrictions needed to select the user respecting
         * enable columns and flags like deleted, hidden, starttime, endtime
         * and rootLevel
         *
         * @return QueryRestrictionContainerInterface
         * @internal
         */
        protected function userConstraints() : QueryRestrictionContainerInterface {}
        protected function ipLockClause_remoteIPNumber($parts) {}
        public function writeUC($variable = '') {}
        public function unpack_uc($theUC = '') {}
        public function pushModuleData($module, $data, $noSave = 0) {}
        public function getModuleData($module, $type = '') {}
        public function getSessionData($key) {}
        public function setSessionData($key, $data) {}
        public function setAndSaveSessionData($key, $data) {}
        /**
         * Returns an info array with Login/Logout data submitted by a form or params
         *
         * @return array
         * @internal
         */
        public function getLoginFormData() {}
        public function processLoginData($loginData, $passwordTransmissionStrategy = '') {}
        /**
         * Returns an info array which provides additional information for auth services
         *
         * @return array
         * @internal
         */
        public function getAuthInfoArray() {}
        public function compareUident($user, $loginData, $passwordCompareStrategy = '') {}
        /**
         * Garbage collector, removing old expired sessions.
         *
         * @internal
         */
        public function gc() {}
        public function writelog($type, $action, $error, $details_nr, $details, $data, $tablename, $recuid, $recpid) {}
        public function checkLogFailures($email, $secondsBack, $maxFailures) {}
        public function setBeUserByUid($uid) {}
        public function setBeUserByName($name) {}
        public function getRawUserByUid($uid) {}
        public function getRawUserByName($name) {}
        public function fetchUserRecord($dbUser, $username, $extraWhere = '') {}
        /**
         * @internal
         * @return string
         */
        public function getSessionId() : string {}
        /**
         * @internal
         * @return string
         */
        public function getLoginType() : string {}
        /**
         * Returns initialized session backend. Returns same session backend if called multiple times
         *
         * @return SessionBackendInterface
         */
        protected function getSessionBackend() {}
    }

}

namespace TYPO3\CMS\Core\Charset {
    /**
     * Exception for unknown charsets
     */
    class UnknownCharsetException extends \typo3\cms\core\exception {}

    /**
     * Class for conversion between charsets
     */
    class CharsetConverter implements \typo3\cms\core\singletoninterface {
        /**
         * ASCII Value for chars with no equivalent.
         *
         * @var int
         */
        public $noCharByteVal;
        /**
         * This is the array where parsed conversion tables are stored (cached)
         *
         * @var array
         */
        public $parsedCharsets;
        /**
         * An array where case folding data will be stored (cached)
         *
         * @var array
         */
        public $caseFolding;
        /**
         * An array where charset-to-ASCII mappings are stored (cached)
         *
         * @var array
         */
        public $toASCII;
        /**
         * This tells the converter which charsets has two bytes per char:
         *
         * @var array
         */
        public $twoByteSets;
        /**
         * This tells the converter which charsets use a scheme like the Extended Unix Code:
         *
         * @var array
         */
        public $eucBasedSets;
        /**
         * @link http://developer.apple.com/documentation/macos8/TextIntlSvcs/TextEncodingConversionManager/TEC1.5/TEC.b0.html
         * @link http://czyborra.com/charsets/iso8859.html
         *
         * @var array
         */
        public $synonyms;

        public function parse_charset($charset) {}
        public function conv($inputString, $fromCharset, $toCharset, $useEntityForNoChar = false) {}
        public function convArray($array, $fromCharset, $toCharset, $useEntityForNoChar = false) {}
        public function utf8_encode($str, $charset) {}
        public function utf8_decode($str, $charset, $useEntityForNoChar = false) {}
        public function utf8_to_entities($str) {}
        public function entities_to_utf8($str) {}
        public function utf8_to_numberarray($str) {}
        public function UnumberToChar($unicodeInteger) {}
        public function utf8CharToUnumber($str, $hex = false) {}
        public function initCharset($charset) {}
        public function initUnicodeData($mode = null) {}
        public function initCaseFolding($charset) {}
        public function initToASCII($charset) {}
        public function crop($charset, $string, $len, $crop = '') {}
        public function convCaseFirst($charset, $string, $case) {}
        public function specCharsToASCII($charset, $string) {}
        public function sb_char_mapping($str, $charset) {}
        public function utf8_char2byte_pos($str, $pos) {}
        public function utf8_char_mapping($str) {}
        public function euc_char_mapping($str, $charset) {}
    }

}

namespace TYPO3\CMS\Core\Package {
    /**
     * This class takes care about dependencies between packages.
     * It provides functionality to resolve dependencies and to determine
     * the crucial loading order of the packages.
     */
    class DependencyResolver {
        /**
         * @var DependencyOrderingService
         */
        protected $dependencyOrderingService;

        public function injectDependencyOrderingService(DependencyOrderingService $dependencyOrderingService) {}
        public function sortPackageStatesConfigurationByDependency(array $packageStatesConfiguration) {}
        protected function convertConfigurationForGraph(array $packageStatesConfiguration, array $packageKeys) {}
        protected function addDependencyToFrameworkToAllExtensions(array $packageStateConfiguration, array $rootPackageKeys) {}
        protected function buildDependencyGraph(array $packageStateConfiguration) {}
/** @var Package $package */
        protected function findFrameworkPackages(/** @var Package $package */
array $packageStateConfiguration) {}
    }

    /**
     * A Package representing the details of an extension and/or a composer package
     * Adapted from FLOW for TYPO3 CMS
     */
    class Package implements \typo3\cms\core\package\packageinterface {
        /**
         * @var array
         */
        protected $extensionManagerConfiguration;
        /**
         * If this package is part of factory default, it will be activated
         * during first installation.
         *
         * @var bool
         */
        protected $partOfFactoryDefault;
        /**
         * If this package is part of minimal usable system, it will be
         * activated if PackageStates is created from scratch.
         *
         * @var bool
         */
        protected $partOfMinimalUsableSystem;
        /**
         * Unique key of this package.
         * @var string
         */
        protected $packageKey;
        /**
         * Full path to this package's main directory
         * @var string
         */
        protected $packagePath;
        /**
         * If this package is protected and therefore cannot be deactivated or deleted
         * @var bool
         */
        protected $protected;
        /**
         * @var \stdClass
         */
        protected $composerManifest;
        /**
         * Meta information about this package
         * @var MetaData
         */
        protected $packageMetaData;
        /**
         * @var PackageManager
         */
        protected $packageManager;

        public function __construct(PackageManager $packageManager, $packageKey, $packagePath) {}
        /**
         * Loads package management related flags from the "extra:typo3/cms:Package" section
         * of extensions composer.json files into local properties
         */
        protected function loadFlagsFromComposerManifest() {}
        /**
         * @return bool
         */
        public function isPartOfFactoryDefault() {}
        /**
         * @return bool
         */
        public function isPartOfMinimalUsableSystem() {}
        /**
         * Returns the package key of this package.
         *
         * @return string
         * @api
         */
        public function getPackageKey() {}
        /**
         * Tells if this package is protected and therefore cannot be deactivated or deleted
         *
         * @return bool
         * @api
         */
        public function isProtected() {}
        public function setProtected($protected) {}
        /**
         * Returns the full path to this package's main directory
         *
         * @return string Path to this package's main directory
         * @api
         */
        public function getPackagePath() {}
        /**
         * Returns the package meta data object of this package.
         *
         * @return MetaData
         */
        public function getPackageMetaData() {}
        /**
         * Returns an array of packages this package replaces
         *
         * @return array
         */
        public function getPackageReplacementKeys() {}
        public function getValueFromComposerManifest($key = null) {}
        /**
         * Added by TYPO3 CMS
         *
         * The package caching serializes package objects.
         * The package manager instance may not be serialized
         * as a fresh instance is created upon every request.
         *
         * This method will be removed once the package is
         * released of the package manager dependency.
         *
         * @return array
         */
        public function __sleep() {}
        /**
         * Added by TYPO3 CMS
         *
         * The package caching deserializes package objects.
         * A fresh package manager instance has to be set
         * during bootstrapping.
         *
         * This method will be removed once the package is
         * released of the package manager dependency.
         */
        public function __wakeup() {}
    }

    /**
     * The default TYPO3 Package MetaData implementation
     * Adapted from FLOW for TYPO3 CMS
     */
    class MetaData {
        const CONSTRAINT_TYPE_SUGGESTS = 'suggests';
        const CONSTRAINT_TYPE_CONFLICTS = 'conflicts';
        const CONSTRAINT_TYPE_DEPENDS = 'depends';

        /**
         * @var array
         */
        static protected $CONSTRAINT_TYPES;
        /**
         * @var string
         */
        protected $packageKey;
        /**
         * Package type
         *
         * @var string
         */
        protected $packageType;
        /**
         * The version number
         * @var string
         */
        protected $version;
        /**
         * Package title
         * @var string
         */
        protected $title;
        /**
         * Package description
         * @var string
         */
        protected $description;
        /**
         * constraints by constraint type (depends, conflicts, suggests)
         * @var array
         */
        protected $constraints;

        /**
         * Get all available constraint types
         *
         * @return array All constraint types
         */
        public function getConstraintTypes() {}
        public function __construct($packageKey) {}
        /**
         * @return string The package key
         */
        public function getPackageKey() {}
        /**
         * Get package type
         *
         * @return string
         */
        public function getPackageType() {}
        public function setPackageType($packageType) {}
        /**
         * @return string The package version
         */
        public function getVersion() {}
        public function setVersion($version) {}
        /**
         * @return string The package description
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Get all constraints
         *
         * @return array Package constraints
         */
        public function getConstraints() {}
        public function getConstraintsByType($constraintType) {}
        public function addConstraint(MetaData\PackageConstraint $constraint) {}
    }

    /**
     * The default TYPO3 Package Manager
     * Adapted from FLOW for TYPO3 CMS
     */
    class PackageManager implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Core\Package\DependencyResolver
         */
        protected $dependencyResolver;
        /**
         * @var FrontendInterface
         */
        protected $coreCache;
        /**
         * @var string
         */
        protected $cacheIdentifier;
        /**
         * @var array
         */
        protected $packagesBasePaths;
        /**
         * @var array
         */
        protected $packageAliasMap;
        /**
         * @var array
         */
        protected $runtimeActivatedPackages;
        /**
         * Absolute path leading to the various package directories
         * @var string
         */
        protected $packagesBasePath;
        /**
         * Array of available packages, indexed by package key
         * @var PackageInterface[]
         */
        protected $packages;
        /**
         * @var bool
         */
        protected $availablePackagesScanned;
        /**
         * A map between ComposerName and PackageKey, only available when scanAvailablePackages is run
         * @var array
         */
        protected $composerNameToPackageKeyMap;
        /**
         * List of active packages as package key => package object
         * @var array
         */
        protected $activePackages;
        /**
         * @var string
         */
        protected $packageStatesPathAndFilename;
        /**
         * Package states configuration as stored in the PackageStates.php file
         * @var array
         */
        protected $packageStatesConfiguration;

        /**
         * Constructor
         */
        public function __construct() {}
        public function injectCoreCache(FrontendInterface $coreCache) {}
        public function injectDependencyResolver(DependencyResolver $dependencyResolver) {}
        /**
         * Initializes the package manager
         */
        public function initialize() {}
        /**
         * @return string
         */
        protected function getCacheIdentifier() {}
        /**
         * @return string
         */
        protected function getCacheEntryIdentifier() {}
        /**
         * Saves the current state of all relevant information to the TYPO3 Core Cache
         */
        protected function saveToPackageCache() {}
        /**
         * Attempts to load the package manager states from cache
         *
         * @throws Exception\PackageManagerCacheUnavailableException
         */
        protected function loadPackageManagerStatesFromCache() {}
        /**
         * Loads the states of available packages from the PackageStates.php file.
         * The result is stored in $this->packageStatesConfiguration.
         *
         * @throws Exception\PackageStatesUnavailableException
         */
        protected function loadPackageStates() {}
        /**
         * Initializes activePackages property
         *
         * Saves PackageStates.php if list of required extensions has changed.
         */
        protected function initializePackageObjects() {}
        protected function registerActivePackage(PackageInterface $package) {}
        /**
         * Initializes a backwards compatibility $GLOBALS['TYPO3_LOADED_EXT'] array
         */
        protected function initializeCompatibilityLoadedExtArray() {}
        /**
         * Scans all directories in the packages directories for available packages.
         * For each package a Package object is created and stored in $this->packages.
         */
        public function scanAvailablePackages() {}
        protected function registerPackageDuringRuntime($packageKey) {}
        /**
         * Fetches all directories from sysext/global/local locations and checks if the extension contains an ext_emconf.php
         *
         * @return array
         */
        protected function scanPackagePathsForExtensions() {}
        protected function registerPackagesFromConfiguration(array $packages, $registerOnlyNewPackages = false, $packageStatesHasChanged = false) {}
        public function registerPackage(PackageInterface $package) {}
        protected function unregisterPackageByPackageKey($packageKey) {}
        public function getPackageKeyFromComposerName($composerName) {}
        public function getPackage($packageKey) {}
        public function isPackageAvailable($packageKey) {}
        public function isPackageActive($packageKey) {}
        public function deactivatePackage($packageKey) {}
        public function activatePackage($packageKey) {}
        public function activatePackageDuringRuntime($packageKey) {}
        protected function registerTransientClassLoadingInformationForPackage(PackageInterface $package) {}
        public function deletePackage($packageKey) {}
        /**
         * Returns an array of \TYPO3\CMS\Core\Package objects of all active packages.
         * A package is active, if it is available and has been activated in the package
         * manager settings. This method returns runtime activated packages too
         *
         * @return PackageInterface[]
         * @api
         */
        public function getActivePackages() {}
        /**
         * Orders all active packages by comparing their dependencies. By this, the packages
         * and package configurations arrays holds all packages in the correct
         * initialization order.
         *
         * @return array
         */
        protected function sortActivePackagesByDependencies() {}
        protected function resolvePackageDependencies($packageConfig) {}
        protected function getSuggestionArrayForPackage($packageKey) {}
        /**
         * Saves the current content of $this->packageStatesConfiguration to the
         * PackageStates.php file.
         *
         * @throws Exception\PackageStatesFileNotWritableException
         */
        protected function sortAndSavePackageStates() {}
        public function isPackageKeyValid($packageKey) {}
        /**
         * Returns an array of \TYPO3\CMS\Core\Package objects of all available packages.
         * A package is available, if the package directory contains valid meta information.
         *
         * @return PackageInterface[] Array of PackageInterface
         * @api
         */
        public function getAvailablePackages() {}
        public function unregisterPackage(PackageInterface $package) {}
/** @var PackageInterface $package */
        public function reloadPackageInformation(/** @var PackageInterface $package */
$packageKey) {}
        public function getComposerManifest($manifestPath) {}
        protected function getExtensionEmConf($packagePath) {}
        protected function mapExtensionManagerConfigurationToComposerManifest($packageKey, array $extensionManagerConfiguration, \stdClass $composerManifest) {}
        protected function setComposerManifestValueIfEmpty(\stdClass $manifest, $property, $value) {}
        protected function getDependencyArrayForPackage($packageKey, array $dependentPackageKeys = [ ], array $trace = [ ]) {}
        protected function getPackageKeyFromManifest($manifest, $packagePath) {}
        /**
         * The order of paths is crucial for allowing overriding of system extension by local extensions.
         * Pay attention if you change order of the paths here.
         *
         * @return array
         */
        protected function getPackageBasePaths() {}
    }

    /**
     * This is an intermediate package manager that loads
     * all extensions that are present in one of the package base paths,
     * so that the class loader can find the classes of all tests,
     * whether the according extension is active in the installation itself or not.
     */
    class UnitTestPackageManager extends \typo3\cms\core\package\packagemanager {
        /**
         * Initializes the package manager
         */
        public function initialize() {}
        /**
         * Overwrite the original method to avoid resolving dependencies (which we do not need)
         * and saving the PackageStates.php file (which we do not want), when calling scanAvailablePackages()
         */
        protected function sortAndSavePackageStates() {}
    }

    /**
     * This is an intermediate package manager that loads just
     * the required extensions for the install in case the package
     * states are unavailable.
     */
    class FailsafePackageManager extends \typo3\cms\core\package\packagemanager {
        /**
         * @var bool TRUE if package manager is in failsafe mode
         */
        protected $inFailsafeMode;

        /**
         * Loads the states of available packages from the PackageStates.php file.
         * The result is stored in $this->packageStatesConfiguration.
         */
        protected function loadPackageStates() {}
        /**
         * Sort and save states
         */
        protected function sortAndSavePackageStates() {}
        /**
         * To enable writing of the package states file the package states
         * migration needs to override eventual failsafe blocks.
         */
        public function forceSortAndSavePackageStates() {}
    }

    /**
     * A package exception
     */
    class Exception extends \typo3\cms\core\exception {}


    /**
     * Interface for a TYPO3 Package class
     * Adapted from FLOW for TYPO3 CMS
     */
    interface PackageInterface {
    const PATTERN_MATCH_EXTENSIONKEY = '/^[0-9a-z_-]+$/i';
    const PATTERN_MATCH_PACKAGEKEY = '/^[a-z0-9]+\.(?:[a-z0-9][\.a-z0-9]*)+$/i';
        /**
         * @return array
         */
        function getPackageReplacementKeys() ;
        /**
         * Tells if the package is part of the default factory configuration
         * and therefor activated at first installation.
         *
         * @return bool
         */
        function isPartOfFactoryDefault() ;
        /**
         * Tells if the package is required for a minimal usable (backend) system
         * and therefor activated if PackageStates is created from scratch for
         * whatever reason.
         *
         * @return bool
         */
        function isPartOfMinimalUsableSystem() ;
        function getValueFromComposerManifest($key = null) ;
        /**
         * Returns the package meta object of this package.
         *
         * @return MetaData
         */
        function getPackageMetaData() ;
        /**
         * Returns the package key of this package.
         *
         * @return string
         * @api
         */
        function getPackageKey() ;
        /**
         * Tells if this package is protected and therefore cannot be deactivated or deleted
         *
         * @return bool
         * @api
         */
        function isProtected() ;
        function setProtected($protected) ;
        /**
         * Returns the full path to this package's main directory
         *
         * @return string Path to this package's main directory
         * @api
         */
        function getPackagePath() ;
    }

}

namespace TYPO3\CMS\Core\Package\Exception {
    /**
     * "Invalid Package Path" Exception
     * Adapted from FLOW for TYPO3 CMS
     */
    class InvalidPackagePathException extends \typo3\cms\core\package\exception {}

    /**
     * A package unavailable exception
     */
    class PackageStatesUnavailableException extends \typo3\cms\core\package\exception {}

    /**
     * "Package states file not writable" Exception
     * Adapted from FLOW for TYPO3 CMS
     */
    class PackageStatesFileNotWritableException extends \typo3\cms\core\package\exception {}

    /**
     * An "Invalid Package Manifest" exception
     * Adapted from FLOW for TYPO3 CMS
     */
    class InvalidPackageManifestException extends \typo3\cms\core\package\exception {}

    /**
     * An "Invalid Package State" exception
     * Adapted from FLOW for TYPO3 CMS
     */
    class InvalidPackageStateException extends \typo3\cms\core\package\exception {}

    /**
     * A "Protected Package Key" exception
     * Adapted from FLOW for TYPO3 CMS
     */
    class ProtectedPackageKeyException extends \typo3\cms\core\package\exception {}

    /**
     * A package cache unavailable exception
     */
    class PackageManagerCacheUnavailableException extends \typo3\cms\core\package\exception {}

    /**
     * An "Invalid Package Key" exception
     * Adapted from FLOW for TYPO3 CMS
     */
    class InvalidPackageKeyException extends \typo3\cms\core\package\exception {}

    /**
     * An "Invalid Package Key" exception
     * Adapted from FLOW for TYPO3 CMS
     */
    class MissingPackageManifestException extends \typo3\cms\core\package\exception {}

    /**
     * "Unknown Package" Exception
     * Adapted from FLOW for TYPO3 CMS
     */
    class UnknownPackageException extends \typo3\cms\core\package\exception {}

}

namespace TYPO3\CMS\Core\Package\MetaData {
    /**
     * Package constraint meta model
     * Adapted from FLOW for TYPO3 CMS
     */
    class PackageConstraint {
        /**
         * One of depends, conflicts or suggests
         * @var string
         */
        protected $constraintType;
        /**
         * The constraint name or value
         * @var string
         */
        protected $value;
        /**
         * Minimum version for the constraint
         * @var string
         */
        protected $minVersion;
        /**
         * Maximum version for the constraint
         * @var string
         */
        protected $maxVersion;

        public function __construct($constraintType, $value, $minVersion = null, $maxVersion = null) {}
        /**
         * @return string The constraint name or value
         */
        public function getValue() {}
        /**
         * @return string The constraint type (depends, conflicts, suggests)
         */
        public function getConstraintType() {}
    }

}

namespace TYPO3\CMS\Core\Localization {
    /**
     * Contains the TYPO3 Backend Language class
     * For detailed information about how localization is handled,
     * please refer to the 'Inside TYPO3' document which describes this.
     * This class is normally instantiated as the global variable $GLOBALS['LANG']
     * It's only available in the backend and under certain circumstances in the frontend
     * @see \TYPO3\CMS\Backend\Template\DocumentTemplate
     */
    class LanguageService {
        /**
         * This is set to the language that is currently running for the user
         *
         * @var string
         */
        public $lang;
        /**
         * If TRUE, will show the key/location of labels in the backend.
         *
         * @var bool
         */
        public $debugKey;
        /**
         * Internal cache for read LL-files
         *
         * @var array
         */
        public $LL_files_cache;
        /**
         * Internal cache for ll-labels (filled as labels are requested)
         *
         * @var array
         */
        public $LL_labels_cache;
        /**
         * List of language dependencies for actual language. This is used for local variants of a language
         * that depend on their "main" language, like Brazilian Portuguese or Canadian French.
         *
         * @var array
         */
        protected $languageDependencies;
        /**
         * An internal cache for storing loaded files, see readLLfile()
         *
         * @var array
         */
        protected $languageFileCache;

        /**
         * LanguageService constructor.
         */
        public function __construct() {}
/** @var $locales \TYPO3\CMS\Core\Localization\Locales */
        public function init(/** @var $locales \TYPO3\CMS\Core\Localization\Locales */
$languageKey) {}
        public function debugLL($value) {}
        public function getLL($index) {}
        public function getLLL($index, $localLanguage) {}
        public function sL($input) {}
        public function loadSingleTableDescription($table) {}
        public function includeLLFile($fileRef, $setGlobal = true, $mergeLocalOntoDefault = false) {}
/** @var $languageFactory LocalizationFactory */
        protected function readLLfile(/** @var $languageFactory LocalizationFactory */
$fileRef) {}
        public function getLabelsWithPrefix($prefix, $strip = '') {}
    }

    /**
     * Provides a language parser factory.
     */
    class LocalizationFactory implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected $cacheInstance;
        /**
         * @var \TYPO3\CMS\Core\Localization\LanguageStore
         */
        public $store;

        /**
         * Class constructor
         */
        public function __construct() {}
        /**
         * Initialize cache instance to be ready to use
         */
        protected function initializeCache() {}
/** @var $parser \TYPO3\CMS\Core\Localization\Parser\LocalizationParserInterface */
        public function getParsedData(/** @var $parser \TYPO3\CMS\Core\Localization\Parser\LocalizationParserInterface */
$fileReference, /** @var $parser \TYPO3\CMS\Core\Localization\Parser\LocalizationParserInterface */
$languageKey, /** @var $parser \TYPO3\CMS\Core\Localization\Parser\LocalizationParserInterface */
$charset = '', /** @var $parser \TYPO3\CMS\Core\Localization\Parser\LocalizationParserInterface */
$errorMode = null, /** @var $parser \TYPO3\CMS\Core\Localization\Parser\LocalizationParserInterface */
$isLocalizationOverride = false) {}
        protected function localizationOverride($fileReference, $languageKey, array $LOCAL_LANG) {}
    }

    /**
     * Locales.
     *
     * Used to define backend system languages
     * When adding new keys, remember to:
     * - Update 'setup' extension labels (sysext/setup/Resources/Private/Language/locallang.xlf)
     * That's it!
     */
    class Locales implements \typo3\cms\core\singletoninterface {
        /**
         * Supported TYPO3 languages with locales
         *
         * @var array
         */
        protected $languages;
        /**
         * Reversed mapping with codes used by TYPO3 4.5 and below
         *
         * @var array
         */
        protected $isoReverseMapping;
        /**
         * Mapping with codes used by TYPO3 4.5 and below
         *
         * @var array
         */
        protected $isoMapping;
        /**
         * Dependencies for locales
         *
         * @var array
         */
        protected $localeDependencies;

        /**
         * Initializes the languages.
         */
        public static function initialize() {}
        /**
         * Returns the locales.
         *
         * @return array
         */
        public function getLocales() {}
        /**
         * Returns the supported languages indexed by their corresponding locale.
         *
         * @return array
         */
        public function getLanguages() {}
        /**
         * Returns the mapping between TYPO3 (old) language codes and ISO codes.
         *
         * @return array
         */
        public function getIsoMapping() {}
        public function getLocaleDependencies($locale) {}
        public function getPreferredClientLanguage($languageCodesList) {}
    }

    /**
     * Language store.
     */
    class LanguageStore implements \typo3\cms\core\singletoninterface {
        /**
         * File extension supported by the localization parser
         *
         * @var array
         */
        protected $supportedExtensions;
        /**
         * Information about parsed file
         *
         * If data come from the cache, this array does not contain
         * any information about this file
         *
         * @var array
         */
        protected $configuration;
        /**
         * Parsed localization file
         *
         * @var array
         */
        protected $data;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initializes the current class.
         */
        public function initialize() {}
        public function hasData($fileReference, $languageKey) {}
        public function getData($fileReference) {}
        public function getDataByLanguage($fileReference, $languageKey) {}
        public function setData($fileReference, $languageKey, $data) {}
        public function flushData($fileReference) {}
        public function setConfiguration($fileReference, $languageKey) {}
        public function getFileReferenceWithoutExtension($fileReference) {}
        public function getParserInstance($fileReference) {}
        public function getAbsoluteFileReference($fileReference) {}
        /**
         * Get supported extensions
         *
         * @return array
         */
        public function getSupportedExtensions() {}
    }

}

namespace TYPO3\CMS\Core\Localization\Parser {
    /**
     * Parser for XLIFF file.
     */
    class XliffParser extends \typo3\cms\core\localization\parser\abstractxmlparser {
/** @var \SimpleXMLElement $translationPluralForm */
        protected function doParsingFromRoot(/** @var \SimpleXMLElement $translationPluralForm */
\SimpleXMLElement $root) {}
    }

    /**
     * Abstract class for XML based parser.
     */
    abstract class AbstractXmlParser implements \typo3\cms\core\localization\parser\localizationparserinterface {
        /**
         * @var string
         */
        protected $sourcePath;
        /**
         * @var string
         */
        protected $languageKey;

        public function getParsedData($sourcePath, $languageKey) {}
        /**
         * Loads the current XML file before processing.
         *
         * @return array An array representing parsed XML file (structure depends on concrete parser)
         * @throws \TYPO3\CMS\Core\Localization\Exception\InvalidXmlFileException
         */
        protected function parseXmlFile() {}
        protected function getLocalizedFileName($fileRef, $language, $sameLocation = false) {}
        abstract protected function doParsingFromRoot(\SimpleXMLElement $root) ;
    }

    /**
     * Parser for XML locallang file.
     */
    class LocallangXmlParser extends \typo3\cms\core\localization\parser\abstractxmlparser {
        /**
         * Associative array of "filename => parsed data" pairs.
         *
         * @var array
         */
        protected $parsedTargetFiles;

        public function getParsedData($sourcePath, $languageKey) {}
        protected function doParsingFromRootForElement(\SimpleXMLElement $root, $element) {}
/** @var \SimpleXMLElement $translationElement */
        protected function getParsedDataForElement(/** @var \SimpleXMLElement $translationElement */
\SimpleXMLElement $bodyOfFileTag, /** @var \SimpleXMLElement $translationElement */
$element) {}
        protected function doParsingFromRoot(\SimpleXMLElement $root) {}
        protected function doParsingTargetFromRoot(\SimpleXMLElement $root) {}
        public function getParsedTargetData($path) {}
        protected function parseXmlTargetFile($targetPath) {}
    }


    /**
     * Parser interface.
     */
    interface LocalizationParserInterface {
        function getParsedData($sourcePath, $languageKey) ;
    }

}

namespace TYPO3\CMS\Core\Localization\Exception {
    /**
     * Invalid Parser exception
     */
    class InvalidParserException extends \runtimeexception {}

    /**
     * File not found exception
     */
    class FileNotFoundException extends \runtimeexception {}

    /**
     * Invalid XML file exception
     */
    class InvalidXmlFileException extends \runtimeexception {}

}

namespace TYPO3\CMS\Core\Console {
    define('TYPO3_MODE', 'BE');

    /**
     * Exception thrown when a command is registered with a name
     * that is already taken
     */
    class CommandNameAlreadyInUseException extends \typo3\cms\core\exception {}

    /**
     * Entry point for the TYPO3 Command Line for Commands
     * Does not run the RequestHandler as this already runs an Application inside an Application which
     * is just way too much logic around simple CLI calls
     */
    class CommandApplication implements \typo3\cms\core\core\applicationinterface {
        /**
         * @var Bootstrap
         */
        protected $bootstrap;
        /**
         * Number of subdirectories where the entry script is located, relative to PATH_site
         * @var int
         */
        protected $entryPointLevel;
        /**
         * All available request handlers that can deal with a CLI Request
         * @var array
         */
        protected $availableRequestHandlers;

        public function __construct($classLoader) {}
        public function run(callable $execute = null) {}
        /**
         * Define constants and variables
         */
        protected function defineLegacyConstants() {}
        /**
         * Check the script is called from a cli environment.
         */
        protected function checkEnvironmentOrDie() {}
    }

    /**
     * Command Line Interface Request Handler dealing with registered commands.
     */
    class CommandRequestHandler implements \typo3\cms\core\console\requesthandlerinterface {
        /**
         * Instance of the current TYPO3 bootstrap
         * @var Bootstrap
         */
        protected $bootstrap;
        /**
         * Instance of the symfony application
         * @var Application
         */
        protected $application;

        public function __construct(Bootstrap $bootstrap) {}
        public function handleRequest(InputInterface $input) {}
        public function canHandleRequest(InputInterface $input) {}
        /**
         * Returns the priority - how eager the handler is to actually handle the request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() {}
        /** @var Command $command */
        protected function populateAvailableCommands() {}
    }

    /**
     * Exception thrown when an unregistered command is asked for
     */
    class UnknownCommandException extends \typo3\cms\core\exception {}

    /**
     * Registry for Symfony commands, populated from extensions
     */
    class CommandRegistry implements \typo3\cms\core\singletoninterface, \iteratoraggregate {
        /**
         * @var PackageManager
         */
        protected $packageManager;
        /**
         * Map of commands
         *
         * @var Command[]
         */
        protected $commands;

        public function __construct(PackageManager $packageManager = null) {}
        /**
         * @return \Generator
         */
        public function getIterator() : \Generator {}
        public function getCommandByIdentifier(string $identifier) : Command {}
        /**
         * Find all Configuration/Commands.php files of extensions and create a registry from it.
         * The file should return an array with a command key as key and the command description
         * as value. The command description must be an array and have a class key that defines
         * the class name of the command. Example:
         *
         * <?php
         * return [
         *     'backend:lock' => [
         *         'class' => \TYPO3\CMS\Backend\Command\LockBackendCommand::class
         *     ],
         * ];
         *
         * @throws CommandNameAlreadyInUseException
         */
        protected function populateCommandsFromPackages() {}
    }


    /**
     * The interface for a request handler for a console-based application
     *
     * @api
     */
    interface RequestHandlerInterface {
        function handleRequest(InputInterface $input) ;
        function canHandleRequest(InputInterface $input) ;
        /**
         * Returns the priority - how eager the handler is to actually handle the
         * request. An integer > 0 means "I want to handle this request" where
         * "100" is default. "0" means "I am a fallback solution".
         *
         * @return int The priority of the request handler
         * @api
         */
        function getPriority() ;
    }

}

namespace TYPO3\CMS\Core\Utility {
    /**
     * Class with helper functions for CSV handling
     */
    class CsvUtility {
        public static function csvToArray($input, $fieldDelimiter = ',', $fieldEnclosure = '"', $maximumColumns = 0) {}
        public static function csvValues(array $row, $delim = ',', $quote = '"') {}
    }

    /**
     * Class to handle system commands.
     * finds executables (programs) on Unix and Windows without knowing where they are
     *
     * returns exec command for a program
     * or FALSE
     *
     * This class is meant to be used without instance:
     * $cmd = CommandUtility::getCommand ('awstats','perl');
     *
     * The data of this class is cached.
     * That means if a program is found once it don't have to be searched again.
     *
     * user functions:
     *
     * addPaths() could be used to extend the search paths
     * getCommand() get a command string
     * checkCommand() returns TRUE if a command is available
     *
     * Search paths that are included:
     * $TYPO3_CONF_VARS['GFX']['processor_path_lzw'] or $TYPO3_CONF_VARS['GFX']['processor_path']
     * $TYPO3_CONF_VARS['SYS']['binPath']
     * $GLOBALS['_SERVER']['PATH']
     * '/usr/bin/,/usr/local/bin/' on Unix
     *
     * binaries can be preconfigured with
     * $TYPO3_CONF_VARS['SYS']['binSetup']
     */
    class CommandUtility {
        /**
         * Tells if object is already initialized
         *
         * @var bool
         */
        static protected $initialized;
        /**
         * Contains application list. This is an array with the following structure:
         * - app => file name to the application (like 'tar' or 'bzip2')
         * - path => full path to the application without application name (like '/usr/bin/' for '/usr/bin/tar')
         * - valid => TRUE or FALSE
         * Array key is identical to 'app'.
         *
         * @var array
         */
        static protected $applications;
        /**
         * Paths where to search for applications
         *
         * @var array
         */
        static protected $paths;

        public static function exec($command, $output = null, $returnValue = 0) {}
        public static function imageMagickCommand($command, $parameters, $path = '') {}
        public static function checkCommand($cmd, $handler = '') {}
        public static function getCommand($cmd, $handler = '', $handlerOpt = '') {}
        public static function addPaths($paths) {}
        public static function getPaths($addInvalid = false) {}
        /**
         * Initializes this class
         *
         * @return bool
         */
        protected static function init() {}
        protected static function initPaths($paths = '') {}
        /**
         * Processes and returns the paths from $GLOBALS['TYPO3_CONF_VARS']['SYS']['binSetup']
         *
         * @return array Array of commands and path
         */
        protected static function getConfiguredApps() {}
        /**
         * Sets the search paths from different sources, internal
         *
         * @return array Array of absolute paths (keys and values are equal)
         */
        protected static function getPathsInternal() {}
        protected static function fixPath($path) {}
        public static function escapeShellArguments(array $input) {}
        public static function escapeShellArgument($input) {}
    }

    /**
     * Several functions related to naming and conversions of names
     * such as translation between Repository and Model names or
     * exploding an objectControllerName into pieces
     *
     * @api
     */
    class ClassNamingUtility {
        public static function translateModelNameToRepositoryName($modelName) {}
        public static function translateModelNameToValidatorName($modelName) {}
        public static function translateRepositoryNameToModelName($repositoryName) {}
        public static function explodeObjectControllerName($controllerObjectName) {}
    }

    /**
     * The legendary "t3lib_div" class - Miscellaneous functions for general purpose.
     * Most of the functions do not relate specifically to TYPO3
     * However a section of functions requires certain TYPO3 features available
     * See comments in the source.
     * You are encouraged to use this library in your own scripts!
     *
     * USE:
     * The class is intended to be used without creating an instance of it.
     * So: Don't instantiate - call functions with "\TYPO3\CMS\Core\Utility\GeneralUtility::" prefixed the function name.
     * So use \TYPO3\CMS\Core\Utility\GeneralUtility::[method-name] to refer to the functions, eg. '\TYPO3\CMS\Core\Utility\GeneralUtility::milliseconds()'
     */
    class GeneralUtility {
        const SYSLOG_SEVERITY_FATAL = 4;
        const SYSLOG_SEVERITY_ERROR = 3;
        const ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME = 'SERVER_NAME';
        const ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL = '.*';
        const SYSLOG_SEVERITY_INFO = 0;
        const SYSLOG_SEVERITY_WARNING = 2;
        const SYSLOG_SEVERITY_NOTICE = 1;

        /**
         * State of host header value security check
         * in order to avoid unnecessary multiple checks during one request
         *
         * @var bool
         */
        static protected $allowHostHeaderValue;
        /**
         * Singleton instances returned by makeInstance, using the class names as
         * array keys
         *
         * @var array<\TYPO3\CMS\Core\SingletonInterface>
         */
        static protected $singletonInstances;
        /**
         * Instances returned by makeInstance, using the class names as array keys
         *
         * @var array<array><object>
         */
        static protected $nonSingletonInstances;
        /**
         * Cache for makeInstance with given class name and final class names to reduce number of self::getClassName() calls
         *
         * @var array Given class name => final class name
         */
        static protected $finalClassNameCache;
        /**
         * The application context
         *
         * @var \TYPO3\CMS\Core\Core\ApplicationContext
         */
        static protected $applicationContext;
        /**
         * IDNA string cache
         *
         * @var array<string>
         */
        static protected $idnaStringCache;
        /**
         * IDNA converter
         *
         * @var \Mso\IdnaConvert\IdnaConvert
         */
        static protected $idnaConverter;
        /**
         * A list of supported CGI server APIs
         * NOTICE: This is a duplicate of the SAME array in SystemEnvironmentBuilder
         * @var array
         */
        static protected $supportedCgiServerApis;
        /**
         * @var array
         */
        static protected $indpEnvCache;

        public static function _GP($var) {}
        public static function _GPmerged($parameter) {}
        public static function _GET($var = null) {}
        public static function _POST($var = null) {}
        public static function _GETset($inputGet, $key = '') {}
        public static function fixed_lgd_cs($string, $chars, $appendString = '...') {}
        public static function cmpIP($baseIP, $list) {}
        public static function cmpIPv4($baseIP, $list) {}
        public static function cmpIPv6($baseIP, $list) {}
        public static function IPv6Hex2Bin($hex) {}
        public static function IPv6Bin2Hex($bin) {}
        public static function normalizeIPv6($address) {}
        public static function compressIPv6($address) {}
        public static function validIP($ip) {}
        public static function validIPv4($ip) {}
        public static function validIPv6($ip) {}
        public static function cmpFQDN($baseHost, $list) {}
        public static function isOnCurrentHost($url) {}
        public static function inList($list, $item) {}
        public static function rmFromList($element, $list) {}
        public static function expandList($list) {}
        public static function md5int($str) {}
        public static function shortMD5($input, $len = 10) {}
        public static function hmac($input, $additionalSecret = '') {}
        public static function uniqueList($in_list, $secondParameter = null) {}
        public static function split_fileref($fileNameWithPath) {}
        public static function dirname($path) {}
        public static function isFirstPartOfStr($str, $partStr) {}
        public static function formatSize($sizeInBytes, $labels = '', $base = 0) {}
        public static function splitCalc($string, $operators) {}
        public static function validEmail($email) {}
        public static function idnaEncode($value) {}
        public static function underscoredToUpperCamelCase($string) {}
        public static function underscoredToLowerCamelCase($string) {}
        public static function camelCaseToLowerCaseUnderscored($string) {}
        public static function isValidUrl($url) {}
        public static function intExplode($delimiter, $string, $removeEmptyValues = false, $limit = 0) {}
        public static function revExplode($delimiter, $string, $count = 0) {}
        public static function trimExplode($delim, $string, $removeEmptyValues = false, $limit = 0) {}
        public static function implodeArrayForUrl($name, array $theArray, $str = '', $skipBlank = false, $rawurlencodeParamName = false) {}
        public static function explodeUrl2Array($string, $multidim = false) {}
        public static function compileSelectedGetVarsFromArray($varList, array $getArray, $GPvarAlt = true) {}
        public static function removeDotsFromTS(array $ts) {}
        public static function get_tag_attributes($tag) {}
        public static function split_tag_attributes($tag) {}
        public static function implodeAttributes(array $arr, $xhtmlSafe = false, $dontOmitBlankAttribs = false) {}
        public static function wrapJS($string) {}
        public static function xml2tree($string, $depth = 999, $parserOptions = [ ]) {}
        public static function array2xml(array $array, $NSprefix = '', $level = 0, $docTag = 'phparray', $spaceInd = 0, array $options = [ ], array $stackData = [ ]) {}
        public static function xml2array($string, $NSprefix = '', $reportDocTag = false) {}
        protected static function xml2arrayProcess($string, $NSprefix = '', $reportDocTag = false) {}
        public static function xmlRecompileFromStructValArray(array $vals) {}
        public static function minifyJavaScript($script, $error = '') {}
/** @var RequestFactory $requestFactory */
        public static function getUrl(/** @var RequestFactory $requestFactory */
$url, /** @var RequestFactory $requestFactory */
$includeHeader = 0, /** @var RequestFactory $requestFactory */
$requestHeaders = null, /** @var RequestFactory $requestFactory */
$report = null) {}
        public static function writeFile($file, $content, $changePermissions = false) {}
        public static function fixPermissions($path, $recursive = false) {}
        public static function writeFileToTypo3tempDir($filepath, $content) {}
        public static function mkdir($newFolder) {}
        public static function mkdir_deep($directory, $deepDirectory = '') {}
        protected static function createDirectoryPath($fullDirectoryPath) {}
        public static function rmdir($path, $removeNonEmpty = false) {}
        public static function flushDirectory($directory, $keepOriginalDirectory = false, $flushOpcodeCache = false) {}
        public static function get_dirs($path) {}
        public static function getFilesInDir($path, $extensionList = '', $prependPath = false, $order = '', $excludePattern = '') {}
        public static function getAllFilesAndFoldersInPath(array $fileArr, $path, $extList = '', $regDirs = false, $recursivityLevels = 99, $excludePattern = '') {}
        public static function removePrefixPathFromList(array $fileArr, $prefixToRemove) {}
        public static function fixWindowsFilePath($theFile) {}
        public static function resolveBackPath($pathStr) {}
        public static function locationHeaderUrl($path) {}
        /**
         * Returns the maximum upload size for a file that is allowed. Measured in KB.
         * This might be handy to find out the real upload limit that is possible for this
         * TYPO3 installation.
         *
         * @return int The maximum size of uploads that are allowed (measured in kilobytes)
         */
        public static function getMaxUploadFileSize() {}
        public static function getBytesFromSizeMeasurement($measurement) {}
        public static function createVersionNumberedFilename($file) {}
        public static function linkThisScript(array $getParams = [ ]) {}
        public static function linkThisUrl($url, array $getParams = [ ]) {}
        public static function getIndpEnv($getEnvName) {}
        public static function isAllowedHostHeaderValue($hostHeaderValue) {}
        public static function hostHeaderValueMatchesTrustedHostsPattern($hostHeaderValue) {}
        /**
         * Allows internal requests to the install tool and from the command line.
         * We accept this risk to have the install tool always available.
         * Also CLI needs to be allowed as unfortunately AbstractUserAuthentication::getAuthInfoArray()
         * accesses HTTP_HOST without reason on CLI
         * Additionally, allows requests when no REQUESTTYPE is set, which can happen quite early in the
         * Bootstrap. See Application.php in EXT:backend/Classes/Http/.
         *
         * @return bool
         */
        protected static function isInternalRequestType() {}
        /**
         * Gets the unixtime as milliseconds.
         *
         * @return int The unixtime as milliseconds
         */
        public static function milliseconds() {}
        public static function clientInfo($useragent = '') {}
        public static function getHostname($requestHost = true) {}
        public static function getFileAbsFileName($filename) {}
        public static function validPathStr($theFile) {}
        public static function isAbsPath($path) {}
        public static function isAllowedAbsPath($path) {}
        public static function verifyFilenameAgainstDenyPattern($filename) {}
        public static function copyDirectory($source, $destination) {}
        public static function sanitizeLocalUrl($url = '') {}
        public static function upload_copy_move($source, $destination) {}
        public static function upload_to_tempfile($uploadedFileName) {}
        public static function unlink_tempfile($uploadedTempFileName) {}
        public static function tempnam($filePrefix, $fileSuffix = '') {}
        public static function stdAuthCode($uid_or_record, $fields = '', $codeLength = 8) {}
        public static function hideIfNotTranslated($l18n_cfg_fieldValue) {}
        public static function hideIfDefaultLanguage($localizationConfiguration) {}
        public static function llXmlAutoFileName($fileRef, $language, $sameLocation = false) {}
        public static function callUserFunction($funcName, $params, $ref) {}
        public static function getUserObj($className) {}
        public static function makeInstance($className, $constructorArguments) {}
        protected static function getClassName($className) {}
        protected static function getImplementationForClass($className) {}
        protected static function classHasImplementation($className) {}
        public static function setSingletonInstance($className, SingletonInterface $instance) {}
        public static function removeSingletonInstance($className, SingletonInterface $instance) {}
        public static function resetSingletonInstances(array $newSingletonInstances) {}
        /**
         * Get all currently registered singletons
         *
         * Warning:
         * This is NOT a public API method and must not be used in own extensions!
         * This method is usually only used in tests in setUp() to fetch the list of
         * currently registered singletons, if this list is manipulated with
         * setSingletonInstance() in tests.
         *
         * @internal
         * @return array $className => $object
         */
        public static function getSingletonInstances() {}
        public static function addInstance($className, $instance) {}
        protected static function checkInstanceClassName($className, $instance) {}
        /**
         * Purge all instances returned by makeInstance.
         *
         * This function is most useful when called from tearDown in a test case
         * to drop any instances that have been created by the tests.
         *
         * Warning: This is a helper method for unit tests. Do not call this directly in production code!
         *
         * @see makeInstance
         */
        public static function purgeInstances() {}
        /**
         * Flush internal runtime caches
         *
         * Used in unit tests only.
         *
         * @internal
         */
        public static function flushInternalRuntimeCaches() {}
        public static function makeInstanceService($serviceType, $serviceSubType = '', $excludeServiceKeys = [ ]) {}
        /**
         * Initialize the system log.
         *
         * @see sysLog()
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public static function initSysLog() {}
        public static function sysLog($msg, $extKey, $severity = 0) {}
        public static function devLog($msg, $extKey, $severity = 0, $dataVar = false) {}
        public static function deprecationLog($msg) {}
        public static function logDeprecatedViewHelperAttribute(string $property, RenderingContextInterface $renderingContext, string $additionalMessage = '') {}
        /**
         * Gets the absolute path to the deprecation log file.
         *
         * @return string Absolute path to the deprecation log file
         * @deprecated
         */
        public static function getDeprecationLogFileName() {}
        /**
         * Logs a call to a deprecated function.
         * The log message will be taken from the annotation.
         * @deprecated
         */
        public static function logDeprecatedFunction() {}
        public static function arrayToLogString(array $arr, $valueList = [ ], $valueLength = 20) {}
        public static function unQuoteFilenames($parameters, $unQuote = false) {}
        public static function quoteJSvalue($value) {}
        public static function presetApplicationContext(ApplicationContext $applicationContext) {}
        /**
         * Get the ApplicationContext
         *
         * @return \TYPO3\CMS\Core\Core\ApplicationContext
         */
        public static function getApplicationContext() {}
        /**
         * Check if the current request is running on a CGI server API
         * @return bool
         */
        public static function isRunningOnCgiServerApi() {}
        /**
         * @return LoggerInterface
         */
        protected static function getLogger() {}
        private static function writeDeprecationLogFileEntry($msg) {}
    }

    /**
     * Class to handle debug
     */
    class DebugUtility {
        /**
         * @var bool
         */
        static protected $plainTextOutput;
        /**
         * @var bool
         */
        static protected $ansiColorUsage;

        public static function debug($var = '', $header = '', $group = 'Debug') {}
        public static function convertVariableToString($variable) {}
        public static function debugInPopUpWindow($debugVariable, $header = 'Debug', $group = 'Debug') {}
        public static function debugTrail($prependFileNames = false) {}
        public static function debugRows($rows, $header = '') {}
        public static function ordinalValue($string, $characters = 100) {}
        public static function viewArray($array_in) {}
        public static function printArray($array_in) {}
        protected static function renderDump($variable, $title = '', $plainText = null, $ansiColors = null) {}
        /**
         * Checks some constants to determine if we are in CLI context
         *
         * @return bool
         */
        protected static function isCommandLine() {}
        public static function usePlainTextOutput($plainTextOutput) {}
        public static function useAnsiColor($ansiColorUsage) {}
    }

    /**
     * Class with helper functions for file paths.
     */
    class PathUtility {
        public static function getRelativePathTo($targetPath) {}
        public static function getAbsoluteWebPath($targetPath) {}
        public static function getRelativePath($sourcePath, $targetPath) {}
        public static function getCommonPrefix(array $paths) {}
        public static function sanitizeTrailingSeparator($path, $separator = '/') {}
        public static function basename($path) {}
        public static function dirname($path) {}
        public static function pathinfo($path, $options = null) {}
        public static function isAbsolutePath($path) {}
        public static function getAbsolutePathOfRelativeReferencedFileOrPath($baseFilenameOrPath, $includeFileName) {}
        public static function getCanonicalPath($path) {}
        public static function stripPathSitePrefix($path) {}
        /**
         * Wrapper method to be able to test windows path transformation on other systems
         *
         * @return bool
         */
        protected static function isWindows() {}
    }

    /**
     * This class has functions which generates a difference output of a content string
     */
    class DiffUtility {
        /**
         * If set, the HTML tags are stripped from the input strings first.
         *
         * @var bool
         */
        public $stripTags;

        public function makeDiffDisplay($str1, $str2) {}
    }

    /**
     * HTTP Utility class
     */
    class HttpUtility {
        const HTTP_STATUS_303 = 'HTTP/1.1 303 See Other';
        const HTTP_STATUS_302 = 'HTTP/1.1 302 Found';
        const HTTP_STATUS_305 = 'HTTP/1.1 305 Use Proxy';
        const HTTP_STATUS_304 = 'HTTP/1.1 304 Not Modified';
        const HTTP_STATUS_400 = 'HTTP/1.1 400 Bad Request';
        const HTTP_STATUS_307 = 'HTTP/1.1 307 Temporary Redirect';
        const HTTP_STATUS_402 = 'HTTP/1.1 402 Payment Required';
        const HTTP_STATUS_401 = 'HTTP/1.1 401 Unauthorized';
        const HTTP_STATUS_404 = 'HTTP/1.1 404 Not Found';
        const HTTP_STATUS_403 = 'HTTP/1.1 403 Forbidden';
        const HTTP_STATUS_406 = 'HTTP/1.1 406 Not Acceptable';
        const HTTP_STATUS_405 = 'HTTP/1.1 405 Method Not Allowed';
        const HTTP_STATUS_408 = 'HTTP/1.1 408 Request Timeout';
        const HTTP_STATUS_407 = 'HTTP/1.1 407 Proxy Authentication Required';
        const HTTP_STATUS_410 = 'HTTP/1.1 410 Gone';
        const HTTP_STATUS_409 = 'HTTP/1.1 409 Conflict';
        const HTTP_STATUS_100 = 'HTTP/1.1 100 Continue';
        const HTTP_STATUS_101 = 'HTTP/1.1 101 Switching Protocols';
        const HTTP_STATUS_200 = 'HTTP/1.1 200 OK';
        const HTTP_STATUS_201 = 'HTTP/1.1 201 Created';
        const HTTP_STATUS_202 = 'HTTP/1.1 202 Accepted';
        const HTTP_STATUS_203 = 'HTTP/1.1 203 Non-Authoritative Information';
        const HTTP_STATUS_204 = 'HTTP/1.1 204 No Content';
        const HTTP_STATUS_205 = 'HTTP/1.1 205 Reset Content';
        const HTTP_STATUS_206 = 'HTTP/1.1 206 Partial Content';
        const HTTP_STATUS_300 = 'HTTP/1.1 300 Multiple Choices';
        const HTTP_STATUS_301 = 'HTTP/1.1 301 Moved Permanently';
        const SCHEME_HTTPS = 2;
        const SCHEME_HTTP = 1;
        const HTTP_STATUS_505 = 'HTTP/1.1 505 Version Not Supported';
        const HTTP_STATUS_504 = 'HTTP/1.1 504 Gateway Timeout';
        const HTTP_STATUS_503 = 'HTTP/1.1 503 Service Unavailable';
        const HTTP_STATUS_502 = 'HTTP/1.1 502 Bad Gateway';
        const HTTP_STATUS_501 = 'HTTP/1.1 501 Not Implemented';
        const HTTP_STATUS_500 = 'HTTP/1.1 500 Internal Server Error';
        const HTTP_STATUS_417 = 'HTTP/1.1 417 Expectation Failed';
        const HTTP_STATUS_416 = 'HTTP/1.1 416 Requested Range Not Satisfiable';
        const HTTP_STATUS_415 = 'HTTP/1.1 415 Unsupported Media Type';
        const HTTP_STATUS_414 = 'HTTP/1.1 414 Request-URI Too Long';
        const HTTP_STATUS_413 = 'HTTP/1.1 413 Request Entity Too Large';
        const HTTP_STATUS_412 = 'HTTP/1.1 412 Precondition Failed';
        const HTTP_STATUS_411 = 'HTTP/1.1 411 Length Required';

        public static function redirect($url, $httpStatus = self::HTTP_STATUS_303) {}
        public static function setResponseCode($httpStatus = self::HTTP_STATUS_303) {}
        public static function setResponseCodeAndExit($httpStatus = self::HTTP_STATUS_303) {}
        public static function buildUrl(array $urlParts) {}
    }

    /**
     * Class to handle mail specific functionality
     */
    class MailUtility {
        /**
         * Gets a valid "from" for mail messages (email and name).
         *
         * Ready to be passed to $mail->setFrom()
         *
         * @return array key=Valid email address which can be used as sender, value=Valid name which can be used as a sender. NULL if no address is configured
         */
        public static function getSystemFrom() {}
        /**
         * Creates a valid "from" name for mail messages.
         *
         * As configured in Install Tool.
         *
         * @return string The name (unquoted, unformatted). NULL if none is set
         */
        public static function getSystemFromName() {}
        /**
         * Creates a valid email address for the sender of mail messages.
         *
         * Uses a fallback chain:
         * $TYPO3_CONF_VARS['MAIL']['defaultMailFromAddress'] ->
         * no-reply@FirstDomainRecordFound ->
         * no-reply@php_uname('n') ->
         * no-reply@example.com
         *
         * Ready to be passed to $mail->setFrom()
         *
         * @return string An email address
         */
        public static function getSystemFromAddress() {}
        public static function breakLinesForEmail($str, $newlineChar = LF, $lineWidth = 76) {}
/** @var $addressParser \TYPO3\CMS\Core\Mail\Rfc822AddressesParser */
        public static function parseAddresses(/** @var $addressParser \TYPO3\CMS\Core\Mail\Rfc822AddressesParser */
$rawAddresses) {}
    }

    /**
     * Utility class for the File Abstraction Layer (aka subpackage Resource in EXT:core)
     */
    class ResourceUtility {
        public static function recursiveFileListSortingHelper($elementA, $elementB) {}
        public static function nameCompareSortingHelper($elementA, $elementB) {}
    }

    /**
     * A utility resolving and Caching the Rootline generation
     */
    class RootlineUtility {
        /**
         * @var int
         */
        protected $pageUid;
        /**
         * @var string
         */
        protected $mountPointParameter;
        /**
         * @var array
         */
        protected $parsedMountPointParameters;
        /**
         * @var int
         */
        protected $languageUid;
        /**
         * @var int
         */
        protected $workspaceUid;
        /**
         * @var bool
         */
        protected $versionPreview;
        /**
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        static protected $cache;
        /**
         * @var array
         */
        static protected $localCache;
        /**
         * Fields to fetch when populating rootline data
         *
         * @var array
         */
        static protected $rootlineFields;
        /**
         * Rootline Context
         *
         * @var \TYPO3\CMS\Frontend\Page\PageRepository
         */
        protected $pageContext;
        /**
         * @var string
         */
        protected $cacheIdentifier;
        /**
         * @var array
         */
        static protected $pageRecordCache;

        public function __construct($uid, $mountPointParameter = '', PageRepository $context = null) {}
        /**
         * Initialize a state to work with
         *
         * @throws \RuntimeException
         */
        protected function initializeObject() {}
        /**
         * Purges all rootline caches.
         *
         * Note: This function is intended to be used in unit tests only.
         */
        public static function purgeCaches() {}
        public function getCacheIdentifier($otherUid = null) {}
        /**
         * Returns the actual rootline
         *
         * @return array
         */
        public function get() {}
        protected function getRecordArray($uid) {}
/** @var $loadDBGroup \TYPO3\CMS\Core\Database\RelationHandler */
        protected function enrichWithRelationFields(/** @var $loadDBGroup \TYPO3\CMS\Core\Database\RelationHandler */
$uid, /** @var $loadDBGroup \TYPO3\CMS\Core\Database\RelationHandler */
array $pageRecord) {}
        protected function columnHasRelationToResolve(array $configuration) {}
        /** @var $rootline \TYPO3\CMS\Core\Utility\RootlineUtility */
        protected function generateRootlineCache() {}
        /**
         * Checks whether the current Page is a Mounted Page
         * (according to the MP-URL-Parameter)
         *
         * @return bool
         */
        public function isMountedPage() {}
        protected function processMountedPage(array $mountedPageData, array $mountPointPageData) {}
        /**
         * Parse the MountPoint Parameters
         * Splits the MP-Param via "," for several nested mountpoints
         * and afterwords registers the mountpoint configurations
         */
        protected function parseMountPointParameter() {}
    }

    /**
     * Class with helper functions for array handling
     */
    class ArrayUtility {
        public static function assertAllArrayKeysAreValid(array $arrayToTest, array $allowedArrayKeys) {}
        public static function convertBooleanStringsToBooleanRecursive(array $array) : array {}
        public static function filterByValueRecursive($needle = '', array $haystack = [ ]) {}
        public static function isValidPath(array $array, $path, $delimiter = '/') {}
        public static function getValueByPath(array $array, $path, $delimiter = '/') {}
        public static function reIndexNumericArrayKeysRecursive(array $array) : array {}
        public static function removeNullValuesRecursive(array $array) : array {}
        public static function setValueByPath(array $array, $path, $value, $delimiter = '/') {}
        public static function removeByPath(array $array, $path, $delimiter = '/') {}
        public static function sortByKeyRecursive(array $array) {}
        public static function sortArraysByKey(array $arrays, $key, $ascending = true) {}
        public static function arrayExport(array $array = [ ], $level = 0) {}
        public static function flatten(array $array, $prefix = '') {}
        public static function intersectRecursive(array $source, array $mask = [ ]) {}
        public static function renumberKeysToAvoidLeapsIfKeysAreAllNumeric(array $array = [ ], $level = 0) {}
        public static function mergeRecursiveWithOverrule(array $original, array $overrule, $addKeys = true, $includeEmptyValues = true, $enableUnsetFeature = true) {}
        public static function removeArrayEntryByValue(array $array, $cmpValue) {}
        public static function keepItemsInArray(array $array, $keepItems, $getValueFunc = null) {}
        public static function remapArrayKeys(array $array, array $mappingTable) {}
        public static function arrayDiffAssocRecursive(array $array1, array $array2) {}
        public static function naturalKeySortRecursive(array $array) {}
        public static function filterAndSortByNumericKeys($setupArr, $acceptAnyKeys = false) {}
        public static function sortArrayWithIntegerKeys(array $array) {}
        public static function sortArrayWithIntegerKeysRecursive(array $array) : array {}
        public static function stripTagsFromValuesRecursive(array $array) : array {}
    }

    /**
     * Class to handle and determine browser specific information.
     */
    class ClientUtility {
        public static function getBrowserInfo($userAgent) {}
        public static function getVersion($version) {}
    }

    /**
     * Class with helper functions for version number handling
     */
    class VersionNumberUtility {
        public static function convertVersionNumberToInteger($versionNumber) {}
        public static function convertIntegerToVersionNumber($versionInteger) {}
        public static function splitVersionRange($version) {}
        /**
         * Removes -dev -alpha -beta -RC states (also without '-' prefix) from a version number
         * and replaces them by .0 and normalizes to a three part version number
         *
         * @return string
         */
        public static function getNumericTypo3Version() {}
        /**
         * Wrapper function for TYPO3_version constant to make functions using
         * the constant unit testable
         *
         * @return string
         */
        public static function getCurrentTypo3Version() {}
        public static function convertVersionsStringToVersionNumbers($versionsString) {}
        public static function convertVersionStringToArray($version) {}
        public static function raiseVersionNumber($raise, $version) {}
    }

    /**
     * Class with helper functions for string handling
     */
    class StringUtility {
        public static function beginsWith($haystack, $needle) {}
        public static function endsWith($haystack, $needle) {}
        public static function getUniqueId($prefix = '') {}
        public static function escapeCssSelector(string $selector) : string {}
    }

    /**
     * Class with helper functions for mathematical calculations
     */
    class MathUtility {
        public static function forceIntegerInRange($theInt, $min, $max = 2000000000, $defaultValue = 0) {}
        public static function convertToPositiveInteger($theInt) {}
        public static function canBeInterpretedAsInteger($var) {}
        public static function canBeInterpretedAsFloat($var) {}
        public static function calculateWithPriorityToAdditionAndSubtraction($string) {}
        public static function calculateWithParentheses($string) {}
        public static function isIntegerInRange($value, $minimum, $maximum) {}
    }

    /**
     * Extension Management functions
     *
     * This class is never instantiated, rather the methods inside is called as functions like
     * \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::isLoaded('my_extension');
     */
    class ExtensionManagementUtility {
        /**
         * @var array
         */
        static protected $extensionKeyMap;
        /**
         * TRUE, if ext_tables file was read from cache for this script run.
         * The frontend tends to do that multiple times, but the caching framework does
         * not allow this (via a require_once call). This variable is used to track
         * the access to the cache file to read the single ext_tables.php if it was
         * already read from cache
         *
         * @todo See if we can get rid of the 'load multiple times' scenario in fe
         * @var bool
         */
        static protected $extTablesWasReadFromCacheOnce;
        /**
         * @var PackageManager
         */
        static protected $packageManager;
        /**
         * @var \TYPO3\CMS\Core\Cache\CacheManager
         */
        static protected $cacheManager;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        static protected $signalSlotDispatcher;

        public static function setPackageManager(PackageManager $packageManager) {}
        /**
         * Getter for the cache manager
         *
         * @return \TYPO3\CMS\Core\Cache\CacheManager
         */
        protected static function getCacheManager() {}
        /**
         * Getter for the signal slot dispatcher
         *
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected static function getSignalSlotDispatcher() {}
        public static function isLoaded($key, $exitOnError = null) {}
        public static function extPath($key, $script = '') {}
        public static function siteRelPath($key) {}
        public static function getCN($key) {}
        public static function getExtensionKeyByPrefix($prefix) {}
        /**
         * Clears the extension key map.
         */
        public static function clearExtensionKeyMap() {}
        public static function getExtensionVersion($key) {}
        public static function addTCAcolumns($table, $columnArray) {}
        public static function addToAllTCAtypes($table, $newFieldsString, $typeList = '', $position = '') {}
        public static function addFieldsToAllPalettesOfField($table, $field, $addFields, $insertionPosition = '') {}
        public static function addFieldsToPalette($table, $palette, $addFields, $insertionPosition = '') {}
        public static function addTcaSelectItem($table, $field, array $item, $relativeToField = '', $relativePosition = '') {}
        public static function getFileFieldTCAConfig($fieldName, array $customSettingOverride = [ ], $allowedFileExtensions = '', $disallowedFileExtensions = '') {}
        public static function addFieldsToUserSettings($addFields, $insertionPosition = '') {}
        protected static function executePositionedStringInsertion($list, $insertionList, $insertionPosition = '') {}
        protected static function removeDuplicatesForInsertion($insertionList, $list = '') {}
        protected static function explodeItemList($itemList) {}
        protected static function generateItemList(array $items, $useRawData = false) {}
        public static function allowTableOnStandardPages($table) {}
        public static function configureModule($moduleSignature) {}
        public static function addModule($main, $sub = '', $position = '', $path = null, $moduleConfiguration = [ ]) {}
        public static function insertModuleFunction($modname, $className, $_ = null, $title, $MM_key = 'function', $WS = '') {}
        public static function addPageTSConfig($content) {}
        public static function addUserTSConfig($content) {}
        public static function addLLrefForTCAdescr($key, $file) {}
        public static function addNavigationComponent($module, $componentId, $extensionKey) {}
        public static function addCoreNavigationComponent($module, $componentId) {}
        public static function addService($extKey, $serviceType, $serviceKey, $info) {}
        public static function findService($serviceType, $serviceSubType = '', $excludeServiceKeys = [ ]) {}
        public static function findServiceByKey($serviceKey) {}
        public static function isServiceAvailable($serviceType, $serviceKey, $serviceDetails) {}
        public static function deactivateService($serviceType, $serviceKey) {}
        public static function addPlugin($itemArray, $type = 'list_type', $extensionKey = null) {}
        public static function addPiFlexFormValue($piKeyToMatch, $value, $CTypeToMatch = 'list') {}
        public static function addToInsertRecords($table, $content_table = 'tt_content', $content_field = 'records') {}
        public static function addPItoST43($key, $_, $suffix = '', $type = 'list_type', $cacheable = false) {}
        public static function addStaticFile($extKey, $path, $title) {}
        public static function registerPageTSConfigFile($extKey, $filePath, $title) {}
        public static function addTypoScriptSetup($content) {}
        public static function addTypoScriptConstants($content) {}
        public static function addTypoScript(string $key, string $type, string $content, $afterStaticUid = 0) {}
        public static function getExtensionIcon($extensionPath, $returnFullPath = false) {}
/** @var $codeCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
        public static function loadExtLocalconf(/** @var $codeCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
$allowCaching = true) {}
        /**
         * Execute ext_localconf.php files from extensions
         */
        protected static function loadSingleExtLocalconfFiles() {}
        /**
         * Create cache entry for concatenated ext_localconf.php files
         */
        protected static function createExtLocalconfCacheEntry() {}
        /**
         * Cache identifier of concatenated ext_localconf file
         *
         * @return string
         */
        protected static function getExtLocalconfCacheIdentifier() {}
/** @var $codeCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
        public static function loadBaseTca(/** @var $codeCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
$allowCaching = true) {}
        /**
         * Find all Configuration/TCA/* files of extensions and create base TCA from it.
         * The filename must be the table name in $GLOBALS['TCA'], and the content of
         * the file should return an array with content of a specific table.
         *
         * @see Extension core, extensionmanager and others for examples.
         */
        protected static function buildBaseTcaFromSingleFiles() {}
        protected static function emitTcaIsBeingBuiltSignal(array $tca) {}
        /**
         * Cache base $GLOBALS['TCA'] to cache file to require the whole thing in one
         * file for next access instead of cycling through all extensions again.
         */
        protected static function createBaseTcaCacheFile() {}
        /**
         * Cache identifier of base TCA cache entry.
         *
         * @return string
         */
        protected static function getBaseTcaCacheIdentifier() {}
/** @var $codeCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
        public static function loadExtTables(/** @var $codeCache \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
$allowCaching = true) {}
        /**
         * Load ext_tables.php as single files
         */
        protected static function loadSingleExtTablesFiles() {}
        /**
         * Create concatenated ext_tables.php cache file
         */
        protected static function createExtTablesCacheEntry() {}
        /**
         * Cache identifier for concatenated ext_tables.php files
         *
         * @return string
         */
        protected static function getExtTablesCacheIdentifier() {}
        /**
         * Remove cache files from php code cache, grouped by 'system'
         *
         * This removes the following cache entries:
         * - autoloader cache registry
         * - cache loaded extension array
         * - ext_localconf concatenation
         * - ext_tables concatenation
         *
         * This method is usually only used by extension that fiddle
         * with the loaded extensions. An example is the extension
         * manager and the install tool.
         *
         * @deprecated CacheManager provides the functionality directly
         */
        public static function removeCacheFiles() {}
        /**
         * Gets an array of loaded extension keys
         *
         * @return array Loaded extensions
         */
        public static function getLoadedExtensionListArray() {}
        public static function loadExtension($extensionKey) {}
        public static function unloadExtension($extensionKey) {}
/** @var $logger \TYPO3\CMS\Core\Log\Logger */
        public static function makeCategorizable(/** @var $logger \TYPO3\CMS\Core\Log\Logger */
$extensionKey, /** @var $logger \TYPO3\CMS\Core\Log\Logger */
$tableName, /** @var $logger \TYPO3\CMS\Core\Log\Logger */
$fieldName = 'categories', /** @var $logger \TYPO3\CMS\Core\Log\Logger */
array $options = [ ], /** @var $logger \TYPO3\CMS\Core\Log\Logger */
$override = false) {}
    }

    /**
     * Class to handle php environment specific options / functions
     */
    class PhpOptionsUtility {
        /**
         * Check if php session.auto_start is enabled
         *
         * @return bool TRUE if session.auto_start is enabled, FALSE if disabled
         */
        public static function isSessionAutoStartEnabled() {}
        public static function getIniValueBoolean($configOption) {}
    }

}

namespace TYPO3\CMS\Core\Utility\File {
    /**
     * Contains functions for performing file operations like copying, pasting, uploading, moving,
     * deleting etc. through the TCE
     *
     * See document "TYPO3 Core API" for syntax
     *
     * This class contains functions primarily used by tce_file.php (TYPO3 Core Engine for file manipulation)
     * Functions include copying, moving, deleting, uploading and so on...
     *
     * Important internal variables:
     *
     * $fileExtensionPermissions (see basicFileFunctions)
     *
     * All fileoperations must be within the filemount paths of the user. Further the fileextension
     * MUST validate TRUE with the fileExtensionPermissions array
     */
    class ExtendedFileUtility extends \typo3\cms\core\utility\file\basicfileutility {
        /**
         * Defines behaviour when uploading files with names that already exist; possible values are
         * the values of the \TYPO3\CMS\Core\Resource\DuplicationBehavior enumeration
         *
         * @var \TYPO3\CMS\Core\Resource\DuplicationBehavior
         */
        protected $existingFilesConflictMode;
        /**
         * This array is self-explaining (look in the class below).
         * It grants access to the functions. This could be set from outside in order to enabled functions to users.
         * See also the function setActionPermissions() which takes input directly from the user-record
         *
         * @var array
         */
        public $actionPerms;
        /**
         * Will contain map between upload ID and the final filename
         *
         * @var array
         */
        public $internalUploadMap;
        /**
         * All error messages from the file operations of this script instance
         *
         * @var array
         */
        protected $errorMessages;
        /**
         * Container for FlashMessages so they can be localized
         *
         * @var array
         */
        protected $flashMessages;
        /**
         * @var array
         */
        protected $fileCmdMap;
        /**
         * The File Factory
         *
         * @var \TYPO3\CMS\Core\Resource\ResourceFactory
         */
        protected $fileFactory;

        /**
         * Get existingFilesConflictMode
         *
         * @return string
         */
        public function getExistingFilesConflictMode() {}
        public function setExistingFilesConflictMode($existingFilesConflictMode) {}
        public function start($fileCmds) {}
        public function setActionPermissions(array $permissions = [ ]) {}
        /**
         * Processing the command array in $this->fileCmdMap
         *
         * @return mixed FALSE, if the file functions were not initialized
         * @throws \UnexpectedValueException
         */
        public function processData() {}
        /**
         * Return all error messages from the file operations of this script instance
         *
         * @return array all errorMessages as a numerical array
         */
        public function getErrorMessages() {}
        public function writeLog($action, $error, $details_nr, $details, $data) {}
        protected function addMessageToFlashMessageQueue($localizationKey, array $replaceMarkers = [ ], $severity = FlashMessage::ERROR) {}
/** @var FlashMessage $flashMessage */
        public function func_delete(/** @var FlashMessage $flashMessage */
array $cmds) {}
/** @var FlashMessage $flashMessage */
        public function folderHasFilesInUse(/** @var FlashMessage $flashMessage */
Folder $folder) {}
        protected function transformFileReferenceToRecordReference(array $referenceRecord) {}
        protected function getFileObject($identifier) {}
/** @var $targetFolderObject \TYPO3\CMS\Core\Resource\Folder */
        protected function func_copy(/** @var $targetFolderObject \TYPO3\CMS\Core\Resource\Folder */
$cmds) {}
        protected function func_move($cmds) {}
        public function func_rename($cmds) {}
        public function func_newfolder($cmds) {}
        public function func_newfile($cmds) {}
        public function func_edit($cmds) {}
/** @var $fileObject File */
        public function func_upload(/** @var $fileObject File */
$cmds) {}
        protected function replaceFile(array $cmdArr) {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        protected function addFlashMessage(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
FlashMessage $flashMessage) {}
        protected function getIndexer(ResourceStorage $storage) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Contains class with basic file management functions
     *
     * Contains functions for management, validation etc of files in TYPO3.
     *
     * Note: All methods in this class should not be used anymore since TYPO3 6.0.
     * Please use corresponding \TYPO3\CMS\Core\Resource\ResourceStorage
     * (fetched via BE_USERS->getFileStorages()), as all functions should be
     * found there (in a cleaner manner).
     */
    class BasicFileUtility {
        const UNSAFE_FILENAME_CHARACTER_EXPRESSION = '\\x00-\\x2C\\/\\x3A-\\x3F\\x5B-\\x60\\x7B-\\xBF';

        /**
         * This number decides the highest allowed appended number used on a filename before we use naming with unique strings
         *
         * @var int
         */
        public $maxNumber;
        /**
         * This number decides how many characters out of a unique MD5-hash that is appended to a filename if getUniqueName is asked to find an available filename.
         *
         * @var int
         */
        public $uniquePrecision;
        /**
         * Allowed and denied file extensions
         * @var array
         */
        protected $fileExtensionPermissions;

        public function setFileExtensionPermissions($allowedFilePermissions, $deniedFilePermissions) {}
        protected function is_allowed($fileExtension) {}
        public function checkIfAllowed($ext, $_, $filename = '') {}
        protected function is_directory($theDir) {}
        public function getUniqueName($theFile, $theDest, $dontCheckForUnique = false) {}
        public function cleanFileName($fileName) {}
    }


    /**
     * Interface for classes which hook into extFileFunctions and do additional processData processing.
     */
    interface ExtendedFileUtilityProcessDataHookInterface {
        function processData_postProcessAction($action, array $cmdArr, array $result, ExtendedFileUtility $parentObject) ;
    }

}

namespace TYPO3\CMS\Core\Session {
    /**
     * Class SessionManager
     *
     * Example Configuration
     *
     * $GLOBALS['TYPO3_CONF_VARS']['SYS']['session'] => [
     *     'BE' => [
     *         'backend' => \TYPO3\CMS\Core\Session\Backend\FileSessionBackend::class,
     *         'savePath' => '/var/www/t3sessionframework/data/'
     *     ]
     * ]
     */
    class SessionManager implements \typo3\cms\core\singletoninterface {
        /**
         * @var SessionBackendInterface[]
         */
        protected $sessionBackends;

        public function getSessionBackend(string $identifier) : SessionBackendInterface {}
/** @var SessionBackendInterface $backend */
        protected function createSessionBackendFromConfiguration(/** @var SessionBackendInterface $backend */
string $identifier, /** @var SessionBackendInterface $backend */
array $configuration) : SessionBackendInterface {}
    }

}

namespace TYPO3\CMS\Core\Session\Backend {
    /**
     * Class RedisSessionBackend
     *
     * This session backend takes these optional configuration options: 'hostname' (default '127.0.0.1'),
     * 'database' (default 0), 'port' (default 3679) and 'password' (no default value).
     */
    class RedisSessionBackend implements \typo3\cms\core\session\backend\sessionbackendinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var array
         */
        protected $configuration;
        /**
         * Indicates whether the server is connected
         *
         * @var bool
         */
        protected $connected;
        /**
         * Used as instance independent identifier
         * (e.g. if multiple installations write into the same database)
         *
         * @var string
         */
        protected $applicationIdentifier;
        /**
         * Instance of the PHP redis class
         *
         * @var \Redis
         */
        protected $redis;
        /**
         * @var string
         */
        protected $identifier;

        public function initialize(string $identifier, array $configuration) {}
        /**
         * Checks if the configuration is valid
         *
         * @throws \InvalidArgumentException
         * @internal To be used only by SessionManager
         */
        public function validateConfiguration() {}
        public function get(string $sessionId) : array {}
        public function remove(string $sessionId) : bool {}
        public function set(string $sessionId, array $sessionData) : array {}
        public function update(string $sessionId, array $sessionData) : array {}
        public function collectGarbage(int $maximumLifetime, int $maximumAnonymousLifetime = 0) {}
        /**
         * Initializes the redis backend
         *
         * @throws \RuntimeException if access to redis with password is denied or if database selection fails
         */
        protected function initializeConnection() {}
        /**
         * List all sessions
         *
         * @return array Return a list of all user sessions. The list may be empty.
         */
        public function getAll() : array {}
        protected function getSessionKeyName(string $sessionId) : string {}
        /**
         * @return int
         */
        protected function getSessionTimeout() : int {}
    }

    /**
     * Class DatabaseSessionBackend
     *
     * This session backend requires the 'table' configuration option. If the backend is used to holds non-authenticated
     * sessions (default if 'TYPO3_MODE' is 'FE'), the 'ses_anonymous' configuration option must be set to true.
     */
    class DatabaseSessionBackend implements \typo3\cms\core\session\backend\sessionbackendinterface {
        /**
         * @var array
         */
        protected $configuration;
        /**
         * @var bool Indicates whether the sessions table has the ses_anonymous column
         */
        protected $hasAnonymousSessions;

        public function initialize(string $identifier, array $configuration) {}
        /**
         * Checks if the configuration is valid
         *
         * @return bool
         * @throws \InvalidArgumentException
         * @internal To be used only by SessionManager
         */
        public function validateConfiguration() : bool {}
        public function get(string $sessionId) : array {}
        public function remove(string $sessionId) : bool {}
        public function set(string $sessionId, array $sessionData) : array {}
        public function update(string $sessionId, array $sessionData) : array {}
        public function collectGarbage(int $maximumLifetime, int $maximumAnonymousLifetime = 0) {}
        /**
         * List all sessions
         *
         * @return array Return a list of all user sessions. The list may be empty
         */
        public function getAll() : array {}
        /**
         * @return QueryBuilder
         */
        protected function getQueryBuilder() : QueryBuilder {}
        /**
         * @return Connection
         */
        protected function getConnection() : Connection {}
    }


    /**
     * Interface SessionBackendInterface
     */
    interface SessionBackendInterface {
        function initialize(string $identifier, array $configuration) ;
        /**
         * Checks if the configuration is valid
         *
         * @throws \InvalidArgumentException
         * @internal To be used only by SessionManager
         */
        function validateConfiguration() ;
        /**
         * List all sessions
         *
         * @return array Return a list of all user sessions. The list may be empty.
         */
        function getAll() : array ;
        function get(string $sessionId) : array ;
        function remove(string $sessionId) : bool ;
        function set(string $sessionId, array $sessionData) : array ;
        function update(string $sessionId, array $sessionData) : array ;
        function collectGarbage(int $maximumLifetime, int $maximumAnonymousLifetime = 0) ;
    }

}

namespace TYPO3\CMS\Core\Session\Backend\Exception {
    /**
     * Class SessionNotCreatedException
     */
    class SessionNotCreatedException extends \typo3\cms\core\session\backend\exception\abstractbackendexception {}

    /**
     * Class SessionNotUpdatedException
     */
    class SessionNotUpdatedException extends \typo3\cms\core\session\backend\exception\abstractbackendexception {}

    /**
     * Class SessionNotFoundException
     */
    class SessionNotFoundException extends \typo3\cms\core\session\backend\exception\abstractbackendexception {}

    /**
     * An abstract session backend exception, specific exceptions extend this.
     */
    abstract class AbstractBackendException extends \typo3\cms\core\exception {}

}

namespace Composer\Autoload {
    /**
     * ClassMapGenerator
     *
     * @author Gyula Sallai <salla016@gmail.com>
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class ClassMapGenerator {
        public static function dump($dirs, $file) {}
        public static function createMap($path, $blacklist = null, IOInterface $io = null, $namespace = null) {}
        private static function findClasses($path) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit {
    /**
     * Test case for \TYPO3\CMS\Core\Tests\Unit\FileStreamWrapper
     */
    class FileStreamWrapperTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function pathsAreOverlaidAndFinalDirectoryStructureCanBeQueried() {}
        /**
         * @test
         */
        public function windowsPathsCanBeProcessed() {}
        /**
         * @test
         */
        public function symlinksCanBeCreated() {}
    }

    /**
     * Test case
     */
    class RegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getThrowsExceptionForInvalidNamespacesUsingNoNamespace() {}
        /**
         * @test
         */
        public function getThrowsExceptionForInvalidNamespacesUsingTooShortNamespace() {}
        /**
         * @test
         */
        public function setThrowsAnExceptionOnEmptyNamespace() {}
        /**
         * @test
         */
        public function setThrowsAnExceptionOnWrongNamespace() {}
        /**
         * @test
         */
        public function removeThrowsAnExceptionOnWrongNamespace() {}
        /**
         * @test
         */
        public function removeAllByNamespaceThrowsAnExceptionOnWrongNamespace() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Tree\TableConfiguration {
    /**
     * Testcase for \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider
     */
    class DatabaseTreeDataProviderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|DatabaseTreeDataProvider|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;
        /**
         * @var TreeNode
         */
        protected $treeData;

        /**
         * Set up
         */
        protected function setUp() {}
        protected function setupDatabaseMock(int $instanceCount = 1) {}
        protected function initializeSubjectMock(array $mockMethods) {}
        /**
         * @test
         */
        public function loadTreeDataLevelMaximumSetToZeroWorks() {}
        /**
         * @test
         */
        public function loadTreeDataLevelMaximumSetToOneWorks() {}
        /**
         * @test
         */
        public function getChildrenOfLevelMaximumSetToOneWorks() {}
        /**
         * @test
         */
        public function getChildrenOfLevelMaximumSetToTwoWorks() {}
    }

    /**
     * Test case
     */
    class TreeDataProviderFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TreeDataProviderFactory
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @return array
         */
        public function invalidConfigurationDataProvider() {}
        public function factoryThrowsExceptionIfInvalidConfigurationIsGiven(array $tcaConfiguration, $expectedExceptionCode) {}
        /**
         * @test
         */
        public function configuredDataProviderClassIsInstantiated() {}
        /**
         * @test
         */
        public function configuredDataProviderClassIsInstantiatedWithTcaConfigurationInConstructor() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Tree\TableConfiguration\Fixtures {
    /**
     * Fixture configured data provider
     */
    class TreeDataProviderWithConfigurationFixture {
        public function __construct($configuration) {}
    }

    /**
     * Fixture configured data provider
     */
    class TreeDataProviderFixture {
        public function __construct($configuration) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Database {
    /**
     * Test case
     */
    class ConnectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Connection|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $connection;
        /**
         * @var \Doctrine\DBAL\Platforms\AbstractPlatform
         */
        protected $platform;
        /**
         * @var string
         */
        protected $testTable;

        /**
         * Create a new database connection mock object for every test.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function createQueryBuilderReturnsInstanceOfTypo3QueryBuilder() {}
        /**
         * @return array
         */
        public function quoteIdentifierDataProvider() {}
        public function quoteIdentifier(string $input, string $expected) {}
        /**
         * @test
         */
        public function quoteIdentifiers() {}
        /**
         * @return array
         */
        public function insertQueriesDataProvider() {}
        public function insertQueries(array $args, string $expectedQuery, array $expectedValues, array $expectedTypes) {}
        /**
         * @test
         */
        public function bulkInsert() {}
        /**
         * @return array
         */
        public function updateQueriesDataProvider() {}
        public function updateQueries(array $args, string $expectedQuery, array $expectedValues, array $expectedTypes) {}
        /**
         * @return array
         */
        public function deleteQueriesDataProvider() {}
        public function deleteQueries(array $args, string $expectedQuery, array $expectedValues, array $expectedTypes) {}
        /**
         * Data provider for select query tests
         *
         * Each array item consists of
         *  - array of parameters for select call
         *  - expected SQL string
         *  - expected named parameter values
         *
         * @return array
         */
        public function selectQueriesDataProvider() {}
        public function selectQueries(array $args, string $expectedQuery, array $expectedParameters) {}
        /**
         * Data provider for select query tests
         *
         * Each array item consists of
         *  - array of parameters for select call
         *  - expected SQL string
         *  - expected named parameter values
         *
         * @return array
         */
        public function countQueriesDataProvider() {}
        public function countQueries(array $args, string $expectedQuery, array $expectedParameters) {}
        /**
         * @test
         */
        public function truncateQuery() {}
        /** @var MysqliConnection|ObjectProphecy $wrappedConnectionProphet */
        public function getServerVersionReportsPlatformVersion() {}
    }

    /**
     * Test case
     */
    class ConnectionPoolTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getConnectionNamesReturnsConfiguredConnectionNames() {}
    }

    /**
     * Test case for \TYPO3\CMS\Core\Database\RelationHandler
     */
    class RelationHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Database\RelationHandler
         */
        protected $subject;

        /**
         */
        protected function setUp() {}
        /**
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function purgeItemArrayReturnsFalseIfVersioningForTableIsDisabled() {}
        /**
         * @test
         */
        public function purgeItemArrayReturnsTrueIfItemsHaveBeenPurged() {}
    }

    /**
     * Tests for SqlReader
     */
    class SqlReaderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var SqlReader
         */
        protected $subject;

        /**
         * Set up the test subject
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getStatementArraySplitsStatements() {}
        /**
         * @test
         */
        public function getStatementArrayFiltersStatements() {}
        /**
         * @test
         */
        public function getInsertStatementArrayResult() {}
        /**
         * @test
         */
        public function getInsertStatementArrayResultWithNewline() {}
        /**
         * @test
         */
        public function getCreateTableStatementArrayResult() {}
    }

    /**
     * Tests for ConnectionMigrator
     */
    class ConnectionMigratorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array
         */
        protected $tableAndFieldMaxNameLengthsPerDbPlatform;

        private function getConnectionMigratorMock($databasePlatformName = 'default') {}
        /**
         * Utility method to create a table mock instance with a much too long
         * table name in any case.
         *
         * @return \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Tests\AccessibleObjectInterface
         */
        private function getTableMock() {}
        /**
         * @test
         */
        public function tableNamesStickToTheMaximumCharactersWhenPrefixedForRemoval() {}
        /**
         * @test
         */
        public function databasePlatformNamingRestrictionGetsResolved() {}
        /**
         * @test
         */
        public function whenPassingAnUnknownDatabasePlatformTheDefaultTableAndFieldNameRestrictionsApply() {}
        /**
         * @test
         */
        public function columnNamesStickToTheMaximumCharactersWhenPrefixedForRemoval() {}
    }

    /**
     * Test for EnumType
     */
    class EnumTypeTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Set up the test subject
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getNameReturnsTypeIdentifier() {}
        /**
         * @test
         */
        public function getSQLDeclaration() {}
    }

    /**
     * Tests for SetType
     */
    class SetTypeTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Set up the test subject
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getNameReturnsTypeIdentifier() {}
        /**
         * @test
         */
        public function getSQLDeclaration() {}
    }

    /**
     * Test case
     */
    class SchemaColumnDefinitionListenerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var SchemaColumnDefinitionListener
         */
        protected $subject;
        /**
         * @var Connection|ObjectProphecy
         */
        protected $connectionProphet;

        /**
         * Set up the test subject
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function isInactiveForStandardColumnTypes() {}
        /**
         * @test
         */
        public function buildsColumnForEnumDataType() {}
        /**
         * @test
         */
        public function buildsColumnForSetDataType() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Database\Mocks {
    class MockKeywordList extends \doctrine\dbal\platforms\keywords\keywordlist {
        /**
         * Returns the name of this keyword list.
         *
         * @return string
         */
        public function getName() {}
        /**
         * Returns the list of keywords.
         *
         * @return array
         */
        protected function getKeywords() {}
    }

    class MockPlatform extends \doctrine\dbal\platforms\abstractplatform {
        public function getBlobTypeDeclarationSQL(array $field) {}
        public function getBooleanTypeDeclarationSQL(array $columnDef) {}
        public function getIntegerTypeDeclarationSQL(array $columnDef) {}
        public function getBigIntTypeDeclarationSQL(array $columnDef) {}
        public function getSmallIntTypeDeclarationSQL(array $columnDef) {}
        public function _getCommonIntegerTypeDeclarationSQL(array $columnDef) {}
        public function getVarcharTypeDeclarationSQL(array $field) {}
        public function getClobTypeDeclarationSQL(array $field) {}
        public function getJsonTypeDeclarationSQL(array $field) {}
        public function getBinaryTypeDeclarationSQL(array $field) {}
        /**
         * Gets the default length of a varchar field.
         *
         * @return int
         */
        public function getVarcharDefaultLength() {}
        /**
         * Gets the name of the platform.
         *
         * @return string
         */
        public function getName() {}
        /**
         * Lazy load Doctrine Type Mappings.
         */
        protected function initializeDoctrineTypeMappings() {}
        protected function getVarcharTypeDeclarationSQLSnippet($length, $fixed) {}
        /**
         * Returns the class name of the reserved keywords list.
         *
         * @return string
         *
         * @throws \Doctrine\DBAL\DBALException If not supported on this platform.
         */
        protected function getReservedKeywordsClass() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Database\Schema\Parser {
    /**
     * Tests for CreateTableStatement
     */
    class CreateTableFragmentTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Each parameter array consists of the following values:
         *  - create table SQL fragment
         *  - table name
         *  - is temporary
         *
         * @return array
         */
        public function canParseCreateTableFragmentDataProvider() : array {}
        public function canParseCreateTableFragment(string $statement, string $tableName, bool $isTemporary) {}
        protected function createSubject(string $statement) : AbstractCreateStatement {}
    }

    /**
     * Tests for CreateIndexDefinitionItem
     */
    class IndexDefinitionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Each parameter array consists of the following values:
         *  - index definition SQL fragment
         *  - expected index name
         *  - array of index column definitions [name, length, direction]
         *  - isPrimary
         *  - isUnique
         *  - isFulltext
         *  - isSpatial
         *  - indexType
         *  - options array
         *
         * @return array
         */
        public function canParseIndexDefinitionDataProvider() : array {}
        public function canParseIndexDefinition(string $indexDefinition, string $indexName, array $indexColumns, bool $isPrimary, bool $isUnique, bool $isFulltext, bool $isSpatial, string $indexType, array $indexOptions) {}
/** @var CreateTableStatement $createTableStatement */
        protected function createSubject(/** @var CreateTableStatement $createTableStatement */
string $statement) : CreateIndexDefinitionItem {}
    }

    /**
     * Tests for TableBuilder
     */
    class TableBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Table
         */
        protected $table;

        /**
         * Setup test subject
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function hasExpectedTableName() {}
        /**
         * @test
         */
        public function hasExpectedTableEngine() {}
        /**
         * @test
         */
        public function hasExpectedTableCollation() {}
        /**
         * @test
         */
        public function hasExpectedTableCharacterSet() {}
        /**
         * @test
         */
        public function hasExpectedTableRowFormat() {}
        /**
         * @test
         */
        public function hasExpectedTableAutoIncrementValue() {}
        /**
         * @test
         */
        public function isExpectedUidColumn() {}
        /**
         * @test
         */
        public function isExpectedPidColumn() {}
        /**
         * @test
         */
        public function isExpectedTstampColumn() {}
        /**
         * @test
         */
        public function isExpectedSortingColumn() {}
        /**
         * @test
         */
        public function isExpectedDeletedColumn() {}
        /**
         * @test
         */
        public function isExpectedTSconfigColumn() {}
        /**
         * @test
         */
        public function isExpectedNoCacheColumn() {}
        /**
         * @test
         */
        public function isExpectedPrimaryKey() {}
        /**
         * @test
         */
        public function isExpectedParentKey() {}
        /**
         * @test
         */
        public function isExpectedNoCacheKey() {}
        /**
         * @test
         */
        public function isExpectedForeignKey() {}
        /**
         * @test
         */
        public function hasColumnLengthOnIndex() {}
    }

    /**
     * Tests for CreateTableStatement table options
     */
    class TableOptionsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Each parameter array consists of the following values:
         *  - table options SQL fragment
         *  - expected options array
         *
         * @return array
         */
        public function canParseTableOptionsDataProvider() : array {}
        public function canParseTableOptions(string $tableOptionsSQL, array $expectedTableOptions) {}
        protected function createSubject(string $statement) : AbstractCreateStatement {}
    }

    /**
     * Tests for ReferenceDefinition
     */
    class ReferenceDefinitionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Each parameter array consists of the following values:
         *  - reference definition SQL fragment
         *  - expected table Name
         *  - array of index column definitions [name, length, direction]
         *  - MATCH value
         *  - ON DELETE value
         *  - ON UPDATE value
         *
         * @return array
         */
        public function canParseReferenceDefinitionDataProvider() : array {}
        public function canParseReferenceDefinition(string $columnAttribute, string $table, array $columns, string $match = null, string $onDelete = null, string $onUpdate = null) {}
/** @var CreateTableStatement $createTableStatement */
        protected function createSubject(/** @var CreateTableStatement $createTableStatement */
string $statement) : ReferenceDefinition {}
    }

    /**
     * Tests for CreateForeignKeyDefinitionItem
     */
    class ForeignKeyDefinitionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Each parameter array consists of the following values:
         *  - index definition SQL fragment
         *  - index name
         *  - array of index column definitions [name, length, direction]
         *  - foreign table name
         *  - array of foreign column definitions [name, length, direction]
         *
         * @return array
         */
        public function canParseForeignKeyDefinitionDataProvider() : array {}
        public function canParseForeignKeyDefinition(string $indexDefinition, string $indexName, array $indexColumns, string $foreignTableName, array $foreignTableColumns) {}
/** @var CreateTableStatement $createTableStatement */
        protected function createSubject(/** @var CreateTableStatement $createTableStatement */
string $statement) : CreateForeignKeyDefinitionItem {}
    }

    /**
     * Tests for CreateColumnDefinitionItem
     */
    class ColumnDefinitionItemTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function canParseUnquotedMysqlKeywordAsTableName() {}
        /**
         * The old regular expression based create table parser processed invalid dump files
         * where the last column/index definition included a comma before the closing parenthesis.
         * Emulate this behaviour to avoid breaking lots of (partial) dump files.
         *
         * @test
         */
        public function canParseCreateDefinitionWithTrailingComma() {}
/** @var CreateTableStatement $createTableStatement */
        protected function createSubject(/** @var CreateTableStatement $createTableStatement */
string $statement) : CreateColumnDefinitionItem {}
    }

    /**
     * Base class for test cases related to parser data types.
     */
    abstract class AbstractDataTypeBaseTestCase extends \typo3\testingframework\core\unit\unittestcase {
        const CREATE_TABLE_STATEMENT = 'CREATE TABLE `aTable`(`aField` %s);';

        protected function createTableStatement(string $columnDefinition) : string {}
/** @var CreateTableStatement $createTableStatement */
        protected function createSubject(/** @var CreateTableStatement $createTableStatement */
string $statement) : CreateColumnDefinitionItem {}
    }

    /**
     * Tests for CreateColumnDefinitionItem attributes
     */
    class ColumnDefinitionAttributesTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Each parameter array consists of the following values:
         *  - column definition attributes SQL fragment
         *  - allow null values
         *  - has default value
         *  - default value
         *  - auto increment column
         *  - create index on column
         *  - create unique index column
         *  - use column as primary key
         *  - comment
         *  - column format
         *  - storage
         *
         * @return array
         */
        public function canParseColumnDefinitionAttributesDataProvider() : array {}
        public function canParseColumnDefinitionAttributes(string $columnAttribute, bool $allowNull, bool $hasDefaultValue, $defaultValue, bool $autoIncrement, bool $createIndex, bool $createUniqueIndex, bool $isPrimaryKey, string $comment = null, string $columnFormat = null, string $storage = null) {}
/** @var CreateTableStatement $createTableStatement */
        protected function createSubject(/** @var CreateTableStatement $createTableStatement */
string $statement) : CreateColumnDefinitionItem {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Database\Schema\Parser\DataTypes {
    /**
     * Tests for parsing TEXT SQL data types
     */
    class TextTypesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseTextDataType()
         *
         * @return array
         */
        public function canParseTextDataTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className) {}
    }

    /**
     * Tests for parsing CHAR/VARCHAR SQL data types
     */
    class CharDataTypeTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseBinaryDataType()
         *
         * @return array
         */
        public function canParseBinaryDataTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, int $length) {}
        /**
         * @test
         */
        public function lengthIsRequiredForVarCharType() {}
    }

    /**
     * Tests for parsing FLOAT/REAL/DOUBLE SQL data types
     */
    class FloatingPointTypesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseFloatingPointTypes()
         *
         * @return array
         */
        public function canParseFloatingPointTypesProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, int $precision = null, int $scale = null) {}
    }

    /**
     * Tests for parsing DATE/TIME related SQL data types
     */
    class DateTimeTypesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseDateTimeType()
         *
         * @return array
         */
        public function canParseDateTimeTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, int $length = null) {}
        /**
         * @test
         */
        public function parseDateTimeTypeWithInvalidLowerBound() {}
        /**
         * @test
         */
        public function parseDateTimeTypeWithInvalidUpperBound() {}
    }

    /**
     * Tests for parsing BINARY/VARBINARY SQL data types
     */
    class BinaryDataTypeTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseBinaryDataType()
         *
         * @return array
         */
        public function canParseBinaryDataTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, int $length) {}
        /**
         * @test
         */
        public function lengthIsRequiredForVarBinaryType() {}
    }

    /**
     * Tests for parsing ENUM SQL data type
     */
    class EnumDataTypeTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseEnumDataType()
         *
         * @return array
         */
        public function canParseEnumDataTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, array $values) {}
    }

    /**
     * Tests for parsing SET SQL data type
     */
    class SetDataTypeTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseSetDataType()
         *
         * @return array
         */
        public function canParseSetDataTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, array $values) {}
    }

    /**
     * Tests for parsing INTEGER SQL data types
     */
    class IntegerTypesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseIntegerDataType()
         *
         * @return array
         */
        public function canParseIntegerDataTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, int $length) {}
    }

    /**
     * Tests for parsing BIT SQL data type
     */
    class BitDataTypeTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseBitDataType()
         *
         * @return array
         */
        public function canParseBitDataTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, int $length) {}
    }

    /**
     * Tests for parsing BLOB SQL data types
     */
    class BlobTypesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseBlobDataType()
         *
         * @return array
         */
        public function canParseBlobDataTypeProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className) {}
    }

    /**
     * Tests for parsing JSON SQL data type
     */
    class JsonDataTypeTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * @test
         */
        public function canParseBitDataType() {}
    }

    /**
     * Tests for parsing DECIMAL/NUMERIC SQL data types
     */
    class FixedPointTypesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseFixedPointTypes()
         *
         * @return array
         */
        public function canParseFixedPointTypesProvider() : array {}
        public function canParseDataType(string $columnDefinition, string $className, int $precision = null, int $scale = null) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Database\Schema\Parser\DataTypeAttributes {
    /**
     * MySQL supports the SQL standard integer types INTEGER (or INT) and SMALLINT.
     * As an extension to the standard, MySQL also supports the integer types TINYINT, MEDIUMINT, and BIGINT.
     */
    class EnumerationTypeAttributesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseEnumerationDataTypeAttributes()
         *
         * @return array
         */
        public function canParseEnumerationDataTypeAttributesProvider() : array {}
        public function canParseDataType(string $columnDefinition, array $options) {}
    }

    /**
     * MySQL supports the SQL standard integer types INTEGER (or INT) and SMALLINT.
     * As an extension to the standard, MySQL also supports the integer types TINYINT, MEDIUMINT, and BIGINT.
     */
    class CharacterTypeAttributesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseCharacterDataTypeAttributes()
         *
         * @return array
         */
        public function canParseCharacterDataTypeAttributesProvider() : array {}
        public function canParseDataType(string $columnDefinition, array $options) {}
    }

    /**
     * MySQL supports the SQL standard integer types INTEGER (or INT) and SMALLINT.
     * As an extension to the standard, MySQL also supports the integer types TINYINT, MEDIUMINT, and BIGINT.
     */
    class NumericTypeAttributesTest extends \typo3\cms\core\tests\unit\database\schema\parser\abstractdatatypebasetestcase {
        /**
         * Data provider for canParseNumericDataTypeAttributes()
         *
         * @return array
         */
        public function canParseNumericDataTypeAttributesProvider() : array {}
        public function canParseDataType(string $columnDefinition, array $options) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Database\Query {
    class BulkInsertTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Connection
         */
        protected $connection;
        /**
         * @var \Doctrine\DBAL\Platforms\AbstractPlatform
         */
        protected $platform;
        /**
         * @var string
         */
        protected $testTable;

        /**
         * Create a new database connection mock object for every test.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getSQLWithoutSpecifiedValuesThrowsException() {}
        /**
         * @test
         */
        public function insertWithoutColumnAndTypeSpecification() {}
        public function insertWithoutColumnSpecification() {}
        /**
         * @test
         */
        public function singleInsertWithoutColumnSpecification() {}
        /**
         * @test
         */
        public function multiInsertWithoutColumnSpecification() {}
        /**
         * @test
         */
        public function singleInsertWithColumnSpecificationAndPositionalTypeValues() {}
        /**
         * @test
         */
        public function singleInsertWithColumnSpecificationAndNamedTypeValues() {}
        /**
         * @test
         */
        public function singleInsertWithColumnSpecificationAndMixedTypeValues() {}
        /**
         * @test
         */
        public function multiInsertWithColumnSpecification() {}
        /**
         * @test
         */
        public function emptyInsertWithColumnSpecificationThrowsException() {}
        /**
         * @test
         */
        public function insertWithColumnSpecificationAndMultipleValuesForColumnThrowsException() {}
        /**
         * @test
         */
        public function insertWithColumnSpecificationAndMultipleTypesForColumnThrowsException() {}
        /**
         * @test
         */
        public function executeWithMaxInsertRowsPerStatementExceededThrowsException() {}
    }

    class QueryBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Connection|\Prophecy\Prophecy\ObjectProphecy
         */
        protected $connection;
        /**
         * @var AbstractPlatform
         */
        protected $platform;
        /**
         * @var QueryBuilder
         */
        protected $subject;
        /**
         * @var \Doctrine\DBAL\Query\QueryBuilder|\Prophecy\Prophecy\ObjectProphecy
         */
        protected $concreteQueryBuilder;

        /**
         * Create a new database connection mock object for every test.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function exprReturnsExpressionBuilderForConnection() {}
        /**
         * @test
         */
        public function getTypeDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getStateDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getSQLDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function setParameterDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function setParametersDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getParametersDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getParameterDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getParameterTypesDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getParameterTypeDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function setFirstResultDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getFirstResultDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function setMaxResultsDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getMaxResultsDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function addDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function countBuildsExpressionAndCallsSelect() {}
        /**
         * @test
         */
        public function selectQuotesIdentifiersAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @return array
         */
        public function quoteIdentifiersForSelectDataProvider() {}
        public function quoteIdentifiersForSelect($identifier, $expectedResult) {}
        /**
         * @test
         */
        public function quoteIdentifiersForSelectWithInvalidAlias() {}
        /**
         * @test
         */
        public function selectDoesNotQuoteStarPlaceholder() {}
        /**
         * @test
         */
        public function addSelectQuotesIdentifiersAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function addSelectDoesNotQuoteStarPlaceholder() {}
        /**
         * @test
         */
        public function selectLiteralDirectlyDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function addSelectLiteralDirectlyDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         * @todo: Test with alias
         */
        public function deleteQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         * @todo: Test with alias
         */
        public function updateQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function insertQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         * @todo: Test with alias
         */
        public function fromQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function joinQuotesIdentifiersAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function innerJoinQuotesIdentifiersAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function leftJoinQuotesIdentifiersAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function rightJoinQuotesIdentifiersAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function setQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function setWithoutNamedParameterQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function whereDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function andWhereDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function orWhereDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function groupByQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function addGroupByQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function setValueQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function setValueWithoudNamedParameterQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function valuesQuotesIdentifiersAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function valuesWithoutNamedParametersQuotesIdentifiersAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function havingDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function andHavingDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function orHavingDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function orderByQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function addOrderByQuotesIdentifierAndDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getQueryPartDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function getQueryPartsDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function resetQueryPartsDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function resetQueryPartDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function createNamedParameterDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function createPositionalParameterDelegatesToConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function queryRestrictionsAreAddedForSelectOnExecute() {}
        /**
         * @test
         */
        public function queryRestrictionsAreAddedForCountOnExecute() {}
        /**
         * @test
         */
        public function queryRestrictionsAreReevaluatedOnSettingsChangeForGetSQL() {}
        /**
         * @test
         */
        public function queryRestrictionsAreReevaluatedOnSettingsChangeForExecute() {}
        /**
         * @test
         */
        public function getQueriedTablesReturnsSameTableTwiceForInnerJoin() {}
        /**
         * @return array
         */
        public function unquoteSingleIdentifierUnquotesCorrectlyOnDifferentPlatformsDataProvider() {}
        public function unquoteSingleIdentifierUnquotesCorrectlyOnDifferentPlatforms($platform, $quoteChar, $input, $expected) {}
        /**
         * @test
         */
        public function cloningQueryBuilderClonesConcreteQueryBuilder() {}
        /**
         * @test
         */
        public function changingClonedQueryBuilderDoesNotInfluenceSourceOne() {}
    }

    /**
     * Query helper test
     */
    class QueryHelperTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Test cases for stripping of leading logical operators in where constraints.
         *
         * @return array
         */
        public function stripLogicalOperatorPrefixDataProvider() : array {}
        public function stripLogicalOperatorPrefixRemovesConstraintPrefixes(string $input, string $expectedSql) {}
        /**
         * Test cases for parsing ORDER BY SQL fragments
         *
         * @return array
         */
        public function parseOrderByDataProvider() : array {}
        public function parseOrderByTest(string $input, array $expectedResult) {}
        /**
         * Test cases for parsing FROM tableList SQL fragments
         *
         * @return array
         */
        public function parseTableListDataProvider() : array {}
        public function parseTableListTest(string $input, array $expectedResult) {}
        /**
         * Test cases for parsing ORDER BY SQL fragments
         *
         * @return array
         */
        public function parseGroupByDataProvider() : array {}
        public function parseGroupByTest(string $input, array $expectedResult) {}
        /**
         * Test cases for parsing JOIN fragments into table name, alias and conditions
         *
         * @return array
         */
        public function parseJoinDataProvider() : array {}
        public function parseJoinSplitsStatement(string $input, array $expected) {}
        /**
         * Test cases for quoting column/table name identifiers in SQL fragments
         *
         * @return array
         */
        public function quoteDatabaseIdentifierDataProvider() : array {}
        public function quoteDatabaseIdentifiers(string $input, string $expected) {}
    }

    class ExpressionBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Connection
         */
        protected $connectionProphet;
        /**
         * @var ExpressionBuilder
         */
        protected $subject;
        /**
         * @var string
         */
        protected $testTable;

        /**
         * Create a new database connection mock object for every test.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function andXReturnType() {}
        /**
         * @test
         */
        public function orXReturnType() {}
        /**
         * @test
         */
        public function eqQuotesIdentifier() {}
        /**
         * @test
         */
        public function neqQuotesIdentifier() {}
        /**
         * @test
         */
        public function ltQuotesIdentifier() {}
        /**
         * @test
         */
        public function lteQuotesIdentifier() {}
        /**
         * @test
         */
        public function gtQuotesIdentifier() {}
        /**
         * @test
         */
        public function gteQuotesIdentifier() {}
        /**
         * @test
         */
        public function isNullQuotesIdentifier() {}
        /**
         * @test
         */
        public function isNotNullQuotesIdentifier() {}
        /**
         * @test
         */
        public function likeQuotesIdentifier() {}
        /**
         * @test
         */
        public function notLikeQuotesIdentifier() {}
        /**
         * @test
         */
        public function inWithStringQuotesIdentifier() {}
        /**
         * @test
         */
        public function inWithArrayQuotesIdentifier() {}
        /**
         * @test
         */
        public function notInWithStringQuotesIdentifier() {}
        /**
         * @test
         */
        public function notInWithArrayQuotesIdentifier() {}
        /**
         * @test
         */
        public function inSetThrowsExceptionWithEmptyValue() {}
        /**
         * @test
         */
        public function inSetThrowsExceptionWithInvalidValue() {}
        /**
         * @test
         */
        public function inSetForMySQL() {}
        /**
         * @test
         */
        public function inSetForPostgreSQL() {}
        /**
         * @test
         */
        public function inSetForPostgreSQLWithColumn() {}
        /**
         * @test
         */
        public function inSetForSQLite() {}
        /**
         * @test
         */
        public function inSetForSQLiteWithQuoteCharactersInValue() {}
        /**
         * @test
         */
        public function inSetForSQLiteThrowsExceptionOnPositionalPlaceholder() {}
        /**
         * @test
         */
        public function inSetForSQLiteThrowsExceptionOnNamedPlaceholder() {}
        /**
         * @test
         */
        public function inSetForMssql() {}
        /**
         * @test
         */
        public function defaultBitwiseAnd() {}
        /**
         * @test
         */
        public function bitwiseAndForOracle() {}
        /**
         * @test
         */
        public function maxQuotesIdentifier() {}
        /**
         * @test
         */
        public function minQuotesIdentifier() {}
        /**
         * @test
         */
        public function sumQuotesIdentifier() {}
        /**
         * @test
         */
        public function avgQuotesIdentifier() {}
        /**
         * @test
         */
        public function countQuotesIdentifier() {}
        /**
         * @test
         */
        public function lengthQuotesIdentifier() {}
        /**
         * @test
         */
        public function trimQuotesIdentifierWithDefaultValues() {}
        /**
         * @return array
         */
        public function trimQuotesIdentifierDataProvider() {}
        public function trimQuotesIdentifier(int $position, string $char, string $expected) {}
        /**
         * @test
         */
        public function literalQuotesValue() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Database\Query\Restriction {
    class FrontendWorkspaceRestrictionTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function buildExpressionAddsLiveWorkspaceWhereClause() {}
        /**
         * @test
         */
        public function buildExpressionAddsNonLiveWorkspaceWhereClause() {}
        /**
         * @test
         */
        public function buildExpressionAddsNonLiveWorkspaceExclusiveWhereClause() {}
    }

    class AbstractRestrictionTestCase extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Database\Query\Expression\ExpressionBuilder;
         */
        protected $expressionBuilder;

        /**
         * Create a new database connection mock object for every test.
         */
        protected function setUp() {}
    }

    class HiddenRestrictionTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function buildRestrictionsAddsHiddenWhereClause() {}
    }

    class DefaultRestrictionContainerTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function buildRestrictionsAddsAllDefaultRestrictions() {}
    }

    class FrontendGroupRestrictionTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function buildExpressionAddsNoAccessGroupWhereClause() {}
        /**
         * @test
         */
        public function buildExpressionAddsGroupWhereClause() {}
    }

    class DeletedRestrictionTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function buildRestrictionsAddsDeletedWhereClause() {}
    }

    class EndTimeRestrictionTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function buildRestrictionsThrowsExceptionInStartTimeIfGlobalsAccessTimeIsMissing() {}
        /**
         * @test
         */
        public function buildRestrictionsAddsStartTimeWhereClause() {}
    }

    class RootLevelRestrictionTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         * @test
         */
        public function buildRestrictionsAddsPidWhereClause() {}
        /**
         * @test
         */
        public function buildRestrictionsAddsAliasedPidWhereClause() {}
        /**
         * @test
         */
        public function buildRestrictionsAddsPidWhereClauseIfTableIsSpecified() {}
        /**
         * @test
         */
        public function buildRestrictionsAddsAliasedPidWhereClauseIfAliasIsSpecified() {}
        /**
         * @test
         */
        public function buildRestrictionsSkipsUnrestrictedTablesIfOtherTableIsSpecifiedThanUsedInTheQuery() {}
    }

    class BackendWorkspaceRestrictionTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function buildExpressionAddsLiveWorkspaceWhereClause() {}
        /**
         * @test
         */
        public function buildExpressionAddsNonLiveWorkspaceWhereClause() {}
        /**
         * @test
         */
        public function buildExpressionAddsLiveWorkspaceLimitedWhereClause() {}
        /**
         * @test
         */
        public function buildExpressionAddsNonLiveWorkspaceLimitedWhereClause() {}
    }

    class StartTimeRestrictionTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function buildRestrictionsThrowsExceptionInStartTimeIfGlobalsAccessTimeIsMissing() {}
        /**
         * @test
         */
        public function buildRestrictionsAddsStartTimeWhereClause() {}
    }

    class FrontendRestrictionContainerTest extends \typo3\cms\core\tests\unit\database\query\restriction\abstractrestrictiontestcase {
        /**
         */
        protected function setUp() {}
        public function frontendStatesDataProvider() {}
        public function buildExpressionAddsCorrectClause(string $tableName, string $tableAlias, int $workspaceId, bool $workspacePreview, bool $hiddenPagePreview, bool $hiddenRecordPreview, string $feGroupList, string $expectedSQL) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\FormProtection {
    /**
     * Testcase
     */
    class AbstractFormProtectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Tests\Unit\FormProtection\Fixtures\FormProtectionTesting
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function generateTokenRetrievesTokenOnce() {}
        /**
         * @test
         */
        public function validateTokenRetrievesTokenOnce() {}
        /**
         * @test
         */
        public function cleanMakesTokenInvalid() {}
        /**
         * @test
         */
        public function cleanPersistsToken() {}
        /**
         * @test
         */
        public function generateTokenFormForEmptyFormNameThrowsException() {}
        /**
         * @test
         */
        public function generateTokenFormForEmptyActionNotThrowsException() {}
        /**
         * @test
         */
        public function generateTokenFormForEmptyFormInstanceNameNotThrowsException() {}
        /**
         * @test
         */
        public function generateTokenFormForOmittedActionAndFormInstanceNameNotThrowsException() {}
        /**
         * @test
         */
        public function generateTokenReturns32CharacterHexToken() {}
        /**
         * @test
         */
        public function generateTokenCalledTwoTimesWithSameParametersReturnsSameTokens() {}
        /**
         * @test
         */
        public function validateTokenWithFourEmptyParametersNotThrowsException() {}
        /**
         * @test
         */
        public function validateTokenWithTwoEmptyAndTwoMissingParametersNotThrowsException() {}
        /**
         * @test
         */
        public function validateTokenWithDataFromGenerateTokenWithFormInstanceNameReturnsTrue() {}
        /**
         * @test
         */
        public function validateTokenWithDataFromGenerateTokenWithMissingActionAndFormInstanceNameReturnsTrue() {}
        /**
         * @test
         */
        public function validateTokenWithValidDataCalledTwoTimesReturnsTrueOnSecondCall() {}
        /**
         * @test
         */
        public function validateTokenWithMismatchingTokenIdReturnsFalse() {}
        /**
         * @test
         */
        public function validateTokenWithMismatchingFormNameReturnsFalse() {}
        /**
         * @test
         */
        public function validateTokenWithMismatchingActionReturnsFalse() {}
        /**
         * @test
         */
        public function validateTokenWithMismatchingFormInstanceNameReturnsFalse() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Tests\Unit\FormProtection\Fixtures\FormProtectionTesting $subject */
        public function validateTokenForValidTokenNotCallsCreateValidationErrorMessage() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Tests\Unit\FormProtection\Fixtures\FormProtectionTesting $subject */
        public function validateTokenForInvalidTokenCallsCreateValidationErrorMessage() {}
        /**
         * @test
         */
        public function validateTokenForInvalidFormNameCallsCreateValidationErrorMessage() {}
    }

    /**
     * Testcase
     */
    class InstallToolFormProtectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\FormProtection\InstallToolFormProtection|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function tokenFromSessionDataIsAvailableForValidateToken() {}
        /**
         * @test
         */
        public function persistSessionTokenWritesTokensToSession() {}
    }

    /**
     * Testcase
     */
    class BackendFormProtectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\FormProtection\BackendFormProtection|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;
        /**
         * @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $backendUserMock;
        /**
         * @var Registry|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $registryMock;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function generateTokenReadsTokenFromSessionData() {}
        /**
         * @test
         */
        public function tokenFromSessionDataIsAvailableForValidateToken() {}
        /**
         * @test
         */
        public function restoreSessionTokenFromRegistryThrowsExceptionIfSessionTokenIsEmpty() {}
        /**
         * @test
         */
        public function persistSessionTokenWritesTokenToSession() {}
        /**
         * @test
         */
        public function failingTokenValidationInvokesFailingTokenClosure() {}
    }

    /**
     * Testcase
     */
    class FormProtectionFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        protected function tearDown() {}
        /**
         * @test
         */
        public function getForNotExistingClassThrowsException() {}
        /**
         * @test
         */
        public function getForClassThatIsNoFormProtectionSubclassThrowsException() {}
        /**
         * @test
         */
        public function getForTypeBackEndWithExistingBackEndReturnsBackEndFormProtection() {}
        /**
         * @test
         */
        public function getForTypeBackEndCalledTwoTimesReturnsTheSameInstance() {}
        /**
         * @test
         */
        public function getForTypeInstallToolReturnsInstallToolFormProtection() {}
        /**
         * @test
         */
        public function getForTypeInstallToolCalledTwoTimesReturnsTheSameInstance() {}
        /**
         * @test
         */
        public function getForTypesInstallToolAndDisabledReturnsDifferentInstances() {}
        /**
         * @test
         */
        public function setSetsInstanceForType() {}
        /**
         * @test
         */
        public function setNotSetsInstanceForOtherType() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\FormProtection\Fixtures {
    /**
     * Class \TYPO3\CMS\Core\Tests\Unit\FormProtection\Fixtures\FormProtectionTesting.
     *
     * This is a testing subclass of the abstract \TYPO3\CMS\Core\FormProtection\AbstractFormProtection
     * class.
     */
    class FormProtectionTesting extends \typo3\cms\core\formprotection\abstractformprotection {
        /**
         * Retrieves all saved tokens.
         *
         * @return string The saved token
         */
        protected function retrieveSessionToken() {}
        /**
         * Saves the tokens so that they can be used by a later incarnation of this
         * class.
         */
        public function persistSessionToken() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Migrations {
    /**
     * Test case
     */
    class TcaMigrationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function missingTypeThrowsException() {}
        /**
         * @test
         */
        public function migrateReturnsGivenArrayUnchangedIfNoMigrationNeeded() {}
        /**
         * @test
         */
        public function migrateAddsMissingColumnsConfig() {}
        /**
         * @test
         */
        public function migrateChangesT3editorWizardToT3editorRenderTypeIfNotEnabledByTypeConfig() {}
        /**
         * @test
         */
        public function migrateDropsStylePointerFromShowItem() {}
        /**
         * @test
         */
        public function migrateMovesSpecialConfigurationToColumnsOverridesDefaultExtras() {}
        /**
         * @test
         */
        public function migrateMovesSpecialConfigurationToColumnsOverridesDefaultExtrasAndMergesExistingDefaultExtras() {}
        /**
         * @test
         */
        public function migrateChangesT3editorWizardThatIsEnabledByTypeConfigToRenderTypeInColumnsOverrides() {}
        /**
         * @test
         */
        public function migrateRemovesAnUnusedT3edtiorDefinitionIfEnabledByTypeConfig() {}
        /**
         * @test
         */
        public function migrateSpecialConfigurationAndRemoveShowItemStylePointerConfigDoesNotAddMessageIfOnlySyntaxChanged() {}
        /**
         * @test
         */
        public function migrateShowItemMovesAdditionalPaletteToOwnPaletteDefinition() {}
        /**
         * @test
         */
        public function migrateIconsForFormFieldWizardToNewLocation() {}
        /**
         * @test
         */
        public function migrateExtAndSysextPathToEXTPath() {}
        /**
         * @test
         */
        public function migratePathWhichStartsWithIToEXTPath() {}
        /**
         * @test
         */
        public function migrateRemovesIconsInOptionTags() {}
        /**
         * @test
         */
        public function migrateRewritesRelativeIconPathToExtensionReference() {}
        /**
         * @test
         */
        public function migrateRewritesIconFilenameOnlyToDefaultT3skinExtensionReference() {}
        /**
         * @test
         */
        public function migrateKeepsGivenExtensionReference() {}
        /**
         * @test
         */
        public function migrateSelectFieldRenderType() {}
        /**
         * @return array
         */
        public function migrateSetsShowIconTableIfMissingDataProvider() {}
        public function migrateSetsShowIconTableIfMissing(array $givenConfig, array $expectedConfig) {}
        /**
         * @test
         */
        public function migrateFixesReferenceToLinkHandler() {}
        /**
         * @return array
         */
        public function migrateRemovesRteTransformOptionsDataProvider() {}
        public function migrateRemovesRteTransformOptions(array $givenConfig, array $expectedConfig) {}
        /**
         * @return array
         */
        public function migrateSelectTreeOptionsDataProvider() {}
        public function migrateSelectTreeOptions(array $input, array $expected) {}
        public function migrateTsTemplateSoftReferencesDataProvider() {}
        public function migrateTsTemplateSoftReferences(array $givenConfig, array $expectedConfig) {}
        public function migrateShowIfRTESettingDataProvider() {}
        public function migrateShowIfRTESetting(array $givenConfig, array $expectedConfig) {}
        public function migrateWorkspaceSettingsDataProvider() {}
        public function migrateWorkspaceSettings(array $givenConfig, array $expectedConfig) {}
        /**
         * @return array
         */
        public function migrateTranslationTableDataProvider() {}
        public function migrateTranslationTable(array $givenConfig, array $expectedConfig) {}
        /**
         * @return array
         */
        public function migrateL10nModeDefinitionsDataProvider() {}
        public function migrateL10nModeDefinitions(array $givenConfig, array $expectedConfig) {}
        /**
         * @return array
         */
        public function migratePageLocalizationDefinitionsDataProvider() {}
        public function migratePageLocalizationDefinitions(array $givenConfig, array $expectedConfig) {}
        /**
         * @return array
         */
        public function migrateInlineLocalizationModeDataProvider() {}
        public function migrateInlineLocalizationMode(array $givenConfig, array $expectedConfig) {}
        /**
         * @return array
         */
        public function migrateMovesRequestUpdateCtrlFieldToColumnsDataProvider() {}
        public function migrateMovesRequestUpdateCtrlFieldToColumns(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesTypeInputDateTimeToRenderTypeDataProvider() {}
        public function migrateMovesTypeInputDateTimeToRenderType(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesWizardsWithEnableByTypeConfigToColumnsOverridesDataProvider() {}
        public function migrateMovesWizardsWithEnableByTypeConfigToColumnsOverrides(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateRewritesColorpickerWizardDataProvider() {}
        public function migrateRewritesColorpickerWizard(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesSelectWizardToValuePickerDataProvider() {}
        public function migrateMovesSelectWizardToValuePicker(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesSliderWizardToSliderConfigurationDataProvider() {}
        public function migrateMovesSliderWizardToSliderConfiguration(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesLinkWizardToRenderTypeWithFieldControlDataProvider() {}
        public function migrateMovesLinkWizardToRenderTypeWithFieldControl(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesEditWizardToFieldControlDataProvider() {}
        public function migrateMovesEditWizardToFieldControl(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesAddWizardToFieldControlDataProvider() {}
        public function migrateMovesAddWizardToFieldControl(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesListWizardToFieldControlDataProvider() {}
        public function migrateMovesListWizardToFieldControl(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesLastDefaultExtrasValuesDataProvider() {}
        public function migrateMovesLastDefaultExtrasValues(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesTableWizardToRenderTypeDataProvider() {}
        public function migrateMovesTableWizardToRenderType(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateMovesFullScreenRichtextWizardToFieldControlDataProvider() {}
        public function migrateMovesFullScreenRichtextWizardToFieldControl(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateSuggestWizardDataProvider() {}
        public function migrateSuggestWizard(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateOptionsOfTypeGroupDataProvider() {}
        public function migrateOptionsOfTypeGroup(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateSelectSingleShowIconTableDataProvider() {}
        public function migrateSelectSingleShowIconTable(array $input, array $expected) {}
        /**
         * @return array
         */
        public function migrateImageManipulationRatiosDataProvider() {}
        public function migrateImageManipulationRatios(array $input, array $expected) {}
        /**
         * @test
         */
        public function migrateinputDateTimeMaxNotDefinedAndRenderTypeNotDefined() {}
        /**
         * @test
         */
        public function migrateinputDateTimeMaxNotDefinedAndRenderTypeNotInputDateTime() {}
        /**
         * @test
         */
        public function migrateinputDateTimeMaxNotDefined() {}
        /**
         * @test
         */
        public function migrateinputDateTimeMaxDefined() {}
        /**
         * @test
         */
        public function migrateinputDateTimeMaxDefinedAndRenderTypeNotDefined() {}
        /**
         * @test
         */
        public function migrateinputDateTimeMaxDefinedAndRenderTypeNotDateTime() {}
        /**
         * @test
         */
        public function migrateForeignTypesOverride() {}
        /**
         * @test
         */
        public function migrateForeignTypesMergedIntoExistingOverrideChildTca() {}
        /**
         * @test
         */
        public function migrateForeignDefaultsOverride() {}
        /**
         * @test
         */
        public function migrateForeignSelectorOverrides() {}
        /**
         * @test
         */
        public function migrateAllOverridesFromColumnOverride() {}
        /**
         * @test
         */
        public function migratePartlyOverridesFromColumnOverride() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Crypto {
    /**
     * Test case
     */
    class RandomTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function generateRandomBytesReturnsExpectedAmountOfBytes() {}
        /**
         * Data provider for generateRandomHexStringReturnsExpectedAmountOfChars
         *
         * @return array
         */
        public function generateRandomHexStringReturnsExpectedAmountOfCharsDataProvider() {}
        public function generateRandomHexStringReturnsExpectedAmountOfChars($numberOfChars) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Configuration {
    /**
     * Test case
     */
    class ConfigurationManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Configuration\ConfigurationManager|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        protected function setUp() {}
        protected function createSubjectWithMockedMethods(array $methods) {}
        /**
         * @test
         */
        public function getDefaultConfigurationExecutesDefinedDefaultConfigurationFile() {}
        /**
         * @test
         */
        public function getLocalConfigurationExecutesDefinedConfigurationFile() {}
        /**
         * @test
         */
        public function updateLocalConfigurationWritesNewMergedLocalConfigurationArray() {}
        /**
         * @test
         */
        public function getDefaultConfigurationValueByPathReturnsCorrectValue() {}
        /**
         * @test
         */
        public function getLocalConfigurationValueByPathReturnsCorrectValue() {}
        /**
         * @test
         */
        public function getConfigurationValueByPathReturnsCorrectValue() {}
        /**
         * @test
         */
        public function setLocalConfigurationValueByPathReturnFalseIfPathIsNotValid() {}
        /**
         * @test
         */
        public function setLocalConfigurationValueByPathUpdatesValueDefinedByPath() {}
        /**
         * @test
         */
        public function setLocalConfigurationValuesByPathValuePairsSetsPathValuePairs() {}
        /**
         * @test
         */
        public function removeLocalConfigurationKeysByPathRemovesGivenPathsFromConfigurationAndReturnsTrue() {}
        /**
         * @test
         */
        public function removeLocalConfigurationKeysByPathReturnsFalseIfNothingIsRemoved() {}
        /**
         * @test
         */
        public function removeLocalConfigurationKeysByPathReturnsFalseIfSomethingInexistentIsRemoved() {}
        /** @var $subject \TYPO3\CMS\Core\Configuration\ConfigurationManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function canWriteConfigurationReturnsFalseIfLocalConfigurationFileIsNotWritable() {}
        /** @var $subject \TYPO3\CMS\Core\Configuration\ConfigurationManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function canWriteConfigurationReturnsTrueIfDirectoryAndFilesAreWritable() {}
        /**
         * @test
         */
        public function writeLocalConfigurationWritesSortedContentToConfigurationFile() {}
        /**
         * @test
         */
        public function createLocalConfigurationFromFactoryConfigurationThrowsExceptionIfFileExists() {}
        /**
         * @test
         */
        public function createLocalConfigurationFromFactoryConfigurationWritesContentFromFactoryFile() {}
        /**
         * @test
         */
        public function createLocalConfigurationFromFactoryConfigurationMergesConfigurationWithAdditionalFactoryFile() {}
        /**
         * @test
         */
        public function isValidLocalConfigurationPathAcceptsWhitelistedPath() {}
        /** @var $subject \TYPO3\CMS\Core\Configuration\ConfigurationManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function isValidLocalConfigurationPathDeniesNotWhitelistedPath() {}
    }

    /**
     * Test case
     */
    class RichtextTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getConfigurationUsesOverruleModeFromType() {}
        /**
         * @test
         */
        public function getConfigurationUsesOverruleModeFromConfig() {}
        /**
         * @test
         */
        public function getConfigurationSetsOverruleModeIfMissing() {}
        /**
         * @test
         */
        public function getConfigurationOverridesByDefault() {}
        /**
         * @test
         */
        public function getConfigurationOverridesByFieldSpecificConfig() {}
        /**
         * @test
         */
        public function getConfigurationOverridesByFieldAndTypeSpecificConfig() {}
        /**
         * @test
         */
        public function getConfigurationPageTsOverridesPreset() {}
    }

    /**
     * Test case
     */
    class ExtensionConfigurationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getThrowExceptionIfExtensionConfigurationDoesNotExist() {}
        /**
         * @test
         */
        public function getWithEmptyPathReturnsEntireExtensionConfiguration() {}
        /**
         * @test
         */
        public function getWithPathReturnsGivenValue() {}
        /**
         * @test
         */
        public function getWithPathReturnsGivenPathSegment() {}
        /**
         * @test
         */
        public function setThrowsExceptionWithEmptyExtension() {}
        /**
         * @test
         */
        public function setRemovesFullExtensionConfiguration() {}
        /**
         * @test
         */
        public function setRemovesPath() {}
        /**
         * @test
         */
        public function setWritesFullExtensionConfig() {}
        /**
         * @test
         */
        public function setWritesPath() {}
        /**
         * @test
         */
        public function setUpdatesLegacyExtConfToNewValues() {}
        /**
         * @test
         */
        public function setUpdatesLegacyExtConfWithDottedArrayKeysForNestedConfiguration() {}
        /**
         * @test
         */
        public function setUpdatesLegacyExtConfWithDottedArrayKeysForNestedConfigurationWithMultiNestedArrays() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Configuration\FlexForm {
    /**
     * Test case
     */
    class FlexFormToolsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getDataStructureIdentifierCallsRegisteredPreProcessHook() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfPreProcessHookReturnsNoArray() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierUsesCasualLogicIfPreProcessHookReturnsNoIdentifier() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsStringFromPreProcessHook() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsStringFromFirstMatchingPreProcessHook() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierCallsRegisteredPostProcessHook() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfPostProcessHookReturnsNoArray() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfPostProcessHookReturnsEmptyArray() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierPostProcessHookCanEnrichIdentifier() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfDsIsNotAnArrayAndNoDsPointerField() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsDefaultIfDsIsSetButNoDsPointerField() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionsIfNoDsPointerFieldIsSetAndDefaultDoesNotExist() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfPointerFieldStringHasMoreThanTwoFields() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfPointerFieldWithStringSingleFieldDoesNotExist() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfPointerFieldSWithTwoFieldsFirstDoesNotExist() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfPointerFieldSWithTwoFieldsSecondDoesNotExist() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsPointerFieldValueIfDataStructureExists() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsDefaultIfPointerFieldValueDoesNotExist() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfPointerFieldValueDoesNotExistAndDefaultToo() {}
        /**
         * Data provider for getDataStructureIdentifierReturnsValidNameForTwoFieldCombinations
         */
        public function getDataStructureIdentifierReturnsValidNameForTwoFieldCombinationsDataProvider() {}
        public function getDataStructureIdentifierReturnsValidNameForTwoFieldCombinations(array $row, array $ds, string $expected) {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionForTwoFieldsWithNoMatchAndNoDefault() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfParentRowLookupFails() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfParentRowsFormALoop() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfNoValidPointerFoundUntilRoot() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfNoValidPointerValueFound() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfResorvedPointerValueIsIntegerButDsFieldNameIsNotConfigured() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierThrowsExceptionIfDsTableFieldIsMisconfigured() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsValidIdentifierForPointerField() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsValidIdentifierForParentLookup() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsValidIdentifierForParentLookupAndBreaksLoop() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsValidIdentifierForParentLookupAndPrefersSubField() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsValidIdentifierForTableAndFieldPointer() {}
        /**
         * @test
         */
        public function getDataStructureIdentifierReturnsValidIdentifierForTableAndFieldPointerWithParentLookup() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionWithEmptyString() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierIfIdentifierDoesNotResolveToArray() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierCallsRegisteredHook() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionIfHookReturnsNoString() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierUsesCasualLogicIfHookReturnsNoIdentifier() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierParsesDataStructureReturnedByHook() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierParsesDataStructureFromFirstMatchingHook() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionForInvalidSyntax() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionForIncompleteTcaSyntax() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionForInvalidTcaSyntaxPointer() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierResolvesTcaSyntaxPointer() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionForIncompleteRecordSyntax() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierResolvesRecordSyntaxPointer() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionIfDataStructureFileDoesNotExist() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierFetchesFromFile() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionForInvalidXmlStructure() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionIfStructureHasBothSheetAndRoot() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierCreatesDefaultSheet() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierResolvesExtReferenceForSingleSheets() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierResolvesExtReferenceForSingleSheetsWithFilePrefix() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierCallsPostProcessHook() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierThrowsExceptionIfPostProcessHookReturnsNoArray() {}
        /**
         * @test
         */
        public function parseDataStructureByIdentifierPostProcessHookManipulatesDataStructure() {}
        /**
         * @test
         */
        public function traverseFlexFormXmlDataRecurseDoesNotFailOnNotExistingField() {}
        /** @var \TYPO3\CMS\Core\Configuration\FlexForm\FlexFormTools|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function traverseFlexFormXmlDataRecurseDoesNotFailOnNotExistingArrayField() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Configuration\FlexForm\Fixtures {
    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureParsePostProcessHookReturnArray {
        public function parseDataStructureByIdentifierPostProcess(array $dataStructure, array $identifier) : array {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureIdentifierPreProcessHookReturnString {
        public function getDataStructureIdentifierPreProcess(array $fieldTca, string $tableName, string $fieldName, array $row) : string {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureIdentifierPostProcessHookReturnString {
        public function getDataStructureIdentifierPostProcess(array $fieldTca, string $tableName, string $fieldName, array $row, array $identifier) : string {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureIdentifierPostProcessHookThrowException {
        public function getDataStructureIdentifierPostProcess(array $fieldTca, string $tableName, string $fieldName, array $row, array $identifier) : array {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureParsePreProcessHookThrowException {
        public function parseDataStructureByIdentifierPreProcess(array $identifier) : string {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureParsePostProcessHookThrowException {
        public function parseDataStructureByIdentifierPostProcess(array $dataStructure, array $identifier) : array {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureIdentifierPreProcessHookReturnArray {
        public function getDataStructureIdentifierPreProcess(array $fieldTca, string $tableName, string $fieldName, array $row) : array {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureIdentifierPreProcessHookThrowException {
        public function getDataStructureIdentifierPreProcess(array $fieldTca, string $tableName, string $fieldName, array $row) : array {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureIdentifierPostProcessHookReturnEmptyArray {
        public function getDataStructureIdentifierPostProcess(array $fieldTca, string $tableName, string $fieldName, array $row, array $identifier) : array {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureParsePostProcessHookReturnString {
        public function parseDataStructureByIdentifierPostProcess(array $dataStructure, array $identifier) : string {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureParsePreProcessHookReturnObject {
        public function parseDataStructureByIdentifierPreProcess(array $identifier) : \stdClass {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureIdentifierPreProcessHookReturnEmptyArray {
        public function getDataStructureIdentifierPreProcess(array $fieldTca, string $tableName, string $fieldName, array $row) : array {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureParsePreProcessHookReturnEmptyString {
        public function parseDataStructureByIdentifierPreProcess(array $identifier) : string {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureParsePreProcessHookReturnString {
        public function parseDataStructureByIdentifierPreProcess(array $identifier) : string {}
    }

    /**
     * Fixture to test hooks from FlexFormTools
     */
    class DataStructureIdentifierPostProcessHookReturnArray {
        public function getDataStructureIdentifierPostProcess(array $fieldTca, string $tableName, string $fieldName, array $row, array $identifier) : array {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Configuration\TypoScript\ConditionMatching {
    /**
     * Test cases
     */
    class AbstractConditionMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Core\ApplicationContext
         */
        protected $backupApplicationContext;
        /**
         * @var AbstractConditionMatcher|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $conditionMatcher;
        /**
         * @var \ReflectionMethod
         */
        protected $evaluateConditionCommonMethod;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * Data provider with matching applicationContext conditions.
         *
         * @return array[]
         */
        public function matchingApplicationContextConditionsDataProvider() {}
/** @var \TYPO3\CMS\Core\Core\ApplicationContext $applicationContext */
        public function evaluateConditionCommonReturnsTrueForMatchingContexts(/** @var \TYPO3\CMS\Core\Core\ApplicationContext $applicationContext */
$matchingContextCondition) {}
        /**
         * Data provider with not matching applicationContext conditions.
         *
         * @return array[]
         */
        public function notMatchingApplicationContextConditionsDataProvider() {}
/** @var \TYPO3\CMS\Core\Core\ApplicationContext $applicationContext */
        public function evaluateConditionCommonReturnsNullForNotMatchingApplicationContexts(/** @var \TYPO3\CMS\Core\Core\ApplicationContext $applicationContext */
$notMatchingApplicationContextCondition) {}
        /**
         * Data provider for evaluateConditionCommonEvaluatesIpAddressesCorrectly
         *
         * @return array[]
         */
        public function evaluateConditionCommonDevIpMaskDataProvider() {}
        public function evaluateConditionCommonEvaluatesIpAddressesCorrectly($devIpMask, $actualIp, $expectedResult) {}
        /**
         * @test
         */
        public function testUserFuncIsCalled() {}
        /**
         * @test
         */
        public function testUserFuncWithSingleArgument() {}
        /**
         * @test
         */
        public function testUserFuncWithIntegerZeroArgument() {}
        /**
         * @test
         */
        public function testUserFuncWithWhitespaceArgument() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleArguments() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsNullBoolString() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsNullStringBool() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsStringBoolNull() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsStringNullBool() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsBoolNullString() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsBoolStringNull() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsNullBoolStringSingleQuotes() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsNullStringBoolSingleQuotes() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsStringBoolNullSingleQuotes() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsStringNullBoolSingleQuotes() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsBoolNullStringSingleQuotes() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleDifferentArgumentsBoolStringNullSingleQuotes() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleSingleQuotedArguments() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleSoubleQuotedArguments() {}
        /**
         * @test
         */
        public function testUserFuncReturnsFalse() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleArgumentsAndQuotes() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleArgumentsAndQuotesAndSpaces() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleArgumentsAndQuotesAndSpacesStripped() {}
        /**
         * @test
         */
        public function testUserFuncWithSpacesInQuotes() {}
        /**
         * @test
         */
        public function testUserFuncWithMultipleArgumentsAndQuotesAndSpacesStrippedAndEscapes() {}
        /**
         * @test
         */
        public function testUserFuncWithQuoteMissing() {}
        /**
         * @test
         */
        public function testUserFuncWithQuotesInside() {}
        /**
         * @test
         */
        public function testUserFuncWithClassMethodCall() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Configuration\TypoScript\ConditionMatching\Fixtures {
    /**
     * Fixture for TYPO3\CMS\Core\Utility\GeneralUtility
     */
    class GeneralUtilityFixture extends \typo3\cms\core\utility\generalutility {
        public static function setApplicationContext($applicationContext) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Configuration\Loader {
    /**
     * Test case for the YAML file loader class
     */
    class YamlFileLoaderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Generic method to check if the load method returns an array from a YAML file
         * @test
         */
        public function load() {}
        /**
         * Method checking for imports that they have been processed properly
         * @test
         */
        public function loadWithAnImport() {}
        /**
         * Method checking for placeholders
         * @test
         */
        public function loadWithPlacholders() {}
        /**
         * dataprovider for tests isPlaceholderTest
         * @return array
         */
        public function isPlaceholderDataProvider() {}
        public function isPlaceholderTest($placeholderValue, bool $expected) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Page {
    /**
     * Unit test case
     *
     * @see According functional test case
     */
    class PageRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function renderMethodCallsResetInAnyCase() {}
        /**
         * @test
         */
        public function includingNotAvailableLocalJqueryVersionThrowsException() {}
        /**
         * @test
         */
        public function includingJqueryWithNonAlphnumericNamespaceThrowsException() {}
        /**
         * @test
         */
        public function addBodyContentAddsContent() {}
        /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function addInlineLanguageLabelFileSetsInlineLanguageLabelFiles() {}
        /**
         * @test
         */
        public function addInlineLanguageLabelFileSetsTwoDifferentInlineLanguageLabelFiles() {}
        /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function addInlineLanguageLabelFileDoesNotSetSameLanguageFileTwice() {}
        /**
         * @test
         */
        public function includeLanguageFileForInlineThrowsExceptionIfLangIsNotSet() {}
        /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function includeLanguageFileForInlineThrowsExceptionIfCharSetIsNotSet() {}
        /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function includeLanguageFileForInlineDoesNotAddToInlineLanguageLabelsIfFileCouldNotBeRead() {}
        /**
         * @return array
         */
        public function includeLanguageFileForInlineAddsProcessesLabelsToInlineLanguageLabelsProvider() {}
/** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function includeLanguageFileForInlineAddsProcessesLabelsToInlineLanguageLabels(/** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$llFileContent, /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$selectionPrefix, /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$stripFromSelectionName, /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$expectation) {}
        /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function getAddedMetaTag() {}
        /** @var \TYPO3\CMS\Core\Page\PageRenderer|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function overrideMetaTag() {}
        /**
         * @test
         */
        public function unsetAddedMetaTag() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\TimeTracker {
    /**
     * Class TimeTrackerTest
     */
    class TimeTrackerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getParseTimeReturnsZeroOrOneIfNoValuesAreSet() {}
        /**
         * @test
         */
        public function getParseTimeReturnsTotalParseTimeInMillisecondsWithoutBeUserInitialization() {}
        /**
         * @test
         */
        public function getParseTimeReturnsParseTimeIfOnlyOneBeUserTimeWasSet() {}
        /**
         * @test
         */
        public function getParseTimeReturnsParseTimeIfNoBeUserTimeWasSet() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Core {
    /**
     * Testcase for the ApplicationContext class
     */
    class ApplicationContextTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider with allowed contexts.
         *
         * @return array
         */
        public function allowedContexts() {}
        public function contextStringCanBeSetInConstructorAndReadByCallingToString($allowedContext) {}
        /**
         * Data provider with forbidden contexts.
         *
         * @return array
         */
        public function forbiddenContexts() {}
        public function constructorThrowsExceptionIfMainContextIsForbidden($forbiddenContext) {}
        /**
         * Data provider with expected is*() values for various contexts.
         *
         * @return array
         */
        public function isMethods() {}
        public function contextMethodsReturnTheCorrectValues($contextName, $isDevelopment, $isProduction, $isTesting, $parentContext) {}
        /**
         * @test
         */
        public function parentContextIsConnectedRecursively() {}
    }

    /**
     * Testcase
     */
    class SystemEnvironmentBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Core\SystemEnvironmentBuilder|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;

        /**
         * Set up testcase
         */
        protected function setUp() {}
        /**
         * Data provider for 'fileDenyPatternMatchesPhpExtension' test case.
         *
         * @return array
         */
        public function fileDenyPatternMatchesPhpExtensionDataProvider() {}
        public function fileDenyPatternMatchesPhpExtension($phpExtension) {}
        /**
         * @test
         */
        public function getPathThisScriptCliReadsLocalPartFromArgv() {}
        /**
         * @test
         */
        public function getPathThisScriptCliReadsLocalPartFromEnv() {}
        /**
         * @test
         */
        public function getPathThisScriptCliReadsLocalPartFromServer() {}
        /**
         * @test
         */
        public function getPathThisScriptCliAddsCurrentWorkingDirectoryFromServerEnvironmentToLocalPathOnUnix() {}
        /**
         * @test
         */
        public function initializeGlobalVariablesSetsGlobalTypo3MiscArray() {}
        /**
         * @test
         */
        public function initializeGlobalVariablesSetsGlobalT3VarArray() {}
        /**
         * @test
         */
        public function initializeGlobalVariablesSetsGlobalT3ServicesArray() {}
        /**
         * Data provider for initializeGlobalTimeTrackingVariablesSetsGlobalVariables
         *
         * @return array
         */
        public function initializeGlobalTimeTrackingVariablesSetsGlobalVariablesDataProvider() {}
        public function initializeGlobalTimeTrackingVariablesSetsGlobalVariables($variable) {}
        /**
         * @test
         */
        public function initializeGlobalTimeTrackingVariablesSetsGlobalTypo3MiscMicrotimeStart() {}
        /**
         * @test
         */
        public function initializeGlobalTimeTrackingVariablesRoundsAccessTimeToSixtySeconds() {}
        /**
         * @test
         */
        public function initializeGlobalTimeTrackingVariablesRoundsSimAccessTimeToSixtySeconds() {}
        /**
         * @test
         */
        public function initializeBasicErrorReportingExcludesStrict() {}
        /**
         * @test
         */
        public function initializeBasicErrorReportingExcludesNotice() {}
        /**
         * @test
         */
        public function initializeBasicErrorReportingExcludesDeprecated() {}
    }

    /**
     * Testcase for the ClassLoadingInformationGenerator class
     */
    class ClassLoadingInformationGeneratorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function buildClassAliasMapForPackageThrowsExceptionForWrongComposerManifestInformation() {}
        /**
         * @test
         */
        public function buildClassAliasMapForPackageThrowsExceptionForWrongClassAliasMapFile() {}
        /**
         * @test
         */
        public function buildClassAliasMapForPackageReturnsClassAliasMapForClassAliasMapFile() {}
        /** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
        public function buildClassAliasMapForPackageReturnsClassAliasMapForComposerManifestInformation() {}
        /**
         * Data provider for different autoload information
         *
         * @return array
         */
        public function autoloadFilesAreBuildCorrectlyDataProvider() {}
/** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
        public function autoloadFilesAreBuildCorrectly(/** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
$packageManifest, /** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
$expectedPsr4Files, /** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
$expectedClassMapFiles) {}
        /**
         * Data provider for different autoload information
         *
         * @return array
         */
        public function autoloadDevFilesAreBuildCorrectlyDataProvider() {}
/** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
        public function autoloadDevFilesAreBuildCorrectly(/** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
$packageManifest, /** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
$expectedPsr4Files, /** @var ClassLoader|\PHPUnit_Framework_MockObject_MockObject $classLoaderMock */
$expectedClassMapFiles) {}
        protected function createPackageMock($packageManifest) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Core\Fixtures\test_extension\Resources\PHP {
    /**
     * Class Test
     */
    class AnotherTestFile {}

    /**
     * Class Test
     */
    class Test {}

}

namespace TYPO3\CMS\Core\Tests\Unit\Core\Fixtures\test_extension\Resources\PHP\Subdirectory {
    /**
     * Class Test
     */
    class SubdirectoryTest {}

}

namespace TYPO3\CMS\Core\Tests\Unit\Cache {
    /**
     * Testcase for the TYPO3\CMS\Core\Cache\CacheManager
     *
     * This file is a backport from FLOW3
     */
    class CacheManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function managerThrowsExceptionOnCacheRegistrationWithAlreadyExistingIdentifier() {}
        /**
         * @test
         */
        public function managerReturnsThePreviouslyRegisteredCache() {}
        /**
         * @test
         */
        public function getCacheThrowsExceptionForNonExistingIdentifier() {}
        /**
         * @test
         */
        public function hasCacheReturnsCorrectResult() {}
        /**
         * @test
         */
        public function flushCachesByTagCallsTheFlushByTagMethodOfAllRegisteredCaches() {}
        /**
         * @test
         */
        public function flushCachesByTagsCallsTheFlushByTagsMethodOfAllRegisteredCaches() {}
        /**
         * @test
         */
        public function flushCachesCallsTheFlushMethodOfAllRegisteredCaches() {}
        /**
         * @test
         */
        public function flushCachesInGroupThrowsExceptionForNonExistingGroup() {}
        /**
         * @test
         */
        public function flushCachesInGroupByTagThrowsExceptionForNonExistingGroup() {}
        /**
         * @test
         */
        public function getCacheThrowsExceptionIfConfiguredFrontendDoesNotImplementFrontendInterface() {}
        /**
         * @test
         */
        public function getCacheThrowsExceptionIfConfiguredBackendDoesNotImplementBackendInterface() {}
        /**
         * @test
         */
        public function getCacheCallsInitializeObjectOnFrontendInstance() {}
        /**
         * @test
         */
        public function getCacheCallsInitializeObjectOnBackendInstance() {}
        /**
         * @test
         */
        public function getCacheCreatesBackendWithGivenConfiguration() {}
        /**
         * @test
         */
        public function getCacheCreatesCacheInstanceWithFallbackToDefaultFrontend() {}
        /**
         * @test
         */
        public function getCacheCreatesCacheInstanceWithFallbackToDefaultBackend() {}
        /**
         * @test
         */
        public function getCacheReturnsInstanceOfTheSpecifiedCacheFrontend() {}
        /**
         * @test
         */
        public function getCacheGivesIdentifierToCacheFrontend() {}
        /**
         * @test
         */
        public function getCacheGivesBackendInstanceToCacheFrontend() {}
        /**
         * @test
         */
        public function flushCachesInGroupByTagsWithEmptyTagsArrayDoesNotFlushCaches() {}
        /**
         * @test
         */
        public function flushCachesInGroupByTagsDeletesByTag() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Cache\Frontend {
    /**
     * Testcase for the abstract cache frontend
     *
     * This file is a backport from FLOW3
     */
    class AbstractFrontendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function theConstructorAcceptsValidIdentifiers() {}
        /**
         * @test
         */
        public function theConstructorRejectsInvalidIdentifiers() {}
        /**
         * @test
         */
        public function flushCallsBackend() {}
        /**
         * @test
         */
        public function flushByTagRejectsInvalidTags() {}
        /**
         * @test
         */
        public function flushByTagCallsBackendIfItIsATaggableBackend() {}
        /**
         * @test
         */
        public function flushByTagsCallsBackendIfItIsATaggableBackend() {}
        /**
         * @test
         */
        public function collectGarbageCallsBackend() {}
        /**
         * @test
         */
        public function invalidEntryIdentifiersAreRecognizedAsInvalid() {}
        /**
         * @test
         */
        public function validEntryIdentifiersAreRecognizedAsValid() {}
        /**
         * @test
         */
        public function invalidTagsAreRecognizedAsInvalid() {}
        /**
         * @test
         */
        public function validTagsAreRecognizedAsValid() {}
    }

    /**
     * Testcase for the PHP source code cache frontend
     *
     * This file is a backport from FLOW3
     */
    class PhpFrontendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function setChecksIfTheIdentifierIsValid() {}
        /**
         * @test
         */
        public function setPassesPhpSourceCodeTagsAndLifetimeToBackend() {}
        /**
         * @test
         */
        public function setThrowsInvalidDataExceptionOnNonStringValues() {}
        /**
         * @test
         */
        public function requireOnceCallsTheBackendsRequireOnceMethod() {}
    }

    /**
     * Testcase for the variable cache frontend
     *
     * This file is a backport from FLOW3
     */
    class VariableFrontendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function setChecksIfTheIdentifierIsValid() {}
        /**
         * @test
         */
        public function setPassesSerializedStringToBackend() {}
        /**
         * @test
         */
        public function setPassesSerializedArrayToBackend() {}
        /**
         * @test
         */
        public function setPassesLifetimeToBackend() {}
        /**
         * @test
         */
        public function getFetchesStringValueFromBackend() {}
        /**
         * @test
         */
        public function getFetchesArrayValueFromBackend() {}
        /**
         * @test
         */
        public function getFetchesFalseBooleanValueFromBackend() {}
        /**
         * @test
         */
        public function hasReturnsResultFromBackend() {}
        /**
         * @test
         */
        public function removeCallsBackend() {}
    }

    /**
     * Testcase for the string cache frontend
     *
     * This file is a backport from FLOW3
     */
    class StringFrontendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function setChecksIfTheIdentifierIsValid() {}
        /**
         * @test
         */
        public function setPassesStringToBackend() {}
        /**
         * @test
         */
        public function setPassesLifetimeToBackend() {}
        /**
         * @test
         */
        public function setThrowsInvalidDataExceptionOnNonStringValues() {}
        /**
         * @test
         */
        public function getFetchesStringValueFromBackend() {}
        /**
         * @test
         */
        public function hasReturnsResultFromBackend() {}
        /**
         * @test
         */
        public function removeCallsBackend() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Cache\Backend {
    /**
     * Test case
     */
    class AbstractBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function theConstructorCallsSetterMethodsForAllSpecifiedOptions() {}
    }

    /**
     * Test case
     */
    class Typo3DatabaseBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function setCacheCalculatesCacheTableName() {}
        /**
         * @test
         */
        public function setCacheCalculatesTagsTableName() {}
        /**
         * @test
         */
        public function setThrowsExceptionIfFrontendWasNotSet() {}
        /**
         * @test
         */
        public function setThrowsExceptionIfDataIsNotAString() {}
        /**
         * @test
         */
        public function getThrowsExceptionIfFrontendWasNotSet() {}
        /**
         * @test
         */
        public function hasThrowsExceptionIfFrontendWasNotSet() {}
        /**
         * @test
         */
        public function removeThrowsExceptionIfFrontendWasNotSet() {}
        /**
         * @test
         */
        public function collectGarbageThrowsExceptionIfFrontendWasNotSet() {}
        /**
         * @test
         */
        public function findIdentifiersByTagThrowsExceptionIfFrontendWasNotSet() {}
        /**
         * @test
         */
        public function flushThrowsExceptionIfFrontendWasNotSet() {}
        /**
         * @test
         */
        public function flushRemovesAllCacheEntries() {}
        public function flushByTagCallsDeleteOnConnection() {}
        public function flushByTagsCallsDeleteOnConnection() {}
        /**
         * @test
         */
        public function flushByTagThrowsExceptionIfFrontendWasNotSet() {}
        /**
         * @test
         */
        public function flushByTagsThrowsExceptionIfFrontendWasNotSet() {}
    }

    /**
     * Testcase for the WinCache cache backend
     */
    class WincacheBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function setThrowsExceptionIfNoFrontEndHasBeenSet() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndCheckExistenceInCache() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndGetEntry() {}
        /**
         * @test
         */
        public function itIsPossibleToRemoveEntryFromCache() {}
        /**
         * @test
         */
        public function itIsPossibleToOverwriteAnEntryInTheCache() {}
        /**
         * @test
         */
        public function findIdentifiersByTagFindsSetEntries() {}
        /**
         * @test
         */
        public function setRemovesTagsFromPreviousSet() {}
        /**
         * @test
         */
        public function hasReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function removeReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function flushByTagRemovesCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function flushByTagsRemovesCacheEntriesWithSpecifiedTags() {}
        /**
         * @test
         */
        public function flushRemovesAllCacheEntries() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $thatCache */
        public function flushRemovesOnlyOwnEntries() {}
        /**
         * Check if we can store ~5 MB of data
         *
         * @test
         */
        public function largeDataIsStored() {}
        /**
         * @test
         */
        public function setTagsOnlyOnceToIdentifier() {}
/** @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache */
        protected function setUpBackend(/** @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache */
$accessible = false) {}
    }

    /**
     * Testcase for the APC cache backend.
     *
     * NOTE: If you want to execute these tests you need to enable apc in
     * cli context (apc.enable_cli = 1)
     *
     * This file is a backport from FLOW3
     */
    class ApcBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function setThrowsExceptionIfNoFrontEndHasBeenSet() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndCheckExistenceInCache() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndGetEntry() {}
        /**
         * @test
         */
        public function itIsPossibleToRemoveEntryFromCache() {}
        /**
         * @test
         */
        public function itIsPossibleToOverwriteAnEntryInTheCache() {}
        /**
         * @test
         */
        public function findIdentifiersByTagFindsSetEntries() {}
        /**
         * @test
         */
        public function setRemovesTagsFromPreviousSet() {}
        /** @var $backendMock \PHPUnit_Framework_MockObject_MockObject|ApcBackend */
        public function setCacheIsSettingIdentifierPrefixWithCacheIdentifier() {}
        /**
         * @test
         */
        public function hasReturnsFalseIfTheEntryDoesNotExist() {}
        /**
         * @test
         */
        public function removeReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function flushByTagRemovesCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function flushByTagsRemovesCacheEntriesWithSpecifiedTags() {}
        /**
         * @test
         */
        public function flushRemovesAllCacheEntries() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $thatCache */
        public function flushRemovesOnlyOwnEntries() {}
        /**
         * Check if we can store ~5 MB of data
         *
         * @test
         */
        public function largeDataIsStored() {}
        /**
         * @test
         */
        public function setTagsOnlyOnceToIdentifier() {}
/** @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache */
        protected function setUpBackend(/** @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Cache\Frontend\FrontendInterface $cache */
$accessible = false) {}
    }

    /**
     * Testcase for the File cache backend
     *
     * This file is a backport from FLOW3
     */
    class FileBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function setCacheDirectoryThrowsExceptionOnNonWritableDirectory() {}
        /**
         * @test
         */
        public function setCacheDirectoryAllowsAbsolutePathWithoutTrailingSlash() {}
        /**
         * @test
         */
        public function setCacheDirectoryAllowsAbsolutePathWithTrailingSlash() {}
        /**
         * @test
         */
        public function setCacheDirectoryAllowsRelativePathWithoutTrailingSlash() {}
        /**
         * @test
         */
        public function setCacheDirectoryAllowsRelativePathWithTrailingSlash() {}
        /**
         * @test
         */
        public function setCacheDirectoryAllowsRelativeDottedPathWithoutTrailingSlash() {}
        /**
         * @test
         */
        public function setCacheDirectoryAllowsRelativeDottedPathWithTrailingSlash() {}
        /**
         * @test
         */
        public function setCacheDirectoryAllowsAbsoluteDottedPathWithoutTrailingSlash() {}
        /**
         * @test
         */
        public function setCacheDirectoryAllowsAbsoluteDottedPathWithTrailingSlash() {}
        /**
         * @test
         */
        public function getCacheDirectoryReturnsTheCurrentCacheDirectory() {}
        /**
         * @test
         */
        public function aDedicatedCacheDirectoryIsUsedForCodeCaches() {}
        /**
         * @test
         */
        public function setThrowsExceptionIfDataIsNotAString() {}
        /**
         * @test
         */
        public function setReallySavesToTheSpecifiedDirectory() {}
        /**
         * @test
         */
        public function setOverwritesAnAlreadyExistingCacheEntryForTheSameIdentifier() {}
        /**
         * @test
         */
        public function setAlsoSavesSpecifiedTags() {}
        /**
         * @test
         */
        public function setCacheDetectsAndLoadsAFrozenCache() {}
        /**
         * @test
         */
        public function getReturnsContentOfTheCorrectCacheFile() {}
        /**
         * @test
         */
        public function getReturnsFalseForExpiredEntries() {}
        /**
         * @test
         */
        public function getDoesNotCheckIfAnEntryIsExpiredIfTheCacheIsFrozen() {}
        /**
         * @test
         */
        public function hasReturnsTrueIfAnEntryExists() {}
        /**
         * @test
         */
        public function hasReturnsFalseForExpiredEntries() {}
        /**
         * @test
         */
        public function hasDoesNotCheckIfAnEntryIsExpiredIfTheCacheIsFrozen() {}
        /**
         * @test
         */
        public function removeReallyRemovesACacheEntry() {}
        /**
         */
        public function invalidEntryIdentifiers() {}
        public function setThrowsExceptionForInvalidIdentifier($identifier) {}
        public function getThrowsExceptionForInvalidIdentifier($identifier) {}
        public function hasThrowsExceptionForInvalidIdentifier($identifier) {}
        public function removeThrowsExceptionForInvalidIdentifier($identifier) {}
        public function requireOnceThrowsExceptionForInvalidIdentifier($identifier) {}
        /**
         * @test
         */
        public function requireOnceIncludesAndReturnsResultOfIncludedPhpFile() {}
        /**
         * @test
         */
        public function requireOnceDoesNotCheckExpiryTimeIfBackendIsFrozen() {}
        /**
         * @test
         */
        public function findIdentifiersByTagFindsCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function findIdentifiersByTagDoesNotReturnExpiredEntries() {}
        /**
         * @test
         */
        public function flushRemovesAllCacheEntries() {}
        /**
         * @test
         */
        public function flushCreatesCacheDirectoryAgain() {}
        /**
         * @test
         */
        public function flushByTagRemovesCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function collectGarbageRemovesExpiredCacheEntries() {}
        /**
         * @test
         */
        public function flushUnfreezesTheCache() {}
    }

    /**
     * Testcase for the TransientMemory cache backend
     *
     * This file is a backport from FLOW3
     */
    class TransientMemoryBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function setThrowsExceptionIfNoFrontEndHasBeenSet() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndCheckExistenceInCache() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndGetEntry() {}
        /**
         * @test
         */
        public function itIsPossibleToRemoveEntryFromCache() {}
        /**
         * @test
         */
        public function itIsPossibleToOverwriteAnEntryInTheCache() {}
        /**
         * @test
         */
        public function findIdentifiersByTagFindsCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function hasReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function removeReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function flushByTagRemovesCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function flushByTagsRemovesCacheEntriesWithSpecifiedTags() {}
        /**
         * @test
         */
        public function flushRemovesAllCacheEntries() {}
    }

    /**
     * Testcase for the PDO cache backend
     */
    class PdoBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function setThrowsExceptionIfNoFrontEndHasBeenSet() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndCheckExistenceInCache() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndGetEntry() {}
        /**
         * @test
         */
        public function itIsPossibleToRemoveEntryFromCache() {}
        /**
         * @test
         */
        public function itIsPossibleToOverwriteAnEntryInTheCache() {}
        /**
         * @test
         */
        public function findIdentifiersByTagFindsSetEntries() {}
        /**
         * @test
         */
        public function setRemovesTagsFromPreviousSet() {}
        /**
         * @test
         */
        public function setOverwritesExistingEntryThatExceededItsLifetimeWithNewData() {}
        /**
         * @test
         */
        public function hasReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function removeReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function flushByTagRemovesCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function flushByTagsRemovesCacheEntriesWithSpecifiedTags() {}
        /**
         * @test
         */
        public function flushRemovesAllCacheEntries() {}
        /**
         * @test
         */
        public function flushRemovesOnlyOwnEntries() {}
        /**
         * @test
         */
        public function collectGarbageReallyRemovesAnExpiredCacheEntry() {}
        /**
         * @test
         */
        public function collectGarbageReallyRemovesAllExpiredCacheEntries() {}
        /**
         * Sets up the PDO backend used for testing
         *
         * @return \TYPO3\CMS\Core\Cache\Backend\PdoBackend
         */
        protected function setUpBackend() {}
    }

    /**
     * Test case for the APCu cache backend.
     *
     * NOTE: If you want to execute these tests you need to enable apc in
     * cli context (apc.enable_cli = 1) and disable slam defense (apc.slam_defense = 0)
     */
    class ApcuBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function setThrowsExceptionIfNoFrontEndHasBeenSet() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndCheckExistenceInCache() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndGetEntry() {}
        /**
         * @test
         */
        public function itIsPossibleToRemoveEntryFromCache() {}
        /**
         * @test
         */
        public function itIsPossibleToOverwriteAnEntryInTheCache() {}
        /**
         * @test
         */
        public function findIdentifiersByTagFindsSetEntries() {}
        /**
         * @test
         */
        public function setRemovesTagsFromPreviousSet() {}
        /**
         * @test
         */
        public function setCacheIsSettingIdentifierPrefixWithCacheIdentifier() {}
        /**
         * @test
         */
        public function hasReturnsFalseIfTheEntryDoesNotExist() {}
        /**
         * @test
         */
        public function removeReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function flushByTagRemovesCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function flushByTagsRemovesCacheEntriesWithSpecifiedTags() {}
        /**
         * @test
         */
        public function flushRemovesAllCacheEntries() {}
        /**
         * @test
         */
        public function flushRemovesOnlyOwnEntries() {}
        /**
         * Check if we can store ~5 MB of data
         *
         * @test
         */
        public function largeDataIsStored() {}
        /**
         * @test
         */
        public function setTagsOnlyOnceToIdentifier() {}
/** @var \PHPUnit_Framework_MockObject_MockObject|FrontendInterface $cache */
        protected function setUpBackend(/** @var \PHPUnit_Framework_MockObject_MockObject|FrontendInterface $cache */
$accessible = false) {}
    }

    /**
     * A caching backend which forgets everything immediately
     * Used in FactoryTest
     *
     * This file is a backport from FLOW3
     */
    class MockBackend extends \typo3\cms\core\cache\backend\nullbackend {
        /**
         * @var mixed
         */
        protected $someOption;

        public function setSomeOption($value) {}
        /**
         * Returns the option value
         *
         * @return mixed
         */
        public function getSomeOption() {}
    }

    /**
     * Testcase for the cache to redis backend
     *
     * This class has functional tests as well as implementation tests:
     * - The functional tests make API calls to the backend and check expected behaviour
     * - The implementation tests make additional calls with an own redis instance to
     * check stored data structures in the redis server, which can not be checked
     * by functional tests alone. Those tests will fail if any changes
     * to the internal data structure are done.
     *
     * Warning:
     * The unit tests use and flush redis database numbers 0 and 1!
     */
    class RedisBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * If set, the tearDown() method will flush the cache used by this unit test.
         *
         * @var \TYPO3\CMS\Core\Cache\Backend\RedisBackend
         */
        protected $backend;
        /**
         * Own redis instance used in implementation tests
         *
         * @var Redis
         */
        protected $redis;

        /**
         * Set up this testcase
         */
        protected function setUp() {}
        protected function setUpBackend(array $backendOptions = [ ]) {}
        /**
         * Sets up an own redis instance for implementation tests
         */
        protected function setUpRedis() {}
        /**
         * Tear down this testcase
         */
        protected function tearDown() {}
        /**
         * @test Functional
         */
        public function initializeObjectThrowsNoExceptionIfGivenDatabaseWasSuccessfullySelected() {}
        /**
         * @test Functional
         */
        public function setDatabaseThrowsExceptionIfGivenDatabaseNumberIsNotAnInteger() {}
        /**
         * @test Functional
         */
        public function setDatabaseThrowsExceptionIfGivenDatabaseNumberIsNegative() {}
        /**
         * @test Functional
         */
        public function setCompressionThrowsExceptionIfCompressionParameterIsNotOfTypeBoolean() {}
        /**
         * @test Functional
         */
        public function setCompressionLevelThrowsExceptionIfCompressionLevelIsNotInteger() {}
        /**
         * @test Functional
         */
        public function setCompressionLevelThrowsExceptionIfCompressionLevelIsNotBetweenMinusOneAndNine() {}
        /**
         * @test Functional
         */
        public function setConnectionTimeoutThrowsExceptionIfConnectionTimeoutIsNotInteger() {}
        /**
         * @test Functional
         */
        public function setConnectionTimeoutThrowsExceptionIfConnectionTimeoutIsNegative() {}
        /**
         * @test Functional
         */
        public function setThrowsExceptionIfIdentifierIsNotAString() {}
        /**
         * @test Functional
         */
        public function setThrowsExceptionIfDataIsNotAString() {}
        /**
         * @test Functional
         */
        public function setThrowsExceptionIfLifetimeIsNegative() {}
        /**
         * @test Functional
         */
        public function setThrowsExceptionIfLifetimeIsNotNullOrAnInteger() {}
        /**
         * @test Implementation
         */
        public function setStoresEntriesInSelectedDatabase() {}
        /**
         * @test Implementation
         */
        public function setSavesStringDataTypeForIdentifierToDataEntry() {}
        /**
         * @test Implementation
         */
        public function setSavesEntryWithDefaultLifeTime() {}
        /**
         * @test Implementation
         */
        public function setSavesEntryWithSpecifiedLifeTime() {}
        /**
         * @test Implementation
         */
        public function setSavesEntryWithUnlimitedLifeTime() {}
        /**
         * @test Functional
         */
        public function setOverwritesExistingEntryWithNewData() {}
        /**
         * @test Implementation
         */
        public function setOverwritesExistingEntryWithSpecifiedLifetime() {}
        /**
         * @test Implementation
         */
        public function setOverwritesExistingEntryWithNewDefaultLifetime() {}
        /**
         * @test Implementation
         */
        public function setOverwritesExistingEntryWithNewUnlimitedLifetime() {}
        /**
         * @test Implementation
         */
        public function setSavesSetDataTypeForIdentifierToTagsSet() {}
        /**
         * @test Implementation
         */
        public function setSavesSpecifiedTagsInIdentifierToTagsSet() {}
        /**
         * @test Implementation
         */
        public function setRemovesAllPreviouslySetTagsFromIdentifierToTagsSet() {}
        /**
         * @test Implementation
         */
        public function setRemovesMultiplePreviouslySetTagsFromIdentifierToTagsSet() {}
        /**
         * @test Implementation
         */
        public function setSavesSetDataTypeForTagToIdentifiersSet() {}
        /**
         * @test Implementation
         */
        public function setSavesIdentifierInTagToIdentifiersSetOfSpecifiedTag() {}
        /**
         * @test Implementation
         */
        public function setAppendsSecondIdentifierInTagToIdentifiersEntry() {}
        /**
         * @test Implementation
         */
        public function setRemovesIdentifierFromTagToIdentifiersEntryIfTagIsOmittedOnConsecutiveSet() {}
        /**
         * @test Implementation
         */
        public function setAddsIdentifierInTagToIdentifiersEntryIfTagIsAddedOnConsecutiveSet() {}
        /**
         * @test Implementation
         */
        public function setSavesCompressedDataWithEnabledCompression() {}
        /**
         * @test Implementation
         */
        public function setSavesPlaintextDataWithEnabledCompressionAndCompressionLevel0() {}
        /**
         * @test Functional
         */
        public function hasThrowsExceptionIfIdentifierIsNotAString() {}
        /**
         * @test Functional
         */
        public function hasReturnsFalseForNotExistingEntry() {}
        /**
         * @test Functional
         */
        public function hasReturnsTrueForPreviouslySetEntry() {}
        /**
         * @test Functional
         */
        public function getThrowsExceptionIfIdentifierIsNotAString() {}
        /**
         * @test Functional
         */
        public function getReturnsPreviouslyCompressedSetEntry() {}
        /**
         * @test Functional
         */
        public function getReturnsPreviouslySetEntry() {}
        /**
         * @test Functional
         */
        public function removeThrowsExceptionIfIdentifierIsNotAString() {}
        /**
         * @test Functional
         */
        public function removeReturnsFalseIfNoEntryWasDeleted() {}
        /**
         * @test Functional
         */
        public function removeReturnsTrueIfAnEntryWasDeleted() {}
        /**
         * @test Functional
         */
        public function removeDeletesEntryFromCache() {}
        /**
         * @test Implementation
         */
        public function removeDeletesIdentifierToTagEntry() {}
        /**
         * @test Implementation
         */
        public function removeDeletesIdentifierFromTagToIdentifiersSet() {}
        /**
         * @test Implementation
         */
        public function removeDeletesIdentifierFromTagToIdentifiersSetWithMultipleEntries() {}
        /**
         * @test Functional
         */
        public function findIdentifiersByTagThrowsExceptionIfTagIsNotAString() {}
        /**
         * @test Functional
         */
        public function findIdentifiersByTagReturnsEmptyArrayForNotExistingTag() {}
        /**
         * @test Functional
         */
        public function findIdentifiersByTagReturnsAllIdentifiersTagedWithSpecifiedTag() {}
        /**
         * @test Implementation
         */
        public function flushRemovesAllEntriesFromCache() {}
        /**
         * @test Functional
         */
        public function flushByTagThrowsExceptionIfTagIsNotAString() {}
        /**
         * @test Functional
         */
        public function flushByTagRemovesEntriesTaggedWithSpecifiedTag() {}
        /**
         * @test Functional
         */
        public function flushByTagsRemovesEntriesTaggedWithSpecifiedTags() {}
        /**
         * @test Implementation
         */
        public function flushByTagRemovesTemporarySet() {}
        /**
         * @test Implementation
         */
        public function flushByTagRemovesIdentifierToTagsSetOfEntryTaggedWithGivenTag() {}
        /**
         * @test Implementation
         */
        public function flushByTagDoesNotRemoveIdentifierToTagsSetOfUnrelatedEntry() {}
        /**
         * @test Implementation
         */
        public function flushByTagRemovesTagToIdentifiersSetOfGivenTag() {}
        /**
         * @test Implementation
         */
        public function flushByTagRemovesIdentifiersTaggedWithGivenTagFromTagToIdentifiersSets() {}
        /**
         * @test Implementation
         */
        public function collectGarbageDoesNotRemoveNotExpiredIdentifierToDataEntry() {}
        /**
         * @test Implementation
         */
        public function collectGarbageRemovesLeftOverIdentifierToTagsSet() {}
        /**
         * @test Implementation
         */
        public function collectGarbageRemovesExpiredIdentifierFromTagsToIdentifierSet() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Cache\Backend\Fixtures {
    /**
     * Fixture implementing one set option method.
     */
    class ConcreteBackendFixture extends \typo3\cms\core\cache\backend\abstractbackend {
        /**
         * @var string
         */
        protected $someOption;

        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function flush() {}
        public function flushByTag($tag) {}
        public function findIdentifiersByTag($tag) {}
        public function collectGarbage() {}
        public function setSomeOption($value) {}
        public function getSomeOption() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Cache\Fixtures {
    /**
* Frontend for cache manager test getCacheGivesBackendInstanceToCacheFrontend
*/
    class FrontendBackendInstanceFixture extends \typo3\cms\core\tests\unit\cache\fixtures\frontendfixture {
        public function __construct($_, $backend) {}
    }

    /**
* Fixture implementing frontend
*/
    class FrontendFixture implements \typo3\cms\core\cache\frontend\frontendinterface {
        /**
         * @var string
         */
        protected $identifier;

        public function __construct($identifier) {}
        public function getIdentifier() {}
        public function getBackend() {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function getByTag($tag) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function flush() {}
        public function flushByTag($tag) {}
        public function flushByTags(array $tags) {}
        public function collectGarbage() {}
        public function isValidEntryIdentifier($identifier) {}
        public function isValidTag($tag) {}
    }

    /**
     * Backend fixture for CacheManager test getCacheCreatesBackendWithGivenConfiguration()
     */
    class BackendConfigurationOptionFixture extends \typo3\cms\core\tests\unit\cache\fixtures\backendfixture {
        public function __construct($context, array $options = [ ]) {}
    }

    /**
* Frontend for cache manager test getCacheCreatesCacheInstanceWithFallbackToDefaultFrontend
*/
    class FrontendDefaultFixture extends \typo3\cms\core\tests\unit\cache\fixtures\frontendfixture {
        public function __construct() {}
    }

    /**
* Fixture implementing frontend
*/
    class FrontendInitializeObjectFixture extends \typo3\cms\core\tests\unit\cache\fixtures\frontendfixture {
        public function initializeObject() {}
    }

    /**
* Backend for cache manager test getCacheCreatesCacheInstanceWithFallbackToDefaultBackend
*/
    class BackendDefaultFixture extends \typo3\cms\core\tests\unit\cache\fixtures\backendfixture {
        public function __construct() {}
    }

    /**
* Frontend for cache manager test getCacheGivesIdentifierToCacheFrontend
*/
    class FrontendIdentifierFixture extends \typo3\cms\core\tests\unit\cache\fixtures\frontendfixture {
        public function __construct($identifier) {}
    }

    /**
     * Backend fixture to test cache manager.
     */
    class BackendFixture implements \typo3\cms\core\cache\backend\backendinterface {
        public function setCache(FrontendInterface $cache) {}
        public function set($entryIdentifier, $data, array $tags = [ ], $lifetime = null) {}
        public function get($entryIdentifier) {}
        public function has($entryIdentifier) {}
        public function remove($entryIdentifier) {}
        public function flush() {}
        public function collectGarbage() {}
    }

    /**
     * Fixture to test cache manager details
     */
    class BackendInitializeObjectFixture extends \typo3\cms\core\tests\unit\cache\fixtures\backendfixture {
        public function initializeObject() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Category {
    /**
     * Testcase for CategoryRegistry
     */
    class CategoryRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Category\CategoryRegistry
         */
        protected $subject;
        /**
         * @var array
         */
        protected $tables;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function doesAddReturnTrueOnDefinedTable() {}
        /**
         * @test
         */
        public function doesAddReturnTrueOnDefinedTableTheFirstTimeAndFalseTheSecondTime() {}
        /**
         * @test
         */
        public function doesAddThrowExceptionOnEmptyTablename() {}
        /**
         * @test
         */
        public function doesAddThrowExceptionOnEmptyExtensionKey() {}
        /**
         * @test
         */
        public function doesAddThrowExceptionOnInvalidTablename() {}
        /**
         * @test
         */
        public function doesAddThrowExceptionOnInvalidExtensionKey() {}
        /**
         * @test
         */
        public function areMultipleElementsOfSameExtensionRegistered() {}
        /**
         * @test
         */
        public function areElementsOfDifferentExtensionsRegistered() {}
        /**
         * @test
         */
        public function areElementsOfDifferentExtensionsOnSameTableRegistered() {}
        /**
         * @test
         */
        public function areElementsOfSameExtensionOnSameTableRegistered() {}
        /**
         * @test
         */
        public function areDatabaseDefinitionsOfAllElementsAvailable() {}
        /**
         * @test
         */
        public function areDatabaseDefinitionsOfParticularExtensionAvailable() {}
        /**
         * @test
         */
        public function areDefaultCategorizedTablesLoaded() {}
        /**
         * @test
         */
        public function canApplyTca() {}
        /**
         * @test
         */
        public function isRegisteredReturnsTrueIfElementIsAlreadyRegistered() {}
        /**
         * @test
         */
        public function isRegisteredReturnsFalseIfElementIsNotRegistered() {}
        /**
         * @test
         */
        public function tabIsAddedForElement() {}
        /**
         * @test
         */
        public function tabIsNotAddedForElementIfFieldListIsSpecified() {}
        /**
         * @test
         */
        public function tabIsOnlyAddedForTypesThatAreSpecifiedInTypesList() {}
        /**
         * @test
         */
        public function tabIsAddedOnlyOncePerTable() {}
        /**
         * @test
         */
        public function addAllowsSettingOfTheSameTableFieldTwice() {}
        /**
         * @test
         */
        public function addInitializesMissingTypes() {}
        /**
         * @test
         */
        public function addAddsOnlyOneSqlString() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Category\Collection {
    /**
     * Test case for \TYPO3\CMS\Core\Category\Collection\CategoryCollection
     */
    class CategoryCollectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         * @covers \TYPO3\CMS\Core\Category\Collection\CategoryCollection::__construct
         */
        public function missingTableNameArgumentForObjectCategoryCollection() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Mail {
    /**
     * Testcase for the TYPO3\CMS\Core\Mail\MailMessage class.
     */
    class MailMessageTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Mail\MailMessage
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @returns array
         */
        public function returnPathEmailAddressDataProvider() {}
        public function setReturnPathIdnaEncodesAddresses($address, $expected) {}
        /**
         * @returns array
         */
        public function senderEmailAddressDataProvider() {}
        public function setSenderIdnaEncodesAddresses($address, $expected) {}
        /**
         * @returns array
         */
        public function emailAddressesDataProvider() {}
        public function setFromIdnaEncodesAddresses($addresses, $expected) {}
        public function setReplyToIdnaEncodesAddresses($addresses, $expected) {}
        public function setToIdnaEncodesAddresses($addresses, $expected) {}
        public function setCcIdnaEncodesAddresses($addresses, $expected) {}
        public function setBccIdnaEncodesAddresses($addresses, $expected) {}
        public function setReadReceiptToIdnaEncodesAddresses($addresses, $expected) {}
    }

    /**
     * Testcase for the TYPO3\CMS\Core\Mail\Mailer class.
     */
    class MailerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Mail\Mailer
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function injectedSettingsAreNotReplacedByGlobalSettings() {}
        /**
         * @test
         */
        public function globalSettingsAreUsedIfNoSettingsAreInjected() {}
        /**
         * Data provider for wrongConfigurationThrowsException
         *
         * @return array Data sets
         */
        public static function wrongConfigurationProvider() {}
        public function wrongConfigurationThrowsException($settings) {}
        /**
         * @test
         */
        public function providingCorrectClassnameDoesNotThrowException() {}
        /**
         * @test
         */
        public function noPortSettingSetsPortTo25() {}
        /**
         * @test
         */
        public function emptyPortSettingSetsPortTo25() {}
        /**
         * @test
         */
        public function givenPortSettingIsRespected() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Mail\Fixtures {
    /**
     * Fixture fake transport
     */
    class FakeTransportFixture extends \typo3\cms\core\mail\mboxtransport {
        public function __construct($settings) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Encoder {
    /**
     * Test cases for TYPO3\CMS\Core\Encoder\JavaScriptEncoder.
     */
    class JavaScriptEncoderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Encoder\JavaScriptEncoder
         */
        protected $subject;

        protected function setUp() {}
        /**
         * Data provider for encodeEncodesCorrectly.
         *
         * @return array
         */
        public function encodeEncodesCorrectlyDataProvider() {}
        public function encodeEncodesCorrectly($input, $expected) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Locking {
    /**
     * Testcase for \TYPO3\CMS\Core\Locking\FileLockStrategy
     */
    class FileLockStrategyTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructorCreatesLockDirectoryIfNotExisting() {}
        /**
         * @test
         */
        public function constructorSetsFilePathToExpectedValue() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Locking\SimpleLockStrategy
     */
    class SimpleLockStrategyTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructorCreatesLockDirectoryIfNotExisting() {}
        /**
         * @test
         */
        public function constructorSetsResourceToPathWithIdIfUsingSimpleLocking() {}
        /**
         * @test
         */
        public function acquireFixesPermissionsOnLockFile() {}
        /** @var SimpleLockStrategy|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $lock */
        public function releaseRemovesLockfileInTypo3TempLocks() {}
        /**
         * Dataprovider for releaseDoesNotRemoveFilesNotWithinTypo3TempLocksDirectory
         */
        public function invalidFileReferences() {}
/** @var SimpleLockStrategy|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $lock */
        public function releaseDoesNotRemoveFilesNotWithinTypo3TempLocksDirectory(/** @var SimpleLockStrategy|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $lock */
$file) {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Locking\SemaphoreLockStrategy
     */
    class SemaphoreLockStrategyTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Set up the tests
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function acquireGetsSemaphore() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Locking\LockFactory
     */
    class LockFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var LockFactory|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $mockFactory;

        /**
         * Set up the tests
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function addLockingStrategyAddsTheClassNameToTheInternalArray() {}
        /**
         * @test
         */
        public function addLockingStrategyThrowsExceptionIfInterfaceIsNotImplemented() {}
        /**
         * @test
         */
        public function getLockerReturnsExpectedClass() {}
        /**
         * @test
         */
        public function getLockerReturnsClassWithHighestPriority() {}
        /**
         * @test
         */
        public function getLockerThrowsExceptionIfNoMatchFound() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Locking\Fixtures {
    /**
     * Dummy locking
     */
    class DummyLock implements \typo3\cms\core\locking\lockingstrategyinterface {
        /**
         * @return int LOCK_CAPABILITY_* elements combined with bit-wise OR
         */
        public static function getCapabilities() {}
        /**
         * @return int Returns a priority for the method. 0 to 100, 100 is highest
         */
        public static function getPriority() {}
        public function __construct($subject) {}
        public function acquire($mode = self::LOCK_CAPABILITY_EXCLUSIVE) {}
        /**
         * Release the lock
         *
         * @return bool Returns TRUE on success or FALSE on failure
         */
        public function release() {}
        /**
         * Get status of this lock
         *
         * @return bool Returns TRUE if lock is acquired by this locker, FALSE otherwise
         */
        public function isAcquired() {}
        /**
         * Destroys the resource associated with the lock
         */
        public function destroy() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\ViewHelpers {
    /**
     * Test case
     */
    class IconViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var IconViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCallsIconFactoryWithDefaultSizeAndDefaultStateAndReturnsResult() {}
        /**
         * @test
         */
        public function renderCallsIconFactoryWithGivenSizeAndReturnsResult() {}
        /**
         * @test
         */
        public function renderCallsIconFactoryWithGivenStateAndReturnsResult() {}
        /**
         * @test
         */
        public function renderCallsIconFactoryWithGivenOverlayAndReturnsResult() {}
    }

    /**
     * Test case
     */
    class IconForRecordViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var Icon|ObjectProphecy
         */
        protected $iconProphecy;
        /**
         * @var IconFactory|ObjectProphecy
         */
        protected $iconFactoryProphecy;
        /**
         * @var IconViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderRendersIconByWayOfTheIconFactoryAccordingToGivenArguments() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Imaging {
    /**
     * Testcase for \TYPO3\CMS\Core\Imaging\Dimension
     */
    class DimensionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Imaging\Dimension
         */
        protected $subject;
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $height;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getWidthReturnsValidInteger() {}
        /**
         * @test
         */
        public function getHeightReturnsValidInteger() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Imaging\GraphicalFunctions
     */
    class GraphicalFunctionsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Imaging\GraphicalFunctions
         */
        protected $subject;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Dataprovider for getScaleForImage
         *
         * @return array
         */
        public function getScaleForImageDataProvider() {}
        public function getScaleForImage($info, $width, $height, $options, $expected) {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Imaging\Icon
     */
    class IconTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Imaging\Icon
         */
        protected $subject;
        /**
         * @var string
         */
        protected $iconIdentifier;
        /**
         * @var string
         */
        protected $overlayIdentifier;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function renderAndCastToStringReturnsTheSameCode() {}
        /**
         * @test
         */
        public function getIdentifierReturnsCorrectIdentifier() {}
        /**
         * @test
         */
        public function getOverlayIdentifierReturnsCorrectIdentifier() {}
        /**
         * @test
         */
        public function getSizedentifierReturnsCorrectIdentifier() {}
        /**
         * @test
         */
        public function getStateReturnsCorrectIdentifier() {}
    }

    /**
     * TestCase for \TYPO3\CMS\Core\Imaging\IconRegistry
     */
    class IconRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconRegistry
         */
        protected $subject;
        /**
         * @var string
         */
        protected $notRegisteredIconIdentifier;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getDefaultIconIdentifierReturnsTheCorrectDefaultIconIdentifierString() {}
        /**
         * @test
         */
        public function isRegisteredReturnsTrueForRegisteredIcon() {}
        /**
         * @test
         */
        public function isRegisteredReturnsFalseForNotRegisteredIcon() {}
        /**
         * @test
         */
        public function registerIconAddNewIconToRegistry() {}
        /**
         * @test
         */
        public function registerIconThrowsInvalidArgumentExceptionWithInvalidIconProvider() {}
        /**
         * @test
         */
        public function getIconConfigurationByIdentifierThrowsExceptionWithUnregisteredIconIdentifier() {}
        /**
         * @test
         */
        public function getIconConfigurationByIdentifierReturnsCorrectConfiguration() {}
        /**
         * @test
         */
        public function getAllRegisteredIconIdentifiersReturnsAnArrayWithIconIdentiefiers() {}
        /**
         * @test
         */
        public function getAllRegisteredIconIdentifiersReturnsArrayWithAllRegisteredIconIdentifiers() {}
        /**
         * @test
         */
        public function getIconIdentifierForFileExtensionReturnsDefaultIconIdentifierForEmptyFileExtension() {}
        /**
         * @test
         */
        public function getIconIdentifierForFileExtensionReturnsDefaultIconIdentifierForUnknownFileExtension() {}
        /**
         * @test
         */
        public function getIconIdentifierForFileExtensionReturnsImageIconIdentifierForImageFileExtension() {}
        /**
         * @test
         */
        public function registerFileExtensionRegisterAnIcon() {}
        /**
         * @test
         */
        public function registerFileExtensionOverwriteAnExistingIcon() {}
        /**
         * @test
         */
        public function registerMimeTypeIconRegisterAnIcon() {}
        /**
         * @test
         */
        public function registerMimeTypeIconOverwriteAnExistingIcon() {}
        /**
         * @test
         */
        public function getIconIdentifierForMimeTypeWithUnknowMimeTypeReturnNull() {}
    }

    /**
     * TestCase for \TYPO3\CMS\Core\Imaging\IconFactory
     */
    class IconFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconFactory
         */
        protected $subject;
        /**
         * @var string
         */
        protected $notRegisteredIconIdentifier;
        /**
         * @var string
         */
        protected $registeredIconIdentifier;
        /**
         * @var string
         */
        protected $registeredSpinningIconIdentifier;
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconRegistry
         */
        protected $iconRegistryMock;
        /**
         * @var array Simulate a tt_content record
         */
        protected $mockRecord;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * DataProvider for icon sizes
         *
         * @return array
         */
        public function differentSizesDataProvider() {}
        /**
         * @test
         */
        public function getIconReturnsIconWithCorrectMarkupWrapperIfRegisteredIconIdentifierIsUsed() {}
        /**
         * @test
         */
        public function getIconByIdentifierReturnsIconWithCorrectMarkupIfRegisteredIconIdentifierIsUsed() {}
        public function getIconByIdentifierAndSizeReturnsIconWithCorrectMarkupIfRegisteredIconIdentifierIsUsed($size) {}
        public function getIconByIdentifierAndSizeAndWithOverlayReturnsIconWithCorrectOverlayMarkupIfRegisteredIconIdentifierIsUsed($size) {}
        /**
         * @test
         */
        public function getIconReturnsNotFoundIconWithCorrectMarkupIfUnregisteredIdentifierIsUsed() {}
        public function getIconByIdentifierAndSizeReturnsNotFoundIconWithCorrectMarkupIfUnregisteredIdentifierIsUsed($size) {}
        /**
         * @test
         */
        public function getIconReturnsCorrectMarkupIfIconIsRegisteredAsSpinningIcon() {}
        public function getIconByIdentifierAndSizeAndOverlayReturnsNotFoundIconWithCorrectMarkupIfUnregisteredIdentifierIsUsed($size) {}
        /**
         * @test
         */
        public function getIconThrowsExceptionIfInvalidSizeIsGiven() {}
        /**
         * Tests the return of an icon for a file without extension
         *
         * @test
         */
        public function getIconForFileWithNoFileTypeReturnsDefaultFileIcon() {}
        /**
         * Tests the return of an icon for an unknown file type
         *
         * @test
         */
        public function getIconForFileWithUnknownFileTypeReturnsDefaultFileIcon() {}
        /**
         * Tests the return of an icon for a file with extension pdf
         *
         * @test
         */
        public function getIconForFileWithFileTypePdfReturnsPdfIcon() {}
        /**
         * Tests the return of an icon for a file with extension png
         *
         * @test
         */
        public function getIconForFileWithFileTypePngReturnsPngIcon() {}
        /**
         * @test
         */
        public function getIconForResourceReturnsCorrectMarkupForFileResources() {}
        /**
         * Tests the returns of no file
         *
         * @test
         */
        public function getIconForResourceWithFileWithoutExtensionTypeReturnsOtherIcon() {}
        /**
         * Tests the returns of unknown file
         *
         * @test
         */
        public function getIconForResourceWithUnknownFileTypeReturnsOtherIcon() {}
        /**
         * Tests the returns of file pdf
         *
         * @test
         */
        public function getIconForResourceWithPdfReturnsPdfIcon() {}
        /**
         * Tests the returns of file pdf with known mime-type
         *
         * @test
         */
        public function getIconForResourceWithMimeTypeApplicationPdfReturnsPdfIcon() {}
        /**
         * Tests the returns of file with custom image mime-type
         *
         * @test
         */
        public function getIconForResourceWithCustomImageMimeTypeReturnsImageIcon() {}
        /**
         * Tests the returns of file png
         *
         * @test
         */
        public function getIconForResourceWithPngFileReturnsIcon() {}
        /**
         * Tests the returns of normal folder
         *
         * @test
         */
        public function getIconForResourceWithFolderReturnsFolderIcon() {}
        /**
         * Tests the returns of open folder
         *
         * @test
         */
        public function getIconForResourceWithOpenFolderReturnsOpenFolderIcon() {}
        /**
         * Tests the returns of root folder
         *
         * @test
         */
        public function getIconForResourceWithRootFolderReturnsRootFolderIcon() {}
        /**
         * Tests the returns of mount root
         *
         * @test
         */
        public function getIconForResourceWithMountRootReturnsMountFolderIcon() {}
        /**
         * Tests the returns of NULL table + empty array
         *
         * @test
         */
        public function getIconForRecordWithNullTableReturnsMissingIcon() {}
        /**
         * Tests the returns of tt_content + empty record
         *
         * @test
         */
        public function getIconForRecordWithEmptyRecordReturnsNormalIcon() {}
        /**
         * Tests the returns of tt_content + mock record
         *
         * @test
         */
        public function getIconForRecordWithMockRecordReturnsNormalIcon() {}
        /**
         * Tests the returns of tt_content + mock record of type 'list' (aka plugin)
         *
         * @test
         */
        public function getIconForRecordWithMockRecordOfTypePluginReturnsPluginIcon() {}
        /**
         * Tests the returns of tt_content + mock record with hidden flag
         *
         * @test
         */
        public function getIconForRecordWithMockRecordWithHiddenFlagReturnsNormalIconAndOverlay() {}
        protected function getTestSubjectFileObject($extension, $mimeType = '') {}
        protected function getTestSubjectFolderObject($identifier) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Imaging\IconProvider {
    /**
     * Testcase for \TYPO3\CMS\Core\Imaging\IconProvider\BitmapIconProvider
     */
    class BitmapIconProviderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconProvider\BitmapIconProvider
         */
        protected $subject;
        /**
         * @var \TYPO3\CMS\Core\Imaging\Icon
         */
        protected $icon;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function prepareIconMarkupWithRelativeSourceReturnsInstanceOfIconWithCorrectMarkup() {}
        /**
         * @test
         */
        public function prepareIconMarkupWithAbsoluteSourceReturnsInstanceOfIconWithCorrectMarkup() {}
        /**
         * @test
         */
        public function prepareIconMarkupEXTSourceReferenceReturnsInstanceOfIconWithCorrectMarkup() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Imaging\IconProvider\SvgIconProvider
     */
    class SvgIconProviderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconProvider\SvgIconProvider
         */
        protected $subject;
        /**
         * @var Icon
         */
        protected $icon;
        /**
         * @var string
         */
        protected $testFileName;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function prepareIconMarkupWithRelativeSourceReturnsInstanceOfIconWithCorrectMarkup() {}
        /**
         * @test
         */
        public function prepareIconMarkupWithAbsoluteSourceReturnsInstanceOfIconWithCorrectMarkup() {}
        /**
         * @test
         */
        public function getIconWithEXTSourceReferenceReturnsInstanceOfIconWithCorrectMarkup() {}
        /**
         * @test
         */
        public function getIconWithInlineOptionReturnsCleanSvgMarkup() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Imaging\IconProvider\FontawesomeIconProvider
     */
    class FontawesomeIconProviderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconProvider\FontawesomeIconProvider
         */
        protected $subject;
        /**
         * @var Icon
         */
        protected $icon;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function prepareIconMarkupWithNameReturnsInstanceOfIconWithCorrectMarkup() {}
        /**
         * DataProvider for icon names
         *
         * @return array
         */
        public function wrongNamesDataProvider() {}
        public function prepareIconMarkupWithInvalidNameThrowsException($name, $expectedExceptionCode) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Imaging\ImageManipulation {
    class CropVariantCollectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array
         */
        static private $tca;

        /**
         * @test
         */
        public function createFromJsonWorks() {}
        /**
         * @test
         */
        public function duplicateIdThrowsException() {}
        /**
         * @test
         */
        public function createEmptyWorks() {}
    }

    class AreaTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function makeRelativeToFileReducesSizes() {}
        public function applyRatioRestrictsAreaToRespectRatioDataProvider() {}
        public function applyRatioRestrictsAreaToRespectRatio(array $areaSize, $ratio) {}
        /**
         * @test
         */
        public function applyRatioDoesNothingForFreeRatio() {}
    }

    class CropVariantTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array
         */
        static private $tca;
        static private $expectedConfig;

        public static function setUpBeforeClass() {}
        /**
         * @test
         */
        public function createFromTcaWorks() {}
        /**
         * @test
         */
        public function selectedRatioCanBeNull() {}
        /**
         * @test
         */
        public function throwsExceptionOnTypeMismatchInRatio() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Html {
    /**
     * Testcase for \TYPO3\CMS\Core\Html\HtmlParser
     */
    class HtmlParserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Html\HtmlParser
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @return array
         */
        public function cDataWillRemainUnmodifiedDataProvider() {}
        /**
         * Data provider for splitIntoBlock
         *
         * @return array
         */
        public function splitIntoBlockDataProvider() {}
        public function splitIntoBlock($tag, $content, $eliminateExtraEndTags, $expected) {}
        public function xHtmlCleaningDoesNotModifyCDATA($source, $expected) {}
        /**
         * Data provider for spanTagCorrectlyRemovedWhenRmTagIfNoAttribIsConfigured
         */
        public static function spanTagCorrectlyRemovedWhenRmTagIfNoAttribIsConfiguredDataProvider() {}
        public function tagCorrectlyRemovedWhenRmTagIfNoAttribIsConfigured($content, $expectedResult) {}
        /**
         * @test
         */
        public function rmTagIfNoAttribIsConfiguredDoesNotChangeNestingType() {}
        /**
         * Data provider for localNestingCorrectlyRemovesInvalidTags
         *
         * @return array
         */
        public static function localNestingCorrectlyRemovesInvalidTagsDataProvider() {}
        public function localNestingCorrectlyRemovesInvalidTags($content, $expectedResult) {}
        /**
         * Data provider for globalNestingCorrectlyRemovesInvalidTags
         *
         * @return array
         */
        public static function globalNestingCorrectlyRemovesInvalidTagsDataProvider() {}
        public function globalNestingCorrectlyRemovesInvalidTags($content, $expectedResult) {}
        /**
         * @return array
         */
        public function emptyTagsDataProvider() {}
        public function stripEmptyTags($stripOn, $tagList, $treatNonBreakingSpaceAsEmpty, $content, $expectedResult) {}
        /**
         * @return array
         */
        public function stripEmptyTagsKeepsConfiguredTagsDataProvider() {}
        public function stripEmptyTagsKeepsConfiguredTags($tagList, $treatNonBreakingSpaceAsEmpty, $content, $expectedResult) {}
        protected function parseConfigAndCleanHtml(array $tsConfig, $content) {}
        /**
         * Data provider for getFirstTag
         *
         * @return array
         */
        public function getFirstTagDataProvider() {}
        public function getFirstTag($str, $expected) {}
        /**
         * Data provider for getFirstTagName
         *
         * @return array
         */
        public function getFirstTagNameDataProvider() {}
        public function getFirstTagName($str, $preserveCase, $expected) {}
        /**
         * @return array
         */
        public function removeFirstAndLastTagDataProvider() {}
        public function removeFirstAndLastTag($str, $expectedResult) {}
        /**
         * @return array
         */
        public function getTagAttributesDataProvider() {}
        public function getTagAttributes($tag, $expectedResult) {}
        /**
         * @return array
         */
        public function stripEmptyTagsDataProvider() {}
        public function rawStripEmptyTagsTest($content, $tagList, $treatNonBreakingSpaceAsEmpty, $expectedResult) {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Html\RteHtmlParser
     */
    class RteHtmlParserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Html\RteHtmlParser
         */
        protected $subject;

        protected function setUp() {}
        /**
         * Data provider for hrTagCorrectlyTransformedOnWayToDataBase
         */
        public static function hrTagCorrectlyTransformedOnWayToDataBaseDataProvider() {}
        public function hrTagCorrectlyTransformedOnWayToDataBase($content, $expectedResult) {}
        /**
         * Data provider for hrTagCorrectlyTransformedOnWayToDatabaseAndBackToRteProvider
         */
        public static function hrTagCorrectlyTransformedOnWayToDatabaseAndBackToRteProvider() {}
        public function hrTagCorrectlyTransformedOnWayToDatabaseAndBackToRte($content, $expectedResult) {}
        /**
         * Data provider for paragraphCorrectlyTransformedOnWayToDatabase
         */
        public static function paragraphCorrectlyTransformedOnWayToDatabaseProvider() {}
        public function paragraphCorrectlyTransformedOnWayToDatabase($content, $expectedResult) {}
        /**
         * Data provider for lineBreakCorrectlyTransformedOnWayToRte
         */
        public static function lineBreakCorrectlyTransformedOnWayToRteProvider() {}
        public function lineBreakCorrectlyTransformedOnWayToRTE($content, $expectedResult) {}
        /**
         * Data provider for paragraphCorrectlyTransformedOnWayToDatabaseAndBackToRte
         */
        public static function paragraphCorrectlyTransformedOnWayToDatabaseAndBackToRteProvider() {}
        public function paragraphCorrectlyTransformedOnWayToDatabaseAndBackToRte($content, $expectedResult) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Service {
    /**
     * Test case
     */
    class TypoScriptServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * data provider for convertTypoScriptArrayToPlainArray
         * @return array
         */
        public function convertTypoScriptArrayToPlainArrayTestdata() {}
        public function convertTypoScriptArrayToPlainArrayRemovesTrailingDotsWithChangedOrderInTheTypoScriptArray($typoScriptSettings, $expectedSettings) {}
        /**
         * Dataprovider for testcase "convertPlainArrayToTypoScriptArray"
         *
         * @return array
         */
        public function convertPlainArrayToTypoScriptArrayTestdata() {}
        public function convertPlainArrayToTypoScriptArray($extbaseTS, $classic) {}
        /**
         * @return array
         */
        public function explodeConfigurationForOptionSplitProvider() {}
        public function explodeConfigurationForOptionSplitTest($configuration, $splitCount, $expected) {}
    }

    /**
     * Test case
     */
    class DependencyOrderingServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        public function orderByDependenciesBuildsCorrectOrder(array $items, $beforeKey, $afterKey, array $expectedOrderedItems) {}
        /**
         * @return array
         */
        public function orderByDependenciesBuildsCorrectOrderDataProvider() {}
/** @var DependencyOrderingService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyOrderingService */
        public function prepareDependenciesBuildsFullIdentifierList(/** @var DependencyOrderingService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyOrderingService */
array $dependencies, /** @var DependencyOrderingService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyOrderingService */
array $expectedDependencies) {}
        /**
         * @return array
         */
        public function prepareDependenciesBuildsFullIdentifierListDataProvider() {}
        public function buildDependencyGraphBuildsValidGraph(array $dependencies, array $expectedGraph) {}
        /**
         * @return array
         */
        public function buildDependencyGraphBuildsValidGraphDataProvider() {}
        public function calculateOrderResolvesCorrectOrder(array $graph, array $expectedList) {}
        /**
         * @return array
         */
        public function calculateOrderResolvesCorrectOrderDataProvider() {}
        /**
         * @test
         */
        public function calculateOrderDetectsCyclicGraph() {}
        /**
         * @return array
         */
        public function findPathInGraphReturnsCorrectPathDataProvider() {}
/** @var DependencyOrderingService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyOrderingService */
        public function findPathInGraphReturnsCorrectPath(/** @var DependencyOrderingService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyOrderingService */
array $graph, /** @var DependencyOrderingService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyOrderingService */
$from, /** @var DependencyOrderingService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyOrderingService */
$to, /** @var DependencyOrderingService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyOrderingService */
array $expected) {}
    }

    /**
     * Unit test for marker utility
     */
    class MarkerBasedTemplateServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var MarkerBasedTemplateService
         */
        protected $templateService;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /** @var CacheManager|ObjectProphecy $cacheManagerProphecy */
        protected function setUp() {}
        protected function tearDown() {}
        /**
         * Data provider for getSubpart
         *
         * @return array
         */
        public function getSubpartDataProvider() {}
        public function getSubpart($content, $marker, $expected) {}
        /**
         * Data provider for substituteSubpart
         *
         * @return array
         */
        public function substituteSubpartDataProvider() {}
        public function substituteSubpart($content, $marker, $subpartContent, $recursive, $keepMarker, $expected) {}
        /**
         * Data provider for substituteMarkerArray
         */
        public function substituteMarkerArrayDataProvider() {}
        public function substituteMarkerArray($content, $markContentArray, $wrap, $uppercase, $deleteUnused, $expected) {}
        /**
         * Data provider for substituteMarker
         */
        public function substituteMarkerDataProvider() {}
        public function substituteMarker($content, $marker, $markContent, $expected) {}
        /**
         * Data provider for substituteSubpartArray
         *
         * @return array
         */
        public function substituteSubpartArrayDataProvider() {}
        public function substituteSubpartArray($content, array $subpartsContent, $expected) {}
        /**
         * Data provider for substituteMarkerAndSubpartArrayRecursiveResolvesMarkersAndSubpartsArray
         *
         * @return array
         */
        public function substituteMarkerAndSubpartArrayRecursiveResolvesMarkersAndSubpartsArrayDataProvider() {}
        public function substituteMarkerAndSubpartArrayRecursiveResolvesMarkersAndSubpartsArray($template, $markersAndSubparts, $wrap, $uppercase, $deleteUnused, $expected) {}
        /**
         * @return array
         */
        public function substituteMarkerArrayCachedReturnsExpectedContentDataProvider() {}
        public function substituteMarkerArrayCachedReturnsExpectedContent($content, array $markContentArray, array $subpartContentArray, array $wrappedSubpartContentArray, $expectedContent) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\TypoScript {
    /**
     * Testcase for \TYPO3\CMS\Core\TypoScript\TemplateService
     */
    class TemplateServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\TypoScript\TemplateService
         */
        protected $templateService;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\TYPO3\CMS\Core\TypoScript\TemplateService
         */
        protected $templateServiceMock;
        /**
         * @var \TYPO3\CMS\Core\Package\PackageManager
         */
        protected $backupPackageManager;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        public function tearDown() {}
        /**
         * @test
         */
        public function versionOlCallsVersionOlOfPageSelectClassWithGivenRow() {}
        /**
         * @test
         */
        public function extensionStaticFilesAreNotProcessedIfNotExplicitlyRequested() {}
        /**
         * @test
         */
        public function extensionStaticsAreProcessedIfExplicitlyRequested() {}
        /**
         * @test
         */
        public function updateRootlineDataOverwritesOwnArrayData() {}
        /**
         * @test
         */
        public function updateRootlineDataWithInvalidNewRootlineThrowsException() {}
        /**
         * @test
         */
        public function getFileNameReturnsUrlCorrectly() {}
        /**
         * @test
         */
        public function getFileNameReturnsFileCorrectly() {}
        /**
         * @test
         */
        public function getFileNameReturnsNullIfDirectory() {}
        /**
         * @test
         */
        public function getFileNameReturnsNullWithInvalidFileName() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\TypoScript\Parser {
    /**
     * Test case for \TYPO3\CMS\Core\TypoScript\Parser\TypoScriptParser
     */
    class TypoScriptParserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\TypoScript\Parser\TypoScriptParser|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $typoScriptParser;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Data provider for executeValueModifierReturnsModifiedResult
         *
         * @return array modifier name, modifier arguments, current value, expected result
         */
        public function executeValueModifierDataProvider() {}
        public function executeValueModifierReturnsModifiedResult($modifierName, $currentValue, $modifierArgument, $expected) {}
        /**
         * Data provider for executeValueModifierThrowsException
         *
         * @return array modifier name, modifier arguments, current value, expected result
         */
        public function executeValueModifierInvalidDataProvider() {}
        public function executeValueModifierThrowsException($modifierName, $currentValue, $modifierArgument) {}
        /**
         * @test
         */
        public function invalidCharactersInObjectNamesAreReported() {}
        /**
         * @return array
         */
        public function doubleSlashCommentsDataProvider() {}
        public function doubleSlashCommentsAreValid($typoScript) {}
        /**
         * @return array
         */
        public function includeFileDataProvider() {}
        public function includeFilesWithConditions($typoScript) {}
        /**
         * @return array
         */
        public function importFilesDataProvider() {}
        public function importFiles($typoScript, $expected) {}
        public function typoScriptIsParsedToArray($typoScript, array $expected) {}
        /**
         * @return array
         */
        public function typoScriptIsParsedToArrayDataProvider() {}
        /**
         * @test
         */
        public function setValCanBeCalledWithArrayValueParameter() {}
        /**
         * @test
         */
        public function setValCanBeCalledWithStringValueParameter() {}
        public function parseNextKeySegmentReturnsCorrectNextKeySegment($key, $expectedKeySegment, $expectedRemainingKey) {}
        /**
         * @return array
         */
        public function parseNextKeySegmentReturnsCorrectNextKeySegmentDataProvider() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Type {
    /**
     * Test case
     */
    class EnumerationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructorThrowsExceptionIfNoConstantsAreDefined() {}
        /**
         * @test
         */
        public function constructorThrowsExceptionIfInvalidValueIsRequested() {}
        /**
         * @test
         */
        public function loadValuesThrowsExceptionIfGivenValueIsNotAvailableInEnumeration() {}
        /**
         * @test
         */
        public function loadValuesThrowsExceptionIfDisallowedTypeIsDefinedAsConstant() {}
        /**
         * @test
         */
        public function loadValuesThrowsExceptionIfNoDefaultConstantIsDefinedAndNoValueIsGiven() {}
        /**
         * @test
         */
        public function loadValuesThrowsExceptionIfValueIsDefinedMultipleTimes() {}
        /**
         * @test
         */
        public function loadValuesSetsStaticEnumConstants() {}
        /**
         * @test
         */
        public function constructorSetsValue() {}
        /**
         * @test
         */
        public function setValueSetsValue() {}
        /**
         * @test
         */
        public function setValueToAnInvalidValueThrowsException() {}
        /**
         * Array of value pairs and expected comparison result
         */
        public function isValidComparisonExpectations() {}
        public function isValidDoesTypeLooseComparison($enumerationValue, $testValue, $expectation) {}
        /**
         * @test
         */
        public function getConstantsReturnsArrayOfPossibleValuesWithoutDefault() {}
        /**
         * @test
         */
        public function getConstantsReturnsArrayOfPossibleValuesWithDefaultIfRequested() {}
        /**
         * @test
         */
        public function getConstantsCanBeCalledOnInstances() {}
        /**
         * @test
         */
        public function toStringReturnsValueAsString() {}
        /**
         * @test
         */
        public function castReturnsObjectOfEnumerationTypeIfSimpleValueIsGiven() {}
        /**
         * @test
         */
        public function castReturnsObjectOfCalledEnumerationTypeIfCalledWithValueOfDifferentType() {}
        /**
         * @test
         */
        public function castReturnsGivenObjectIfCalledWithValueOfSameType() {}
        /**
         * @test
         */
        public function castCastsStringToEnumerationWithCorrespondingValue() {}
        /**
         * @test
         */
        public function castCastsIntegerToEnumerationWithCorrespondingValue() {}
        /**
         * @test
         */
        public function equalsReturnsTrueIfIntegerIsGivenThatEqualsEnumerationsIntegerValue() {}
        /**
         * @test
         */
        public function equalsReturnsTrueIfStringIsGivenThatEqualsEnumerationsIntegerValue() {}
        /**
         * @test
         */
        public function equalsReturnsTrueIfEqualEnumerationIsGiven() {}
        /**
         * @test
         */
        public function equalsReturnsTrueIfDifferentEnumerationWithSameValueIsGiven() {}
        /**
         * @test
         */
        public function equalsReturnsFalseIfDifferentEnumerationWithDifferentValueIsGiven() {}
        /**
         * @test
         */
        public function equalsReturnsFalseIfEnumerationOfSameTypeWithDifferentValueIsGiven() {}
        /**
         * @test
         */
        public function getNameProvidesNameForAvailableConstant() {}
        /**
         * @test
         */
        public function getNameReturnsEmptyStringForNotAvailableConstant() {}
        /**
         * @test
         */
        public function getHumanReadableNameProvidesNameForAvailableConstant() {}
        /**
         * @test
         */
        public function getHumanReadableNameReturnsEmptyStringForNotAvailableConstant() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Type\File {
    /**
     * Test case
     */
    class ImageInfoTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function classImageInfoCanBeInstantiated() {}
        /**
         * @test
         */
        public function doesNotBreakOnImageInfoWithInvalidSvg() {}
    }

    /**
     * Test case
     */
    class FileInfoTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function classFileInfoCanBeInstantiated() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Type\Fixture\Enumeration {
    /**
     * This is an invalid enumeration because no constants are defined
     */
    class MissingConstantsEnumeration extends \typo3\cms\core\type\enumeration {}

    /**
     * This is an invalid enumeration because an unsupported constant value is used
     */
    class InvalidConstantEnumeration extends \typo3\cms\core\type\enumeration {
        const FOO = 1.11;

    }

    /**
     * This is an invalid enumeration because the constant values are not unique
     */
    class DuplicateConstantValueEnumeration extends \typo3\cms\core\type\enumeration {
        const FOO = 1;
        const BAR = 1;

    }

    /**
     * This is an complete enumeration with all possible constant values
     */
    class CompleteEnumeration extends \typo3\cms\core\type\enumeration {
        const INTEGER_VALUE = 1;
        const STRING_VALUE = 'foo';
        const __default = self::INTEGER_VALUE;

    }

    /**
     * This is an enumeration without a default value so it must be called with a value
     */
    class MissingDefaultEnumeration extends \typo3\cms\core\type\enumeration {
        const FOO = 1;

    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Http {
    /**
     * Testcase for \TYPO3\CMS\Core\Http\ServerRequest
     *
     * Adapted from https://github.com/phly/http/
     */
    class ServerRequestTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ServerRequest
         */
        protected $request;

        protected function setUp() {}
        /**
         * @test
         */
        public function getServerParamsAreEmptyByDefault() {}
        /**
         * @test
         */
        public function getQueryParamsAreEmptyByDefault() {}
        /**
         * @test
         */
        public function withQueryParamsMutatorReturnsCloneWithChanges() {}
        /**
         * @test
         */
        public function getCookieParamsAreEmptyByDefault() {}
        /**
         * @test
         */
        public function withCookieParamsMutatorReturnsCloneWithChanges() {}
        /**
         * @test
         */
        public function getUploadedFilesAreEmptyByDefault() {}
        /**
         * @test
         */
        public function getParsedBodyIsEmptyByDefault() {}
        /**
         * @test
         */
        public function withParsedBodyMutatorReturnsCloneWithChanges() {}
        /**
         * @test
         */
        public function getAttributesAreEmptyByDefault() {}
        /**
         * @depends testAttributesAreEmptyByDefault
         * @test
         */
        public function withAttributeMutatorReturnsCloneWithChanges() {}
        public function withoutAttributeReturnsCloneWithoutAttribute($request) {}
        /**
         * @test
         */
        public function constructorUsesProvidedArguments() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Http\Uri
     *
     * Adapted from https://github.com/phly/http/
     */
    class UriTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructorSetsAllProperties() {}
        /**
         * @test
         */
        public function canSerializeToString() {}
        /**
         * @test
         */
        public function withSchemeReturnsNewInstanceWithNewScheme() {}
        /**
         * @test
         */
        public function withUserInfoReturnsNewInstanceWithProvidedUser() {}
        /**
         * @test
         */
        public function withUserInfoReturnsNewInstanceWithProvidedUserAndPassword() {}
        /**
         * @test
         */
        public function withHostReturnsNewInstanceWithProvidedHost() {}
        /**
         * @return array
         */
        public function validPortsDataProvider() {}
        public function withPortReturnsNewInstanceWithProvidedPort($port) {}
        /**
         * @return array
         */
        public function invalidPortsDataProviderType() {}
        public function withPortRaisesExceptionForInvalidPortsByType($port) {}
        /**
         * @return array
         */
        public function invalidPortsDataProviderRange() {}
        /**
         * @test
         * @todo: Currently, boolean true is interpreted as 1 by canBeInterpretedAsInteger().
         * @todo: This test shows that, but there is an inconsistency and maybe it would be better
         * @todo: if the code would not accept 'true' as valid port but throw an exception instead.
         * @todo: If that is changed, 'true' should be added to the 'invalid type' data provider above.
         */
        public function withPortAcceptsBooleanTrueAsPortOne() {}
        public function withPortRaisesExceptionForInvalidPortsByRange($port) {}
        /**
         * @test
         */
        public function withPathReturnsNewInstanceWithProvidedPath() {}
        /**
         * @return array
         */
        public function invalidPathsDataProvider() {}
        public function withPathRaisesExceptionForInvalidPaths($path) {}
        /**
         * @test
         */
        public function withPathRaisesExceptionForInvalidPathsWithQuery() {}
        /**
         * @test
         */
        public function withPathRaisesExceptionForInvalidPathsWithFragment() {}
        /**
         * @test
         */
        public function withQueryReturnsNewInstanceWithProvidedQuery() {}
        /**
         * @return array
         */
        public function invalidQueryStringsDataProvider() {}
        public function withQueryRaisesExceptionForInvalidQueryStringsByType($query) {}
        /**
         * @test
         */
        public function withQueryRaisesExceptionForInvalidQueryStringsByFragment() {}
        /**
         * @test
         */
        public function withFragmentReturnsNewInstanceWithProvidedFragment() {}
        /**
         * @return array
         */
        public function authorityInfoDataProvider() {}
        public function getAuthorityReturnsExpectedValues($url, $expected) {}
        /**
         * @test
         */
        public function canEmitOriginFormUrl() {}
        /**
         * @test
         */
        public function settingEmptyPathOnAbsoluteUriReturnsAnEmptyPath() {}
        /**
         * @test
         */
        public function stringRepresentationOfAbsoluteUriWithNoPathSetsAnEmptyPath() {}
        /**
         * @test
         */
        public function getPathOnOriginFormRemainsAnEmptyPath() {}
        /**
         * @test
         */
        public function stringRepresentationOfOriginFormWithNoPathRetainsEmptyPath() {}
        /**
         * @return array
         */
        public function invalidConstructorUrisDataProvider() {}
        public function constructorRaisesExceptionForNonStringURI($uri) {}
        /**
         * @test
         */
        public function constructorRaisesExceptionForSeriouslyMalformedURI() {}
        /**
         * @test
         */
        public function withSchemeStripsOffDelimiter() {}
        /**
         * @return array
         */
        public function invalidSchemesDataProvider() {}
        public function constructWithUnsupportedSchemeRaisesAnException($scheme) {}
        public function withSchemeUsingUnsupportedSchemeRaisesAnException($scheme) {}
        /**
         * @test
         */
        public function withPathIsNotPrefixedWithSlashIfSetWithoutOne() {}
        /**
         * @test
         */
        public function withPathNotSlashPrefixedIsEmittedWithSlashDelimiterWhenUriIsCastToString() {}
        /**
         * @test
         */
        public function withQueryStripsQueryPrefixIfPresent() {}
        /**
         * @test
         */
        public function withFragmentStripsFragmentPrefixIfPresent() {}
        /**
         * @return array
         */
        public function standardSchemePortCombinationsDataProvider() {}
        public function getAuthorityOmitsPortForStandardSchemePortCombinations($scheme, $port) {}
        /**
         * @test
         */
        public function getPathIsProperlyEncoded() {}
        /**
         * @test
         */
        public function getPathDoesNotBecomeDoubleEncoded() {}
        /**
         * @return array
         */
        public function queryStringsForEncodingDataProvider() {}
        public function getQueryIsProperlyEncoded($query, $expected) {}
        public function getQueryIsNotDoubleEncoded($query, $expected) {}
        /**
         * @test
         */
        public function getFragmentIsProperlyEncoded() {}
        /**
         * @test
         */
        public function getFragmentIsNotDoubleEncoded() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Http\ServerRequestFactory
     */
    class ServerRequestFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function uploadedFilesAreNormalizedFromFilesSuperGlobal() {}
        /**
         * @test
         */
        public function uploadedFilesAreNotCreatedForEmptyFilesArray() {}
        /**
         * @test
         */
        public function uploadedFilesAreNotCreatedIfTmpNameIsEmpty() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Http\Response
     *
     * Adapted from https://github.com/phly/http/
     */
    class ResponseTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Response
         */
        protected $response;

        protected function setUp() {}
        /**
         * @test
         */
        public function testStatusCodeIs200ByDefault() {}
        /**
         * @test
         */
        public function testStatusCodeMutatorReturnsCloneWithChanges() {}
        /**
         * @return array
         */
        public function invalidStatusCodesDataProvider() {}
        public function testCannotSetInvalidStatusCode($code) {}
        /**
         * @test
         */
        public function testReasonPhraseDefaultsToStandards() {}
        /**
         * @test
         */
        public function testCanSetCustomReasonPhrase() {}
        /**
         * @test
         */
        public function testConstructorRaisesExceptionForInvalidStream() {}
        /**
         * @test
         */
        public function testConstructorCanAcceptAllMessageParts() {}
        /**
         * @return array
         */
        public function invalidStatusDataProvider() {}
        public function testConstructorRaisesExceptionForInvalidStatus($code) {}
        /**
         * @return array
         */
        public function invalidResponseBodyDataProvider() {}
        public function testConstructorRaisesExceptionForInvalidBody($body) {}
        /**
         * @test
         */
        public function constructorIgonoresInvalidHeaders() {}
        /**
         * @return array
         */
        public function headersWithInjectionVectorsDataProvider() {}
        public function cnstructorRaisesExceptionForHeadersWithCRLFVectors($name, $value) {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Http\Message
     *
     * Adapted from https://github.com/phly/http/
     */
    class MessageTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Stream
         */
        protected $stream;
        /**
         * @var Message
         */
        protected $message;

        protected function setUp() {}
        /**
         * @test
         */
        public function protocolHasAcceptableDefault() {}
        /**
         * @test
         */
        public function protocolMutatorReturnsCloneWithChanges() {}
        /**
         * @test
         */
        public function usesStreamProvidedInConstructorAsBody() {}
        /**
         * @test
         */
        public function bodyMutatorReturnsCloneWithChanges() {}
        /**
         * @test
         */
        public function getHeaderReturnsHeaderValueAsArray() {}
        /**
         * @test
         */
        public function getHeaderLineReturnsHeaderValueAsCommaConcatenatedString() {}
        /**
         * @test
         */
        public function getHeadersKeepsHeaderCaseSensitivity() {}
        /**
         * @test
         */
        public function getHeadersReturnsCaseWithWhichHeaderFirstRegistered() {}
        /**
         * @test
         */
        public function hasHeaderReturnsFalseIfHeaderIsNotPresent() {}
        /**
         * @test
         */
        public function hasHeaderReturnsTrueIfHeaderIsPresent() {}
        /**
         * @test
         */
        public function addHeaderAppendsToExistingHeader() {}
        /**
         * @test
         */
        public function canRemoveHeaders() {}
        /**
         * @test
         */
        public function headerRemovalIsCaseInsensitive() {}
        /**
         * @return array
         */
        public function invalidGeneralHeaderValuesDataProvider() {}
        public function testWithHeaderRaisesExceptionForInvalidNestedHeaderValue($value) {}
        /**
         * @return array
         */
        public function invalidHeaderValuesDataProvider() {}
        public function withHeaderRaisesExceptionForInvalidValueType($value) {}
        public function withAddedHeaderRaisesExceptionForNonStringNonArrayValue($value) {}
        /**
         * @test
         */
        public function withoutHeaderDoesNothingIfHeaderDoesNotExist() {}
        /**
         * @test
         */
        public function getHeaderReturnsAnEmptyArrayWhenHeaderDoesNotExist() {}
        /**
         * @test
         */
        public function getHeaderLineReturnsEmptyStringWhenHeaderDoesNotExist() {}
        /**
         * @return array
         */
        public function headersWithInjectionVectorsDataProvider() {}
        public function doesNotAllowCRLFInjectionWhenCallingWithHeader($name, $value) {}
        public function doesNotAllowCRLFInjectionWhenCallingWithAddedHeader($name, $value) {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Http\Request
     *
     * Adapted from https://github.com/phly/http/
     */
    class RequestTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Request
         */
        protected $request;

        protected function setUp() {}
        /**
         * @test
         */
        public function getMethodIsGetByDefault() {}
        /**
         * @test
         */
        public function getMethodMutatorReturnsCloneWithChangedMethod() {}
        /**
         * @test
         */
        public function getUriIsNullByDefault() {}
        /**
         * @test
         */
        public function constructorRaisesExceptionForInvalidStream() {}
        /**
         * @test
         */
        public function withUriReturnsNewInstanceWithNewUri() {}
        /**
         * @test
         */
        public function constructorCanAcceptAllMessageParts() {}
        /**
         * @return array
         */
        public function invalidRequestUriDataProvider() {}
        public function constructorRaisesExceptionForInvalidUri($uri) {}
        /**
         * @return array
         */
        public function invalidRequestMethodDataProvider() {}
        public function constructorRaisesExceptionForInvalidMethodByType($method) {}
        /**
         * @test
         */
        public function constructorRaisesExceptionForInvalidMethodByString() {}
        /**
         * @return array
         */
        public function invalidRequestBodyDataProvider() {}
        public function constructorRaisesExceptionForInvalidBody($body) {}
        /**
         * @test
         */
        public function constructorIgnoresInvalidHeaders() {}
        /**
         * @test
         */
        public function getRequestTargetIsSlashWhenNoUriPresent() {}
        /**
         * @test
         */
        public function getRequestTargetIsSlashWhenUriHasNoPathOrQuery() {}
        /**
         * @return array
         */
        public function requestsWithUriDataProvider() {}
        public function getRequestTargetWhenUriIsPresent($request, $expected) {}
        /**
         * @return array
         */
        public function validRequestTargetsDataProvider() {}
        public function getRequestTargetCanProvideARequestTarget($requestTarget) {}
        /**
         * @test
         */
        public function withRequestTargetCannotContainWhitespace() {}
        /**
         * @test
         */
        public function getRequestTargetDoesNotCacheBetweenInstances() {}
        /**
         * @test
         */
        public function getRequestTargetIsResetWithNewUri() {}
        /**
         * @test
         */
        public function getHeadersContainsHostHeaderIfUriWithHostIsPresent() {}
        /**
         * @test
         */
        public function getHeadersContainsNoHostHeaderIfNoUriPresent() {}
        /**
         * @test
         */
        public function getHeadersContainsNoHostHeaderIfUriDoesNotContainHost() {}
        /**
         * @test
         */
        public function getHeaderWithHostReturnsUriHostWhenPresent() {}
        /**
         * @test
         */
        public function getHeaderWithHostReturnsEmptyArrayIfNoUriPresent() {}
        /**
         * @test
         */
        public function getHeaderWithHostReturnsEmptyArrayIfUriDoesNotContainHost() {}
        /**
         * @test
         */
        public function getHeaderLineWithHostReturnsUriHostWhenPresent() {}
        /**
         * @test
         */
        public function getHeaderLineWithHostReturnsEmptyStringIfNoUriPresent() {}
        /**
         * @test
         */
        public function getHeaderLineWithHostReturnsEmptyStringIfUriDoesNotContainHost() {}
        /**
         * @test
         */
        public function getHeaderLineWithHostTakesPrecedenceOverModifiedUri() {}
        /**
         * @test
         */
        public function getHeaderLineWithHostTakesPrecedenceOverEmptyUri() {}
        /**
         * @test
         */
        public function getHeaderLineWithHostDoesNotTakePrecedenceOverHostWithPortFromUri() {}
        /**
         * @return array
         */
        public function headersWithUpperAndLowerCaseValuesDataProvider() {}
        public function headerCanBeRetrieved($header, $value, $expected) {}
        /**
         * @return array
         */
        public function headersWithInjectionVectorsDataProvider() {}
        public function constructorRaisesExceptionForHeadersWithCRLFVectors($name, $value) {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Http\StreamTest
     *
     * Adapted from https://github.com/phly/http/
     */
    class StreamTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Stream
         */
        protected $stream;

        protected function setUp() {}
        /**
         * @test
         */
        public function canInstantiateWithStreamIdentifier() {}
        /**
         * @test
         */
        public function canInstantiteWithStreamResource() {}
        /**
         * @test
         */
        public function isReadableReturnsFalseIfStreamIsNotReadable() {}
        /**
         * @test
         */
        public function isWritableReturnsFalseIfStreamIsNotWritable() {}
        /**
         * @test
         */
        public function toStringRetrievesFullContentsOfStream() {}
        /**
         * @test
         */
        public function detachReturnsResource() {}
        /**
         * @test
         */
        public function constructorRaisesExceptionWhenPassingInvalidStreamResource() {}
        /**
         * @test
         */
        public function toStringSerializationReturnsEmptyStringWhenStreamIsNotReadable() {}
        /**
         * @test
         */
        public function closeClosesResource() {}
        /**
         * @test
         */
        public function closeUnsetsResource() {}
        /**
         * @test
         */
        public function closeDoesNothingAfterDetach() {}
        /**
         * @test
         */
        public function getSizeReportsNullWhenNoResourcePresent() {}
        /**
         * @test
         */
        public function tellReportsCurrentPositionInResource() {}
        /**
         * @test
         */
        public function tellRaisesExceptionIfResourceIsDetached() {}
        /**
         * @test
         */
        public function eofReportsFalseWhenNotAtEndOfStream() {}
        /**
         * @test
         */
        public function eofReportsTrueWhenAtEndOfStream() {}
        /**
         * @test
         */
        public function eofReportsTrueWhenStreamIsDetached() {}
        /**
         * @test
         */
        public function isSeekableReturnsTrueForReadableStreams() {}
        /**
         * @test
         */
        public function isSeekableReturnsFalseForDetachedStreams() {}
        /**
         * @test
         */
        public function seekAdvancesToGivenOffsetOfStream() {}
        /**
         * @test
         */
        public function rewindResetsToStartOfStream() {}
        /**
         * @test
         */
        public function seekRaisesExceptionWhenStreamIsDetached() {}
        /**
         * @test
         */
        public function isWritableReturnsFalseWhenStreamIsDetached() {}
        /**
         * @test
         */
        public function writeRaisesExceptionWhenStreamIsDetached() {}
        /**
         * @test
         */
        public function isReadableReturnsFalseWhenStreamIsDetached() {}
        /**
         * @test
         */
        public function readRaisesExceptionWhenStreamIsDetached() {}
        /**
         * @test
         */
        public function readReturnsEmptyStringWhenAtEndOfFile() {}
        /**
         * @test
         */
        public function getContentsReturnsEmptyStringIfStreamIsNotReadable() {}
        /**
         * @return array
         */
        public function invalidResourcesDataProvider() {}
        public function attachWithNonStringNonResourceRaisesExceptionByType($resource) {}
        /**
         * @test
         */
        public function attachWithNonStringNonResourceRaisesExceptionByString() {}
        /**
         * @test
         */
        public function attachWithResourceAttachesResource() {}
        /**
         * @test
         */
        public function attachWithStringRepresentingResourceCreatesAndAttachesResource() {}
        /**
         * @test
         */
        public function getContentsShouldGetFullStreamContents() {}
        /**
         * @test
         */
        public function getContentsShouldReturnStreamContentsFromCurrentPointer() {}
        /**
         * @test
         */
        public function getMetadataReturnsAllMetadataWhenNoKeyPresent() {}
        /**
         * @test
         */
        public function getMetadataReturnsDataForSpecifiedKey() {}
        /**
         * @test
         */
        public function getMetadataReturnsNullIfNoDataExistsForKey() {}
        /**
         * @test
         */
        public function getSizeReturnsStreamSize() {}
    }

    /**
     * Testcase for \TYPO3\CMS\Core\Http\UploadedFile
     *
     * Adapted from https://github.com/phly/http/
     */
    class UploadedFileTest extends \typo3\testingframework\core\unit\unittestcase {
        protected $tmpFile;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @return array
         */
        public function invalidStreamsDataProvider() {}
        public function constructorRaisesExceptionOnInvalidStreamOrFile($streamOrFile) {}
        /**
         * @return array
         */
        public function invalidSizesDataProvider() {}
        public function constructorRaisesExceptionOnInvalidSize($size) {}
        /**
         * @return array
         */
        public function invalidErrorStatusesDataProvider() {}
        public function constructorRaisesExceptionOnInvalidErrorStatus($status) {}
        /**
         * @return array
         */
        public function invalidFilenamesAndMediaTypesDataProvider() {}
        public function constructorRaisesExceptionOnInvalidClientFilename($filename) {}
        public function constructorRaisesExceptionOnInvalidClientMediaType($mediaType) {}
        /**
         * @test
         */
        public function getStreamReturnsOriginalStreamObject() {}
        /**
         * @test
         */
        public function getStreamReturnsWrappedPhpStream() {}
        /**
         * @test
         */
        public function getStreamReturnsStreamForFile() {}
        /**
         * @test
         */
        public function moveToMovesFileToDesignatedPath() {}
        /**
         * @return array
         */
        public function invalidMovePathsDataProvider() {}
        public function moveToRaisesExceptionForInvalidPath($path) {}
        /**
         * @test
         */
        public function moveToCannotBeCalledMoreThanOnce() {}
        /**
         * @test
         */
        public function getGetStreamRaisesExceptionAfterMove() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\LinkHandling {
    class EmailLinkHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data to resolve strings to arrays and vice versa, external, mail, page
         *
         * @return array
         */
        public function resolveParametersForNonFilesDataProvider() {}
        public function resolveReturnsSplitParameters($input, $expected, $finalString) {}
        public function splitParametersToUnifiedIdentifier($input, $parameters, $expected) {}
    }

    class LinkServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data to resolve strings to arrays and vice versa, external, mail, page
         *
         * @return array
         */
        public function resolveParametersForNonFilesDataProvider() {}
        public function resolveReturnsSplitParameters($input, $expected, $finalString) {}
        public function splitParametersToUnifiedIdentifier($input, $parameters, $expected) {}
    }

    class UrlLinkHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data to resolve strings to arrays and vice versa, external, mail, page
         *
         * @return array
         */
        public function resolveParametersForNonFilesDataProvider() {}
        public function resolveReturnsSplitParameters($input, $expected, $finalString) {}
        public function splitParametersToUnifiedIdentifier($input, $parameters, $expected) {}
    }

    class FileLinkHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for pointing to files
         * t3:file:1:myfolder/myidentifier.jpg
         * t3:folder:1:myfolder
         *
         * @return array
         */
        public function resolveParametersForFilesDataProvider() {}
/** @var FileLinkHandler|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function resolveFileReferencesToSplitParameters(/** @var FileLinkHandler|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$input, /** @var FileLinkHandler|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$expected, /** @var FileLinkHandler|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$finalString) {}
        public function splitParametersToUnifiedIdentifierForFiles($input, $parameters, $expected) {}
    }

    class PageLinkHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data to resolve strings to arrays and vice versa, external, mail, page
         *
         * @return array
         */
        public function resolveParametersForNonFilesDataProvider() {}
        public function resolveReturnsSplitParameters($input, $expected, $finalString) {}
        public function splitParametersToUnifiedIdentifier($input, $parameters, $expected) {}
    }

    class FolderLinkHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for pointing to files
         * t3:file:1:myfolder/myidentifier.jpg
         * t3:folder:1:myfolder
         *
         * @return array
         */
        public function resolveParametersForFilesDataProvider() {}
/** @var FolderLinkHandler|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function resolveFileReferencesToSplitParameters(/** @var FolderLinkHandler|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$input, /** @var FolderLinkHandler|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$expected, /** @var FolderLinkHandler|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$finalString) {}
/** @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject $storageMock */
        public function splitParametersToUnifiedIdentifierForFiles(/** @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject $storageMock */
$input, /** @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject $storageMock */
$parameters, /** @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject $storageMock */
$expected) {}
    }

    class LegacyLinkNotationConverterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data to resolve strings to arrays and vice versa, external, mail, page
         *
         * @return array
         */
        public function resolveParametersForNonFilesDataProvider() {}
        public function resolveReturnsSplitParameters($input, $expected, $finalString) {}
        public function splitParametersToUnifiedIdentifier($input, $parameters, $expected) {}
        /**
         * Data provider for pointing to files
         * t3:file:15
         * t3:file:fileadmin/deep/down.jpg
         * t3:file:1:myfolder/myidentifier.jpg
         * t3:folder:1:myfolder
         *
         * @return array
         */
        public function resolveParametersForFilesDataProvider() {}
/** @var LegacyLinkNotationConverter|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function resolveFileReferencesToSplitParameters(/** @var LegacyLinkNotationConverter|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$input, /** @var LegacyLinkNotationConverter|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$expected, /** @var LegacyLinkNotationConverter|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$finalString) {}
/** @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject $storageMock */
        public function splitParametersToUnifiedIdentifierForFiles(/** @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject $storageMock */
$input, /** @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject $storageMock */
$parameters, /** @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject $storageMock */
$expected) {}
    }

    class RecordLinkHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function asStringReturnsUrl() {}
        /**
         * @return array
         */
        public function missingParameterDataProvider() : array {}
        public function resolveHandlerDataThrowsExceptionIfParameterIsMissing(array $parameters) {}
        public function asStringThrowsExceptionIfParameterIsMissing(array $parameters) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Log {
    /**
     * Test case
     */
    class LogRecordTest extends \typo3\testingframework\core\unit\unittestcase {
/** @var $record LogRecord */
        protected function getRecord(/** @var $record LogRecord */
array $parameters = [ ]) {}
        /**
         * @test
         */
        public function constructorSetsCorrectComponent() {}
        /**
         * @test
         */
        public function constructorSetsCorrectLogLevel() {}
        /**
         * @test
         */
        public function constructorSetsCorrectMessage() {}
        /**
         * @test
         */
        public function constructorSetsCorrectData() {}
        /**
         * @test
         */
        public function setComponentSetsComponent() {}
        /**
         * @test
         */
        public function setLevelSetsLevel() {}
        /**
         * @test
         */
        public function setLevelValidatesLevel() {}
        /**
         * @test
         */
        public function setMessageSetsMessage() {}
        /**
         * @test
         */
        public function setCreatedSetsCreated() {}
        /**
         * @test
         */
        public function setRequestIdSetsRequestId() {}
        /**
         * @test
         */
        public function toArrayReturnsCorrectValues() {}
        /**
         * @test
         */
        public function toStringIncludesDataAsJson() {}
        /**
         * @test
         */
        public function toStringIncludesExceptionDataAsJson() {}
    }

    /**
     * Test case
     */
    class LogManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Log\LogManager
         */
        protected $logManagerInstance;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function logManagerReturnsLoggerWhenRequestedWithGetLogger() {}
        /**
         * @test
         */
        public function logManagerTurnsUnderScoreStyleLoggerNamesIntoDotStyleLoggerNames() {}
        /**
         * @test
         */
        public function logManagerTurnsNamespaceStyleLoggerNamesIntoDotStyleLoggerNames() {}
        /**
         * @test
         */
        public function managerReturnsSameLoggerOnRepeatedRequest() {}
        /** @var $logger \TYPO3\CMS\Core\Log\Logger */
        public function configuresLoggerWithConfiguredWriter() {}
        /**
         * @test
         */
        public function configuresLoggerWithConfiguredProcessor() {}
    }

    /**
     * Test case
     */
    class LogLevelTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function isValidLevelValidatesValidLevels() {}
        /**
         * @test
         */
        public function isValidLevelDoesNotValidateInvalidLevels() {}
        /**
         * Data provider or isValidLevelThrowsExceptionOnInvalidLevelIfAskedToDoSo
         */
        public function isValidLevelThrowsExceptionOnInvalidLevelIfAskedToDoSoDataProvider() {}
        public function isValidLevelThrowsExceptionOnInvalidLevelIfAskedToDoSo($inputValue) {}
        /**
         * @test
         */
        public function normalizeLevelConvertsValidLevelFromStringToInteger() {}
        /**
         * @test
         */
        public function normalizeLevelDoesNotConvertInvalidLevel() {}
    }

    /**
     * Test case
     */
    class LoggerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getNameGetsLoggerName() {}
        /**
         * @test
         */
        public function loggerDoesNotLogRecordsLessCriticalThanLogLevel() {}
        /**
         * @test
         */
        public function loggerReturnsItselfAfterLogging() {}
        /**
         * @test
         */
        public function loggerReturnsItselfAfterLoggingWithoutWriter() {}
        /**
         * @test
         */
        public function loggerReturnsItselfAfterLoggingLessCritical() {}
        /**
         * @test
         */
        public function loggerCallsProcessor() {}
        /** @var NullWriter|\PHPUnit_Framework_MockObject_MockObject $writer */
        public function loggerLogsRecord() {}
        /**
         * @test
         */
        public function loggerLogsRecordsAtLeastAsCriticalAsLogLevel() {}
        /**
         * @return array
         */
        public function loggerLogsRecordsThroughShorthandMethodDataProvider() {}
        public function loggerLogsRecordsThroughShorthandMethod($shorthandMethod) {}
        /**
         * @test
         */
        public function loggerLogsRecordsMoreCriticalThanLogLevel() {}
        /**
         * @test
         */
        public function addWriterAddsWriterToTheSpecifiedLevel() {}
        /**
         * @test
         */
        public function addWriterAddsWriterAlsoToHigherLevelsThanSpecified() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Log\Processor {
    /**
     * Test case
     */
    class MemoryPeakUsageProcessorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function memoryPeakUsagePRocessorAddsMemoryPeakUsageDataToLogRecord() {}
    }

    /**
     * Test case
     */
    class WebProcessorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function webProcessorAddsWebDataToLogRecord() {}
    }

    /**
     * Test case
     */
    class AbstractProcessorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function processorRefusesInvalidConfigurationOptions() {}
        /**
         * @test
         */
        public function loggerExecutesProcessors() {}
    }

    /**
     * Test case
     */
    class AbstractMemoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var $processor \TYPO3\CMS\Core\Log\Processor\AbstractMemoryProcessor */
        public function getRealMemoryUsageGetsRealMemoryUsage() {}
        /**
         * @test
         */
        public function setRealMemoryUsageSetsRealMemoryUsage() {}
        /** @var $processor \TYPO3\CMS\Core\Log\Processor\AbstractMemoryProcessor */
        public function getFormatSizeGetsFormatSize() {}
        /** @var $processor \TYPO3\CMS\Core\Log\Processor\AbstractMemoryProcessor */
        public function setFormatSizeSetsFormatSize() {}
    }

    /**
     * Test case
     */
    class IntrospectionProcessorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Log\Processor\IntrospectionProcessor
         */
        protected $processor;
        /**
         * A dummy result for the debug_backtrace function
         *
         * @var array
         */
        protected $dummyBacktrace;

        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function introspectionProcessorAddsLastBacktraceItemToLogRecord() {}
        /**
         * @test
         */
        public function introspectionProcessorShiftsLogRelatedFunctionsFromBacktrace() {}
        /**
         * DataProvider for introspectionProcessorShiftsGivenNumberOfEntriesFromBacktrace
         */
        public function introspectionProcessorShiftsGivenNumberOfEntriesFromBacktraceDataProvider() {}
        public function introspectionProcessorShiftsGivenNumberOfEntriesFromBacktrace($number) {}
        /**
         * @test
         */
        public function introspectionProcessorLeavesOneEntryIfGivenNumberOfEntriesFromBacktraceIsGreaterOrEqualNumberOfBacktraceLevels() {}
        /**
         * @test
         */
        public function appendFullBacktraceAddsTheFullBacktraceAsStringToTheLog() {}
    }

    /**
     * Test case
     */
    class MemoryUsageProcessorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function memoryUsagePRocessorAddsMemoryUsageDataToLogRecord() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Log\Writer {
    /**
     * Test case
     */
    class FileWriterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $logFileDirectory;
        /**
         * @var string
         */
        protected $logFileName;

        protected function setUpVfsStream() {}
/** @var \TYPO3\CMS\Core\Log\Logger $logger */
        protected function createLogger(/** @var \TYPO3\CMS\Core\Log\Logger $logger */
$name = '') {}
/** @var \TYPO3\CMS\Core\Log\Writer\FileWriter $writer */
        protected function createWriter(/** @var \TYPO3\CMS\Core\Log\Writer\FileWriter $writer */
$prependName = '') {}
        protected function getDefaultFileName($prependName = '') {}
        /**
         * @test
         */
        public function setLogFileSetsLogFile() {}
        /**
         * @test
         */
        public function setLogFileAcceptsAbsolutePath() {}
        /**
         * @test
         */
        public function createsLogFileDirectory() {}
        /**
         * @test
         */
        public function createsLogFile() {}
        /**
         * @return array
         */
        public function logsToFileDataProvider() {}
        public function logsToFile(\TYPO3\CMS\Core\Log\LogRecord $record, $expectedResult) {}
        public function differentWritersLogToDifferentFiles(\TYPO3\CMS\Core\Log\LogRecord $record, $expectedResult) {}
        /**
         * @test
         */
        public function aSecondLogWriterToTheSameFileDoesNotOpenTheFileTwice() {}
    }

    /**
     * Test case
     */
    class DatabaseWriterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getTableReturnsPreviouslySetTable() {}
        /**
         * @test
         */
        public function writeLogInsertsToSpecifiedTable() {}
    }

    /**
     * Test case
     */
    class AbstractWriterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructThrowsExceptionWithInvalidConfigurationOption() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Log\Fixtures {
    /**
     * A writer dedicated for testing
     */
    class WriterFixture extends \typo3\cms\core\log\writer\abstractwriter {
        /**
         * @var array
         */
        protected $records;

        public function writeLog(\TYPO3\CMS\Core\Log\LogRecord $record) {}
    }

    /**
     * A processor dedicated for testing
     */
    class ProcessorFixture extends \typo3\cms\core\log\processor\abstractprocessor {
        public function processLogRecord(\TYPO3\CMS\Core\Log\LogRecord $record) {}
    }

    /**
     * A log writer that always fails to write (for testing purposes ;-))
     */
    class WriterFailing implements \typo3\cms\core\log\writer\writerinterface {
        public function writeLog(\TYPO3\CMS\Core\Log\LogRecord $record) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\DataHandler {
    /**
     * Test case
     */
    class DataHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var DataHandler|\PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface
         */
        protected $subject;
        /**
         * @var BackendUserAuthentication a mock logged-in back-end user
         */
        protected $backEndUser;

        /**
         * Set up the tests
         */
        protected function setUp() {}
        /**
         * Tear down the tests
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function fixtureCanBeCreated() {}
        /**
         * @test
         */
        public function adminIsAllowedToModifyNonAdminTable() {}
        /**
         * @test
         */
        public function nonAdminIsNorAllowedToModifyNonAdminTable() {}
        /**
         * @test
         */
        public function nonAdminWithTableModifyAccessIsAllowedToModifyNonAdminTable() {}
        /**
         * @test
         */
        public function adminIsAllowedToModifyAdminTable() {}
        /**
         * @test
         */
        public function nonAdminIsNotAllowedToModifyAdminTable() {}
        /**
         * @test
         */
        public function nonAdminWithTableModifyAccessIsNotAllowedToModifyAdminTable() {}
        /**
         * @test
         */
        public function evalCheckValueDouble2() {}
        public function dataProviderDatetime() {}
        public function evalCheckValueDatetime($input, $serverTimezone, $expectedOutput) {}
        /**
         * Data provider for inputValueCheckRecognizesStringValuesAsIntegerValuesCorrectly
         *
         * @return array
         */
        public function inputValuesStringsDataProvider() {}
        public function inputValueCheckRecognizesStringValuesAsIntegerValuesCorrectly($value, $expectedReturnValue) {}
        /**
         * @return array
         */
        public function inputValueCheckDoesNotCallGetDateTimeFormatsForNonDatetimeFieldsDataProvider() {}
        public function inputValueCheckDoesNotCallGetDateTimeFormatsForNonDatetimeFields($tcaFieldConf) {}
        /**
         * Tests whether a wrong interface on the 'checkModifyAccessList' hook throws an exception.
         * @test
         */
        public function doesCheckModifyAccessListThrowExceptionOnWrongHookInterface() {}
        /**
         * Tests whether the 'checkModifyAccessList' hook is called correctly.
         *
         * @test
         */
        public function doesCheckModifyAccessListHookGetsCalled() {}
        /**
         * Tests whether the 'checkModifyAccessList' hook modifies the $accessAllowed variable.
         *
         * @test
         */
        public function doesCheckModifyAccessListHookModifyAccessAllowed() {}
        /**
         * @test
         */
        public function processDatamapForFrozenNonZeroWorkspaceReturnsFalse() {}
        /**
         * @test
         */
        public function processDatamapWhenEditingRecordInWorkspaceCreatesNewRecordInWorkspace() {}
        /**
         * @test
         */
        public function doesCheckFlexFormValueHookGetsCalled() {}
        /**
         * @test
         */
        public function logCallsWriteLogOfBackendUserIfLoggingIsEnabled() {}
        /**
         * @test
         */
        public function logDoesNotCallWriteLogOfBackendUserIfLoggingIsDisabled() {}
        /**
         * @test
         */
        public function logAddsEntryToLocalErrorLogArray() {}
        /**
         * @test
         */
        public function logFormatsDetailMessageWithAdditionalDataInLocalErrorArray() {}
        public function equalSubmittedAndStoredValuesAreDetermined($expected, $submittedValue, $storedValue, $storedType, $allowNull) {}
        /**
         * @return array
         */
        public function equalSubmittedAndStoredValuesAreDeterminedDataProvider() {}
/** @var DataHandler|\PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface $subject */
        public function getPlaceholderTitleForTableLabelReturnsLabelThatsMatchesLabelFieldConditions(/** @var DataHandler|\PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface $subject */
$expected, /** @var DataHandler|\PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface $subject */
$eval) {}
        /**
         * @return array
         */
        public function getPlaceholderTitleForTableLabelReturnsLabelThatsMatchesLabelFieldConditionsDataProvider() {}
        /** @var DataHandler|\PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface $dataHandlerMock */
        public function deletePagesOnRootLevelIsDenied() {}
        /** @var DataHandler|\PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface $mockDataHandler */
        public function deleteRecord_procBasedOnFieldTypeRespectsEnableCascadingDelete() {}
        /**
         * @return array
         */
        public function checkValue_checkReturnsExpectedValuesDataProvider() {}
        public function checkValue_checkReturnsExpectedValues($value, $expectedValue) {}
        /**
         * @test
         */
        public function checkValueForInputConvertsNullToEmptyString() {}
        public function referenceValuesAreCasted($value, array $configuration, $expected) {}
        /**
         * @return array
         */
        public function referenceValuesAreCastedDataProvider() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\DataHandling\Fixtures {
    /**
     * Fixture hook allow access
     */
    class AllowAccessHookFixture implements \typo3\cms\core\datahandling\datahandlercheckmodifyaccesslisthookinterface {
        public function checkModifyAccessList($accessAllowed, $table, DataHandler $parent) {}
    }

    /**
     * Fixture invalid hook
     */
    class InvalidHookFixture {}

}

namespace TYPO3\CMS\Core\Tests\Unit\DataHandler\Localization {
    /**
     * Test case
     */
    class StateTest extends \typo3\testingframework\core\unit\unittestcase {
        const TABLE_NAME = 'tx_test_table';

        /**
         * Set up the tests
         */
        protected function setUp() {}
        public function stateObjectCanBeCreated(string $tableName, array $states) {}
        /**
         * @return array
         */
        public function stateObjectCanBeCreatedDataProvider() : array {}
        public function statesAreEnrichedAndSanitizedOnObjectCreation(array $states, array $expected) {}
        /**
         * @return array
         */
        public function statesAreEnrichedAndSanitizedOnObjectCreationDataProvider() : array {}
        private function provideTableConfiguration(string $fieldNames) : array {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource {
    /**
     * Testcase for the factory of FAL
     */
    class ResourceFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var \TYPO3\CMS\Core\Resource\ResourceFactory
         */
        protected $subject;
        /**
         * @var array
         */
        protected $filesCreated;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function createStorageCollectionObjectCreatesCollectionWithCorrectArguments() {}
        /**
         * @test
         */
        public function getDriverObjectAcceptsDriverClassName() {}
        /**
         * @test
         */
        public function retrieveFileOrFolderObjectCallsGetFolderObjectFromCombinedIdentifierWithRelativePath() {}
        /**
         * @test
         */
        public function retrieveFileOrFolderObjectCallsGetFolderObjectFromCombinedIdentifierWithAbsolutePath() {}
        /**
         * @test
         */
        public function retrieveFileOrFolderObjectReturnsFileIfPathIsGiven() {}
        public function findBestMatchingStorageByLocalPathReturnsDefaultStorageIfNoMatchIsFound(array $storageConfiguration, $path, $expectedStorageId) {}
        /**
         * @return array
         */
        public function storageDetectionDataProvider() {}
    }

    /**
     * Testcase for the ProcessedFile class of the TYPO3 FAL
     */
    class ProcessedFileTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|Folder
         */
        protected $folderMock;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|ResourceStorage
         */
        protected $storageMock;
        /**
         * @var array
         */
        protected $databaseRow;

        /**
         * @throws \PHPUnit\Framework\Exception
         */
        protected function setUp() {}
        protected function getFileFixture($dbRow = null, $storageMock = null) {}
        protected function getProcessedFileFixture($dbRow = null, $originalFile = null) {}
        /**
         * @test
         */
        public function propertiesOfProcessedFileAreSetFromDatabaseRow() {}
        /**
         * @test
         */
        public function deletingProcessedFileRemovesFile() {}
        /**
         * @test
         */
        public function deletingProcessedFileThatUsesOriginalFileDoesNotRemoveFile() {}
    }

    /**
     * Testcase for the ResourceCompressor class
     */
    class ResourceCompressorIntegrationTest extends \typo3\cms\core\tests\unit\resource\basetestcase {
        /**
         * @var TestableResourceCompressor
         */
        protected $resourceCompressor;
        /**
         * @var string
         */
        protected $fixtureDir;
        /**
         * @var string
         */
        protected $fixtureDirFromTest;

        public function setUp() {}
        /**
         * @test
         */
        public function constructorCreatesTargetDirectory() {}
        /**
         * @test
         */
        public function constructorCreatesHtaccessFileIfSet() {}
        /**
         * @test
         */
        public function constructorDoesNotCreateHtaccessFileIfSetToFalse() {}
        /**
         * @test
         */
        public function concatenateCssFiles() {}
        /**
         * @test
         */
        public function concatenateCssFilesWorksWithFileFromNonRootPath() {}
        public function tearDown() {}
    }

    /**
     * Testcase for the file class of the TYPO3 FAL
     */
    class FileReferenceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        protected function prepareFixture(array $fileReferenceProperties, array $originalFileProperties) {}
        /**
         * @return array
         */
        public function propertiesDataProvider() {}
        public function getPropertiesReturnsMergedPropertiesAndRespectsNullValues(array $fileReferenceProperties, array $originalFileProperties, array $expectedMergedProperties) {}
        public function hasPropertyReturnsTrueForAllMergedPropertyKeys($fileReferenceProperties, $originalFileProperties, $expectedMergedProperties) {}
        public function getPropertyReturnsAllMergedPropertyKeys($fileReferenceProperties, $originalFileProperties, $expectedMergedProperties) {}
        public function getPropertyThrowsExceptionForNotAvailableProperty($fileReferenceProperties, $originalFileProperties) {}
        public function getPropertyDoesNotThrowExceptionForPropertyOnlyAvailableInOriginalFile($fileReferenceProperties, $originalFileProperties) {}
        public function getReferencePropertyThrowsExceptionForPropertyOnlyAvailableInOriginalFile($fileReferenceProperties, $originalFileProperties) {}
    }

    /**
     * Testcase for the file class of the TYPO3 FAL
     */
    class FileTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var ResourceStorage
         */
        protected $storageMock;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @return \TYPO3\CMS\Core\Resource\File
         */
        protected function prepareFixture() {}
        /**
         * @test
         */
        public function commonPropertiesAreAvailableWithOwnGetters() {}
        /**
         * Tests if a file is seen as indexed if the record has a uid
         *
         * @test
         */
        public function fileIndexStatusIsTrueIfUidIsSet() {}
        /**
         * @test
         */
        public function updatePropertiesUpdatesFileProperties() {}
        /**
         * @test
         */
        public function updatePropertiesLeavesPropertiesUntouchedIfNotSetInNewProperties() {}
        /**
         * @test
         */
        public function updatePropertiesDiscardsUidIfAlreadySet() {}
        /**
         * @test
         */
        public function updatePropertiesRecordsNamesOfChangedProperties() {}
        /**
         * @test
         */
        public function updatePropertiesDoesNotRecordPropertyNameIfSameValueIsProvided() {}
        /**
         * @test
         */
        public function updatePropertiesMarksPropertyAsChangedOnlyOnce() {}
        /**
         * @test
         */
        public function updatePropertiesReloadsStorageObjectIfStorageChanges() {}
        /**
         * @test
         */
        public function copyToCallsCopyOperationOnTargetFolderStorage() {}
        /**
         * @test
         */
        public function moveToCallsMoveOperationOnTargetFolderStorage() {}
        public function filenameExtensionDataProvider() {}
        public function getNameWithoutExtensionReturnsCorrectName($originalFilename, $expectedBasename) {}
        public function getExtensionReturnsCorrectExtension($originalFilename, $expectedBasename, $expectedExtension) {}
        /**
         * @test
         */
        public function hasPropertyReturnsTrueFilePropertyExists() {}
        /**
         * @test
         */
        public function hasPropertyReturnsTrueIfMetadataPropertyExists() {}
    }

    /**
     * Test case for ResourceStorage class
     */
    class ResourceStorageTest extends \typo3\cms\core\tests\unit\resource\basetestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var ResourceStorage|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        /** @var FileRepository|\PHPUnit_Framework_MockObject_MockObject $fileRepositoryMock */
        protected function setUp() {}
        protected function tearDown() {}
        protected function prepareSubject(array $configuration, $mockPermissionChecks = false, AbstractDriver $driverObject = null, array $storageRecord = [ ], array $mockedMethods = [ ]) {}
        protected function convertConfigurationArrayToFlexformXml(array $configuration) {}
        protected function createDriverMock($driverConfiguration, ResourceStorage $storageObject = null, $mockedDriverMethods = [ ]) {}
        /**
         * @return array
         */
        public function capabilitiesDataProvider() {}
        public function capabilitiesOfStorageObjectAreCorrectlySet(array $capabilities) {}
        /**
         * @test
         * @TODO: Rewrite or move to functional suite
         */
        public function fileAndFolderListFiltersAreInitializedWithDefaultFilters() {}
        /** @var Folder|\PHPUnit_Framework_MockObject_MockObject $mockedFolder */
        public function addFileFailsIfFileDoesNotExist() {}
        /**
         * @test
         */
        public function getPublicUrlReturnsNullIfStorageIsNotOnline() {}
        /**
         * Data provider for checkFolderPermissionsRespectsFilesystemPermissions
         *
         * @return array
         */
        public function checkFolderPermissionsFilesystemPermissionsDataProvider() {}
/** @var $subject ResourceStorage|\PHPUnit_Framework_MockObject_MockObject */
        public function checkFolderPermissionsRespectsFilesystemPermissions(/** @var $subject ResourceStorage|\PHPUnit_Framework_MockObject_MockObject */
$action, /** @var $subject ResourceStorage|\PHPUnit_Framework_MockObject_MockObject */
$permissionsFromDriver, /** @var $subject ResourceStorage|\PHPUnit_Framework_MockObject_MockObject */
$expectedResult) {}
        /**
         * @test
         */
        public function checkUserActionPermissionsAlwaysReturnsTrueIfNoUserPermissionsAreSet() {}
        /**
         * @test
         */
        public function checkUserActionPermissionReturnsFalseIfPermissionIsSetToZero() {}
        public function checkUserActionPermission_arbitraryPermissionDataProvider() {}
        public function checkUserActionPermissionAcceptsArbitrarilyCasedArguments(array $permissions, $action, $type) {}
        /**
         * @test
         */
        public function userActionIsDisallowedIfPermissionIsSetToFalse() {}
        /**
         * @test
         */
        public function userActionIsDisallowedIfPermissionIsNotSet() {}
        /**
         * @test
         */
        public function getEvaluatePermissionsWhenSetFalse() {}
        /**
         * @test
         */
        public function getEvaluatePermissionsWhenSetTrue() {}
        /** @var $mockedFile File|\PHPUnit_Framework_MockObject_MockObject */
        public function setFileContentsUpdatesObjectProperties() {}
        /** @var $subject ResourceStorage */
        public function moveFileCallsDriversMethodsWithCorrectArguments() {}
        /**
         * @test
         * @group integration
         * @TODO: Rewrite or move to functional suite
         */
        public function storageUsesInjectedFilemountsToCheckForMountBoundaries() {}
        /**
         * @test
         * @TODO: Rewrite or move to functional suite
         */
        public function createFolderChecksIfParentFolderExistsBeforeCreatingFolder() {}
        /** @var $subject ResourceStorage|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function deleteFolderThrowsExceptionIfFolderIsNotEmptyAndRecursiveDeleteIsDisabled() {}
        /**
         * @test
         * @TODO: Rewrite or move to functional suite
         */
        public function createFolderCallsDriverForFolderCreation() {}
        /**
         * @test
         * @TODO: Rewrite or move to functional suite
         */
        public function createFolderCanRecursivelyCreateFolders() {}
        /**
         * @test
         * @TODO: Rewrite or move to functional suite
         */
        public function createFolderUsesRootFolderAsParentFolderIfNotGiven() {}
        /**
         * @test
         * @TODO: Rewrite or move to functional suite
         */
        public function createFolderCreatesNestedStructureEvenIfPartsAlreadyExist() {}
        /**
         * @test
         */
        public function createFolderThrowsExceptionIfParentFolderDoesNotExist() {}
        /** @var File $file */
        public function renameFileRenamesFileAsRequested() {}
        /** @var File $file */
        public function renameFileRenamesWithUniqueNameIfConflictAndConflictModeIsRename() {}
        /**
         * @test
         */
        public function renameFileThrowsExceptionIfConflictAndConflictModeIsCancel() {}
        /**
         * @test
         */
        public function renameFileReplacesIfConflictAndConflictModeIsReplace() {}
    }

    /**
     * Testcase for the abstract file class of the TYPO3 FAL
     */
    class AbstractFileTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getParentFolderGetsParentFolderFromStorage() {}
        /**
         * This test accounts for an inconsistency in the Storage–Driver interface of FAL: The driver returns the MIME
         * type in a field "mimetype", while the file object and the database table use mime_type.
         * The test is placed in the test case for AbstractFile because the broken functionality resides there, though
         * it is only triggered when constructing a File instance with an index record.
         *
         * @test
         */
        public function storageIsNotAskedForMimeTypeForPersistedRecord() {}
    }

    /**
     * Testcase for the storage collection class of the TYPO3 FAL
     */
    class FolderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        protected $basedir;

        protected function setUp() {}
        protected function tearDown() {}
        protected function createFolderFixture($path, $name, $mockedStorage = null) {}
        /**
         * @test
         */
        public function constructorArgumentsAreAvailableAtRuntime() {}
        /**
         * @test
         */
        public function propertiesCanBeUpdated() {}
        /**
         * @test
         */
        public function propertiesAreNotUpdatedIfNotSetInInput() {}
        /**
         * @test
         */
        public function getFilesReturnsArrayWithFilenamesAsKeys() {}
        /**
         * @test
         */
        public function getFilesHandsOverRecursiveFALSEifNotExplicitlySet() {}
        /**
         * @test
         */
        public function getFilesHandsOverRecursiveTRUEifSet() {}
        /**
         * @test
         */
        public function getSubfolderCallsFactoryWithCorrectArguments() {}
        /**
         * @test
         */
        public function getParentFolderGetsParentFolderFromStorage() {}
    }

    /**
     * Testcase for the ResourceCompressor class
     */
    class ResourceCompressorTest extends \typo3\cms\core\tests\unit\resource\basetestcase {
        /**
         * @var ResourceCompressor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;

        /**
         * Set up the test
         */
        protected function setUp() {}
        /**
         * @return array
         */
        public function cssFixStatementsDataProvider() {}
        public function cssFixStatementsMovesStatementsToTopIfNeeded($input, $expected) {}
        /**
         * @test
         */
        public function compressedCssFileIsFlaggedToNotCompressAgain() {}
        /**
         * @test
         */
        public function compressedJsFileIsFlaggedToNotCompressAgain() {}
        /**
         * @test
         */
        public function concatenatedCssFileIsFlaggedToNotConcatenateAgain() {}
        /**
         * @test
         */
        public function concatenatedCssFilesAreSeparatedByMediaType() {}
        /**
         * @test
         */
        public function concatenatedCssFilesObeyForceOnTopOption() {}
        /**
         * @test
         */
        public function concatenatedCssFilesObeyExcludeFromConcatenation() {}
        /**
         * @test
         */
        public function concatenatedJsFileIsFlaggedToNotConcatenateAgain() {}
        /**
         * @return array
         */
        public function calcStatementsDataProvider() {}
        public function calcFunctionMustRetainWhitespaces($input, $expected) {}
        /**
         * @return array
         */
        public function compressCssFileContentDataProvider() {}
        public function compressCssFileContent($cssFile, $expected) {}
    }

    /**
     * Basic test case for the \TYPO3\CMS\Core\Resource\File tests
     */
    abstract class BaseTestCase extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $basedir;
        protected $mountDir;
        protected $vfsContents;

        protected function setUp() {}
        protected function getMountRootUrl() {}
        protected function mergeToVfsContents($contents) {}
        protected function initializeVfs() {}
        protected function addToMount(array $dirStructure) {}
        protected function getUrlInMount($path) {}
        protected function addToVfs(array $dirStructure) {}
        protected function getUrl($path) {}
        protected function _createFileFolderMock($type, $identifier, $mockedMethods) {}
        protected function getSimpleFileMock($identifier, $mockedMethods = [ ]) {}
        protected function getSimpleFolderMock($identifier, $mockedMethods = [ ]) {}
        protected function getFolderMock($identifier, $mockedMethods = [ ], $subfolders = [ ], $files = [ ]) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Repository {
    /**
     * Test case
     */
    class AbstractRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var AbstractRepository
         */
        protected $subject;

        protected function createDatabaseMock() {}
        protected function setUp() {}
        /**
         * @test
         */
        public function findByUidFailsIfUidIsString() {}
        /**
         * @test
         */
        public function findByUidAcceptsNumericUidInString() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Collection {
    /**
     * Test cases for FileCollectionRegistry
     */
    class FileCollectionRegistryTest extends \typo3\cms\core\tests\unit\resource\basetestcase {
        /**
         * @var \TYPO3\CMS\Core\Resource\Collection\FileCollectionRegistry
         */
        protected $testSubject;

        protected function setUp() {}
        protected function initializeTestSubject() {}
        /**
         * @test
         */
        public function registeredFileCollectionClassesCanBeRetrieved() {}
        /**
         * @test
         */
        public function registerFileCollectionClassThrowsExceptionIfClassDoesNotExist() {}
        /**
         * @test
         */
        public function registerFileCollectionClassThrowsExceptionIfTypeIsTooLong() {}
        /**
         * @test
         */
        public function registerFileCollectionClassThrowsExceptionIfTypeIsAlreadyRegistered() {}
        /**
         * @test
         */
        public function registerFileCollectionClassOverridesExistingRegisteredFileCollectionClass() {}
        /**
         * @test
         */
        public function getFileCollectionClassThrowsExceptionIfClassIsNotRegistered() {}
        /**
         * @test
         */
        public function getFileCollectionClassAcceptsClassNameIfClassIsRegistered() {}
        /**
         * @test
         */
        public function fileCollectionRegistryIsInitializedWithPreconfiguredFileCollections() {}
        /**
         * @test
         */
        public function fileCollectionExistsReturnsTrueForAllExistingFileCollections() {}
        /**
         * @test
         */
        public function fileCollectionExistsReturnsFalseIfFileCollectionDoesNotExist() {}
        /**
         * @test
         */
        public function addNewTypeToTCA() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Processing {
    /**
     * Testcase for \TYPO3\CMS\Core\Resource\Processing\LocalPreviewHelper
     */
    class LocalPreviewHelperTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function processProvidesDefaultSizeIfNotConfigured() {}
        /**
         * @test
         */
        public function processDoesNotScaleUpImages() {}
        /**
         * @test
         */
        public function processGeneratesPreviewEvenIfSourceFileHasNoSize() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Driver {
    /**
     * Test case for the abstract driver.
     */
    class AbstractDriverTest extends \typo3\cms\core\tests\unit\resource\basetestcase {
        /**
         * @var \TYPO3\CMS\Core\Resource\Driver\AbstractDriver
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @return \TYPO3\CMS\Core\Resource\Driver\AbstractDriver
         */
        protected function createDriver() {}
        /**
         * @test
         */
        public function isCaseSensitiveFileSystemReturnsTrueIfNothingIsConfigured() {}
    }

    /**
     * Testcase for the FAL driver registry.
     */
    class DriverRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Resource\Driver\DriverRegistry
         */
        protected $subject;

        protected function setUp() {}
        protected function initializeSubject() {}
        /**
         * @test
         */
        public function registeredDriverClassesCanBeRetrieved() {}
        /**
         * @test
         */
        public function registerDriverClassThrowsExceptionIfClassDoesNotExist() {}
        /**
         * @test
         */
        public function registerDriverClassThrowsExceptionIfShortnameIsAlreadyTakenByAnotherDriverClass() {}
        /**
         * @test
         */
        public function getDriverClassThrowsExceptionIfClassIsNotRegistered() {}
        /**
         * @test
         */
        public function getDriverClassAcceptsClassNameIfClassIsRegistered() {}
        /**
         * @test
         */
        public function driverRegistryIsInitializedWithPreconfiguredDrivers() {}
        /**
         * @test
         */
        public function driverExistsReturnsTrueForAllExistingDrivers() {}
        /**
         * @test
         */
        public function driverExistsReturnsFalseIfDriverDoesNotExist() {}
    }

    /**
     * Testcase for the local storage driver class of the TYPO3 VFS
     */
    class LocalDriverTest extends \typo3\cms\core\tests\unit\resource\basetestcase {
        /**
         * @var \TYPO3\CMS\Core\Resource\Driver\LocalDriver
         */
        protected $localDriver;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var array
         */
        protected $testDirs;
        /**
         * @var string
         */
        protected $iso88591GreaterThan127;
        /**
         * @var string
         */
        protected $utf8Latin1Supplement;
        /**
         * @var string
         */
        protected $utf8Latin1ExtendedA;

        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * Creates a "real" directory for doing tests. This is necessary because some file system properties (e.g. permissions)
         * cannot be reflected by vfsStream, and some methods (like touch()) don't work there either.
         *
         * Created directories are automatically destroyed during tearDown()
         *
         * @return string
         */
        protected function createRealTestdir() {}
        /**
         * Create a "real" directory together with a driver configured
         * for this directory.
         *
         * @return array With path to base directory and driver
         */
        protected function prepareRealTestEnvironment() {}
/** @var \TYPO3\CMS\Core\Resource\Driver\LocalDriver $driver */
        protected function createDriver(/** @var \TYPO3\CMS\Core\Resource\Driver\LocalDriver $driver */
$driverConfiguration = [ ], /** @var \TYPO3\CMS\Core\Resource\Driver\LocalDriver $driver */
$mockedDriverMethods = [ ]) {}
        /**
         * @test
         */
        public function calculatedBasePathRelativeIsSane() {}
        /**
         * @test
         */
        public function calculatedBasePathAbsoluteIsSane() {}
        /**
         * @test
         */
        public function createFolderRecursiveSanitizesFilename() {}
        /**
         * @test
         */
        public function determineBaseUrlUrlEncodesUriParts() {}
        /**
         * @test
         */
        public function getDefaultFolderReturnsFolderForUserUploadPath() {}
        /**
         * @test
         */
        public function defaultLevelFolderFolderIsCreatedIfItDoesntExist() {}
        /**
         * @test
         */
        public function getFolderInFolderReturnsCorrectFolderObject() {}
        /**
         * @test
         */
        public function createFolderCreatesFolderOnDisk() {}
        /**
         * @test
         */
        public function createFolderReturnsFolderObject() {}
        public static function createFolderSanitizesFolderNameBeforeCreationDataProvider() {}
        public function createFolderSanitizesFolderNameBeforeCreation($newFolderName, $expectedFolderName) {}
        /**
         * @test
         */
        public function basePathIsNormalizedWithTrailingSlash() {}
        /**
         * @test
         */
        public function noSecondSlashIsAddedIfBasePathAlreadyHasTrailingSlash() {}
        public function getSpecificFileInformationDataProvider() {}
        public function getSpecificFileInformationReturnsRequestedFileInformation($expectedValue, $property) {}
        /**
         * @test
         */
        public function getAbsolutePathReturnsCorrectPath() {}
        /**
         * @test
         */
        public function addFileMovesFileToCorrectLocation() {}
        /**
         * @test
         */
        public function addFileUsesFilenameIfGiven() {}
        /**
         * @test
         */
        public function addFileFailsIfFileIsInDriverStorage() {}
        /**
         * @test
         */
        public function addFileReturnsFileIdentifier() {}
        /**
         * @test
         */
        public function existenceChecksWorkForFilesAndFolders() {}
        /**
         * @test
         */
        public function existenceChecksInFolderWorkForFilesAndFolders() {}
        /**
         * @test
         */
        public function getPublicUrlReturnsCorrectUriForConfiguredBaseUri() {}
        /**
         * Data provider for getPublicUrlReturnsValidUrlContainingSpecialCharacters().
         *
         * @return array
         */
        public function getPublicUrlReturnsValidUrlContainingSpecialCharacters_dataProvider() {}
        public function getPublicUrlReturnsValidUrlContainingSpecialCharacters($fileIdentifier) {}
        /**
         * @test
         */
        public function fileContentsCanBeWrittenAndRead() {}
        /**
         * @test
         */
        public function setFileContentsReturnsNumberOfBytesWrittenToFile() {}
        /**
         * @test
         * @see http://phpmagazin.de/vfsStream-1.1.0-nutzt-PHP-5.4-M%C3%B6glichkeiten-064406.html
         */
        public function newFilesCanBeCreated() {}
        /**
         * @test
         * @see http://phpmagazin.de/vfsStream-1.1.0-nutzt-PHP-5.4-M%C3%B6glichkeiten-064406.html
         */
        public function createdFilesAreEmpty() {}
        /** @var $subject \TYPO3\CMS\Core\Resource\Driver\LocalDriver */
        public function createFileFixesPermissionsOnCreatedFile() {}
        /**
         * @test
         */
        public function getFileReturnsCorrectIdentifier() {}
        /**
         * @test
         */
        public function getFileThrowsExceptionIfFileDoesNotExist() {}
        /**
         * @test
         */
        public function getFilesInFolderReturnsEmptyArrayForEmptyDirectory() {}
        /**
         * @test
         */
        public function getFileListReturnsAllFilesInDirectory() {}
        /**
         * @test
         */
        public function getFileListReturnsAllFilesInSubdirectoryIfRecursiveParameterIsSet() {}
        /**
         * @test
         */
        public function getFileListFailsIfDirectoryDoesNotExist() {}
        /**
         * @test
         */
        public function getFileInFolderCallsConfiguredCallbackFunctionWithGivenItemName() {}
        public static function callbackStaticTestFunction($itemName) {}
        /**
         * @test
         */
        public function getFileListFiltersItemsWithGivenFilterMethods() {}
        /**
         * @test
         */
        public function getFolderListReturnsAllDirectoriesInDirectory() {}
        /**
         * @test
         */
        public function getFolderListReturnsHiddenFoldersByDefault() {}
        /**
         * Checks if the folder names . and .. are ignored when listing subdirectories
         *
         * @test
         */
        public function getFolderListLeavesOutNavigationalEntries() {}
        /**
         * @test
         */
        public function getFolderListFiltersItemsWithGivenFilterMethods() {}
        /**
         * @test
         */
        public function getFolderListFailsIfDirectoryDoesNotExist() {}
        /**
         * @test
         */
        public function hashReturnsCorrectHashes() {}
        /**
         * @test
         */
        public function hashingWithUnsupportedAlgorithmFails() {}
        /**
         * @test
         * @covers TYPO3\CMS\Core\Resource\Driver\LocalDriver::getFileForLocalProcessing
         */
        public function getFileForLocalProcessingCreatesCopyOfFileByDefault() {}
        /**
         * @test
         */
        public function getFileForLocalProcessingReturnsOriginalFilepathForReadonlyAccess() {}
        /**
         * @test
         */
        public function filesCanBeCopiedToATemporaryPath() {}
        /**
         * @test
         */
        public function permissionsAreCorrectlyRetrievedForAllowedFile() {}
        /** @var $subject \TYPO3\CMS\Core\Resource\Driver\LocalDriver */
        public function permissionsAreCorrectlyRetrievedForForbiddenFile() {}
        /**
         * @test
         */
        public function permissionsAreCorrectlyRetrievedForAllowedFolder() {}
        /** @var $subject \TYPO3\CMS\Core\Resource\Driver\LocalDriver */
        public function permissionsAreCorrectlyRetrievedForForbiddenFolder() {}
        /**
         * Dataprovider for getFilePermissionsReturnsCorrectPermissionsForFilesNotOwnedByCurrentUser test
         *
         * @return array group, filemode and expected result
         */
        public function getFilePermissionsReturnsCorrectPermissionsForFilesNotOwnedByCurrentUser_dataProvider() {}
/** @var $fileObject vfsStreamContent */
        public function getFilePermissionsReturnsCorrectPermissionsForFilesNotOwnedByCurrentUser(/** @var $fileObject vfsStreamContent */
$group, /** @var $fileObject vfsStreamContent */
$permissions, /** @var $fileObject vfsStreamContent */
$expectedResult) {}
        /**
         * @test
         */
        public function isWithinRecognizesFilesWithinFolderAndInOtherFolders() {}
        /**
         * @test
         */
        public function isWithinAcceptsFileAndFolderObjectsAsContent() {}
        /**
         * @test
         */
        public function filesCanBeCopiedWithinStorage() {}
        /**
         * @test
         */
        public function filesCanBeMovedWithinStorage() {}
        /**
         * @test
         */
        public function fileMetadataIsChangedAfterMovingFile() {}
        public function renamingFiles_dataProvider() {}
        public function renamingFilesChangesFilenameOnDisk(array $filesystemStructure, $oldFileIdentifier, $newFileName, $expectedNewIdentifier) {}
        /**
         * @test
         */
        public function renamingFilesFailsIfTargetFileExists() {}
        /**
         * We use this data provider for testing move methods because there are some issues with the
         *
         * @return array
         */
        public function renamingFolders_dataProvider() {}
        public function renamingFoldersChangesFolderNameOnDisk(array $filesystemStructure, $oldFolderIdentifier, $newFolderName, $expectedNewIdentifier) {}
        /**
         * @test
         */
        public function renameFolderReturnsCorrectMappingInformationForAllFiles() {}
        /**
         * @test
         */
        public function renameFolderRevertsRenamingIfFilenameMapCannotBeCreated() {}
        /**
         * @test
         */
        public function isFolderEmptyReturnsTrueForEmptyFolder() {}
        /**
         * @test
         */
        public function isFolderEmptyReturnsFalseIfFolderHasFile() {}
        /**
         * @test
         */
        public function isFolderEmptyReturnsFalseIfFolderHasSubfolder() {}
        /** @var \TYPO3\CMS\Core\Resource\Driver\LocalDriver $subject */
        public function foldersCanBeMovedWithinStorage() {}
        /**
         * @test
         */
        public function moveFolderWithinStorageReturnsCorrectMappingInformationForAllFiles() {}
        /**
         * @test
         */
        public function folderCanBeRenamedWhenMoving() {}
        /**
         * @test
         */
        public function copyFolderWithinStorageCopiesSingleFileToNewFolderName() {}
        /**
         * @test
         */
        public function copyFolderWithinStorageCopiesSingleSubFolderToNewFolderName() {}
        /**
         * @test
         */
        public function copyFolderWithinStorageCopiesFileInSingleSubFolderToNewFolderName() {}
        /**
         * Set up data for sanitizeFileName tests
         */
        public function setUpCharacterStrings() {}
        /**
         * Data provider for sanitizeFileNameUTF8FilesystemDataProvider
         *
         * Every array splits into:
         * - String value fileName
         * - String value charset (none = '', utf-8, latin1, etc.)
         * - Expected result (cleaned fileName)
         *
         * @return array
         */
        public function sanitizeFileNameUTF8FilesystemDataProvider() {}
        public function sanitizeFileNameUTF8Filesystem($fileName, $expectedResult) {}
        /**
         * Data provider for sanitizeFileNameNonUTF8Filesystem
         *
         * Every array splits into:
         * - String value fileName
         * - String value charset (none = '', utf-8, latin1, etc.)
         * - Expected result (cleaned fileName)
         *
         * @return array
         */
        public function sanitizeFileNameNonUTF8FilesystemDataProvider() {}
        public function sanitizeFileNameNonUTF8Filesystem($fileName, $charset, $expectedResult) {}
        /**
         * @test
         */
        public function sanitizeFileNameThrowsExceptionOnInvalidFileName() {}
        /**
         * @test
         */
        public function applyFilterMethodsToDirectoryItemCallsFilterMethodIfClosure() {}
        /**
         * @test
         */
        public function applyFilterMethodsToDirectoryItemCallsFilterMethodIfName() {}
    }

    /**
     * Test case
     */
    class AbstractHierarchicalFilesystemDriverTest extends \typo3\cms\core\tests\unit\resource\basetestcase {
        /**
         * @var AbstractHierarchicalFilesystemDriver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;

        protected function setUp() {}
        public function canonicalizeAndCheckFileIdentifierCanonicalizesPath($expectedPath, $fileIdentifier) {}
        /**
         * @return array
         */
        public function canonicalizeAndCheckFileIdentifierCanonicalizesPathDataProvider() {}
        public function canonicalizeAndCheckFolderIdentifierCanonicalizesFolderIdentifier($expectedPath, $identifier) {}
        /**
         * @return array
         */
        public function canonicalizeAndCheckFolderIdentifierCanonicalizesFolderIdentifierDataProvider() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Driver\Fixtures {
    /**
     * Fixture class for the filename filters in the local driver.
     */
    class LocalDriverFilenameFilter {
        public static function filterFilename($itemName, $itemIdentifier, $parentIdentifier, array $additionalInformation, \TYPO3\CMS\Core\Resource\Driver\AbstractDriver $driverInstance) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\ResourceCompressorTest\Fixtures {
    class TestableResourceCompressor extends \typo3\cms\core\resource\resourcecompressor {
        protected $targetDirectory;

        public function getTargetDirectory() {}
        public function getHtaccessTemplate() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\TextExtraction {
    /**
     * Class PlainTextExtractorTest
     */
    class PlainTextExtractorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function canExtractTextReturnsTrueForPlainTextFiles() {}
        /**
         * @test
         */
        public function canExtractTextReturnsFalseForNonPlainTextFiles() {}
    }

    /**
     * Test cases for TextExtractorRegistry
     */
    class TextExtractorRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        protected function getTextExtractorRegistry(array $createsTextExtractorInstances = [ ]) {}
        /**
         * @test
         */
        public function registeredTextExtractorClassCanBeRetrieved() {}
        /**
         * @test
         */
        public function registerTextExtractorThrowsExceptionIfClassDoesNotExist() {}
        /**
         * @test
         */
        public function registerTextExtractorThrowsExceptionIfClassDoesNotImplementRightInterface() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Index {
    /**
     * Class IndexerTest
     */
    class IndexerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function isFileTypeSupportedByExtractorReturnsFalesForFileTypeTextAndExtractorLimitedToFileTypeImage() {}
        /**
         * @test
         */
        public function isFileTypeSupportedByExtractorReturnsTrueForFileTypeImageAndExtractorLimitedToFileTypeImage() {}
        /**
         * @test
         */
        public function isFileTypeSupportedByExtractorReturnsTrueForFileTypeTextAndExtractorHasNoFileTypeLimitation() {}
    }

    /**
     * Class ExtractorRegistryTest
     */
    class ExtractorRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function registeredExtractorClassCanBeRetrieved() {}
        /**
         * @test
         */
        public function registerExtractorClassThrowsExceptionIfClassDoesNotExist() {}
        /**
         * @test
         */
        public function registerExtractorClassThrowsExceptionIfClassDoesNotImplementRightInterface() {}
        /**
         * @test
         */
        public function registerExtractorClassWithHighestPriorityIsFirstInResult() {}
        /**
         * @test
         */
        public function registeredExtractorClassWithSamePriorityAreAllReturned() {}
        protected function getMockExtractorRegistry(array $createsExtractorInstances = [ ]) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Rendering {
    /**
     * Class VimeoRendererTest
     */
    class VimeoRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var VimeoRenderer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        /** @var VimeoHelper|\PHPUnit_Framework_MockObject_MockObject $vimeoHelper */
        protected function setUp() {}
        /**
         * @test
         */
        public function getPriorityReturnsCorrectValue() {}
        /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock2 */
        public function canRenderReturnsTrueOnCorrectFile() {}
        /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function canRenderReturnsFalseOnCorrectFile() {}
        /**
         * @test
         */
        public function renderOutputIsCorrect() {}
        /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function renderOutputWithLoopIsCorrect() {}
        /**
         * @test
         */
        public function renderOutputWithAutoplayIsCorrect() {}
        /** @var FileReference|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function renderOutputWithAutoplayFromReferenceIsCorrect() {}
        /**
         * @test
         */
        public function renderOutputWithAutoplayAndWithoutControllsIsCorrect() {}
        /**
         * @test
         */
        public function renderOutputWithAdditionalAttributes() {}
        /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function renderOutputWithDataAttributesForCustomization() {}
        /**
         * @test
         */
        public function renderOutputWithCombinationOfDataAndAdditionalAttributes() {}
    }

    /**
     * Class YouTubeRendererTest
     */
    class YouTubeRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var YouTubeRenderer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        /** @var YouTubeHelper|\PHPUnit_Framework_MockObject_MockObject $youTubeHelper */
        protected function setUp() {}
        /**
         * @test
         */
        public function getPriorityReturnsCorrectValue() {}
        /**
         * @test
         */
        public function canRenderReturnsTrueOnCorrectFile() {}
        /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function canRenderReturnsFalseOnCorrectFile() {}
        /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function renderOutputWithLoopIsCorrect() {}
        /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function renderOutputWithAutoplayIsCorrect() {}
        /** @var FileReference|\PHPUnit_Framework_MockObject_MockObject $fileReferenceMock */
        public function renderOutputWithAutoplayFromFileReferenceIsCorrect() {}
        /**
         * @test
         */
        public function renderOutputWithAutoplayAndWithoutControlsIsCorrect() {}
        public function renderOutputWithControlsDataProvider() {}
/** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function renderOutputWithDefaultControlsIsCorrect(/** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
$expected, /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
$options) {}
        /**
         * @test
         */
        public function renderOutputWithRelatedVideosTurnedOffIsCorrect() {}
        /**
         * @test
         */
        public function renderOutputWithAdditionalAttributes() {}
        /**
         * @test
         */
        public function renderOutputWithDataAttributesForCustomization() {}
        /** @var File|\PHPUnit_Framework_MockObject_MockObject $fileResourceMock */
        public function renderOutputWithCombinationOfDataAndAdditionalAttributes() {}
    }

    /**
     * Test cases for RendererRegistry
     */
    class RendererRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        protected function getTestRendererRegistry(array $createsRendererInstances = [ ]) {}
        /**
         * @test
         */
        public function registeredFileRenderClassCanBeRetrieved() {}
        /**
         * @test
         */
        public function registerRendererClassThrowsExceptionIfClassDoesNotExist() {}
        /**
         * @test
         */
        public function registerRendererClassThrowsExceptionIfClassDoesNotImplementRightInterface() {}
        /**
         * @test
         */
        public function registerRendererClassWithHighestPriorityIsFirstInResult() {}
        /**
         * @test
         */
        public function registeredFileRendererClassWithSamePriorityAreAllReturned() {}
        /**
         * @test
         */
        public function getRendererReturnsCorrectInstance() {}
        /**
         * @test
         */
        public function getRendererReturnsCorrectInstance2() {}
    }

    /**
     * Class AudioTagRendererTest
     */
    class AudioTagRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getPriorityReturnsCorrectValue() {}
        /**
         * @test
         */
        public function canRenderReturnsTrueOnCorrectFile() {}
        /**
         * @test
         */
        public function canRenderReturnsFalseOnCorrectFile() {}
        /**
         * Array of configurations
         */
        public function renderArgumentsDataProvider() {}
        public function renderOutputIsCorrect($url, $arguments, $expected) {}
    }

    /**
     * Class VideoTagRendererTest
     */
    class VideoTagRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getPriorityReturnsCorrectValue() {}
        /**
         * @test
         */
        public function canRenderReturnsTrueOnCorrectFile() {}
        /**
         * @test
         */
        public function canRenderReturnsFalseOnCorrectFile() {}
        /**
         * Array of configurations
         */
        public function renderArgumentsDataProvider() {}
        public function renderOutputIsCorrect($url, $arguments, $expected) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Filter {
    /**
     * Testcase for the filename filter of the TYPO3 VFS
     */
    class FileNameFilterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Return combinations of files and paths to test against.
         *
         * @return array
         */
        public function getItemsAndPathsWithoutHiddenFilesAndFolders_dataProvider() {}
        /**
         * Return combinations of files and paths to test against.
         *
         * @return array
         */
        public function getItemsAndPathsWithHiddenFilesAndFolders_dataProvider() {}
/** @var DriverInterface|\PHPUnit_Framework_MockObject_MockObject $driverMock */
        public function filterHiddenFilesAndFoldersFiltersHiddenFilesAndFolders(/** @var DriverInterface|\PHPUnit_Framework_MockObject_MockObject $driverMock */
$itemName, /** @var DriverInterface|\PHPUnit_Framework_MockObject_MockObject $driverMock */
$itemIdentifier, /** @var DriverInterface|\PHPUnit_Framework_MockObject_MockObject $driverMock */
$expected) {}
/** @var DriverInterface|\PHPUnit_Framework_MockObject_MockObject $driverMock */
        public function filterHiddenFilesAndFoldersAllowsHiddenFilesAndFolders(/** @var DriverInterface|\PHPUnit_Framework_MockObject_MockObject $driverMock */
$itemName, /** @var DriverInterface|\PHPUnit_Framework_MockObject_MockObject $driverMock */
$itemIdentifier, /** @var DriverInterface|\PHPUnit_Framework_MockObject_MockObject $driverMock */
$expected) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Resource\Utility {
    /**
     * Test suite for filtering files by their extensions.
     */
    class FileExtensionFilterTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var \TYPO3\CMS\Core\Resource\Filter\FileExtensionFilter
         */
        protected $filter;
        /**
         * @var array
         */
        protected $parameters;
        /**
         * @var \TYPO3\CMS\Core\DataHandling\DataHandler|PHPUnit_Framework_MockObject_MockObject
         */
        protected $dataHandlerMock;
        /**
         * @var \TYPO3\CMS\Core\Resource\ResourceFactory|PHPUnit_Framework_MockObject_MockObject
         */
        protected $fileFactoryMock;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * Cleans up this test suite.
         */
        protected function tearDown() {}
        /**
         * @return array
         */
        public function invalidInlineChildrenFilterParametersDataProvider() {}
        public function areInlineChildrenFilteredWithInvalidParameters($allowed, $disallowed, $values) {}
        /**
         * @return array
         */
        public function extensionFilterIgnoresCaseInAllowedExtensionCheckDataProvider() {}
/** @var \TYPO3\CMS\Core\Resource\Filter\FileExtensionFilter $filter */
        public function extensionFilterIgnoresCaseInAllowedExtensionCheck(/** @var \TYPO3\CMS\Core\Resource\Filter\FileExtensionFilter $filter */
$fileExtension, /** @var \TYPO3\CMS\Core\Resource\Filter\FileExtensionFilter $filter */
$allowedExtensions, /** @var \TYPO3\CMS\Core\Resource\Filter\FileExtensionFilter $filter */
$disallowedExtensions, /** @var \TYPO3\CMS\Core\Resource\Filter\FileExtensionFilter $filter */
$isAllowed) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Preparations {
    /**
     * Test case
     */
    class TcaPreparationTest extends \typo3\testingframework\core\unit\unittestcase {
        public function prepareQuotingOfTableNamesAndColumnNamesDataProvider() {}
        public function prepareQuotingOfTableNamesAndColumnNames(array $input, array $expected) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Error {
    /**
     * testcase for the DebugExceptionHandler class.
     */
    class DebugExceptionHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Error\DebugExceptionHandler|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function echoExceptionWebEscapesExceptionMessage() {}
    }

    /**
     * testcase for the \TYPO3\CMS\Core\Error\ProductionExceptionHandler class.
     */
    class ProductionExceptionHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Error\ProductionExceptionHandler|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function echoExceptionWebEscapesExceptionMessage() {}
        /** @var $exception \Exception|\PHPUnit_Framework_MockObject_MockObject */
        public function echoExceptionWebEscapesExceptionTitle() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Messaging {
    /**
     * Test case
     */
    class FlashMessageTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function jsonSerializeReturnsArrayWithDetailData() {}
    }

    /**
     * Test case
     */
    class FlashMessageServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Messaging\FlashMessageService|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $flashMessageService;

        protected function setUp() {}
        /**
         * @test
         */
        public function flashMessageServiceInitiallyIsEmpty() {}
        /**
         * @test
         */
        public function getMessageQueueByIdentifierRegistersNewFlashmessageQueuesOnlyOnce() {}
    }

    /**
     * Test case
     */
    class FlashMessageQueueTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function jsonSerializeReturnsArrayWithMessages() {}
    }

    /**
     * Test case
     */
    class FlashMessageRendererResolverTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function flashMessageRendererResolverResolveRendererWithoutContext() {}
    }

    /**
     * Test case
     */
    class ListRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function renderCreatesCorrectOutputForFlashMessage() {}
        /**
         * @test
         */
        public function renderCreatesCorrectOutputForFlashMessageWithoutTitle() {}
    }

    /**
     * Test case
     */
    class BootstrapRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function renderCreatesCorrectOutputForFlashMessage() {}
        /**
         * @test
         */
        public function renderCreatesCorrectOutputForFlashMessageWithoutTitle() {}
    }

    /**
     * Test case
     */
    class PlaintextRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function renderCreatesCorrectOutputForFlashMessage() {}
        /**
         * @test
         */
        public function renderCreatesCorrectOutputForFlashMessageWithoutTitle() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Authentication {
    /**
     * Test case
     */
    class BackendUserAuthenticationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array
         */
        protected $defaultFilePermissions;

        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function logoffCleansFormProtectionIfBackendUserIsLoggedIn() {}
        /**
         * @return array
         */
        public function getTSConfigDataProvider() {}
/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function getTSConfigReturnsCorrectArrayForGivenObjectString(/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
array $completeConfiguration, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
$objectString, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
array $expectedConfiguration) {}
        /**
         * @return array
         */
        public function getFilePermissionsTakesUserDefaultAndStoragePermissionsIntoAccountIfUserIsNotAdminDataProvider() {}
        public function getFilePermissionsTakesUserDefaultPermissionsFromTsConfigIntoAccountIfUserIsNotAdmin(array $userTsConfiguration) {}
        /**
         * @return array
         */
        public function getFilePermissionsFromStorageDataProvider() {}
/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function getFilePermissionsFromStorageOverwritesDefaultPermissions(/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
array $defaultPermissions, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
$storageUid, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
array $storagePermissions, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
array $expectedPermissions) {}
/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function getFilePermissionsFromStorageAlwaysReturnsDefaultPermissionsForAdmins(/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
array $defaultPermissions, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
$storageUid, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
array $storagePermissions) {}
        /**
         * @return array
         */
        public function getFilePermissionsTakesUserDefaultPermissionsFromRecordIntoAccountIfUserIsNotAdminDataProvider() {}
/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function getFilePermissionsTakesUserDefaultPermissionsFromRecordIntoAccountIfUserIsNotAdmin(/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
string $permissionValue, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
array $expectedPermissions) {}
        /**
         * @test
         */
        public function getFilePermissionsGrantsAllPermissionsToAdminUsers() {}
        /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function jsConfirmationReturnsTrueIfPassedValueEqualsConfiguration() {}
        /**
         * @test
         */
        public function jsConfirmationAllowsSettingMultipleBitsInValue() {}
        /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function jsConfirmationAlwaysReturnsFalseIfNoConfirmationIsSet() {}
        /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function jsConfirmationReturnsTrueIfConfigurationIsMissing() {}
        /**
         * Data provider to test page permissions constraints
         * returns an array of test conditions:
         *  - permission bit(s) as integer
         *  - admin flag
         *  - groups for user
         *  - expected SQL fragment
         *
         * @return array
         */
        public function getPagePermissionsClauseWithValidUserDataProvider() : array {}
/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
        public function getPagePermissionsClauseWithValidUser(/** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
int $perms, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
bool $admin, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
string $groups, /** @var BackendUserAuthentication|\PHPUnit_Framework_MockObject_MockObject $subject */
string $expected) {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Authentication\AbstractUserAuthentication
     */
    class AbstractUserAuthenticationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getAuthInfoArrayReturnsEmptyPidListIfNoCheckPidValueIsGiven() {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Authentication\AuthenticationService
     */
    class AuthenticationServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Date provider for processLoginReturnsCorrectData
         *
         * @return array
         */
        public function processLoginDataProvider() {}
/** @var $authenticationService AuthenticationService */
        public function processLoginReturnsCorrectData(/** @var $authenticationService AuthenticationService */
$passwordSubmissionStrategy, /** @var $authenticationService AuthenticationService */
$loginData, /** @var $authenticationService AuthenticationService */
$expectedProcessedData) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Package {
    /**
     * Testcase for the package class
     */
    class PackageTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function constructThrowsPackageDoesNotExistException() {}
        /**
         */
        public function validPackageKeys() {}
        public function constructAcceptsValidPackageKeys($packageKey) {}
        /**
         */
        public function invalidPackageKeys() {}
        public function constructRejectsInvalidPackageKeys($packageKey) {}
        /**
         * @test
         */
        public function aPackageCanBeFlaggedAsProtected() {}
    }

    /**
     * Test case
     */
    class DependencyResolverTest extends \typo3\testingframework\core\unit\unittestcase {
/** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
        public function buildDependencyGraphBuildsCorrectGraph(/** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
array $unsortedPackageStatesConfiguration, /** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
array $frameworkPackageKeys, /** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
array $expectedGraph) {}
/** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
        public function sortPackageStatesConfigurationByDependencyMakesSureThatDependantPackagesAreStandingBeforeAPackageInTheInternalPackagesAndPackagesConfigurationArrays(/** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
$unsortedPackageStatesConfiguration, /** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
$frameworkPackageKeys, /** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
$expectedSortedPackageKeys) {}
        /** @var DependencyResolver|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $dependencyResolver */
        public function sortPackageStatesConfigurationByDependencyThrowsExceptionWhenCycleDetected() {}
        /**
         * @return array
         */
        public function buildDependencyGraphBuildsCorrectGraphDataProvider() {}
        /**
         * @return array
         */
        public function packageSortingDataProvider() {}
    }

    /**
     * Testcase for the default package manager
     */
    class PackageManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var PackageManager|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $packageManager
         */
        protected $packageManager;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        protected function createPackage($packageKey) {}
        /**
         * @test
         */
        public function getPackageReturnsTheSpecifiedPackage() {}
        /**
         * @test
         */
        public function getPackageThrowsExceptionOnUnknownPackage() {}
        /**
         * @test
         */
        public function scanAvailablePackagesTraversesThePackagesDirectoryAndRegistersPackagesItFinds() {}
        /**
         * @test
         */
        public function scanAvailablePackagesKeepsExistingPackageConfiguration() {}
        /**
         * @test
         */
        public function packageStatesConfigurationContainsRelativePaths() {}
        /**
         * Data Provider returning valid package keys and the corresponding path
         *
         * @return array
         */
        public function packageKeysAndPaths() {}
        public function createPackageCreatesPackageFolderAndReturnsPackage($packageKey, $expectedPackagePath) {}
        /**
         * @test
         */
        public function activatePackageAndDeactivatePackageActivateAndDeactivateTheGivenPackage() {}
        /**
         * @test
         */
        public function deactivatePackageThrowsAnExceptionIfPackageIsProtected() {}
        /**
         * @test
         */
        public function deletePackageThrowsErrorIfPackageIsNotAvailable() {}
        /**
         * @test
         */
        public function deletePackageThrowsAnExceptionIfPackageIsProtected() {}
        /**
         * @test
         */
        public function deletePackageRemovesPackageFromAvailableAndActivePackagesAndDeletesThePackageDirectory() {}
        /**
         * @return array
         */
        public function composerNamesAndPackageKeys() {}
        public function getPackageKeyFromComposerNameIgnoresCaseDifferences($composerName, $packageKey) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Localization {
    /**
     * Test case
     */
    class LocalesTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Locales
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @return array
         */
        public function browserLanguageDetectionWorksDataProvider() : array {}
        public function browserLanguageDetectionWorks(string $acceptLanguageHeader, string $expected) {}
    }

    /**
     * Test case
     */
    class LocalizationFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getParsedDataHandlesLocallangXMLOverride() {}
        /**
         * @test
         */
        public function getParsedDataCallsLocalizationOverrideIfFileNotFoundExceptionIsThrown() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Localization\Parser {
    /**
     * Testcase for class \TYPO3\CMS\Core\Localization\Parser\LocallangXmlParser.
     */
    class LocallangXmlParserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Localization\Parser\LocallangXmlParser
         */
        protected $parser;
        /**
         * @var array
         */
        protected $locallangXMLOverride;
        /**
         * @var string
         */
        protected $l10nPriority;

        protected static function getFixtureFilePath($filename) {}
        /**
         * Prepares the environment before running a test.
         */
        protected function setUp() {}
        /**
         * Cleans up the environment after running a test.
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function canParseLlxmlInEnglish() {}
        /**
         * @test
         */
        public function canParseLlxmlInMd5Code() {}
        /**
         * @test
         */
        public function canParseLlxmlInFrenchAndReturnsNullLabelsIfNoTranslationIsFound() {}
        /** @var $factory LocalizationFactory */
        public function canOverrideLlxml() {}
        /** @var $factory LocalizationFactory */
        public function numericKeysDataProvider() {}
/** @var $factory LocalizationFactory */
        public function canTranslateNumericKeys(/** @var $factory LocalizationFactory */
$key, /** @var $factory LocalizationFactory */
$expectedResult) {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Localization\Parser\XliffParser.
     */
    class XliffParserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Localization\Parser\XliffParser
         */
        protected $parser;
        /**
         * @var array
         */
        protected $locallangXMLOverride;
        /**
         * @var string
         */
        protected $l10nPriority;
        /**
         * @var array
         */
        protected $xliffFileNames;

        /**
         * Prepares the environment before running a test.
         */
        protected function setUp() {}
        /**
         * Cleans up the environment after running a test.
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function canParseXliffInEnglish() {}
        /**
         * @test
         */
        public function canParseXliffInFrench() {}
        /**
         * @test
         */
        public function canOverrideXliff() {}
        /** @var $factory LocalizationFactory */
        public function canOverrideXliffWithFrenchOnly() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Console {
    /**
     * Testcase for CommandRegistry
     */
    class CommandRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \org\bovigo\vfs\vfsStreamDirectory
         */
        protected $rootDirectory;
        /**
         * @var PackageManager|\Prophecy\Prophecy\ObjectProphecy
         */
        protected $packageManagerProphecy;

        /**
         * Set up this testcase
         */
        protected function setUp() {}
        /** @var PackageInterface */
        public function iteratesCommandsOfActivePackages() {}
        /**
         * @test
         */
        public function throwsExceptionOnDuplicateCommand() {}
        /** @var PackageInterface|ObjectProphecy $package */
        public function getCommandByIdentifierReturnsRegisteredCommand() {}
        /**
         * @test
         */
        public function throwsUnknowCommandExceptionIfUnregisteredCommandIsRequested() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Utility {
    /**
     * Testcase for the \TYPO3\CMS\Core\Utility\MailUtility class.
     */
    class MailUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function breakLinesForEmailReturnsEmptyStringIfEmptryStringIsGiven() {}
        /**
         * @test
         */
        public function breakLinesForEmailReturnsOneLineIfCharWithIsNotExceeded() {}
        /**
         * @test
         */
        public function breakLinesForEmailBreaksTextIfCharWithIsExceeded() {}
        /**
         * @test
         */
        public function breakLinesForEmailBreaksTextWithNoSpaceFoundBeforeLimit() {}
        /**
         * @test
         */
        public function breakLinesForEmailBreaksTextIfLineIsLongerThanTheLineWidth() {}
        /**
         * Data provider for parseAddressesTest
         *
         * @return array Data sets
         */
        public function parseAddressesProvider() {}
        public function parseAddressesTest($source, $addressList) {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\PathUtility
     */
    class PathUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        public function isCommonPrefixResolvedCorrectly(array $paths, $expected) {}
        /**
         * @return array
         */
        public function isCommonPrefixResolvedCorrectlyDataProvider() {}
        public function isRelativePathResolvedCorrectly($source, $target, $expected) {}
        /**
         * @return array
         */
        public function isRelativePathResolvedCorrectlyDataProvider() {}
        public function isTrailingSeparatorSanitizedCorrectly($path, $separator, $expected) {}
        /**
         * @return array
         */
        public function isTrailingSeparatorSanitizedCorrectlyDataProvider() {}
        /**
         * Data Provider for getAbsolutePathOfRelativeReferencedFileOrPathResolvesFileCorrectly
         *
         * @return array
         */
        public function getAbsolutePathOfRelativeReferencedFileOrPathResolvesFileCorrectlyDataProvider() {}
        public function getAbsolutePathOfRelativeReferencedFileOrPathResolvesFileCorrectly($baseFileName, $includeFileName, $expectedFileName) {}
        /**
         * Data provider for getCanonicalPathCorrectlyCleansPath
         *
         * @return array
         */
        public function getCanonicalPathCorrectlyCleansPathDataProvider() {}
        public function getCanonicalPathCorrectlyCleansPath($inputName, $expectedResult) {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\DebugUtility
     */
    class DebugUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        protected function tearDown() {}
        /**
         * @test
         */
        public function debugNotEncodesHtmlInputIfPlainText() {}
        /**
         * @test
         */
        public function debugEncodesHtmlInputIfNoPlainText() {}
        /**
         * @return array
         */
        public function convertVariableToStringReturnsVariableContentDataProvider() {}
        public function convertVariableToStringReturnsVariableContent($variable, $expected) {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\VersionNumberUtility
     */
    class VersionNumberUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data Provider for convertVersionNumberToIntegerConvertsVersionNumbersToIntegers
         *
         * @return array
         */
        public function validVersionNumberDataProvider() {}
        /**
         * Data Provider for convertIntegerToVersionNumberConvertsOtherTypesAsIntegerToVersionNumber
         *
         * @see http://php.net/manual/en/language.types.php
         * @return array
         */
        public function invalidVersionNumberDataProvider() {}
        public function convertVersionNumberToIntegerConvertsVersionNumbersToIntegers($expected, $version) {}
        public function convertIntegerToVersionNumberConvertsIntegerToVersionNumber($versionNumber, $expected) {}
        public function convertIntegerToVersionNumberConvertsOtherTypesAsIntegerToVersionNumber($version) {}
        /**
         * @return array
         */
        public function getNumericTypo3VersionNumberDataProvider() {}
        public function getNumericTypo3VersionNumber($currentVersion, $expectedVersion) {}
        /**
         * Data provider for convertVersionsStringToVersionNumbersForcesVersionNumberInRange
         *
         * @return array
         */
        public function convertVersionsStringToVersionNumbersForcesVersionNumberInRangeDataProvider() {}
        public function convertVersionsStringToVersionNumbersForcesVersionNumberInRange($versionString, $expectedResult) {}
    }

    /**
     * Test case
     */
    class ArrayUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for filterByValueRecursiveCorrectlyFiltersArray
         *
         * Every array splits into:
         * - String value to search for
         * - Input array
         * - Expected result array
         */
        public function filterByValueRecursive() {}
        public function filterByValueRecursiveCorrectlyFiltersArray($needle, $haystack, $expectedResult) {}
        /**
         * @test
         */
        public function filterByValueRecursiveMatchesReferencesToSameObject() {}
        /**
         * @test
         */
        public function filterByValueRecursiveDoesNotMatchDifferentInstancesOfSameClass() {}
        /**
         * Mock the class under test, isValidPath() (method under test), calls
         * static getValuePath() internally, which is mocked here to return a specific
         * result. This works because of 'static' keyword'  instead of 'self'
         * for getValueByPath() call, using late static binding in PHP 5.3
         *
         * @test
         */
        public function isValidPathReturnsTrueIfPathExists() {}
        /**
         * @test
         */
        public function isValidPathReturnsFalseIfPathDoesNotExist() {}
        /**
         * @test
         */
        public function getValueByPathThrowsExceptionIfPathIsNotString() {}
        /**
         * @test
         */
        public function getValueByPathThrowsExceptionIfPathIsEmpty() {}
        /**
         * @test
         */
        public function getValueByPathReturnsFirstIndexIfPathIsZero() {}
        /**
         * @test
         */
        public function getValueByPathReturnsFirstIndexIfPathSegmentIsZero() {}
        /**
         * Data provider for getValueByPathThrowsExceptionIfPathNotExists
         * Every array splits into:
         * - Array to get value from
         * - String path
         * - Expected result
         * @return array
         */
        public function getValueByPathInvalidPathDataProvider() {}
        public function getValueByPathThrowsExceptionIfPathNotExists(array $array, $path) {}
        /**
         * Data provider for getValueByPathReturnsCorrectValue
         * Every array splits into:
         * - Array to get value from
         * - String path
         * - Expected result
         */
        public function getValueByPathValidDataProvider() {}
        public function getValueByPathGetsCorrectValue(array $array, $path, $expectedResult) {}
        /**
         * @test
         */
        public function getValueByPathAcceptsDifferentDelimiter() {}
        /**
         * @test
         */
        public function setValueByPathThrowsExceptionIfPathIsEmpty() {}
        /**
         * @test
         */
        public function setValueByPathThrowsExceptionIfPathIsNotAString() {}
        /**
         * @test
         */
        public function setValueByPathThrowsExceptionIfPathSegmentIsEmpty() {}
        /**
         * @test
         */
        public function setValueByPathCanUseZeroAsPathSegment() {}
        /**
         * @test
         */
        public function setValueByPathCanUseZeroAsPath() {}
        /**
         * Data provider for setValueByPathSetsCorrectValueDataProvider
         *
         * Every array splits into:
         * - Array to set value in
         * - String path
         * - Value to set
         * - Expected result
         */
        public function setValueByPathSetsCorrectValueDataProvider() {}
        public function setValueByPathSetsCorrectValue(array $array, $path, $value, $expectedResult) {}
        /**
         * @test
         */
        public function removeByPathThrowsExceptionIfPathIsEmpty() {}
        /**
         * @test
         */
        public function removeByPathThrowsExceptionIfPathIsNotAString() {}
        /**
         * @test
         */
        public function removeByPathThrowsExceptionWithEmptyPathSegment() {}
        /**
         * @test
         */
        public function removeByPathRemovesFirstIndexWithZeroAsPathSegment() {}
        /**
         * @test
         */
        public function removeByPathRemovesFirstIndexWithZeroAsPath() {}
        /**
         * @test
         */
        public function removeByPathThrowsExceptionIfPathDoesNotExistInArray() {}
        /**
         * @test
         */
        public function removeByPathAcceptsGivenDelimiter() {}
        /**
         * Data provider for removeByPathRemovesCorrectPath
         */
        public function removeByPathRemovesCorrectPathDataProvider() {}
        public function removeByPathRemovesCorrectPath(array $array, $path, $expectedResult) {}
        /**
         * @test
         */
        public function sortByKeyRecursiveCheckIfSortingIsCorrect() {}
        /**
         * Data provider for sortArraysByKeyCheckIfSortingIsCorrect
         */
        public function sortArraysByKeyCheckIfSortingIsCorrectDataProvider() {}
        public function sortArraysByKeyCheckIfSortingIsCorrect(array $array, $key, $ascending, $expectedResult) {}
        /**
         * @test
         */
        public function sortArraysByKeyThrowsExceptionForNonExistingKey() {}
        /**
         * @test
         */
        public function arrayExportReturnsFormattedMultidimensionalArray() {}
        /**
         * @test
         */
        public function arrayExportThrowsExceptionIfObjectShouldBeExported() {}
        /**
         * @test
         */
        public function arrayExportReturnsNumericArrayKeys() {}
        /**
         * @test
         */
        public function arrayExportReturnsNoKeyIndexForConsecutiveCountedArrays() {}
        /**
         * @test
         */
        public function arrayExportReturnsKeyIndexForNonConsecutiveCountedArrays() {}
        /**
         * @return array
         */
        public function flattenCalculatesExpectedResultDataProvider() {}
        public function flattenCalculatesExpectedResult(array $array, array $expected) {}
        /**
         * @return array
         */
        public function intersectRecursiveCalculatesExpectedResultDataProvider() {}
        public function intersectRecursiveCalculatesExpectedResult(array $source, array $mask, array $expected) {}
        /**
         * @return array
         */
        public function renumberKeysToAvoidLeapsIfKeysAreAllNumericDataProvider() {}
        public function renumberKeysToAvoidLeapsIfKeysAreAllNumericReturnsExpectedOrder(array $inputArray, array $expected) {}
        /**
         * @return array
         */
        public function mergeRecursiveWithOverruleCalculatesExpectedResultDataProvider() {}
        public function mergeRecursiveWithOverruleCalculatesExpectedResult($input1, $input2, $addKeys, $includeEmptyValues, $enableUnsetFeature, $expected) {}
        /**
         * @test
         */
        public function checkRemoveArrayEntryByValueRemovesEntriesFromOneDimensionalArray() {}
        /**
         * @test
         */
        public function checkRemoveArrayEntryByValueRemovesEntriesFromMultiDimensionalArray() {}
        /**
         * @test
         */
        public function checkRemoveArrayEntryByValueRemovesEntryWithEmptyString() {}
        public function keepItemsInArrayWorksWithOneArgument($search, $array, $expected) {}
        /**
         * Data provider for keepItemsInArrayWorksWithOneArgument
         *
         * @return array
         */
        public function keepItemsInArrayWorksWithOneArgumentDataProvider() {}
        /**
         * Shows the example from the doc comment where
         * a function is used to reduce the sub arrays to one item which
         * is then used for the matching.
         *
         * @test
         */
        public function keepItemsInArrayCanUseClosure() {}
        /**
         * @test
         */
        public function remapArrayKeysExchangesKeysWithGivenMapping() {}
        /**
         * @test
         */
        public function arrayDiffAssocRecursiveHandlesOneDimensionalArrays() {}
        /**
         * @test
         */
        public function arrayDiffAssocRecursiveHandlesMultiDimensionalArrays() {}
        /**
         * @test
         */
        public function arrayDiffAssocRecursiveHandlesMixedArrays() {}
        /**
         * @test
         */
        public function naturalKeySortRecursiveSortsOneDimensionalArrayByNaturalOrder() {}
        /**
         * @test
         */
        public function naturalKeySortRecursiveSortsMultiDimensionalArrayByNaturalOrder() {}
        /**
         * Data provider for filterAndSortByNumericKeysBehavesCorrectlyForAcceptAnyKeysIsTrue
         *
         * @return array
         */
        public function filterAndSortByNumericKeysWithAcceptAnyKey() {}
        public function filterAndSortByNumericKeysBehavesCorrectlyForAcceptAnyKeysIsTrue($input, $expected) {}
        /**
         * Data provider for filterAndSortByNumericKeysBehavesCorrectlyForAcceptAnyKeysIsFalse
         *
         * @return array
         */
        public function filterAndSortByNumericKeysWithoutAcceptAnyKey() {}
        public function filterAndSortByNumericKeysBehavesCorrectlyForAcceptAnyKeysIsFalse($input, $expected) {}
        /**
         * dataProvider for sortArrayWithIntegerKeys
         *
         * @return array
         */
        public function sortArrayWithIntegerKeysDataProvider() {}
        public function sortArrayWithIntegerKeysSortsNumericArrays(array $arrayToSort, array $expectedArray) {}
        /**
         * @test
         */
        public function assertAllArrayKeysAreValidThrowsExceptionOnNotAllowedArrayKeys() {}
        /**
         * @test
         */
        public function assertAllArrayKeysAreValidReturnsNullOnAllowedArrayKeys() {}
        /**
         * @test
         */
        public function sortArrayWithIntegerKeysRecursiveExpectSorting() {}
        /**
         * @test
         */
        public function sortArrayWithIntegerKeysRecursiveExpectNoSorting() {}
        /**
         * @test
         */
        public function reIndexNumericArrayKeysRecursiveExpectReindexing() {}
        /**
         * @test
         */
        public function reIndexNumericArrayKeysRecursiveExpectNoReindexing() {}
        /**
         * @test
         */
        public function removeNullValuesRecursiveExpectRemoval() {}
        /**
         * @test
         */
        public function stripTagsFromValuesRecursiveExpectRemoval() {}
        /**
         * @test
         */
        public function convertBooleanStringsToBooleanRecursiveExpectConverting() {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\RootlineUtility
     */
    class RootlineUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var RootlineUtility|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;
        /**
         * @var \TYPO3\CMS\Frontend\Page\PageRepository|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $pageContextMock;

        protected function setUp() {}
        protected function tearDown() {}
        protected function assertIsSubset(array $subsetCandidate, array $superset) {}
        /**
         * @test
         */
        public function isMountedPageWithoutMountPointsReturnsFalse() {}
        /**
         * @test
         */
        public function isMountedPageWithMatchingMountPointParameterReturnsTrue() {}
        /**
         * @test
         */
        public function isMountedPageWithNonMatchingMountPointParameterReturnsFalse() {}
        /**
         * @test
         */
        public function processMountedPageWithNonMountedPageThrowsException() {}
        /**
         * @test
         */
        public function processMountedPageWithMountedPageNotThrowsException() {}
        /**
         * @test
         */
        public function processMountedPageWithMountedPageAddsMountedFromParameter() {}
        /**
         * @test
         */
        public function processMountedPageWithMountedPageAddsMountPointParameterToReturnValue() {}
        /**
         * @test
         */
        public function processMountedPageForMountPageIsOverlayAddsMountOLParameter() {}
        /**
         * @test
         */
        public function processMountedPageForMountPageIsOverlayAddsDataInformationAboutMountPage() {}
        /**
         * @test
         */
        public function processMountedPageForMountPageWithoutOverlayReplacesMountedPageWithMountPage() {}
        /**
         * @test
         */
        public function columnHasRelationToResolveDetectsGroupFieldAsLocal() {}
        /**
         * @test
         */
        public function columnHasRelationToResolveDetectsGroupFieldWithMMAsRemote2() {}
        /**
         * @test
         */
        public function columnHasRelationToResolveDetectsInlineFieldAsLocal() {}
        /**
         * @test
         */
        public function columnHasRelationToResolveDetectsInlineFieldWithForeignKeyAsRemote() {}
        /**
         * @test
         */
        public function columnHasRelationToResolveDetectsInlineFieldWithFMMAsRemote() {}
        /**
         * @test
         */
        public function columnHasRelationToResolveDetectsSelectFieldAsLocal() {}
        /**
         * @test
         */
        public function columnHasRelationToResolveDetectsSelectFieldWithMMAsRemote() {}
        /**
         * @test
         */
        public function getCacheIdentifierContainsAllContextParameters() {}
        /**
         * @test
         */
        public function getCacheIdentifierReturnsValidIdentifierWithCommasInMountPointParameter() {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\ResourceUtility
     */
    class ResourceUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @return array
         */
        public function recursiveFileListSortingHelperTestDataProvider() {}
        public function recursiveFileListSortingHelperCorrectlySorts($unsortedList, $expectedList) {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\MathUtility
     */
    class MathUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for forceIntegerInRangeForcesIntegerIntoBoundaries
         *
         * @return array expected values, arithmetic expression
         */
        public function forceIntegerInRangeForcesIntegerIntoDefaultBoundariesDataProvider() {}
        public function forceIntegerInRangeForcesIntegerIntoDefaultBoundaries($expected, $value) {}
        /**
         * @test
         */
        public function forceIntegerInRangeSetsDefaultValueIfZeroValueIsGiven() {}
        /**
         * @test
         */
        public function convertToPositiveIntegerReturnsZeroForNegativeValues() {}
        /**
         * @test
         */
        public function convertToPositiveIntegerReturnsTheInputValueForPositiveValues() {}
        /**
         * Data provider for canBeInterpretedAsIntegerReturnsTrue
         *
         * @return array Data sets
         */
        public function functionCanBeInterpretedAsIntegerValidDataProvider() {}
        public function canBeInterpretedAsIntegerReturnsTrue($int) {}
        /**
         * Data provider for canBeInterpretedAsIntegerReturnsFalse
         *
         * @return array Data sets
         */
        public function functionCanBeInterpretedAsIntegerInvalidDataProvider() {}
        public function canBeInterpretedAsIntegerReturnsFalse($int) {}
        /**
         * Data provider for canBeInterpretedAsFloatReturnsTrue
         *
         * @return array Data sets
         */
        public function functionCanBeInterpretedAsFloatValidDataProvider() {}
        public function canBeInterpretedAsFloatReturnsTrue($val) {}
        /**
         * Data provider for canBeInterpretedAsFloatReturnsFalse
         *
         * @return array Data sets
         */
        public function functionCanBeInterpretedAsFloatInvalidDataProvider() {}
        public function canBeInterpretedAsFloatReturnsFalse($int) {}
        /**
         * Data provider for calculateWithPriorityToAdditionAndSubtraction
         *
         * @return array expected values, arithmetic expression
         */
        public function calculateWithPriorityToAdditionAndSubtractionDataProvider() {}
        public function calculateWithPriorityToAdditionAndSubtractionCorrectlyCalculatesExpression($expected, $expression) {}
        /**
         * Data provider for calcParenthesis
         *
         * @return array expected values, arithmetic expression
         */
        public function calculateWithParenthesesDataProvider() {}
        public function calculateWithParenthesesCorrectlyCalculatesExpression($expected, $expression) {}
        /**
         * @test
         */
        public function isIntegerInRangeIncludesLowerBoundary() {}
        /**
         * @test
         */
        public function isIntegerInRangeIncludesUpperBoundary() {}
        /**
         * @test
         */
        public function isIntegerInRangeAcceptsValueInRange() {}
        /**
         * @test
         */
        public function isIntegerInRangeRejectsValueOutsideOfRange() {}
        /**
         * Data provider or isIntegerInRangeRejectsOtherDataTypes
         */
        public function isIntegerInRangeRejectsOtherDataTypesDataProvider() {}
        public function isIntegerInRangeRejectsOtherDataTypes($inputValue) {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\HttpUtility
     */
    class HttpUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        public function isUrlBuiltCorrectly(array $urlParts, $expected) {}
        /**
         * @return array
         */
        public function isUrlBuiltCorrectlyDataProvider() {}
    }

    /**
     * Test case for class \TYPO3\CMS\Core\Utility\CommandUtility
     */
    class CommandUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for getConfiguredApps
         *
         * @return array
         */
        public function getConfiguredAppsDataProvider() {}
        public function getConfiguredApps($globalsBinSetup, $expected) {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\GeneralUtility
     */
    class GeneralUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        const NO_FIX_PERMISSIONS_ON_WINDOWS = 'fixPermissions() not available on Windows (method does nothing)';

        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var \TYPO3\CMS\Core\Package\PackageManager
         */
        protected $backupPackageManager;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * Helper method to test for an existing internet connection.
         * Some tests are skipped if there is no working uplink.
         *
         * @return bool $isConnected
         */
        public function isConnected() {}
        protected function getVirtualTestDir($prefix = 'root_') {}
        public function canRetrieveValueWithGP($key, $get, $post, $expected) {}
        /**
         * Data provider for canRetrieveValueWithGP.
         * All test values also check whether slashes are stripped properly.
         *
         * @return array
         */
        public function gpDataProvider() {}
        public function gpMergedWillMergeArraysFromGetAndPost($get, $post, $expected) {}
        /**
         * Data provider for gpMergedWillMergeArraysFromGetAndPost
         *
         * @return array
         */
        public function gpMergedDataProvider() {}
        /**
         * Data provider for canRetrieveGlobalInputsThroughGet
         * and canRetrieveGlobalInputsThroughPost
         *
         * @return array
         */
        public function getAndPostDataProvider() {}
        public function canRetrieveGlobalInputsThroughGet($key, $get, $expected) {}
        public function canRetrieveGlobalInputsThroughPost($key, $post, $expected) {}
        public function canSetNewGetInputValues($input, $key, $expected, $getPreset = [ ]) {}
        /**
         * Data provider for canSetNewGetInputValues
         *
         * @return array
         */
        public function getSetDataProvider() {}
        /**
         * Data provider for cmpIPv4ReturnsTrueForMatchingAddress
         *
         * @return array Data sets
         */
        public static function cmpIPv4DataProviderMatching() {}
        public function cmpIPv4ReturnsTrueForMatchingAddress($ip, $list) {}
        /**
         * Data provider for cmpIPv4ReturnsFalseForNotMatchingAddress
         *
         * @return array Data sets
         */
        public static function cmpIPv4DataProviderNotMatching() {}
        public function cmpIPv4ReturnsFalseForNotMatchingAddress($ip, $list) {}
        /**
         * Data provider for cmpIPv6ReturnsTrueForMatchingAddress
         *
         * @return array Data sets
         */
        public static function cmpIPv6DataProviderMatching() {}
        public function cmpIPv6ReturnsTrueForMatchingAddress($ip, $list) {}
        /**
         * Data provider for cmpIPv6ReturnsFalseForNotMatchingAddress
         *
         * @return array Data sets
         */
        public static function cmpIPv6DataProviderNotMatching() {}
        public function cmpIPv6ReturnsFalseForNotMatchingAddress($ip, $list) {}
        /**
         * Data provider for IPv6Hex2BinCorrect
         *
         * @return array Data sets
         */
        public static function IPv6Hex2BinDataProviderCorrect() {}
        public function IPv6Hex2BinCorrectlyConvertsAddresses($hex, $binary) {}
        /**
         * Data provider for IPv6Bin2HexCorrect
         *
         * @return array Data sets
         */
        public static function IPv6Bin2HexDataProviderCorrect() {}
        public function IPv6Bin2HexCorrectlyConvertsAddresses($binary, $hex) {}
        /**
         * Data provider for normalizeIPv6ReturnsCorrectlyNormalizedFormat
         *
         * @return array Data sets
         */
        public static function normalizeCompressIPv6DataProviderCorrect() {}
        public function normalizeIPv6CorrectlyNormalizesAddresses($compressed, $normalized) {}
        public function compressIPv6CorrectlyCompressesAdresses($compressed, $normalized) {}
        /**
         * @test
         */
        public function compressIPv6CorrectlyCompressesAdressWithSomeAddressOnRightSide() {}
        /**
         * Data provider for checkValidIpReturnsTrueForValidIp
         *
         * @return array Data sets
         */
        public static function validIpDataProvider() {}
        public function validIpReturnsTrueForValidIp($ip) {}
        /**
         * Data provider for checkValidIpReturnsFalseForInvalidIp
         *
         * @return array Data sets
         */
        public static function invalidIpDataProvider() {}
        public function validIpReturnsFalseForInvalidIp($ip) {}
        /**
         * Data provider for cmpFqdnReturnsTrue
         *
         * @return array Data sets
         */
        public static function cmpFqdnValidDataProvider() {}
        public function cmpFqdnReturnsTrue($baseHost, $list) {}
        /**
         * Data provider for cmpFqdnReturnsFalse
         *
         * @return array Data sets
         */
        public static function cmpFqdnInvalidDataProvider() {}
        public function cmpFqdnReturnsFalse($baseHost, $list) {}
        public function inListForItemContainedReturnsTrue($haystack) {}
        /**
         * Data provider for inListForItemContainedReturnsTrue.
         *
         * @return array
         */
        public function inListForItemContainedReturnsTrueDataProvider() {}
        public function inListForItemNotContainedReturnsFalse($haystack) {}
        /**
         * Data provider for inListForItemNotContainedReturnsFalse.
         *
         * @return array
         */
        public function inListForItemNotContainedReturnsFalseDataProvider() {}
        public function rmFromListRemovesElementsFromCommaSeparatedList($initialList, $listWithElementRemoved) {}
        /**
         * Data provider for rmFromListRemovesElementsFromCommaSeparatedList
         *
         * @return array
         */
        public function rmFromListRemovesElementsFromCommaSeparatedListDataProvider() {}
        public function expandListExpandsIntegerRanges($list, $expectation) {}
        /**
         * Data provider for expandListExpandsIntegerRangesDataProvider
         *
         * @return array
         */
        public function expandListExpandsIntegerRangesDataProvider() {}
        /**
         * @test
         */
        public function expandListExpandsForTwoThousandElementsExpandsOnlyToThousandElementsMaximum() {}
        public function uniqueListUnifiesCommaSeparatedList($initialList, $unifiedList) {}
        /**
         * Data provider for uniqueListUnifiesCommaSeparatedList
         *
         * @return array
         */
        public function uniqueListUnifiesCommaSeparatedListDataProvider() {}
        /**
         * Data provider for isFirstPartOfStrReturnsTrueForMatchingFirstParts
         *
         * @return array
         */
        public function isFirstPartOfStrReturnsTrueForMatchingFirstPartDataProvider() {}
        public function isFirstPartOfStrReturnsTrueForMatchingFirstPart($string, $part) {}
        /**
         * Data provider for checkIsFirstPartOfStrReturnsFalseForNotMatchingFirstParts
         *
         * @return array
         */
        public function isFirstPartOfStrReturnsFalseForNotMatchingFirstPartDataProvider() {}
        public function isFirstPartOfStrReturnsFalseForNotMatchingFirstPart($string, $part) {}
        public function formatSizeTranslatesBytesToHigherOrderRepresentation($size, $labels, $base, $expected) {}
        /**
         * Data provider for formatSizeTranslatesBytesToHigherOrderRepresentation
         *
         * @return array
         */
        public function formatSizeDataProvider() {}
        /**
         * Data provider for splitCalc
         *
         * @return array expected values, arithmetic expression
         */
        public function splitCalcDataProvider() {}
        public function splitCalcCorrectlySplitsExpression($expected, $expression) {}
        /**
         * @test
         */
        public function htmlspecialcharsDecodeReturnsDecodedString() {}
        /**
         * Data provider for valid validEmail's
         *
         * @return array Valid email addresses
         */
        public function validEmailValidDataProvider() {}
        public function validEmailReturnsTrueForValidMailAddress($address) {}
        /**
         * Data provider for invalid validEmail's
         *
         * @return array Invalid email addresses
         */
        public function validEmailInvalidDataProvider() {}
        public function validEmailReturnsFalseForInvalidMailAddress($address) {}
        /**
         * @test
         */
        public function intExplodeConvertsStringsToInteger() {}
        /**
         * Data provider for implodeArrayForUrlBuildsValidParameterString and
         * explodeUrl2ArrayTransformsParameterStringToArray
         *
         * @return array
         */
        public function implodeArrayForUrlDataProvider() {}
        public function implodeArrayForUrlBuildsValidParameterString($name, $input, $expected) {}
        /**
         * @test
         */
        public function implodeArrayForUrlCanSkipEmptyParameters() {}
        /**
         * @test
         */
        public function implodeArrayForUrlCanUrlEncodeKeyNames() {}
        public function explodeUrl2ArrayTransformsParameterStringToNestedArray($name, $array, $input) {}
        public function explodeUrl2ArrayTransformsParameterStringToFlatArray($input, $expected) {}
        /**
         * Data provider for explodeUrl2ArrayTransformsParameterStringToFlatArray
         *
         * @return array
         */
        public function explodeUrl2ArrayDataProvider() {}
        /**
         * @test
         */
        public function compileSelectedGetVarsFromArrayFiltersIncomingData() {}
        /**
         * @test
         */
        public function compileSelectedGetVarsFromArrayUsesGetPostDataFallback() {}
        /**
         * @return array
         */
        public function revExplodeDataProvider() {}
        public function revExplodeCorrectlyExplodesStringForGivenPartsCount($delimiter, $testString, $count, $expectedArray) {}
        /**
         * @test
         */
        public function revExplodeRespectsLimitThreeWhenExploding() {}
        public function trimExplodeReturnsCorrectResult($delimiter, $testString, $removeEmpty, $limit, $expectedResult) {}
        /**
         * @return array
         */
        public function trimExplodeReturnsCorrectResultDataProvider() {}
        /**
         * Data provider for getBytesFromSizeMeasurement
         *
         * @return array expected value, input string
         */
        public function getBytesFromSizeMeasurementDataProvider() {}
        public function getBytesFromSizeMeasurementCalculatesCorrectByteValue($expected, $byteString) {}
        /**
         * @test
         */
        public function getIndpEnvTypo3SitePathReturnNonEmptyString() {}
        /**
         * @test
         */
        public function getIndpEnvTypo3SitePathReturnsStringStartingWithSlash() {}
        /**
         * @test
         */
        public function getIndpEnvTypo3SitePathReturnsStringStartingWithDrive() {}
        /**
         * @test
         */
        public function getIndpEnvTypo3SitePathReturnsStringEndingWithSlash() {}
        /**
         * @return array
         */
        public static function hostnameAndPortDataProvider() {}
        public function getIndpEnvTypo3HostOnlyParsesHostnamesAndIpAdresses($httpHost, $expectedIp) {}
        /**
         * @test
         */
        public function isAllowedHostHeaderValueReturnsFalseIfTrusedHostsIsNotConfigured() {}
        /**
         * @return array
         */
        public static function hostnamesMatchingTrustedHostsConfigurationDataProvider() {}
        /**
         * @return array
         */
        public static function hostnamesNotMatchingTrustedHostsConfigurationDataProvider() {}
        public function isAllowedHostHeaderValueReturnsTrueIfHostValueMatches($httpHost, $hostNamePattern) {}
        public function isAllowedHostHeaderValueReturnsFalseIfHostValueMatches($httpHost, $hostNamePattern) {}
        public function serverNamePatternDataProvider() {}
        public function isAllowedHostHeaderValueWorksCorrectlyWithWithServerNamePattern($httpHost, $serverName, $isAllowed, $serverPort = '80', $ssl = 'Off') {}
        /**
         * @test
         */
        public function allGetIndpEnvCallsRelatedToHostNamesCallIsAllowedHostHeaderValue() {}
        public function getIndpEnvForHostThrowsExceptionForNotAllowedHostnameValues($httpHost, $hostNamePattern) {}
        public function getIndpEnvForHostAllowsAllHostnameValuesIfHostPatternIsSetToAllowAll($httpHost, $hostNamePattern) {}
        public function getIndpEnvTypo3PortParsesHostnamesAndIpAdresses($httpHost, $dummy, $expectedPort) {}
        /**
         * Data provider for underscoredToUpperCamelCase
         *
         * @return array expected, input string
         */
        public function underscoredToUpperCamelCaseDataProvider() {}
        public function underscoredToUpperCamelCase($expected, $inputString) {}
        /**
         * Data provider for underscoredToLowerCamelCase
         *
         * @return array expected, input string
         */
        public function underscoredToLowerCamelCaseDataProvider() {}
        public function underscoredToLowerCamelCase($expected, $inputString) {}
        /**
         * Data provider for camelCaseToLowerCaseUnderscored
         *
         * @return array expected, input string
         */
        public function camelCaseToLowerCaseUnderscoredDataProvider() {}
        public function camelCaseToLowerCaseUnderscored($expected, $inputString) {}
        /**
         * Data provider for valid isValidUrl's
         *
         * @return array Valid resource
         */
        public function validUrlValidResourceDataProvider() {}
        public function validURLReturnsTrueForValidResource($url) {}
        /**
         * Data provider for invalid isValidUrl's
         *
         * @return array Invalid ressource
         */
        public function isValidUrlInvalidRessourceDataProvider() {}
        public function validURLReturnsFalseForInvalidRessoure($url) {}
        /**
         * @test
         */
        public function isOnCurrentHostReturnsTrueWithCurrentHost() {}
        /**
         * Data provider for invalid isOnCurrentHost's
         *
         * @return array Invalid Hosts
         */
        public function checkisOnCurrentHostInvalidHosts() {}
        /**
         * Data provider for valid sanitizeLocalUrl paths
         *
         * @return array Valid url
         */
        public function sanitizeLocalUrlValidPathsDataProvider() {}
        public function sanitizeLocalUrlAcceptsNotEncodedValidPaths($path) {}
        public function sanitizeLocalUrlAcceptsEncodedValidPaths($path) {}
        /**
         * Data provider for valid sanitizeLocalUrl's
         *
         * @return array Valid url
         */
        public function sanitizeLocalUrlValidUrlsDataProvider() {}
        public function sanitizeLocalUrlAcceptsNotEncodedValidUrls($url, $host, $subDirectory) {}
        public function sanitizeLocalUrlAcceptsEncodedValidUrls($url, $host, $subDirectory) {}
        /**
         * Data provider for invalid sanitizeLocalUrl's
         *
         * @return array Valid url
         */
        public function sanitizeLocalUrlInvalidDataProvider() {}
        public function sanitizeLocalUrlDeniesPlainInvalidUrls($url) {}
        public function sanitizeLocalUrlDeniesEncodedInvalidUrls($url) {}
        /**
         * @test
         */
        public function unlink_tempfileRemovesValidFileInTypo3temp() {}
        /**
         * @test
         */
        public function unlink_tempfileRemovesHiddenFile() {}
        /**
         * @test
         */
        public function unlink_tempfileReturnsTrueIfFileWasRemoved() {}
        /**
         * @test
         */
        public function unlink_tempfileReturnsNullIfFileDoesNotExist() {}
        /**
         * @test
         */
        public function unlink_tempfileReturnsNullIfFileIsNowWithinTypo3temp() {}
        /**
         * @test
         */
        public function tempnamReturnsPathStartingWithGivenPrefix() {}
        /**
         * @test
         */
        public function tempnamReturnsPathWithoutBackslashes() {}
        /**
         * @test
         */
        public function tempnamReturnsAbsolutePathInsideDocumentRoot() {}
        /**
         * @test
         */
        public function removeDotsFromTypoScriptSucceedsWithDottedArray() {}
        /**
         * @test
         */
        public function removeDotsFromTypoScriptOverridesSubArray() {}
        /**
         * @test
         */
        public function removeDotsFromTypoScriptOverridesWithScalar() {}
        /**
         * @test
         */
        public function getDirsReturnsArrayOfDirectoriesFromGivenDirectory() {}
        /**
         * @test
         */
        public function getDirsReturnsStringErrorOnPathFailure() {}
        /**
         * @test
         */
        public function hmacReturnsHashOfProperLength() {}
        /**
         * @test
         */
        public function hmacReturnsEqualHashesForEqualInput() {}
        /**
         * @test
         */
        public function hmacReturnsNoEqualHashesForNonEqualInput() {}
        /**
         * Data provider for quoteJSvalueTest.
         *
         * @return array
         */
        public function quoteJsValueDataProvider() {}
        public function quoteJsValueTest($input, $expected) {}
        /**
         * @test
         */
        public function getSetWritesArrayToGetSystemVariable() {}
        /**
         * @test
         */
        public function getSetWritesArrayToGlobalsHttpGetVars() {}
        /**
         * @test
         */
        public function getSetForArrayDropsExistingValues() {}
        /**
         * @test
         */
        public function getSetAssignsOneValueToOneKey() {}
        /**
         * @test
         */
        public function getSetForOneValueDoesNotDropUnrelatedValues() {}
        /**
         * @test
         */
        public function getSetCanAssignsAnArrayToASpecificArrayElement() {}
        /**
         * @test
         */
        public function getSetCanAssignAStringValueToASpecificArrayChildElement() {}
        /**
         * @test
         */
        public function getSetCanAssignAnArrayToASpecificArrayChildElement() {}
        /**
         * @test
         */
        public function minifyJavaScriptReturnsInputStringIfNoHookIsRegistered() {}
        /**
         * @test
         */
        public function fixPermissionsSetsGroup() {}
        /**
         * @test
         */
        public function fixPermissionsSetsPermissionsToFile() {}
        /**
         * @test
         */
        public function fixPermissionsSetsPermissionsToHiddenFile() {}
        /**
         * @test
         */
        public function fixPermissionsSetsPermissionsToDirectory() {}
        /**
         * @test
         */
        public function fixPermissionsSetsPermissionsToDirectoryWithTrailingSlash() {}
        /**
         * @test
         */
        public function fixPermissionsSetsPermissionsToHiddenDirectory() {}
        /**
         * @test
         */
        public function fixPermissionsCorrectlySetsPermissionsRecursive() {}
        /**
         * @test
         */
        public function fixPermissionsDoesNotSetPermissionsToNotAllowedPath() {}
        /**
         * @test
         */
        public function fixPermissionsSetsPermissionsWithRelativeFileReference() {}
        /**
         * @test
         */
        public function fixPermissionsSetsDefaultPermissionsToFile() {}
        /**
         * @test
         */
        public function fixPermissionsSetsDefaultPermissionsToDirectory() {}
        /**
         * @test
         */
        public function mkdirCreatesDirectory() {}
        /**
         * @test
         */
        public function mkdirCreatesHiddenDirectory() {}
        /**
         * @test
         */
        public function mkdirCreatesDirectoryWithTrailingSlash() {}
        /**
         * @test
         */
        public function mkdirSetsPermissionsOfCreatedDirectory() {}
        /**
         * @test
         */
        public function mkdirSetsGroupOwnershipOfCreatedDirectory() {}
        private function checkGroups($methodName) {}
        /**
         * @test
         */
        public function mkdirDeepCreatesDirectory() {}
        /**
         * @test
         */
        public function mkdirDeepCreatesSubdirectoriesRecursive() {}
        /**
         * Data provider for mkdirDeepCreatesDirectoryWithDoubleSlashes.
         * @return array
         */
        public function mkdirDeepCreatesDirectoryWithAndWithoutDoubleSlashesDataProvider() {}
        public function mkdirDeepCreatesDirectoryWithDoubleSlashes($directoryToCreate) {}
        /**
         * @test
         */
        public function mkdirDeepFixesPermissionsOfCreatedDirectory() {}
        /**
         * @test
         */
        public function mkdirDeepFixesPermissionsOnNewParentDirectory() {}
        /**
         * @test
         */
        public function mkdirDeepDoesNotChangePermissionsOfExistingSubDirectories() {}
        /**
         * @test
         */
        public function mkdirDeepSetsGroupOwnershipOfCreatedDirectory() {}
        /**
         * @test
         */
        public function mkdirDeepSetsGroupOwnershipOfCreatedParentDirectory() {}
        /**
         * @test
         */
        public function mkdirDeepSetsGroupOwnershipOnNewSubDirectory() {}
        /**
         * @test
         */
        public function mkdirDeepCreatesDirectoryInVfsStream() {}
        /**
         * @test
         */
        public function mkdirDeepThrowsExceptionIfDirectoryCreationFails() {}
        /**
         * @test
         */
        public function mkdirDeepThrowsExceptionIfBaseDirectoryIsNotOfTypeString() {}
        /**
         * @test
         */
        public function mkdirDeepThrowsExceptionIfDeepDirectoryIsNotOfTypeString() {}
        /**
         * @test
         */
        public function rmdirRemovesFile() {}
        /**
         * @test
         */
        public function rmdirReturnTrueIfFileWasRemoved() {}
        /**
         * @test
         */
        public function rmdirReturnFalseIfNoFileWasRemoved() {}
        /**
         * @test
         */
        public function rmdirRemovesDirectory() {}
        /**
         * @test
         */
        public function rmdirRemovesDirectoryWithTrailingSlash() {}
        /**
         * @test
         */
        public function rmdirDoesNotRemoveDirectoryWithFilesAndReturnsFalseIfRecursiveDeletionIsOff() {}
        /**
         * @test
         */
        public function rmdirRemovesDirectoriesRecursiveAndReturnsTrue() {}
        /**
         * @test
         */
        public function rmdirRemovesLinkToDirectory() {}
        /**
         * @test
         */
        public function rmdirRemovesDeadLinkToDirectory() {}
        /**
         * @test
         */
        public function rmdirRemovesDeadLinkToFile() {}
        /**
         * Helper method to create test directory.
         *
         * @return string A unique directory name prefixed with test_.
         */
        protected function getFilesInDirCreateTestDirectory() {}
        /**
         * @test
         */
        public function getFilesInDirFindsRegularFile() {}
        /**
         * @test
         */
        public function getFilesInDirFindsHiddenFile() {}
        /**
         * Data provider for getFilesInDirByExtensionFindsFiles
         *
         * @return array
         */
        public function fileExtensionDataProvider() {}
        public function getFilesInDirByExtensionFindsFiles($fileExtensions) {}
        /**
         * @test
         */
        public function getFilesInDirByExtensionDoesNotFindFilesWithOtherExtensions() {}
        /**
         * @test
         */
        public function getFilesInDirExcludesFilesMatchingPattern() {}
        /**
         * @test
         */
        public function getFilesInDirCanPrependPath() {}
        /**
         * @test
         */
        public function getFilesInDirDoesSortAlphabeticallyByDefault() {}
        /**
         * @test
         */
        public function getFilesInDirCanOrderByMtime() {}
        /**
         * @test
         */
        public function getFilesInDirReturnsArrayWithMd5OfElementAndPathAsArrayKey() {}
        /**
         * @test
         */
        public function getFilesInDirDoesNotFindDirectories() {}
        /**
         * Dotfiles; current directory: '.' and parent directory: '..' must not be
         * present.
         *
         * @test
         */
        public function getFilesInDirDoesNotFindDotfiles() {}
        /**
         * Data provider for unQuoteFilenamesUnquotesFileNames
         */
        public function unQuoteFilenamesUnquotesFileNamesDataProvider() {}
        public function unQuoteFilenamesUnquotesFileNames($source, $expectedQuoted, $expectedUnquoted) {}
        /**
         * @test
         */
        public function splitFileRefReturnsFileTypeNotForFolders() {}
        /**
         * @test
         */
        public function splitFileRefReturnsFileTypeForFilesWithoutPathSite() {}
        /**
         * @see dirnameWithDataProvider
         * @return array<array>
         */
        public function dirnameDataProvider() {}
        public function dirnameWithDataProvider($input, $expectedValue) {}
        /**
         * @see resolveBackPathWithDataProvider
         * @return array<array>
         */
        public function resolveBackPathDataProvider() {}
        public function resolveBackPathWithDataProvider($input, $expectedValue) {}
        /**
         * @test
         */
        public function makeInstanceWithEmptyClassNameThrowsException() {}
        /**
         * @test
         */
        public function makeInstanceWithNullClassNameThrowsException() {}
        /**
         * @test
         */
        public function makeInstanceWithZeroStringClassNameThrowsException() {}
        /**
         * @test
         */
        public function makeInstanceWithEmptyArrayThrowsException() {}
        /**
         * @test
         */
        public function makeInstanceWithNonEmptyArrayThrowsException() {}
        /**
         * @test
         */
        public function makeInstanceWithBeginningSlashInClassNameThrowsException() {}
        /**
         * @test
         */
        public function makeInstanceReturnsClassInstance() {}
        /**
         * @test
         */
        public function makeInstancePassesParametersToConstructor() {}
        /**
         * @test
         */
        public function makeInstanceInstanciatesConfiguredImplementation() {}
        /**
         * @test
         */
        public function makeInstanceResolvesConfiguredImplementationsRecursively() {}
        /**
         * @test
         */
        public function makeInstanceCalledTwoTimesForNonSingletonClassReturnsDifferentInstances() {}
        /**
         * @test
         */
        public function makeInstanceCalledTwoTimesForSingletonClassReturnsSameInstance() {}
        /**
         * @test
         */
        public function makeInstanceCalledTwoTimesForSingletonClassWithPurgeInstancesInbetweenReturnsDifferentInstances() {}
        /**
         * @test
         */
        public function makeInstanceInjectsLogger() {}
        /**
         * @test
         */
        public function setSingletonInstanceForEmptyClassNameThrowsException() {}
        /**
         * @test
         */
        public function setSingletonInstanceForClassThatIsNoSubclassOfProvidedClassThrowsException() {}
        /**
         * @test
         */
        public function setSingletonInstanceMakesMakeInstanceReturnThatInstance() {}
        /**
         * @test
         */
        public function setSingletonInstanceCalledTwoTimesMakesMakeInstanceReturnLastSetInstance() {}
        /**
         * @test
         */
        public function getSingletonInstancesContainsPreviouslySetSingletonInstance() {}
        /**
         * @test
         */
        public function resetSingletonInstancesResetsPreviouslySetInstance() {}
        /**
         * @test
         */
        public function resetSingletonInstancesSetsGivenInstance() {}
        /**
         * @test
         */
        public function addInstanceForEmptyClassNameThrowsException() {}
        /**
         * @test
         */
        public function addInstanceForClassThatIsNoSubclassOfProvidedClassThrowsException() {}
        /**
         * @test
         */
        public function addInstanceWithSingletonInstanceThrowsException() {}
        /**
         * @test
         */
        public function addInstanceMakesMakeInstanceReturnThatInstance() {}
        /**
         * @test
         */
        public function makeInstanceCalledTwoTimesAfterAddInstanceReturnTwoDifferentInstances() {}
        /**
         * @test
         */
        public function addInstanceCalledTwoTimesMakesMakeInstanceReturnBothInstancesInAddingOrder() {}
        /**
         * @test
         */
        public function purgeInstancesDropsAddedInstance() {}
        /**
         * @return array
         */
        public function getFileAbsFileNameDateprovider() {}
/** @var PackageManager|\PHPUnit_Framework_MockObject_MockObject $packageManager */
        public function getFileAbsFileNameReturnsCorrectValues(/** @var PackageManager|\PHPUnit_Framework_MockObject_MockObject $packageManager */
$path, /** @var PackageManager|\PHPUnit_Framework_MockObject_MockObject $packageManager */
$expected) {}
        /**
         * Data provider for validPathStrDetectsInvalidCharacters.
         *
         * @return array
         */
        public function validPathStrInvalidCharactersDataProvider() {}
        public function validPathStrDetectsInvalidCharacters($path) {}
        /**
         * Data provider for positive values within validPathStr()
         */
        public function validPathStrDataProvider() {}
        public function validPathStrWorksWithUnicodeFileNames($path) {}
        /**
         * @return array
         */
        public function deniedFilesDataProvider() {}
        public function verifyFilenameAgainstDenyPatternDetectsNotAllowedFiles($deniedFile) {}
        /**
         * @test
         */
        public function copyDirectoryCopiesFilesAndDirectoriesWithRelativePaths() {}
        /**
         * @test
         */
        public function copyDirectoryCopiesFilesAndDirectoriesWithAbsolutePaths() {}
        public function callUserFunctionWillThrowExceptionForInvalidParameters($functionName, $expectedException) {}
        /**
         * Data provider for callUserFunctionInvalidParameterDataprovider and
         * callUserFunctionWillThrowExceptionForInvalidParameters.
         *
         * @return array
         */
        public function callUserFunctionInvalidParameterDataprovider() {}
        /**
         * Above tests already showed that the prefix is checked properly,
         * therefore this test skips the prefix and enables to inline the instantly
         * created function (who's name doesn't have a prefix).
         *
         * @test
         */
        public function callUserFunctionCanCallFunction() {}
        /**
         * @test
         */
        public function callUserFunctionCanCallMethod() {}
        /**
         * @return string
         */
        public function user_calledUserFunction() {}
        /**
         * @test
         */
        public function callUserFunctionAcceptsClosures() {}
        /**
         * @test
         */
        public function callUserFunctionTrimsSpaces() {}
        /**
         * @test
         */
        public function getAllFilesAndFoldersInPathReturnsArrayWithMd5Keys() {}
        /**
         * If the element is not empty, its contents might be treated as "something" (instead of "nothing") e.g. by Fluid
         * view helpers, which is why we want to avoid that.
         *
         * @test
         */
        public function xml2ArrayConvertsEmptyArraysToElementWithoutContent() {}
        /**
         * @return array
         */
        public function providerForXml2Array() : array {}
        public function xml2ArrayDealsProperlyWithWhitespace(string $input) {}
        public function idnaEncodeConvertsUnicodeCharsToASCIIString($actual, $expected) {}
        /**
         * Data provider for method idnaEncode in GeneralUtility class.
         * IDNA converter has to convert special chars (UTF-8) to ASCII compatible chars.
         *
         * @returns array
         */
        public function idnaEncodeDataProvider() {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\StringUtility
     */
    class StringUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for endsWithReturnsTrueForMatchingFirstPart
         *
         * @return array
         */
        public function endsWithReturnsTrueForMatchingLastPartDataProvider() {}
        public function endsWithReturnsTrueForMatchingLastPart($string, $part) {}
        /**
         * Data provider for check endsWithReturnsFalseForNotMatchingLastPart
         *
         * @return array
         */
        public function endsWithReturnsFalseForNotMatchingLastPartDataProvider() {}
        public function endsWithReturnsFalseForNotMatchingLastPart($string, $part) {}
        /**
         * Data provider for endsWithReturnsThrowsExceptionWithInvalidArguments
         *
         * @return array
         */
        public function endsWithReturnsThrowsExceptionWithInvalidArgumentsDataProvider() {}
        public function endsWithReturnsThrowsExceptionWithInvalidArguments($string, $part, $expectedException) {}
        /**
         * Data provider for beginsWithReturnsTrueForMatchingFirstPart
         *
         * @return array
         */
        public function beginsWithReturnsTrueForMatchingFirstPartDataProvider() {}
        public function beginsWithReturnsTrueForMatchingFirstPart($string, $part) {}
        /**
         * Data provider for check beginsWithReturnsFalseForNotMatchingFirstPart
         *
         * @return array
         */
        public function beginsWithReturnsFalseForNotMatchingFirstPartDataProvider() {}
        public function beginsWithReturnsFalseForNotMatchingFirstPart($string, $part) {}
        /**
         * Data provider for beginsWithReturnsThrowsExceptionWithInvalidArguments
         *
         * @return array
         */
        public function beginsWithReturnsInvalidArgumentDataProvider() {}
        public function beginsWithReturnsThrowsExceptionWithInvalidArguments($string, $part, $expectedException) {}
        /**
         * @test
         */
        public function getUniqueIdReturnsIdWithPrefix() {}
        /**
         * @test
         */
        public function getUniqueIdReturnsIdWithoutDot() {}
        public function escapeCssSelector(string $selector, string $expectedValue) {}
        /**
         * @return array
         */
        public function escapeCssSelectorDataProvider() : array {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\ClassNamingUtility
     */
    class ClassNamingUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * DataProvider for translateModelNameToRepositoryName
         * and translateRepositoryNameToModelName
         * and translateModelNameToValidatorName
         *
         * @return array
         */
        public function repositoryAndModelClassNames() {}
        public function translateModelNameToRepositoryName($expectedRepositoryName, $modelName, $dummyValidatorName) {}
        public function translateRepositoryNameToModelName($repositoryName, $expectedModelName, $dummyValidatorName) {}
        public function translateModelNameToValidatorName($repositoryName, $modelName, $expectedValidatorName) {}
        /**
         * DataProvider for explodeObjectControllerName
         *
         * @return array
         */
        public function controllerObjectNamesAndMatches() {}
        public function explodeObjectControllerName($controllerObjectName, $expectedMatches) {}
    }

    /**
     * Test case
     */
    class ExtensionManagementUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var \TYPO3\CMS\Core\Package\PackageManager
         */
        protected $backUpPackageManager;

        protected function setUp() {}
        protected function tearDown() {}
        protected function createMockPackageManagerWithMockPackage($packageKey, $packageMethods = ['getPackagePath', 'getPackageKey']) {}
        /**
         * @test
         */
        public function isLoadedReturnsFalseIfExtensionIsNotLoaded() {}
        /** @var PackageManager|\PHPUnit_Framework_MockObject_MockObject $packageManager */
        public function extPathThrowsExceptionIfExtensionIsNotLoaded() {}
        /** @var PackageManager|\PHPUnit_Framework_MockObject_MockObject $packageManager */
        public function extPathAppendsScriptNameToPath() {}
        private function generateTCAForTable($table) {}
        /**
         * Data provider for getClassNamePrefixForExtensionKey.
         *
         * @return array
         */
        public function extensionKeyDataProvider() {}
        public function getClassNamePrefixForExtensionKey($extensionName, $expectedPrefix) {}
        /**
         * Tests whether fields can be add to all TCA types and duplicate fields are considered.
         *
         * @test
         * @see ExtensionManagementUtility::addToAllTCAtypes()
         */
        public function canAddFieldsToAllTCATypesBeforeExistingOnes() {}
        /**
         * Tests whether fields can be add to all TCA types and duplicate fields are considered.
         *
         * @test
         * @see ExtensionManagementUtility::addToAllTCAtypes()
         */
        public function canAddFieldsToAllTCATypesAfterExistingOnes() {}
        /**
         * Tests whether fields can be add to all TCA types and duplicate fields are considered.
         *
         * @test
         * @see ExtensionManagementUtility::addToAllTCAtypes()
         */
        public function canAddFieldsToAllTCATypesRespectsPalettes() {}
        /**
         * Tests whether fields can be add to all TCA types and fields in pallets are respected.
         *
         * @test
         * @see ExtensionManagementUtility::addToAllTCAtypes()
         */
        public function canAddFieldsToAllTCATypesRespectsPositionFieldInPalette() {}
        /**
         * Tests whether fields can be add to a TCA type before existing ones
         *
         * @test
         * @see ExtensionManagementUtility::addToAllTCAtypes()
         */
        public function canAddFieldsToTCATypeBeforeExistingOnes() {}
        /**
         * Tests whether fields can be add to a TCA type after existing ones
         *
         * @test
         * @see ExtensionManagementUtility::addToAllTCAtypes()
         */
        public function canAddFieldsToTCATypeAfterExistingOnes() {}
        /**
         * @test
         */
        public function canAddFieldWithPartOfAlreadyExistingFieldname() {}
        /**
         * Test wheter replacing other TCA fields works as promissed
         *
         * @test
         * @see ExtensionManagementUtility::addFieldsToAllPalettesOfField()
         */
        public function canAddFieldsToTCATypeAndReplaceExistingOnes() {}
        /**
         * @test
         */
        public function addToAllTCAtypesReplacesExistingOnes() {}
        /**
         * Tests whether fields can be added to a palette before existing elements.
         *
         * @test
         * @see ExtensionManagementUtility::addFieldsToPalette()
         */
        public function canAddFieldsToPaletteBeforeExistingOnes() {}
        /**
         * Tests whether fields can be added to a palette after existing elements.
         *
         * @test
         * @see ExtensionManagementUtility::addFieldsToPalette()
         */
        public function canAddFieldsToPaletteAfterExistingOnes() {}
        /**
         * Tests whether fields can be added to a palette after a not existing elements.
         *
         * @test
         * @see ExtensionManagementUtility::addFieldsToPalette()
         */
        public function canAddFieldsToPaletteAfterNotExistingOnes() {}
        /**
         * @return array
         */
        public function removeDuplicatesForInsertionRemovesDuplicatesDataProvider() {}
        public function removeDuplicatesForInsertionRemovesDuplicates($insertionList, $list, $expected) {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldDoesNotAddAnythingIfFieldIsNotRegisteredInColumns() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsFieldsToPaletteAndSuppressesDuplicates() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldDoesNotAddAFieldThatIsPartOfPaletteAlready() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsFieldsToMultiplePalettes() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsMultipleFields() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsBeforeExistingIfRequested() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsFieldsAtEndIfBeforeRequestedDoesNotExist() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsAfterExistingIfRequested() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsFieldsAtEndIfAfterRequestedDoesNotExist() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsNewPaletteIfFieldHasNoPaletteYet() {}
        /**
         * @test
         */
        public function addFieldsToAllPalettesOfFieldAddsNewPaletteIfFieldHasNoPaletteYetAndKeepsExistingLabel() {}
        /**
         * Data provider for executePositionedStringInsertionTrimsCorrectCharacters
         * @return array
         */
        public function executePositionedStringInsertionTrimsCorrectCharactersDataProvider() {}
        public function executePositionedStringInsertionTrimsCorrectCharacters($string, $expectedResult) {}
        /**
         * @test
         */
        public function addTcaSelectItemThrowsExceptionIfTableIsNotOfTypeString() {}
        /**
         * @test
         */
        public function addTcaSelectItemThrowsExceptionIfFieldIsNotOfTypeString() {}
        /**
         * @test
         */
        public function addTcaSelectItemThrowsExceptionIfRelativeToFieldIsNotOfTypeString() {}
        /**
         * @test
         */
        public function addTcaSelectItemThrowsExceptionIfRelativePositionIsNotOfTypeString() {}
        /**
         * @test
         */
        public function addTcaSelectItemThrowsExceptionIfRelativePositionIsNotOneOfValidKeywords() {}
        /**
         * @test
         */
        public function addTcaSelectItemThrowsExceptionIfFieldIsNotFoundInTca() {}
        /**
         * Data provider for addTcaSelectItemInsertsItemAtSpecifiedPosition
         */
        public function addTcaSelectItemDataProvider() {}
        public function addTcaSelectItemInsertsItemAtSpecifiedPosition($relativeToField, $relativePosition, $expectedResultArray) {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function loadExtLocalconfDoesNotReadFromCacheIfCachingIsDenied() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function loadExtLocalconfRequiresCacheFileIfExistsAndCachingIsAllowed() {}
        /**
         * @test
         */
        public function loadSingleExtLocalconfFilesRequiresExtLocalconfFileRegisteredInGlobalTypo3LoadedExt() {}
        /**
         * Data provider for addModule tests
         * @return array
         */
        public function addModulePositionTestsDataProvider() {}
        public function addModuleCanAddModule($position, $existing, $expected) {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function createExtLocalconfCacheEntryWritesCacheEntryWithContentOfLoadedExtensionExtLocalconf() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function createExtLocalconfCacheEntryWritesCacheEntryWithExtensionContentOnlyIfExtLocalconfExists() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function createExtLocalconfCacheEntryWritesCacheEntryWithNoTags() {}
        /**
         * @test
         */
        public function getExtLocalconfCacheIdentifierCreatesSha1WithFourtyCharactersAndPrefix() {}
        /**
         * @test
         */
        public function loadBaseTcaDoesNotReadFromCacheIfCachingIsDenied() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function loadBaseTcaRequiresCacheFileIfExistsAndCachingIsAllowed() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function loadBaseTcaCreatesCacheFileWithContentOfAnExtensionsConfigurationTcaPhpFile() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function loadBaseTcaWritesCacheEntryWithNoTags() {}
        /**
         * @test
         */
        public function getBaseTcaCacheIdentifierCreatesSha1WithFourtyCharactersAndPrefix() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function loadExtTablesDoesNotReadFromCacheIfCachingIsDenied() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function loadExtTablesRequiresCacheFileIfExistsAndCachingIsAllowed() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function createExtTablesCacheEntryWritesCacheEntryWithContentOfLoadedExtensionExtTables() {}
        /** @var CacheManager|\PHPUnit_Framework_MockObject_MockObject $mockCacheManager */
        public function createExtTablesCacheEntryWritesCacheEntryWithExtensionContentOnlyIfExtTablesExists() {}
        /**
         * @test
         */
        public function createExtTablesCacheEntryWritesCacheEntryWithNoTags() {}
        /**
         * @test
         */
        public function getExtTablesCacheIdentifierCreatesSha1WithFourtyCharactersAndPrefix() {}
        /**
         * Data provider for negative getExtensionVersion() tests.
         *
         * @return array
         */
        public function getExtensionVersionFaultyDataProvider() {}
        public function getExtensionVersionForFaultyExtensionKeyThrowsException($key) {}
        /**
         * @test
         */
        public function getExtensionVersionForNotLoadedExtensionReturnsEmptyString() {}
        /**
         * @test
         */
        public function getExtensionVersionForLoadedExtensionReturnsExtensionVersion() {}
        /**
         * @test
         */
        public function loadExtensionThrowsExceptionIfExtensionIsLoaded() {}
        /**
         * @test
         */
        public function unloadExtensionThrowsExceptionIfExtensionIsNotLoaded() {}
        /**
         * @test
         */
        public function unloadExtensionCallsPackageManagerToDeactivatePackage() {}
        /** @var CategoryRegistry|\PHPUnit_Framework_MockObject_MockObject $registryMock */
        public function doesMakeCategorizableCallsTheCategoryRegistryWithDefaultFieldName() {}
        /**
         * @test
         */
        public function doesMakeCategorizableCallsTheCategoryRegistryWithFieldName() {}
        /**
         * @test
         */
        public function addPluginSetsTcaCorrectlyForGivenExtKeyAsParameter() {}
        /**
         * @test
         */
        public function addPluginThrowsExceptionForMissingExtkey() {}
        /**
         * @test
         */
        public function isLoadedReturnsFalseIfExtensionIsNotLoadedAndExitIsDisabled() {}
        /** @var PackageManager|\PHPUnit_Framework_MockObject_MockObject $packageManager */
        public function getExtensionKeyByPrefixForLoadedExtensionWithUnderscoresReturnsExtensionKey() {}
        /**
         * @test
         * @see ExtensionManagementUtility::getExtensionKeyByPrefix
         */
        public function getExtensionKeyByPrefixForLoadedExtensionWithoutUnderscoresReturnsExtensionKey() {}
        /**
         * @test
         * @see ExtensionManagementUtility::getExtensionKeyByPrefix
         */
        public function getExtensionKeyByPrefixForNotLoadedExtensionReturnsFalse() {}
        /**
         * @test
         */
        public function removeCacheFilesFlushesSystemCaches() {}
    }

    /**
     * Testcase for the \TYPO3\CMS\Core\Utility\ClientUtility class.
     */
    class ClientUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        private function analyzeUserAgentStrings($browserStrings, $expectedMembers) {}
        /**
         * @test
         */
        public function checkBrowserInfoIE6() {}
        /**
         * @test
         */
        public function checkBrowserInfoIE7() {}
        /**
         * @test
         */
        public function checkBrowserInfoIE8() {}
        /**
         * @test
         */
        public function checkBrowserInfoIE9() {}
        /**
         * @test
         */
        public function checkBrowserInfoIE10() {}
        /**
         * @test
         */
        public function checkBrowserInfoIE11() {}
        /**
         * @test
         */
        public function checkGeckoVersion() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfWindows8() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfWindows8rev1() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfWindows7() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfWindowsVista() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfWindowsXp() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfWindows2k() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfWindows2kServicePack1() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfWindowsNt() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfIpad() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfIphone() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfIpod() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfMacOsX() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfLinux() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfSolaris() {}
        /**
         * Provide various user agent strings for android devices
         *
         * @static
         * @return array List of user agents
         */
        public static function androidUserAgentsProvider() {}
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfAndroid($userAgentString) {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfOpenbsd() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfNetbsd() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfFreebsd() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectSystemValueForUserAgentStringOfChromeOs() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectBrowserValueForUserAgentStringOfSafari() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectBrowserValueForUserAgentStringOfFirefox() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectBrowserValueForUserAgentStringOfOpera() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectBrowserValueForUserAgentStringOfMobileSafariOnAndroid() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectBrowserValueForUserAgentStringOfMobileSafariOnIphone() {}
        /**
         * @test
         */
        public function getBrowserInfoReturnsCorrectBrowserValueForUserAgentStringOfKonqueror() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Utility\File {
    /**
     * Testcase for class \TYPO3\CMS\Core\Utility\File\ExtendedFileUtility
     */
    class ExtendedFileUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /** @var \TYPO3\CMS\Core\Utility\File\ExtendedFileUtility $subject */
        public function folderHasFilesInUseReturnsTrueIfItHasFiles() {}
        /** @var \TYPO3\CMS\Core\Utility\File\ExtendedFileUtility $subject */
        public function folderHasFilesInUseReturnsFalseIfItHasNoFiles() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Utility\Fixtures {
    /**
     * Fixture for forced windows environment
     */
    class WindowsPathUtilityFixture extends \typo3\cms\core\utility\pathutility {
        /**
         * Is windows?
         *
         * @return bool
         */
        public static function isWindows() {}
    }

    /**
     * Fixture for a replacement class for the original class
     */
    class ReplacementClassFixture extends \typo3\cms\core\tests\unit\utility\fixtures\originalclassfixture {}

    /**
     * Class GeneralUtilityFixture
     */
    class GeneralUtilityFixture extends \typo3\cms\core\utility\generalutility {
        const DEPRECATION_LOG_PATH = 'typo3temp/var/test_deprecation/test.log';

        /**
         * @var int
         */
        static public $isAllowedHostHeaderValueCallCount;

        public static function isAllowedHostHeaderValue($hostHeaderValue) {}
        public static function setAllowHostHeaderValue($allowHostHeaderValue) {}
        /**
         * For testing we must not generally allow HTTP Host headers
         *
         * @return bool
         */
        protected static function isInternalRequestType() {}
        /**
         * Gets the absolute path to the deprecation log file.
         *
         * @return string Absolute path to the deprecation log file
         */
        public static function getDeprecationLogFileName() {}
        /**
         * Resets the internal computed class name cache.
         */
        public static function resetFinalClassNameCache() {}
    }

    /**
     * Fixture for a base class
     */
    class ParentClassFixture {}

    /**
     * Fixture for a class which gets logger injected
     */
    class GeneralUtilityMakeInstanceInjectLoggerFixture implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @return LoggerInterface
         */
        public function getLogger() : LoggerInterface {}
    }

    /**
     * Fixture for an original class
     */
    class OriginalClassFixture {}

    /**
     * Fixture overwriting current version
     */
    class VersionNumberUtilityFixture extends \typo3\cms\core\utility\versionnumberutility {
        static public $versionNumber;

        public static function getCurrentTypo3Version() {}
    }

    /**
     * Class GeneralUtilityFilesystemFixture
     */
    class GeneralUtilityFilesystemFixture extends \typo3\cms\core\utility\generalutility {
        public static function isAbsPath($path) {}
        public static function isAllowedAbsPath($path) {}
        public static function validPathStr($theFile) {}
        public static function writeFileToTypo3tempDir($filepath, $content) {}
    }

    /**
     * Fixture constructor two parameter test
     */
    class TwoParametersConstructorFixture {
        /**
         * @var string
         */
        public $constructorParameter1;
        /**
         * @var string
         */
        public $constructorParameter2;

        public function __construct($parameter1, $parameter2) {}
    }

    /**
     * Fixture for a second replacement class for the original class
     */
    class OtherReplacementClassFixture extends \typo3\cms\core\tests\unit\utility\fixtures\replacementclassfixture {}

    /**
     * This is a fixture subclass for \TYPO3\CMS\Core\Utility\MathUtility
     */
    class MathUtilityTestClassWithStringRepresentationFixture {
        protected $string;

        public function __toString() {}
        public function setString($string) {}
        public function getString() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Utility\AccessibleProxies {
    /**
     * Accessible proxy with protected methods made public
     */
    class ExtensionManagementUtilityAccessibleProxy extends \typo3\cms\core\utility\extensionmanagementutility {
        public static function setCacheManager(CacheManager $cacheManager = null) {}
        public static function getPackageManager() {}
        public static function getExtLocalconfCacheIdentifier() {}
        public static function loadSingleExtLocalconfFiles() {}
        public static function getBaseTcaCacheIdentifier() {}
        public static function resetExtTablesWasReadFromCacheOnceBoolean() {}
        public static function createExtLocalconfCacheEntry() {}
        public static function createExtTablesCacheEntry() {}
        public static function getExtTablesCacheIdentifier() {}
        public static function buildBaseTcaFromSingleFiles() {}
        public static function emitTcaIsBeingBuiltSignal(array $tca) {}
        public static function removeDuplicatesForInsertion($insertionList, $list = '') {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Session {
    /**
     * Tests for the SessionManager
     */
    class SessionManagerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getSessionBackendUsesDefaultBackendFromConfiguration() {}
        /**
         * @test
         */
        public function getSessionBackendReturnsExpectedSessionBackendBasedOnConfiguration() {}
        /**
         * @test
         */
        public function getSessionBackendThrowsExceptionForMissingConfiguration() {}
        /**
         * @test
         */
        public function getSessionBackendThrowsExceptionIfBackendDoesNotImplementInterface() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Session\Backend {
    /**
     * Test case
     */
    class RedisSessionBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        protected function setUp() {}
        /**
         * @test
         */
        public function databaseConfigurationMustBeInteger() {}
        /**
         * @test
         */
        public function databaseConfigurationMustBeZeroOrGreater() {}
    }

    /**
     * Test case
     */
    class DatabaseSessionBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function validateConfigurationThrowsExceptionIfTableNameIsMissingInConfiguration() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Compatibility {
    class PublicPropertyDeprecationTraitTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var object Test fixture (anonymous class)
         * @see PublicAccessDeprecationTraitTest::setUp()
         */
        protected $fixture;

        /**
         * Setup
         *
         * Creating the test fixture, an anonymous class with different kinds
         * of properties to test access for.
         */
        protected function setUp() {}
        /**
         * @return array [[$expected, $property],]
         */
        public function issetDataProvider() : array {}
        public function issetWorksAsExpected(bool $expected, string $property) {}
        /**
         * @test
         */
        public function unknownPropertyCanBeHandledAsUsual() {}
        /**
         * @test
         */
        public function publicPropertyCanBeHandledAsUsual() {}
        /**
         * @test
         */
        public function taggedPropertyCanBeHandledLikePublicProperty() {}
        /**
         * @return array [[$property],]
         */
        public function invalidPropertiesDataProvider() : array {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit_Deprecated\Html {
    /**
     * Testcase for \TYPO3\CMS\Core\Html\RteHtmlParser
     */
    class RteHtmlParserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Core\Html\RteHtmlParser
         */
        protected $subject;

        protected function setUp() {}
        /**
         * Data provider for linkWithAtSignCorrectlyTransformedOnWayToRTE
         */
        public static function linkWithAtSignCorrectlyTransformedOnWayToRTEProvider() {}
        public function linkWithAtSignCorrectlyTransformedOnWayToRTE($content, $expectedResult) {}
    }

}

namespace TYPO3\CMS\Core\Tests\AcceptanceInstallMysql {
    /**
     * Click through installer, go to backend, check blank site in FE works
     */
    class InstallWithMysqlCest {
        public function installTypo3OnMysql(\AcceptanceTester $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\AcceptanceInstallPsql {
    /**
     * Click through installer, go to backend, install introduction package
     */
    class InstallWithPgsqlCest {
        public function installTypo3OnPgSql(\AcceptanceTester $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\Page {
    /**
     * Page and page tree related tests.
     */
    class AddPageInPageModuleCest {
        public function _before(Admin $I) {}
        public function addAndDeletePage(Admin $I) {}
        /**
         * @throws \PHPUnit_Framework_SkippedTestError
         */
        protected function skipUnstable() {}
    }

    /**
     * This testcase is used to check if the expected information is found when
     * the page module was opened.
     */
    class PageModuleCest {
        public function _before(Admin $I) {}
        public function checkThatPageModuleHasAHeadline(Admin $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\General {
    /**
     * Module Menu tests
     */
    class ModuleMenuCest {
        public function _before(Admin $I) {}
        public function checkIfModuleMenuIsCollapsible(Admin $I) {}
        public function selectingAModuleDoesHighlightIt(Admin $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\Formhandler {
    /**
     * Abstract class for "elements_basic" tests of styleguide
     */
    abstract class AbstractElementsBasicCest {
        protected function runTests(Admin $I, array $dataSets) {}
        protected function getInputField(RemoteWebElement $formSection) {}
        protected function getHiddenField(RemoteWebElement $formSection, RemoteWebElement $inputField) {}
        protected function getFormSectionByFieldLabel(Admin $I, string $fieldLabel) {}
    }

    /**
     * Tests for "elements_basic" date and time related input fields of ext:styleguide
     */
    class ElementsBasicInputDateCest extends \typo3\cms\core\tests\acceptance\backend\formhandler\abstractelementsbasiccest {
        public function _before(Admin $I, PageTree $pageTree) {}
        public function checkThatValidationWorks_EvalDate_TypeDate(Admin $I) {}
        public function checkThatValidationWorks_EvalDateTime(Admin $I) {}
        public function checkThatValidationWorks_evalTime(Admin $I) {}
    }

    /**
     * Category tree tests
     */
    class CategoryTreeCest {
        public function _before(Admin $I) {}
        public function checkIfCategoryListIsAvailable(Admin $I) {}
        public function editCategoryItem(Admin $I) {}
    }

    /**
     * Tests for inline 1n
     */
    class Inline1nCest {
        public function _before(Admin $I, PageTree $pageTree) {}
        public function checkIfExpandsAndCollapseShowInput(Admin $I) {}
        public function hideAndUnhideInline1nInlineElement(Admin $I) {}
        public function createInline1nInlineElement(Admin $I) {}
        public function checkIfCanSortingInlineElement(Admin $I) {}
        public function changeInline1nInlineInput(Admin $I) {}
        public function deleteInline1nInlineElement(Admin $I, ModalDialog $modalDialog) {}
        protected function fillFieldByLabel(Admin $I, $fieldLabel, $testValue) {}
    }

    /**
     * Tests for "elements_basic" simple input fields of ext:styleguide
     */
    class ElementsBasicInputCest extends \typo3\cms\core\tests\acceptance\backend\formhandler\abstractelementsbasiccest {
        public function _before(Admin $I, PageTree $pageTree) {}
        public function testFieldHandlingOfSimpleFields(Admin $I) {}
        public function testHandlingOfEvalFields(Admin $I) {}
        public function testHandlingOfRangeAndMd5Fields(Admin $I) {}
    }

    /**
     * Tests for ElementsGroupelement fields
     */
    class ElementsGroupCest {
        public function _before(Admin $I, PageTree $pageTree) {}
        public function sortElementsInGroup(Admin $I) {}
        public function addARecordWithRecordBrowserGroup(Admin $I) {}
        public function addTwoRecordWithRecordBrowserGroup(Admin $I) {}
        public function searchForARecordWithRecordBrowserGroup(Admin $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\Template {
    /**
     * Template tests
     */
    class TemplateCest {
        public function _before(Admin $I) {}
        public function pagesWithNoTemplateShouldShowButtonsToCreateTemplates(Admin $I) {}
        public function addANewSiteTemplate(Admin $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\Scheduler {
    /**
     * Scheduler task tests
     */
    class TasksCest {
        public function _before(Admin $I) {}
        public function createASchedulerTask(Admin $I) {}
        public function canRunTask(Admin $I) {}
        public function canEditTask(Admin $I) {}
        public function canEnableAndDisableTask(Admin $I) {}
        public function canDeleteTask(Admin $I, ModalDialog $modalDialog) {}
        public function canSwitchToSetupCheck(Admin $I) {}
        public function canSwitchToInformation(Admin $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\Language {
    /**
     * Language tests
     */
    class LanguageCest {
        public function _before(Admin $I) {}
        public function showsHeadingAndListsInstalledLanguages(Admin $I) {}
        public function filterInstalledLanguages(Admin $I) {}
        public function activateAndDeactivateALanguage(Admin $I) {}
        public function downloadALanguage(Admin $I) {}
        public function showsHeadingAndListsTranslationOverview(Admin $I) {}
        public function filterTranslationOverview(Admin $I) {}
        protected function seeAlert(Admin $I, $alertTitle, $alertMessage) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\Extensionmanager {
    /**
     * Tests for the "Get Extensions view" of the extension manager
     */
    class GetExtensionsCest {
        public function _before(Admin $I) {}
        public function checkRetrievedExtensionsFromTerAreDisplayed(Admin $I) {}
        public function checkPageBrowserDisplaysTwoRecords(Admin $I) {}
        public function checkSearchFilterListFindsExtensionKey(Admin $I) {}
        public function checkSearchFilterListFindsPartOfExtensionKey(Admin $I) {}
    }

    /**
     * Tests for the "Install list view" of the extension manager
     */
    class InstalledExtensionsCest {
        public function _before(Admin $I) {}
        public function checkSearchFiltersList(Admin $I) {}
        public function checkIfUploadFormAppears(Admin $I) {}
        public function checkUninstallingAndInstallingAnExtension(Admin $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\Topbar {
    /**
     * Test the search module in the top bar
     */
    class SearchCest {
        /**
         * Selector for the module container in the topbar
         *
         * @var string
         */
        static public $topBarModuleSelector;

        public function _before(Admin $I) {}
        public function searchAndTestIfAutocompletionWorks(Admin $I) {}
        public function searchForFancyTextAndCheckEmptyResultInfo(Admin $I) {}
        public function checkIfTheShowAllLinkPointsToTheListViewWithSearchResults(Admin $I) {}
    }

    /**
     * Test for the "Bookmark" functionality
     */
    class BookmarkCest {
        /**
         * Selector for the module container in the topbar
         *
         * @var string
         */
        static public $topBarModuleSelector;
        /**
         * Selector for the "Add to bookmark" button
         *
         * @var string
         */
        static protected $docHeaderBookmarkButtonSelector;

        public function _before(Admin $I) {}
        public function checkThatBookmarkListIsInitiallyEmpty(Admin $I) {}
        public function checkThatAddingABookmarkAddsItemToTheBookmarkList(Admin $I, ModalDialog $dialog, Scenario $scenario) {}
        public function checkIfBookmarkItemLinksToTarget(Admin $I) {}
        public function checkIfEditBookmarkItemWorks(Admin $I) {}
        public function checkIfDeleteBookmarkWorks(Admin $I, ModalDialog $dialog) {}
        protected function clickBookmarkDropdownToggleInTopbar(Admin $I) {}
    }

    /**
     * Tests for the help module in the topbar
     */
    class HelpCest {
        /**
         * Selector for the module container in the topbar
         *
         * @var string
         */
        static public $topBarModuleSelector;

        public function _before(Admin $I) {}
        public function canSeeModuleInTopbar(Admin $I) {}
        public function seeStyleguideInHelpModule(Admin $I) {}
    }

    /**
     * Tests for the flush module in the topbar
     */
    class FlushCest {
        /**
         * Selector for the module container in the topbar
         *
         * @var string
         */
        static protected $topBarModuleSelector;

        public function _before(Admin $I) {}
        public function canSeeModuleInTopbar(Admin $I) {}
        public function seeFlushCachesLinksInClearCacheModule(Admin $I) {}
    }

    /**
     * Acceptance test for the Navigation Component Tree
     */
    class NavigationComponentTreeCest {
        public function _before(Admin $I) {}
        public function checkTreeExpandsAndCollapseByPageModule(Admin $I) {}
        public function checkTreeExpandsAndCollapseByFileModule(Admin $I) {}
    }

    /**
     * Topbar username and avatar module tests.
     */
    class UsernameOnAvatarCest {
        public function _before(Admin $I) {}
        public function usernameIsShown(Admin $I) {}
    }

    /**
     * Acceptance test for the TYPO3 logo in the topbar
     */
    class LogoCest {
        public function _before(Admin $I) {}
        public function checkIfTypo3LogoIsLinked(Admin $I) {}
    }

}

namespace TYPO3\core\Tests\Acceptance\Backend\Topbar {
    /**
     * Acceptance test for the menu button in the topbar
     */
    class ModuleMenuButtonCest {
        public function _before(Admin $I) {}
        public function checkModelMenuButtomFromBigToSmallScreen(Admin $I) {}
        public function checkModelMenuButtomFromSmallToBigScreen(Admin $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\BackendUser {
    /**
     * List User tests
     */
    class ListUserCest {
        public function _before(Admin $I) {}
        public function showsHeadingAndListsBackendUsers(Admin $I) {}
        public function filterUsersByUsername(Admin $I) {}
        public function filterUsersByAdmin(Admin $I) {}
        public function filterUsersByStatus(Admin $I) {}
        public function filterUsersByLogin(Admin $I) {}
        public function filterUsersByUserGroup(Admin $I) {}
        protected function checkCountOfUsers(Admin $I, $countOfUsers) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Acceptance\Backend\Login {
    /**
     * Various backend login related tests
     */
    class BackendLoginCest {
        public function loginButtonMouseOver(\AcceptanceTester $I) {}
        public function loginDeniedWithInvalidCredentials(\AcceptanceTester $I) {}
        public function loginWorksAsAdminUser(\AcceptanceTester $I) {}
        public function loginWorksAsEditorUser(\AcceptanceTester $I) {}
        protected function login(\AcceptanceTester $I, string $username, string $password) {}
        protected function logout(\AcceptanceTester $I) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Integrity {
    /**
     * This test case is used in test suites to check for healthy
     * environments after other tests were run.
     *
     * This test is usually executed as the very last file in a suite and
     * should fail if some other test before destroys the environment with
     * invalid mocking or backups.
     */
    class IntegrityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * This test fails if some test before called
         * \TYPO3\CMS\Core\Utility\GeneralUtility::purgeInstances() without a proper
         * backup via \TYPO3\CMS\Core\Utility\GeneralUtility::getSingletonInstances()
         * and a reconstitution via \TYPO3\CMS\Core\Utility\GeneralUtility::resetSingletonInstances().
         *
         * The test for CacheManager should never fail since this object is
         * already instantiated during bootstrap and must always be there.
         *
         * @test
         */
        public function standardSingletonIsRegistered() {}
        /**
         * This test fails if any test case manipulates the configurationManager
         * property in LocalizationUtility due to mocking and fails to restore it
         * properly.
         *
         * @test
         */
        public function ensureLocalisationUtilityConfigurationManagerIsNull() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional {
    /**
     * Test case
     */
    class RegistryTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @test
         */
        public function getReturnsNullIfEntryIsNotInDatabase() {}
        /**
         * @test
         */
        public function getReturnsDefaultValueIfEntryIsNotInDatabase() {}
        /**
         * @test
         */
        public function getReturnsEntryFromDatabase() {}
        /**
         * @test
         */
        public function setInsertsEntryInDatabase() {}
        /**
         * @test
         */
        public function setOverridesExistingEntryInDatabase() {}
        /**
         * @test
         */
        public function removeDeletesEntryInDatabaseButLeavesOthers() {}
        /**
         * @test
         */
        public function removeAllByNamespaceDeletesEntryInDatabaseAndLeavesOthers() {}
        /**
         * @test
         */
        public function canGetSetEntry() {}
        /**
         * @test
         */
        public function getReturnsNewValueIfValueHasBeenSetMultipleTimes() {}
        /**
         * @test
         */
        public function canNotGetRemovedEntry() {}
        /**
         * @test
         */
        public function canNotGetRemovedAllByNamespaceEntry() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Database\Schema {
    /**
     * Test case for \TYPO3\CMS\Core\Database\Schema\SchemaMigratorTest
     */
    class SchemaMigratorTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var SqlReader
         */
        protected $sqlReader;
        /**
         * @var ConnectionPool
         */
        protected $connectionPool;
        /**
         * @var AbstractSchemaManager
         */
        protected $schemaManager;
        /**
         * @var \TYPO3\CMS\Core\Database\Schema\SchemaMigrator
         */
        protected $subject;
        /**
         * @var string
         */
        protected $tableName;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * Tears down this test suite.
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function createNewTable() {}
        /**
         * @test
         */
        public function createNewTableIfNotExists() {}
        /**
         * @test
         */
        public function addNewColumns() {}
        /**
         * @test
         */
        public function changeExistingColumn() {}
        /**
         * @test
         */
        public function notNullWithoutDefaultValue() {}
        /**
         * @test
         */
        public function defaultNullWithoutNotNull() {}
        /**
         * @test
         * @group not-postgres
         * @group not-mssql
         */
        public function renameUnusedField() {}
        /**
         * @test
         */
        public function renameUnusedTable() {}
        /**
         * @test
         */
        public function dropUnusedField() {}
        /**
         * @test
         */
        public function dropUnusedTable() {}
        /**
         * @test
         * @group not-postgres
         */
        public function installPerformsOnlyAddAndCreateOperations() {}
        /**
         * @test
         */
        public function installDoesNotAddIndexOnChangedColumn() {}
        /**
         * @test
         * @group not-postgres
         * @group not-mssql
         */
        public function installCanPerformChangeOperations() {}
        /**
         * @test
         * @group not-postgres
         * @group not-mssql
         */
        public function importStaticDataInsertsRecords() {}
        /**
         * @test
         */
        public function importStaticDataIgnoresTableDefinitions() {}
        /**
         * @test
         * @group not-postgres
         * @group not-mssql
         */
        public function changeTableEngine() {}
        /**
         * Create the base table for all migration tests
         */
        protected function prepareTestTable() {}
        /**
         * Helper to return the Doctrine Table object for the test table
         *
         * @return \Doctrine\DBAL\Schema\Table
         */
        protected function getTableDetails() : Table {}
        protected function readFixtureFile(string $fixtureName) : array {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Database\Query\Expression {
    /**
     * Test case
     */
    class ExpressionBuilderTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array Extension comes with table setup to test inSet() methods of ExpressionBuilder
         */
        protected $testExtensionsToLoad;

        /**
         * @test
         */
        public function inSetReturnsExpectedDataSetsWithColumn() {}
        /**
         * @test
         */
        public function inSetReturnsExpectedDataSets() {}
        /**
         * @test
         */
        public function inSetReturnsExpectedDataSetsWithInts() {}
        /**
         * @test
         */
        public function inSetReturnsExpectedDataSetsIfValueContainsLikeWildcard() {}
        /**
         * @test
         */
        public function inSetReturnsExpectedDataSetsIfValueContainsBracket() {}
        /**
         * @test
         */
        public function inSetReturnsExpectedDataSetsIfValueContainsClosingBracket() {}
        /**
         * @test
         */
        public function inSetReturnsExpectedDataSetsIfValueContainsOpeningAndClosingBracket() {}
        /**
         * @test
         */
        public function inSetReturnsExpectedDataSetsIfValueContainsBracketsAroundWord() {}
        /**
         * @test
         */
        public function inSetReturnsExpectedDataSetsIfValueContainsBracketsAroundLikeWildcard() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Page {
    /**
     * Test case
     */
    class PageRendererTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @test
         */
        public function pageRendererRendersInsertsMainContentStringsInOutput() {}
        /**
         * @test
         */
        public function pageRendererRendersFooterValues() {}
        /**
         * @return array
         */
        public function jqueryNamespaceDataProvider() {}
        public function loadJqueryRespectsNamespace($namespace, $matchNoConflict) {}
        /**
         * @test
         */
        public function loadJqueryWithDefaultNoConflictModeDoesNotSetNamespace() {}
        /**
         * @test
         */
        public function loadJqueryWithNamespaceNoneDoesNotIncludeNoConflictHandling() {}
        /**
         * @test
         */
        public function loadJqueryLoadsTheLatestJqueryVersionInNoConflictModeUncompressedInDebugMode() {}
        /**
         * @return array
         */
        public function loadJqueryFromSourceDataProvider() {}
        public function isJqueryLoadedFromSourceUncompressedIfDebugModeIsEnabled($version, $source, $regex) {}
        /**
         * @test
         */
        public function isJqueryLoadedMinifiedFromGoogleByDefault() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Collection {
    /**
     * Test case for \TYPO3\CMS\Core\Collection\RecordCollectionRepository
     */
    class RecordCollectionRepositoryTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var RecordCollectionRepository|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;
        /**
         * @var string
         */
        protected $testTableName;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function doesFindByTypeReturnNull() {}
        /**
         * @test
         */
        public function doesFindByTypeReturnObjects() {}
        /**
         * @test
         */
        public function doesFindByTableNameReturnNull() {}
        /**
         * @test
         */
        public function doesFindByTableNameReturnObjects() {}
        /**
         * @test
         */
        public function doesFindByTypeAndTableNameReturnNull() {}
        /**
         * @test
         */
        public function doesFindByTypeAndTableNameReturnObjects() {}
        /**
         * @test
         */
        public function doesFindByUidReturnAnObjectInBackendMode() {}
        /**
         * @test
         */
        public function doesFindByUidRespectDeletedFieldInBackendMode() {}
        /**
         * @test
         */
        public function doesFindByUidIgnoreOtherEnableFieldsInBackendMode() {}
        /**
         * @test
         */
        public function doesFindByUidReturnAnObjectInFrontendMode() {}
        /**
         * @test
         */
        public function doesFindByUidRespectEnableFieldsInFrontendMode() {}
        protected function insertTestData(array $rows) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Unit\Tca {
    class CategoryVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $categoryFields;

        /**
         * @test
         */
        public function categoryFormContainsExpectedFields() {}
    }

    class FilemountsVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $filemountsFields;

        /**
         * @test
         */
        public function filemountsFormContainsExpectedFields() {}
    }

    class BackendGroupsVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $backendGroupsFields;

        /**
         * @test
         */
        public function backendGroupsFormContainsExpectedFields() {}
    }

    class FileStorageVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $fileStorageFields;

        /**
         * @test
         */
        public function fileStorageFormContainsExpectedFields() {}
    }

    class CollectionVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $collectionFields;

        /**
         * @test
         */
        public function collectionFormContainsExpectedFields() {}
    }

    class NewsVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $newsFields;

        /**
         * @test
         */
        public function newsFormContainsExpectedFields() {}
    }

    class LanguageVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $languageFields;

        /**
         * @test
         */
        public function languageFormContainsExpectedFields() {}
    }

    class PagesVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * These form fields a visisble in the default page types.
         *
         * @var array
         */
        static protected $defaultPageFormFields;
        /**
         * Configuration of hidden / additional form fields per page type.
         *
         * @var array
         */
        static protected $pageFormFields;

        /**
         * @return array
         */
        public function pagesFormContainsExpectedFieldsDataProvider() : array {}
        public function pagesFormContainsExpectedFields(int $doktype, array $expectedFields, array $hiddenFields) {}
    }

    class FileCollectionVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $fileCollectionFields;
        static protected $fileCollectionTypeFields;

        /**
         * @test
         */
        public function fileCollectionFormContainsExpectedFields() {}
    }

    class BackendUsersVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $backendUserFields;
        static protected $adminHiddenFields;

        /**
         * @test
         */
        public function backendUsersFormContainsExpectedFields() {}
        /**
         * @test
         */
        public function backendUsersFormContainsExpectedFieldsForAdmins() {}
    }

    class FileMetadataVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $fileMetadataFields;

        /**
         * @test
         */
        public function fileMetadataFormContainsExpectedFields() {}
    }

    class PagesLanguageOverlayVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * These form fields a visisble in the default page types.
         *
         * @var array
         */
        static protected $defaultPagesLanguageOverlayFields;
        /**
         * Configuration of hidden / additional form fields per page type.
         *
         * @var array
         */
        static protected $pageFormFields;

        /**
         * @return array
         */
        public function pagesLanguageOverlayFormContainsExpectedFieldsDataProvider() : array {}
        public function pagesLanguageOverlayFormContainsExpectedFields(int $doktype, array $expectedFields, array $hiddenFields) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Cache\Frontend {
    /**
     * Test case
     */
    class VariableFrontendTest extends \typo3\testingframework\core\functional\functionaltestcase {
        public function insertSerializedArrayIntoLobAndRetrieveItDataProvider() {}
        public function insertSerializedArrayIntoLobAndRetrieveIt(array $expected, string $identifier, array $arrayToSerialize) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Cache\Backend {
    /**
     * Test case
     */
    class Typo3DatabaseBackendTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @test
         */
        public function getReturnsPreviouslySetEntry() {}
        /**
         * @test
         */
        public function getReturnsPreviouslySetEntryWithNewContentIfSetWasCalledMultipleTimes() {}
        /**
         * @test
         */
        public function setInsertsDataWithTagsIntoCacheTable() {}
        /**
         * @test
         */
        public function setStoresCompressedContent() {}
        /**
         * @test
         */
        public function getReturnsFalseIfNoCacheEntryExists() {}
        /**
         * @test
         */
        public function getReturnsFalseForExpiredCacheEntry() {}
        /**
         * @test
         */
        public function getReturnsNotExpiredCacheEntry() {}
        /**
         * @test
         */
        public function getReturnsUnzipsNotExpiredCacheEntry() {}
        /**
         * @test
         */
        public function getReturnsEmptyStringUnzipped() {}
        /**
         * @test
         */
        public function hasReturnsFalseIfNoCacheEntryExists() {}
        /**
         * @test
         */
        public function hasReturnsFalseForExpiredCacheEntry() {}
        /**
         * @test
         */
        public function hasReturnsNotExpiredCacheEntry() {}
        /**
         * @test
         */
        public function removeReturnsFalseIfNoEntryHasBeenRemoved() {}
        /**
         * @test
         */
        public function removeReturnsTrueIfAnEntryHasBeenRemoved() {}
        /**
         * @test
         */
        public function removeRemovesCorrectEntriesFromDatabase() {}
        /**
         * @test
         */
        public function findIdentifiersByTagReturnsIdentifierTaggedWithGivenTag() {}
        /**
         * @test
         *
         * @group not-postgres
         * @group not-mssql
         */
        public function flushByTagWorksWithEmptyCacheTablesWithMysql() {}
        /**
         * @test
         *
         * @group not-postgres
         * @group not-mssql
         */
        public function flushByTagsWorksWithEmptyCacheTablesWithMysql() {}
        /**
         * @test
         *
         * @group not-postgres
         * @group not-mssql
         */
        public function flushByTagRemovesCorrectRowsFromDatabaseWithMysql() {}
        /**
         * @test
         *
         * @group not-postgres
         * @group not-mssql
         */
        public function flushByTagsRemovesCorrectRowsFromDatabaseWithMysql() {}
        /**
         * @test
         */
        public function flushByTagWorksWithEmptyCacheTablesWithNonMysql() {}
        /**
         * @test
         */
        public function flushByTagsWorksWithEmptyCacheTablesWithNonMysql() {}
        /**
         * @test
         */
        public function flushByTagRemovesCorrectRowsFromDatabaseWithNonMysql() {}
        /**
         * @test
         */
        public function flushByTagsRemovesCorrectRowsFromDatabaseWithNonMysql() {}
        /**
         * @test
         *
         * @group not-postgres
         * @group not-mssql
         */
        public function collectGarbageWorksWithEmptyTableWithMysql() {}
        /**
         * @test
         *
         * @group not-postgres
         * @group not-mssql
         */
        public function collectGarbageRemovesCacheEntryWithExpiredLifetimeWithMysql() {}
        /**
         * @test
         *
         * @group not-postgres
         * @group not-mssql
         */
        public function collectGarbageRemovesTagEntriesForCacheEntriesWithExpiredLifetimeWithMysql() {}
        /**
         * @test
         *
         * @group not-postgres
         * @group not-mssql
         */
        public function collectGarbageRemovesOrphanedTagEntriesFromTagsTableWithMysql() {}
        /**
         * @test
         */
        public function collectGarbageWorksWithEmptyTableWithNonMysql() {}
        /**
         * @test
         */
        public function collectGarbageRemovesCacheEntryWithExpiredLifetimeWithNonMysql() {}
        /**
         * @test
         */
        public function collectGarbageRemovesTagEntriesForCacheEntriesWithExpiredLifetimeWithNonMysql() {}
        /**
         * @test
         */
        public function collectGarbageRemovesOrphanedTagEntriesFromTagsTableWithNonMysql() {}
        /**
         * @test
         */
        public function flushLeavesCacheAndTagsTableEmpty() {}
        protected function getSubjectObject($returnMockObject = false, $isConnectionMysql = true) {}
    }

    /**
     * Test case
     */
    class MemcachedBackendTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function setThrowsExceptionIfNoFrontEndHasBeenSet() {}
        /**
         * @test
         */
        public function initializeObjectThrowsExceptionIfNoMemcacheServerIsConfigured() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndCheckExistenceInCache() {}
        /**
         * @test
         */
        public function itIsPossibleToSetAndGetEntry() {}
        /**
         * @test
         */
        public function getReturnsPreviouslySetDataWithVariousTypes() {}
        /**
         * Check if we can store ~5 MB of data.
         *
         * @test
         */
        public function largeDataIsStored() {}
        /**
         * @test
         */
        public function itIsPossibleToRemoveEntryFromCache() {}
        /**
         * @test
         */
        public function itIsPossibleToOverwriteAnEntryInTheCache() {}
        /**
         * @test
         */
        public function findIdentifiersByTagFindsCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function setRemovesTagsFromPreviousSet() {}
        /**
         * @test
         */
        public function hasReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function removeReturnsFalseIfTheEntryDoesntExist() {}
        /**
         * @test
         */
        public function flushByTagRemovesCacheEntriesWithSpecifiedTag() {}
        /**
         * @test
         */
        public function flushByTagsRemovesCacheEntriesWithSpecifiedTags() {}
        /**
         * @test
         */
        public function flushRemovesAllCacheEntries() {}
        /**
         * @test
         */
        public function flushRemovesOnlyOwnEntries() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Category\Collection {
    /**
     * Test case for \TYPO3\CMS\Core\Category\Collection\CategoryCollection
     */
    class CategoryCollectionTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var CategoryCollection
         */
        private $subject;
        /**
         * @var string
         */
        private $tableName;
        /**
         * @var array
         */
        private $tables;
        /**
         * @var int
         */
        private $categoryUid;
        /**
         * @var array
         */
        private $collectionRecord;
        /**
         * @var int
         */
        private $numberOfRecords;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * Tears down this test suite.
         */
        protected function tearDown() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Core\Category\Collection\CategoryCollection::fromArray
         */
        public function checkIfFromArrayMethodSetCorrectProperties() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Core\Category\Collection\CategoryCollection::create
         */
        public function canCreateDummyCollection() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Core\Category\Collection\CategoryCollection::create
         */
        public function canCreateDummyCollectionAndFillItems() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Core\Category\Collection\CategoryCollection::getCollectedRecords
         */
        public function getCollectedRecordsReturnsEmptyRecordSet() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Core\Category\Collection\CategoryCollection::getStorageTableName
         */
        public function isStorageTableNameEqualsToSysCategory() {}
        /**
         * @test
         * @covers \TYPO3\CMS\Core\Category\Collection\CategoryCollection::getStorageItemsField
         */
        public function isStorageItemsFieldEqualsToItems() {}
        /** @var $collection CategoryCollection */
        public function canLoadADummyCollectionFromDatabase() {}
        /**
         * @test
         */
        public function canLoadADummyCollectionFromDatabaseAndAddRecord() {}
        /**
         * @test
         */
        public function canLoadADummyCollectionWithoutContentFromDatabase() {}
        /**
         * @test
         */
        public function canLoadADummyCollectionFromDatabaseAfterRemoveOneRelation() {}
        /**
         * Create dummy table for testing purpose
         */
        private function populateDummyTable() {}
        /**
         * Make relation between tables
         */
        private function makeRelationBetweenCategoryAndDummyTable() {}
        /**
         * Create dummy table for testing purpose
         */
        private function createDummyTable() {}
        /**
         * Drop dummy table
         */
        private function dropDummyTable() {}
        /**
         * Add is_dummy_record record and create dummy record
         */
        private function prepareTables() {}
        /**
         * Drops previously added dummy columns from core tables.
         *
         * @throws \Doctrine\DBAL\DBALException
         * @throws \Doctrine\DBAL\Schema\SchemaException
         * @see prepareTables()
         */
        private function purgePreparedTables() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\TypoScript\Parser {
    /**
     * Functional test for TypoScriptParser
     */
    class TypoScriptParserTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * This tests triggers an error if the serialize(unserialize())) call
         * within TypoScriptParser is removed. See forge issue #76919
         *
         * @test
         */
        public function hasFlakyReferences() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Log\Writer {
    /**
     * Test case
     */
    class DatabaseWriterTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @test
         */
        public function writeLogInsertsLogRecordWithGivenProperties() {}
    }

}

namespace OliverHader\IrreTutorial\Controller {
    /**
     * ContentController
     */
    class QueueController extends \oliverhader\irretutorial\controller\abstractcontroller {
        /**
         * @inject
         * @var \OliverHader\IrreTutorial\Domain\Repository\ContentRepository
         */
        protected $contentRepository;
        /**
         * @var string
         */
        protected $defaultViewObjectName;

        /**
         */
        public function indexAction() {}
        /**
         */
        public function processAction() {}
        public function finishAction() {}
        protected function resolveController(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request) {}
    }

    /**
     * ContentController
     */
    abstract class AbstractController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @inject
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory
         */
        protected $dataMapFactory;

        public function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        protected function getStructure($iterator) {}
        protected function process($value) {}
        /**
         * @return string
         */
        protected function getRuntimeIdentifier() {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected function getPersistenceManager() {}
        /**
         * @return \OliverHader\IrreTutorial\Service\QueueService
         */
        protected function getQueueService() {}
    }

    /**
     * ContentController
     */
    class ContentController extends \oliverhader\irretutorial\controller\abstractcontroller {
        /**
         * @inject
         * @var \OliverHader\IrreTutorial\Domain\Repository\ContentRepository
         */
        protected $contentRepository;
        /**
         * @var string
         */
        protected $defaultViewObjectName;

        /**
         */
        public function listAction() {}
        public function showAction(\OliverHader\IrreTutorial\Domain\Model\Content $content) {}
        public function newAction(\OliverHader\IrreTutorial\Domain\Model\Content $newContent = null) {}
        public function createAction(\OliverHader\IrreTutorial\Domain\Model\Content $newContent) {}
        public function editAction(\OliverHader\IrreTutorial\Domain\Model\Content $content) {}
        public function updateAction(\OliverHader\IrreTutorial\Domain\Model\Content $content) {}
        public function deleteAction(\OliverHader\IrreTutorial\Domain\Model\Content $content) {}
    }

}

namespace OliverHader\IrreTutorial\Service {
    /**
     * ContentController
     */
    class QueueService implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $calls;
        /**
         * @var array
         */
        protected $values;
        /**
         * @var bool
         */
        protected $active;

        public function set(array $calls) {}
        /**
         * @return array
         */
        public function get() {}
        /**
         * @return bool
         */
        public function isActive() {}
        public function setActive($active = true) {}
        /**
         * @return array|null
         */
        public function shift() {}
        public function addValue($identifier, $value) {}
        /**
         * @return array
         */
        public function getValues() {}
    }

}

namespace OliverHader\IrreTutorial\Domain\Repository {
    /**
     * Content Repository
     */
    class ContentRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * @var array
         */
        protected $defaultOrderings;

    }

}

namespace OliverHader\IrreTutorial\Domain\Model {
    /**
     * Hotel
     */
    class Hotel extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $title;
        /**
         * @lazy
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\OliverHader\IrreTutorial\Domain\Model\Offer>
         */
        protected $offers;

        /**
         * Initializes this object.
         */
        public function __construct() {}
        /**
         * @return string $title
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\OliverHader\IrreTutorial\Domain\Model\Offer>
         */
        public function getOffers() {}
        public function setOffers(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $offers) {}
    }

    /**
     * Offer
     */
    class Offer extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $title;
        /**
         * @lazy
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\OliverHader\IrreTutorial\Domain\Model\Offer>
         */
        protected $prices;

        /**
         * Initializes this object.
         */
        public function __construct() {}
        /**
         * @return string $title
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\OliverHader\IrreTutorial\Domain\Model\Offer>
         */
        public function getPrices() {}
        public function setPrices(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $prices) {}
    }

    /**
     * Content
     */
    class Content extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $header;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\OliverHader\IrreTutorial\Domain\Model\Hotel>
         */
        protected $hotels;

        /**
         * Initializes this object.
         */
        public function __construct() {}
        /**
         * @return string $header
         */
        public function getHeader() {}
        public function setHeader($header) {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\OliverHader\IrreTutorial\Domain\Model\Hotel>
         */
        public function getHotels() {}
        public function setHotels(\TYPO3\CMS\Extbase\Persistence\ObjectStorage $hotels) {}
    }

    /**
     * Price
     */
    class Price extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var float
         */
        protected $price;

        /**
         * @return string $title
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * @return float $price
         */
        public function getPrice() {}
        public function setPrice($price) {}
    }

}

namespace TYPO3\TestDatahandler\Classes\Tca {
    /**
     * Items processor for radio buttons for the functional tests of DataHandler::checkValue()
     */
    class RadioElementItems {
        public function getItems($params) {}
    }

    /**
     * Items processor for radio buttons for the functional tests of DataHandler::checkValue()
     */
    class CheckboxElementItems {
        public function getItems($params) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractDataHandlerActionTestCase extends \typo3\testingframework\core\functional\functionaltestcase {
        const VALUE_BackendUserId = 1;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;
        /**
         * If this value is NULL, log entries are not considered.
         * If it's an integer value, the number of log entries is asserted.
         *
         * @var int|null
         */
        protected $expectedErrorLogEntries;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $pathsToLinkInTestInstance;
        /**
         * @var array
         */
        protected $recordIds;
        /**
         * @var ActionService
         */
        protected $actionService;
        /**
         * @var \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected $backendUser;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @return ActionService
         */
        protected function getActionService() {}
        protected function importScenarioDataSet($dataSetName) {}
        protected function assertAssertionDataSet($dataSetName) {}
        /**
         * Asserts correct number of warning and error log entries.
         */
        protected function assertErrorLogEntries() {}
        /**
         * @return HasRecordConstraint
         */
        protected function getRequestSectionHasRecordConstraint() {}
        /**
         * @return DoesNotHaveRecordConstraint
         */
        protected function getRequestSectionDoesNotHaveRecordConstraint() {}
        /**
         * @return StructureHasRecordConstraint
         */
        protected function getRequestSectionStructureHasRecordConstraint() {}
        /**
         * @return StructureDoesNotHaveRecordConstraint
         */
        protected function getRequestSectionStructureDoesNotHaveRecordConstraint() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\ManyToMany {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const VALUE_LanguageIdSecond = 2;
        const VALUE_CategoryIdFirst = 28;
        const VALUE_ContentIdLast = 298;
        const VALUE_LanguageId = 1;
        const VALUE_CategoryIdFourth = 31;
        const TABLE_Page = 'pages';
        const VALUE_CategoryIdSecond = 29;
        const VALUE_CategoryIdThird = 30;
        const TABLE_ContentCategory_ManyToMany = 'sys_category_record_mm';
        const FIELD_Categories = 'categories';
        const TABLE_Content = 'tt_content';
        const TABLE_Category = 'sys_category';
        const VALUE_ContentIdFirst = 297;
        const VALUE_PageIdTarget = 90;
        const VALUE_PageId = 89;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @test
         * @see DataSet/addCategoryRelation.csv
         */
        public function addCategoryRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRelation.csv
         */
        public function deleteCategoryRelation() {}
        /**
         * @test
         * @see DataSet/changeCategoryRelationSorting.csv
         */
        public function changeCategoryRelationSorting() {}
        /**
         * @test
         * @see DataSet/modifyCategoryRecordOfCategoryRelation.csv
         */
        public function modifyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentRecordOfCategoryRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothRecordsOfCategoryRelation.csv
         */
        public function modifyBothsOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentRecordOfCategoryRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRecordOfCategoryRelation.csv
         */
        public function deleteCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentRecordOfCategoryRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyCategoryRecordOfCategoryRelation.csv
         */
        public function copyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageOfRelation.csv
         */
        public function copyContentToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/copyCategoryToLanguageOfRelation.csv
         */
        public function copyCategoryToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentRecordOfCategoryRelation.csv
         */
        public function localizeContentOfRelation() {}
        public function localizeContentOfRelationWithLanguageSynchronization() {}
        public function localizeContentOfRelationAndAddCategoryWithLanguageSynchronization() {}
        public function localizeContentChainOfRelationAndAddCategoryWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeCategoryRecordOfCategoryRelation.csv
         */
        public function localizeCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentRecordOfCategoryRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
        /**
         * @test
         * @see DataSet/copyPage.csv
         */
        public function copyPage() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\ManyToMany\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\core\tests\functional\datahandling\manytomany\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addCategoryRelation.csv
         */
        public function addCategoryRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRelation.csv
         */
        public function deleteCategoryRelation() {}
        /**
         * @test
         * @see DataSet/changeCategoryRelationSorting.csv
         */
        public function changeCategoryRelationSorting() {}
        /**
         * @test
         * @see DataSet/modifyCategoryRecordOfCategoryRelation.csv
         */
        public function modifyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentRecordOfCategoryRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothRecordsOfCategoryRelation.csv
         */
        public function modifyBothsOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentRecordOfCategoryRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRecordOfCategoryRelation.csv
         */
        public function deleteCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentRecordOfCategoryRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyCategoryRecordOfCategoryRelation.csv
         */
        public function copyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageOfRelation.csv
         */
        public function copyContentToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/copyCategoryToLanguageOfRelation.csv
         */
        public function copyCategoryToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentRecordOfCategoryRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelationWSynchronization.csv
         */
        public function localizeContentOfRelationWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelationNAddCategoryWSynchronization.csv
         */
        public function localizeContentOfRelationAndAddCategoryWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeContentChainOfRelationNAddCategoryWSynchronization.csv
         */
        public function localizeContentChainOfRelationAndAddCategoryWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeCategoryRecordOfCategoryRelation.csv
         */
        public function localizeCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentRecordOfCategoryRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
        /**
         * @test
         * @see DataSet/copyPage.csv
         */
        public function copyPage() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\Group {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const VALUE_LanguageIdSecond = 2;
        const VALUE_LanguageId = 1;
        const VALUE_ContentIdLast = 298;
        const VALUE_ContentIdFirst = 297;
        const VALUE_PageIdTarget = 90;
        const VALUE_PageId = 89;
        const TABLE_Element = 'tx_testdatahandler_element';
        const FIELD_ContentElement = 'tx_testdatahandler_group';
        const VALUE_ElementIdFirst = 1;
        const VALUE_ElementIdSecond = 2;
        const VALUE_ElementIdThird = 3;
        const TABLE_Content = 'tt_content';

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageOfRelation.csv
         */
        public function copyContentToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementToLanguageOfRelation.csv
         */
        public function copyElementToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        public function localizeContentOfRelationWithLanguageSynchronization() {}
        public function localizeContentChainOfRelationWithLanguageSynchronizationSource() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\Group\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\core\tests\functional\datahandling\group\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageOfRelation.csv
         */
        public function copyContentToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementToLanguageOfRelation.csv
         */
        public function copyElementToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelationWSynchronization.csv
         */
        public function localizeContentOfRelationWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeContentChainOfRelationWSynchronizationSource.csv
         */
        public function localizeContentChainOfRelationWithLanguageSynchronizationSource() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\FAL {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const VALUE_PageId = 89;
        const VALUE_PageIdTarget = 90;
        const VALUE_PageIdWebsite = 1;
        const VALUE_ContentIdFirst = 330;
        const TABLE_Content = 'tt_content';
        const TABLE_Page = 'pages';
        const TABLE_FileMetadata = 'sys_file_metadata';
        const TABLE_File = 'sys_file';
        const FIELD_ContentImage = 'image';
        const TABLE_FileReference = 'sys_file_reference';
        const FIELD_FileReferenceImage = 'uid_local';
        const VALUE_FileIdFirst = 1;
        const VALUE_ContentIdLast = 331;
        const VALUE_LanguageId = 1;
        const VALUE_FileIdLast = 21;
        const VALUE_FileReferenceContentFirstFileLast = 127;
        const VALUE_FileReferenceContentFirstFileFirst = 126;
        const VALUE_FileReferenceContentLastFileFirst = 129;
        const VALUE_FileReferenceContentLastFileLast = 128;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @see Modify/DataSet/modifyContent.csv
         */
        public function modifyContent() {}
        /**
         * @see Modify/DataSet/deleteContent.csv
         */
        public function deleteContent() {}
        /**
         * @see Modify/DataSet/copyContent.csv
         */
        public function copyContent() {}
        /**
         * @see Modify/DataSet/copyContentToLanguage.csv
         */
        public function copyContentToLanguage() {}
        /**
         * @see Modify/DataSet/localizeContent.csv
         */
        public function localizeContent() {}
        /**
         * @see Modify/DataSet/changeContentSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @see Modify/DataSet/moveContentToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @see Modify/DataSet/moveContentToDifferentPageNChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @see Modify/DataSet/createContentWFileReference.csv
         */
        public function createContentWithFileReference() {}
        /**
         * @see Modify/DataSet/modifyContentWFileReference.csv
         */
        public function modifyContentWithFileReference() {}
        /**
         * @see Modify/DataSet/modifyContentNAddFileReference.csv
         */
        public function modifyContentAndAddFileReference() {}
        /**
         * @see Modify/DataSet/modifyContentNDeleteFileReference.csv
         */
        public function modifyContentAndDeleteFileReference() {}
        /**
         * @see Modify/DataSet/modifyContentNDeleteAllFileReference.csv
         */
        public function modifyContentAndDeleteAllFileReference() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\FAL\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\core\tests\functional\datahandling\fal\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/modifyContent.csv
         */
        public function modifyContent() {}
        /**
         * @test
         * @see DataSet/deleteContent.csv
         */
        public function deleteContent() {}
        /**
         * @test
         * @see DataSet/copyContent.csv
         */
        public function copyContent() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguage.csv
         */
        public function copyContentToLanguage() {}
        /**
         * @test
         * @see DataSet/localizeContent.csv
         */
        public function localizeContent() {}
        /**
         * @test
         * @see DataSet/changeContentSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @test
         * @see DataSet/moveContentToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveContentToDifferentPageNChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSets/createContentWFileReference.csv
         */
        public function createContentWithFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentWFileReference.csv
         */
        public function modifyContentWithFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNAddFileReference.csv
         */
        public function modifyContentAndAddFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNDeleteFileReference.csv
         */
        public function modifyContentAndDeleteFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNDeleteAllFileReference.csv
         */
        public function modifyContentAndDeleteAllFileReference() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\IRRE\ForeignField {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const VALUE_PageId = 89;
        const VALUE_PageIdTarget = 90;
        const VALUE_PageIdWebsite = 1;
        const VALUE_ContentIdFirst = 297;
        const FIELD_PageHotel = 'tx_irretutorial_hotels';
        const FIELD_ContentHotel = 'tx_irretutorial_1nff_hotels';
        const FIELD_HotelOffer = 'offers';
        const FIELD_OfferPrice = 'prices';
        const TABLE_Price = 'tx_irretutorial_1nff_price';
        const TABLE_Offer = 'tx_irretutorial_1nff_offer';
        const TABLE_Hotel = 'tx_irretutorial_1nff_hotel';
        const TABLE_Content = 'tt_content';
        const TABLE_Page = 'pages';
        const VALUE_LanguageIdSecond = 2;
        const VALUE_LanguageId = 1;
        const VALUE_OfferIdLast = 8;
        const VALUE_HotelIdThird = 5;
        const VALUE_HotelIdSecond = 4;
        const VALUE_HotelIdFirst = 3;
        const VALUE_ContentIdLast = 298;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @see DataSet/localizeParentContentSynchronization.csv
         */
        public function localizeParentContentWithLanguageSynchronization() {}
        /**
         * @see DataSet/localizeParentContentWAllChildrenSelect.csv
         */
        public function localizeParentContentChainLanguageSynchronizationSource() {}
        /**
         * @see DataSet/copyParentContentToLanguageWAllChildren.csv
         */
        public function copyParentContentToLanguageWithAllChildren() {}
        /**
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @see DataSet/Modify/localizeParentContentNCreateNestedChildrenWLanguageSynchronization.csv
         */
        public function localizeParentContentAndCreateNestedChildrenWithLanguageSynchronization() {}
        /**
         * @see DataSet/localizeParentContentSynchronization.csv
         */
        public function localizeParentContentAndSetInvalidChildReferenceWithLanguageSynchronization() {}
        /**
         * @see DataSet/localizeParentContentSynchronization.csv
         */
        public function localizeParentContentAndSetInvalidChildReferenceWithLateLanguageSynchronization() {}
        /**
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenWithoutSortByConfiguration() {}
        /**
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
        public function localizePageWithLocalizationExclude() {}
        public function localizePageAndAddHotelChildWithLocalizationExclude() {}
        public function localizePageWithLanguageSynchronization() {}
        public function localizePageAndAddHotelChildWithLanguageSynchronization() {}
        public function localizePageAndAddMonoglotHotelChildWithLanguageSynchronization() {}
        public function localizeAndCopyPageWithLanguageSynchronization() {}
        public function localizePageWithSynchronizationAndCustomLocalizedHotel() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\IRRE\ForeignField\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\core\tests\functional\datahandling\irre\foreignfield\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @test
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/copyParentContentToLanguageWAllChildren.csv
         */
        public function copyParentContentToLanguageWithAllChildren() {}
        /**
         * @test
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @test
         * @see DataSet/localizeParentContentSynchronization.csv
         */
        public function localizeParentContentWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeParentContentChainLanguageSynchronizationSource.csv
         */
        public function localizeParentContentChainLanguageSynchronizationSource() {}
        /**
         * @test
         * @see DataSet/Modify/localizeParentContentNCreateNestedChildrenWLanguageSynchronization.csv
         */
        public function localizeParentContentAndCreateNestedChildrenWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeParentContentSynchronization.csv
         */
        public function localizeParentContentAndSetInvalidChildReferenceWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeParentContentSynchronization.csv
         */
        public function localizeParentContentAndSetInvalidChildReferenceWithLateLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @test
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createNLocalizeParentContentNHotelNOfferChildrenWOSortBy.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenWithoutSortByConfiguration() {}
        /**
         * @test
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
        /**
         * @test
         * @see DataSet/localizePageWExclude.csv
         */
        public function localizePageWithLocalizationExclude() {}
        /**
         * @test
         * @see DataSet/localizePageNAddHotelChildWExclude.csv
         */
        public function localizePageAndAddHotelChildWithLocalizationExclude() {}
        /**
         * @test
         * @see DataSet/localizePageWSynchronization.csv
         */
        public function localizePageWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizePageNAddHotelChildWSynchronization.csv
         */
        public function localizePageAndAddHotelChildWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizePageNAddMonoglotHotelChildWSynchronization.csv
         */
        public function localizePageAndAddMonoglotHotelChildWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeNCopyPageWSynchronization.csv
         */
        public function localizeAndCopyPageWithLanguageSynchronization() {}
        /**
         * Checks for a page having a IRRE record. The page is then localized and
         * an IRRE record is then added to the localized page
         *
         * @test
         * @see DataSet/localizePageWithSynchronizationAndCustomLocalizedHotel.csv
         */
        public function localizePageWithSynchronizationAndCustomLocalizedHotel() {}
        /**
         * @test
         * @see DataSet/localizePageAddMonoglotHotelChildNCopyPageWSynchronization.csv
         */
        public function localizePageAddMonoglotHotelChildAndCopyPageWithLanguageSynchronization() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\IRRE\CSV {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const TABLE_Page = 'pages';
        const TABLE_Content = 'tt_content';
        const TABLE_Hotel = 'tx_irretutorial_1ncsv_hotel';
        const TABLE_Offer = 'tx_irretutorial_1ncsv_offer';
        const FIELD_ContentHotel = 'tx_irretutorial_1ncsv_hotels';
        const FIELD_HotelOffer = 'offers';
        const VALUE_PageIdWebsite = 1;
        const VALUE_PageIdTarget = 90;
        const VALUE_ContentIdLast = 298;
        const VALUE_ContentIdFirst = 297;
        const VALUE_HotelIdSecond = 4;
        const VALUE_HotelIdFirst = 3;
        const VALUE_LanguageId = 1;
        const VALUE_HotelIdThird = 5;
        const VALUE_PageId = 89;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @see DataSet/copyParentContentToLanguage.csv
         * Should copy all children as well
         */
        public function copyParentContentToLanguage() {}
        /**
         * @see DataSet/localizeParentContentWAllChildren.csv
         * Should localize all children as well
         */
        public function localizeParentContentWithAllChildren() {}
        public function localizeParentContentWithLanguageSynchronization() {}
        /**
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\IRRE\CSV\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\core\tests\functional\datahandling\irre\csv\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @test
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/copyParentContentToLanguage.csv
         */
        public function copyParentContentToLanguageWithAllChildren() {}
        /**
         * @test
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @test
         * @see DataSet/localizeParentContentLanguageSynchronization.csv
         */
        public function localizeParentContentWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @test
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\FlexformIrre {
    class ActionTestCase extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        /**
         * @var array
         */
        protected $pathsToLinkInTestInstance;
        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @test
         */
        public function newVersionOfFileRelationInFlexformFieldIsCreatedOnSave() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\DataHandler {
    /**
     * Tests triggering hook execution in DataHandler.
     */
    class HookTest extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const TABLE_Category = 'sys_category';
        const TABLE_Hotel = 'tx_irretutorial_1nff_hotel';
        const TABLE_Content = 'tt_content';
        const VALUE_ContentId = 297;
        const VALUE_PageId = 89;
        const FIELD_Categories = 'categories';
        const FIELD_ContentHotel = 'tx_irretutorial_1nff_hotels';

        /**
         * @var HookFixture
         */
        protected $hookFixture;
        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function hooksAreExecutedForNewRecords() {}
        /**
         * @test
         */
        public function hooksAreExecutedForExistingRecords() {}
        /**
         * @test
         */
        public function hooksAreExecutedForNewRelations() {}
        /**
         * @test
         */
        public function hooksAreExecutedForExistingRelations() {}
        protected function assertHookInvocationsCount(array $methodNames, int $count) {}
        protected function assertHookInvocationsPayload(array $methodNames, array $assertions) {}
        protected function assertHookInvocationPayload(string $methodName, array $assertions) {}
        protected function findAllArrayValuesInHaystack(array $haystack, array $assertion) {}
        protected function equals(array $left, array $right) {}
    }

    /**
     * Testing behavior of TCA field configuration 'special' => 'languages'
     */
    class SpecialLanguagesTest extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        protected function setUp() {}
        public function allowedLanguagesAreAssignedToBackendUserGroup($value, $expected) {}
        /**
         * @return array
         */
        public function allowedLanguagesAreAssignedToBackendUserGroupDataProvider() {}
    }

    /**
     * Tests related to DataHandler::getUnique()
     */
    class GetUniqueTest extends \typo3\testingframework\core\functional\functionaltestcase {
        protected function setUp() {}
        /**
         * Data provider for getUnique
         * @return array
         */
        public function getUniqueDataProvider() : array {}
        public function getUnique(string $value, string $expected) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\DataHandler\Fixtures {
    /**
     * Class for testing execution of DataHandler hook invocations.
     */
    class HookFixture implements \typo3\cms\core\singletoninterface {
        /**
         * @var array[]
         */
        protected $invocations;

        /**
         * Purges the state of this singleton instance
         */
        public function purge() {}
        public function findInvocationsByMethodName(string $methodName) {}
        public function processDatamap_beforeStart(DataHandler $dataHandler) {}
        public function processDatamap_preProcessFieldArray(array $fieldArray, string $table, $id, DataHandler $dataHandler) {}
        public function processDatamap_postProcessFieldArray(string $status, string $table, $id, array $fieldArray, DataHandler $dataHandler) {}
        public function processDatamap_afterDatabaseOperations(string $status, string $table, $id, array $fieldArray, DataHandler $dataHandler) {}
        public function processDatamap_afterAllOperations(DataHandler $dataHandler) {}
        public function processCmdmap_beforeStart(DataHandler $dataHandler) {}
        public function processCmdmap_preProcess(string $command, string $table, $id, $value, DataHandler $dataHandler, $pasteUpdate) {}
        public function processCmdmap(string $command, string $table, $id, $value, bool $commandIsProcessed, DataHandler $dataHandler, $pasteUpdate) {}
        public function processCmdmap_postProcess(string $command, string $table, $id, $value, DataHandler $dataHandler, $pasteUpdate, $pasteDatamap) {}
        public function processCmdmap_afterFinish(DataHandler $dataHandler) {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\Select {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const VALUE_ElementIdThird = 3;
        const TABLE_Content = 'tt_content';
        const VALUE_ElementIdFirst = 1;
        const VALUE_ElementIdSecond = 2;
        const VALUE_ContentIdLast = 298;
        const VALUE_LanguageId = 1;
        const VALUE_PageIdTarget = 90;
        const VALUE_ContentIdFirst = 297;
        const VALUE_PageId = 89;
        const FIELD_ContentElement = 'tx_testdatahandler_select';
        const TABLE_Element = 'tx_testdatahandler_element';

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageOfRelation.csv
         */
        public function copyContentToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementToLanguageOfRelation.csv
         */
        public function copyElementToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\Select\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\core\tests\functional\datahandling\select\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageOfRelation.csv
         */
        public function copyContentToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementToLanguageOfRelation.csv
         */
        public function copyElementToLanguageOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\Regular {
    /**
     * Tests related to DataHandler::checkValue()
     */
    class CheckValueTest extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @test
         */
        public function radioButtonValueMustBeDefinedInTcaItems() {}
        /**
         * @test
         */
        public function radioButtonValueMustComeFromItemsProcFuncIfNotDefinedInTcaItems() {}
        /**
         * @test
         */
        public function radioButtonValueIsNotSavedIfNotDefinedInTcaItemsOrProcessingItems() {}
        protected function insertRecordWithRadioFieldValue($value) {}
    }

    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const TABLE_Content = 'tt_content';
        const TABLE_Page = 'pages';
        const VALUE_ContentIdThirdLocalized = 300;
        const VALUE_ContentIdThird = 299;
        const VALUE_LanguageIdSecond = 2;
        const VALUE_LanguageId = 1;
        const VALUE_PageIdWebsite = 1;
        const VALUE_PageIdTarget = 90;
        const VALUE_ContentIdSecond = 298;
        const VALUE_ContentIdFirst = 297;
        const VALUE_PageId = 89;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @see DataSet/createContentRecords.csv
         */
        public function createContents() {}
        /**
         * Creation of a content element with language set to all
         *
         * @see DataSet/createContentForLanguageAll.csv
         */
        public function createContentForLanguageAll() {}
        /**
         * @see DataSet/modifyContentRecord.csv
         */
        public function modifyContent() {}
        /**
         * @see DataSet/deleteContentRecord.csv
         */
        public function deleteContent() {}
        /**
         * @see DataSet/deleteLocalizedContentNDeleteContent.csv
         */
        public function deleteLocalizedContentAndDeleteContent() {}
        /**
         * @see DataSet/copyContentRecord.csv
         */
        public function copyContent() {}
        /**
         * @see DataSet/copyContentToLanguage.csv
         */
        public function copyContentToLanguage() {}
        /**
         * Free mode "translation" of a record in non default language
         *
         * @see DataSet/copyContentToLanguageFromNonDefaultLanguage.csv
         */
        public function copyContentToLanguageFromNonDefaultLanguage() {}
        /**
         * @see DataSet/copyPasteContent.csv
         */
        public function copyPasteContent() {}
        /**
         * @see DataSet/localizeContentRecord.csv
         */
        public function localizeContent() {}
        public function localizeContentWithLanguageSynchronization() {}
        public function localizeContentWithLanguageSynchronizationHavingNullValue() {}
        /**
         * @see DataSet/localizeContentFromNonDefaultLanguage.csv
         */
        public function localizeContentFromNonDefaultLanguage() {}
        public function localizeContentFromNonDefaultLanguageWithLanguageSynchronizationDefault() {}
        public function localizeContentFromNonDefaultLanguageWithLanguageSynchronizationSource() {}
        public function createLocalizedContent() {}
        public function createLocalizedContentWithLanguageSynchronization() {}
        public function createLocalizedContentWithLocalizationExclude() {}
        /**
         * @see DataSet/changeContentRecordSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @see DataSet/moveContentRecordToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @see DataSet/movePasteContentToDifferentPage.csv
         */
        public function movePasteContentToDifferentPage() {}
        /**
         * @see DataSet/moveContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @see DataSet/createPageRecord.csv
         */
        public function createPage() {}
        /**
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @see DataSet/copyPage.csv
         */
        public function copyPage() {}
        /**
         * @see DataSet/copyPageFreeMode.csv
         */
        public function copyPageFreeMode() {}
        /**
         * @see DataSet/localizePageRecord.csv
         */
        public function localizePage() {}
        public function localizePageWithLanguageSynchronization() {}
        /**
         * @see DataSet/changePageRecordSorting.csv
         */
        public function changePageSorting() {}
        /**
         * @see DataSet/movePageRecordToDifferentPage.csv
         */
        public function movePageToDifferentPage() {}
        /**
         * @see DataSet/movePageRecordToDifferentPageAndChangeSorting.csv
         */
        public function movePageToDifferentPageAndChangeSorting() {}
    }

    /**
     * Functional Test for DataHandlen::checkValue() concerning checkboxes
     */
    class CheckValueTestForCheckboxes extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @test
         */
        public function checkBoxValueMustBeDefinedInTcaItems() {}
        /**
         * @test
         */
        public function checkBoxValueMustComeFromItemsProcFuncIfNotDefinedInTcaItems() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\DataHandling\Regular\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\core\tests\functional\datahandling\regular\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createContentRecords.csv
         */
        public function createContents() {}
        /**
         * @test
         * @see DataSet/createContentForLanguageAll.csv
         */
        public function createContentForLanguageAll() {}
        /**
         * @test
         * @see DataSet/modifyContentRecord.csv
         */
        public function modifyContent() {}
        /**
         * @test
         * @see DataSet/deleteContentRecord.csv
         */
        public function deleteContent() {}
        /**
         * @test
         * @see DataSet/deleteLocalizedContentNDeleteContent.csv
         */
        public function deleteLocalizedContentAndDeleteContent() {}
        /**
         * @test
         * @see DataSet/copyContentRecord.csv
         */
        public function copyContent() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguage.csv
         */
        public function copyContentToLanguage() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageFromNonDefaultLanguage.csv
         */
        public function copyContentToLanguageFromNonDefaultLanguage() {}
        /**
         * @test
         * @see DataSet/copyContentRecord.csv
         */
        public function copyPasteContent() {}
        /**
         * @test
         * @see DataSet/localizeContentRecord.csv
         */
        public function localizeContent() {}
        /**
         * @test
         * @see DataSet/localizeContentWSynchronization.csv
         */
        public function localizeContentWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeContentWSynchronizationHNull.csv
         */
        public function localizeContentWithLanguageSynchronizationHavingNullValue() {}
        /**
         * @test
         * @see DataSet/localizeContentFromNonDefaultLanguage.csv
         */
        public function localizeContentFromNonDefaultLanguage() {}
        /**
         * @test
         * @see DataSet/localizeContentFromNonDefaultLanguageWSynchronizationDefault.csv
         */
        public function localizeContentFromNonDefaultLanguageWithLanguageSynchronizationDefault() {}
        /**
         * @test
         * @see DataSet/localizeContentFromNonDefaultLanguageWSynchronizationSource.csv
         */
        public function localizeContentFromNonDefaultLanguageWithLanguageSynchronizationSource() {}
        /**
         * @test
         * @see DataSet/createLocalizedContent.csv
         */
        public function createLocalizedContent() {}
        /**
         * @test
         * @see DataSet/createLocalizedContentWSynchronization.csv
         */
        public function createLocalizedContentWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/createLocalizedContentWExclude.csv
         */
        public function createLocalizedContentWithLocalizationExclude() {}
        /**
         * @test
         * @see DataSet/changeContentRecordSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/movePasteContentToDifferentPage.csv
         */
        public function movePasteContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/createPageRecord.csv
         */
        public function createPage() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPage.csv
         */
        public function copyPage() {}
        /**
         * Copy page (id 90) containing content elements translated in "free mode".
         * Values in l10n_source field are remapped to ids of newly copied records
         * e.g. record 314 has l10n_source = 315 and record 313 has l10n_source = 314
         * also note that 314 is NOT a record in the default language
         *
         * @test
         * @see DataSet/copyPageFreeMode.csv
         */
        public function copyPageFreeMode() {}
        /**
         * @test
         * @see DataSet/localizePageRecord.csv
         */
        public function localizePage() {}
        /**
         * @test
         * @see DataSet/localizeNCopyPage.csv
         */
        public function localizeAndCopyPage() {}
        /**
         * @test
         * @see DataSet/localizePageWSynchronization.csv
         */
        public function localizePageWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/localizeNCopyPageWSynchronization.csv
         */
        public function localizeAndCopyPageWithLanguageSynchronization() {}
        /**
         * @test
         * @see DataSet/changePageRecordSorting.csv
         */
        public function changePageSorting() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPage.csv
         */
        public function movePageToDifferentPage() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPageAndChangeSorting.csv
         */
        public function movePageToDifferentPageAndChangeSorting() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Resource {
    /**
     * Test case
     */
    class ResourceStorageTest extends \typo3\testingframework\core\functional\functionaltestcase {
        protected function tearDown() {}
        /**
         * @test
         */
        public function getNestedProcessingFolderTest() {}
        public function isWithinFileMountBoundariesRespectsReadOnlyFileMounts($targetDirectory, $fileMountFolder, $isFileMountReadOnly, $checkWriteAccess, $expectedResult) {}
        /**
         * @return array
         */
        public function isWithinFileMountBoundariesDataProvider() {}
        /**
         * @test
         */
        public function getProcessingRootFolderTest() {}
        /**
         * @test
         */
        public function getRoleReturnsDefaultForRegularFolders() {}
        /**
         * @test
         */
        public function replaceFileFailsIfLocalFileDoesNotExist() {}
        /**
         * @test
         */
        public function createFolderThrowsExceptionIfParentFolderDoesNotExist() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Messaging {
    /**
     * Test case
     */
    class FlashMessageQueueTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @test
         */
        public function getAllMessagesContainsEnqueuedMessage() {}
        /**
         * @test
         */
        public function messagesCanBeFilteredBySeverity() {}
        /**
         * @test
         */
        public function getAllMessagesAndFlushContainsEnqueuedMessage() {}
        /**
         * @test
         */
        public function getAllMessagesAndFlushClearsSessionStack() {}
        /**
         * @test
         */
        public function getMessagesAndFlushCanFilterBySeverity() {}
        /**
         * @test
         */
        public function getAllMessagesReturnsSessionFlashMessageAndTransientFlashMessage() {}
        /**
         * @test
         */
        public function clearClearsTheQueue() {}
        /**
         * @test
         */
        public function toArrayOnlyRespectsTransientFlashMessages() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Authentication {
    /**
     * Testcase for class \TYPO3\CMS\Core\Authentication\AuthenticationService
     */
    class AuthenticationServiceTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var AuthenticationService
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getUserReturnsOnlyNotDeletedRecords() {}
    }

}

namespace TYPO3\CMS\Core\Tests\Functional\Session\Backend {
    /**
     * Test case
     */
    class RedisSessionBackendTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var RedisSessionBackend Prepared and connected redis test subject
         */
        protected $subject;
        /**
         * @var array
         */
        protected $testSessionRecord;

        /**
         * Set configuration for RedisSessionBackend
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function cannotUpdateNonExistingRecord() {}
        /**
         * @test
         */
        public function canValidateSessionBackend() {}
        /**
         * @test
         * @covers SessionBackendInterface::set
         */
        public function sessionDataIsStoredProperly() {}
        /**
         * @test
         */
        public function anonymousSessionDataIsStoredProperly() {}
        /**
         * @test
         * @covers SessionBackendInterface::get
         */
        public function throwExceptionOnNonExistingSessionId() {}
        /**
         * @test
         * @covers SessionBackendInterface::update
         */
        public function mergeSessionDataWithNewData() {}
        /**
         * @test
         * @covers SessionBackendInterface::set
         */
        public function existingSessionMustNotBeOverridden() {}
        /**
         * @test
         * @covers SessionBackendInterface::update
         */
        public function cannotChangeSessionId() {}
        /**
         * @test
         * @covers SessionBackendInterface::remove
         */
        public function sessionGetsDestroyed() {}
        /**
         * @test
         * @covers SessionBackendInterface::getAll
         */
        public function canLoadAllSessions() {}
        /**
         * @test
         */
        public function canCollectGarbage() {}
        /**
         * @test
         */
        public function canPartiallyUpdateAfterGet() {}
    }

    /**
     * Test case
     */
    class DatabaseSessionBackendTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var DatabaseSessionBackend
         */
        protected $subject;
        /**
         * @var array
         */
        protected $testSessionRecord;

        /**
         * Set configuration for DatabaseSessionBackend
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function canValidateSessionBackend() {}
        /**
         * @test
         * @covers SessionBackendInterface::set
         */
        public function sessionDataIsStoredProperly() {}
        /**
         * @test
         */
        public function anonymousSessionDataIsStoredProperly() {}
        /**
         * @test
         * @covers SessionBackendInterface::get
         */
        public function throwExceptionOnNonExistingSessionId() {}
        /**
         * @test
         * @covers SessionBackendInterface::update
         */
        public function mergeSessionDataWithNewData() {}
        /**
         * @test
         * @covers SessionBackendInterface::set
         */
        public function existingSessionMustNotBeOverridden() {}
        /**
         * @test
         * @covers SessionBackendInterface::update
         */
        public function cannotChangeSessionId() {}
        /**
         * @test
         * @covers SessionBackendInterface::remove
         */
        public function sessionGetsDestroyed() {}
        /**
         * @test
         * @covers SessionBackendInterface::getAll
         */
        public function canLoadAllSessions() {}
        /**
         * @test
         */
        public function canCollectGarbage() {}
        /**
         * @test
         */
        public function canPartiallyUpdateAfterGet() {}
    }

}

namespace TYPO3\CMS\Rsaauth {
    /**
     * This class adds necessary Javascript code to encrypt fields in a form
     */
    class RsaEncryptionEncoder implements \typo3\cms\core\singletoninterface {
        /**
         * @var bool
         */
        protected $moduleLoaded;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;

        /**
         * This method is called by the hook constructPostProcess
         */
        public function enableEncryptionFromBackendControllerPostConstructor() {}
        public function enableRsaEncryption($useRequireJsModule = false) {}
        /**
         * @return bool
         */
        public function isAvailable() {}
        /**
         * Gets RSA Public Key.
         *
         * @return Keypair|null
         */
        public function getRsaPublicKey() {}
        public function getRsaPublicKeyAjaxHandler(ServerRequestInterface $request, ResponseInterface $response) {}
    }

    /**
     * This class decodes rsa protected data
     */
    class RsaEncryptionDecoder implements \typo3\cms\core\singletoninterface {
        /**
         * @var Backend\AbstractBackend
         */
        protected $backend;
        /**
         * @var Storage\AbstractStorage
         */
        protected $storage;
        /**
         * @var string
         */
        protected $key;

        public function decrypt($data) {}
        /**
         * @return bool
         */
        public function isAvailable() {}
        protected function decryptDataArray(array $data) {}
        /**
         * @return string
         */
        protected function getKey() {}
        /**
         * @return Backend\AbstractBackend|null
         */
        protected function getBackend() {}
        /**
         * @return Storage\AbstractStorage
         */
        protected function getStorage() {}
    }

    /**
     * This class contains a hook to the backend warnings collection. It checks
     * RSA configuration and create a warning if the configuration is wrong.
     */
    class BackendWarnings {
        public function displayWarningMessages_postProcess(array $warnings) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Service "RSA authentication" for the "rsaauth" extension. This service will
     * authenticate a user using hos password encoded with one time public key. It
     * uses the standard TYPO3 service to do all dirty work. Firsts, it will decode
     * the password and then pass it to the parent service ('core'). This ensures that it
     * always works, even if other TYPO3 internals change.
     */
    class RsaAuthService extends \typo3\cms\core\authentication\authenticationservice {
        /**
         * @var RsaEncryptionDecoder
         */
        protected $rsaEncryptionDecoder;
        /**
         * Standard extension key for the service
         * The extension key.
         *
         * @var string
         */
        public $extKey;
        /**
         * Standard prefix id for the service
         * Same as class name
         *
         * @var string
         */
        public $prefixId;

        public function processLoginData(array $loginData, $passwordTransmissionStrategy) {}
        /**
         * Initializes the service.
         *
         * @return bool
         */
        public function init() {}
        /**
         * @return RsaEncryptionDecoder
         */
        protected function getRsaEncryptionDecoder() {}
    }

    /**
     * This class contain an RSA key pair. Its purpose is to keep to keys
     * and transfer these keys between other PHP classes.
     */
    class Keypair implements \typo3\cms\core\singletoninterface {
        /**
         * RSA public exponent (3 or 0x10001)
         *
         * @var int
         */
        protected $exponent;
        /**
         * The private key
         *
         * @var string
         */
        protected $privateKey;
        /**
         * The public key modulus
         *
         * @var int
         */
        protected $publicKeyModulus;

        /**
         * Checks if this key pair already has been provided with all data.
         *
         * @return bool
         */
        public function isReady() {}
        /**
         * Retrieves the exponent.
         *
         * @return int the exponent
         */
        public function getExponent() {}
        public function setExponent($exponent) {}
        /**
         * Checks whether an exponent already has been set.
         *
         * @return bool
         */
        protected function hasExponent() {}
        /**
         * Retrieves the private key.
         *
         * @return string The private key
         */
        public function getPrivateKey() {}
        public function setPrivateKey($privateKey) {}
        /**
         * Checks whether a private key already has been set.
         *
         * @return bool
         */
        protected function hasPrivateKey() {}
        /**
         * Retrieves the public key modulus
         *
         * @return int the public key modulus
         */
        public function getPublicKeyModulus() {}
        public function setPublicKey($publicKeyModulus) {}
        /**
         * Checks whether a public key modulus already has been set.
         *
         * @return bool
         */
        protected function hasPublicKeyModulus() {}
    }

}

namespace TYPO3\CMS\Rsaauth\Form\Element {
    /**
     * Generation of form element of the type rsaInput
     */
    class RsaInputElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a single-line input form field, possibly with various control/validation features
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Rsaauth\Backend {
    /**
     * This class contains a factory for the RSA backends.
     */
    class BackendFactory {
        /**
         * A list of all available backends. Currently this list cannot be extended.
         * This is for security reasons to avoid inserting some dummy backend to
         * the list.
         *
         * @var array
         */
        static protected $availableBackends;
        /**
         * A flag that tells if the factory is initialized. This is to prevent
         * continuous creation of backends in case if none of them is available.
         *
         * @var bool
         */
        static protected $initialized;
        /**
         * A selected backend. This member is set in the getBackend() function. It
         * will not be an abstract backend as shown below but a real class, which is
         * derived from the AbstractBackend.
         *
         * @var AbstractBackend
         */
        static protected $selectedBackend;

        /**
         * Obtains a backend. This function will return a non-abstract class, which
         * is derived from the AbstractBackend. Applications should
         * not use any methods that are not declared in the AbstractBackend.
         *
         * @return AbstractBackend A backend
         */
        public static function getBackend() {}
    }

    /**
     * This class contains an OpenSSL backend for the TYPO3 RSA authentication
     * service. It uses shell version of OpenSSL to perform tasks. See class
     * \TYPO3\CMS\Rsaauth\Backend\AbstractBackend for the information on using backends.
     */
    class CommandLineBackend extends \typo3\cms\rsaauth\backend\abstractbackend {
        const DEFAULT_EXPONENT = 65537;

        /**
         * A path to the openssl binary or FALSE if the binary does not exist
         *
         * @var string|bool
         */
        protected $opensslPath;
        /**
         * Temporary directory. It is best of it is outside of the web site root and
         * not publicly readable.
         * For now we use typo3temp/var/ (stored in the variable without the trailing slash).
         *
         * @var string
         */
        protected $temporaryDirectory;

        /**
         * Creates an instance of this class. It obtains a path to the OpenSSL
         * binary.
         */
        public function __construct() {}
        /**
         * Creates a new key pair for the encryption or gets the existing key pair (if one already has been generated).
         *
         * There should only be one key pair per request because the second private key would overwrites the first private
         * key. So the submitting the form with the first public key would not work anymore.
         *
         * @return \TYPO3\CMS\Rsaauth\Keypair|null a key pair or NULL in case of error
         */
        public function createNewKeyPair() {}
        public function decrypt($privateKey, $data) {}
        /**
         * Checks if command line version of the OpenSSL is available and can be
         * executed successfully.
         *
         * @return bool
         * @see \TYPO3\CMS\Rsaauth\Backend\AbstractBackend::isAvailable()
         */
        public function isAvailable() {}
    }

    /**
     * This class contains an abstract SSL backend for the TYPO3 RSA authentication
     * service.
     *
     * There are two steps:
     * - prepare data for encoding
     * - decode incoming data
     *
     * To prepare data for encoding, the createNewKeyPair() method should be called.
     * This method returns an instance of \TYPO3\CMS\Rsaauth\Keypair class, which contains
     * the private and public keys. Public key is sent to the client to encode data.
     * Private key should be stored somewhere (preferably in user's session).
     *
     * To decode data, the decrypt() method should be called with the private key
     * created at the previous step and the data to decode. If the data is decoded
     * successfully, the result is a string. Otherwise it is NULL.
     */
    abstract class AbstractBackend {
        /**
         * Error message for the last operation. Derived classes should always set
         * or clear this variable inside the createNewKeyPair() or decypt().
         *
         * @var string
         */
        protected $error;

        /**
         * Creates a new key pair for the encryption or gets the existing key pair (if one already has been generated).
         *
         * There should only be one key pair per request because the second private key would overwrites the first private
         * key. So the submitting the form with the first public key would not work anymore.
         *
         * @return \TYPO3\CMS\Rsaauth\Keypair|null a key pair or NULL in case of error
         */
        abstract public function createNewKeyPair() ;
        abstract public function decrypt($privateKey, $data) ;
        /**
         * Checks if this backend is available for calling.
         *
         * @return bool
         */
        abstract public function isAvailable() ;
        /**
         * Retrieves an error message.
         *
         * @return string An error message or empty string if there were no error
         */
        public function getLastError() {}
    }

    /**
     * This class contains a PHP OpenSSL backend for the TYPO3 RSA authentication
     * service. See class \TYPO3\CMS\Rsaauth\Backend\AbstractBackend for the information on using
     * backends.
     */
    class PhpBackend extends \typo3\cms\rsaauth\backend\abstractbackend {
        /**
         * Creates a new key pair for the encryption or gets the existing key pair (if one already has been generated).
         *
         * There should only be one key pair per request because the second private key would overwrites the first private
         * key. So the submitting the form with the first public key would not work anymore.
         *
         * @return \TYPO3\CMS\Rsaauth\Keypair|null a key pair or NULL in case of error
         */
        public function createNewKeyPair() {}
        public function decrypt($privateKey, $data) {}
        /**
         * Checks if this backend is available for calling. In particular checks if
         * PHP OpenSSl extension is installed and functional.
         *
         * @return bool
         * @see \TYPO3\CMS\Rsaauth\Backend\AbstractBackend::isAvailable()
         */
        public function isAvailable() {}
        protected function extractExponent($data) {}
        protected function extractPublicKeyModulus($data) {}
    }

}

namespace TYPO3\CMS\Rsaauth\Storage {
    /**
     * This class contains a session-based storage for private keys. This storage
     * is not secure enough because its implementation stores keys completely in the
     * PHP sessions. PHP sessions usually store data in the file system and it is
     * easy to extract. This storage is useful only as an example. It is better to
     * use "split" storage for keys.
     */
    class SessionStorage extends \typo3\cms\rsaauth\storage\abstractstorage {
        /**
         * Creates an instance of this class. It checks and initializes PHP
         * sessions if necessary.
         */
        public function __construct() {}
        /**
         * Obtains key from the session
         *
         * @return string The key or NULL
         * @see \TYPO3\CMS\Rsaauth\Storage\AbstractStorage::get()
         */
        public function get() {}
        public function put($key) {}
    }

    /**
     * This class contains a "split" storage for the data. It keeps part of the data
     * in the database, part in the session.
     */
    class SplitStorage extends \typo3\cms\rsaauth\storage\abstractstorage {
        /**
         * Creates an instance of this class. It checks and initializes PHP
         * sessions if necessary.
         */
        public function __construct() {}
        /**
         * Obtains a key from the database
         *
         * @return string The key or NULL
         * @see \TYPO3\CMS\Rsaauth\Storage\AbstractStorage::get()
         */
        public function get() {}
        public function put($key) {}
        /**
         * Remove expired keys (more than 30 minutes old).
         *
         * @return int The number of expired keys that have been removed
         */
        protected function removeExpiredKeys() : int {}
    }

    /**
     * This class contains the abstract storage for the RSA private keys
     */
    abstract class AbstractStorage {
        /**
         * Retrieves the key from the storage
         *
         * @return string The key or NULL
         */
        abstract public function get() ;
        abstract public function put($key) ;
    }

    /**
     * This class contains a factory for the RSA backends.
     */
    class StorageFactory {
        /**
         * A list of all available storages. Currently this list cannot be extended.
         * This is for security reasons to avoid inserting some dummy storage to
         * the list.
         *
         * @var string
         */
        static protected $preferredStorage;
        /**
         * An instance of the storage. This member is set in the getStorage() function.
         * It will not be an abstract storage as shown below but a real class, which is
         * derived from the \TYPO3\CMS\Rsaauth\Storage\AbstractStorage.
         *
         * <!-- Please, keep the variable type! It helps IDEs to provide autocomplete! -->
         *
         * @var \TYPO3\CMS\Rsaauth\Storage\AbstractStorage
         */
        static protected $storageInstance;

        /**
         * Obtains a storage. This function will return a non-abstract class, which
         * is derived from \TYPO3\CMS\Rsaauth\Storage\AbstractStorage. Applications should
         * not use any methods that are not declared in the \TYPO3\CMS\Rsaauth\Storage\AbstractStorage.
         *
         * @return \TYPO3\CMS\Rsaauth\Storage\AbstractStorage A storage
         */
        public static function getStorage() {}
        public static function setPreferredStorage($preferredStorage) {}
    }

}

namespace TYPO3\CMS\Rsaauth\Controller {
    /**
     * eID script "RsaPublicKeyGenerationController" to generate an rsa key
     */
    class RsaPublicKeyGenerationController {
/** @var \TYPO3\CMS\Rsaauth\Backend\AbstractBackend $backend */
        public function processRequest(/** @var \TYPO3\CMS\Rsaauth\Backend\AbstractBackend $backend */
ServerRequestInterface $request, /** @var \TYPO3\CMS\Rsaauth\Backend\AbstractBackend $backend */
ResponseInterface $response) {}
    }

}

namespace TYPO3\CMS\Rsaauth\Slot {
    /**
     * Class UsernamePasswordProviderSlot
     */
    class UsernamePasswordProviderSlot {
        public function getPageRenderer(PageRenderer $pageRenderer) {}
    }

}

namespace TYPO3\CMS\Rsaauth\Hook {
    /**
     * This class provides a hook to the login form to add extra javascript code
     * and supply a proper form tag.
     */
    class UserSetupHook {
        /**
         * @var RsaEncryptionDecoder
         */
        protected $rsaEncryptionDecoder;

        public function decryptPassword(array $parameters) {}
        public function getLoginScripts(array $parameters, SetupModuleController $userSetupObject) {}
        /**
         * Rsa is available if loginSecurityLevel is set and rsa backend is working.
         *
         * @return bool
         */
        protected function isRsaAvailable() {}
        /**
         * @return RsaEncryptionDecoder
         */
        protected function getRsaEncryptionDecoder() {}
    }

    /**
     * Class that hooks into DataHandler and decrypts rsa encrypted data
     */
    class DecryptionHook {
        public function processDatamap_preProcessFieldArray($incomingFieldArray, $table, $id, $parentObject) {}
    }

    /**
     * This class contains a hook to implement RSA authentication for the TYPO3
     * Frontend. Warning: felogin must be USER_INT for this to work!
     */
    class FrontendLoginHook {
        /** @var RsaEncryptionEncoder $rsaEncryptionEncoder */
        public function loginFormHook() {}
    }

}

namespace TYPO3\CMS\Rsaauth\Tests\Unit {
    /**
     * Test case.
     */
    class KeypairTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Keypair
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function classIsSingleton() {}
        /**
         * @test
         */
        public function getExponentInitiallyReturnsZero() {}
        /**
         * @test
         */
        public function setExponentSetsExponent() {}
        /**
         * @test
         */
        public function setExponentCalledTwoTimesThrowsException() {}
        /**
         * @test
         */
        public function getPrivateKeyInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setPrivateKeySetsPrivateKey() {}
        /**
         * @test
         */
        public function setPrivateKeyCalledTwoTimesThrowsException() {}
        /**
         * @test
         */
        public function getPublicKeyModulusInitiallyReturnsZero() {}
        /**
         * @test
         */
        public function setPublicKeySetsPublicKeyModulus() {}
        /**
         * @test
         */
        public function setPublicKeyCalledTwoTimesThrowsException() {}
        /**
         * @test
         */
        public function isReadyForExponentSetAndPrivateKeySetAndPublicKeyModulusSetReturnsTrue() {}
        /**
         * @test
         */
        public function isReadyForNothingSetReturnsFalse() {}
        /**
         * @test
         */
        public function isReadyForExponentSetAndPrivateKeySetAndPublicKeyModulusMissingReturnsFalse() {}
        /**
         * @test
         */
        public function isReadyForExponentSetAndPrivateMissingSetAndPublicKeyModulusSetReturnsFalse() {}
        /**
         * @test
         */
        public function isReadyForExponentMissingAndPrivateKeySetAndPublicKeyModulusSetReturnsFalse() {}
    }

}

namespace TYPO3\CMS\Rsaauth\Tests\Unit\Backend {
    /**
     * Test case.
     */
    class PhpBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var PhpBackend
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function createNewKeyPairCreatesReadyKeyPair() {}
        /**
         * @test
         */
        public function createNewKeyPairCalledTwoTimesReturnsSameKeyPairInstance() {}
    }

    /**
     * Test case.
     */
    class CommandLineBackendTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var CommandLineBackend
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function createNewKeyPairCreatesReadyKeyPair() {}
        /**
         * @test
         */
        public function createNewKeyPairCreatesKeyPairWithDefaultExponent() {}
        /**
         * @test
         */
        public function createNewKeyPairCalledTwoTimesReturnsSameKeyPairInstance() {}
    }

}

namespace TYPO3\CMS\Rsaauth\Tests\Functional\Storage {
    /**
     * Test case.
     */
    class SplitStorageTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * XML database fixtures to be loaded into database.
         *
         * @var array
         */
        protected $xmlDatabaseFixtures;
        /**
         * Core extensions to load
         *
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var SplitStorage
         */
        protected $subject;
        /**
         * @var string
         */
        protected $testKey;
        /**
         * @var string
         */
        protected $testKeyLeftPart;
        /**
         * @var string
         */
        protected $testKeyRightPart;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getReturnsKeyFromDatabase() {}
        /**
         * @test
         */
        public function putInsertsKeyIntoDatabase() {}
        /**
         * @test
         */
        public function getDeletesKeysOlderThan30Minutes() {}
        /**
         * @test
         */
        public function putDeletesKeysOlderThan30Minutes() {}
        /**
         * @test
         */
        public function putDeletesCurrentKeyIfNullIsGiven() {}
    }

}

namespace TYPO3\CMS\Frontend {
    /**
     * A generic Frontend exception
     */
    class Exception extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Frontend\Configuration\TypoScript\ConditionMatching {
    /**
     * Matching TypoScript conditions for frontend disposal.
     *
     * Used with the TypoScript parser. Matches browserinfo
     * and IP numbers for use with templates.
     */
    class ConditionMatcher extends \typo3\cms\core\configuration\typoscript\conditionmatching\abstractconditionmatcher {
        protected function evaluateCondition($string) {}
        protected function getVariable($var) {}
        /**
         * Get the usergroup list of the current user.
         *
         * @return string The usergroup list of the current user
         */
        protected function getGroupList() {}
        /**
         * Determines the current page Id.
         *
         * @return int The current page Id
         */
        protected function determinePageId() {}
        /**
         * Gets the properties for the current page.
         *
         * @return array The properties for the current page.
         */
        protected function getPage() {}
        /**
         * Determines the rootline for the current page.
         *
         * @return array The rootline for the current page.
         */
        protected function determineRootline() {}
        /**
         * Get the id of the current user.
         *
         * @return int The id of the current user
         */
        protected function getUserId() {}
        /**
         * Determines if a user is logged in.
         *
         * @return bool Determines if a user is logged in
         */
        protected function isUserLoggedIn() {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

}

namespace TYPO3\CMS\Frontend\Page {
    /**
     * Logic for cHash calculation
     */
    class CacheHashCalculator implements \typo3\cms\core\singletoninterface {
        /**
         * @var array Parameters that are relevant for cacheHash calculation. Optional.
         */
        protected $cachedParametersWhiteList;
        /**
         * @var array Parameters that are not relevant for cacheHash calculation.
         */
        protected $excludedParameters;
        /**
         * @var array Parameters that forces a presence of a valid cacheHash.
         */
        protected $requireCacheHashPresenceParameters;
        /**
         * @var array Parameters that need a value to be relevant for cacheHash calculation
         */
        protected $excludedParametersIfEmpty;
        /**
         * @var bool Whether to exclude all empty parameters for cacheHash calculation
         */
        protected $excludeAllEmptyParameters;

        /**
         * Initialise class properties by using the relevant TYPO3 configuration
         */
        public function __construct() {}
        public function calculateCacheHash(array $params) {}
        public function generateForParameters($queryString) {}
        public function doParametersRequireCacheHash($queryString) {}
        public function getRelevantParameters($queryString) {}
        protected function splitQueryStringToArray($queryString) {}
        protected function isAdminPanelParameter($key) {}
        protected function isCoreParameter($key) {}
        protected function isExcludedParameter($key) {}
        protected function isInCachedParametersWhiteList($key) {}
        /**
         * Checks whether cachedParametersWhiteList parameters are configured
         *
         * @return bool
         */
        protected function hasCachedParametersWhiteList() {}
        protected function isAllowedWithEmptyValue($key) {}
        public function setConfiguration(array $configuration) {}
        protected function setCachedParametersWhiteList(array $cachedParametersWhiteList) {}
        protected function setExcludeAllEmptyParameters($excludeAllEmptyParameters) {}
        protected function setExcludedParameters(array $excludedParameters) {}
        protected function setExcludedParametersIfEmpty(array $excludedParametersIfEmpty) {}
        protected function setRequireCacheHashPresenceParameters(array $requireCacheHashPresenceParameters) {}
    }

    /**
     * Handles the redirection for external URL pages.
     */
    class ExternalPageUrlHandler implements \typo3\cms\frontend\http\urlhandlerinterface {
        /**
         * @var string
         */
        protected $externalUrl;

        /**
         * Checks if external URLs are enabled and if the current page points to an external URL.
         *
         * @return bool
         */
        public function canHandleCurrentUrl() {}
        /**
         * Redirects the user to the detected external URL.
         */
        public function handle() {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

    /**
     * Page functions, a lot of sql/pages-related functions
     *
     * Mainly used in the frontend but also in some cases in the backend. It's
     * important to set the right $where_hid_del in the object so that the
     * functions operate properly
     * @see \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController::fetch_the_id()
     */
    class PageRepository implements \psr\log\loggerawareinterface {
    use \typo3\cms\core\compatibility\publicpropertydeprecationtrait, \psr\log\loggerawaretrait;

        const DOKTYPE_BE_USER_SECTION = 6;
        const DOKTYPE_MOUNTPOINT = 7;
        const DOKTYPE_LINK = 3;
        const DOKTYPE_SHORTCUT = 4;
        const DOKTYPE_RECYCLER = 255;
        const SHORTCUT_MODE_NONE = 0;
        const DOKTYPE_SPACER = 199;
        const DOKTYPE_SYSFOLDER = 254;
        const SHORTCUT_MODE_PARENT_PAGE = 3;
        const SHORTCUT_MODE_FIRST_SUBPAGE = 1;
        const SHORTCUT_MODE_RANDOM_SUBPAGE = 2;
        const DOKTYPE_DEFAULT = 1;

        /**
         * List of all deprecated public properties
         * @var array
         */
        protected $deprecatedPublicProperties;
        /**
         * This is not the final clauses. There will normally be conditions for the
         * hidden, starttime and endtime fields as well. You MUST initialize the object
         * by the init() function
         *
         * @var string
         */
        public $where_hid_del;
        /**
         * Clause for fe_group access
         *
         * @var string
         */
        public $where_groupAccess;
        /**
         * @var int
         */
        public $sys_language_uid;
        /**
         * If TRUE, versioning preview of other record versions is allowed. THIS MUST
         * ONLY BE SET IF the page is not cached and truly previewed by a backend
         * user!!!
         *
         * @var bool
         */
        public $versioningPreview;
        /**
         * Workspace ID for preview
         *
         * @var int
         */
        public $versioningWorkspaceId;
        /**
         * @var array
         */
        protected $workspaceCache;
        /**
         * Error string set by getRootLine()
         *
         * @var string
         */
        protected $error_getRootLine;
        /**
         * Error uid set by getRootLine()
         *
         * @var int
         */
        protected $error_getRootLine_failPid;
        /**
         * @var array
         */
        protected $cache_getPage;
        /**
         * @var array
         */
        protected $cache_getPage_noCheck;
        /**
         * @var array
         */
        protected $cache_getPageIdFromAlias;
        /**
         * @var array
         */
        protected $cache_getMountPointInfo;
        /**
         * @var array
         */
        protected $tableNamesAllowedOnRootLevel;
        /**
         * Computed properties that are added to database rows.
         *
         * @var array
         */
        protected $computedPropertyNames;

        public function init($show_hidden) {}
        public function getPage($uid, $disableGroupAccessCheck = false) {}
        public function getPage_noCheck($uid) {}
        public function getFirstWebPage($uid) {}
        public function getPageIdFromAlias($alias) {}
        public function getPageOverlay($pageInput, $lUid = -1) {}
        public function getPagesOverlay(array $pagesInput, $lUid = -1) {}
        public function getRecordOverlay($table, $row, $sys_language_content, $OLmode = '') {}
        public function getMenu($pageId, $fields = '*', $sortField = 'sorting', $additionalWhereClause = '', $checkShortcuts = true) {}
        public function getMenuForPages(array $pageIds, $fields = '*', $sortField = 'sorting', $additionalWhereClause = '', $checkShortcuts = true) {}
        protected function getSubpagesForPages(array $pageIds, $fields = '*', $sortField = 'sorting', $additionalWhereClause = '', $checkShortcuts = true, $parentPages = true) {}
        protected function addMountPointParameterToPage(array $page) : array {}
        protected function checkValidShortcutOfPage(array $page, $additionalWhereClause) {}
        public function getDomainStartPage($domain, $path = '', $request_uri = '') {}
/** @see \TYPO3\CMS\Core\Utility\RootlineUtility::getRecordArray */
        public function getRootLine(/** @see \TYPO3\CMS\Core\Utility\RootlineUtility::getRecordArray */
$uid, /** @see \TYPO3\CMS\Core\Utility\RootlineUtility::getRecordArray */
$MP = '', /** @see \TYPO3\CMS\Core\Utility\RootlineUtility::getRecordArray */
$ignoreMPerrors = false) {}
        public function getExtURL($pagerow) {}
        public function getMountPointInfo($pageId, $pageRec = false, $prevMountPids = [ ], $firstPageUid = 0) {}
        public function checkRecord($table, $uid, $checkPage = 0) {}
        public function getRawRecord($table, $uid, $fields = '*', $noWSOL = null) {}
        public function getRecordsByField($theTable, $theField, $theValue, $whereClause = '', $groupBy = '', $orderBy = '', $limit = '') {}
        public function deleteClause($table) {}
        public function enableFields($table, $show_hidden = -1, $ignore_array = [ ], $noVersionPreview = false) {}
        public function getMultipleGroupsWhereClause($field, $table) {}
        public function fixVersioningPid($table, $rr) {}
/** @var \TYPO3\CMS\Core\Versioning\VersionState $versionState */
        public function versionOL(/** @var \TYPO3\CMS\Core\Versioning\VersionState $versionState */
$table, /** @var \TYPO3\CMS\Core\Versioning\VersionState $versionState */
$row, /** @var \TYPO3\CMS\Core\Versioning\VersionState $versionState */
$unsetMovePointers = false, /** @var \TYPO3\CMS\Core\Versioning\VersionState $versionState */
$bypassEnableFieldsCheck = false) {}
        public function movePlhOL($table, $row) {}
        public function getMovePlaceholder($table, $uid, $fields = '*') {}
        public function getWorkspaceVersionOfRecord($workspace, $table, $uid, $fields = '*', $bypassEnableFieldsCheck = false) {}
        public function checkWorkspaceAccess($wsid) {}
/**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
        public function getFileReferences(/**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
$tableName, /**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
$fieldName, /**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
array $element) {}
        protected function purgeComputedProperties(array $row) {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Class for starting TypoScript page generation
     *
     * The class is not instantiated as an objects but called directly with the "::" operator.
     */
    class PageGenerator {
        const NO_PAGE_TITLE = 2;

        /** @var TimeTracker $timeTracker */
        public static function renderContent() {}
/** @var TimeTracker $timeTracker */
        public static function renderContentWithHeader(/** @var TimeTracker $timeTracker */
$pageContent) {}
        protected static function stripIntObjectPlaceholder($searchString, $intObjects) {}
        public static function inline2TempFile($str, $ext) {}
        public static function isAllowedLinkVarValue($haystack, $needle) {}
        /**
         * Generate title for page.
         * Takes the settings [config][noPageTitle], [config][pageTitleFirst], [config][titleTagFunction]
         * [config][pageTitleSeparator] and [config][noPageTitle] into account.
         * Furthermore $GLOBALS[TSFE]->altPageTitle is observed.
         *
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10.0, as TSFE->generatePageTitle() should be used instead.
         */
        public static function generatePageTitle() {}
/** @var TypoScriptService $typoScriptService */
        protected static function generateMetaTagHtml(/** @var TypoScriptService $typoScriptService */
array $metaTagTypoScript, /** @var TypoScriptService $typoScriptService */
ContentObjectRenderer $cObj) {}
        /**
         * @return PageRenderer
         */
        protected static function getPageRenderer() {}
        protected static function addCssToPageRenderer($cssStyles, $excludeFromConcatenation = false, $inlineBlockName = 'TSFEinlineStyle') {}
    }


    /**
     * Interface for classes which hook into pageSelect and do additional getPage processing
     */
    interface PageRepositoryInitHookInterface {
        function init_postProcess(PageRepository $parentObject) ;
    }

    /**
     * Interface for classes which hook into pageSelect and do additional getPage processing
     */
    interface PageRepositoryGetPageHookInterface {
        function getPage_preProcess($uid, $disableGroupAccessCheck, PageRepository $parentObject) ;
    }

    /**
     * Interface for classes which hook into \TYPO3\CMS\Frontend\Page\PageRepository
     */
    interface PageRepositoryGetPageOverlayHookInterface {
        function getPageOverlay_preProcess($pageInput, $lUid, PageRepository $parent) ;
    }

    /**
     * Interface for classes which hook into \TYPO3\CMS\Frontend\Page\PageRepository
     */
    interface PageRepositoryGetRecordOverlayHookInterface {
        function getRecordOverlay_preProcess($table, $row, $sys_language_content, $OLmode, PageRepository $parent) ;
        function getRecordOverlay_postProcess($table, $row, $sys_language_content, $OLmode, PageRepository $parent) ;
    }

}

namespace TYPO3\CMS\Frontend\Category\Collection {
    /**
     * Extend category collection for the frontend, to collect related records
     * while respecting language, enable fields, etc.
     */
    class CategoryCollection extends \typo3\cms\core\category\collection\categorycollection {
/** @var $collection \TYPO3\CMS\Frontend\Category\Collection\CategoryCollection */
        public static function create(/** @var $collection \TYPO3\CMS\Frontend\Category\Collection\CategoryCollection */
array $collectionRecord, /** @var $collection \TYPO3\CMS\Frontend\Category\Collection\CategoryCollection */
$fillItems = false) {}
        public static function load($id, $fillItems = false, $tableName = '', $fieldName = '') {}
        /**
         * Gets the collected records in this collection, by
         * looking up the MM relations of this record to the
         * table name defined in the local field 'table_name'.
         *
         * Overrides its parent method to implement usage of language,
         * enable fields, etc. Also performs overlays.
         *
         * @return array
         */
        protected function getCollectedRecords() {}
        /**
         * Gets the TSFE object.
         *
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected static function getTypoScriptFrontendController() {}
    }

}

namespace TYPO3\CMS\Frontend\Typolink {
    /**
     * Builds a TypoLink to an email address
     */
    class EmailLinkBuilder extends \typo3\cms\frontend\typolink\abstracttypolinkbuilder {
        public function build(array $linkDetails, string $linkText, string $target, array $conf) : array {}
    }

    /**
     * Abstract class to provide proper helper for most types necessary
     * Hands in the contentobject which is needed here for all the stdWrap magic.
     */
    abstract class AbstractTypolinkBuilder {
        /**
         * @var ContentObjectRenderer
         */
        protected $contentObjectRenderer;

        public function __construct(ContentObjectRenderer $contentObjectRenderer) {}
        abstract public function build(array $linkDetails, string $linkText, string $target, array $conf) : array ;
        protected function forceAbsoluteUrl(string $url, array $configuration) : string {}
        protected function parseFallbackLinkTextIfLinkTextIsEmpty(string $originalLinkText, string $fallbackLinkText) : string {}
        protected function resolveTargetAttribute(array $conf, string $name, bool $respectFrameSetOption = false, string $fallbackTarget = '') : string {}
/** @var UrlProcessorInterface $urlProcessor */
        protected function processUrl(/** @var UrlProcessorInterface $urlProcessor */
string $context, /** @var UrlProcessorInterface $urlProcessor */
string $url, /** @var UrlProcessorInterface $urlProcessor */
array $typolinkConfiguration = [ ]) {}
        /**
         * @return TypoScriptFrontendController
         */
        public function getTypoScriptFrontendController() : TypoScriptFrontendController {}
    }

    /**
     * Builds a TypoLink to a file (relative to fileadmin/ or something)
     * or otherwise detects as an external URL
     */
    class LegacyLinkBuilder extends \typo3\cms\frontend\typolink\abstracttypolinkbuilder {
        public function build(array $linkDetails, string $linkText, string $target, array $conf) : array {}
    }

    /**
     * Builds a TypoLink to a folder or file
     */
    class FileOrFolderLinkBuilder extends \typo3\cms\frontend\typolink\abstracttypolinkbuilder {
        public function build(array $linkDetails, string $linkText, string $target, array $conf) : array {}
    }

    /**
     * Builds a TypoLink to an external URL
     */
    class ExternalUrlLinkBuilder extends \typo3\cms\frontend\typolink\abstracttypolinkbuilder {
        public function build(array $linkDetails, string $linkText, string $target, array $conf) : array {}
    }

    /**
     * Builds a TypoLink to a certain page
     */
    class PageLinkBuilder extends \typo3\cms\frontend\typolink\abstracttypolinkbuilder {
/** @var $hookObject TypolinkModifyLinkConfigForPageLinksHookInterface */
        public function build(/** @var $hookObject TypolinkModifyLinkConfigForPageLinksHookInterface */
array $linkDetails, /** @var $hookObject TypolinkModifyLinkConfigForPageLinksHookInterface */
string $linkText, /** @var $hookObject TypolinkModifyLinkConfigForPageLinksHookInterface */
string $target, /** @var $hookObject TypolinkModifyLinkConfigForPageLinksHookInterface */
array $conf) : array {}
        protected function getClosestMountPointValueForPage($pageId) {}
    }

    /**
     * Exception which is thrown when a link could not be set
     */
    class UnableToLinkException extends \typo3\cms\frontend\exception {
        /**
         * @var string the text which should have gone inside the
         */
        protected $linkText;

        public function __construct($message = '', $code = 0, \Throwable $previous = null, $linkText = null) {}
        /**
         * Returns the link text when the link could not been set
         *
         * @return string
         */
        public function getLinkText() : string {}
    }

    /**
     * Builds a TypoLink to a database record
     */
    class DatabaseRecordLinkBuilder extends \typo3\cms\frontend\typolink\abstracttypolinkbuilder {
        public function build(array $linkDetails, string $linkText, string $target, array $conf) : array {}
    }

}

namespace TYPO3\CMS\Frontend\DataProcessing {
    /**
     * This data processor can be used for processing data for record which contain
     * relations to sys_file records (e.g. sys_file_reference records) or for fetching
     * files directly from UIDs or from folders or collections.
     *
     *
     * Example TypoScript configuration:
     *
     * 10 = TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
     * 10 {
     *   references.fieldName = image
     *   collections = 13,15
     *   as = myfiles
     * }
     *
     * whereas "myfiles" can further be used as a variable {myfiles} inside a Fluid template for iteration.
     */
    class FilesProcessor implements \typo3\cms\frontend\contentobject\dataprocessorinterface {
/** @var FileCollector $fileCollector */
        public function process(/** @var FileCollector $fileCollector */
ContentObjectRenderer $cObj, /** @var FileCollector $fileCollector */
array $contentObjectConfiguration, /** @var FileCollector $fileCollector */
array $processorConfiguration, /** @var FileCollector $fileCollector */
array $processedData) {}
    }

    /**
     * This data processor will take field data formatted as a string, where each line, separated by line feed,
     * represents a row. By default columns are separated by the delimiter character "comma ,",
     * and can be enclosed by the character 'quotation mark "', like the default in a regular CSV file.
     *
     * An example of such a field is "bodytext" in the CType "table".
     *
     * The table data is transformed to a multi dimensional array, taking the delimiter and enclosure into account,
     * before it is passed to the view.
     *
     * Example field data:
     *
     * This is row 1 column 1|This is row 1 column 2|This is row 1 column 3
     * This is row 2 column 1|This is row 2 column 2|This is row 2 column 3
     * This is row 3 column 1|This is row 3 column 2|This is row 3 column 3
     *
     * Example TypoScript configuration:
     *
     * 10 = TYPO3\CMS\Frontend\ContentObject\DataProcessing\CommaSeparatedValueProcessor
     * 10 {
     *   if.isTrue.field = bodytext
     *   fieldName = bodytext
     *   fieldDelimiter = |
     *   fieldEnclosure =
     *   maximumColumns = 2
     *   as = table
     * }
     *
     * whereas "table" can be used as a variable {table} inside Fluid for iteration.
     *
     * Using maximumColumns limits the amount of columns in the multi dimensional array.
     * In the example, field data of the last column will be stripped off.
     *
     * Multi line cells are taken into account.
     */
    class CommaSeparatedValueProcessor implements \typo3\cms\frontend\contentobject\dataprocessorinterface {
        public function process(ContentObjectRenderer $cObj, array $contentObjectConfiguration, array $processorConfiguration, array $processedData) {}
    }

    /**
     * This data processor can be used for processing data for the content elements which have split contents in one field
     * like e.g. "bullets". It will split the field data in an array ready to be iterated over in Fluid.
     *
     * Example field data:
     *
     * This is bullet 1, This is bullet 2, This is bullet 3
     *
     * Example TypoScript configuration:
     *
     * 10 = TYPO3\CMS\Frontend\DataProcessing\SplitProcessor
     * 10 {
     *   if.isTrue.field = bodytext
     *   delimiter = ,
     *   fieldName = bodytext
     *   removeEmptyEntries = 1
     *   filterIntegers = 1
     *   filterUnique = 1
     *   as = bullets
     * }
     *
     * whereas "bullets" can be used as a variable {bullets} inside Fluid for iteration.
     */
    class SplitProcessor implements \typo3\cms\frontend\contentobject\dataprocessorinterface {
        public function process(ContentObjectRenderer $cObj, array $contentObjectConfiguration, array $processorConfiguration, array $processedData) {}
    }

    /**
     * This menu processor utilizes HMENU to generate a json encoded menu
     * string that will be decoded again and assigned to FLUIDTEMPLATE as
     * variable. Additional DataProcessing is supported and will be applied
     * to each record.
     *
     * Options:
     * as - The variable to be used within the result
     * levels - Number of levels of the menu
     * expandAll = If false, submenus will only render if the parent page is active
     * includeSpacer = If true, pagetype spacer will be included in the menu
     * titleField = Field that should be used for the title
     *
     * See HMENU docs for more options.
     * https://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Hmenu/Index.html
     *
     *
     * Example TypoScript configuration:
     *
     * 10 = TYPO3\CMS\Frontend\DataProcessing\MenuProcessor
     * 10 {
     *   special = list
     *   special.value.field = pages
     *   levels = 7
     *   as = menu
     *   expandAll = 1
     *   includeSpacer = 1
     *   titleField = nav_title // title
     *   dataProcessing {
     *     10 = TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
     *     10 {
     *        references.fieldName = media
     *     }
     *   }
     * }
     */
    class MenuProcessor implements \typo3\cms\frontend\contentobject\dataprocessorinterface {
        const LINK_PLACEHOLDER = '###LINKPLACEHOLDER###';
        const TARGET_PLACEHOLDER = '###TARGETPLACEHOLDER###';

        /**
         * The content object renderer
         *
         * @var ContentObjectRenderer
         */
        public $cObj;
        /**
         * The processor configuration
         *
         * @var array
         */
        protected $processorConfiguration;
        /**
         * Allowed configuration keys for menu generation, other keys
         * will throw an exception to prevent configuration errors.
         *
         * @var array
         */
        public $allowedConfigurationKeys;
        /**
         * Remove keys from configuration that should not be passed
         * to HMENU to prevent configuration errors
         *
         * @var array
         */
        public $removeConfigurationKeysForHmenu;
        /**
         * @var array
         */
        protected $menuConfig;
        /**
         * @var array
         */
        protected $menuLevelConfig;
        /**
         * @var array
         */
        public $menuDefaults;
        /**
         * @var int
         */
        protected $menuLevels;
        /**
         * @var int
         */
        protected $menuExpandAll;
        /**
         * @var int
         */
        protected $menuIncludeSpacer;
        /**
         * @var string
         */
        protected $menuTitleField;
        /**
         * @var string
         */
        protected $menuAlternativeSortingField;
        /**
         * @var string
         */
        protected $menuTargetVariableName;
        /**
         * @var ContentDataProcessor
         */
        protected $contentDataProcessor;

        /**
         * Constructor
         */
        public function __construct() {}
        protected function getConfigurationValue($key) {}
        /**
         * Validate configuration
         *
         * @throws \InvalidArgumentException
         */
        public function validateConfiguration() {}
        /**
         * Prepare Configuration
         */
        public function prepareConfiguration() {}
        /**
         * Prepare configuration for a certain menu level in the hierarchy
         */
        public function prepareLevelConfiguration() {}
        /**
         * Prepare the configuration when rendering a language menu
         */
        public function prepareLevelLanguageConfiguration() {}
        /**
         * Build the menu configuration so it can be treated by HMENU cObject
         */
        public function buildConfiguration() {}
        public function process(ContentObjectRenderer $cObj, array $contentObjectConfiguration, array $processorConfiguration, array $processedData) {}
/** @var ContentObjectRenderer $recordContentObjectRenderer */
        protected function processAdditionalDataProcessors(/** @var ContentObjectRenderer $recordContentObjectRenderer */
$page, /** @var ContentObjectRenderer $recordContentObjectRenderer */
$processorConfiguration) {}
        /**
         * Gets the data of the current record in JSON format
         *
         * @return string JSON encoded data
         */
        public function getDataAsJson() {}
        public function jsonEncodeUserFunc($content, $conf) {}
        public function jsonEncode($value) {}
        public function replacePlaceholderInRenderedMenuItem($menuItem, $conf) {}
    }

    /**
     * Fetch records from the database, using the default .select syntax from TypoScript.
     *
     * This way, e.g. a FLUIDTEMPLATE cObject can iterate over the array of records.
     *
     * Example TypoScript configuration:
     *
     * 10 = TYPO3\CMS\Frontend\DataProcessing\DatabaseQueryProcessor
     * 10 {
     *   table = tt_address
     *   pidInList = 123
     *   where = company="Acme" AND first_name="Ralph"
     *   order = RAND()
     *   as = addresses
     *   dataProcessing {
     *     10 = TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
     *     10 {
     *       references.fieldName = image
     *     }
     *   }
     * }
     *
     * where "as" means the variable to be containing the result-set from the DB query.
     */
    class DatabaseQueryProcessor implements \typo3\cms\frontend\contentobject\dataprocessorinterface {
        /**
         * @var ContentDataProcessor
         */
        protected $contentDataProcessor;

        /**
         * Constructor
         */
        public function __construct() {}
/** @var ContentObjectRenderer $recordContentObjectRenderer */
        public function process(/** @var ContentObjectRenderer $recordContentObjectRenderer */
ContentObjectRenderer $cObj, /** @var ContentObjectRenderer $recordContentObjectRenderer */
array $contentObjectConfiguration, /** @var ContentObjectRenderer $recordContentObjectRenderer */
array $processorConfiguration, /** @var ContentObjectRenderer $recordContentObjectRenderer */
array $processedData) {}
    }

    /**
     * This data processor will calculate rows, columns and dimensions for a gallery
     * based on several settings and can be used for f.i. the CType "textmedia"
     *
     * The output will be an array which contains the rows and columns,
     * including the file references and the calculated width and height for each media element,
     * but also some more information of the gallery, like position, width and counters
     *
     * Example TypoScript configuration:
     *
     * 10 = TYPO3\CMS\Frontend\DataProcessing\GalleryProcessor
     * 10 {
     *   filesProcessedDataKey = files
     *   mediaOrientation.field = imageorient
     *   numberOfColumns.field = imagecols
     *   equalMediaHeight.field = imageheight
     *   equalMediaWidth.field = imagewidth
     *   columnSpacing = 0
     *   borderEnabled.field = imageborder
     *   borderPadding = 0
     *   borderWidth = 0
     *   maxGalleryWidth = {$styles.content.mediatext.maxW}
     *   maxGalleryWidthInText = {$styles.content.mediatext.maxWInText}
     *   as = gallery
     * }
     *
     * Output example:
     *
     * gallery {
     *   position {
     *     horizontal = center
     *     vertical = above
     *     noWrap = FALSE
     *   }
     *   width = 600
     *   count {
     *     files = 2
     *     columns = 1
     *     rows = 2
     *   }
     *   rows {
     *     1 {
     *       columns {
     *         1 {
     *           media = TYPO3\CMS\Core\Resource\FileReference
     *           dimensions {
     *             width = 600
     *             height = 400
     *           }
     *         }
     *       }
     *     }
     *     2 {
     *       columns {
     *         1 {
     *           media = TYPO3\CMS\Core\Resource\FileReference
     *           dimensions {
     *             width = 600
     *             height = 400
     *           }
     *         }
     *       }
     *     }
     *   }
     *   columnSpacing = 0
     *   border {
     *     enabled = FALSE
     *     width = 0
     *     padding = 0
     *   }
     * }
     */
    class GalleryProcessor implements \typo3\cms\frontend\contentobject\dataprocessorinterface {
        /**
         * The content object renderer
         *
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        protected $contentObjectRenderer;
        /**
         * The processor configuration
         *
         * @var array
         */
        protected $processorConfiguration;
        /**
         * Matching the tt_content field towards the imageOrient option
         *
         * @var array
         */
        protected $availableGalleryPositions;
        /**
         * Storage for processed data
         *
         * @var array
         */
        protected $galleryData;
        /**
         * @var int
         */
        protected $numberOfColumns;
        /**
         * @var int
         */
        protected $mediaOrientation;
        /**
         * @var int
         */
        protected $maxGalleryWidth;
        /**
         * @var int
         */
        protected $maxGalleryWidthInText;
        /**
         * @var int
         */
        protected $equalMediaHeight;
        /**
         * @var int
         */
        protected $equalMediaWidth;
        /**
         * @var int
         */
        protected $columnSpacing;
        /**
         * @var bool
         */
        protected $borderEnabled;
        /**
         * @var int
         */
        protected $borderWidth;
        /**
         * @var int
         */
        protected $borderPadding;
        /**
         * @var string
         */
        protected $cropVariant;
        /**
         * The (filtered) media files to be used in the gallery
         *
         * @var FileInterface[]
         */
        protected $fileObjects;
        /**
         * The calculated dimensions for each media element
         *
         * @var array
         */
        protected $mediaDimensions;

        public function process(ContentObjectRenderer $cObj, array $contentObjectConfiguration, array $processorConfiguration, array $processedData) {}
        protected function getConfigurationValue($key, $dataArrayKey = null) {}
        /**
         * Define the gallery position
         *
         * Gallery has a horizontal and a vertical position towards the text
         * and a possible wrapping of the text around the gallery.
         */
        protected function determineGalleryPosition() {}
        /**
         * Get the gallery width based on vertical position
         */
        protected function determineMaximumGalleryWidth() {}
        /**
         * Calculate the amount of rows and columns
         */
        protected function calculateRowsAndColumns() {}
        /**
         * Calculate the width/height of the media elements
         *
         * Based on the width of the gallery, defined equal width or height by a user, the spacing between columns and
         * the use of a border, defined by user, where the border width and padding are taken into account
         *
         * File objects MUST already be filtered. They need a height and width to be shown in the gallery
         */
        protected function calculateMediaWidthsAndHeights() {}
        protected function getCroppedDimensionalProperty(FileInterface $fileObject, $dimensionalProperty) {}
        /**
         * Prepare the gallery data
         *
         * Make an array for rows, columns and configuration
         */
        protected function prepareGalleryData() {}
    }

}

namespace TYPO3\CMS\Frontend\Composer {
    /**
     * Hook into Composer build to generate TYPO3 frontend entry script
     */
    class InstallerScripts implements \typo3\cms\composer\plugin\core\installerscriptsregistration {
        public static function register(Event $event, ScriptDispatcher $scriptDispatcher) {}
    }

}

namespace TYPO3\CMS\Frontend\ContentObject {
    /**
     * Contains IMAGE class object.
     */
    class ImageContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
    }

    /**
     * Contains USER class object.
     */
    class UserContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
    }

    /**
     * Contains LOAD_REGISTER class object.
     */
    class LoadRegisterContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
    }

    /**
     * This class contains all main TypoScript features.
     * This includes the rendering of TypoScript content objects (cObjects).
     * Is the backbone of TypoScript Template rendering.
     *
     * There are lots of functions you can use from your include-scripts.
     * The class is normally instantiated and referred to as "cObj".
     * When you call your own PHP-code typically through a USER or USER_INT cObject then it is this class that instantiates the object and calls the main method. Before it does so it will set (if you are using classes) a reference to itself in the internal variable "cObj" of the object. Thus you can access all functions and data from this class by $this->cObj->... from within you classes written to be USER or USER_INT content objects.
     */
    class ContentObjectRenderer {
        const OBJECTTYPE_USER = 2;
        const OBJECTTYPE_USER_INT = 1;

        /**
         * @var array
         */
        public $align;
        /**
         * stdWrap functions in their correct order
         *
         * @see stdWrap()
         */
        public $stdWrapOrder;
        /**
         * Class names for accordant content object names
         *
         * @var array
         */
        protected $contentObjectClassMap;
        /**
         * Loaded with the current data-record.
         *
         * If the instance of this class is used to render records from the database those records are found in this array.
         * The function stdWrap has TypoScript properties that fetch field-data from this array.
         *
         * @var array
         * @see start()
         */
        public $data;
        /**
         * @var string
         */
        protected $table;
        /**
         * Used for backup
         *
         * @var array
         */
        public $oldData;
        /**
         * If this is set with an array before stdWrap, it's used instead of $this->data in the data-property in stdWrap
         *
         * @var string
         */
        public $alternativeData;
        /**
         * Used by the parseFunc function and is loaded with tag-parameters when parsing tags.
         *
         * @var array
         */
        public $parameters;
        /**
         * @var string
         */
        public $currentValKey;
        /**
         * This is set to the [table]:[uid] of the record delivered in the $data-array, if the cObjects CONTENT or RECORD is in operation.
         * Note that $GLOBALS['TSFE']->currentRecord is set to an equal value but always indicating the latest record rendered.
         *
         * @var string
         */
        public $currentRecord;
        /**
         * Set in RecordsContentObject and ContentContentObject to the current number of records selected in a query.
         *
         * @var int
         */
        public $currentRecordTotal;
        /**
         * Incremented in RecordsContentObject and ContentContentObject before each record rendering.
         *
         * @var int
         */
        public $currentRecordNumber;
        /**
         * Incremented in RecordsContentObject and ContentContentObject before each record rendering.
         *
         * @var int
         */
        public $parentRecordNumber;
        /**
         * If the ContentObjectRender was started from ContentContentObject, RecordsContentObject or SearchResultContentObject this array has two keys, 'data' and 'currentRecord' which indicates the record and data for the parent cObj.
         *
         * @var array
         */
        public $parentRecord;
        /**
         * This is used by checkPid, that checks if pages are accessible. The $checkPid_cache['page_uid'] is set TRUE or FALSE upon this check featuring a caching function for the next request.
         *
         * @var array
         */
        public $checkPid_cache;
        /**
         * @var string
         */
        public $checkPid_badDoktypeList;
        /**
         * This will be set by typoLink() to the url of the most recent link created.
         *
         * @var string
         */
        public $lastTypoLinkUrl;
        /**
         * DO. link target.
         *
         * @var string
         */
        public $lastTypoLinkTarget;
        /**
         * @var array
         */
        public $lastTypoLinkLD;
        /**
         * array that registers rendered content elements (or any table) to make sure they are not rendered recursively!
         *
         * @var array
         */
        public $recordRegister;
        /**
         * Additionally registered content object types and class names
         *
         * @var array
         */
        protected $cObjHookObjectsRegistry;
        /**
         * @var array
         */
        public $cObjHookObjectsArr;
        /**
         * Containing hook objects for stdWrap
         *
         * @var array
         */
        protected $stdWrapHookObjects;
        /**
         * Containing hook objects for getImgResource
         *
         * @var array
         */
        protected $getImgResourceHookObjects;
        /**
         * @var File Current file objects (during iterations over files)
         */
        protected $currentFile;
        /**
         * Set to TRUE by doConvertToUserIntObject() if USER object wants to become USER_INT
         */
        public $doConvertToUserIntObject;
        /**
         * Indicates current object type. Can hold one of OBJECTTYPE_ constants or FALSE.
         * The value is set and reset inside USER() function. Any time outside of
         * USER() it is FALSE.
         */
        protected $userObjectType;
        /**
         * @var array
         */
        protected $stopRendering;
        /**
         * @var int
         */
        protected $stdWrapRecursionLevel;
        /**
         * @var TypoScriptFrontendController
         */
        protected $typoScriptFrontendController;
        /**
         * @var MarkerBasedTemplateService
         */
        protected $templateService;

        public function __construct(TypoScriptFrontendController $typoScriptFrontendController = null) {}
        /**
         * Prevent several objects from being serialized.
         * If currentFile is set, it is either a File or a FileReference object. As the object itself can't be serialized,
         * we have store a hash and restore the object in __wakeup()
         *
         * @return array
         */
        public function __sleep() {}
        /**
         * Restore currentFile from hash.
         * If currentFile references a File, the identifier equals file identifier.
         * If it references a FileReference the identifier equals the uid of the reference.
         */
        public function __wakeup() {}
        public function setContentObjectClassMap(array $contentObjectClassMap) {}
        public function registerContentObjectClass($className, $contentObjectName) {}
        public function start($data, $table = '') {}
        /**
         * Returns the current table
         *
         * @return string
         */
        public function getCurrentTable() {}
        /**
         * Gets the 'getImgResource' hook objects.
         * The first call initializes the accordant objects.
         *
         * @return array The 'getImgResource' hook objects (if any)
         */
        protected function getGetImgResourceHookObjects() {}
        public function setParent($data, $currentRecord) {}
        /**
         * Returns the "current" value.
         * The "current" value is just an internal variable that can be used by functions to pass a single value on to another function later in the TypoScript processing.
         * It's like "load accumulator" in the good old C64 days... basically a "register" you can use as you like.
         * The TSref will tell if functions are setting this value before calling some other object so that you know if it holds any special information.
         *
         * @return mixed The "current" value
         */
        public function getCurrentVal() {}
        public function setCurrentVal($value) {}
        public function cObjGet($setup, $addKey = '') {}
/** @var $hookObject ContentObjectGetSingleHookInterface */
        public function cObjGetSingle(/** @var $hookObject ContentObjectGetSingleHookInterface */
$name, /** @var $hookObject ContentObjectGetSingleHookInterface */
$conf, /** @var $hookObject ContentObjectGetSingleHookInterface */
$TSkey = '__') {}
        public function getContentObject($name) {}
/** @var $cacheFrontend \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
        public function render(/** @var $cacheFrontend \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
AbstractContentObject $contentObject, /** @var $cacheFrontend \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
$configuration = [ ]) {}
        protected function createExceptionHandler($configuration = [ ]) {}
        protected function determineExceptionHandlerClassName($configuration) {}
        protected function mergeExceptionHandlerConfiguration($configuration) {}
        /**
         * Retrieves a type of object called as USER or USER_INT. Object can detect their
         * type by using this call. It returns OBJECTTYPE_USER_INT or OBJECTTYPE_USER depending on the
         * current object execution. In all other cases it will return FALSE to indicate
         * a call out of context.
         *
         * @return mixed One of OBJECTTYPE_ class constants or FALSE
         */
        public function getUserObjectType() {}
        public function setUserObjectType($userObjectType) {}
        /**
         * Requests the current USER object to be converted to USER_INT.
         */
        public function convertToUserIntObject() {}
        public function readFlexformIntoConf($flexData, $conf, $recursive = false) {}
        public function getSlidePids($pidList, $pidConf) {}
        public function cImage($file, $conf) {}
        public function getBorderAttr($borderAttr) {}
        public function getImageTagTemplate($layoutKey, $conf) {}
        public function getImageSourceCollection($layoutKey, $conf, $file) {}
        public function imageLinkWrap($string, $imageFile, $conf) {}
        public function lastChanged($tstamp) {}
        public function linkWrap($content, $wrap) {}
        public function getAltParam($conf, $longDesc = true) {}
        public function getATagParams($conf, $addGlobal = 1) {}
        public function extLinkATagParams($URL, $TYPE) {}
        public function setCurrentFile($fileObject) {}
        /**
         * Gets the current file object during iterations over files.
         *
         * @return File The current file object.
         */
        public function getCurrentFile() {}
        public function stdWrap($content = '', $conf = [ ]) {}
        public function stdWrapValue($key, array $config, $defaultValue = '') {}
/** @var ContentObjectStdWrapHookInterface $hookObject */
        public function stdWrap_stdWrapPreProcess(/** @var ContentObjectStdWrapHookInterface $hookObject */
$content = '', /** @var ContentObjectStdWrapHookInterface $hookObject */
$conf = [ ]) {}
        public function stdWrap_cacheRead($content = '', $conf = [ ]) {}
        public function stdWrap_addPageCacheTags($content = '', $conf = [ ]) {}
        public function stdWrap_setContentToCurrent($content = '') {}
        public function stdWrap_setCurrent($content = '', $conf = [ ]) {}
        public function stdWrap_lang($content = '', $conf = [ ]) {}
        public function stdWrap_data($content = '', $conf = [ ]) {}
        public function stdWrap_field($content = '', $conf = [ ]) {}
        public function stdWrap_current($content = '', $conf = [ ]) {}
        public function stdWrap_cObject($content = '', $conf = [ ]) {}
        public function stdWrap_numRows($content = '', $conf = [ ]) {}
        public function stdWrap_filelist($content = '', $conf = [ ]) {}
        public function stdWrap_preUserFunc($content = '', $conf = [ ]) {}
/** @var ContentObjectStdWrapHookInterface $hookObject */
        public function stdWrap_stdWrapOverride(/** @var ContentObjectStdWrapHookInterface $hookObject */
$content = '', /** @var ContentObjectStdWrapHookInterface $hookObject */
$conf = [ ]) {}
        public function stdWrap_override($content = '', $conf = [ ]) {}
        public function stdWrap_preIfEmptyListNum($content = '', $conf = [ ]) {}
        public function stdWrap_ifNull($content = '', $conf = [ ]) {}
        public function stdWrap_ifEmpty($content = '', $conf = [ ]) {}
        public function stdWrap_ifBlank($content = '', $conf = [ ]) {}
        public function stdWrap_listNum($content = '', $conf = [ ]) {}
        public function stdWrap_trim($content = '') {}
        public function stdWrap_strPad($content = '', $conf = [ ]) {}
        public function stdWrap_stdWrap($content = '', $conf = [ ]) {}
/** @var ContentObjectStdWrapHookInterface $hookObject */
        public function stdWrap_stdWrapProcess(/** @var ContentObjectStdWrapHookInterface $hookObject */
$content = '', /** @var ContentObjectStdWrapHookInterface $hookObject */
$conf = [ ]) {}
        public function stdWrap_required($content = '') {}
        public function stdWrap_if($content = '', $conf = [ ]) {}
        public function stdWrap_fieldRequired($content = '', $conf = [ ]) {}
        public function stdWrap_csConv($content = '', $conf = [ ]) {}
        public function stdWrap_parseFunc($content = '', $conf = [ ]) {}
        public function stdWrap_HTMLparser($content = '', $conf = [ ]) {}
        public function stdWrap_split($content = '', $conf = [ ]) {}
        public function stdWrap_replacement($content = '', $conf = [ ]) {}
        public function stdWrap_prioriCalc($content = '', $conf = [ ]) {}
        public function stdWrap_char($content = '', $conf = [ ]) {}
        public function stdWrap_intval($content = '') {}
        public function stdWrap_hash($content = '', array $conf = [ ]) {}
        public function stdWrap_round($content = '', $conf = [ ]) {}
        public function stdWrap_numberFormat($content = '', $conf = [ ]) {}
        public function stdWrap_expandList($content = '') {}
        public function stdWrap_date($content = '', $conf = [ ]) {}
        public function stdWrap_strftime($content = '', $conf = [ ]) {}
        public function stdWrap_strtotime($content = '', $conf = [ ]) {}
        public function stdWrap_age($content = '', $conf = [ ]) {}
        public function stdWrap_case($content = '', $conf = [ ]) {}
        public function stdWrap_bytes($content = '', $conf = [ ]) {}
        public function stdWrap_substring($content = '', $conf = [ ]) {}
        public function stdWrap_cropHTML($content = '', $conf = [ ]) {}
        public function stdWrap_stripHtml($content = '') {}
        public function stdWrap_crop($content = '', $conf = [ ]) {}
        public function stdWrap_rawUrlEncode($content = '') {}
        public function stdWrap_htmlSpecialChars($content = '', $conf = [ ]) {}
        public function stdWrap_encodeForJavaScriptValue($content = '') {}
        public function stdWrap_doubleBrTag($content = '', $conf = [ ]) {}
        public function stdWrap_br($content = '') {}
        public function stdWrap_brTag($content = '', $conf = [ ]) {}
        public function stdWrap_encapsLines($content = '', $conf = [ ]) {}
        public function stdWrap_keywords($content = '') {}
        public function stdWrap_innerWrap($content = '', $conf = [ ]) {}
        public function stdWrap_innerWrap2($content = '', $conf = [ ]) {}
        public function stdWrap_addParams($content = '', $conf = [ ]) {}
        public function stdWrap_filelink($content = '', $conf = [ ]) {}
        public function stdWrap_preCObject($content = '', $conf = [ ]) {}
        public function stdWrap_postCObject($content = '', $conf = [ ]) {}
        public function stdWrap_wrapAlign($content = '', $conf = [ ]) {}
        public function stdWrap_typolink($content = '', $conf = [ ]) {}
        public function stdWrap_wrap($content = '', $conf = [ ]) {}
        public function stdWrap_noTrimWrap($content = '', $conf = [ ]) {}
        public function stdWrap_wrap2($content = '', $conf = [ ]) {}
        public function stdWrap_dataWrap($content = '', $conf = [ ]) {}
        public function stdWrap_prepend($content = '', $conf = [ ]) {}
        public function stdWrap_append($content = '', $conf = [ ]) {}
        public function stdWrap_wrap3($content = '', $conf = [ ]) {}
        public function stdWrap_orderedStdWrap($content = '', $conf = [ ]) {}
        public function stdWrap_outerWrap($content = '', $conf = [ ]) {}
        public function stdWrap_insertData($content = '') {}
        public function stdWrap_postUserFunc($content = '', $conf = [ ]) {}
        public function stdWrap_postUserFuncInt($content = '', $conf = [ ]) {}
        public function stdWrap_prefixComment($content = '', $conf = [ ]) {}
        public function stdWrap_editIcons($content = '', $conf = [ ]) {}
        public function stdWrap_editPanel($content = '', $conf = [ ]) {}
/** @var $cacheFrontend \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
        public function stdWrap_cacheStore(/** @var $cacheFrontend \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
$content = '', /** @var $cacheFrontend \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
$conf = [ ]) {}
/** @var ContentObjectStdWrapHookInterface $hookObject */
        public function stdWrap_stdWrapPostProcess(/** @var ContentObjectStdWrapHookInterface $hookObject */
$content = '', /** @var ContentObjectStdWrapHookInterface $hookObject */
$conf = [ ]) {}
        public function stdWrap_debug($content = '') {}
        public function stdWrap_debugFunc($content = '', $conf = [ ]) {}
        public function stdWrap_debugData($content = '') {}
        public function numRows($conf) {}
        public function listNum($content, $listNum, $char) {}
        public function checkIf($conf) {}
        public function filelist($data) {}
        public function HTMLparser_TSbridge($theValue, $conf) {}
        public function dataWrap($content, $wrap) {}
        public function insertData($str) {}
        public function prefixComment($str, $conf, $content) {}
        public function substring($content, $options) {}
        public function crop($content, $options) {}
        public function cropHTML($content, $options) {}
        public function addParams($content, $conf) {}
/** @var File $fileObject */
        public function filelink(/** @var File $fileObject */
$theValue, /** @var File $fileObject */
$conf) {}
        public function calc($val) {}
        public function calcIntExplode($delim, $string) {}
        public function splitObj($value, $conf) {}
        protected function replacement($content, array $configuration) {}
        protected function replacementSingle($content, array $configuration) {}
        protected function round($content, array $conf = [ ]) {}
        public function numberFormat($content, $conf) {}
        public function parseFunc($theValue, $conf, $ref = '') {}
        public function _parseFunc($theValue, $conf) {}
        public function encaps_lineSplit($theValue, $conf) {}
        public function http_makelinks($data, $conf) {}
        public function mailto_makelinks($data, $conf) {}
/** @var ContentObjectGetImageResourceHookInterface $hookObject */
        public function getImgResource(/** @var ContentObjectGetImageResourceHookInterface $hookObject */
$file, /** @var ContentObjectGetImageResourceHookInterface $hookObject */
$fileArray) {}
        protected function getCropArea(FileReference $fileReference, string $cropVariant) {}
        public function getFieldVal($field) {}
        public function getData($string, $fieldArray = null) {}
/** @var \TYPO3\CMS\Core\Log\Logger $logger */
        protected function getFileDataKey(/** @var \TYPO3\CMS\Core\Log\Logger $logger */
$key) {}
        public function rootLineValue($key, $field, $slideBack = false, $altRootLine = '') {}
        public function getGlobal($keyString, $source = null) {}
        public function getKey($key, $arr) {}
        protected function resolveMixedLinkParameter($linkText, $mixedLinkParameter, $configuration = [ ]) {}
/** @var AbstractTypolinkBuilder $linkBuilder */
        public function typoLink(/** @var AbstractTypolinkBuilder $linkBuilder */
$linkText, /** @var AbstractTypolinkBuilder $linkBuilder */
$conf) {}
        public function typoLink_URL($conf) {}
        public function getTypoLink($label, $params, $urlParameters = [ ], $target = '') {}
        public function getUrlToCurrentLocation($addQueryString = true) {}
        public function getTypoLink_URL($params, $urlParameters = [ ], $target = '') {}
        public function typolinkWrap($conf) {}
        public function currentPageUrl($urlParameters = [ ], $id = 0) {}
/** @var UrlProcessorInterface $urlProcessor */
        protected function processUrl(/** @var UrlProcessorInterface $urlProcessor */
$context, /** @var UrlProcessorInterface $urlProcessor */
$url, /** @var UrlProcessorInterface $urlProcessor */
$typolinkConfiguration = [ ]) {}
        public function getMailTo($mailAddress, $linktxt) {}
        protected function encryptEmail($string, $type) {}
        protected function decryptEmail($string, $type) {}
        protected function encryptCharcode($n, $start, $end, $offset) {}
        public function getQueryArguments($conf, $overruleQueryArguments = [ ], $forceOverruleArguments = false) {}
        public function wrap($content, $wrap, $char = '|') {}
        public function noTrimWrap($content, $wrap, $char = '|') {}
        public function callUserFunction($funcName, $conf, $content) {}
        public function keywords($content) {}
        public function caseshift($theValue, $case) {}
        public function HTMLcaseshift($theValue, $case) {}
        public function calcAge($seconds, $labels) {}
/** @var $mail MailMessage */
        public function sendNotifyEmail(/** @var $mail MailMessage */
$message, /** @var $mail MailMessage */
$recipients, /** @var $mail MailMessage */
$cc, /** @var $mail MailMessage */
$senderAddress, /** @var $mail MailMessage */
$senderName = '', /** @var $mail MailMessage */
$replyTo = '') {}
        public function mergeTSRef($confArr, $prop) {}
        public function enableFields($table, $show_hidden = false, array $ignore_array = [ ]) {}
/** @var VersionState $versionState */
        public function getTreeList(/** @var VersionState $versionState */
$id, /** @var VersionState $versionState */
$depth, /** @var VersionState $versionState */
$begin = 0, /** @var VersionState $versionState */
$dontCheckEnableFields = false, /** @var VersionState $versionState */
$addSelectFields = '', /** @var VersionState $versionState */
$moreWhereClauses = '', /** @var VersionState $versionState */
array $prevId_array = [ ], /** @var VersionState $versionState */
$recursionLevel = 0) {}
        public function searchWhere($searchWords, $searchFieldList, $searchTable) {}
        public function exec_getQuery($table, $conf) {}
        public function getRecords($tableName, array $queryConfiguration) {}
        public function getQuery($table, $conf, $returnQueryArray = false) {}
        protected function getQueryArray(QueryBuilder $queryBuilder) {}
        protected function getQueryArrayJoinHelper(string $fromAlias, array $joinParts, array $knownAliases) : string {}
        protected function getQueryConstraints(string $table, array $conf) : array {}
        protected function sanitizeSelectPart($selectPart, $table) {}
        public function checkPidArray($listArr) {}
        public function checkPid($uid) {}
        public function getQueryMarkers($table, $conf) {}
        public function editPanel($content, $conf, $currentRecord = '', $dataArr = [ ]) {}
        public function editIcons($content, $params, array $conf = [ ], $currentRecord = '', $dataArr = [ ], $addUrlParamStr = '') {}
        public function isDisabled($table, $row) {}
        /**
         * Get instance of FAL resource factory
         *
         * @return ResourceFactory
         */
        protected function getResourceFactory() {}
        protected function getEnvironmentVariable($key) {}
/** @var $cacheFrontend \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
        protected function getFromCache(/** @var $cacheFrontend \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface */
array $configuration) {}
        protected function calculateCacheLifetime(array $configuration) {}
        protected function calculateCacheTags(array $configuration) {}
        protected function calculateCacheKey(array $configuration) {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Backend\FrontendBackendUserAuthentication
         */
        protected function getFrontendBackendUser() {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

    /**
     * Contains TEXT class object.
     */
    class TextContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
    }

    /**
     * Contains an abstract class for all tslib content class implementations.
     */
    abstract class AbstractContentObject {
        /**
         * @var ContentObjectRenderer
         */
        protected $cObj;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;

        public function __construct(ContentObjectRenderer $cObj) {}
        abstract public function render($conf = [ ]) ;
        /**
         * Getter for current ContentObjectRenderer
         *
         * @return ContentObjectRenderer
         */
        public function getContentObjectRenderer() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

    /**
     * Contains FILE class object.
     */
    class FileContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

    /**
     * A class that contains methods that can be used to use the dataProcessing functionality
     */
    class ContentDataProcessor {
        public function process(ContentObjectRenderer $cObject, array $configuration, array $variables) {}
    }

    /**
     * Contains TEMPLATE class object.
     */
    class TemplateContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        /**
         * @var MarkerBasedTemplateService
         */
        protected $templateService;

        public function __construct(ContentObjectRenderer $cObj) {}
        public function render($conf = [ ]) {}
    }

    /**
     * Contains COA_INT class object.
     */
    class ContentObjectArrayInternalContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

    /**
     * Contains COA class object.
     */
    class ContentObjectArrayContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
    }

    /**
     * Contains FLUIDTEMPLATE class object
     */
    class FluidTemplateContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        /**
         * @var StandaloneView
         */
        protected $view;
        /**
         * @var ContentDataProcessor
         */
        protected $contentDataProcessor;

        public function __construct(ContentObjectRenderer $cObj) {}
        public function setContentDataProcessor($contentDataProcessor) {}
        public function render($conf = [ ]) {}
        /**
         * Attempts to render HeaderAssets and FooterAssets sections from the
         * Fluid template, then adds each (if not empty) to either header or
         * footer, as appropriate, using PageRenderer.
         */
        protected function renderFluidTemplateAssetsIntoPageRenderer() {}
        /**
         * Creating standalone view instance must not be done in construct() as
         * it can lead to a nasty cache issue since content object instances
         * are not always re-created by the content object rendered for every
         * usage, but can be re-used. Thus, we need a fresh instance of
         * StandaloneView every time render() is called.
         */
        protected function initializeStandaloneViewInstance() {}
        protected function setTemplate(array $conf) {}
        protected function setLayoutRootPath(array $conf) {}
        protected function setPartialRootPath(array $conf) {}
        protected function setFormat(array $conf) {}
/** @var $request \TYPO3\CMS\Extbase\Mvc\Request */
        protected function setExtbaseVariables(/** @var $request \TYPO3\CMS\Extbase\Mvc\Request */
array $conf) {}
        protected function getContentObjectVariables(array $conf) {}
/** @var $typoScriptService TypoScriptService */
        protected function assignSettings(/** @var $typoScriptService TypoScriptService */
array $conf) {}
        /**
         * Render fluid standalone view
         *
         * @return string
         */
        protected function renderFluidView() {}
        protected function applyStandardWrapToRenderedContent($content, array $conf) {}
        protected function applyStandardWrapToFluidPaths(array $paths) {}
    }

    /**
     * Contains USER_INT class object.
     */
    class UserInternalContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

    /**
     * Contains RESTORE_REGISTER class object.
     */
    class RestoreRegisterContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
    }

    /**
     * Contains CASE class object.
     */
    class CaseContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
    }

    /**
     * Contains RECORDS class object.
     */
    class RecordsContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        /**
         * List of all items with table and uid information
         *
         * @var array
         */
        protected $itemArray;
        /**
         * List of all selected records with full data, arranged per table
         *
         * @var array
         */
        protected $data;

/** @var ContentObjectRenderer $cObj */
        public function render(/** @var ContentObjectRenderer $cObj */
$conf = [ ]) {}
/** @var RelationHandler $loadDB*/
        protected function collectRecordsFromSource(/** @var RelationHandler $loadDB*/
$source, /** @var RelationHandler $loadDB*/
array $tables) {}
        protected function collectRecordsFromCategories($selectedCategories, array $tables, $relationField) {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
    }

    /**
     * Contains SVG content object.
     */
    class ScalableVectorGraphicsContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) : string {}
        protected function renderInline(array $conf) : string {}
        protected function renderObject(array $conf) : string {}
        protected function resolveAbsoluteSourcePath(array $conf) : string {}
        protected function getDimensions(array $conf) : array {}
    }

    /**
     * Contains EDITPANEL class object.
     */
    class EditPanelContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
    }

    /**
     * Contains IMG_RESOURCE class object.
     */
    class ImageResourceContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
    }

    /**
     * Contains CONTENT class object.
     */
    class ContentContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
/** @var $cObj ContentObjectRenderer */
        public function render(/** @var $cObj ContentObjectRenderer */
$conf = [ ]) {}
        /**
         * Returns the frontend controller
         *
         * @return TypoScriptFrontendController
         */
        protected function getFrontendController() {}
        /**
         * Returns Time Tracker
         *
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
    }

    /**
     * Contains HMENU class object.
     */
    class HierarchicalMenuContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
/** @var $menuObjectFactory Menu\MenuContentObjectFactory */
        public function render(/** @var $menuObjectFactory Menu\MenuContentObjectFactory */
$conf = [ ]) {}
    }

    /**
     * Contains FILES content object
     */
    class FilesContentObject extends \typo3\cms\frontend\contentobject\abstractcontentobject {
        public function render($conf = [ ]) {}
        protected function findAndSortFiles(array $conf) {}
        protected function addFileReferences(array $configuration, array $element, FileCollector $fileCollector) {}
        /**
         * @return \TYPO3\CMS\Frontend\Page\PageRepository
         */
        protected function getPageRepository() {}
        /**
         * @return FileCollector
         */
        protected function getFileCollector() {}
    }


    /**
     * interface for classes which hook into \TYPO3\CMS\Frontend\ContentObject and do additional stdWrap processing
     */
    interface ContentObjectStdWrapHookInterface {
        function stdWrapPreProcess($content, array $configuration, ContentObjectRenderer $parentObject) ;
        function stdWrapOverride($content, array $configuration, ContentObjectRenderer $parentObject) ;
        function stdWrapProcess($content, array $configuration, ContentObjectRenderer $parentObject) ;
        function stdWrapPostProcess($content, array $configuration, ContentObjectRenderer $parentObject) ;
    }

    /**
     * Interface for classes which hook into \TYPO3\CMS\Frontend\ContentObject and do additional getImgResource processing
     */
    interface FileLinkHookInterface {
        function getPreviewImage(File $file) ;
    }

    /**
     * Interface for classes which hook into \TYPO3\CMS\Frontend\ContentObject and do additional
     * initialization processing.
     */
    interface ContentObjectPostInitHookInterface {
        function postProcessContentObjectInitialization(ContentObjectRenderer $parentObject) ;
    }

    /**
     * Interface for classes which hook into getSourceCollection for additional processing
     */
    interface ContentObjectOneSourceCollectionHookInterface {
        function getOneSourceCollection(array $sourceRenderConfiguration, array $sourceConfiguration, $oneSourceCollection, ContentObjectRenderer $parentObject) ;
    }

    /**
     * Interface for classes which hook into \TYPO3\CMS\Frontend\ContentObject and do additional cObjGetSingle processing
     */
    interface ContentObjectGetSingleHookInterface {
        function getSingleContentObject($contentObjectName, array $configuration, $TypoScriptKey, ContentObjectRenderer $parentObject) ;
    }

    /**
     * interface for classes which hook into \TYPO3\CMS\Frontend\ContentObjectRenderer and wish to modify the typolink
     * configuration of the page link.
     */
    interface TypolinkModifyLinkConfigForPageLinksHookInterface {
        function modifyPageLinkConfiguration(array $linkConfiguration, array $linkDetails, array $pageRow) : array ;
    }

    /**
     * Interface for data processor classes processing data from
     * ContentObjectRenderer, used e.g. with the FLUIDTEMPLATE content object
     */
    interface DataProcessorInterface {
        function process(ContentObjectRenderer $cObj, array $contentObjectConfiguration, array $processorConfiguration, array $processedData) ;
    }

    /**
     * interface for classes which hook into \TYPO3\CMS\Frontend\ContentObject and do additional getData processing
     */
    interface ContentObjectGetDataHookInterface {
        function getDataExtension($getDataString, array $fields, $sectionValue, $returnValue, ContentObjectRenderer $parentObject) ;
    }

    /**
     * Interface for classes which hook into \TYPO3\CMS\Frontend\ContentObject and do additional getImgResource processing
     */
    interface ContentObjectGetImageResourceHookInterface {
        function getImgResourcePostProcess($file, array $configuration, array $imageResource, ContentObjectRenderer $parent) ;
    }

    /**
     * Interface for hooks to fetch the public URL of files
     */
    interface ContentObjectGetPublicUrlForFileHookInterface {
        function postProcess(ContentObjectRenderer $parent, array $configuration, File $file, $pubicUrl) ;
    }

}

namespace TYPO3\CMS\Frontend\ContentObject\Menu {
    /**
     * ImageMap based menus
     */
    class ImageMenuContentObject extends \typo3\cms\frontend\contentobject\menu\abstractmenucontentobject {
        /**
         * Calls procesItemStates() so that the common configuration for the menu items are resolved into individual configuration per item.
         * Calls makeImageMap() to generate the image map image-file
         *
         * @see AbstractMenuContentObject::procesItemStates(), makeImageMap()
         */
        public function generate() {}
/** @var ContentObjectRenderer $cObj */
        public function makeImageMap(/** @var ContentObjectRenderer $cObj */
$conf) {}
        /**
         * Returns the HTML for the image map menu.
         * If ->result is TRUE it will create the HTML for the image map menu.
         *
         * @return string The HTML for the menu
         */
        public function writeMenu() {}
    }

    /**
     * Extension class creating graphic based menus (PNG or GIF files)
     */
    class GraphicalMenuContentObject extends \typo3\cms\frontend\contentobject\menu\abstractmenucontentobject {
        /**
         * Calls procesItemStates() so that the common configuration for the menu items are resolved into individual configuration per item.
         * Calls makeGifs() for all "normal" items and if configured for, also the "rollover" items.
         *
         * @see AbstractMenuContentObject::procesItemStates(), makeGifs()
         */
        public function generate() {}
        public function makeGifs($conf, $resKey) {}
        public function findLargestDims($conf, $items, $Hobjs, $Wobjs, $minDim, $maxDim) {}
        /**
         * Traverses the ->result['NO'] array of menu items configuration (made by ->generate()) and renders the HTML of each item (the images themselves was made with makeGifs() before this. See ->generate())
         * During the execution of this function many internal methods prefixed "extProc_" from this class is called and many of these are for now dummy functions. But they can be used for processing as they are used by the GMENU_LAYERS
         *
         * @return string The HTML for the menu (returns result through $this->extProc_finish(); )
         */
        public function writeMenu() {}
        /**
         * Called right before the traversing of $this->result begins.
         * Can be used for various initialization
         *
         * @internal
         * @see writeMenu()
         */
        public function extProc_init() {}
        public function extProc_RO($key) {}
        public function extProc_beforeLinking($key) {}
        public function extProc_afterLinking($key) {}
        public function extProc_beforeAllWrap($item, $key) {}
        /**
         * Called before the writeMenu() function returns (only if a menu was generated)
         *
         * @return string The total menu content should be returned by this function
         * @internal
         * @see writeMenu()
         */
        public function extProc_finish() {}
    }

    /**
     * Utility class for menus based on category collections of pages.
     *
     * Returns all the relevant pages for rendering with a menu content object.
     */
    class CategoryMenuUtility {
        /**
         * @var string Name of the field used for sorting the pages
         */
        static protected $sortingField;

        public function collectPages($selectedCategories, $configuration, $parentObject) {}
        protected function sortPages($pages, $order) {}
        public static function sortPagesUtility($pageA, $pageB) {}
    }

    /**
     * Generating navigation/menus from TypoScript
     *
     * The HMENU content object uses this (or more precisely one of the extension classes).
     * Among others the class generates an array of menu items. Thereafter functions from the subclasses are called.
     * The class is always used through extension classes (like GraphicalMenuContentObject or TextMenuContentObject).
     */
    abstract class AbstractMenuContentObject {
        /**
         * tells you which menu number this is. This is important when getting data from the setup
         *
         * @var int
         */
        public $menuNumber;
        /**
         * 0 = rootFolder
         *
         * @var int
         */
        public $entryLevel;
        /**
         * The doktype-number that defines a spacer
         *
         * @var string
         */
        public $spacerIDList;
        /**
         * Doktypes that define which should not be included in a menu
         *
         * @var string
         */
        public $doktypeExcludeList;
        /**
         * @var int[]
         */
        public $alwaysActivePIDlist;
        /**
         * @var string
         */
        public $imgNamePrefix;
        /**
         * @var int
         */
        public $imgNameNotRandom;
        /**
         * @var bool
         */
        public $debug;
        /**
         * Loaded with the parent cObj-object when a new HMENU is made
         *
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        public $parent_cObj;
        /**
         * @var string
         */
        public $GMENU_fixKey;
        /**
         * accumulation of mount point data
         *
         * @var string[]
         */
        public $MP_array;
        /**
         * HMENU configuration
         *
         * @var array
         */
        public $conf;
        /**
         * xMENU configuration (TMENU, GMENU etc)
         *
         * @var array
         */
        public $mconf;
        /**
         * @var \TYPO3\CMS\Core\TypoScript\TemplateService
         */
        public $tmpl;
        /**
         * @var \TYPO3\CMS\Frontend\Page\PageRepository
         */
        public $sys_page;
        /**
         * The base page-id of the menu.
         *
         * @var int
         */
        public $id;
        /**
         * Holds the page uid of the NEXT page in the root line from the page pointed to by entryLevel;
         * Used to expand the menu automatically if in a certain root line.
         *
         * @var string
         */
        public $nextActive;
        /**
         * The array of menuItems which is built
         *
         * @var array[]
         */
        public $menuArr;
        /**
         * @var string
         */
        public $hash;
        /**
         * @var array
         */
        public $result;
        /**
         * Is filled with an array of page uid numbers + RL parameters which are in the current
         * root line (used to evaluate whether a menu item is in active state)
         *
         * @var array
         */
        public $rL_uidRegister;
        /**
         * @var string
         */
        public $INPfixMD5;
        /**
         * @var mixed[]
         */
        public $I;
        /**
         * @var string
         */
        public $WMresult;
        /**
         * @var string
         */
        public $WMfreezePrefix;
        /**
         * @var int
         */
        public $WMmenuItems;
        /**
         * @var array[]
         */
        public $WMsubmenuObjSuffixes;
        /**
         * @var string
         */
        public $WMextraScript;
        /**
         * @var ContentObjectRenderer
         */
        public $WMcObj;
        /**
         * Can be set to contain menu item arrays for sub-levels.
         *
         * @var string
         */
        public $alternativeMenuTempArray;
        /**
         * Will be 'id' in XHTML-mode
         *
         * @var string
         */
        public $nameAttribute;
        /**
         * TRUE to use cHash in generated link (normally only for the language
         * selector and if parameters exist in the URL).
         *
         * @var bool
         */
        protected $useCacheHash;
        /**
         * Array key of the parentMenuItem in the parentMenuArr, if this menu is a subMenu.
         *
         * @var int|null
         */
        protected $parentMenuArrItemKey;

        public function start($tmpl, $sys_page, $id, $conf, $menuNumber, $objSuffix = '') {}
        /**
         * Creates the menu in the internal variables, ready for output.
         * Basically this will read the page records needed and fill in the internal $this->menuArr
         * Based on a hash of this array and some other variables the $this->result variable will be
         * loaded either from cache OR by calling the generate() method of the class to create the menu for real.
         */
        public function makeMenu() {}
        /**
         * Generates the the menu data.
         *
         * Subclasses should overwrite this method.
         */
        public function generate() {}
        /**
         * @return string The HTML for the menu
         */
        public function writeMenu() {}
        protected function removeInaccessiblePages(array $pages) {}
        /**
         * Main function for retrieving menu items based on the menu type (special or sectionIndex or "normal")
         *
         * @return array
         */
        protected function prepareMenuItems() {}
        protected function prepareMenuItemsForUserSpecificMenu($specialValue, $sortingField) {}
        protected function prepareMenuItemsForLanguageMenu($specialValue) {}
        protected function prepareMenuItemsForDirectoryMenu($specialValue, $sortingField) {}
/** @var RelationHandler $loadDB*/
        protected function prepareMenuItemsForListMenu(/** @var RelationHandler $loadDB*/
$specialValue) {}
        protected function prepareMenuItemsForUpdatedMenu($specialValue, $sortingField) {}
        protected function prepareMenuItemsForKeywordsMenu($specialValue, $sortingField) {}
        /**
         * Fetches all menuitems if special = rootline is set
         *
         * @return array
         */
        protected function prepareMenuItemsForRootlineMenu() {}
        protected function prepareMenuItemsForBrowseMenu($specialValue, $sortingField, $additionalWhere) {}
/** @var CacheHashCalculator $cacheHashCalculator */
        protected function analyzeCacheHashRequirements(/** @var CacheHashCalculator $cacheHashCalculator */
$queryString) {}
        public function filterMenuPages($data, $banUidArray, $spacer) {}
        public function procesItemStates($splitCount) {}
        public function link($key, $altTarget = '', $typeOverride = '') {}
        protected function determineOriginalShortcutPage(array $page) {}
        public function changeLinksForAccessRestrictedPages($LD, $page, $mainTarget, $typeOverride) {}
/** @var $submenu AbstractMenuContentObject */
        public function subMenu(/** @var $submenu AbstractMenuContentObject */
$uid, /** @var $submenu AbstractMenuContentObject */
$objSuffix = '') {}
        public function isNext($uid, $MPvar = '') {}
        public function isActive($uid, $MPvar = '') {}
        public function isCurrent($uid, $MPvar = '') {}
        public function isSubMenu($uid) {}
        public function isItemState($kind, $key) {}
        public function accessKey($title) {}
        public function userProcess($mConfKey, $passVar) {}
        /**
         * Creates the <A> tag parts for the current item (in $this->I, [A1] and [A2]) based on other information in this array (like $this->I['linkHREF'])
         *
         * @internal
         */
        public function setATagParts() {}
        public function getPageTitle($title, $nav_title) {}
        public function getMPvar($key) {}
        /**
         * Returns where clause part to exclude 'not in menu' pages
         *
         * @return string where clause part.
         * @internal
         */
        public function getDoktypeExcludeWhere() {}
        /**
         * Returns an array of banned UIDs (from excludeUidList)
         *
         * @return array Array of banned UIDs
         * @internal
         */
        public function getBannedUids() {}
        public function menuTypoLink($page, $oTarget, $no_cache, $script, $overrideArray = '', $addParams = '', $typeOverride = '') {}
        protected function sectionIndex($altSortField, $pid = null) {}
        /**
         * Returns the sys_page object
         *
         * @return \TYPO3\CMS\Frontend\Page\PageRepository
         */
        public function getSysPage() {}
        /**
         * Returns the parent content object
         *
         * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        public function getParentContentObject() {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
        /**
         * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected function getCache() {}
        /**
         * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected function getRuntimeCache() {}
        public function setParentMenu(array $menuArr = [ ], $menuItemKey) {}
        /**
         * Check if there is an valid parentMenuArr.
         *
         * @return bool
         */
        protected function hasParentMenuArr() {}
        /**
         * Check if we have an parentMenutArrItemKey
         */
        protected function hasParentMenuItemKey() {}
        /**
         * Check if the the parentMenuItem exists
         */
        protected function hasParentMenuItem() {}
        /**
         * Get the parentMenuArr, if this is subMenu.
         *
         * @return array
         */
        public function getParentMenuArr() {}
        /**
         * Get the parentMenuItem from the parentMenuArr, if this is a subMenu
         *
         * @return array|null
         */
        public function getParentMenuItem() {}
    }

    /**
     * Extension class creating text based menus
     */
    class TextMenuContentObject extends \typo3\cms\frontend\contentobject\menu\abstractmenucontentobject {
        /**
         * Calls procesItemStates() so that the common configuration for the menu items are resolved into individual configuration per item.
         * Sets the result for the new "normal state" in $this->result
         *
         * @see AbstractMenuContentObject::procesItemStates()
         */
        public function generate() {}
        /**
         * Traverses the ->result array of menu items configuration (made by ->generate()) and renders each item.
         * During the execution of this function many internal methods prefixed "extProc_" from this class is called and
         * many of these are for now dummy functions.
         * An instance of ContentObjectRenderer is also made and for each menu item rendered it is loaded with
         * the record for that page so that any stdWrap properties that applies will have the current menu items record available.
         *
         * @return string The HTML for the menu (returns result through $this->extProc_finish(); )
         */
        public function writeMenu() {}
        public function getBeforeAfter($pref) {}
        /**
         * Called right before the traversing of $this->result begins.
         * Can be used for various initialization
         *
         * @access private
         * @see writeMenu()
         */
        public function extProc_init() {}
        public function extProc_beforeLinking($key) {}
        public function extProc_afterLinking($key) {}
        public function extProc_beforeAllWrap($item, $key) {}
        /**
         * Called before the writeMenu() function returns (only if a menu was generated)
         *
         * @return string The total menu content should be returned by this function
         * @access private
         * @see writeMenu()
         */
        public function extProc_finish() {}
    }

    /**
     * Factory for menu content objects. Allows overriding the default
     * types like 'GMENU' with an own implementation (only one possible)
     * and new types can be registered.
     */
    class MenuContentObjectFactory implements \typo3\cms\core\singletoninterface {
        /**
         * Register of TypoScript keys to according render class
         *
         * @var array
         */
        protected $menuTypeToClassMapping;

        public function getMenuObjectByType($type = '') {}
        public function registerMenuType($type, $className) {}
    }


    /**
     * interface for classes which hook into AbstractMenuContentObject
     */
    interface AbstractMenuFilterPagesHookInterface {
        function processFilter(array $data, array $banUidArray, $spacer, AbstractMenuContentObject $obj) ;
    }

}

namespace TYPO3\CMS\Frontend\ContentObject\Menu\Exception {
    /**
     * No such menu type exception
     */
    class NoSuchMenuTypeException extends \typo3\cms\frontend\exception {}

}

namespace TYPO3\CMS\Frontend\ContentObject\Exception {
    /**
     * Exception handler class for content object rendering
     */
    class ProductionExceptionHandler implements \psr\log\loggerawareinterface, \typo3\cms\frontend\contentobject\exception\exceptionhandlerinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var array
         */
        protected $configuration;

        public function __construct(array $configuration = [ ]) {}
        public function handle(\Exception $exception, AbstractContentObject $contentObject = null, $contentObjectConfiguration = [ ]) {}
        protected function logException(\Exception $exception, $errorMessage, $code) {}
    }

    /**
     * Class Exception
     */
    class ContentRenderingException extends \typo3\cms\core\error\exception {}


    /**
     * Interface ExceptionHandlerInterface
     */
    interface ExceptionHandlerInterface {
        function handle(\Exception $exception, AbstractContentObject $contentObject = null, $contentObjectConfiguration = [ ]) ;
    }

}

namespace TYPO3\CMS\Frontend\Plugin {
    /**
     * Base class for frontend plugins
     * Most modern frontend plugins are extension classes of this one.
     * This class contains functions which assists these plugins in creating lists, searching, displaying menus, page-browsing (next/previous/1/2/3) and handling links.
     * Functions are all prefixed "pi_" which is reserved for this class. Those functions can of course be overridden in the extension classes (that is the point...)
     */
    class AbstractPlugin {
        /**
         * The backReference to the mother cObj object set at call time
         *
         * @var ContentObjectRenderer
         */
        public $cObj;
        /**
         * Should be same as classname of the plugin, used for CSS classes, variables
         *
         * @var string
         */
        public $prefixId;
        /**
         * Path to the plugin class script relative to extension directory, eg. 'pi1/class.tx_newfaq_pi1.php'
         *
         * @var string
         */
        public $scriptRelPath;
        /**
         * Extension key.
         *
         * @var string
         */
        public $extKey;
        /**
         * This is the incoming array by name $this->prefixId merged between POST and GET, POST taking precedence.
         * Eg. if the class name is 'tx_myext'
         * then the content of this array will be whatever comes into &tx_myext[...]=...
         *
         * @var array
         */
        public $piVars;
        /**
         * Local pointer variabe array.
         * Holds pointer information for the MVC like approach Kasper
         * initially proposed
         *
         * @var array
         */
        public $internal;
        /**
         * Local Language content
         *
         * @var array
         */
        public $LOCAL_LANG;
        /**
         * Contains those LL keys, which have been set to (empty) in TypoScript.
         * This is necessary, as we cannot distinguish between a nonexisting
         * translation and a label that has been cleared by TS.
         * In both cases ['key'][0]['target'] is "".
         *
         * @var array
         */
        protected $LOCAL_LANG_UNSET;
        /**
         * Flag that tells if the locallang file has been fetch (or tried to
         * be fetched) already.
         *
         * @var bool
         */
        public $LOCAL_LANG_loaded;
        /**
         * Pointer to the language to use.
         *
         * @var string
         */
        public $LLkey;
        /**
         * Pointer to alternative fall-back language to use.
         *
         * @var string
         */
        public $altLLkey;
        /**
         * You can set this during development to some value that makes it
         * easy for you to spot all labels that ARe delivered by the getLL function.
         *
         * @var string
         */
        public $LLtestPrefix;
        /**
         * Save as LLtestPrefix, but additional prefix for the alternative value
         * in getLL() function calls
         *
         * @var string
         */
        public $LLtestPrefixAlt;
        /**
         * @var string
         */
        public $pi_isOnlyFields;
        /**
         * @var int
         */
        public $pi_alwaysPrev;
        /**
         * @var int
         */
        public $pi_lowerThan;
        /**
         * @var string
         */
        public $pi_moreParams;
        /**
         * @var string
         */
        public $pi_listFields;
        /**
         * @var array
         */
        public $pi_autoCacheFields;
        /**
         * @var bool
         */
        public $pi_autoCacheEn;
        /**
         * If set, then links are
         * 1) not using cHash and
         * 2) not allowing pages to be cached. (Set this for all USER_INT plugins!)
         *
         * @var bool
         */
        public $pi_USER_INT_obj;
        /**
         * If set, then caching is disabled if piVars are incoming while
         * no cHash was set (Set this for all USER plugins!)
         *
         * @var bool
         */
        public $pi_checkCHash;
        /**
         * Should normally be set in the main function with the TypoScript content passed to the method.
         *
         * $conf[LOCAL_LANG][_key_] is reserved for Local Language overrides.
         * $conf[userFunc] reserved for setting up the USER / USER_INT object. See TSref
         *
         * @var array
         */
        public $conf;
        /**
         * internal, don't mess with...
         *
         * @var ContentObjectRenderer
         */
        public $pi_EPtemp_cObj;
        /**
         * @var int
         */
        public $pi_tmpPageId;
        /**
         * Property for accessing TypoScriptFrontendController centrally
         *
         * @var TypoScriptFrontendController
         */
        protected $frontendController;
        /**
         * @var MarkerBasedTemplateService
         */
        protected $templateService;

/** @var $locales Locales */
        public function __construct(/** @var $locales Locales */
$_ = null, /** @var $locales Locales */
TypoScriptFrontendController $frontendController = null) {}
        protected function applyStdWrapRecursive(array $conf, $level = 0) {}
        /**
         * If internal TypoScript property "_DEFAULT_PI_VARS." is set then it will merge the current $this->piVars array onto these default values.
         */
        public function pi_setPiVarDefaults() {}
        public function pi_getPageLink($id, $target = '', $urlParameters = [ ]) {}
        public function pi_linkToPage($str, $id, $target = '', $urlParameters = [ ]) {}
        public function pi_linkTP($str, $urlParameters = [ ], $cache = false, $altPageId = 0) {}
        public function pi_linkTP_keepPIvars($str, $overrulePIvars = [ ], $cache = false, $clearAnyway = false, $altPageId = 0) {}
        public function pi_linkTP_keepPIvars_url($overrulePIvars = [ ], $cache = false, $clearAnyway = false, $altPageId = 0) {}
        public function pi_list_linkSingle($str, $uid, $cache = false, $mergeArr = [ ], $urlOnly = false, $altPageId = 0) {}
        public function pi_openAtagHrefInJSwindow($str, $winName = '', $winParams = 'width=670,height=500,status=0,menubar=0,scrollbars=1,resizable=1') {}
        public function pi_list_browseresults($showResultCount = 1, $tableParams = '', $wrapArr = [ ], $pointerName = 'pointer', $hscText = true, $forceOutput = false) {}
        public function pi_list_modeSelector($items = [ ], $tableParams = '') {}
        public function pi_list_makelist($statement, $tableParams = '') {}
        public function pi_list_row($c) {}
        /**
         * Returns a list header row.
         * (Dummy)
         * Notice: This function should ALWAYS be defined in the extension class of the plugin since it is directly concerned with the specific layout of the listing for your plugins purpose.
         *
         * @return string HTML output, a table row with a class attribute set
         */
        public function pi_list_header() {}
        public function pi_getClassName($class) {}
        public function pi_classParam($class, $addClasses = '') {}
        public function pi_wrapInBaseClass($str) {}
        public function pi_getEditPanel($row = [ ], $tablename = '', $label = '', $conf = [ ]) {}
        public function pi_getEditIcon($content, $fields, $title = '', $row = [ ], $tablename = '', $oConf = [ ]) {}
        public function pi_getLL($key, $alternativeLabel = '') {}
/** @var $languageFactory LocalizationFactory */
        public function pi_loadLL(/** @var $languageFactory LocalizationFactory */
$languageFilePath = '') {}
        public function pi_exec_query($table, $count = false, $addWhere = '', $mm_cat = '', $groupBy = '', $orderBy = '', $query = '') {}
        public function pi_getRecord($table, $uid, $checkPage = false) {}
        public function pi_getPidList($pid_list, $recursive = 0) {}
        public function pi_prependFieldsWithTable($table, $fieldList) {}
        public function pi_getCategoryTableContents($table, $pid, $whereClause = '', $groupBy = '', $orderBy = '', $limit = '') {}
        public function pi_isOnlyFields($fList, $lowerThan = -1) {}
        public function pi_autoCache($inArray) {}
        public function pi_RTEcssText($str) {}
        public function pi_initPIflexForm($field = 'pi_flexform') {}
        public function pi_getFFvalue($T3FlexForm_array, $fieldName, $sheet = 'sDEF', $lang = 'lDEF', $value = 'vDEF') {}
        public function pi_getFFvalueFromSheetArray($sheetArray, $fieldNameArr, $value) {}
    }

}

namespace TYPO3\CMS\Frontend\Imaging {
    /**
     * GIFBUILDER
     *
     * Generating gif/png-files from TypoScript
     * Used by the menu-objects and imgResource in TypoScript.
     *
     * This class allows for advanced rendering of images with various layers of images, text and graphical primitives.
     * The concept is known from TypoScript as "GIFBUILDER" where you can define a "numerical array" (TypoScript term as well) of "GIFBUILDER OBJECTS" (like "TEXT", "IMAGE", etc.) and they will be rendered onto an image one by one.
     * The name "GIFBUILDER" comes from the time where GIF was the only file format supported. PNG is just as well to create today (configured with TYPO3_CONF_VARS[GFX])
     * Not all instances of this class is truly building gif/png files by layers; You may also see the class instantiated for the purpose of using the scaling functions in the parent class.
     *
     * Here is an example of how to use this class (from tslib_content.php, function getImgResource):
     *
     * $gifCreator = GeneralUtility::makeInstance(\TYPO3\CMS\Frontend\Imaging\GifBuilder::class);
     * $gifCreator->init();
     * $theImage='';
     * if ($GLOBALS['TYPO3_CONF_VARS']['GFX']['gdlib']) {
     * $gifCreator->start($fileArray, $this->data);
     * $theImage = $gifCreator->gifBuild();
     * }
     * return $gifCreator->getImageDimensions($theImage);
     */
    class GifBuilder extends \typo3\cms\core\imaging\graphicalfunctions {
        /**
         * Contains all text strings used on this image
         *
         * @var array
         */
        public $combinedTextStrings;
        /**
         * Contains all filenames (basename without extension) used on this image
         *
         * @var array
         */
        public $combinedFileNames;
        /**
         * This is the array from which data->field: [key] is fetched. So this is the current record!
         *
         * @var array
         */
        public $data;
        /**
         * @var array
         */
        public $objBB;
        /**
         * @var string
         */
        public $myClassName;
        /**
         * @var array
         */
        public $charRangeMap;
        /**
         * @var int[]
         */
        public $XY;
        /**
         * @var ContentObjectRenderer
         */
        public $cObj;
        /**
         * @var array
         */
        public $defaultWorkArea;

/** @var $originalFile File */
        public function start(/** @var $originalFile File */
$conf, /** @var $originalFile File */
$data) {}
        /**
         * Initiates the image file generation if ->setup is TRUE and if the file did not exist already.
         * Gets filename from fileName() and if file exists in typo3temp/assets/images/ dir it will - of course - not be rendered again.
         * Otherwise rendering means calling ->make(), then ->output(), then ->destroy()
         *
         * @return string The filename for the created GIF/PNG file. The filename will be prefixed "GB_
         * @see make(), fileName()
         */
        public function gifBuild() {}
        /**
         * The actual rendering of the image file.
         * Basically sets the dimensions, the background color, the traverses the array of GIFBUILDER objects and finally setting the transparent color if defined.
         * Creates a GDlib resource in $this->im and works on that
         * Called by gifBuild()
         *
         * @access private
         * @see gifBuild()
         */
        public function make() {}
        public function checkTextObj($conf) {}
        public function calcOffset($string) {}
/** @var ContentObjectRenderer $cObj */
        public function getResource(/** @var ContentObjectRenderer $cObj */
$file, /** @var ContentObjectRenderer $cObj */
$fileArray) {}
        public function checkFile($file) {}
/** @var $basicFileFunctions \TYPO3\CMS\Core\Utility\File\BasicFileUtility */
        public function fileName(/** @var $basicFileFunctions \TYPO3\CMS\Core\Utility\File\BasicFileUtility */
$pre) {}
        /**
         * Returns the file extension used in the filename
         *
         * @return string Extension; "jpg" or "gif"/"png
         * @access private
         */
        public function extension() {}
        protected function calculateValue($string) {}
        protected function calculateFunctions($string) {}
        protected function calculateMaximum($string) {}
    }

}

namespace TYPO3\CMS\Frontend\Controller {
    /**
     * Class for the built TypoScript based frontend. Instantiated in
     * \TYPO3\CMS\Frontend\Http\RequestHandler as the global object TSFE.
     *
     * Main frontend class, instantiated in \TYPO3\CMS\Frontend\Http\RequestHandler
     * as the global object TSFE.
     *
     * This class has a lot of functions and internal variable which are used from
     * \TYPO3\CMS\Frontend\Http\RequestHandler
     *
     * The class is instantiated as $GLOBALS['TSFE'] in \TYPO3\CMS\Frontend\Http\RequestHandler.
     *
     * The use of this class should be inspired by the order of function calls as
     * found in \TYPO3\CMS\Frontend\Http\RequestHandler.
     */
    class TypoScriptFrontendController implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * The page id (int)
         * @var string
         */
        public $id;
        /**
         * The type (read-only)
         * @var int
         */
        public $type;
        /**
         * The submitted cHash
         * @var string
         */
        public $cHash;
        /**
         * Page will not be cached. Write only TRUE. Never clear value (some other
         * code might have reasons to set it TRUE).
         * @var bool
         */
        public $no_cache;
        /**
         * The rootLine (all the way to tree root, not only the current site!)
         * @var array
         */
        public $rootLine;
        /**
         * The pagerecord
         * @var array
         */
        public $page;
        /**
         * This will normally point to the same value as id, but can be changed to
         * point to another page from which content will then be displayed instead.
         * @var int
         */
        public $contentPid;
        /**
         * Gets set when we are processing a page of type mounpoint with enabled overlay in getPageAndRootline()
         * Used later in checkPageForMountpointRedirect() to determine the final target URL where the user
         * should be redirected to.
         *
         * @var array|null
         */
        protected $originalMountPointPage;
        /**
         * Gets set when we are processing a page of type shortcut in the early stages
         * of the request when we do not know about languages yet, used later in the request
         * to determine the correct shortcut in case a translation changes the shortcut
         * target
         * @var array|null
         * @see checkTranslatedShortcut()
         */
        protected $originalShortcutPage;
        /**
         * sys_page-object, pagefunctions
         *
         * @var PageRepository
         */
        public $sys_page;
        /**
         * Contains all URL handler instances that are active for the current request.
         *
         * The methods isGeneratePage(), isOutputting() and isINTincScript() depend on this property.
         *
         * @var \TYPO3\CMS\Frontend\Http\UrlHandlerInterface[]
         * @see initializeRedirectUrlHandlers()
         */
        protected $activeUrlHandlers;
        /**
         * Is set to 1 if a pageNotFound handler could have been called.
         * @var int
         */
        public $pageNotFound;
        /**
         * Domain start page
         * @var int
         */
        public $domainStartPage;
        /**
         * Array containing a history of why a requested page was not accessible.
         * @var array
         */
        public $pageAccessFailureHistory;
        /**
         * @var string
         */
        public $MP;
        /**
         * This can be set from applications as a way to tag cached versions of a page
         * and later perform some external cache management, like clearing only a part
         * of the cache of a page...
         * @var int
         */
        public $page_cache_reg1;
        /**
         * Contains the value of the current script path that activated the frontend.
         * Typically "index.php" but by rewrite rules it could be something else! Used
         * for Speaking Urls / Simulate Static Documents.
         * @var string
         */
        public $siteScript;
        /**
         * The frontend user
         *
         * @var FrontendUserAuthentication
         */
        public $fe_user;
        /**
         * Global flag indicating that a frontend user is logged in. This is set only if
         * a user really IS logged in. The group-list may show other groups (like added
         * by IP filter or so) even though there is no user.
         * @var bool
         */
        public $loginUser;
        /**
         * (RO=readonly) The group list, sorted numerically. Group '0,-1' is the default
         * group, but other groups may be added by other means than a user being logged
         * in though...
         * @var string
         */
        public $gr_list;
        /**
         * Flag that indicates if a backend user is logged in!
         * @var bool
         */
        public $beUserLogin;
        /**
         * Integer, that indicates which workspace is being previewed.
         * @var int
         */
        public $workspacePreview;
        /**
         * Shows whether logins are allowed in branch
         * @var bool
         */
        public $loginAllowedInBranch;
        /**
         * Shows specific mode (all or groups)
         * @var string
         */
        public $loginAllowedInBranch_mode;
        /**
         * Set to backend user ID to initialize when keyword-based preview is used
         * @var int
         */
        public $ADMCMD_preview_BEUSER_uid;
        /**
         * Flag indication that preview is active. This is based on the login of a
         * backend user and whether the backend user has read access to the current
         * page. A value of 1 means ordinary preview, 2 means preview of a non-live
         * workspace
         * @var int
         */
        public $fePreview;
        /**
         * Flag indicating that hidden pages should be shown, selected and so on. This
         * goes for almost all selection of pages!
         * @var bool
         */
        public $showHiddenPage;
        /**
         * Flag indicating that hidden records should be shown. This includes
         * sys_template and even fe_groups in addition to all
         * other regular content. So in effect, this includes everything except pages.
         * @var bool
         */
        public $showHiddenRecords;
        /**
         * Value that contains the simulated usergroup if any
         * @var int
         */
        public $simUserGroup;
        /**
         * "CONFIG" object from TypoScript. Array generated based on the TypoScript
         * configuration of the current page. Saved with the cached pages.
         * @var array
         */
        public $config;
        /**
         * The TypoScript template object. Used to parse the TypoScript template
         *
         * @var TemplateService
         */
        public $tmpl;
        /**
         * Is set to the time-to-live time of cached pages. If FALSE, default is
         * 60*60*24, which is 24 hours.
         * @var bool|int
         */
        public $cacheTimeOutDefault;
        /**
         * Set internally if cached content is fetched from the database
         * @var bool
         * @internal
         */
        public $cacheContentFlag;
        /**
         * Set to the expire time of cached content
         * @var int
         */
        public $cacheExpires;
        /**
         * Set if cache headers allowing caching are sent.
         * @var bool
         */
        public $isClientCachable;
        /**
         * Used by template fetching system. This array is an identification of
         * the template. If $this->all is empty it's because the template-data is not
         * cached, which it must be.
         * @var array
         */
        public $all;
        /**
         * Toplevel - objArrayName, eg 'page'
         * @var string
         */
        public $sPre;
        /**
         * TypoScript configuration of the page-object pointed to by sPre.
         * $this->tmpl->setup[$this->sPre.'.']
         * @var array
         */
        public $pSetup;
        /**
         * This hash is unique to the template, the $this->id and $this->type vars and
         * the gr_list (list of groups). Used to get and later store the cached data
         * @var string
         */
        public $newHash;
        /**
         * If config.ftu (Frontend Track User) is set in TypoScript for the current
         * page, the string value of this var is substituted in the rendered source-code
         * with the string, '&ftu=[token...]' which enables GET-method usertracking as
         * opposed to cookie based
         * @var string
         */
        public $getMethodUrlIdToken;
        /**
         * This flag is set before inclusion of pagegen.php IF no_cache is set. If this
         * flag is set after the inclusion of pagegen.php, no_cache is forced to be set.
         * This is done in order to make sure that php-code from pagegen does not falsely
         * clear the no_cache flag.
         * @var bool
         */
        public $no_cacheBeforePageGen;
        /**
         * This flag indicates if temporary content went into the cache during
         * page-generation.
         * @var mixed
         */
        public $tempContent;
        /**
         * Passed to TypoScript template class and tells it to force template rendering
         * @var bool
         */
        public $forceTemplateParsing;
        /**
         * The array which cHash_calc is based on, see ->makeCacheHash().
         * @var array
         */
        public $cHash_array;
        /**
         * May be set to the pagesTSconfig
         * @var array
         */
        public $pagesTSconfig;
        /**
         * Eg. insert JS-functions in this array ($additionalHeaderData) to include them
         * once. Use associative keys.
         *
         * Keys in use:
         *
         * used to accumulate additional HTML-code for the header-section,
         * <head>...</head>. Insert either associative keys (like
         * additionalHeaderData['myStyleSheet'], see reserved keys above) or num-keys
         * (like additionalHeaderData[] = '...')
         *
         * @var array
         */
        public $additionalHeaderData;
        /**
         * Used to accumulate additional HTML-code for the footer-section of the template
         * @var array
         */
        public $additionalFooterData;
        /**
         * Used to accumulate additional JavaScript-code. Works like
         * additionalHeaderData. Reserved keys at 'openPic' and 'mouseOver'
         *
         * @var array
         */
        public $additionalJavaScript;
        /**
         * Used to accumulate additional Style code. Works like additionalHeaderData.
         *
         * @var array
         */
        public $additionalCSS;
        /**
         * @var  string
         */
        public $JSCode;
        /**
         * @var string
         */
        public $inlineJS;
        /**
         * Used to accumulate DHTML-layers.
         * @var string
         */
        public $divSection;
        /**
         * Debug flag. If TRUE special debug-output maybe be shown (which includes html-formatting).
         * @var bool
         */
        public $debug;
        /**
         * Default internal target
         * @var string
         */
        public $intTarget;
        /**
         * Default external target
         * @var string
         */
        public $extTarget;
        /**
         * Default file link target
         * @var string
         */
        public $fileTarget;
        /**
         * Keys are page ids and values are default &MP (mount point) values to set
         * when using the linking features...)
         * @var array
         */
        public $MP_defaults;
        /**
         * If set, typolink() function encrypts email addresses. Is set in pagegen-class.
         * @var string|int
         */
        public $spamProtectEmailAddresses;
        /**
         * Absolute Reference prefix
         * @var string
         */
        public $absRefPrefix;
        /**
         * <A>-tag parameters
         * @var string
         */
        public $ATagParams;
        /**
         * Search word regex, calculated if there has been search-words send. This is
         * used to mark up the found search words on a page when jumped to from a link
         * in a search-result.
         * @var string
         */
        public $sWordRegEx;
        /**
         * Is set to the incoming array sword_list in case of a page-view jumped to from
         * a search-result.
         * @var string
         */
        public $sWordList;
        /**
         * A string prepared for insertion in all links on the page as url-parameters.
         * Based on configuration in TypoScript where you defined which GET_VARS you
         * would like to pass on.
         * @var string
         */
        public $linkVars;
        /**
         * If set, edit icons are rendered aside content records. Must be set only if
         * the ->beUserLogin flag is set and set_no_cache() must be called as well.
         * @var string
         */
        public $displayEditIcons;
        /**
         * If set, edit icons are rendered aside individual fields of content. Must be
         * set only if the ->beUserLogin flag is set and set_no_cache() must be called as
         * well.
         * @var string
         */
        public $displayFieldEditIcons;
        /**
         * Site language, 0 (zero) is default, int+ is uid pointing to a sys_language
         * record. Should reflect which language menus, templates etc is displayed in
         * (master language) - but not necessarily the content which could be falling
         * back to default (see sys_language_content)
         * @var int
         */
        public $sys_language_uid;
        /**
         * Site language mode for content fall back.
         * @var string
         */
        public $sys_language_mode;
        /**
         * Site content selection uid (can be different from sys_language_uid if content
         * is to be selected from a fall-back language. Depends on sys_language_mode)
         * @var int
         */
        public $sys_language_content;
        /**
         * Site content overlay flag; If set - and sys_language_content is > 0 - ,
         * records selected will try to look for a translation pointing to their uid. (If
         * configured in [ctrl][languageField] / [ctrl][transOrigP...]
         * Possible values: [0,1,hideNonTranslated]
         * This flag is set based on TypoScript config.sys_language_overlay setting
         *
         * @var int|string
         */
        public $sys_language_contentOL;
        /**
         * Is set to the iso code of the sys_language_content if that is properly defined
         * by the sys_language record representing the sys_language_uid.
         * @var string
         */
        public $sys_language_isocode;
        /**
         * 'Global' Storage for various applications. Keys should be 'tx_'.extKey for
         * extensions.
         * @var array
         */
        public $applicationData;
        /**
         * @var array
         */
        public $register;
        /**
         * Stack used for storing array and retrieving register arrays (see
         * LOAD_REGISTER and RESTORE_REGISTER)
         * @var array
         */
        public $registerStack;
        /**
         * Checking that the function is not called eternally. This is done by
         * interrupting at a depth of 50
         * @var int
         */
        public $cObjectDepthCounter;
        /**
         * Used by RecordContentObject and ContentContentObject to ensure the a records is NOT
         * rendered twice through it!
         * @var array
         */
        public $recordRegister;
        /**
         * This is set to the [table]:[uid] of the latest record rendered. Note that
         * class ContentObjectRenderer has an equal value, but that is pointing to the
         * record delivered in the $data-array of the ContentObjectRenderer instance, if
         * the cObjects CONTENT or RECORD created that instance
         * @var string
         */
        public $currentRecord;
        /**
         * Used by class \TYPO3\CMS\Frontend\ContentObject\Menu\AbstractMenuContentObject
         * to keep track of access-keys.
         * @var array
         */
        public $accessKey;
        /**
         * Numerical array where image filenames are added if they are referenced in the
         * rendered document. This includes only TYPO3 generated/inserted images.
         * @var array
         */
        public $imagesOnPage;
        /**
         * Is set in ContentObjectRenderer->cImage() function to the info-array of the
         * most recent rendered image. The information is used in ImageTextContentObject
         * @var array
         */
        public $lastImageInfo;
        /**
         * Used to generate page-unique keys. Point is that uniqid() functions is very
         * slow, so a unikey key is made based on this, see function uniqueHash()
         * @var int
         */
        public $uniqueCounter;
        /**
         * @var string
         */
        public $uniqueString;
        /**
         * This value will be used as the title for the page in the indexer (if
         * indexing happens)
         * @var string
         */
        public $indexedDocTitle;
        /**
         * Alternative page title (normally the title of the page record). Can be set
         * from applications you make.
         * @var string
         */
        public $altPageTitle;
        /**
         * The base URL set for the page header.
         * @var string
         */
        public $baseUrl;
        /**
         * IDs we already rendered for this page (to make sure they are unique)
         * @var array
         */
        private $usedUniqueIds;
        /**
         * Page content render object
         *
         * @var ContentObjectRenderer
         */
        public $cObj;
        /**
         * All page content is accumulated in this variable. See pagegen.php
         * @var string
         */
        public $content;
        /**
         * Output charset of the websites content. This is the charset found in the
         * header, meta tag etc. If different than utf-8 a conversion
         * happens before output to browser. Defaults to utf-8.
         * @var string
         */
        public $metaCharset;
        /**
         * Set to the system language key (used on the site)
         * @var string
         */
        public $lang;
        /**
         * Internal calculations for labels
         *
         * @var LanguageService
         */
        protected $languageService;
        /**
         * @var LockingStrategyInterface[][]
         */
        protected $locks;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;
        /**
         * The page cache object, use this to save pages to the cache and to
         * retrieve them again
         *
         * @var \TYPO3\CMS\Core\Cache\Backend\AbstractBackend
         */
        protected $pageCache;
        /**
         * @var array
         */
        protected $pageCacheTags;
        /**
         * The cHash Service class used for cHash related functionality
         *
         * @var CacheHashCalculator
         */
        protected $cacheHash;
        /**
         * Runtime cache of domains per processed page ids.
         *
         * @var array
         */
        protected $domainDataCache;
        /**
         * Content type HTTP header being sent in the request.
         * @todo Ticket: #63642 Should be refactored to a request/response model later
         * @internal Should only be used by TYPO3 core for now
         *
         * @var string
         */
        protected $contentType;
        /**
         * Doctype to use
         *
         * @var string
         */
        public $xhtmlDoctype;
        /**
         * @var int
         */
        public $xhtmlVersion;
        /**
         * Originally requested id from the initial $_GET variable
         *
         * @var int
         */
        protected $requestedId;

        public function __construct($_ = null, $id, $type, $no_cache = '', $cHash = '', $_2 = null, $MP = '') {}
        /**
         * Initializes the page renderer object
         */
        protected function initPageRenderer() {}
        public function setContentType($contentType) {}
        /**
         * Connect to SQL database. May exit after outputting an error message
         * or some JavaScript redirecting to the install tool.
         *
         * @throws \RuntimeException
         * @throws ServiceUnavailableException
         */
        public function connectToDB() {}
        /**
         * Initializes the caching system.
         */
        protected function initCaches() {}
        /**
         * Initializes the front-end login user.
         */
        public function initFEuser() {}
        /**
         * Initializes the front-end user groups.
         * Sets ->loginUser and ->gr_list based on front-end user status.
         */
        public function initUserGroups() {}
        /**
         * Checking if a user is logged in or a group constellation different from "0,-1"
         *
         * @return bool TRUE if either a login user is found (array fe_user->user) OR if the gr_list is set to something else than '0,-1' (could be done even without a user being logged in!)
         */
        public function isUserOrGroupSet() {}
        /**
         * Provides ways to bypass the '?id=[xxx]&type=[xx]' format, using either PATH_INFO or virtual HTML-documents (using Apache mod_rewrite)
         *
         * Two options:
         * 1) Use PATH_INFO (also Apache) to extract id and type from that var. Does not require any special modules compiled with apache. (less typical)
         * 2) Using hook which enables features like those provided from "realurl" extension (AKA "Speaking URLs")
         */
        public function checkAlternativeIdMethods() {}
        /**
         * Clears the preview-flags, sets sim_exec_time to current time.
         * Hidden pages must be hidden as default, $GLOBALS['SIM_EXEC_TIME'] is set to $GLOBALS['EXEC_TIME']
         * in bootstrap initializeGlobalTimeVariables(). Alter it by adding or subtracting seconds.
         */
        public function clear_preview() {}
        /**
         * Checks if a backend user is logged in
         *
         * @return bool whether a backend user is logged in
         */
        public function isBackendUserLoggedIn() {}
        /**
         * Creates the backend user object and returns it.
         *
         * @return FrontendBackendUserAuthentication the backend user object
         */
        public function initializeBackendUser() {}
        /**
         * Determines the id and evaluates any preview settings
         * Basically this function is about determining whether a backend user is logged in,
         * if he has read access to the page and if he's previewing the page.
         * That all determines which id to show and how to initialize the id.
         */
        public function determineId() {}
        /**
         * Checks if the page is hidden in the active workspace.
         * If it is hidden, preview flags will be set.
         *
         * @return bool
         */
        protected function determineIdIsHiddenPage() {}
        /**
         * Resolves the page id and sets up several related properties.
         *
         * If $this->id is not set at all or is not a plain integer, the method
         * does it's best to set the value to an integer. Resolving is based on
         * this options:
         *
         * - Splitting $this->id if it contains an additional type parameter.
         * - Getting the id for an alias in $this->id
         * - Finding the domain record start page
         * - First visible page
         * - Relocating the id below the domain record if outside
         *
         * The following properties may be set up or updated:
         *
         * - id
         * - requestedId
         * - type
         * - domainStartPage
         * - sys_page
         * - sys_page->where_groupAccess
         * - sys_page->where_hid_del
         * - loginUser
         * - gr_list
         * - no_cache
         * - register['SYS_LASTCHANGED']
         * - pageNotFound
         *
         * Via getPageAndRootlineWithDomain()
         *
         * - rootLine
         * - page
         * - MP
         * - originalShortcutPage
         * - originalMountPointPage
         * - pageAccessFailureHistory['direct_access']
         * - pageNotFound
         *
         * @todo:
         *
         * On the first impression the method does to much. This is increased by
         * the fact, that is is called repeated times by the method determineId.
         * The reasons are manifold.
         *
         * 1.) The first part, the creation of sys_page, the type and alias
         * resolution don't need to be repeated. They could be separated to be
         * called only once.
         *
         * 2.) The user group setup could be done once on a higher level.
         *
         * 3.) The workflow of the resolution could be elaborated to be less
         * tangled. Maybe the check of the page id to be below the domain via the
         * root line doesn't need to be done each time, but for the final result
         * only.
         *
         * 4.) The root line does not need to be directly addressed by this class.
         * A root line is always related to one page. The rootline could be handled
         * indirectly by page objects. Page objects still don't exist.
         *
         * @throws ServiceUnavailableException
         * @access private
         */
        public function fetch_the_id() {}
        /**
         * Loads the page and root line records based on $this->id
         *
         * A final page and the matching root line are determined and loaded by
         * the algorithm defined by this method.
         *
         * First it loads the initial page from the page repository for $this->id.
         * If that can't be loaded directly, it gets the root line for $this->id.
         * It walks up the root line towards the root page until the page
         * repository can deliver a page record. (The loading restrictions of
         * the root line records are more liberal than that of the page record.)
         *
         * Now the page type is evaluated and handled if necessary. If the page is
         * a short cut, it is replaced by the target page. If the page is a mount
         * point in overlay mode, the page is replaced by the mounted page.
         *
         * After this potential replacements are done, the root line is loaded
         * (again) for this page record. It walks up the root line up to
         * the first viewable record.
         *
         * (While upon the first accessibility check of the root line it was done
         * by loading page by page from the page repository, this time the method
         * checkRootlineForIncludeSection() is used to find the most distant
         * accessible page within the root line.)
         *
         * Having found the final page id, the page record and the root line are
         * loaded for last time by this method.
         *
         * Exceptions may be thrown for DOKTYPE_SPACER and not loadable page records
         * or root lines.
         *
         * If $GLOBALS['TYPO3_CONF_VARS']['FE']['pageNotFound_handling'] is set,
         * instead of throwing an exception it's handled by a page unavailable
         * handler.
         *
         * May set or update this properties:
         *
         * @see TypoScriptFrontendController::$id
         * @see TypoScriptFrontendController::$MP
         * @see TypoScriptFrontendController::$page
         * @see TypoScriptFrontendController::$pageNotFound
         * @see TypoScriptFrontendController::$pageAccessFailureHistory
         * @see TypoScriptFrontendController::$originalMountPointPage
         * @see TypoScriptFrontendController::$originalShortcutPage
         *
         * @throws ServiceUnavailableException
         * @throws PageNotFoundException
         * @access private
         */
        public function getPageAndRootline() {}
        /**
         * If $this->id contains a translated page record, this needs to be resolved to the default language
         * in order for all rootline functionality and access restrictions to be in place further on.
         *
         * Additionally, if a translated page is found, $this->sys_language_uid/sys_language_content is set as well.
         */
        protected function resolveTranslatedPageId() {}
        public function getPageShortcut($SC, $mode, $thisUid, $itera = 20, $pageLog = [ ], $disableGroupCheck = false) {}
        /**
         * Checks the current rootline for defined sections.
         *
         * @return bool
         * @access private
         */
        public function checkRootlineForIncludeSection() {}
        public function checkEnableFields($row, $bypassGroupCheck = false) {}
        public function checkPageGroupAccess($row, $groupList = null) {}
        public function checkPagerecordForIncludeSection($row) {}
        /**
         * Checks if logins are allowed in the current branch of the page tree. Traverses the full root line and returns TRUE if logins are OK, otherwise FALSE (and then the login user must be unset!)
         *
         * @return bool returns TRUE if logins are OK, otherwise FALSE (and then the login user must be unset!)
         */
        public function checkIfLoginAllowedInBranch() {}
        /**
         * Analysing $this->pageAccessFailureHistory into a summary array telling which features disabled display and on which pages and conditions. That data can be used inside a page-not-found handler
         *
         * @return array Summary of why page access was not allowed.
         */
        public function getPageAccessFailureReasons() {}
        public function getPageAndRootlineWithDomain($domainStartPage) {}
        /**
         * Sets sys_page where-clause
         *
         * @access private
         */
        public function setSysPageWhereClause() {}
        public function findDomainRecord($recursive = false) {}
        public function pageUnavailableAndExit($reason = '', $header = '') {}
        public function pageNotFoundAndExit($reason = '', $header = '') {}
        /**
         * Checks whether the pageUnavailableHandler should be used. To be used, pageUnavailable_handling must be set
         * and devIPMask must not match the current visitor's IP address.
         *
         * @return bool TRUE/FALSE whether the pageUnavailable_handler should be used.
         */
        public function checkPageUnavailableHandler() {}
        public function pageUnavailableHandler($code, $header, $reason) {}
        public function pageNotFoundHandler($code, $header = '', $reason = '') {}
        public function pageErrorHandler($code, $header = '', $reason = '') {}
        /**
         * Fetches the integer page id for a page alias.
         * Looks if ->id is not an integer and if so it will search for a page alias and if found the page uid of that page is stored in $this->id
         *
         * @access private
         */
        public function checkAndSetAlias() {}
        public function mergingWithGetVars($GET_VARS) {}
        /**
         * Calculates a hash string based on additional parameters in the url.
         *
         * Calculated hash is stored in $this->cHash_array.
         * This is used to cache pages with more parameters than just id and type.
         *
         * @see reqCHash()
         */
        public function makeCacheHash() {}
        /**
         * Will disable caching if the cHash value was not set.
         * This function should be called to check the _existence_ of "&cHash" whenever a plugin generating cacheable output is using extra GET variables. If there _is_ a cHash value the validation of it automatically takes place in makeCacheHash() (see above)
         *
         * @see makeCacheHash(), \TYPO3\CMS\Frontend\Plugin\AbstractPlugin::pi_cHashCheck()
         */
        public function reqCHash() {}
        /**
         * Initialize the TypoScript template parser
         */
        public function initTemplate() {}
        /**
         * See if page is in cache and get it if so
         * Stores the page content in $this->content if something is found.
         *
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        public function getFromCache() {}
        /**
         * Returning the cached version of page with hash = newHash
         *
         * @return array Cached row, if any. Otherwise void.
         */
        public function getFromCache_queryRow() {}
        /**
         * Detecting if shift-reload has been clicked
         * Will not be called if re-generation of page happens by other reasons (for instance that the page is not in cache yet!)
         * Also, a backend user MUST be logged in for the shift-reload to be detected due to DoS-attack-security reasons.
         *
         * @return bool If shift-reload in client browser has been clicked, disable getting cached page (and regenerate it).
         */
        public function headerNoCache() {}
        /**
         * Calculates the cache-hash
         * This hash is unique to the template, the variables ->id, ->type, ->gr_list (list of groups), ->MP (Mount Points) and cHash array
         * Used to get and later store the cached data.
         *
         * @return string MD5 hash of serialized hash base from createHashBase()
         * @access private
         * @see getFromCache(), getLockHash()
         */
        public function getHash() {}
        /**
         * Calculates the lock-hash
         * This hash is unique to the above hash, except that it doesn't contain the template information in $this->all.
         *
         * @return string MD5 hash
         * @access private
         * @see getFromCache(), getHash()
         */
        public function getLockHash() {}
        protected function createHashBase($createLockHashBase = false) {}
        /**
         * Checks if config-array exists already but if not, gets it
         *
         * @throws ServiceUnavailableException
         */
        public function getConfigArray() {}
        /**
         * Setting the language key that will be used by the current page.
         * In this function it should be checked, 1) that this language exists, 2) that a page_overlay_record exists, .. and if not the default language, 0 (zero), should be set.
         *
         * @access private
         */
        public function settingLanguage() {}
        /**
         * Updating content of the two rootLines IF the language key is set!
         */
        protected function updateRootLinesWithTranslations() {}
        /**
         * Setting locale for frontend rendering
         */
        public function settingLocale() {}
        /**
         * Checks whether a translated shortcut page has a different shortcut
         * target than the original language page.
         * If that is the case, things get corrected to follow that alternative
         * shortcut
         */
        protected function checkTranslatedShortcut() {}
        /**
         * Handle data submission
         * This is done at this point, because we need the config values
         */
        public function handleDataSubmission() {}
        /** @var UrlHandlerInterface $urlHandler */
        public function initializeRedirectUrlHandlers() {}
        /**
         * Loops over all registered URL handlers and lets them process the current URL.
         *
         * If no handler has stopped the current process (e.g. by redirecting) and a
         * the redirectUrl propert is not empty, the user will be redirected to this URL.
         *
         * @internal Should be called by the FrontendRequestHandler only.
         */
        public function redirectToExternalUrl() {}
        /**
         * Sets the URL_ID_TOKEN in the internal var, $this->getMethodUrlIdToken
         * This feature allows sessions to use a GET-parameter instead of a cookie.
         *
         * @access private
         */
        public function setUrlIdToken() {}
        /**
         * Calculates and sets the internal linkVars based upon the current
         * $_GET parameters and the setting "config.linkVars".
         */
        public function calculateLinkVars() {}
        protected function splitLinkVarsString(string $string) : array {}
        protected function isAllowedLinkVarValue(string $haystack, string $needle) : bool {}
        /**
         * Redirect to target page if the current page is an overlaid mountpoint.
         *
         * If the current page is of type mountpoint and should be overlaid with the contents of the mountpoint page
         * and is accessed directly, the user will be redirected to the mountpoint context.
         */
        public function checkPageForMountpointRedirect() {}
        /**
         * Redirect to target page, if the current page is a Shortcut.
         *
         * If the current page is of type shortcut and accessed directly via its URL, this function redirects to the
         * Shortcut target using a Location header.
         */
        public function checkPageForShortcutRedirect() {}
        /** @var $cObj ContentObjectRenderer */
        protected function redirectToCurrentPage() {}
        /**
         * Returns TRUE if the page should be generated.
         * That is if no URL handler is active and the cacheContentFlag is not set.
         *
         * @return bool
         */
        public function isGeneratePage() {}
        /**
         * Temp cache content
         * The temporary cache will expire after a few seconds (typ. 30) or will be cleared by the rendered page, which will also clear and rewrite the cache.
         */
        public function tempPageCacheContent() {}
        /**
         * Set cache content to $this->content
         */
        public function realPageCacheContent() {}
        public function setPageCacheContent($content, $data, $expirationTstamp) {}
        /**
         * Clears cache content (for $this->newHash)
         */
        public function clearPageCacheContent() {}
        public function clearPageCacheContent_pidList($pidList) {}
        /**
         * Sets sys last changed
         * Setting the SYS_LASTCHANGED value in the pagerecord: This value will thus be set to the highest tstamp of records rendered on the page. This includes all records with no regard to hidden records, userprotection and so on.
         *
         * @see ContentObjectRenderer::lastChanged()
         */
        public function setSysLastChanged() {}
        /**
         * Release pending locks
         *
         * @internal
         */
        public function releaseLocks() {}
        public function addCacheTags(array $tags) {}
        /**
         * Does some processing BEFORE the pagegen script is included.
         */
        public function generatePage_preProcessing() {}
        /**
         * Previously located in static method in PageGenerator::init. Is solely used to set up TypoScript
         * config. options and set properties in $TSFE for that.
         */
        public function preparePageContentGeneration() {}
        /**
         * Fills the sWordList property and builds the regular expression in TSFE that can be used to split
         * strings by the submitted search words.
         *
         * @see sWordList
         * @see sWordRegEx
         */
        protected function initializeSearchWordDataInTsfe() {}
        /**
         * Does some processing AFTER the pagegen script is included.
         * This includes caching the page, indexing the page (if configured) and setting sysLastChanged
         */
        public function generatePage_postProcessing() {}
        /**
         * Generate the page title, can be called multiple times,
         * as $this->altPageTitle might have been modified by an uncached plugin etc.
         *
         * @return string the generated page title
         */
        public function generatePageTitle() : string {}
        protected function printTitle(string $pageTitle, bool $noTitle = false, bool $showTitleFirst = false, string $pageTitleSeparator = '') : string {}
        /** @var PageRenderer $pageRenderer */
        public function INTincScript() {}
        /**
         * Replaces INT placeholders (COA_INT and USER_INT) in $this->content
         * In case the replacement adds additional placeholders, it loops
         * until no new placeholders are found any more.
         */
        protected function recursivelyReplaceIntPlaceholdersInContent() {}
        protected function INTincScript_process($INTiS_config) {}
        /**
         * Loads the JavaScript code for INTincScript
         */
        public function INTincScript_loadJSCode() {}
        /**
         * Determines if there are any INTincScripts to include.
         *
         * @return bool Returns TRUE if scripts are found and no URL handler is active.
         */
        public function isINTincScript() {}
        /**
         * Determines if content should be outputted.
         * Outputting content is done only if no URL handler is active and no hook disables the output.
         *
         * @return bool Returns TRUE if no redirect URL is set and no hook disables the output.
         */
        public function isOutputting() {}
        /**
         * Process the output before it's actually outputted. Sends headers also.
         *
         * This includes substituting the "username" comment, sending additional headers
         * (as defined in the TypoScript "config.additionalheaders" object), XHTML cleaning content (if configured)
         * Works on $this->content.
         */
        public function processOutput() {}
        /**
         * Send cache headers good for client/reverse proxy caching
         * This function should not be called if the page content is
         * temporary (like for "Page is being generated..." message,
         * but in that case it is ok because the config-variables
         * are not yet available and so will not allow to send
         * cache headers)
         */
        public function sendCacheHeaders() {}
        /**
         * Reporting status whether we can send cache control headers for proxy caching or publishing to static files
         *
         * Rules are:
         * no_cache cannot be set: If it is, the page might contain dynamic content and should never be cached.
         * There can be no USER_INT objects on the page ("isINTincScript()") because they implicitly indicate dynamic content
         * There can be no logged in user because user sessions are based on a cookie and thereby does not offer client caching a chance to know if the user is logged in. Actually, there will be a reverse problem here; If a page will somehow change when a user is logged in he may not see it correctly if the non-login version sent a cache-header! So do NOT use cache headers in page sections where user logins change the page content. (unless using such as realurl to apply a prefix in case of login sections)
         *
         * @return bool
         */
        public function isStaticCacheble() {}
        /**
         * Substitute various tokens in content. This should happen only if the content is not cached by proxies or client browsers.
         */
        public function contentStrReplace() {}
        /**
         * Stores session data for the front end user
         */
        public function storeSessionData() {}
        /**
         * Outputs preview info.
         */
        public function previewInfo() {}
        /**
         * End-Of-Frontend hook
         */
        public function hook_eofe() {}
        /**
         * Sends HTTP headers for temporary content. These headers prevent search engines from caching temporary content and asks them to revisit this page again.
         */
        public function addTempContentHttpHeaders() {}
        /**
         * Creates an instance of ContentObjectRenderer in $this->cObj
         * This instance is used to start the rendering of the TypoScript template structure
         *
         * @see pagegen.php
         */
        public function newCObj() {}
        /** @var $storageRepository StorageRepository */
        public function setAbsRefPrefix() {}
        public function baseUrlWrap($url) {}
        public function logDeprecatedTyposcript($typoScriptProperty, $explanation = '') {}
        /**
         * Returns TRUE if workspace preview is enabled
         *
         * @return bool Returns TRUE if workspace preview is enabled
         */
        public function doWorkspacePreview() {}
        /**
         * Returns the uid of the current workspace
         *
         * @return int|null returns workspace integer for which workspace is being preview. NULL if none.
         */
        public function whichWorkspace() {}
        /**
         * Returns the pages TSconfig array based on the currect ->rootLine
         *
         * @return array
         */
        public function getPagesTSconfig() {}
        public function setJS($key, $content = '') {}
        public function setCSS($key, $content) {}
        public function uniqueHash($str = '') {}
        public function set_no_cache($reason = '', $internal = false) {}
        /**
         * Disables caching of the current page.
         *
         * @internal
         */
        protected function disableCache() {}
        public function set_cache_timeout_default($seconds) {}
        /** @var $runtimeCache \TYPO3\CMS\Core\Cache\Frontend\AbstractFrontend */
        public function get_cache_timeout() {}
        public function getUniqueId($desired = '') {}
        public function sL($input) {}
        public function readLLfile($fileRef) {}
        public function getLLL($index, $LOCAL_LANG) {}
        /**
         * Initializing the getLL variables needed.
         *
         * @see settingLanguage()
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10.
         */
        public function initLLvars() {}
        protected function setOutputLanguage($language = 'default') {}
/** @var CharsetConverter $charsetConverter */
        public function convOutputCharset(/** @var CharsetConverter $charsetConverter */
$content) {}
        /**
         * Converts the $_POST array from metaCharset (page HTML charset from input form) to utf-8 (internal processing) IF the two charsets are different.
         */
        public function convPOSTCharset() {}
        protected function convertCharsetRecursivelyToUtf8($data, string $fromCharset) {}
        /**
         * Calculates page cache timeout according to the records with starttime/endtime on the page.
         *
         * @return int Page cache timeout or PHP_INT_MAX if cannot be determined
         */
        protected function calculatePageCacheTimeout() {}
        /**
         * Obtains a list of table/pid pairs to consider for page caching.
         *
         * TS configuration looks like this:
         *
         * The cache lifetime of all pages takes starttime and endtime of news records of page 14 into account:
         * config.cache.all = tt_news:14
         *
         * The cache lifetime of page 42 takes starttime and endtime of news records of page 15 and addresses of page 16 into account:
         * config.cache.42 = tt_news:15,tt_address:16
         *
         * @return array Array of 'tablename:pid' pairs. There is at least a current page id in the array
         * @see TypoScriptFrontendController::calculatePageCacheTimeout()
         */
        protected function getCurrentPageCacheConfiguration() {}
        protected function getFirstTimeValueForRecord($tableDef, $now) {}
        /**
         * Fetches/returns the cached contents of the sys_domain database table.
         *
         * @return array Domain data
         */
        protected function getSysDomainCache() {}
        public function domainNameMatchesCurrentRequest($domainName) {}
        public function getDomainDataForPid($targetPid) {}
        public function getDomainNameForPid($targetPid) {}
        /**
         * Fetches the originally requested id, fallsback to $this->id
         *
         * @return int the originally requested page uid
         * @see fetch_the_id()
         */
        public function getRequestedId() {}
        protected function acquireLock($type, $key) {}
        protected function releaseLock($type) {}
        /**
         * Send additional headers from config.additionalHeaders
         *
         * @see \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController::processOutput()
         */
        protected function sendAdditionalHeaders() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Backend\FrontendBackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
    }

    /**
     * eID-Script "tx_cms_showpic"
     *
     * Shows a picture from FAL in enlarged format in a separate window.
     * Picture file and settings is supplied by GET-parameters:
     *
     *  - file = fileUid or Combined Identifier
     *  - encoded in an parameter Array (with weird format - see ContentObjectRenderer about ll. 1500)
     *  - width, height = usual width an height, m/c supported
     *  - frame
     *  - bodyTag
     *  - title
     */
    class ShowImageController {
        /**
         * @var \Psr\Http\Message\ServerRequestInterface
         */
        protected $request;
        /**
         * @var \TYPO3\CMS\Core\Resource\File
         */
        protected $file;
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $height;
        /**
         * @var string
         */
        protected $crop;
        /**
         * @var int
         */
        protected $frame;
        /**
         * @var string
         */
        protected $bodyTag;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $content;
        /**
         * @var string
         */
        protected $imageTag;

        /**
         * Init function, setting the input vars in the global space.
         *
         * @throws \InvalidArgumentException
         * @throws \TYPO3\CMS\Core\Resource\Exception\FileDoesNotExistException
         */
        public function initialize() {}
        /**
         * Main function which creates the image if needed and outputs the HTML code for the page displaying the image.
         * Accumulates the content in $this->content
         */
        public function main() {}
        /**
         * Does the actual image processing
         *
         * @return \TYPO3\CMS\Core\Resource\ProcessedFile
         */
        protected function processImage() {}
        public function processRequest(ServerRequestInterface $request, ResponseInterface $response) {}
    }

    class PageInformationController extends \typo3\cms\info\controller\pageinformationcontroller {}

    class TranslationStatusController extends \typo3\cms\info\controller\translationstatuscontroller {}

}

namespace TYPO3\CMS\Frontend\Http {
    define('TYPO3_MODE', 'FE');

    /**
     * Entry point for the TYPO3 Frontend
     */
    class Application implements \typo3\cms\core\core\applicationinterface {
        /**
         * @var Bootstrap
         */
        protected $bootstrap;
        /**
         * Number of subdirectories where the entry script is located, relative to PATH_site
         * Usually this is equal to PATH_site = 0
         * @var int
         */
        protected $entryPointLevel;
        /**
         * All available request handlers that can deal with a Frontend Request
         * @var array
         */
        protected $availableRequestHandlers;

        public function __construct($classLoader) {}
        public function run(callable $execute = null) {}
        /**
         * Define constants and variables
         */
        protected function defineLegacyConstants() {}
    }

    /**
     * Lightweight alternative to the regular RequestHandler used when $_GET[eID] is set.
     * In the future, logic from the EidUtility will be moved to this class.
     */
    class EidRequestHandler implements \typo3\cms\core\http\requesthandlerinterface {
        /**
         * Instance of the current TYPO3 bootstrap
         * @var Bootstrap
         */
        protected $bootstrap;

        public function __construct(Bootstrap $bootstrap) {}
/** @var TimeTracker $timeTracker */
        public function handleRequest(/** @var TimeTracker $timeTracker */
ServerRequestInterface $request) {}
        public function canHandleRequest(ServerRequestInterface $request) {}
        /**
         * Returns the priority - how eager the handler is to actually handle the
         * request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() {}
/** @var Dispatcher $dispatcher */
        protected function dispatch(/** @var Dispatcher $dispatcher */
$request) {}
    }

    /**
     * This is the main entry point of the TypoScript driven standard front-end
     *
     * Basically put, this is the script which all requests for TYPO3 delivered pages goes to in the
     * frontend (the website). The script instantiates a $TSFE object, includes libraries and does a little logic here
     * and there in order to instantiate the right classes to create the webpage.
     * Previously, this was called index_ts.php and also included the logic for the lightweight "eID" concept,
     * which is now handled in a separate request handler (EidRequestHandler).
     */
    class RequestHandler implements \typo3\cms\core\http\requesthandlerinterface {
        /**
         * Instance of the current TYPO3 bootstrap
         * @var Bootstrap
         */
        protected $bootstrap;
        /**
         * Instance of the timetracker
         * @var TimeTracker
         */
        protected $timeTracker;
        /**
         * Instance of the TSFE object
         * @var TypoScriptFrontendController
         */
        protected $controller;
        /**
         * The request handed over
         * @var \Psr\Http\Message\ServerRequestInterface
         */
        protected $request;

        public function __construct(Bootstrap $bootstrap) {}
/** @var $GLOBALS['BE_USER'] \TYPO3\CMS\Backend\FrontendBackendUserAuthentication */
        public function handleRequest(/** @var $GLOBALS['BE_USER'] \TYPO3\CMS\Backend\FrontendBackendUserAuthentication */
\Psr\Http\Message\ServerRequestInterface $request) {}
        public function canHandleRequest(\Psr\Http\Message\ServerRequestInterface $request) {}
        /**
         * Returns the priority - how eager the handler is to actually handle the
         * request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() {}
        /**
         * Initializes output compression when enabled, could be split up and put into Bootstrap
         * at a later point
         */
        protected function initializeOutputCompression() {}
        /** @var TimeTracker timeTracker */
        protected function initializeTimeTracker() {}
        /**
         * Creates an instance of TSFE and sets it as a global variable
         */
        protected function initializeController() {}
    }


    /**
     * This interface needs to be implemented by all classes that register for the hook in:
     * $GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['urlProcessing']['urlProcessors']
     *
     * It can be used manipulate URLs that are generated by the ContentObjectRenderer.
     */
    interface UrlProcessorInterface {
    const CONTEXT_EXTERNAL = 'external';
    const CONTEXT_MAIL = 'mail';
    const CONTEXT_FILE = 'file';
    const CONTEXT_COMMON = 'common';
        function process($context, $url, array $configuration, \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $contentObjectRenderer, $keepProcessing) ;
    }

    /**
     * This interface needs to be implemented by all classes that register for the hook in:
     * $GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['urlProcessing']['urlHandlers']
     *
     * It can be used to do custom URL processing during a Frontend request.
     */
    interface UrlHandlerInterface {
        /**
         * Return TRUE if this hook handles the current URL.
         * Warning! If TRUE is returned content rendering will be disabled!
         * This method will be called in the constructor of the TypoScriptFrontendController
         *
         * @see \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController::__construct()
         * @see \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController::initializeRedirectUrlHandlers()
         * @return bool
         */
        function canHandleCurrentUrl() ;
        /**
         * Custom processing of the current URL.
         *
         * If canHandle() has returned TRUE this method needs to take care of redirecting the user or generating custom output.
         * This hook will be called BEFORE the user is redirected to an external URL configured in the page properties.
         *
         * @see \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController::redirectToExternalUrl()
         */
        function handle() ;
    }

}

namespace TYPO3\CMS\Frontend\Hooks {
    /**
     * Hooks / manipulation data for TCA columns e.g. to sort items within itemsProcFunc
     */
    class TableColumnHooks {
        public function sortPluginList(array $parameters) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Adds extra fields into 'media' flexform
     */
    class MediaItemHooks implements \typo3\cms\core\singletoninterface {
        public function customMediaRenderTypes($params, $conf) {}
        public function customMediaParams($params, $conf) {}
    }

    /**
     * Uses frontend hooks to show preview informations
     */
    class FrontendHooks {
        public function hook_previewInfo($params, $pObj) {}
    }

    /**
     * Class that hooks into DataHandler and listens for updates to pages to update the
     * treelist cache
     */
    class TreelistCacheUpdateHooks {
        /**
         * Should not be manipulated from others except through the
         * configuration provided @see __construct()
         *
         * @var array
         */
        private $updateRequiringFields;

        /**
         * Constructor, adds update requiring fields to the default ones
         */
        public function __construct() {}
        public function processDatamap_afterDatabaseOperations($status, $table, $recordId, array $updatedFields, DataHandler $dataHandler) {}
        public function processCmdmap_postProcess($command, $table, $recordId, $commandValue, DataHandler $dataHandler) {}
        public function moveRecord_firstElementPostProcess($table, $recordId, $destinationPid, array $movedRecord, array $updatedFields, DataHandler $dataHandler) {}
        public function moveRecord_afterAnotherElementPostProcess($table, $recordId, $destinationPid, $originalDestinationPid, array $movedRecord, array $updatedFields, DataHandler $dataHandler) {}
        protected function requiresUpdate(array $updatedFields) {}
        protected function processClearCacheActions($affectedPage, $affectedParentPage, $updatedFields, array $actions) {}
        protected function clearCacheForAllParents($affectedParentPage) {}
        protected function clearCacheWhereUidInTreelist($affectedPage) {}
        protected function setCacheExpiration($affectedPage, $expirationTime) {}
        /**
         * Removes all expired treelist cache entries
         */
        protected function removeExpiredCacheEntries() {}
        protected function determineClearCacheActions($status, $updatedFields) {}
    }

}

namespace TYPO3\CMS\Frontend\Hooks\PageLayoutView {
    /**
     * Contains a preview rendering for the page module of CType="text"
     */
    class TextPreviewRenderer implements \typo3\cms\backend\view\pagelayoutviewdrawitemhookinterface {
        public function preProcess(\TYPO3\CMS\Backend\View\PageLayoutView $parentObject, $drawItem, $headerContent, $itemContent, array $row) {}
    }

    /**
     * Contains a preview rendering for the page module of CType="textmedia"
     */
    class TextmediaPreviewRenderer implements \typo3\cms\backend\view\pagelayoutviewdrawitemhookinterface {
        public function preProcess(PageLayoutView $parentObject, $drawItem, $headerContent, $itemContent, array $row) {}
    }

    /**
     * Contains a preview rendering for the page module of CType="textpic"
     */
    class TextpicPreviewRenderer implements \typo3\cms\backend\view\pagelayoutviewdrawitemhookinterface {
        public function preProcess(\TYPO3\CMS\Backend\View\PageLayoutView $parentObject, $drawItem, $headerContent, $itemContent, array $row) {}
    }

    /**
     * Contains a preview rendering for the page module of CType="image"
     */
    class ImagePreviewRenderer implements \typo3\cms\backend\view\pagelayoutviewdrawitemhookinterface {
        public function preProcess(\TYPO3\CMS\Backend\View\PageLayoutView $parentObject, $drawItem, $headerContent, $itemContent, array $row) {}
    }

}

namespace TYPO3\CMS\Frontend\View {
    /**
     * View class for the admin panel in frontend editing.
     */
    class AdminPanelView {
        /**
         * Determines whether the update button should be shown.
         *
         * @var bool
         */
        protected $extNeedUpdate;
        /**
         * Force preview
         *
         * @var bool
         */
        protected $ext_forcePreview;
        /**
         * @var string
         */
        protected $extJSCODE;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * Determines whether EXT:feedit is loaded
         *
         * @var bool
         */
        protected $extFeEditLoaded;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initializes settings for the admin panel.
         */
        public function initialize() {}
        /**
         * Add an additional stylesheet
         *
         * @return string
         */
        public function getAdminPanelHeaderData() {}
        public function isAdminModuleEnabled($key) {}
        /**
         * Saves any change in settings made in the Admin Panel.
         * Called from \TYPO3\CMS\Frontend\Http\RequestHandler right after access check for the Admin Panel
         */
        public function saveConfigOptions() {}
        public function extGetFeAdminValue($sectionName, $val = '') {}
        /**
         * Enables the force preview option.
         */
        public function forcePreview() {}
        public function isAdminModuleOpen($key) {}
        protected function getModule($key, $content) {}
        /**
         * Creates and returns the HTML code for the Admin Panel in the TSFE frontend.
         *
         * @throws \UnexpectedValueException
         * @return string HTML for the Admin Panel
         */
        public function display() {}
        protected function getHiddenFields($key, array $val) {}
        /**
         * Creates the content for the "preview" section ("module") of the Admin Panel
         *
         * @return string HTML content for the section. Consists of a string with table-rows with four columns.
         * @see display()
         */
        protected function getPreviewModule() {}
        /**
         * Creates the content for the "cache" section ("module") of the Admin Panel
         *
         * @return string HTML content for the section. Consists of a string with table-rows with four columns.
         * @see display()
         */
        protected function getCacheModule() {}
        /**
         * Creates the content for the "edit" section ("module") of the Admin Panel
         *
         * @return string HTML content for the section. Consists of a string with table-rows with four columns.
         * @see display()
         */
        protected function getEditModule() {}
        /**
         * Creates the content for the "tsdebug" section ("module") of the Admin Panel
         *
         * @return string HTML content for the section. Consists of a string with table-rows with four columns.
         * @see display()
         */
        protected function getTSDebugModule() {}
        /**
         * Creates the content for the "info" section ("module") of the Admin Panel
         *
         * @return string HTML content for the section. Consists of a string with table-rows with four columns.
         * @see display()
         */
        protected function getInfoModule() {}
        public function extGetHead($sectionSuffix) {}
        public function linkSectionHeader($sectionSuffix, $sectionTitle, $className = '') {}
        public function extGetItem($title, $content = '', $checkbox = '', $outerDivClass = null, $innerDivClass = null) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function ext_makeToolBar() {}
        protected function extGetLL($key, $convertWithHtmlspecialchars = true) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Backend\FrontendBackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
    }


    /**
     * Interface for classes which hook into AdminPanelView
     */
    interface AdminPanelViewHookInterface {
        function extendAdminPanel($moduleContent, AdminPanelView $obj) ;
    }

}

namespace TYPO3\CMS\Frontend\Aspect {
    /**
     * Class FileMetadataTranslationAspect
     *
     * We do not have AOP in TYPO3 for now, thus the aspect which
     * deals with metadata translation is a slot which reacts on a signal
     * in the Index\MetadataRepository.
     *
     * The aspect injects user permissions and mount points into the storage
     * based on user or group configuration.
     */
    class FileMetadataOverlayAspect {
        public function languageAndWorkspaceOverlay(\ArrayObject $data) {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected function getTsfe() {}
    }

}

namespace TYPO3\CMS\Frontend\Service {
    /**
     * This class provides basic functionality to encode and decode typolink strings
     */
    class TypoLinkCodecService {
        /**
         * Delimiter for TypoLink string parts
         *
         * @var string
         */
        static protected $partDelimiter;
        /**
         * Symbol for TypoLink parts not specified
         *
         * @var string
         */
        static protected $emptyValueSymbol;

        public function encode(array $typoLinkParts) {}
        public function decode($typoLink) {}
    }

}

namespace TYPO3\CMS\Frontend\Resource {
    /**
     * Object to collect files from various sources during runtime
     * Sources can be file references, file collections or folders
     *
     * Use in FILES Content Object or for a Fluid Data Processor
     *
     * Is not persisted, use only in FE.
     */
    class FileCollector implements \countable, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * The files
         *
         * @var array
         */
        protected $files;
        /**
         * The file repository
         *
         * @var \TYPO3\CMS\Core\Resource\FileRepository
         */
        protected $fileRepository;
        /**
         * The file collection repository
         *
         * @var \TYPO3\CMS\Core\Resource\FileCollectionRepository
         */
        protected $fileCollectionRepository;
        /**
         * The resource factory
         *
         * @var \TYPO3\CMS\Core\Resource\ResourceFactory
         */
        protected $resourceFactory;

        public function addFiles(array $fileUids = [ ]) {}
        public function addFilesFromRelation($relationTable, $relationField, array $referenceRecord) {}
        public function addFileReferences(array $fileReferenceUids = [ ]) {}
        public function addFilesFromFileCollections(array $fileCollectionUids = [ ]) {}
        public function addFilesFromFileCollection($fileCollectionUid = null) {}
        public function addFilesFromFolders(array $folderIdentifiers = [ ], $recursive = false) {}
        public function addFilesFromFolder($folderIdentifier, $recursive = false) {}
        public function sort($sortingProperty = '', $sortingOrder = 'ascending') {}
        public function addFileObject(FileInterface $file) {}
        public function addFileObjects($files) {}
        /**
         * Final getter method to fetch the accumulated data
         *
         * @return array
         */
        public function getFiles() {}
        /**
         * @return int
         */
        public function count() {}
        /**
         * @return ResourceFactory
         */
        protected function getResourceFactory() {}
        /**
         * @return FileCollectionRepository
         */
        protected function getFileCollectionRepository() {}
        /**
         * @return FileRepository
         */
        protected function getFileRepository() {}
    }

}

namespace TYPO3\CMS\Frontend\Authentication {
    /**
     * Extension class for Front End User Authentication.
     */
    class FrontendUserAuthentication extends \typo3\cms\core\authentication\abstractuserauthentication {
        /**
         * form field with 0 or 1
         * 1 = permanent login enabled
         * 0 = session is valid for a browser session only
         * @var string
         */
        public $formfield_permanent;
        /**
         * Lifetime of anonymous session data in seconds.
         * @var int
         */
        protected $sessionDataLifetime;
        /**
         * Session timeout (on the server)
         *
         * If >0: session-timeout in seconds.
         * If <=0: Instant logout after login.
         *
         * @var int
         */
        public $sessionTimeout;
        /**
         * @var string
         */
        public $usergroup_column;
        /**
         * @var string
         */
        public $usergroup_table;
        /**
         * @var array
         */
        public $groupData;
        /**
         * Used to accumulate the TSconfig data of the user
         * @var array
         */
        public $TSdataArray;
        /**
         * @var array
         */
        public $userTS;
        /**
         * @var bool
         */
        public $userTSUpdated;
        /**
         * @var bool
         */
        public $sesData_change;
        /**
         * @var bool
         */
        public $userData_change;
        /**
         * @var bool
         */
        public $is_permanent;
        /**
         * @var bool
         */
        protected $loginHidden;

        /**
         * Default constructor.
         */
        public function __construct() {}
        /**
         * Returns the configured cookie name
         *
         * @return string
         */
        public static function getCookieName() {}
        /**
         * Starts a user session
         *
         * @see AbstractUserAuthentication::start()
         */
        public function start() {}
        public function getNewSessionRecord($tempuser) {}
        /**
         * Determine whether a session cookie needs to be set (lifetime=0)
         *
         * @return bool
         * @internal
         */
        public function isSetSessionCookie() {}
        /**
         * Determine whether a non-session cookie needs to be set (lifetime>0)
         *
         * @return bool
         * @internal
         */
        public function isRefreshTimeBasedCookie() {}
        /**
         * Returns an info array with Login/Logout data submitted by a form or params
         *
         * @return array
         * @see AbstractUserAuthentication::getLoginFormData()
         */
        public function getLoginFormData() {}
        public function createUserSession($tempuser) {}
        /**
         * Will select all fe_groups records that the current fe_user is member of
         * and which groups are also allowed in the current domain.
         * It also accumulates the TSconfig for the fe_user/fe_groups in ->TSdataArray
         *
         * @return int Returns the number of usergroups for the frontend users (if the internal user record exists and the usergroup field contains a value)
         */
        public function fetchGroupData() {}
        /**
         * Returns the parsed TSconfig for the fe_user
         * The TSconfig will be cached in $this->userTS.
         *
         * @return array TSconfig array for the fe_user
         */
        public function getUserTSconf() {}
        /**
         * Will write UC and session data.
         * If the flag $this->userData_change has been set, the function ->writeUC is called (which will save persistent user session data)
         * If the flag $this->sesData_change has been set, the current session record is updated with the content of $this->sessionData
         *
         * @see getKey(), setKey()
         */
        public function storeSessionData() {}
        /**
         * Removes data of the current session.
         */
        public function removeSessionData() {}
        /**
         * Removes the current session record, sets the internal ->user array to null,
         * Thereby the current user (if any) is effectively logged out!
         * Additionally the cookie is removed, but only if there is no session data.
         * If session data exists, only the user information is removed and the session
         * gets converted into an anonymous session.
         */
        protected function performLogoff() {}
        protected function regenerateSessionId(array $existingSessionRecord = [ ], bool $anonymous = false) {}
        public function getKey($type, $key) {}
        public function setKey($type, $key, $data) {}
        public function setSessionData($key, $data) {}
        public function setAndSaveSessionData($key, $data) {}
        /**
         * Garbage collector, removing old expired sessions.
         *
         * @internal
         */
        public function gc() {}
        /**
         * Hide the current login
         *
         * This is used by the fe_login_mode feature for pages.
         * A current login is unset, but we remember that there has been one.
         */
        public function hideActiveLogin() {}
        /**
         * Update the field "is_online" every 60 seconds of a logged-in user
         *
         * @internal
         */
        public function updateOnlineTimestamp() {}
    }

}

namespace TYPO3\CMS\Frontend\Utility {
    /**
     * This class contains compression functions for the TYPO3 Frontend. It can be
     * used only in EXT:frontend/Classes/Http/RequestHandler.php
     */
    class CompressionUtility implements \typo3\cms\core\singletoninterface {
        /**
         * Accumulates content length for the compressed content. It is necessary to
         * replace the Content-length HTTP header after compression if it was added
         * by TYPO3 before compression.
         *
         * @var int
         */
        protected $contentLength;

        public function compressionOutputHandler($outputBuffer, $mode) {}
    }

    /**
     * Tools for scripts using the eID feature of the TYPO3 Frontend.
     * Included from \TYPO3\CMS\Frontend\Http\RequestHandler.
     * Since scripts using the eID feature does not
     * have a full FE environment initialized by default
     * this class seeks to provide functions that can
     * initialize parts of the FE environment as needed,
     * eg. Frontend User session, Database connection etc.
     */
    class EidUtility {
        /** @var $tsfe \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController */
        public static function initFeUser() {}
        public static function initLanguage($language = 'default') {}
        /**
         * Makes TCA available inside eID
         * @deprecated
         */
        public static function initTCA() {}
        public static function initExtensionTCA($extensionKey) {}
        /**
         * Creating a single static cached instance of TSFE to use with this class.
         *
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController New instance of \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        private static function getTSFE() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Configuration\TypoScript\ConditionMatching {
    /**
     * Test case
     */
    class ConditionMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string Name of a key in $GLOBALS for this test
         */
        protected $testGlobalNamespace;
        /**
         * @var \TYPO3\CMS\Frontend\Configuration\TypoScript\ConditionMatching\ConditionMatcher Class under test
         */
        protected $matchCondition;

        protected function setUp() {}
        /**
         * Tests whether a faulty expression fails.
         *
         * @test
         */
        public function simulateDisabledMatchAllConditionsFailsOnFaultyExpression() {}
        /**
         * Tests whether simulating positive matches for all conditions succeeds.
         *
         * @test
         */
        public function simulateEnabledMatchAllConditionsSucceeds() {}
        /**
         * Tests whether simulating positive matches for specific conditions succeeds.
         *
         * @test
         */
        public function simulateEnabledMatchSpecificConditionsSucceeds() {}
        /**
         * Tests whether the language comparison matches.
         *
         * @test
         */
        public function languageConditionMatchesSingleLanguageExpression() {}
        /**
         * Tests whether the language comparison matches.
         *
         * @test
         */
        public function languageConditionMatchesMultipleLanguagesExpression() {}
        /**
         * Tests whether the language comparison matches.
         *
         * @test
         */
        public function languageConditionMatchesCompleteLanguagesExpression() {}
        /**
         * Tests whether usergroup comparison matches.
         *
         * @test
         */
        public function usergroupConditionMatchesSingleGroupId() {}
        /**
         * Tests whether usergroup comparison matches.
         *
         * @test
         */
        public function usergroupConditionMatchesMultipleUserGroupId() {}
        /**
         * Tests whether usergroup comparison matches.
         *
         * @test
         */
        public function usergroupConditionDoesNotMatchDefaulUserGroupIds() {}
        /**
         * Tests whether user comparison matches.
         *
         * @test
         */
        public function loginUserConditionMatchesAnyLoggedInUser() {}
        /**
         * Tests whether user comparison matches.
         *
         * @test
         */
        public function loginUserConditionMatchesSingleLoggedInUser() {}
        /**
         * Tests whether user comparison matches.
         *
         * @test
         */
        public function loginUserConditionMatchesMultipleLoggedInUsers() {}
        /**
         * Tests whether user comparison matches.
         *
         * @test
         */
        public function loginUserConditionDoesNotMatchIfNotUserIsLoggedId() {}
        /**
         * Tests whether user is not logged in
         *
         * @test
         */
        public function loginUserConditionMatchIfUserIsNotLoggedIn() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnEqualExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnEqualExpressionWithMultipleValues() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnNotEqualExpression() {}
        /**
         * Tests whether numerical comparison does not match.
         *
         * @test
         */
        public function globalVarConditionDoesNotMatchOnNotEqualExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnNotEqualExpressionWithMultipleValues() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnLowerThanExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnLowerThanOrEqualExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnGreaterThanExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnGreaterThanOrEqualExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnEmptyExpressionWithNoValueSet() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionDoesNotMatchOnEmptyExpressionWithValueSetToZero() {}
        /**
         * Tests whether an array with zero as key matches its value
         *
         * @test
         */
        public function globalVarConditionMatchesOnArrayExpressionWithZeroAsKey() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesOnEqualExpression() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesOnEmptyExpressionWithValueSetToEmptyString() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesOnEmptyLiteralExpressionWithValueSetToEmptyString() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesWildcardExpression() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesRegularExpression() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesEmptyRegularExpression() {}
        /**
         * Tests whether treeLevel comparison matches.
         *
         * @test
         */
        public function treeLevelConditionMatchesSingleValue() {}
        /**
         * Tests whether treeLevel comparison matches.
         *
         * @test
         */
        public function treeLevelConditionMatchesMultipleValues() {}
        /**
         * Tests whether treeLevel comparison matches.
         *
         * @test
         */
        public function treeLevelConditionDoesNotMatchFaultyValue() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionMatchesSinglePageIdInRootline() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionMatchesMultiplePageIdsInRootline() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionDoesNotMatchPageIdNotInRootline() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionDoesNotMatchLastPageIdInRootline() {}
        /**
         * Tests whether a page Id is found in all rootline entries.
         *
         * @test
         */
        public function PIDinRootlineConditionMatchesSinglePageIdInRootline() {}
        /**
         * Tests whether a page Id is found in all rootline entries.
         *
         * @test
         */
        public function PIDinRootlineConditionMatchesMultiplePageIdsInRootline() {}
        /**
         * Tests whether a page Id is found in all rootline entries.
         *
         * @test
         */
        public function PIDinRootlineConditionMatchesLastPageIdInRootline() {}
        /**
         * Tests whether a page Id is found in all rootline entries.
         *
         * @test
         */
        public function PIDinRootlineConditionDoesNotMatchPageIdNotInRootline() {}
        /**
         * Tests whether the compatibility version can be evaluated.
         * (e.g. 7.9 is compatible to 7.0 but not to 15.0)
         *
         * @test
         */
        public function compatVersionConditionMatchesOlderRelease() {}
        /**
         * Tests whether the compatibility version can be evaluated.
         * (e.g. 7.9 is compatible to 7.0 but not to 15.0)
         *
         * @test
         */
        public function compatVersionConditionMatchesSameRelease() {}
        /**
         * Tests whether the compatibility version can be evaluated.
         * (e.g. 7.9 is compatible to 7.0 but not to 15.0)
         *
         * @test
         */
        public function compatVersionConditionDoesNotMatchNewerRelease() {}
        /**
         * Tests whether the generic fetching of variables works with the namespace 'GP'.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithNamespaceGP() {}
        /**
         * Tests whether the generic fetching of variables works with the namespace 'TSFE'.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithNamespaceTSFE() {}
        /**
         * Tests whether the generic fetching of variables works with the namespace 'ENV'.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithNamespaceENV() {}
        /**
         * Tests whether the generic fetching of variables works with the namespace 'IENV'.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithNamespaceIENV() {}
        /**
         * Tests whether the generic fetching of variables works with any global namespace.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithAnyGlobalNamespace() {}
        /**
         * @test
         */
        public function matchThrowsExceptionIfConditionClassDoesNotInheritFromAbstractCondition() {}
        /**
         * @test
         */
        public function matchCallsTestConditionAndHandsOverParameters() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Configuration\TypoScript\ConditionMatching\Fixtures {
    /**
     * Fixture for custom conditions
     */
    class TestCondition extends \typo3\cms\core\configuration\typoscript\conditionmatching\abstractcondition {
        public function matchCondition(array $conditionParameters) {}
    }

    /**
     * Exception thrown by TestCondition
     */
    class TestConditionException extends \exception {}

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Page {
    /**
     * Test case
     */
    class PageGeneratorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @return array
         */
        public function generateMetaTagHtmlGeneratesCorrectTagsDataProvider() {}
        /**
         * @test
         */
        public function generateMetaTagExpectExceptionOnBogusTags() {}
        public function generateMetaTagHtmlGeneratesCorrectTags(array $typoScript, string $stdWrapResult, array $expectedTags) {}
        /**
         * @test
         */
        public function generateMetaTagHtmlGenerateNoTagWithEmptyContent() {}
        public function generateMultipleMetaTagsDataProvider() {}
        public function generateMultipleMetaTags(array $typoScript, string $stdWrapResult, array $expectedTags) {}
    }

    /**
     * Test case
     */
    class PageRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Frontend\Page\PageRepository|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $pageSelectObject;
        protected $defaultTcaForPages;

        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getExtUrlForDokType3UsesTheSameValue() {}
        /**
         * @test
         */
        public function getExtUrlForDokType3PrependsSiteUrl() {}
        /**
         * @test
         */
        public function getExtUrlForDokType3AssumesAbsoluteUrl() {}
        /**
         * @test
         */
        public function getExtUrlForDokType3UsesEmailAsSameValue() {}
        /**
         * @test
         */
        public function getExtUrlForDokType3UsesValidEmailWithoutProtocolAsEmail() {}
    }

    /**
     * Testcase
     */
    class CacheHashCalculatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Frontend\Page\CacheHashCalculator
         */
        protected $subject;

        protected function setUp() {}
        public function cacheHashCalculationWorks($params, $expected) {}
        /**
         * @return array
         */
        public function cacheHashCalculationDataProvider() {}
        public function getRelevantParametersWorks($params, $expected) {}
        /**
         * @return array
         */
        public function getRelevantParametersDataprovider() {}
        public function canGenerateForParameters($params, $expected) {}
        /**
         * @test
         * @expectedException \RuntimeException
         * @expectedExceptionCode 1467983513
         */
        public function generateForParametersThrowsExceptionWhenIdIsNotSpecified() {}
        /**
         * @return array
         */
        public function canGenerateForParametersDataProvider() {}
        public function parametersRequireCacheHashWorks($params, $expected) {}
        /**
         * @return array
         */
        public function parametersRequireCacheHashDataprovider() {}
        public function canWhitelistParameters($params, $expected) {}
        /**
         * @return array
         */
        public function canWhitelistParametersDataProvider() {}
        public function canSkipParametersWithEmptyValues($params, $settings, $expected) {}
        /**
         * @return array
         */
        public function canSkipParametersWithEmptyValuesDataProvider() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Typolink {
    /**
     * Test case
     */
    class AbstractTypolinkBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|TypoScriptFrontendController|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $frontendControllerMock;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|TemplateService
         */
        protected $templateServiceMock;

        /**
         * Set up
         */
        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getFrontendController() {}
        /**
         * Avoid logging to the file system (file writer is currently the only configured writer)
         */
        protected function createMockedLoggerAndLogManager() {}
        /**
         * @return array The test data for forceAbsoluteUrlReturnsAbsoluteUrl
         */
        public function forceAbsoluteUrlReturnsCorrectAbsoluteUrlDataProvider() {}
        public function forceAbsoluteUrlReturnsCorrectAbsoluteUrl($expected, $url, array $configuration) {}
        /**
         * @test
         */
        public function forceAbsoluteUrlReturnsCorrectAbsoluteUrlWithSubfolder() {}
        /**
         * Data provider for resolveTargetAttribute
         *
         * @return array [[$expected, $conf, $name, $respectFrameSetOption, $fallbackTarget],]
         */
        public function resolveTargetAttributeDataProvider() : array {}
        public function canResolveTheTargetAttribute(string $expected, array $conf, string $name, bool $respectFrameSetOption, string $fallbackTarget, $doctype) {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Processor {
    /**
     * Tests for  GalleryProcessor
     */
    class GalleryProcessorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ContentObjectRenderer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $contentObjectRenderer;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function processThrowsExceptionWhenFilesProcessedDataKeyIsNotFound() {}
        /**
         * Gallery position test data provider
         */
        public function galleryPositionDataProvider() {}
        public function galleryPositionTest($processorConfiguration, $expected) {}
        /**
         * @test
         */
        public function maxGalleryWidthTest() {}
        /**
         * @test
         */
        public function maxGalleryWidthWhenInTextTest() {}
        /**
         * Count test data provider
         * @return array
         */
        public function countDataProvider() {}
        public function countResultTest($numberOfFiles, $data, $processorConfiguration, $expected) {}
        /**
         * Data provider for calculateMediaWidthsAndHeightsTest
         *
         * @return array
         */
        public function calculateMediaWidthsAndHeightsDataProvider() {}
        public function calculateMediaWidthsAndHeightsTest($testFiles, $processorConfiguration, $expected) {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\ContentObject {
    /**
     * Testcase for TYPO3\CMS\Frontend\ContentObject\ContentDataProcessor
     */
    class ContentDataProcessorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ContentDataProcessor
         */
        protected $contentDataProcessor;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function throwsExceptionIfProcessorClassDoesNotExist() {}
        /**
         * @test
         */
        public function throwsExceptionIfProcessorClassDoesNotImplementInterface() {}
        /**
         * @test
         */
        public function processorIsCalled() {}
    }

    /**
     * Testcase for TYPO3\CMS\Frontend\ContentObject\CaseContentObject
     */
    class CaseContentObjectTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var CaseContentObject|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        /** @var TypoScriptFrontendController $tsfe */
        protected function setUp() {}
        /**
         * @test
         */
        public function renderReturnsEmptyStringIfNoKeyMatchesAndIfNoDefaultObjectIsSet() {}
        /**
         * @test
         */
        public function renderReturnsContentFromDefaultObjectIfKeyDoesNotExist() {}
    }

    /**
     * Testcase for TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
     */
    class ContentObjectRendererTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        protected $subject;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|TypoScriptFrontendController|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $frontendControllerMock;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|CacheFrontendInterface
         */
        protected $cacheFrontendMock;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|TemplateService
         */
        protected $templateServiceMock;
        /**
         * Default content object name -> class name map, shipped with TYPO3 CMS
         *
         * @var array
         */
        protected $contentObjectMap;

        /**
         * Set up
         */
        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @return TypoScriptFrontendController
         */
        protected function getFrontendController() {}
        /**
         * Avoid logging to the file system (file writer is currently the only configured writer)
         */
        protected function createMockedLoggerAndLogManager() {}
        protected function handleCharset($subject, $expected) {}
        /**
         * @test
         */
        public function getImgResourceCallsGetImgResourcePostProcessHook() {}
        public function isGetImgResourceHookCalledCallback($file, $fileArray, $imageResource, $parent) {}
        /**
         * Show registration of a class for a TypoScript object name and getting
         * the registered content object is working.
         *
         * Prove is done by successfully creating an object based on the mapping.
         * Note two conditions in contrast to other tests, where the creation
         * fails.
         *
         * 1. The type must be of AbstractContentObject.
         * 2. Registration can only be done by public methods.
         *
         * @test
         */
        public function canRegisterAContentObjectClassForATypoScriptName() {}
        /**
         * Show that setting of the class map and getting a registered content
         * object is working.
         *
         * @see ContentObjectRendererTest::canRegisterAContentObjectClassForATypoScriptName
         * @test
         */
        public function canSetTheContentObjectClassMapAndGetARegisteredContentObject() {}
        /**
         * Show that the map is not set as an externally accessible reference.
         *
         * Prove is done by missing success when trying to use it this way.
         *
         * @see ContentObjectRendererTest::canRegisterAContentObjectClassForATypoScriptName
         * @test
         */
        public function canNotAccessInternalContentObjectMapByReference() {}
        /**
         * @see ContentObjectRendererTest::canRegisterAContentObjectClassForATypoScriptName
         * @test
         */
        public function willReturnNullForUnregisteredObject() {}
        /**
         * @see ContentObjectRendererTest::canRegisterAContentObjectClassForATypoScriptName
         * @test
         */
        public function willThrowAnExceptionForARegisteredNonContentObject() {}
        /**
         * @return string[][] [[$name, $fullClassName],]
         */
        public function registersAllDefaultContentObjectsDataProvider() : array {}
        public function registersAllDefaultContentObjects(string $objectName, string $className) {}
        /**
         * @test
         */
        public function getQueryArgumentsExcludesParameters() {}
        /**
         * @test
         */
        public function getQueryArgumentsExcludesGetParameters() {}
        /**
         * @test
         */
        public function getQueryArgumentsOverrulesSingleParameter() {}
        /**
         * @test
         */
        public function getQueryArgumentsOverrulesMultiDimensionalParameters() {}
        /**
         * @test
         */
        public function getQueryArgumentsOverrulesMultiDimensionalForcedParameters() {}
        /**
         * @test
         */
        public function getQueryArgumentsWithMethodPostGetMergesParameters() {}
        /**
         * @test
         */
        public function getQueryArgumentsWithMethodGetPostMergesParameters() {}
        private function rawUrlEncodeSquareBracketsInUrl($string) {}
        /**
         * @test
         */
        public function cropIsMultibyteSafe() {}
        /**
         * Data provider for cropHTML.
         *
         * Provides combinations of text type and configuration.
         *
         * @return array [$expect, $conf, $content]
         */
        public function cropHTMLDataProvider() {}
        public function cropHTML($expect, $content, $conf) {}
        /**
         * Data provider for round
         *
         * @return array [$expect, $contet, $conf]
         */
        public function roundDataProvider() {}
        public function round($expect, $content, $conf) {}
        /**
         * @test
         */
        public function recursiveStdWrapProperlyRendersBasicString() {}
        /**
         * @test
         */
        public function recursiveStdWrapIsOnlyCalledOnce() {}
        /**
         * Data provider for numberFormat.
         *
         * @return array [$expect, $content, $conf]
         */
        public function numberFormatDataProvider() {}
        public function numberFormat($expects, $content, $conf) {}
        /**
         * Data provider replacement
         *
         * @return array [$expect, $content, $conf]
         */
        public function replacementDataProvider() {}
        public function replacement($expects, $content, $conf) {}
        /**
         * Data provider for calcAge.
         *
         * @return array [$expect, $timestamp, $labels]
         */
        public function calcAgeDataProvider() {}
        public function calcAge($expect, $timestamp, $labels) {}
        /**
         * @return array
         */
        public function stdWrapReturnsExpectationDataProvider() {}
        public function stdWrapReturnsExpectation($content, array $configuration, $expectation) {}
        /**
         * Data provider for substring
         *
         * @return array [$expect, $content, $conf]
         */
        public function substringDataProvider() {}
        public function substring($expect, $content, $conf) {}
        /**
         * @return array
         */
        public function getDataWithTypeGpDataProvider() {}
        public function getDataWithTypeGp($key, $expectedValue) {}
        /**
         * Checks if getData() works with type "tsfe"
         *
         * @test
         */
        public function getDataWithTypeTsfe() {}
        /**
         * Checks if getData() works with type "getenv"
         *
         * @test
         */
        public function getDataWithTypeGetenv() {}
        /**
         * Checks if getData() works with type "getindpenv"
         *
         * @test
         */
        public function getDataWithTypeGetindpenv() {}
        /**
         * Checks if getData() works with type "field"
         *
         * @test
         */
        public function getDataWithTypeField() {}
        /**
         * Checks if getData() works with type "field" of the field content
         * is multi-dimensional (e.g. an array)
         *
         * @test
         */
        public function getDataWithTypeFieldAndFieldIsMultiDimensional() {}
        /**
         * Basic check if getData gets the uid of a file object
         *
         * @test
         */
        public function getDataWithTypeFileReturnsUidOfFileObject() {}
        /**
         * Checks if getData() works with type "parameters"
         *
         * @test
         */
        public function getDataWithTypeParameters() {}
        /**
         * Checks if getData() works with type "register"
         *
         * @test
         */
        public function getDataWithTypeRegister() {}
        /**
         * Checks if getData() works with type "session"
         *
         * @test
         */
        public function getDataWithTypeSession() {}
        /**
         * Checks if getData() works with type "level"
         *
         * @test
         */
        public function getDataWithTypeLevel() {}
        /**
         * Checks if getData() works with type "global"
         *
         * @test
         */
        public function getDataWithTypeGlobal() {}
        /**
         * Checks if getData() works with type "leveltitle"
         *
         * @test
         */
        public function getDataWithTypeLeveltitle() {}
        /**
         * Checks if getData() works with type "levelmedia"
         *
         * @test
         */
        public function getDataWithTypeLevelmedia() {}
        /**
         * Checks if getData() works with type "leveluid"
         *
         * @test
         */
        public function getDataWithTypeLeveluid() {}
        /**
         * Checks if getData() works with type "levelfield"
         *
         * @test
         */
        public function getDataWithTypeLevelfield() {}
        /**
         * Checks if getData() works with type "fullrootline"
         *
         * @test
         */
        public function getDataWithTypeFullrootline() {}
        /**
         * Checks if getData() works with type "date"
         *
         * @test
         */
        public function getDataWithTypeDate() {}
        /**
         * Checks if getData() works with type "page"
         *
         * @test
         */
        public function getDataWithTypePage() {}
        /**
         * Checks if getData() works with type "current"
         *
         * @test
         */
        public function getDataWithTypeCurrent() {}
        /**
         * Checks if getData() works with type "db"
         *
         * @test
         */
        public function getDataWithTypeDb() {}
        /**
         * Checks if getData() works with type "lll"
         *
         * @test
         */
        public function getDataWithTypeLll() {}
        /**
         * Checks if getData() works with type "path"
         *
         * @test
         */
        public function getDataWithTypePath() {}
        /**
         * Checks if getData() works with type "parentRecordNumber"
         *
         * @test
         */
        public function getDataWithTypeParentRecordNumber() {}
        /**
         * Checks if getData() works with type "debug:rootLine"
         *
         * @test
         */
        public function getDataWithTypeDebugRootline() {}
        /**
         * Checks if getData() works with type "debug:fullRootLine"
         *
         * @test
         */
        public function getDataWithTypeDebugFullRootline() {}
        /**
         * Checks if getData() works with type "debug:data"
         *
         * @test
         */
        public function getDataWithTypeDebugData() {}
        /**
         * Checks if getData() works with type "debug:register"
         *
         * @test
         */
        public function getDataWithTypeDebugRegister() {}
        /**
         * Checks if getData() works with type "data:page"
         *
         * @test
         */
        public function getDataWithTypeDebugPage() {}
        /**
         * @test
         */
        public function aTagParamsHasLeadingSpaceIfNotEmpty() {}
        /**
         * @test
         */
        public function aTagParamsHaveSpaceBetweenLocalAndGlobalParams() {}
        /**
         * @test
         */
        public function aTagParamsHasNoLeadingSpaceIfEmpty() {}
        /**
         * @return array
         */
        public function getImageTagTemplateFallsBackToDefaultTemplateIfNoTemplateIsFoundDataProvider() {}
        public function getImageTagTemplateFallsBackToDefaultTemplateIfNoTemplateIsFound($key, $configuration) {}
        /**
         * @return array
         */
        public function getImageTagTemplateReturnTemplateElementIdentifiedByKeyDataProvider() {}
        public function getImageTagTemplateReturnTemplateElementIdentifiedByKey($key, $configuration, $expectation) {}
        /**
         * @return array
         */
        public function getImageSourceCollectionReturnsEmptyStringIfNoSourcesAreDefinedDataProvider() {}
        public function getImageSourceCollectionReturnsEmptyStringIfNoSourcesAreDefined($layoutKey, $configuration, $file) {}
        /**
         * Make sure the generation of subimages calls the generation of the subimages and uses the layout -> source template
         *
         * @test
         */
        public function getImageSourceCollectionRendersDefinedSources() {}
        /**
         * Data provider for the getImageSourceCollectionRendersDefinedLayoutKeyDefault test
         *
         * @return array multi-dimensional array with the second level like this:
         * @see getImageSourceCollectionRendersDefinedLayoutKeyDefault
         */
        public function getImageSourceCollectionRendersDefinedLayoutKeyDataDefaultProvider() {}
/** @var $cObj \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
        public function getImageSourceCollectionRendersDefinedLayoutKeyDefault(/** @var $cObj \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
$layoutKey, /** @var $cObj \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
$configuration) {}
        /**
         * Data provider for the getImageSourceCollectionRendersDefinedLayoutKeyData test
         *
         * @return array multi-dimensional array with the second level like this:
         * @see getImageSourceCollectionRendersDefinedLayoutKeyData
         */
        public function getImageSourceCollectionRendersDefinedLayoutKeyDataDataProvider() {}
/** @var $cObj \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
        public function getImageSourceCollectionRendersDefinedLayoutKeyData(/** @var $cObj \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
$layoutKey, /** @var $cObj \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
$configuration, /** @var $cObj \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
$xhtmlDoctype, /** @var $cObj \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer */
$expectedHtml) {}
        /**
         * Make sure the hook in get sourceCollection is called
         *
         * @test
         */
        public function getImageSourceCollectionHookCalled() {}
        public function isGetOneSourceCollectionCalledCallback($sourceRenderConfiguration, $sourceConfiguration, $oneSourceCollection, $parent) {}
        /**
         * @test
         */
        public function renderingContentObjectThrowsException() {}
        /**
         * @test
         */
        public function exceptionHandlerIsEnabledByDefaultInProductionContext() {}
        /**
         * @test
         */
        public function renderingContentObjectDoesNotThrowExceptionIfExceptionHandlerIsConfiguredLocally() {}
        /**
         * @test
         */
        public function renderingContentObjectDoesNotThrowExceptionIfExceptionHandlerIsConfiguredGlobally() {}
        /**
         * @test
         */
        public function globalExceptionHandlerConfigurationCanBeOverriddenByLocalConfiguration() {}
        /**
         * @test
         */
        public function renderedErrorMessageCanBeCustomized() {}
        /**
         * @test
         */
        public function localConfigurationOverridesGlobalConfiguration() {}
        /**
         * @test
         */
        public function specificExceptionsCanBeIgnoredByExceptionHandler() {}
        /**
         * @return \PHPUnit_Framework_MockObject_MockObject | AbstractContentObject
         */
        protected function createContentObjectThrowingExceptionFixture() {}
        /**
         * @return array
         */
        protected function getLibParseFunc() {}
        /**
         * @return array
         */
        protected function getLibParseFunc_RTE() {}
        /**
         * @return array
         */
        public function _parseFuncReturnsCorrectHtmlDataProvider() {}
        public function stdWrap_parseFuncReturnsParsedHtml($value, $configuration, $expectedResult) {}
        /**
         * @return array
         */
        public function typolinkReturnsCorrectLinksForEmailsAndUrlsDataProvider() {}
        public function typolinkReturnsCorrectLinksForEmailsAndUrls($linkText, $configuration, $expectedResult) {}
        public function typoLinkEncodesMailAddressForSpamProtection(array $settings, $linkText, $mailAddress, $expected) {}
        /**
         * @return array
         */
        public function typoLinkEncodesMailAddressForSpamProtectionDataProvider() {}
        /**
         * @return array
         */
        public function typolinkReturnsCorrectLinksFilesDataProvider() {}
        public function typolinkReturnsCorrectLinksFiles($linkText, $configuration, $expectedResult) {}
        /**
         * @return array
         */
        public function typolinkReturnsCorrectLinksForFilesWithAbsRefPrefixDataProvider() {}
        public function typolinkReturnsCorrectLinksForFilesWithAbsRefPrefix($linkText, $configuration, $absRefPrefix, $expectedResult) {}
        /**
         * @test
         */
        public function stdWrap_splitObjReturnsCount() {}
        /**
         * @test
         */
        public function filelinkCreatesCorrectUrlForFileWithUrlEncodedSpecialChars() {}
        /**
         * Check if calculateCacheKey works properly.
         *
         * @return array Order: expect, conf, times, with, withWrap, will
         */
        public function calculateCacheKeyDataProvider() {}
        public function calculateCacheKey($expect, $conf, $times, $with, $withWrap, $will) {}
        /**
         * Data provider for getFromCache
         *
         * @return array Order: expect, conf, cacheKey, times, cached.
         */
        public function getFromCacheDtataProvider() {}
        public function getFromCache($expect, $conf, $cacheKey, $times, $cached) {}
        /**
         * Data provider for getFieldVal
         *
         * @return array [$expect, $fields]
         */
        public function getFieldValDataProvider() {}
        public function getFieldVal($expect, $fields) {}
        /**
         * Data provider for caseshift.
         *
         * @return array [$expect, $content, $case]
         */
        public function caseshiftDataProvider() {}
        public function caseshift($expect, $content, $case) {}
        /**
         * Data provider for HTMLcaseshift.
         *
         * @return array [$expect, $content, $case, $with, $will]
         */
        public function HTMLcaseshiftDataProvider() {}
        public function HTMLcaseshift($expect, $content, $case, $with, $will) {}
        /**
         * Check that all registered stdWrap processors are callable.
         *
         * Show:
         *
         * - The given invalidProcessor is counted as not callable.
         * - All stdWrap processors are counted as callable.
         * - Their amount is 91.
         *
         * @test
         */
        public function allStdWrapProcessorsAreCallable() {}
        /**
         * Check which stdWrap functions are callable with empty parameters.
         *
         * Show:
         *
         * - Almost all stdWrap_[type] are callable if called with 2 parameters:
         *   - string $content Empty string.
         *   - array $conf ['type' => '', 'type.' => []].
         * - Exeptions: stdWrap_numRows, stdWrap_split
         * - The overall count is 91.
         *
         *  Note:
         *
         *  The two exceptions break, if the configuration is empty. This test just
         *  tracks the different behaviour to gain information. It doesn't mean
         *  that it is an issue.
         *
         * @test
         */
        public function notAllStdWrapProcessorsAreCallableWithEmptyConfiguration() {}
        /**
         * Data provider for fourTypesOfStdWrapHookObjectProcessors
         *
         * @return array Order: stdWrap, hookObjectCall
         */
        public function fourTypesOfStdWrapHookObjectProcessorsDataProvider() {}
        public function fourTypesOfStdWrapHookObjectProcessors($stdWrapMethod, $hookObjectCall) {}
        /**
         * Data provider for stdWrap_HTMLparser
         *
         * @return array [$expect, $content, $conf, $times, $will].
         */
        public function stdWrap_HTMLparserDataProvider() {}
        public function stdWrap_HTMLparser($expect, $content, $conf, $times, $will) {}
        /**
         * @return array
         */
        public function stdWrap_addPageCacheTagsAddsPageTagsDataProvider() {}
        public function stdWrap_addPageCacheTagsAddsPageTags(array $expectedTags, array $configuration) {}
        /**
         * Check that stdWrap_addParams works properly.
         *
         * Show:
         *
         *  - Delegates to method addParams.
         *  - Parameter 1 is $content.
         *  - Parameter 2 is $conf['addParams.'].
         *  - Returns the return value.
         *
         *  @test
         */
        public function stdWrap_addParams() {}
        /**
         * Check if stdWrap_age works properly.
         *
         * Show:
         *
         * - Delegates to calcAge.
         * - Parameter 1 is the difference between $content and EXEC_TIME.
         * - Parameter 2 is $conf['age'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_age() {}
        /**
         * Check if stdWrap_append works properly.
         *
         * Show:
         *
         * - Delegates to the method cObjGetSingle().
         * - First parameter is $conf['append'].
         * - Second parameter is $conf['append.'].
         * - Third parameter is '/stdWrap/.append'.
         * - Returns the return value appended to $content.
         *
         * @test
         */
        public function stdWrap_append() {}
        /**
         * Data provider for stdWrap_br
         *
         * @return string[][] Order expected, given, xhtmlDoctype
         */
        public function stdWrapBrDataProvider() {}
        public function stdWrap_br($expected, $input, $xhtmlDoctype) {}
        /**
         * Data provider for stdWrap_brTag
         *
         * @return array
         */
        public function stdWrapBrTagDataProvider() {}
        public function stdWrap_brTag($input, $expected, $config) {}
        /**
         * Data provider for stdWrap_bytes.
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_bytesDataProvider() {}
        public function stdWrap_bytes($expect, $content, $conf) {}
        /**
         * Check if stdWrap_cObject works properly.
         *
         * Show:
         *
         * - Delegates to the method cObjGetSingle().
         * - Parameter 1 is $conf['cObject'].
         * - Parameter 2 is $conf['cObject.'].
         * - Parameter 3 is '/stdWrap/.cObject'.
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_cObject() {}
        /**
         * Data provider for stdWrap_orderedStdWrap.
         *
         * @return array [$firstConf, $secondConf, $conf]
         */
        public function stdWrap_orderedStdWrapDataProvider() {}
        public function stdWrap_orderedStdWrap($firstConf, $secondConf, $conf) {}
        /**
         * Data provider for stdWrap_cacheRead
         *
         * @return array Order: expect, input, conf, times, with, will
         */
        public function stdWrap_cacheReadDataProvider() {}
        public function stdWrap_cacheRead($expect, $input, $conf, $times, $with, $will) {}
        /**
         * Data provider for stdWrap_cacheStore.
         *
         * @return array [$confCache, $timesCCK, $key, $times]
         */
        public function stdWrap_cacheStoreDataProvider() {}
        public function stdWrap_cacheStore($confCache, $timesCCK, $key, $times) {}
        /**
         * Check if stdWrap_case works properly.
         *
         * Show:
         *
         * - Delegates to method HTMLcaseshift.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['case'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_case() {}
        /**
         * Check if stdWrap_char works properly.
         *
         * @test
         */
        public function stdWrap_char() {}
        /**
         * Check if stdWrap_crop works properly.
         *
         * Show:
         *
         * - Delegates to method listNum.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['crop'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_crop() {}
        /**
         * Check if stdWrap_cropHTML works properly.
         *
         * Show:
         *
         * - Delegates to method cropHTML.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['cropHTML'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_cropHTML() {}
        /**
         * Data provider for stdWrap_csConv
         *
         * @return array Order expected, input, conf
         */
        public function stdWrap_csConvDataProvider() {}
        public function stdWrap_csConv($expected, $input, $conf) {}
        /**
         * Check if stdWrap_current works properly.
         *
         * Show:
         *
         * - current is returned from $this->data
         * - the key is stored in $this->currentValKey
         * - the key defaults to 'currentValue_kidjls9dksoje'
         *
         * @test
         */
        public function stdWrap_current() {}
        /**
         * Data provider for stdWrap_data.
         *
         * @return array [$expect, $data, $alt]
         */
        public function stdWrap_dataDataProvider() {}
        public function stdWrap_data($expect, $data, $alt) {}
        /**
         * Check that stdWrap_dataWrap works properly.
         *
         * Show:
         *
         *  - Delegates to method dataWrap.
         *  - Parameter 1 is $content.
         *  - Parameter 2 is $conf['dataWrap'].
         *  - Returns the return value.
         *
         *  @test
         */
        public function stdWrap_dataWrap() {}
        /**
         * Data provider for the stdWrap_date test
         *
         * @return array [$expect, $content, $conf, $now]
         */
        public function stdWrap_dateDataProvider() {}
        public function stdWrap_date($expected, $content, $conf, $now) {}
        /**
         * Check if stdWrap_debug works properly.
         *
         * @test
         */
        public function stdWrap_debug() {}
        /**
         * Check if stdWrap_debug works properly.
         *
         * Show:
         *
         * - Calls the function debug.
         * - Parameter 1 is $this->data.
         * - Parameter 2 is the string '$cObj->data:'.
         * - If $this->alternativeData is an array the same is repeated with:
         * - Parameter 1 is $this->alternativeData.
         * - Parameter 2 is the string '$cObj->alternativeData:'.
         * - Returns $content as is.
         *
         * Note 1:
         *
         *   As PHPUnit can't mock PHP function calls, the call to debug can't be
         *   easily intercepted. The test is done indirectly by catching the
         *   frontend output of debug.
         *
         * Note 2:
         *
         *   The second parameter to the debug function isn't used by the current
         *   implementation at all. It can't even indirectly be tested.
         *
         * @test
         */
        public function stdWrap_debugData() {}
        public function stdWrap_debugFuncDataProvider() {}
        public function stdWrap_debugFunc($expectArray, $confDebugFunc) {}
        /**
         * Data provider for stdWrap_doubleBrTag
         *
         * @return array Order expected, input, config
         */
        public function stdWrapDoubleBrTagDataProvider() {}
        public function stdWrap_doubleBrTag($expected, $input, $config) {}
        /**
         * Data provider for stdWrap_editIcons.
         *
         * @return [$expect, $content, $conf, $login, $times, $param3, $will]
         */
        public function stdWrap_editIconsDataProvider() {}
        public function stdWrap_editIcons($expect, $content, $conf, $login, $times, $param3, $will) {}
        /**
         * Check if stdWrap_encapsLines works properly.
         *
         * Show:
         *
         * - Delegates to method encaps_lineSplit.
         * - Parameter 1 is $content.
         * - Prameter 2 is $conf['encapsLines'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_encapsLines() {}
        /**
         * Data provider for stdWrap_editPanel.
         *
         * @return [$expect, $content, $login, $times, $will]
         */
        public function stdWrap_editPanelDataProvider() {}
        public function stdWrap_editPanel($expect, $content, $login, $times, $will) {}
        /**
         * Data provider for stdWrap_encodeForJavaScriptValue.
         *
         * @return array []
         */
        public function stdWrap_encodeForJavaScriptValueDataProvider() {}
        public function stdWrap_encodeForJavaScriptValue($expect, $content) {}
        /**
         * Data provider for expandList
         *
         * @return array [$expect, $content]
         */
        public function stdWrap_expandListDataProvider() {}
        public function stdWrap_expandList($expected, $content) {}
        /**
         * Check if stdWrap_field works properly.
         *
         * Show:
         *
         * - calls getFieldVal
         * - passes conf['field'] as parameter
         *
         * @test
         */
        public function stdWrap_field() {}
        /**
         * Data provider for stdWrap_fieldRequired.
         *
         * @return array [$expect, $stop, $content, $conf]
         */
        public function stdWrap_fieldRequiredDataProvider() {}
        public function stdWrap_fieldRequired($expect, $stop, $content, $conf) {}
        /**
         * Check if stdWrap_filelink works properly.
         *
         * Show:
         *
         * - Delegates to method filelink.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['filelink.'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_filelink() {}
        /**
         * Check if stdWrap_filelist works properly.
         *
         * Show:
         *
         * - Delegates to method filelist.
         * - Parameter is $conf['filelist'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_filelist() {}
        /**
         * Data provider for the hash test
         *
         * @return array [$expect, $content, $conf]
         */
        public function hashDataProvider() {}
        public function stdWrap_hash($expect, $content, $conf) {}
        /**
         * Data provider for stdWrap_htmlSpecialChars
         *
         * @return array Order: expected, input, conf
         */
        public function stdWrap_htmlSpecialCharsDataProvider() {}
        public function stdWrap_htmlSpecialChars($expected, $input, $conf) {}
        /**
         * Data provider for stdWrap_if.
         *
         * @return array [$expect, $stop, $content, $conf, $times, $will]
         */
        public function stdWrap_ifDataProvider() {}
        public function stdWrap_if($expect, $stop, $content, $conf, $times, $will) {}
        /**
         * Data provider for stdWrap_ifBlank.
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_ifBlankDataProvider() {}
        public function stdWrap_ifBlank($expect, $content, $conf) {}
        /**
         * Data provider for stdWrap_ifEmpty.
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_ifEmptyDataProvider() {}
        public function stdWrap_ifEmpty($expect, $content, $conf) {}
        /**
         * Data provider for stdWrap_ifNull.
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_ifNullDataProvider() {}
        public function stdWrap_ifNull($expect, $content, $conf) {}
        /**
         * Data provider for stdWrap_innerWrap
         *
         * @return array Order expected, input, conf
         */
        public function stdWrap_innerWrapDataProvider() {}
        public function stdWrap_innerWrap($expected, $input, $conf) {}
        /**
         * Data provider for stdWrap_innerWrap2
         *
         * @return array Order expected, input, conf
         */
        public function stdWrap_innerWrap2DataProvider() {}
        public function stdWrap_innerWrap2($expected, $input, $conf) {}
        /**
         * Check if stdWrap_insertData works properly.
         *
         * Show:
         *
         *  - Delegates to method insertData.
         *  - Parameter 1 is $content.
         *  - Returns the return value.
         *
         *  @test
         */
        public function stdWrap_insertData() {}
        /**
         * Data provider for stdWrap_insertData
         *
         * @return array [$expect, $content]
         */
        public function stdWrap_insertDataProvider() {}
        public function stdWrap_insertDataAndInputExamples($expect, $content) {}
        /**
         * Data provider for stdWrap_intval
         *
         * @return array [$expect, $content]
         */
        public function stdWrap_intvalDataProvider() {}
        public function stdWrap_intval($expect, $content) {}
        /**
         * Data provider for stdWrap_keywords
         *
         * @return string[][] Order expected, input
         */
        public function stdWrapKeywordsDataProvider() {}
        public function stdWrap_keywords($expected, $input) {}
        /**
         * Data provider for stdWrap_lang
         *
         * @return array Order expected, input, conf, language
         */
        public function stdWrap_langDataProvider() {}
        public function stdWrap_lang($expected, $input, $conf, $language) {}
        /**
         * Check if stdWrap_listNum works properly.
         *
         * Show:
         *
         * - Delegates to method listNum.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['listNum'].
         * - Parameter 3 is $conf['listNum.']['splitChar'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_listNum() {}
        /**
         * Data provider for stdWrap_noTrimWrap.
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_noTrimWrapDataProvider() {}
        public function stdWrap_noTrimWrap($expect, $content, $conf) {}
        /**
         * Check if stdWrap_numRows works properly.
         *
         * Show:
         *
         * - Delegates to method numRows.
         * - Parameter is $conf['numRows.'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_numRows() {}
        /**
         * Check if stdWrap_numberFormat works properly.
         *
         * Show:
         *
         * - Delegates to the method numberFormat.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['numberFormat.'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_numberFormat() {}
        /**
         * Data provider for stdWrap_outerWrap
         *
         * @return array Order expected, input, conf
         */
        public function stdWrap_outerWrapDataProvider() {}
        public function stdWrap_outerWrap($expected, $input, $conf) {}
        /**
         * Data provider for stdWrap_csConv
         *
         * @return array Order expected, input, conf
         */
        public function stdWrap_overrideDataProvider() {}
        public function stdWrap_override($expect, $content, $conf) {}
        /**
         * Check if stdWrap_parseFunc works properly.
         *
         * Show:
         *
         * - Delegates to method parseFunc.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['parseFunc.'].
         * - Parameter 3 is $conf['parseFunc'].
         * - Returns the return.
         *
         * @test
         */
        public function stdWrap_parseFunc() {}
        /**
         * Check if stdWrap_postCObject works properly.
         *
         * Show:
         *
         * - Delegates to the method cObjGetSingle().
         * - Parameter 1 is $conf['postCObject'].
         * - Parameter 2 is $conf['postCObject.'].
         * - Parameter 3 is '/stdWrap/.postCObject'.
         * - Returns the return value appended by $content.
         *
         * @test
         */
        public function stdWrap_postCObject() {}
        /**
         * Check that stdWrap_postUserFunc works properly.
         *
         * Show:
         *  - Delegates to method callUserFunction.
         *  - Parameter 1 is $conf['postUserFunc'].
         *  - Parameter 2 is $conf['postUserFunc.'].
         *  - Returns the return value.
         *
         *  @test
         */
        public function stdWrap_postUserFunc() {}
        /**
         * Check if stdWrap_postUserFuncInt works properly.
         *
         * Show:
         *
         * - Calls frontend controller method uniqueHash.
         * - Concatenates "INT_SCRIPT." and the returned hash to $substKey.
         * - Configures the frontend controller for 'INTincScript.$substKey'.
         * - The configuration array contains:
         *   - content: $content
         *   - postUserFunc: $conf['postUserFuncInt']
         *   - conf: $conf['postUserFuncInt.']
         *   - type: 'POSTUSERFUNC'
         *   - cObj: serialized content renderer object
         * - Returns "<!-- $substKey -->".
         *
         * @test
         */
        public function stdWrap_postUserFuncInt() {}
        /**
         * Check if stdWrap_preCObject works properly.
         *
         * Show:
         *
         * - Delegates to the method cObjGetSingle().
         * - Parameter 1 is $conf['preCObject'].
         * - Parameter 2 is $conf['preCObject.'].
         * - Parameter 3 is '/stdWrap/.preCObject'.
         * - Returns the return value appended by $content.
         *
         * @test
         */
        public function stdWrap_preCObject() {}
        /**
         * Check if stdWrap_preIfEmptyListNum works properly.
         *
         * Show:
         *
         * - Delegates to method listNum.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['preIfEmptyListNum'].
         * - Parameter 3 is $conf['preIfEmptyListNum.']['splitChar'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_preIfEmptyListNum() {}
        /**
         * Data provider for stdWrap_prefixComment.
         *
         * @return array [$expect, $content, $conf, $disable, $times, $will]
         */
        public function stdWrap_prefixCommentDataProvider() {}
        public function stdWrap_prefixComment($expect, $content, $conf, $disable, $times, $will) {}
        /**
         * Check if stdWrap_prepend works properly.
         *
         * Show:
         *
         * - Delegates to the method cObjGetSingle().
         * - First parameter is $conf['prepend'].
         * - Second parameter is $conf['prepend.'].
         * - Third parameter is '/stdWrap/.prepend'.
         * - Returns the return value prepended to $content.
         *
         * @test
         */
        public function stdWrap_prepend() {}
        /**
         * Data provider for stdWrap_prioriCalc
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_prioriCalcDataProvider() {}
        public function stdWrap_prioriCalc($expect, $content, $conf) {}
        /**
         * Check if stdWrap_preUserFunc works properly.
         *
         * Show:
         *
         * - Delegates to method callUserFunction.
         * - Parameter 1 is $conf['preUserFunc'].
         * - Parameter 2 is $conf['preUserFunc.'].
         * - Parameter 3 is $content.
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_preUserFunc() {}
        /**
         * Data provider for stdWrap_rawUrlEncode
         *
         * @return array [$expect, $content].
         */
        public function stdWrap_rawUrlEncodeDataProvider() {}
        public function stdWrap_rawUrlEncode($expect, $content) {}
        /**
         * Check if stdWrap_replacement works properly.
         *
         * Show:
         *
         * - Delegates to method replacement.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['replacement.'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_replacement() {}
        /**
         * Data provider for stdWrap_required.
         *
         * @return array [$expect, $stop, $content]
         */
        public function stdWrap_requiredDataProvider() {}
        public function stdWrap_required($expect, $stop, $content) {}
        /**
         * Check if stdWrap_round works properly
         *
         * Show:
         *
         * - Delegates to method round.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['round.'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_round() {}
        /**
         * Check if stdWrap_setContentToCurrent works properly.
         *
         * @test
         */
        public function stdWrap_setContentToCurrent() {}
        /**
         * Data provider for stdWrap_setCurrent
         *
         * @return array Order input, conf
         */
        public function stdWrap_setCurrentDataProvider() {}
        public function stdWrap_setCurrent($input, $conf) {}
        /**
         * Check if stdWrap_split works properly.
         *
         * Show:
         *
         * - Delegates to method splitObj.
         * - Parameter 1 is $content.
         * - Prameter 2 is $conf['split.'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_split() {}
        /**
         * Check that stdWrap_stdWrap works properly.
         *
         * Show:
         *  - Delegates to method stdWrap.
         *  - Parameter 1 is $content.
         *  - Parameter 2 is $conf['stdWrap.'].
         *  - Returns the return value.
         *
         *  @test
         */
        public function stdWrap_stdWrap() {}
        /**
         * Data provider for stdWrap_stdWrapValue test
         *
         * @return array
         */
        public function stdWrap_stdWrapValueDataProvider() {}
        public function stdWrap_stdWrapValue($key, array $configuration, $defaultValue, $expected) {}
        /**
         * Data provider for stdWrap_strPad.
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_strPadDataProvider() {}
        public function stdWrap_strPad($expect, $content, $conf) {}
        /**
         * Data provider for stdWrap_strftime
         *
         * @return array [$expect, $content, $conf, $now]
         */
        public function stdWrap_strftimeDataProvider() {}
        public function stdWrap_strftime($expect, $content, $conf, $now) {}
        /**
         * Test for the stdWrap_stripHtml
         *
         * @test
         */
        public function stdWrap_stripHtml() {}
        /**
         * Data provider for the stdWrap_strtotime test
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_strtotimeDataProvider() {}
        public function stdWrap_strtotime($expect, $content, $conf) {}
        /**
         * Check if stdWrap_substring works properly.
         *
         * Show:
         *
         * - Delegates to method substring.
         * - Parameter 1 is $content.
         * - Parameter 2 is $conf['substring'].
         * - Returns the return value.
         *
         * @test
         */
        public function stdWrap_substring() {}
        /**
         * Data provider for stdWrap_trim.
         *
         * @return array [$expect, $content]
         */
        public function stdWrap_trimDataProvider() {}
        public function stdWrap_trim($expect, $content) {}
        /**
         * Check that stdWrap_typolink works properly.
         *
         * Show:
         *  - Delegates to method typolink.
         *  - Parameter 1 is $content.
         *  - Parameter 2 is $conf['typolink.'].
         *  - Returns the return value.
         *
         *  @test
         */
        public function stdWrap_typolink() {}
        /**
         * Data provider for stdWrap_wrap
         *
         * @return array Order expected, input, conf
         */
        public function stdWrap_wrapDataProvider() {}
        public function stdWrap_wrap($expected, $input, $conf) {}
        /**
         * Data provider for stdWrap_wrap2
         *
         * @return array Order expected, input, conf
         */
        public function stdWrap_wrap2DataProvider() {}
        public function stdWrap_wrap2($expected, $input, $conf) {}
        /**
         * Data provider for stdWrap_wrap3
         *
         * @return array Order expected, input, conf
         */
        public function stdWrap_wrap3DataProvider() {}
        public function stdWrap_wrap3($expected, $input, $conf) {}
        /**
         * Data provider for stdWrap_wrapAlign.
         *
         * @return array [$expect, $content, $conf]
         */
        public function stdWrap_wrapAlignDataProvider() {}
        public function stdWrap_wrapAlign($expect, $content, $wrapAlignConf) {}
        /**
         * Check if getCurrentTable works properly.
         *
         * @test
         */
        public function getCurrentTable() {}
        /**
         * Data provider for linkWrap
         *
         * @return array [[$expected, $content, $wrap],]
         */
        public function linkWrapDataProvider() {}
        public function linkWrap($expected, $content, $wrap) {}
        /**
         * Data provider for prefixComment.
         *
         * @return array [$expect, $comment, $content]
         */
        public function prefixCommentDataProvider() {}
        public function prefixComment($expect, $comment, $content) {}
        /**
         * Check setter and getter of currentFile work properly.
         *
         * @test
         */
        public function setCurrentFile_getCurrentFile() {}
        /**
         * Check setter and getter of currentVal work properly.
         *
         * Show it stored to $this->data[$this->currentValKey].
         * (The default value of currentValKey is tested elsewhere.)
         *
         * @test
         * @see $this->stdWrap_current()
         */
        public function setCurrentVal_getCurrentVal() {}
        /**
         * Check setter and getter of userObjectType work properly.
         *
         * @test
         */
        public function setUserObjectType_getUserObjectType() {}
    }

    /**
     * Testcase
     */
    class FluidTemplateContentObjectTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var FluidTemplateContentObject|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;
        /**
         * @var ContentObjectRenderer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $contentObjectRenderer;
        /**
         * @var StandaloneView|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $standaloneView;
        /**
         * @var Request|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $request;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * Add a mock standalone view to subject
         */
        protected function addMockViewToSubject() {}
        /**
         * @test
         */
        public function constructSetsContentObjectRenderer() {}
        /**
         * @test
         */
        public function renderCallsInitializeStandaloneViewInstance() {}
        /**
         * @test
         */
        public function renderCallsTemplateServiceGetFileNameForGivenTemplateFile() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForGivenTemplateFileWithStandardWrap() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForGivenTemplateRootPathsWithStandardWrap() {}
        /**
         * @test
         */
        public function renderSetsTemplateFileInView() {}
        /**
         * @test
         */
        public function renderSetsTemplateFileByTemplateInView() {}
        /**
         * @test
         */
        public function renderSetsTemplateFileByTemplateNameInView() {}
        /**
         * @test
         */
        public function renderSetsTemplateFileByTemplateNameStdWrapInView() {}
        /**
         * @test
         */
        public function renderSetsLayoutRootPathInView() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForLayoutRootPath() {}
        /**
         * @test
         */
        public function layoutRootPathsHasStdWrapSupport() {}
        /**
         * @test
         */
        public function fallbacksForLayoutRootPathAreSet() {}
        /**
         * @test
         */
        public function fallbacksForLayoutRootPathAreAppendedToLayoutRootPath() {}
        /**
         * @test
         */
        public function renderSetsPartialRootPathInView() {}
        /**
         * @test
         */
        public function partialRootPathsHasStdWrapSupport() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForPartialRootPath() {}
        /**
         * @test
         */
        public function fallbacksForPartialRootPathAreSet() {}
        /**
         * @test
         */
        public function fallbacksForPartialRootPathAreAppendedToPartialRootPath() {}
        /**
         * @test
         */
        public function renderSetsFormatInView() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForFormat() {}
        /**
         * @test
         */
        public function renderSetsExtbasePluginNameInRequest() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForExtbasePluginName() {}
        /**
         * @test
         */
        public function renderSetsExtbaseControllerExtensionNameInRequest() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForExtbaseControllerExtensionName() {}
        /**
         * @test
         */
        public function renderSetsExtbaseControllerNameInRequest() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForExtbaseControllerName() {}
        /**
         * @test
         */
        public function renderSetsExtbaseControllerActionNameInRequest() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapForExtbaseControllerActionName() {}
        /** @var TypoScriptService|\PHPUnit_Framework_MockObject_MockObject $typoScriptServiceMock */
        public function renderAssignsSettingsArrayToView() {}
        /**
         * @test
         */
        public function renderThrowsExceptionForNotAllowedVariableData() {}
        /**
         * @test
         */
        public function renderThrowsExceptionForNotAllowedVariableCurrent() {}
        /**
         * @test
         */
        public function renderCallsCObjGetSingleForAllowedVariable() {}
        /**
         * @test
         */
        public function renderAssignsRenderedContentObjectVariableToView() {}
        /**
         * @test
         */
        public function renderAssignsContentObjectRendererDataToView() {}
        /**
         * @test
         */
        public function renderAssignsContentObjectRendererCurrentValueToView() {}
        /**
         * @test
         */
        public function renderCallsRenderOnStandaloneViewie() {}
        /**
         * @test
         */
        public function renderCallsStandardWrapOnResultStringIfGivenInConfiguration() {}
        public function renderFluidTemplateAssetsIntoPageRendererRendersAndAttachesAssets($viewMock, $expectedHeader, $expectedFooter) {}
        /**
         * @return array
         */
        public function headerAssetDataProvider() {}
    }

    /**
     * Testcase for TYPO3\CMS\Frontend\ContentObject\FilesContentObject
     */
    class FilesContentObjectTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Frontend\ContentObject\FilesContentObject|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;
        /**
         * @var \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected $tsfe;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @return array
         */
        public function renderReturnsFilesForFileReferencesDataProvider() {}
        public function renderReturnsFilesForFileReferences($configuration, $expected) {}
        /**
         * @return array
         */
        public function renderReturnsFilesForFilesDataProvider() {}
        public function renderReturnsFilesForFiles($configuration, $expected) {}
        /**
         * @return array
         */
        public function renderReturnsFilesForCollectionsDataProvider() {}
        public function renderReturnsFilesForCollections($configuration, $expected) {}
        /**
         * @return array
         */
        public function renderReturnsFilesForFoldersDataProvider() {}
        public function renderReturnsFilesForFolders($configuration, $expected, $recursive = false) {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\ContentObject\Menu {
    /**
     * Testcase
     */
    class MenuContentObjectFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getMenuObjectByTypeThrowsExceptionForUnknownType() {}
        /**
         * @test
         */
        public function getMenuObjectByTypeReturnsObjectForRegisteredMenuType() {}
        /**
         * @test
         */
        public function getMenuObjectByTypeReturnsObjectWithLowercasedMenuType() {}
        /**
         * @test
         */
        public function getMenuObjectByTypeReturnsInstanceOfOwnRegisteredTypeInsteadOfInternalType() {}
        /**
         * @test
         */
        public function getMenuObjectByTypeReturnsInstanceOfNewRegisteredType() {}
        /**
         * @test
         */
        public function registerMenuTypeThrowsExceptionIfTypeIsNotOfTypeString() {}
        /**
         * @test
         */
        public function registerMenuTypeThrowsExceptionIfClassNameIsNotOfTypeString() {}
    }

    /**
     * Test case
     */
    class AbstractMenuContentObjectTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array
         */
        protected $singletonInstances;
        /**
         * @var AbstractMenuContentObject
         */
        protected $subject;

        /**
         * Set up this testcase
         */
        protected function setUp() {}
        /**
         * Reset singleton instances
         */
        protected function tearDown() {}
        /**
         * Prepares a test for the method sectionIndex
         */
        protected function prepareSectionIndexTest() {}
        /**
         * @test
         */
        public function sectionIndexReturnsEmptyArrayIfTheRequestedPageCouldNotBeFetched() {}
        /**
         * @test
         */
        public function sectionIndexUsesTheInternalIdIfNoPageIdWasGiven() {}
        /**
         * @test
         */
        public function sectionIndexThrowsAnExceptionIfTheInternalQueryFails() {}
        /**
         * @test
         */
        public function sectionIndexReturnsOverlaidRowBasedOnTheLanguageOfTheGivenPage() {}
        /**
         * @return array
         */
        public function sectionIndexFiltersDataProvider() {}
        public function sectionIndexFilters($expectedAmount, array $dataRow) {}
        /**
         * @return array
         */
        public function sectionIndexQueriesWithDifferentColPosDataProvider() {}
        public function sectionIndexQueriesWithDifferentColPos($configuration, $whereClausePrefix) {}
        /**
         * @return array
         */
        public function ifsubHasToCheckExcludeUidListDataProvider() {}
        public function ifsubHasToCheckExcludeUidList($menuItems, $excludeUidList, $expectedResult) {}
        /**
         * @return array
         */
        public function menuTypoLinkCreatesExpectedTypoLinkConfiurationDataProvider() {}
        public function menuTypoLinkCreatesExpectedTypoLinkConfiguration(array $expected, array $mconf, $useCacheHash = true, array $page, $oTarget, $no_cache, $script, $overrideArray = '', $addParams = '', $typeOverride = '') {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\ContentObject\Fixtures {
    /**
     * Fixture for TYPO3\CMS\Core\Utility\GeneralUtility
     */
    class GeneralUtilityFixture extends \typo3\cms\core\utility\generalutility {
        public static function setApplicationContext($applicationContext) {}
    }

    /**
     * Fixture for TYPO3\CMS\Frontend\ContentObject\ContentDataProcessor
     */
    class DataProcessorFixture implements \typo3\cms\frontend\contentobject\dataprocessorinterface {
        public function process(ContentObjectRenderer $cObj, array $contentObjectConfiguration, array $processorConfiguration, array $processedData) {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Plugin {
    /**
     * Testcase for TYPO3\CMS\Frontend\Plugin\AbstractPlugin
     */
    class AbstractPluginTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var AbstractPlugin
         */
        protected $abstractPlugin;
        /**
         * @var array
         */
        protected $defaultPiVars;

        /**
         * Sets up this testcase
         */
        protected function setUp() {}
        /**
         * Data provider for piSetPiVarDefaultsStdWrap
         *
         * @return array input-array with configuration and stdWrap, expected output-array in piVars
         */
        public function piSetPiVarDefaultsStdWrapProvider() {}
        public function piSetPiVarDefaultsStdWrap($input, $expected) {}
        /**
         * Data provider for multiple registered result browser implementations
         *
         * @return array
         */
        public function registeredResultBrowserProvider() {}
        public function registeredResultBrowsersAreUsed($className, $returnValue, $expected) {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Controller {
    /**
     * Testcase for TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
     */
    class TypoScriptFrontendControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|TypoScriptFrontendController
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function headerAndFooterMarkersAreReplacedDuringIntProcessing() {}
        /**
         * This is the callback that mimics a USER_INT extension
         */
        public function INTincScript_processCallback() {}
        /**
         * Setup a \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController object only for testing the header and footer
         * replacement during USER_INT rendering
         *
         * @return \PHPUnit_Framework_MockObject_MockObject|TypoScriptFrontendController
         */
        protected function setupTsfeMockForHeaderFooterReplacementCheck() {}
        /**
         * @test
         */
        public function localizationReturnsUnchangedStringIfNotLocallangLabel() {}
        /**
         * @return array
         */
        public function getSysDomainCacheDataProvider() {}
        /**
         * @return array
         */
        public function domainNameMatchesCurrentRequestDataProvider() {}
        public function domainNameMatchesCurrentRequest($currentDomain, $domainRecord, $scriptName, $expectedResult) {}
        /**
         * @return array
         */
        public function baseUrlWrapHandlesDifferentUrlsDataProvider() {}
        public function baseUrlWrapHandlesDifferentUrls($baseUrl, $url, $expected) {}
        /**
         * @return array
         */
        public function initializeSearchWordDataInTsfeBuildsCorrectRegexDataProvider() {}
        public function initializeSearchWordDataInTsfeBuildsCorrectRegex(array $searchWordGetParameters, $enableStandaloneSearchWords, $expectedRegex) {}
        public function splitLinkVarsStringSplitsStringByComma($string, $expected) {}
        /**
         * @return array
         */
        public function splitLinkVarsDataProvider() {}
        public function calculateLinkVarsConsidersCorrectVariables(string $linkVars, array $getVars, string $expected) {}
        public function calculateLinkVarsDataProvider() : array {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\View {
    /**
     * Test case
     */
    class AdminPanelViewTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function extGetFeAdminValueReturnsTimestamp() {}
        /** @var $adminPanelMock \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Frontend\View\AdminPanelView */
        public function extendAdminPanelHookThrowsExceptionIfHookClassDoesNotImplementInterface() {}
        /**
         * @test
         */
        public function extendAdminPanelHookCallsExtendAdminPanelMethodOfHook() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Fixtures {
    /**
     * Class using the [\TYPO3\CMS\Frontend\Plugin\AbstractPlugin::class]['pi_list_browseresults'] hook
     */
    class ResultBrowserPluginHook {
        public function pi_list_browseresults($showResultCount, $tableParams, array $wrapArr, $pointerName, $hscText, $forceOutput, AbstractPlugin $pObj) {}
    }

    /**
     * Admin panel hook without interface
     */
    class AdminPanelHookWithoutInterfaceFixture {}

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Service {
    /**
     * Test case
     */
    class TypoLinkCodecServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TypoLinkCodecService
         */
        protected $subject;

        /**
         * Set up test subject
         */
        protected function setUp() {}
        public function encodeReturnsExpectedResult(array $parts, $expected) {}
        /**
         * @return array
         */
        public function encodeReturnsExpectedResultDataProvider() {}
        public function decodeReturnsExpectedResult($typoLink, array $expected) {}
        /**
         * @return array
         */
        public function decodeReturnsExpectedResultDataProvider() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Unit\Authentication {
    /**
     * Test cases for FrontendUserAuthentication
     *
     * @todo: Some of these tests would be better suited as functional tests
     */
    class FrontendUserAuthenticationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Sets up FrontendUserAuthentication mock
         */
        protected function setUp() {}
        /**
         * Reset singletons and purge created test instances
         */
        protected function tearDown() {}
        /**
         * User properties should not be set for anonymous sessions
         *
         * @test
         */
        public function userFieldIsNotSetForAnonymousSessions() {}
        /**
         * @test
         */
        public function storeSessionDataOnAnonymousUserWithNoData() {}
        /**
         * Setting and immediately removing session data should be handled correctly.
         * No write operations should be made
         *
         * @test
         */
        public function canSetAndUnsetSessionKey() {}
        /**
         * A user that is not signed in should be able to have associated session data
         *
         * @test
         */
        public function canSetSessionDataForAnonymousUser() {}
        /**
         * Session data should be loaded when a session cookie is available and user user is authenticated
         *
         * @test
         */
        public function canLoadExistingAuthenticatedSession() {}
        /**
         * @test
         */
        public function canLogUserInWithoutAnonymousSession() {}
        /**
         * Session data set before a user is signed in should be preserved when signing in
         *
         * @test
         */
        public function canPreserveSessionDataWhenAuthenticating() {}
        /**
         * removeSessionData should clear all session data
         *
         * @test
         */
        public function canRemoveSessionData() {}
        /**
         * @test
         *
         * If a user has an anonymous session, and its data is set to null, then the record is removed
         */
        public function destroysAnonymousSessionIfDataIsNull() {}
        /**
         * @test
         * Any session data set when logged in should be preserved when logging out
         */
        public function sessionDataShouldBePreservedOnLogout() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Functional\Page {
    /**
     * Test case
     */
    class PageRepositoryTest extends \typo3\testingframework\core\functional\functionaltestcase {
        protected $coreExtensionsToLoad;
        /**
         * @var \TYPO3\CMS\Frontend\Page\PageRepository
         */
        protected $pageRepo;

        protected function setUp() {}
        /**
         * @test
         */
        public function getMenuSingleUidRoot() {}
        /**
         * @test
         */
        public function getMenuSingleUidSubpage() {}
        /**
         * @test
         */
        public function getMenuMultipleUid() {}
        /**
         * @test
         */
        public function getMenuPageOverlay() {}
        /**
         * @test
         */
        public function getPageOverlayById() {}
        /**
         * @test
         */
        public function getPageOverlayByIdWithoutTranslation() {}
        /**
         * @test
         */
        public function getPageOverlayByRow() {}
        /**
         * @test
         */
        public function getPageOverlayByRowWithoutTranslation() {}
        /**
         * @test
         */
        public function getPagesOverlayByIdSingle() {}
        /**
         * @test
         */
        public function getPagesOverlayByIdMultiple() {}
        /**
         * @test
         */
        public function getPagesOverlayByIdMultipleSomeNotOverlaid() {}
        /**
         * @test
         */
        public function getPagesOverlayByRowSingle() {}
        /**
         * @test
         */
        public function getPagesOverlayByRowMultiple() {}
        /**
         * @test
         */
        public function getPagesOverlayByRowMultipleSomeNotOverlaid() {}
        /**
         * Tests whether the getPage Hook is called correctly.
         *
         * @test
         */
        public function isGetPageHookCalled() {}
        /**
         * @test
         */
        public function initSetsPublicPropertyCorrectlyForWorkspacePreview() {}
        /**
         * @test
         */
        public function initSetsPublicPropertyCorrectlyForLive() {}
        /**
         * @test
         */
        public function noPagesFromWorkspaceAreShownLive() {}
        /**
         * @test
         */
        public function previewShowsPagesFromLiveAndCurrentWorkspace() {}
        /**
         * @test
         */
        public function getWorkspaceVersionReturnsTheCorrectMethod() {}
        /**
         * @test
         */
        public function enableFieldsHidesVersionedRecordsAndPlaceholders() {}
        /**
         * @test
         */
        public function enableFieldsDoesNotHidePlaceholdersInPreview() {}
        /**
         * @test
         */
        public function enableFieldsDoesFilterToCurrentAndLiveWorkspaceForRecordsInPreview() {}
        /**
         * @test
         */
        public function enableFieldsDoesNotHideVersionedRecordsWhenCheckingVersionOverlays() {}
        protected function assertOverlayRow($row) {}
        protected function assertNotOverlayRow($row) {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Functional\Tca {
    class FrontendGroupsVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $frontendGroupFields;

        /**
         * @test
         */
        public function frontendGroupsFormContainsExpectedFields() {}
    }

    class TemplateVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $templateFields;

        /**
         * @test
         */
        public function templateFormContainsExpectedFields() {}
    }

    class ContentVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $commonContentFields;
        static protected $headerFields;
        static protected $imageFields;
        static protected $contentFieldsByType;

        /**
         * @test
         */
        public function contentFormContainsExpectedFields() {}
    }

    class BackendLayoutVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $backendLayoutFields;

        /**
         * @test
         */
        public function backendLayoutsFormContainsExpectedFields() {}
    }

    class FrontendUsersVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $frontendUsersFields;

        /**
         * @test
         */
        public function frontendUsersFormContainsExpectedFields() {}
    }

    class DomainVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        static protected $domainFields;

        /**
         * @test
         */
        public function domainFormContainsExpectedFields() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Functional\ContentObject {
    /**
     * Testcase for TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
     */
    class ContentObjectRendererTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var ContentObjectRenderer
         */
        protected $subject;

        protected function setUp() {}
        /**
         * Data provider for the getQuery test
         *
         * @return array multi-dimensional array with the second level like this:
         * @see getQuery
         */
        public function getQueryDataProvider() : array {}
        public function getQuery(string $table, array $conf, array $expected) {}
        /**
         * @test
         */
        public function getQueryCallsGetTreeListWithNegativeValuesIfRecursiveIsSet() {}
        /**
         * @test
         */
        public function getQueryCallsGetTreeListWithCurrentPageIfThisIsSet() {}
        /**
         * @return array
         */
        public function getWhereReturnCorrectQueryDataProvider() {}
        /**
         * @return array
         */
        public function typolinkReturnsCorrectLinksForPagesDataProvider() {}
        public function typolinkReturnsCorrectLinksForPages($linkText, $configuration, $pageArray, $expectedResult) {}
        /**
         * @test
         */
        public function typolinkReturnsCorrectLinkForSectionToHomePageWithUrlRewriting() {}
        /**
         * @return array
         */
        protected function getLibParseFunc() {}
    }

    /**
     * Test case
     */
    class FluidTemplateContentObjectTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;

        /**
         * @test
         */
        public function renderWorksWithNestedFluidtemplate() {}
        /**
         * @test
         */
        public function renderWorksWithNestedFluidtemplateWithLayouts() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Functional\Controller {
    /**
     * Test case
     */
    class TypoScriptFrontendControllerTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var TypoScriptFrontendController
         */
        protected $tsFrontendController;

        protected function setUp() {}
        /**
         * @test
         */
        public function getFirstTimeValueForRecordReturnCorrectData() {}
        public function getSysDomainCacheReturnsCurrentDomainRecord($currentDomain) {}
        public function getFirstTimeValueForRecordCall($tablePid, $now) {}
        /**
         * @return array
         */
        public function getSysDomainCacheDataProvider() {}
    }

}

namespace TYPO3\CMS\Frontend\Tests\Functional\Rendering {
    /**
     * Test case checking if localized tt_content is rendered correctly with different language settings
     *
     * The following values are relevant:
     *
     * -- TypoScript --
     * config.sys_language_uid = [0,1,2,3,4...] (set via the language parameter &L=1 from the FrontendRequest in the tests)
     *      Fetch the page overlay of the current page if the value is > 0 and if not available, then
     *      "config.sys_language_mode" is evaluated.
     *      If this setting is set to "0" or empty, then no page overlay is evaluated, and no further parameters are
     *      relevant or evaluated.
     *
     * config.sys_language_mode = [strict, content_fallback;2,3, ignore]
     *      Only evaluated when sys_language_uid > 0, and the requested page translation is NOT available.
     *      Decides if "pageNotFound" (strict), "content_fallback" with a fallback chain ($TSFE->sys_language_content is set
     *      to that value) or "ignore" (just render the page and the content as this translation would exist).
     *      When set to "0" or not set "", this means that the page request is using the default language for content
     *      and page properties.
     *      Content fallback is evaluated on page level, not on the CE level. So it only makes a difference when the page translation
     *      for the requested language does not exist.
     *
     * config.sys_language_overlay = [0, 1, hideNonTranslated]
     *      Only relevant if $TSFE->sys_language_content is > 0.
     *      Sets the property $TSFE->sys_language_contentOL at a request. Further calls via $TSFE->sys_page->getRecordOverlay
     *      receive this value to see if an overlay should happen.
     *      0:
     *          Just fetch records from selected ($TSFE->sys_language_content) language, no overlay will happen,
     *          no fetching of the records from the default language. This boils down to "free mode" language handling.
     *
     *      1:
     *          Fetch records from the default language and overlay them with translations. If some record is not translated
     *          default language version will be shown.
     *
     *      hideNotTranslated:
     *          Fetch records from the default language and overlay them with translations. If some record is not translated
     *          it will not be shown.
     *
     * -- Frontend / TypoScriptFrontendController --
     *
     * $TSFE->sys_language_uid
     *      Defines in which language the current page was requested, this is relevant when building menus or links to other
     *      pages.
     * $TSFE->sys_language_content
     *      Contains the language UID of the content records that should be overlaid to would be fetched.
     *      This is especially useful when a page requested with language=4 should fall back to showing content of language=2 (see config.sys_language_mode=content_fallback)
     * $TSFE->sys_language_contentOL
     *      Contains the info if and how record overlays (when fetching content) should be handled, either "0" (no overlays done)
     *      or "1" (do overlays with possible mixed content, or "hideNonTranslated". see "config.sys_language_overlay"
     *      This is used in conjunction with $TSFE->sys_language_content.
     * $TSFE->sys_language_mode
     *      Contains the config.sys_language_mode parameter, which is either "", "strict", "content_fallback" or "ignore"
     *      Only used within $TSFE->settingLanguage() and in Extbase.
     */
    class LocalizedContentRenderingTest extends \typo3\cms\core\tests\functional\datahandling\abstractdatahandleractiontestcase {
        const TABLE_Content = 'tt_content';
        const TABLE_Pages = 'pages';
        const VALUE_PageId = 89;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * Custom 404 handler returning valid json is registered so the $this->getFrontendResponse()
         * does not fail on 404 pages
         *
         * @var array
         */
        protected $configurationToUseInTestInstance;
        /**
         * @var array
         */
        protected $pathsToLinkInTestInstance;

        protected function setUp() {}
        public function defaultLanguageConfigurationDataProvider() : array {}
        public function onlyEnglishContentIsRenderedForDefaultLanguage(string $typoScript, string $sysLanguageMode, string $sysLanguageContentOL) {}
        /**
         * Dutch language has page translation record and some content elements are translated
         *
         * @return array
         */
        public function dutchDataProvider() : array {}
        public function renderingOfDutchLanguage(string $typoScript, array $visibleRecords, string $sysLanguageMode, string $sysLanguageContentOL) {}
        public function contentOnNonTranslatedPageDataProvider() : array {}
        public function contentOnNonTranslatedPageGerman(string $typoScript, array $visibleRecords, string $pageTitle, int $sysLanguageUid, int $sysLanguageContent, string $sysLanguageMode, string $sysLanguageContentOL, string $status = 'success') {}
        public function contentOnPartiallyTranslatedPageDataProvider() : array {}
        public function contentOnPartiallyTranslatedPage(string $typoScript, array $visibleHeaders, string $sysLanguageMode, string $sysLanguageContentOL) {}
        protected function getNonVisibleHeaders(array $visibleHeaders) : array {}
        protected function getNonVisibleFileTitles(array $visibleTitles) : array {}
    }

}

namespace TYPO3\CMS\SysAction {
    /**
     * This class provides a task for the taskcenter
     */
    class ActionTask implements \typo3\cms\taskcenter\taskinterface {
        /**
         * @var \TYPO3\CMS\Taskcenter\Controller\TaskModuleController
         */
        protected $taskObject;
        /**
         * All hook objects get registered here for later use
         *
         * @var array
         */
        protected $hookObjects;
        /**
         * URL to task module
         *
         * @var string
         */
        protected $moduleUrl;
        /**
         * @var IconFactory
         */
        protected $iconFactory;

/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function __construct(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
\TYPO3\CMS\Taskcenter\Controller\TaskModuleController $taskObject) {}
        /**
         * This method renders the task
         *
         * @return string The task as HTML
         */
        public function getTask() {}
        /**
         * General overview over the task in the taskcenter menu
         *
         * @return string Overview as HTML
         */
        public function getOverview() {}
        /**
         * Get all actions of an user. Admins can see any action, all others only those
         * which are allowed in sys_action record itself.
         *
         * @return array Array holding every needed information of a sys_action
         */
        protected function getActions() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function renderActionList() {}
        protected function viewNewBackendUser($record) {}
        protected function deleteUser($userId, $actionId) {}
        protected function isCreatedByUser($id, $action) {}
        protected function getCreatedUsers($action, $selectedUser) {}
        protected function action_linkUserName($username, $realName, $sysActionUid, $userId) {}
        protected function saveNewBackendUser($record, $vars) {}
        protected function fixUsername($username, $prefix) {}
        protected function fixUserGroup($appliedUsergroups, $actionRecord) {}
        protected function checkRootline($pageId) {}
        protected function action_createDir($uid) {}
        /**
         * Get the path to the user home directory which is set in the localconf.php
         *
         * @return string Path
         */
        protected function action_getUserMainDir() {}
        protected function getUsergroups($record, $vars) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function viewNewRecord(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$record) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function viewEditRecord(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$record) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function viewSqlQuery(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$record) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function viewRecordList(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$record) {}
        protected function addMessage($message, $title = '', $severity = FlashMessage::OK) {}
        /**
         * Render all currently enqueued FlashMessages
         *
         * @return string
         */
        protected function renderFlashMessages() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Class for the list rendering of Web>Task Center module
     */
    class ActionList extends \typo3\cms\recordlist\recordlist\databaserecordlist {
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function listURL(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$alternativeId = '', /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table = '-1', /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$excludeList = '') {}
    }

}

namespace TYPO3\CMS\SysAction\Backend\ToolbarItems {
    /**
     * Adds action links to the backend's toolbar
     */
    class ActionToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        /**
         * @var array
         */
        protected $availableActions;

        /**
         * Render toolbar icon via Fluid
         *
         * @return string HTML
         */
        public function getItem() {}
        /**
         * Render drop down
         *
         * @return string HTML
         */
        public function getDropDown() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function setAvailableActions() {}
        /**
         * This toolbar needs no additional attributes
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has a drop down
         *
         * @return bool
         */
        public function hasDropDown() {}
        /**
         * This toolbar is rendered if there are action entries, no further user restriction
         *
         * @return bool
         */
        public function checkAccess() {}
        /**
         * Position relative to others
         *
         * @return int
         */
        public function getIndex() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        protected function getFluidTemplateObject(string $filename) : StandaloneView {}
    }

}

namespace TYPO3\CMS\SysAction\Tests\Functional\Tca {
    class ActionVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        protected $coreExtensionsToLoad;
        static protected $actionCommonFields;
        static protected $actionFieldsByType;

        /**
         * @test
         */
        public function actionFormContainsExpectedFields() {}
    }

}

namespace TYPO3\CMS\Felogin\Controller {
    /**
     * Plugin 'Website User Login' for the 'felogin' extension.
     */
    class FrontendLoginController extends \typo3\cms\frontend\plugin\abstractplugin implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * Same as class name
         *
         * @var string
         */
        public $prefixId;
        /**
         * The extension key.
         *
         * @var string
         */
        public $extKey;
        /**
         * @var bool
         */
        public $pi_checkCHash;
        /**
         * @var bool
         */
        public $pi_USER_INT_obj;
        /**
         * Is user logged in?
         *
         * @var bool
         */
        protected $userIsLoggedIn;
        /**
         * Holds the template for FE rendering
         *
         * @var string
         */
        protected $template;
        /**
         * URL for the redirect
         *
         * @var string
         */
        protected $redirectUrl;
        /**
         * Flag for disable the redirect
         *
         * @var bool
         */
        protected $noRedirect;
        /**
         * Logintype (given as GPvar), possible: login, logout
         *
         * @var string
         */
        protected $logintype;
        /**
         * A list of page UIDs, either an integer or a comma-separated list of integers
         *
         * @var string
         */
        public $spid;
        /**
         * Referrer
         *
         * @var string
         */
        public $referer;

        public function main($content, $conf) {}
        /**
         * Shows the forgot password form
         *
         * @return string Content
         */
        protected function showForgot() {}
        /**
         * This function checks the hash from link and checks the validity. If it's valid it shows the form for
         * changing the password and process the change of password after submit, if not valid it returns the error message
         *
         * @return string The content.
         */
        protected function changePassword() {}
        protected function generateAndSendHash($user) {}
        /**
         * Shows logout form
         *
         * @return string The content.
         */
        protected function showLogout() {}
        /**
         * Shows login form
         *
         * @return string Content
         */
        protected function showLogin() {}
        /**
         * Process redirect methods. The function searches for a redirect url using all configured methods.
         *
         * @return array Redirect URLs
         */
        protected function processRedirect() {}
        /**
         * Reads flexform configuration and merge it with $this->conf
         */
        protected function mergeflexFormValuesIntoConf() {}
        protected function flexFormValue($var, $sheet) {}
        protected function getPageLink($label, $piVars, $returnUrl = false) {}
        /**
         * Add additional parameters for links according to TS setting preserveGETvars.
         * Possible values are "all" or a comma separated list of allowed GET-vars.
         * Supports multi-dimensional GET-vars.
         * Some hardcoded values are dropped.
         *
         * @return string additionalParams-string
         */
        protected function getPreserveGetVars() {}
        protected function generatePassword($len) {}
        protected function getDisplayText($label, $stdWrapArray = [ ]) {}
        /**
         * Returns Array of markers filled with user fields
         *
         * @return array Marker array
         */
        protected function getUserFieldMarkers() {}
        protected function validateRedirectUrl($url) {}
        protected function isInCurrentDomain($url) {}
        protected function isInLocalDomain($url) {}
        protected function isRelativeUrl($url) {}
        /**
         * Get TypoScriptFrontendController
         *
         * @return TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
    }

}

namespace TYPO3\CMS\Felogin\Hooks {
    /**
     * Hook to display verbose information about the felogin plugin
     */
    class CmsLayout implements \typo3\cms\backend\view\pagelayoutviewdrawitemhookinterface {
        public function preProcess(\TYPO3\CMS\Backend\View\PageLayoutView $parentObject, $drawItem, $headerContent, $itemContent, array $row) {}
    }

}

namespace TYPO3\CMS\Felogin\Tests\Unit\Controller {
    /**
     * Test case
     */
    class FrontendLoginControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Felogin\Controller\FrontendLoginController|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $accessibleFixture;
        /**
         * @var string
         */
        protected $testHostName;
        /**
         * @var string
         */
        protected $testSitePath;
        /**
         * @var string
         */
        protected $testTableName;
        /**
         * @var array
         */
        protected $singletonInstances;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * Set up a fake site path and host
         */
        protected function setUpFakeSitePathAndHost() {}
        /** @var ConnectionPool|ObjectProphecy $connectionPool */
        protected function setUpDatabaseMock() {}
        /**
         * @test
         */
        public function typo3SitePathEqualsStubSitePath() {}
        /**
         * @test
         */
        public function typo3SiteUrlEqualsStubSiteUrl() {}
        /**
         * @test
         */
        public function typo3SitePathEqualsStubSitePathAfterChangingInTest() {}
        /**
         * @test
         */
        public function typo3SiteUrlEqualsStubSiteUrlAfterChangingInTest() {}
        /**
         * Data provider for validateRedirectUrlClearsUrl
         *
         * @return array
         */
        public function validateRedirectUrlClearsUrlDataProvider() {}
        public function validateRedirectUrlClearsUrl($url) {}
        /**
         * Data provider for validateRedirectUrlKeepsCleanUrl
         *
         * @return array
         */
        public function validateRedirectUrlKeepsCleanUrlDataProvider() {}
        public function validateRedirectUrlKeepsCleanUrl($url) {}
        /**
         * Data provider for validateRedirectUrlClearsInvalidUrlInSubdirectory
         *
         * @return array
         */
        public function validateRedirectUrlClearsInvalidUrlInSubdirectoryDataProvider() {}
        public function validateRedirectUrlClearsInvalidUrlInSubdirectory($url) {}
        /**
         * Data provider for validateRedirectUrlKeepsCleanUrlInSubdirectory
         *
         * @return array
         */
        public function validateRedirectUrlKeepsCleanUrlInSubdirectoryDataProvider() {}
        public function validateRedirectUrlKeepsCleanUrlInSubdirectory($url) {}
        /**
         * @return array
         */
        public function getPreserveGetVarsReturnsCorrectResultDataProvider() {}
        public function getPreserveGetVarsReturnsCorrectResult(array $getArray, $preserveVars, $expected) {}
        /**
         * Dataprovider for isInCurrentDomainIgnoresScheme
         *
         * @return array
         */
        public function isInCurrentDomainIgnoresSchemeDataProvider() {}
        public function isInCurrentDomainIgnoresScheme($host, $https, $url) {}
        /**
         * @return array
         */
        public function isInCurrentDomainReturnsFalseIfDomainsAreDifferentDataProvider() {}
        public function isInCurrentDomainReturnsFalseIfDomainsAreDifferent($host, $url) {}
        /** @var TypoScriptFrontendController $tsfe */
        public function processRedirectReferrerDomainsMatchesDomains() {}
    }

}

namespace TYPO3\CMS\Felogin\Tests\Functional\Tca {
    class ContentVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        protected $coreExtensionsToLoad;
        static protected $contentFields;

        /**
         * @test
         */
        public function contentFormContainsExpectedFields() {}
    }

}

namespace TYPO3\CMS\Linkvalidator {
    /**
     * This class provides Processing plugin implementation
     */
    class LinkAnalyzer {
        /**
         * Array of tables and fields to search for broken links
         *
         * @var array
         */
        protected $searchFields;
        /**
         * List of page uids (rootline downwards)
         *
         * @var array
         */
        protected $pids;
        /**
         * Array of tables and the number of external links they contain
         *
         * @var array
         */
        protected $linkCounts;
        /**
         * Array of tables and the number of broken external links they contain
         *
         * @var array
         */
        protected $brokenLinkCounts;
        /**
         * Array of tables and records containing broken links
         *
         * @var array
         */
        protected $recordsWithBrokenLinks;
        /**
         * Array for hooks for own checks
         *
         * @var \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype[]
         */
        protected $hookObjectsArr;
        /**
         * Array with information about the current page
         *
         * @var array
         */
        protected $extPageInTreeInfo;
        /**
         * Reference to the current element with table:uid, e.g. pages:85
         *
         * @var string
         */
        protected $recordReference;
        /**
         * Linked page together with a possible anchor, e.g. 85#c105
         *
         * @var string
         */
        protected $pageWithAnchor;
        /**
         * The currently active TSConfig. Will be passed to the init function.
         *
         * @var array
         */
        protected $tsConfig;

        /**
         * Fill hookObjectsArr with different link types and possible XClasses.
         */
        public function __construct() {}
        public function init(array $searchField, $pidList, $tsConfig) {}
        public function getLinkStatistics($checkOptions = [ ], $considerHidden = false) {}
/** @var $softRefObj \TYPO3\CMS\Core\Database\SoftReferenceIndex */
        public function analyzeRecord(/** @var $softRefObj \TYPO3\CMS\Core\Database\SoftReferenceIndex */
array $results, /** @var $softRefObj \TYPO3\CMS\Core\Database\SoftReferenceIndex */
$table, /** @var $softRefObj \TYPO3\CMS\Core\Database\SoftReferenceIndex */
array $fields, /** @var $softRefObj \TYPO3\CMS\Core\Database\SoftReferenceIndex */
array $record) {}
        /**
         * Returns the TSConfig that was passed to the init() method.
         *
         * This can be used by link checkers that get a reference of this
         * object passed to the checkLink() method.
         *
         * @return array
         */
        public function getTSConfig() {}
/** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
        protected function analyseLinks(/** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
array $resultArray, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
array $results, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
array $record, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
$field, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
$table) {}
/** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
        protected function analyseTypoLinks(/** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
array $resultArray, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
array $results, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
$htmlParser, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
array $record, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
$field, /** @var $hookObj \TYPO3\CMS\Linkvalidator\Linktype\AbstractLinktype */
$table) {}
        public function getLinkCounts($curPage) {}
        public function extGetTreeList($id, $depth, $begin = 0, $permsClause, $considerHidden = false) {}
        public function getRootLineIsHidden(array $pageInfo) {}
        protected function emitBeforeAnalyzeRecordSignal($results, $record, $table, $fields) {}
        /**
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        /**
         * @return \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected function getObjectManager() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Linkvalidator\Task {
    /**
     * This class provides Scheduler Additional Field plugin implementation
     */
    class ValidatorTaskAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        /**
         * Default language file of the extension linkvalidator
         *
         * @var string
         */
        protected $languageFile;

        public function getAdditionalFields(array $taskInfo, $task, SchedulerModuleController $schedulerModule) {}
        protected function getSelectedState(array $configurationArray, $currentValue) {}
        public function validateAdditionalFields(array $submittedData, SchedulerModuleController $schedulerModule) {}
/** @var $task ValidatorTask */
        public function saveAdditionalFields(/** @var $task ValidatorTask */
array $submittedData, /** @var $task ValidatorTask */
AbstractTask $task) {}
        private function getPageTitle($pageId) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * This class provides Scheduler plugin implementation
     */
    class ValidatorTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * @var int
         */
        protected $sleepTime;
        /**
         * @var int
         */
        protected $sleepAfterFinish;
        /**
         * @var int
         */
        protected $countInARun;
        /**
         * Total number of broken links
         *
         * @var int
         */
        protected $totalBrokenLink;
        /**
         * Total number of broken links from the last run
         *
         * @var int
         */
        protected $oldTotalBrokenLink;
        /**
         * Mail template fetched from the given template file
         *
         * @var string
         */
        protected $templateMail;
        /**
         * specific TSconfig for this task.
         *
         * @var array
         */
        protected $configuration;
        /**
         * Shows if number of result was different from the result of the last check
         *
         * @var bool
         */
        protected $isDifferentToLastRun;
        /**
         * Template to be used for the email
         *
         * @var string
         */
        protected $emailTemplateFile;
        /**
         * Level of pages the task should check
         *
         * @var int
         */
        protected $depth;
        /**
         * UID of the start page for this task
         *
         * @var int
         */
        protected $page;
        /**
         * Email address to which an email report is sent
         *
         * @var string
         */
        protected $email;
        /**
         * Only send an email, if new broken links were found
         *
         * @var bool
         */
        protected $emailOnBrokenLinkOnly;
        /**
         * @var MarkerBasedTemplateService
         */
        protected $templateService;
        /**
         * Default language file of the extension linkvalidator
         *
         * @var string
         */
        protected $languageFile;

        /**
         * Get the value of the protected property email
         *
         * @return string Email address to which an email report is sent
         */
        public function getEmail() {}
        public function setEmail($email) {}
        /**
         * Get the value of the protected property emailOnBrokenLinkOnly
         *
         * @return bool Whether to send an email, if new broken links were found
         */
        public function getEmailOnBrokenLinkOnly() {}
        public function setEmailOnBrokenLinkOnly($emailOnBrokenLinkOnly) {}
        /**
         * Get the value of the protected property page
         *
         * @return int UID of the start page for this task
         */
        public function getPage() {}
        public function setPage($page) {}
        /**
         * Get the value of the protected property depth
         *
         * @return int Level of pages the task should check
         */
        public function getDepth() {}
        public function setDepth($depth) {}
        /**
         * Get the value of the protected property emailTemplateFile
         *
         * @return string Template to be used for the email
         */
        public function getEmailTemplateFile() {}
        public function setEmailTemplateFile($emailTemplateFile) {}
        /**
         * Get the value of the protected property configuration
         *
         * @return array specific TSconfig for this task
         */
        public function getConfiguration() {}
        public function setConfiguration($configuration) {}
        /**
         * Function execute from the Scheduler
         *
         * @return bool TRUE on successful execution, FALSE on error
         * @throws \InvalidArgumentException if the email template file can not be read
         */
        public function execute() {}
/** @var $processor LinkAnalyzer */
        protected function checkPageLinks(/** @var $processor LinkAnalyzer */
$page) {}
        protected function loadModTsConfig($page) {}
        protected function getSearchField(array $modTS) {}
        protected function getLinkTypes(array $modTS) {}
/** @var $mail MailMessage */
        protected function reportEmail(/** @var $mail MailMessage */
$pageSections, /** @var $mail MailMessage */
array $modTsConfig) {}
        protected function buildMail($curPage, $pageList, array $markerArray, array $oldBrokenLink) {}
        /**
         * Returns the most important properties of the link validator task as a
         * comma separated string that will be displayed in the scheduler module.
         *
         * @return string
         */
        public function getAdditionalInformation() {}
        /**
         * Simulate cli call with setting the required options to the $_SERVER['argv']
         */
        protected function setCliArguments() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Linkvalidator\Report {
    /**
     * Module 'Linkvalidator' for the 'linkvalidator' extension
     */
    class LinkValidatorReport extends \typo3\cms\backend\module\abstractfunctionmodule {
        /**
         * @var DocumentTemplate
         */
        public $doc;
        /**
         * Information about the current page record
         *
         * @var array
         */
        protected $pageRecord;
        /**
         * Information, if the module is accessible for the current user or not
         *
         * @var bool
         */
        protected $isAccessibleForCurrentUser;
        /**
         * Depth for the recursive traversal of pages for the link validation
         *
         * @var int
         */
        protected $searchLevel;
        /**
         * Link validation class
         *
         * @var LinkAnalyzer
         */
        protected $linkAnalyzer;
        /**
         * TSconfig of the current module
         *
         * @var array
         */
        protected $modTS;
        /**
         * List of available link types to check defined in the TSconfig
         *
         * @var array
         */
        protected $availableOptions;
        /**
         * List of link types currently chosen in the statistics table
         * Used to show broken links of these types only
         *
         * @var array
         */
        protected $checkOpt;
        /**
         * Html for the statistics table with the checkboxes of the link types
         * and the numbers of broken links for report tab
         *
         * @var string
         */
        protected $checkOptionsHtml;
        /**
         * Html for the statistics table with the checkboxes of the link types
         * and the numbers of broken links for check links tab
         *
         * @var string
         */
        protected $checkOptionsHtmlCheck;
        /**
         * Complete content (html) to be displayed
         *
         * @var string
         */
        protected $content;
        /**
         * @var \TYPO3\CMS\Linkvalidator\Linktype\LinktypeInterface[]
         */
        protected $hookObjectsArr;
        /**
         * @var string
         */
        protected $updateListHtml;
        /**
         * @var string
         */
        protected $refreshListHtml;
        /**
         * @var MarkerBasedTemplateService
         */
        protected $templateService;
        /**
         * @var IconFactory
         */
        protected $iconFactory;

        /**
         * Main method of modfuncreport
         *
         * @return string Module content
         */
        public function main() {}
        /**
         * Create tabs to split the report and the checkLink functions
         *
         * @return string
         */
        protected function createTabs() {}
        /**
         * Initializes the Module
         */
        protected function initialize() {}
        /**
         * Updates the table of stored broken links
         */
        protected function updateBrokenLinks() {}
        /**
         * Renders the content of the module
         */
        protected function render() {}
        protected function flush($form = false) {}
        /**
         * Builds the selector for the level of pages to search
         *
         * @return string Html code of that selector
         */
        protected function getLevelSelector() {}
        /**
         * Displays the table of broken links or a note if there were no broken links
         *
         * @return string Content of the table or of the note
         */
        protected function renderBrokenLinksTable() {}
        protected function getPageList(int $currentPageUid) : array {}
        protected function getLinkValidatorBrokenLinks(array $pageList, array $linkTypes) : Statement {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        protected function getNoBrokenLinkMessage(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
array $brokenLinksMarker) {}
        /**
         * Displays the table header of the table with the broken links
         *
         * @return string Code of content
         */
        protected function startTable() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function renderTableRow(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $row, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$brokenLinksItemTemplate) {}
        protected function getCheckOptions(array $brokenLinkOverView, $prefix = '') {}
        /**
         * Gets the buttons that shall be rendered in the docHeader
         *
         * @return array Available buttons for the docHeader
         */
        protected function getDocHeaderButtons() {}
        /**
         * Gets the button to set a new shortcut in the backend (if current user is allowed to).
         *
         * @return string HTML representation of the shortcut button
         */
        protected function getShortcutButton() {}
        /**
         * Gets the filled markers that are used in the HTML template
         *
         * @return array The filled marker array
         */
        protected function getTemplateMarkers() {}
        /**
         * Gets the filled markers that are used in the HTML template
         *
         * @return array The filled marker array
         */
        protected function getTemplateMarkersCheck() {}
        /**
         * Determines whether the current user is an admin
         *
         * @return bool Whether the current user is admin
         */
        protected function isCurrentUserAdmin() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Linkvalidator\Linktype {
    /**
     * This class provides Check File Links plugin implementation
     */
    class FileLinktype extends \typo3\cms\linkvalidator\linktype\abstractlinktype {
        public function fetchType($value, $type, $key) {}
        public function checkLink($url, $softRefEntry, $reference) {}
        public function getErrorMessage($errorParams) {}
        public function getBrokenUrl($row) {}
    }

    /**
     * This class provides Check Link Handler plugin implementation
     */
    class LinkHandler extends \typo3\cms\linkvalidator\linktype\abstractlinktype {
        const DISABLED = 'disabled';
        const DELETED = 'deleted';

        public function checkLink($url, $softRefEntry, $reference) {}
        public function fetchType($value, $type, $key) {}
        public function getErrorMessage($errorParams) {}
        protected function getTranslatedErrorMessage($translationKey, $uid, $title = null) {}
        protected function getRecordRow($tableName, $uid, $filter = '') {}
    }

    /**
     * This class provides Check Base plugin implementation
     */
    abstract class AbstractLinktype implements \typo3\cms\linkvalidator\linktype\linktypeinterface {
        /**
         * Contains parameters needed for the rendering of the error message
         *
         * @var array
         */
        protected $errorParams;

        public function fetchType($value, $type, $key) {}
        protected function setErrorParams($value) {}
        /**
         * Get the value of the private property errorParams
         *
         * @return array All parameters needed for the rendering of the error message
         */
        public function getErrorParams() {}
        public function getBrokenUrl($row) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * This class provides Check Internal Links plugin implementation
     */
    class InternalLinktype extends \typo3\cms\linkvalidator\linktype\abstractlinktype {
        const HIDDEN = 'hidden';
        const DELETED = 'deleted';
        const NOTEXISTING = 'notExisting';
        const MOVED = 'moved';

        /**
         * Result of the check, if the current page uid is valid or not
         *
         * @var bool
         */
        protected $responsePage;
        /**
         * Result of the check, if the current content uid is valid or not
         *
         * @var bool
         */
        protected $responseContent;

        public function checkLink($url, $softRefEntry, $reference) {}
        protected function checkPage($page) {}
        protected function checkContent($page, $anchor) {}
        public function getErrorMessage($errorParams) {}
        public function getBrokenUrl($row) {}
    }

    /**
     * This class provides Check External Links plugin implementation
     */
    class ExternalLinktype extends \typo3\cms\linkvalidator\linktype\abstractlinktype {
        /**
         * Cached list of the URLs, which were already checked for the current processing
         *
         * @var array $urlReports
         */
        protected $urlReports;
        /**
         * Cached list of all error parameters of the URLs, which were already checked for the current processing
         *
         * @var array $urlErrorParams
         */
        protected $urlErrorParams;
        /**
         * List of headers to be used for matching an URL for the current processing
         *
         * @var array $additionalHeaders
         */
        protected $additionalHeaders;

/** @var RequestFactory $requestFactory */
        public function checkLink(/** @var RequestFactory $requestFactory */
$url, /** @var RequestFactory $requestFactory */
$softRefEntry, /** @var RequestFactory $requestFactory */
$reference) {}
        public function getErrorMessage($errorParams) {}
        public function fetchType($value, $type, $key) {}
    }


    /**
     * This class provides interface implementation.
     */
    interface LinktypeInterface {
        function checkLink($url, $softRefEntry, $reference) ;
        function fetchType($value, $type, $key) ;
        /**
         * Get the value of the private property errorParams.
         *
         * @return array All parameters needed for the rendering of the error message
         */
        function getErrorParams() ;
        function getBrokenUrl($row) ;
        function getErrorMessage($errorParams) ;
    }

}

namespace TYPO3\CMS\Setup\Controller {
    /**
     * Script class for the Setup module
     */
    class SetupModuleController {
        const PASSWORD_UPDATED = 1;
        const PASSWORD_NOT_UPDATED = 0;
        const PASSWORD_NOT_THE_SAME = 2;
        const PASSWORD_OLD_WRONG = 3;

        /**
         * @var array
         */
        public $MOD_MENU;
        /**
         * @var array
         */
        public $MOD_SETTINGS;
        /**
         * @var string
         */
        public $content;
        /**
         * @var array
         */
        public $overrideConf;
        /**
         * backend user object, set during simulate-user operation
         *
         * @var \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        public $OLD_BE_USER;
        /**
         * @var bool
         */
        public $languageUpdate;
        /**
         * @var bool
         */
        protected $pagetreeNeedsRefresh;
        /**
         * @var bool
         */
        protected $isAdmin;
        /**
         * @var array
         */
        protected $tsFieldConf;
        /**
         * @var bool
         */
        protected $saveData;
        /**
         * @var int
         */
        protected $passwordIsUpdated;
        /**
         * @var bool
         */
        protected $passwordIsSubmitted;
        /**
         * @var bool
         */
        protected $setupIsUpdated;
        /**
         * @var bool
         */
        protected $settingsAreResetToDefault;
        /**
         * Form protection instance
         *
         * @var \TYPO3\CMS\Core\FormProtection\BackendFormProtection
         */
        protected $formProtection;
        /**
         * @var string
         */
        protected $simulateSelector;
        /**
         * @var int
         */
        protected $simUser;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;
        /**
         * @var ModuleLoader
         */
        protected $loadModules;
        /**
         * @var BackendUserAuthentication
         */
        protected $beUser;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Instantiate the form protection before a simulated user is initialized.
         */
        public function __construct() {}
        /**
         * Getter for the form protection instance.
         *
         * @return \TYPO3\CMS\Core\FormProtection\BackendFormProtection
         */
        public function getFormProtection() {}
        /** @var DataHandler $dataHandler */
        public function storeIncomingData() {}
        /**
         * Initializes the module for display of the settings form.
         */
        public function init() {}
        /**
         * Generate necessary JavaScript
         *
         * @return string
         */
        protected function getJavaScript() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * renders the data for all tabs in the user setup and returns
         * everything that is needed with tabs and dyntab menu
         *
         * @return array Ready to use for the dyntabmenu itemarray
         */
        protected function renderUserSetup() {}
        /**
         * Returns the backend user object, either the global OR the $this->OLD_BE_USER which is set during simulate-user operation.
         * Anyway: The REAL user is returned - the one logged in.
         *
         * @return BackendUserAuthentication The REAL user is returned - the one logged in.
         */
        protected function getRealScriptUserObj() {}
/** @var $locales \TYPO3\CMS\Core\Localization\Locales */
        public function renderLanguageSelect(/** @var $locales \TYPO3\CMS\Core\Localization\Locales */
array $params, /** @var $locales \TYPO3\CMS\Core\Localization\Locales */
$controller) {}
        public function renderStartModuleSelect($params, $pObj) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function simulateUser() {}
        /**
         * Render simulate user select and label
         *
         * @return string
         */
        protected function renderSimulateUserSelectAndLabel() {}
        protected function checkAccess(array $config) {}
        protected function getLabel($str, $key = '', $addLabelTag = true) {}
        protected function getCSH($str, $label) {}
        /**
         * Returns array with fields defined in $GLOBALS['TYPO3_USER_SETTINGS']['showitem']
         * Remove fields which are disabled by user TSconfig
         *
         * @return string[] Array with field names visible in form
         */
        protected function getFieldsFromShowItem() {}
        protected function getAvatarFileUid($beUserId) {}
        protected function setAvatarFileUid($beUserId, $fileUid, array $storeRec) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function addAvatarButtonJs(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$fieldName) {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Add FlashMessages for various actions
         */
        protected function addFlashMessages() {}
        protected function enqueueFlashMessages(array $flashMessages) {}
        protected function getFlashMessage($message, $title, $severity = FlashMessage::OK) {}
    }

}

namespace TYPO3\CMS\Setup\Tests\Unit\Controller {
    /**
     * Class SetupModuleControllerTest
     */
    class SetupModuleControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function addFlashMessagesAddsMessagesIfSetupIsUpdated() {}
        /**
         * @test
         */
        public function addFlashMessagesAddsMessageIfSettingsAreResetToDefault() {}
        /**
         * @test
         */
        public function addFlashMessagesAddsMessageIfPasswordWasSuccessfullyUpdated() {}
        /**
         * @test
         */
        public function addFlashMessagesAddsMessageIfOldPasswordWasWrong() {}
        /**
         * @test
         */
        public function addFlashMessagesAddsMessageIfPasswordsNotTheSame() {}
        /**
         * @test
         */
        public function addFlashMessagesAddsMessagesToQueue() {}
    }

}

namespace TYPO3\CMS\Impexp {
    /**
     * T3D file Import library (TYPO3 Record Document)
     */
    class Import extends \typo3\cms\impexp\importexport {
        /**
         * Used to register the forged UID values for imported records that we want
         * to create with the same UIDs as in the import file. Admin-only feature.
         *
         * @var array
         */
        public $suggestedInsertUids;
        /**
         * Disable logging when importing
         *
         * @var bool
         */
        public $enableLogging;
        /**
         * Keys are [tablename]:[new NEWxxx ids (or when updating it is uids)]
         * while values are arrays with table/uid of the original record it is based on.
         * With the array keys the new ids can be looked up inside DataHandler
         *
         * @var array
         */
        public $import_newId;
        /**
         * Page id map for page tree (import)
         *
         * @var array
         */
        public $import_newId_pids;
        /**
         * Internal data accumulation for writing records during import
         *
         * @var array
         */
        public $import_data;
        /**
         * Array of current registered storage objects
         *
         * @var ResourceStorage[]
         */
        protected $storageObjects;
        /**
         * @var string|null
         */
        protected $filesPathForImport;
        /**
         * @var array
         */
        protected $unlinkFiles;
        /**
         * @var array
         */
        protected $alternativeFileName;
        /**
         * @var array
         */
        protected $alternativeFilePath;
        /**
         * @var array
         */
        protected $filePathMap;

        /**
         * Init the object
         */
        public function init() {}
        /**
         * Initialize all settings for the import
         */
        protected function initializeImport() {}
        /** @var $storageRepository StorageRepository */
        protected function initializeStorageObjects() {}
        public function importData($pid) {}
        /**
         * Imports the sys_file_storage records from internal data array.
         */
        protected function writeSysFileStorageRecords() {}
        protected function isEquivalentObjectStorage(ResourceStorage $storageObject, array $storageRecord) {}
        /**
         * Checks any prerequisites necessary to get fulfilled before import
         *
         * @return array Messages explaining issues which need to get resolved before import
         */
        public function checkImportPrerequisites() {}
        /** @var $newFile File */
        protected function writeSysFileRecords() {}
        /**
         * Removes all sys_file_reference records from the import data array that are pointing to sys_file records which
         * are missing not in the import data to prevent exceptions on checking the related file started by the Datahandler.
         */
        protected function removeSysFileReferenceRecordsFromImportDataWithRelationToMissingFile() {}
        protected function isFallbackStorage($storageId) {}
        protected function fixUidLocalInSysFileReferenceRecords($oldFileUid, $newFileUid) {}
        /**
         * Fetched fresh storage records from database because the new imported
         * ones are not in cached data of the StorageRepository
         *
         * @return bool|array
         */
        protected function fetchStorageRecords() {}
        protected function writeTemporaryFileFromData($fileId, $dataKey = 'files_fal') {}
        public function writeRecords_pages($pid) {}
        /**
         * Organize all updated pages in page tree so they are related like in the import file
         * Only used for updates and when $this->dat['header']['pagetree'] is an array.
         *
         * @access private
         * @see writeRecords_pages(), writeRecords_records_order()
         */
        public function writeRecords_pages_order() {}
        public function flatInversePageTree_pid($idH, $a = [ ], $pid = -1) {}
        public function writeRecords_records($pid) {}
        public function writeRecords_records_order($mainPid) {}
        public function addSingle($table, $uid, $pid) {}
        public function addToMapId($substNEWwithIDs) {}
        /**
         * Returns a new $TCE object
         *
         * @return DataHandler $TCE object
         */
        public function getNewTCE() {}
        /**
         * Cleaning up all the temporary files stored in typo3temp/ folder
         */
        public function unlinkTempFiles() {}
        /**
         * At the end of the import process all file and DB relations should be set properly (that is relations
         * to imported records are all re-created so imported records are correctly related again)
         * Relations in flexform fields are processed in setFlexFormRelations() after this function
         *
         * @see setFlexFormRelations()
         */
        public function setRelations() {}
        public function setRelations_db($itemArray, $itemConfig) {}
        public function import_addFileNameToBeCopied($fI) {}
        /**
         * After all DB relations has been set in the end of the import (see setRelations()) then it is time to correct all relations inside of FlexForm fields.
         * The reason for doing this after is that the setting of relations may affect (quite often!) which data structure is used for the flexforms field!
         *
         * @see setRelations()
         */
        public function setFlexFormRelations() {}
        public function remapListedDBRecords_flexFormCallBack($pParams, $dsConf, $dataValue, $dataValue_ext1, $dataValue_ext2, $path) {}
        /**
         * Processing of soft references
         */
        public function processSoftReferences() {}
        public function processSoftReferences_flexFormCallBack($pParams, $dsConf, $dataValue, $dataValue_ext1, $dataValue_ext2, $path) {}
        public function processSoftReferences_substTokens($tokenizedContent, $softRefCfgs, $table, $uid) {}
        public function processSoftReferences_saveFile($relFileName, $cfg, $table, $uid) {}
        public function processSoftReferences_saveFile_createRelFile($origDirPrefix, $fileName, $fileID, $table, $uid) {}
        public function writeFileVerify($fileName, $fileID, $bypassMountCheck = false) {}
        public function checkOrCreateDir($dirPrefix) {}
        public function loadFile($filename, $all = false) {}
        public function getNextFilePart($fd, $unserialize = false, $name = '') {}
        public function loadContent($filecontent) {}
        public function getNextContentPart($filecontent, $pointer, $unserialize = false, $name = '') {}
        /**
         * Setting up the object based on the recently loaded ->dat array
         */
        public function loadInit() {}
    }

    /**
     * T3D file Export library (TYPO3 Record Document)
     */
    class Export extends \typo3\cms\impexp\importexport {
        /**
         * 1MB max file size
         *
         * @var int
         */
        public $maxFileSize;
        /**
         * 1MB max record size
         *
         * @var int
         */
        public $maxRecordSize;
        /**
         * 10MB max export size
         *
         * @var int
         */
        public $maxExportSize;
        /**
         * Set  by user: If set, compression in t3d files is disabled
         *
         * @var bool
         */
        public $dontCompress;
        /**
         * If set, HTML file resources are included.
         *
         * @var bool
         */
        public $includeExtFileResources;
        /**
         * Files with external media (HTML/css style references inside)
         *
         * @var string
         */
        public $extFileResourceExtensions;
        /**
         * Keys are [recordname], values are an array of fields to be included
         * in the export
         *
         * @var array
         */
        protected $recordTypesIncludeFields;
        /**
         * Default array of fields to be included in the export
         *
         * @var array
         */
        protected $defaultRecordIncludeFields;
        /**
         * @var bool
         */
        protected $saveFilesOutsideExportFile;
        /**
         * @var string|null
         */
        protected $temporaryFilesPathForExport;

        public function init($dontCompress = false) {}
        /**
         * Set header basics
         */
        public function setHeaderBasics() {}
        public function setCharset($charset) {}
        public function setMetaData($title, $description, $notes, $packager_username, $packager_name, $packager_email) {}
        public function setSaveFilesOutsideExportFile($saveFilesOutsideExportFile) {}
        public function setPageTree($idH) {}
        public function unsetExcludedSections($idH) {}
        public function setRecordTypesIncludeFields(array $recordTypesIncludeFields) {}
        public function setRecordTypeIncludeFields($table, array $fields) {}
        public function export_addRecord($table, $row, $relationLevel = 0) {}
        protected function fixFileIDsInRelations(array $relations) {}
        protected function removeSoftrefsHavingTheSameDatabaseRelation($relations) {}
        public function export_addDBRelations($relationLevel = 0) {}
        public function export_addDBRelations_registerRelation($fI, $addR, $tokenID = '') {}
        /**
         * This adds all files in relations.
         * Call this method AFTER adding all records including relations.
         *
         * @see export_addDBRelations()
         */
        public function export_addFilesFromRelations() {}
        /**
         * This adds all files from sys_file records
         */
        public function export_addFilesFromSysFilesRecords() {}
        public function export_addSysFile(File $file) {}
        public function export_addFile($fI, $recordRef = '', $fieldname = '') {}
        /**
         * If saveFilesOutsideExportFile is enabled, this function returns the path
         * where the files referenced in the export are copied to.
         *
         * @return string
         * @throws \RuntimeException
         * @see setSaveFilesOutsideExportFile()
         */
        public function getTemporaryFilesPathForExport() {}
        public function flatDBrels($dbrels) {}
        public function flatSoftRefs($dbrels) {}
        protected function filterRecordFields($table, array $row) {}
        public function compileMemoryToFileContent($type = '') {}
        /**
         * Creates XML string from input array
         *
         * @return string XML content
         */
        public function createXML() {}
        /**
         * Returns TRUE if the output should be compressed.
         *
         * @return bool TRUE if compression is possible AND requested.
         */
        public function doOutputCompress() {}
        public function addFilePart($data, $compress = false) {}
    }

    /**
     * T3D file Import/Export library (TYPO3 Record Document)
     */
    abstract class ImportExport {
        /**
         * If set, static relations (not exported) will be shown in overview as well
         *
         * @var bool
         */
        public $showStaticRelations;
        /**
         * Name of the "fileadmin" folder where files for export/import should be located
         *
         * @var string
         */
        public $fileadminFolderName;
        /**
         * Whether "import" or "export" mode of object. Set through init() function
         *
         * @var string
         */
        public $mode;
        /**
         * Updates all records that has same UID instead of creating new!
         *
         * @var bool
         */
        public $update;
        /**
         * Is set by importData() when an import has been done.
         *
         * @var bool
         */
        public $doesImport;
        /**
         * If set to a page-record, then the preview display of the content will expect this page-record to be the target
         * for the import and accordingly display validation information. This triggers the visual view of the
         * import/export memory to validate if import is possible
         *
         * @var array
         */
        public $display_import_pid_record;
        /**
         * Setting import modes during update state: as_new, exclude, force_uid
         *
         * @var array
         */
        public $import_mode;
        /**
         * If set, PID correct is ignored globally
         *
         * @var bool
         */
        public $global_ignore_pid;
        /**
         * If set, all UID values are forced! (update or import)
         *
         * @var bool
         */
        public $force_all_UIDS;
        /**
         * If set, a diff-view column is added to the overview.
         *
         * @var bool
         */
        public $showDiff;
        /**
         * If set, and if the user is admin, allow the writing of PHP scripts to fileadmin/ area.
         *
         * @var bool
         */
        public $allowPHPScripts;
        /**
         * Array of values to substitute in editable softreferences.
         *
         * @var array
         */
        public $softrefInputValues;
        /**
         * Mapping between the fileID from import memory and the final filenames they are written to.
         *
         * @var array
         */
        public $fileIDMap;
        /**
         * Add table names here which are THE ONLY ones which will be included
         * into export if found as relations. '_ALL' will allow all tables.
         *
         * @var array
         */
        public $relOnlyTables;
        /**
         * Add tables names here which should not be exported with the file.
         * (Where relations should be mapped to same UIDs in target system).
         *
         * @var array
         */
        public $relStaticTables;
        /**
         * Exclude map. Keys are table:uid  pairs and if set, records are not added to the export.
         *
         * @var array
         */
        public $excludeMap;
        /**
         * Soft Reference Token ID modes.
         *
         * @var array
         */
        public $softrefCfg;
        /**
         * Listing extension dependencies.
         *
         * @var array
         */
        public $extensionDependencies;
        /**
         * After records are written this array is filled with [table][original_uid] = [new_uid]
         *
         * @var array
         */
        public $import_mapId;
        /**
         * Error log.
         *
         * @var array
         */
        public $errorLog;
        /**
         * Cache for record paths
         *
         * @var array
         */
        public $cache_getRecordPath;
        /**
         * Cache of checkPID values.
         *
         * @var array
         */
        public $checkPID_cache;
        /**
         * Set internally if the gzcompress function exists
         * Used by ImportExportController
         *
         * @var bool
         */
        public $compress;
        /**
         * Internal import/export memory
         *
         * @var array
         */
        public $dat;
        /**
         * File processing object
         *
         * @var ExtendedFileUtility
         */
        protected $fileProcObj;
        /**
         * @var array
         */
        protected $remainHeader;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * Flag to control whether all disabled records and their children are excluded (true) or included (false). Defaults
         * to the old behaviour of including everything.
         *
         * @var bool
         */
        protected $excludeDisabledRecords;

        /**
         * The constructor
         */
        public function __construct() {}
        /**
         * Init the object, both import and export
         */
        public function init() {}
        /**
         * Displays an overview of the header-content.
         *
         * @return array The view data
         */
        public function displayContentOverview() {}
        public function traversePageTree($pT, $lines, $preCode = '') {}
        protected function isActive($table, $uid) {}
        protected function excludePageAndRecords($pageUid, $pageTree) {}
        public function traversePageRecords($pT, $lines) {}
        public function traverseAllRecords($pT, $lines) {}
        protected function addGeneralErrorsByTable($table) {}
        public function singleRecordLines($table, $uid, $lines, $preCode, $checkImportInPidRecord = false) {}
        public function addRelations($rels, $lines, $preCode, $recurCheck = [ ], $htmlColorClass = '') {}
        public function addFiles($rels, $lines, $preCode, $htmlColorClass = '', $tokenID = '') {}
        public function checkDokType($checkTable, $doktype) {}
        public function renderControls($r) {}
        public function softrefSelector($cfg) {}
        public function verifyFolderAccess($dirPrefix, $noAlternative = false) {}
        /**
         * @return string
         */
        protected function getTemporaryFolderName() {}
        public function flatInversePageTree($idH, $a = [ ]) {}
        public function isTableStatic($table) {}
        public function inclRelation($table) {}
        public function isExcluded($table, $uid) {}
        public function includeSoftref($tokenID) {}
        public function checkPID($pid) {}
        public function dontIgnorePid($table, $uid) {}
        public function doesRecordExist($table, $uid, $fields = '') {}
        public function getRecordPath($pid) {}
        public function renderSelectBox($prefix, $value, $optValues) {}
        public function compareRecords($databaseRecord, $importRecord, $table, $inverseDiff = false) {}
        public function getRTEoriginalFilename($string) {}
        /**
         * Returns file processing object, initialized only once.
         *
         * @return ExtendedFileUtility File processor object
         */
        public function getFileProcObj() {}
        public function callHook($name, $params) {}
        public function setExcludeDisabledRecords($excludeDisabledRecords = false) {}
        public function error($msg) {}
        /**
         * Returns a table with the error-messages.
         *
         * @return string HTML print of error log
         */
        public function printErrorLog() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Impexp\ContextMenu {
    /**
     * Context menu item provider adding export and import items
     */
    class ItemProvider extends \typo3\cms\backend\contextmenu\itemproviders\abstractprovider {
        /**
         * @var array
         */
        protected $itemsConfiguration;

        /**
         * Export item is added for all database records except files
         *
         * @return bool
         */
        public function canHandle() : bool {}
        /**
         * This needs to be lower than priority of the RecordProvider
         *
         * @return int
         */
        public function getPriority() : int {}
        public function addItems(array $items) : array {}
        protected function canRender(string $itemName, string $type) : bool {}
        protected function getAdditionalAttributes(string $itemName) : array {}
        /**
         * Check if import functionality is available for current user
         */
        protected function isImportEnabled() : bool {}
    }

}

namespace TYPO3\CMS\Impexp\Controller {
    /**
     * Main script class for the Import / Export facility
     */
    class ImportExportController extends \typo3\cms\backend\module\basescriptclass {
        /**
         * @var array|\TYPO3\CMS\Core\Resource\File[]
         */
        protected $uploadedFiles;
        /**
         * Array containing the current page.
         *
         * @var array
         */
        public $pageinfo;
        /**
         * @var Export
         */
        protected $export;
        /**
         * @var Import
         */
        protected $import;
        /**
         * @var ExtendedFileUtility
         */
        protected $fileProcessor;
        /**
         * @var LanguageService
         */
        protected $lang;
        /**
         * @var string
         */
        protected $treeHTML;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;
        /**
         * ModuleTemplate Container
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         *  The name of the shortcut for this page
         *
         * @var string
         */
        protected $shortcutName;
        /**
         * preset repository
         *
         * @var PresetRepository
         */
        protected $presetRepository;
        /**
         * @var StandaloneView
         */
        protected $standaloneView;
        /**
         * @var bool
         */
        protected $excludeDisabledRecords;
        /**
         * Return URL
         *
         * @var string
         */
        protected $returnUrl;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initializes the module and defining necessary variables for this module to run.
         */
        public function init() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         *
         * @return array all available buttons as an associated array
         */
        protected function getButtons() {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        public function exportData(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$inData) {}
        public function addRecordsForPid($k, $tables, $maxNumber) {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        public function exec_listQueryPid(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$table, /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$pid, /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$limit) {}
        public function makeConfigurationForm($inData) {}
        public function makeAdvancedOptionsForm($inData) {}
        public function makeSaveForm($inData) {}
/** @var $import Import */
        public function importData(/** @var $import Import */
$inData) {}
        /**
         * Returns a \TYPO3\CMS\Core\Resource\Folder object for saving export files
         * to the server and is also used for uploading import files.
         *
         * @throws \InvalidArgumentException
         * @return \TYPO3\CMS\Core\Resource\Folder|null
         */
        protected function getDefaultImportExportFolder() {}
        /**
         * Check if a file has been uploaded
         *
         * @throws \InvalidArgumentException
         * @throws \UnexpectedValueException
         */
        public function checkUpload() {}
        public function getTableSelectOptions($excludeList = '') {}
        public function filterPageIds($exclude) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Gets all export files.
         *
         * @throws \InvalidArgumentException
         * @return array|\TYPO3\CMS\Core\Resource\File[]
         */
        protected function getExportFiles() {}
        protected function getFile($combinedIdentifier) {}
    }

}

namespace TYPO3\CMS\Impexp\Task {
    /**
     * This class provides a textarea to save personal notes
     */
    class ImportExportTask implements \typo3\cms\taskcenter\taskinterface {
        /**
         * Back-reference to the calling reports module
         *
         * @var TaskModuleController $taskObject
         */
        protected $taskObject;
        /**
         * URL to task module
         *
         * @var string
         */
        protected $moduleUrl;

/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function __construct(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
TaskModuleController $taskObject) {}
        /**
         * This method renders the report
         *
         * @return string The status report as HTML
         */
        public function getTask() {}
        /**
         * Render an optional additional information for the 1st view in taskcenter.
         * Empty for this task
         *
         * @return string Overview as HTML
         */
        public function getOverview() {}
        /**
         * Main Task center module
         *
         * @return string HTML content.
         */
        public function main() {}
        /**
         * Select presets for this user
         *
         * @return array|bool Array of preset records
         */
        protected function getPresets() {}
        /**
         * Returns a \TYPO3\CMS\Core\Resource\Folder object for saving export files
         * to the server and is also used for uploading import files.
         *
         * @throws \InvalidArgumentException
         * @return \TYPO3\CMS\Core\Resource\Folder|null
         */
        protected function getDefaultImportExportFolder() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return mixed
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Impexp\View {
    /**
     * Extension of the page tree class. Used to get the tree of pages to export.
     */
    class ExportPageTreeView extends \typo3\cms\backend\tree\view\browsetreeview {
        /**
         * Initialization
         */
        public function __construct() {}
        public function wrapTitle($title, $row, $bank = 0) {}
        public function PM_ATagWrap($icon, $cmd, $bMark = '', $isOpen = false) {}
        public function wrapIcon($icon, $row) {}
        public function ext_tree($pid, $clause = '') {}
    }

}

namespace TYPO3\CMS\Impexp\Command {
    /**
     * Command for importing T3D/XML data files
     */
    class ImportCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

}

namespace TYPO3\CMS\Impexp\Command\Exception {
    /**
     * File could not be loaded
     */
    class LoadingFileFailedException extends \runtimeexception {}

    /**
     * Prerequisites are not met
     */
    class PrerequisitesNotMetException extends \runtimeexception {}

    /**
     * File was not found or could not be opened
     */
    class InvalidFileException extends \invalidargumentexception {}

    /**
     * Import failed
     */
    class ImportFailedException extends \runtimeexception {}

}

namespace TYPO3\CMS\Impexp\Domain\Repository {
    /**
     * Handling of presets
     */
    class PresetRepository {
        public function getPresets($pageId) {}
        public function getPreset($uid) {}
/** @var $defaultFlashMessageQueue FlashMessageQueue */
        public function processPresets(/** @var $defaultFlashMessageQueue FlashMessageQueue */
$inData) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Impexp\Hook {
    /**
     * This class adds import export related JavaScript to the backend
     */
    class BackendControllerHook {
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function addJavaScript(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $configuration, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
BackendController $backendController) {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

}

namespace TYPO3\CMS\Impexp\Utility {
    /**
     * Utility for import / export
     * Can be used for API access for simple importing of files
     */
    class ImportExportUtility {
/** @var \TYPO3\CMS\Core\Log\Logger $logger */
        public function importT3DFile(/** @var \TYPO3\CMS\Core\Log\Logger $logger */
$file, /** @var \TYPO3\CMS\Core\Log\Logger $logger */
$pid) {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        protected function emitAfterImportExportInitialisationSignal(Import $import) {}
    }

}

namespace TYPO3\CMS\Impexp\Tests\Functional {
    /**
     * Abstract used by ext:impexp functional tests
     */
    abstract class AbstractImportExportTestCase extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * Absolute path to files that must be removed
         * after a test - handled in tearDown
         *
         * @var array
         */
        protected $testFilesToDelete;
        /**
         * Different DBMS export different field types, the result XML is thus slightly different.
         * This var is used to select a suitable XML export fixture to compare with.
         *
         * @var string
         */
        protected $databasePlatform;

        /**
         * Set up for set up the backend user, initialize the language object
         * and creating the Export instance
         */
        protected function setUp() {}
        /**
         * Tear down for remove of the test files
         */
        protected function tearDown() {}
        protected function setPageTree(Export $export, $pidToStart, $depth = 1) {}
        protected function addRecordsForPid(Export $export, $pid, array $tables) {}
        /**
         * Test if the local filesystem is case sensitive.
         * Needed for some export related tests
         *
         * @return bool
         */
        protected function isCaseSensitiveFilesystem() {}
    }

}

namespace TYPO3\CMS\Impexp\Tests\Functional\Export {
    /**
     * Test case
     */
    class PagesAndTtContentWithImagesTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $pathsToLinkInTestInstance;

        protected function setUp() {}
        /**
         * @test
         */
        public function exportPagesAndRelatedTtContentWithImages() {}
        /**
         * @test
         */
        public function exportPagesAndRelatedTtContentWithImagesFromCorruptSysFileRecord() {}
        /**
         * @test
         */
        public function exportPagesAndRelatedTtContentWithImagesButNotIncluded() {}
        protected function compileExportPagesAndRelatedTtContentWithImages(Export $subject) {}
    }

    /**
     * Test case
     */
    class GroupFileAndFileReferenceItemInFlexFormTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $pathsToLinkInTestInstance;

        protected function setUp() {}
        /**
         * @test
         */
        public function exportGroupFileAndFileReferenceItem() {}
    }

    /**
     * Test case
     */
    class PagesAndTtContentTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $pathsToLinkInTestInstance;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;

        protected function setUp() {}
        /**
         * @test
         */
        public function exportPagesAndRelatedTtContent() {}
    }

    /**
     * Test case
     */
    class IrreTutorialRecordsTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;

        /**
         * @test
         */
        public function exportIrreRecords() {}
    }

    /**
     * Test case
     */
    class GroupFileAndFileReferenceItemTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $pathsToLinkInTestInstance;

        protected function setUp() {}
        /**
         * @test
         */
        public function exportGroupFileAndFileReferenceItem() {}
        /**
         * @test
         */
        public function exportGroupFileAndFileReferenceItemButImagesNotIncluded() {}
        protected function compileExportGroupFileAndFileReferenceItem(Export $subject) {}
    }

}

namespace TYPO3\CMS\Impexp\Tests\Functional\Import {
    /**
     * Test case
     */
    class PagesAndTtContentWithImagesInEmptyDatabaseTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithImagesOnCaseSensitiveFilesystems() {}
        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithImagesOnCaseInsensitiveFilesystems() {}
        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithImagesButWithoutStorageOnCaseSensitiveFilesystems() {}
        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithImagesButWithoutStorageOnCaseInsensitiveFilesystems() {}
        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithImagesWithSpacesInPath() {}
        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithImagesButNotIncluded() {}
        /**
         * @test
         * @group not-mssql
         */
        public function importPagesAndRelatedTtContentWithImageWithForcedUids() {}
    }

    /**
     * Test case
     */
    class PagesAndTtContentWithImagesInFilledDatabaseTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $additionalFoldersToCreate;
        /**
         * @var array
         */
        protected $pathsToProvideInTestInstance;

        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithDifferentImageToExistingData() {}
        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithSameImageToExistingData() {}
    }

    /**
     * Test case
     */
    class GroupFileAndFileReferenceItemInFlexFormTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $additionalFoldersToCreate;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;

        /**
         * @test
         */
        public function importGroupFileAndFileReferenceItemInFlexForm() {}
    }

    /**
     * Test case
     */
    class PagesAndTtContentWithRteImagesAndFileLinkTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $additionalFoldersToCreate;

        /**
         * @test
         */
        public function importPagesAndRelatedTtContentWithRteImagesAndFileLink() {}
    }

    /**
     * Test case
     */
    class PagesAndTtContentTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @test
         */
        public function importPagesAndRelatedTtContent() {}
    }

    /**
     * Test case
     */
    class IrreTutorialRecordsTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;

        /**
         * @test
         */
        public function importIrreRecords() {}
    }

    /**
     * Test case
     */
    class GroupFileAndFileReferenceItemTest extends \typo3\cms\impexp\tests\functional\abstractimportexporttestcase {
        /**
         * @var array
         */
        protected $additionalFoldersToCreate;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;

        /**
         * @test
         */
        public function importGroupFileAndFileReferenceItem() {}
        /**
         * @test
         */
        public function importGroupFileAndFileReferenceItemWithRootLevelOnlyAllowed() {}
        /**
         * @test
         */
        public function importGroupFileAndFileReferenceItemWithRootLevelNotAllowed() {}
        /**
         * @test
         */
        public function importGroupFileAndFileReferenceItemWithRootLevelAndPagesAllowed() {}
        /**
         * @test
         */
        public function importGroupFileAndFileReferenceItemButImagesNotIncluded() {}
    }

}

namespace TYPO3\CMS\FluidStyledContent\ViewHelpers\Link {
    /**
     * A view helper for creating a link for an image popup.
     *
     * = Example =
     *
     * <code title="enlarge image on click">
     * <ce:link.clickEnlarge image="{image}" configuration="{settings.images.popup}"><img src=""></ce:link.clickEnlarge>
     * </code>
     *
     * <output>
     * <a href="url" onclick="javascript" target="thePicture"><img src=""></a>
     * </output>
     */
    class ClickEnlargeViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize ViewHelper arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        /**
         * @return ContentObjectRenderer
         */
        protected static function getContentObjectRenderer() {}
        /**
         * @return TypoScriptService
         */
        protected static function getTypoScriptService() {}
    }

}

namespace TYPO3\CMS\FluidStyledContent\Tests\Functional\Tca {
    class ContentVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var array
         */
        static protected $contentFields;

        /**
         * @test
         */
        public function contentFormContainsExpectedFields() {}
    }

}

namespace TYPO3\CMS\Scheduler {
    /**
     * This class manages the logic of a particular execution of a task
     */
    class Execution {
        /**
         * Start date of a task (timestamp)
         *
         * @var int
         */
        protected $start;
        /**
         * End date of a task (timestamp)
         *
         * @var int
         */
        protected $end;
        /**
         * Interval between executions (in seconds)
         *
         * @var int
         */
        protected $interval;
        /**
         * Flag for concurrent executions: TRUE if allowed, FALSE otherwise (default)
         *
         * @var bool
         */
        protected $multiple;
        /**
         * The cron command string of this task,
         *
         * @var string
         */
        protected $cronCmd;
        /**
         * This flag is used to mark a new single execution
         * See explanations in method setIsNewSingleExecution()
         *
         * @var bool
         * @see \TYPO3\CMS\Scheduler\Execution::setIsNewSingleExecution()
         */
        protected $isNewSingleExecution;

        public function setStart($start) {}
        /**
         * This method is used to get the start date
         *
         * @return int Start date (timestamp)
         */
        public function getStart() {}
        public function setEnd($end) {}
        /**
         * This method is used to get the end date
         *
         * @return int End date (timestamp)
         */
        public function getEnd() {}
        public function setInterval($interval) {}
        /**
         * This method is used to get the interval
         *
         * @return int Interval (in seconds)
         */
        public function getInterval() {}
        public function setMultiple($multiple) {}
        /**
         * This method is used to get the multiple execution flag
         *
         * @return bool TRUE if concurrent executions are allowed, FALSE otherwise
         */
        public function getMultiple() {}
        public function setCronCmd($cmd) {}
        /**
         * Get the value of the cron command
         *
         * @return string Cron command, using cron-like syntax
         */
        public function getCronCmd() {}
        public function setIsNewSingleExecution($isNewSingleExecution) {}
        /**
         * Get whether this is a newly created single execution
         *
         * @return bool Is newly created single execution?
         */
        public function getIsNewSingleExecution() {}
        /**
         * This method gets or calculates the next execution date
         *
         * @return int Timestamp of the next execution
         * @throws \OutOfBoundsException
         */
        public function getNextExecution() {}
        /** @var $cronCmd \TYPO3\CMS\Scheduler\CronCommand\CronCommand */
        public function getNextCronExecution() {}
        /**
         * Checks if the schedule for a task is started or not
         *
         * @return bool TRUE if the schedule is already active, FALSE otherwise
         */
        public function isStarted() {}
        /**
         * Checks if the schedule for a task is passed or not
         *
         * @return bool TRUE if the schedule is not active anymore, FALSE otherwise
         */
        public function isEnded() {}
    }

    /**
     * Failed execution exception
     */
    class FailedExecutionException extends \runtimeexception {}

    /**
     * TYPO3 Scheduler. This class handles scheduling and execution of tasks.
     * Formerly known as "Gabriel TYPO3 arch angel"
     */
    class Scheduler implements \typo3\cms\core\singletoninterface {
        /**
         * @var array $extConf Settings from the extension manager
         */
        public $extConf;

        /**
         * Constructor, makes sure all derived client classes are included
         *
         * @return \TYPO3\CMS\Scheduler\Scheduler
         */
        public function __construct() {}
        public function addTask(Task\AbstractTask $task) {}
        /**
         * Cleans the execution lists of the scheduled tasks, executions older than 24h are removed
         * @todo find a way to actually kill the job
         */
        protected function cleanExecutionArrays() {}
        public function executeTask(Task\AbstractTask $task) {}
/** @var Registry $registry */
        public function recordLastRun(/** @var Registry $registry */
$type = 'cron') {}
        public function removeTask(Task\AbstractTask $task) {}
        public function saveTask(Task\AbstractTask $task) {}
/** @var $task Task\AbstractTask */
        public function fetchTask(/** @var $task Task\AbstractTask */
$uid = 0) {}
        public function fetchTaskRecord($uid) {}
/** @var Task\AbstractTask $task */
        public function fetchTasksWithCondition(/** @var Task\AbstractTask $task */
$where, /** @var Task\AbstractTask $task */
$includeDisabledTasks = false) {}
        public function isValidTaskObject($task) {}
        public function log($message, $status = 0, $code = 'scheduler') {}
    }


    /**
     * Interface for classes who want to provide additional fields when adding a task
     */
    interface AdditionalFieldProviderInterface {
        function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $schedulerModule) ;
        function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $schedulerModule) ;
        function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) ;
    }

    /**
     * Interface for tasks who can provide their progress
     */
    interface ProgressProviderInterface {
        /**
         * Gets the progress of a task.
         *
         * @return float Progress of the task as a two decimal precision float. f.e. 44.87
         */
        function getProgress() ;
    }

}

namespace TYPO3\CMS\Scheduler\Example {
    /**
     * Additional fields provider class for usage with the Scheduler's sleep task
     */
    class SleepTaskAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        public function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
    }

    /**
     * Additional fields provider class for usage with the Scheduler's test task
     */
    class TestTaskAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        public function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
    }

    /**
     * Provides testing procedures
     */
    class TestTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * An email address to be used during the process
         *
         * @var string $email
         */
        public $email;

        /** @var $mailer \TYPO3\CMS\Core\Mail\MailMessage */
        public function execute() {}
        /**
         * This method returns the destination mail address as additional information
         *
         * @return string Information to display
         */
        public function getAdditionalInformation() {}
    }

    /**
     * Provides a task that sleeps for some time
     * This is useful for testing parallel executions
     */
    class SleepTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Number of seconds the task should be sleeping for
         *
         * @var int
         */
        public $sleepTime;

        /**
         * Function executed from the Scheduler.
         * Goes to sleep ;-)
         *
         * @return bool
         */
        public function execute() {}
        /**
         * This method returns the sleep duration as additional information
         *
         * @return string Information to display
         */
        public function getAdditionalInformation() {}
    }

}

namespace TYPO3\CMS\Scheduler\ViewHelpers {
    /**
     * Create internal link within backend app
     * @internal
     */
    class ModuleLinkViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Scheduler\CronCommand {
    /**
     * This class provides calculations for the cron command format.
     */
    class CronCommand {
        /**
         * Normalized sections of the cron command.
         * Allowed are comma separated lists of integers and the character '*'
         *
         * field          lower and upper bound
         * -----          --------------
         * minute         0-59
         * hour           0-23
         * day of month   1-31
         * month          1-12
         * day of week    1-7
         *
         * @var array $cronCommandSections
         */
        protected $cronCommandSections;
        /**
         * Timestamp of next execution date.
         * This value starts with 'now + 1 minute' if not set externally
         * by unit tests. After a call to calculateNextValue() it holds the timestamp of
         * the next execution date which matches the cron command restrictions.
         */
        protected $timestamp;

        public function __construct($cronCommand, $timestamp = false) {}
        /**
         * Calculates the date of the next execution.
         *
         * @api
         * @throws \RuntimeException
         */
        public function calculateNextValue() {}
        /**
         * Get next timestamp
         *
         * @api
         * @return int Unix timestamp
         */
        public function getTimestamp() {}
        /**
         * Get cron command sections. Array of strings, each containing either
         * a list of comma separated integers or *
         *
         * @return array command sections:
         */
        public function getCronCommandSections() {}
        protected function minuteAndHourMatchesCronCommand($timestamp) {}
        protected function dayMatchesCronCommand($timestamp) {}
        protected function isInCommandList($commandExpression, $numberToMatch) {}
        protected function numberOfSecondsInDay($timestamp) {}
        protected function roundTimestamp($timestamp) {}
    }

    /**
     * Validate and normalize a cron command.
     *
     * Special fields like three letter weekdays, ranges and steps are substituted
     * to a comma separated list of integers. Example:
     * '2-4 10-40/10 * mar * fri'  will be normalized to '2,4 10,20,30,40 * * 3 1,2'
     */
    class NormalizeCommand {
        public static function normalize($cronCommand) {}
        protected static function convertKeywordsToCronCommand($cronCommand) {}
        protected static function normalizeFields($cronCommand) {}
        protected static function splitFields($cronCommand) {}
        protected static function normalizeMonthAndWeekdayField($expression, $isMonthField = true) {}
        protected static function normalizeIntegerField($expression, $lowerBound = 0, $upperBound = 59) {}
        protected static function convertRangeToListOfValues($range) {}
        protected static function reduceListOfValuesByStepValue($stepExpression) {}
        protected static function normalizeMonthAndWeekday($expression, $isMonth = true) {}
        protected static function normalizeMonth($month) {}
        protected static function normalizeWeekday($weekday) {}
    }

}

namespace TYPO3\CMS\Scheduler\Controller {
    /**
     * Module 'TYPO3 Scheduler administration module' for the 'scheduler' extension.
     */
    class SchedulerModuleController {
        /**
         * Array containing submitted data when editing or adding a task
         *
         * @var array
         */
        protected $submittedData;
        /**
         * Array containing all messages issued by the application logic
         * Contains the error's severity and the message itself
         *
         * @var array
         */
        protected $messages;
        /**
         * @var string Key of the CSH file
         */
        protected $cshKey;
        /**
         * @var Scheduler Local scheduler instance
         */
        protected $scheduler;
        /**
         * @var string
         */
        protected $backendTemplatePath;
        /**
         * @var StandaloneView
         */
        protected $view;
        /**
         * @var string Base URI of scheduler module
         */
        protected $moduleUri;
        /**
         * ModuleTemplate Container
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * The value of GET/POST var, 'CMD'
         *
         * @see init()
         * @var mixed
         */
        public $CMD;
        /**
         * The module menu items array. Each key represents a key for which values can range between the items in the array of that key.
         *
         * @see init()
         * @var array
         */
        protected $MOD_MENU;
        /**
         * Current settings for the keys of the MOD_MENU array
         *
         * @see $MOD_MENU
         * @var array
         */
        protected $MOD_SETTINGS;

        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function __construct() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Generates the action menu
         */
        protected function getModuleMenu() {}
        /**
         * Generate the module's content
         *
         * @return string HTML of the module's main content
         */
        protected function getModuleContent() {}
        /**
         * This method displays the result of a number of checks
         * on whether the Scheduler is ready to run or running properly
         *
         * @return string Further information
         */
        protected function checkScreenAction() {}
        /**
         * This method gathers information about all available task classes and displays it
         *
         * @return string html
         */
        protected function infoScreenAction() {}
        /**
         * Delete a task from the execution queue
         */
        protected function deleteTask() {}
        /**
         * Clears the registered running executions from the task
         * Note that this doesn't actually stop the running script. It just unmarks
         * all executions.
         * @todo find a way to really kill the running task
         */
        protected function stopTask() {}
        /**
         * Toggles the disabled state of the submitted task
         */
        protected function toggleDisableAction() {}
        /**
         * Sets the next execution time of the submitted task to now
         */
        protected function setNextExecutionTimeAction() {}
        /** @var $providerObject AdditionalFieldProviderInterface */
        protected function editTaskAction() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function getBrowseButton(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$fieldID, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $fieldInfo) {}
        /**
         * Execute all selected tasks
         */
        protected function executeTasks() {}
        /** @var $exceptionArray array */
        protected function listTasksAction() {}
        protected function makeStatusLabel(array $labels) {}
        /**
         * Saves a task specified in the backend form to the database
         */
        protected function saveTask() {}
        /** @var $providerObject AdditionalFieldProviderInterface */
        protected function preprocessData() {}
        protected function convertToTimestamp(string $input) : int {}
        public function addMessage($message, $severity = FlashMessage::OK) {}
        /**
         * This method fetches a list of all classes that have been registered with the Scheduler
         * For each item the following information is provided, as an associative array:
         *
         * ['extension']	=>	Key of the extension which provides the class
         * ['filename']		=>	Path to the file containing the class
         * ['title']		=>	String (possibly localized) containing a human-readable name for the class
         * ['provider']		=>	Name of class that implements the interface for additional fields, if necessary
         *
         * The name of the class itself is used as the key of the list array
         *
         * @return array List of registered classes
         */
        protected function getRegisteredClasses() {}
        /**
         * This method fetches list of all group that have been registered with the Scheduler
         *
         * @return array List of registered groups
         */
        protected function getRegisteredTaskGroups() {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * @return string
         */
        protected function getServerTime() {}
        /**
         * Returns the Language Service
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the global BackendUserAuthentication object.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

}

namespace TYPO3\CMS\Scheduler\Task {
    /**
     * This task which indexes files in storage
     */
    class FileStorageExtractionTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Storage Uid
         *
         * @var int
         */
        public $storageUid;
        /**
         * FileCount
         *
         * @var int
         */
        public $maxFileCount;

        /**
         * Function execute from the Scheduler
         *
         * @return bool TRUE on successful execution, FALSE on error
         */
        public function execute() {}
        protected function getIndexer(\TYPO3\CMS\Core\Resource\ResourceStorage $storage) {}
    }

    /**
     * Perform OPTIMIZE TABLE SQL statements
     *
     * This task reorganizes the physical storage of table data and associated index data,
     * to reduce storage space and improve I/O efficiency when accessing the table. The
     * exact changes made to each table depend on the storage engine used by that table.
     */
    class OptimizeDatabaseTableTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Database tables that should be cleaned up,
         * set by additional field provider.
         *
         * @var array Selected tables to optimize
         */
        public $selectedTables;

        /**
         * Execute table optimization, called by scheduler.
         *
         * @return bool
         */
        public function execute() {}
        /**
         * Output the selected tables
         *
         * @return string
         */
        public function getAdditionalInformation() {}
    }

    /**
     * Recycler folder garbage collection task
     *
     * This task finds all "_recycler_" folders below all storages and
     * deletes all files in them that have not changed for more than
     * a given number of days.
     *
     * Compatible drivers should be implemented correctly for this. The shipped "local driver"
     * does a "touch()" after the file is moved into the recycler folder.
     */
    class RecyclerGarbageCollectionTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Elapsed period since last modification before a file will
         * be deleted in a recycler directory.
         *
         * @var int Number of days before cleaning up files
         */
        public $numberOfDays;

        /**
         * Cleanup recycled files, called by scheduler.
         *
         * @return bool TRUE if task run was successful
         * @throws \BadMethodCallException
         */
        public function execute() {}
        protected function cleanupRecycledFiles(Folder $folder, $timestamp) {}
    }

    /**
     * Additional BE fields for recycler garbage collection task.
     *
     * Creates an integer input field for difference between scheduler run time
     * and file modification time in days to select from.
     */
    class RecyclerGarbageCollectionAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        /**
         * Default period in days to remove a recycled file
         *
         * @var int Default number of days
         */
        protected $defaultNumberOfDays;

        public function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
    }

    /**
     * Additional BE fields for tasks which indexes files in a storage
     */
    class FileStorageIndexingAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        public function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
/** @var \TYPO3\CMS\Core\Resource\ResourceStorage[] $storages */
        protected function getAllStoragesField(/** @var \TYPO3\CMS\Core\Resource\ResourceStorage[] $storages */
FileStorageIndexingTask $task = null, /** @var \TYPO3\CMS\Core\Resource\ResourceStorage[] $storages */
$taskInfo) {}
        public function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
    }

    /**
     * Additional BE fields for optimize database table task.
     */
    class OptimizeDatabaseTableAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        /**
         * @var string
         */
        protected $languageFile;

        public function getAdditionalFields(array $taskInfo, $task, SchedulerModuleController $parentObject) {}
        public function validateAdditionalFields(array $submittedData, SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, AbstractTask $task) {}
        protected function getDatabaseTableOptions(array $selectedTables) {}
        /**
         * Get all tables that are capable of optimization
         *
         * @return array Names of table that can be optimized.
         */
        protected function getOptimizableTables() {}
        protected function getOptimizableTablesForConnection(Connection $connection, array $tableNames = [ ]) : array {}
    }

    /**
     * Garbage collection of caching framework cache backends.
     *
     * This task finds all configured caching framework caches and
     * calls the garbage collection of a cache if the cache backend
     * is configured to be cleaned.
     */
    class CachingFrameworkGarbageCollectionTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Backend types that should be cleaned up,
         * set by additional field provider.
         *
         * @var array Selected backends to do garbage collection for
         */
        public $selectedBackends;

        /**
         * Execute garbage collection, called by scheduler.
         *
         * @return bool
         */
        public function execute() {}
    }

    /**
     * This is the base class for all Scheduler tasks
     * It's an abstract class, not designed to be instantiated directly
     * All Scheduler tasks should inherit from this class
     */
    abstract class AbstractTask implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        const TYPE_SINGLE = 1;
        const TYPE_RECURRING = 2;

        /**
         * Reference to a scheduler object
         *
         * @var \TYPO3\CMS\Scheduler\Scheduler
         */
        protected $scheduler;
        /**
         * The unique id of the task used to identify it in the database
         *
         * @var int
         */
        protected $taskUid;
        /**
         * Disable flag, TRUE if task is disabled, FALSE otherwise
         *
         * @var bool
         */
        protected $disabled;
        /**
         * Run on next cron job flag, TRUE if task should run on next cronjob, FALSE otherwise
         *
         * @var bool
         */
        protected $runOnNextCronJob;
        /**
         * The execution object related to the task
         *
         * @var Execution
         */
        protected $execution;
        /**
         * This variable contains the time of next execution of the task
         *
         * @var int
         */
        protected $executionTime;
        /**
         * Description for the task
         *
         * @var string
         */
        protected $description;
        /**
         * Task group for this task
         *
         * @var int
         */
        protected $taskGroup;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * This is the main method that is called when a task is executed
         * It MUST be implemented by all classes inheriting from this one
         * Note that there is no error handling, errors and failures are expected
         * to be handled and logged by the client implementations.
         * Should return TRUE on successful execution, FALSE on error.
         *
         * @return bool Returns TRUE on successful execution, FALSE on error
         */
        abstract public function execute() ;
        /**
         * This method is designed to return some additional information about the task,
         * that may help to set it apart from other tasks from the same class
         * This additional information is used - for example - in the Scheduler's BE module
         * This method should be implemented in most task classes
         *
         * @return string Information to display
         */
        public function getAdditionalInformation() {}
        public function setTaskUid($id) {}
        /**
         * This method returns the unique id of the task
         *
         * @return int The id of the task
         */
        public function getTaskUid() {}
        /**
         * This method returns the title of the scheduler task
         *
         * @return string
         */
        public function getTaskTitle() {}
        /**
         * This method returns the description of the scheduler task
         *
         * @return string
         */
        public function getTaskDescription() {}
        /**
         * This method returns the class name of the scheduler task
         *
         * @return string
         */
        public function getTaskClassName() {}
        /**
         * This method returns the disable status of the task
         *
         * @return bool TRUE if task is disabled, FALSE otherwise
         */
        public function isDisabled() {}
        public function setDisabled($flag) {}
        public function setRunOnNextCronJob($flag) {}
        /**
         * This method returns the run on next cron job status of the task
         *
         * @return bool TRUE if task should run on next cron job, FALSE otherwise
         */
        public function getRunOnNextCronJob() {}
        public function setExecutionTime($timestamp) {}
        /**
         * This method returns the task group (uid) of the task
         *
         * @return int Uid of task group
         */
        public function getTaskGroup() {}
        public function setTaskGroup($taskGroup) {}
        /**
         * This method returns the timestamp corresponding to the next execution time of the task
         *
         * @return int Timestamp of next execution
         */
        public function getExecutionTime() {}
        public function setDescription($description) {}
        /**
         * This method returns the description of the task
         *
         * @return string Description
         */
        public function getDescription() {}
        /**
         * Sets the internal reference to the singleton instance of the Scheduler
         */
        public function setScheduler() {}
        /**
         * Unsets the internal reference to the singleton instance of the Scheduler
         * This is done before a task is serialized, so that the scheduler instance
         * is not saved to the database too
         */
        public function unsetScheduler() {}
/** @var $execution Execution */
        public function registerSingleExecution(/** @var $execution Execution */
$timestamp) {}
/** @var $execution Execution */
        public function registerRecurringExecution(/** @var $execution Execution */
$start, /** @var $execution Execution */
$interval, /** @var $execution Execution */
$end = 0, /** @var $execution Execution */
$multiple = false, /** @var $execution Execution */
$cron_cmd = '') {}
        public function setExecution(Execution $execution) {}
        /**
         * Returns the execution object
         *
         * @return Execution The internal execution object
         */
        public function getExecution() {}
        /**
         * Returns the timestamp for next due execution of the task
         *
         * @return int Date and time of the next execution as a timestamp
         */
        public function getNextDueExecution() {}
        /**
         * Returns TRUE if several runs of the task are allowed concurrently
         *
         * @return bool TRUE if concurrent executions are allowed, FALSE otherwise
         */
        public function areMultipleExecutionsAllowed() {}
        /**
         * Returns TRUE if an instance of the task is already running
         *
         * @return bool TRUE if an instance is already running, FALSE otherwise
         */
        public function isExecutionRunning() {}
        /**
         * This method adds current execution to the execution list
         * It also logs the execution time and mode
         *
         * @return int Execution id
         */
        public function markExecution() {}
        public function unmarkExecution($executionID, \Exception $failure = null) {}
        /**
         * Clears all marked executions
         *
         * @return bool TRUE if the clearing succeeded, FALSE otherwise
         */
        public function unmarkAllExecutions() {}
        /**
         * Saves the details of the task to the database.
         *
         * @return bool
         */
        public function save() {}
        /**
         * Stops the task, by replacing the execution object by an empty one
         * NOTE: the task still needs to be saved after that
         */
        public function stop() {}
        /**
         * Removes the task totally from the system.
         */
        public function remove() {}
        /**
         * Guess task type from the existing information
         * If an interval or a cron command is defined, it's a recurring task
         *
         * @return int
         */
        public function getType() {}
        protected function logException(\Exception $e) {}
    }

    /**
     * Additional BE fields for caching framework garbage collection task.
     * Creates a multi selectbox with all available cache backends to select from.
     */
    class CachingFrameworkGarbageCollectionAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        public function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
        protected function getCacheBackendOptions(array $selectedBackends) {}
        /**
         * Get all registered caching framework backends
         *
         * @return array Registered backends
         */
        protected function getRegisteredBackends() {}
    }

    /**
     * Class TYPO3\CMS\Scheduler\Task\ExecuteSchedulableCommandAdditionalFieldProvider
     */
    class ExecuteSchedulableCommandAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        /**
         * Commands that should not be schedulable, like scheduler:run,
         * which would start a recursion.
         *
         * @var array
         */
        static protected $blacklistedCommands;
        /**
         * @var array|Command[]
         */
        protected $schedulableCommands;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Cli\CommandManager
         */
        protected $commandManager;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Reflection\ReflectionService
         */
        protected $reflectionService;
        /**
         * @var ExecuteSchedulableCommandTask
         */
        protected $task;

        public function __construct() {}
        public function getAdditionalFields(array $taskInfo, $task, SchedulerModuleController $schedulerModule) : array {}
/** @var string $argumentValue */
        public function validateAdditionalFields(/** @var string $argumentValue */
array $submittedData, /** @var string $argumentValue */
SchedulerModuleController $schedulerModule) : bool {}
/** @var ExecuteSchedulableCommandTask $task */
        public function saveAdditionalFields(/** @var ExecuteSchedulableCommandTask $task */
array $submittedData, /** @var ExecuteSchedulableCommandTask $task */
AbstractTask $task) : bool {}
        protected function getCommandDescriptionField(string $description) : array {}
        /**
         * Gets a select field containing all possible schedulable commands
         *
         * @return array
         */
        protected function getActionField() : array {}
        protected function getCommandArgumentFields(InputDefinition $inputDefinition) : array {}
        protected function getArgumentLabel(InputArgument $argument) : string {}
        protected function renderSelectField(array $options, string $selectedOptionValue) : string {}
        protected function renderField(InputArgument $argument, string $currentValue) : string {}
        /**
         * @return LanguageService
         */
        public function getLanguageService() : LanguageService {}
    }

    /**
     * Remove old entries from tables.
     *
     * This task deletes rows from tables older than the given number of days.
     *
     * Available tables must be registered in
     * $GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['scheduler']['tasks'][\TYPO3\CMS\Scheduler\Task\TableGarbageCollectionTask::class]['options']['tables']
     * See ext_localconf.php of scheduler extension for an example
     */
    class TableGarbageCollectionTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * @var bool True if all tables should be cleaned up
         */
        public $allTables;
        /**
         * @var int Number of days
         */
        public $numberOfDays;
        /**
         * @var string Table to clean up
         */
        public $table;

        /**
         * Execute garbage collection, called by scheduler.
         *
         * @throws \RuntimeException If configured table was not cleaned up
         * @return bool TRUE if task run was successful
         */
        public function execute() {}
        protected function handleTable($table, array $configuration) {}
        /**
         * This method returns the selected table as additional information
         *
         * @return string Information to display
         */
        public function getAdditionalInformation() {}
    }

    /**
     * Additional BE fields for sys log table garbage collection task.
     */
    class TableGarbageCollectionAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        /**
         * @var array Default number of days by table
         */
        protected $defaultNumberOfDays;

        public function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        /**
         * Initialize the default number of days for all configured tables
         */
        protected function initDefaultNumberOfDays() {}
        protected function getAllTablesAdditionalField(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        protected function getTableAdditionalField(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        protected function getNumberOfDaysAdditionalField(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateAllTablesAdditionalField(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateTableAdditionalField(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateNumberOfDaysAdditionalField(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
    }

    /**
     * This task tries to find changes in storage and writes them back to DB
     */
    class FileStorageIndexingTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Storage Uid
         *
         * @var int
         */
        public $storageUid;

        /**
         * Function execute from the Scheduler
         *
         * @return bool TRUE on successful execution, FALSE on error
         */
        public function execute() {}
        protected function getIndexer(\TYPO3\CMS\Core\Resource\ResourceStorage $storage) {}
    }

    /**
     * Additional BE fields for task which extracts metadata from storage
     */
    class FileStorageExtractionAdditionalFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        public function getAdditionalFields(array $taskInfo, $task, SchedulerModuleController $parentObject) {}
/** @var \TYPO3\CMS\Core\Resource\ResourceStorage[] $storages */
        protected function getAllStoragesField(/** @var \TYPO3\CMS\Core\Resource\ResourceStorage[] $storages */
FileStorageExtractionTask $task = null) {}
        protected function getFileCountField(FileStorageExtractionTask $task = null) {}
        protected function getRegisteredExtractorsField(FileStorageExtractionTask $task = null) {}
        public function validateAdditionalFields(array $submittedData, SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
        protected function formatExtractorClassName(ExtractorInterface $extractor) {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Class TYPO3\CMS\Scheduler\Task\ExecuteSchedulableCommandTask
     */
    class ExecuteSchedulableCommandTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * @var string
         */
        protected $commandIdentifier;
        /**
         * @var array
         */
        protected $arguments;
        /**
         * @var array
         */
        protected $defaults;

        public function setCommandIdentifier(string $commandIdentifier) {}
        /**
         * @return string
         */
        public function getCommandIdentifier() : string {}
        /**
         * This is the main method that is called when a task is executed
         * It MUST be implemented by all classes inheriting from this one
         * Note that there is no error handling, errors and failures are expected
         * to be handled and logged by the client implementations.
         * Should return TRUE on successful execution, FALSE on error.
         *
         * @throws \Exception
         *
         * @return bool Returns TRUE on successful execution, FALSE on error
         */
        public function execute() : bool {}
        /**
         * @return array
         */
        public function getArguments() : array {}
        public function setArguments(array $arguments) {}
        public function addDefaultValue(string $argumentName, $argumentValue) {}
        /**
         * @return LanguageService
         */
        public function getLanguageService() : LanguageService {}
    }

}

namespace TYPO3\CMS\Scheduler\Command {
    /**
     * CLI command for the 'scheduler' extension which executes
     */
    class SchedulerCommand extends \symfony\component\console\command\command {
        /**
         * @var bool
         */
        protected $hasTask;
        /**
         * @var Scheduler
         */
        protected $scheduler;

        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        public function execute(InputInterface $input, OutputInterface $output) {}
        protected function stopTask($task) {}
        protected function getTask(int $taskUid, bool $force) {}
        /**
         * Execute tasks in loop that are ready to execute
         */
        protected function loopTasks() {}
    }

}

namespace TYPO3\CMS\Scheduler\Tests\Unit\CronCommand {
    /**
     * Test case
     */
    class NormalizeCommandTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @return array
         */
        public static function normalizeValidDataProvider() {}
        public function normalizeConvertsCronCommand($expression, $expected) {}
        /**
         * @return array
         */
        public static function validSpecialKeywordsDataProvider() {}
        public function convertKeywordsToCronCommandConvertsValidKeywords($keyword, $expectedCronCommand) {}
        /**
         * @test
         */
        public function convertKeywordsToCronCommandReturnsUnchangedCommandIfKeywordWasNotFound() {}
        /**
         * @return array
         */
        public function normalizeFieldsValidDataProvider() {}
        public function normalizeFieldsConvertsField($expression, $expected) {}
        /**
         * @return array
         */
        public static function normalizeMonthAndWeekdayFieldValidDataProvider() {}
        public function normalizeMonthAndWeekdayFieldReturnsNormalizedListForValidExpression($expression, $isMonthField, $expected) {}
        /**
         * @return array
         */
        public static function normalizeMonthAndWeekdayFieldInvalidDataProvider() {}
        public function normalizeMonthAndWeekdayFieldThrowsExceptionForInvalidExpression($expression, $isMonthField, $expectedExceptionCode) {}
        /**
         * @return array
         */
        public static function normalizeIntegerFieldValidDataProvider() {}
        public function normalizeIntegerFieldReturnsNormalizedListForValidExpression($expression, $expected) {}
        /**
         * @return array
         */
        public static function normalizeIntegerFieldInvalidDataProvider() {}
        public function normalizeIntegerFieldThrowsExceptionForInvalidExpressions($expression, $lowerBound, $upperBound, $expectedExceptionCode) {}
        /**
         * @test
         */
        public function splitFieldsReturnsIntegerArrayWithFieldsSplitByWhitespace() {}
        /**
         * @return array
         */
        public static function invalidCronCommandFieldsDataProvider() {}
        public function splitFieldsThrowsExceptionIfCronCommandDoesNotContainFiveFields($cronCommand) {}
        /**
         * @return array
         */
        public static function validRangeDataProvider() {}
        public function convertRangeToListOfValuesReturnsCorrectListForValidRanges($range, $expected) {}
        /**
         * @return array
         */
        public static function invalidRangeDataProvider() {}
        public function convertRangeToListOfValuesThrowsExceptionForInvalidRanges($range, $expectedExceptionCode) {}
        /**
         * @return array
         */
        public static function validStepsDataProvider() {}
        public function reduceListOfValuesByStepValueReturnsCorrectListOfValues($stepExpression, $expected) {}
        /**
         * @return array
         */
        public static function invalidStepsDataProvider() {}
        public function reduceListOfValuesByStepValueThrowsExceptionForInvalidStepExpressions($stepExpression, $expectedExceptionCode) {}
        /**
         * @test
         */
        public function normalizeMonthAndWeekdayNormalizesAMonth() {}
        /**
         * @test
         */
        public function normalizeMonthAndWeekdayNormalizesAWeekday() {}
        /**
         * @test
         */
        public function normalizeMonthAndWeekdayLeavesValueUnchanged() {}
        /**
         * @return array
         */
        public static function validMonthNamesDataProvider() {}
        public function normalizeMonthConvertsName($monthName, $expectedInteger) {}
        public function normalizeMonthReturnsInteger($monthName, $expectedInteger) {}
        /**
         * @return array
         */
        public static function invalidMonthNamesDataProvider() {}
        public function normalizeMonthThrowsExceptionForInvalidMonthRepresentation($invalidMonthName, $expectedExceptionCode) {}
        /**
         * @return array
         */
        public static function validWeekdayDataProvider() {}
        public function normalizeWeekdayConvertsName($weekday, $expectedInteger) {}
        public function normalizeWeekdayReturnsInteger($weekday, $expectedInteger) {}
        /**
         * @return array
         */
        public static function invalidWeekdayDataProvider() {}
        public function normalizeWeekdayThrowsExceptionForInvalidWeekdayRepresentation($weekday) {}
    }

    /**
     * Test case
     */
    class CronCommandTest extends \typo3\testingframework\core\unit\unittestcase {
        const TIMESTAMP = 1262304000;

        /**
         * @var string Selected timezone backup
         */
        protected $timezoneBackup;

        /**
         * We're fiddling with hard timestamps in the tests, but time methods in
         * the system under test do use timezone settings. Therefore we backup the
         * current timezone setting, set it to UTC explicitly and reconstitute it
         * again in tearDown()
         */
        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function constructorSetsNormalizedCronCommandSections() {}
        /**
         * @test
         */
        public function constructorThrowsExceptionForInvalidCronCommand() {}
        /**
         * @test
         */
        public function constructorSetsTimestampToNowPlusOneMinuteRoundedDownToSixtySeconds() {}
        /**
         * @test
         */
        public function constructorSetsTimestampToGivenTimestampPlusSixtySeconds() {}
        /**
         * @test
         */
        public function constructorSetsTimestampToGiveTimestampRoundedDownToSixtySeconds() {}
        /**
         * @return array
         */
        public static function expectedTimestampDataProvider() {}
        /**
         * @return array
         */
        public static function expectedCalculatedTimestampDataProvider() {}
        public function calculateNextValueDeterminesCorrectNextTimestamp($cronCommand, $startTimestamp, $expectedTimestamp) {}
        public function calculateNextValueDeterminesCorrectNextCalculatedTimestamp($cronCommand, $startTimestamp, $expectedTimestamp) {}
        public function calculateNextValueDeterminesCorrectNextTimestampOnConsecutiveCall($cronCommand, $startTimestamp, $firstTimestamp, $secondTimestamp) {}
        public function calculateNextValueDeterminesCorrectNextCalculatedTimestampOnConsecutiveCall($cronCommand, $startTimestamp, $firstTimestamp, $secondTimestamp) {}
        /**
         * @test
         */
        public function calculateNextValueDeterminesCorrectNextTimestampOnChangeToSummertime() {}
        /**
         * @test
         */
        public function calculateNextValueThrowsExceptionWithImpossibleCronCommand() {}
        /**
         * @test
         */
        public function getTimestampReturnsInteger() {}
        /**
         * @test
         */
        public function getCronCommandSectionsReturnsArray() {}
    }

}

namespace TYPO3\CMS\Scheduler\Tests\Unit\CronCommand\AccessibleProxies {
    /**
     * Accessible proxy with protected methods made public.
     */
    class NormalizeCommandAccessibleProxy extends \typo3\cms\scheduler\croncommand\normalizecommand {
        public static function convertKeywordsToCronCommand($cronCommand) {}
        public static function normalizeFields($cronCommand) {}
        public static function normalizeMonthAndWeekdayField($expression, $isMonthField = true) {}
        public static function normalizeIntegerField($expression, $lowerBound = 0, $upperBound = 59) {}
        public static function splitFields($cronCommand) {}
        public static function convertRangeToListOfValues($range) {}
        public static function reduceListOfValuesByStepValue($stepExpression) {}
        public static function normalizeMonthAndWeekday($expression, $isMonth = true) {}
        public static function normalizeMonth($month) {}
        public static function normalizeWeekday($weekday) {}
    }

}

namespace TYPO3\CMS\Scheduler\Tests\Unit\Task {
    /**
     * Test case
     */
    class CachingFrameworkGarbageCollectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array
         */
        protected $singletonInstances;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Reset singleton instances
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function executeCallsCollectGarbageOfConfiguredBackend() {}
        /**
         * @test
         */
        public function executeDoesNotCallCollectGarbageOfNotConfiguredBackend() {}
    }

}

namespace TYPO3\CMS\Scheduler\Tests\Functional\Tca {
    class TaskGroupVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var array
         */
        static protected $taskGroupFields;

        /**
         * @test
         */
        public function taskGroupFormContainsExpectedFields() {}
    }

}

namespace TYPO3\CMS\Backend {
    class AjaxLoginHandler extends \typo3\cms\backend\controller\ajaxlogincontroller {}

    /**
     * TYPO3 backend user authentication in the TSFE frontend.
     * This includes mainly functions related to the Admin Panel
     */
    class FrontendBackendUserAuthentication extends \typo3\cms\core\authentication\backenduserauthentication {
        /**
         * Form field with login name.
         *
         * @var string
         */
        public $formfield_uname;
        /**
         * Form field with password.
         *
         * @var string
         */
        public $formfield_uident;
        /**
         * Formfield_status should be set to "". The value this->formfield_status is set to empty in order to
         * disable login-attempts to the backend account through this script
         *
         * @var string
         */
        public $formfield_status;
        /**
         * Decides if the writelog() function is called at login and logout.
         *
         * @var bool
         */
        public $writeStdLog;
        /**
         * If the writelog() functions is called if a login-attempt has be tried without success.
         *
         * @var bool
         */
        public $writeAttemptLog;
        /**
         * General flag which is set if the adminpanel is enabled at all.
         *
         * @var bool
         */
        public $extAdmEnabled;
        /**
         * @var \TYPO3\CMS\Frontend\View\AdminPanelView Instance of admin panel
         */
        public $adminPanel;
        /**
         * @var \TYPO3\CMS\Core\FrontendEditing\FrontendEditingController
         */
        public $frontendEdit;
        /**
         * @var array
         */
        public $extAdminConfig;

        /**
         * Initializes the admin panel.
         */
        public function initializeAdminPanel() {}
        /**
         * Initializes frontend editing.
         */
        public function initializeFrontendEdit() {}
        /**
         * Determines whether frontend editing is currently active.
         *
         * @return bool Whether frontend editing is active
         */
        public function isFrontendEditingActive() {}
        /**
         * Delegates to the appropriate view and renders the admin panel content.
         *
         * @return string.
         */
        public function displayAdminPanel() {}
        /**
         * Determines whether the admin panel is enabled and visible.
         *
         * @return bool true if the admin panel is enabled and visible
         */
        public function isAdminPanelVisible() {}
        /**
         * Implementing the access checks that the TYPO3 CMS bootstrap script does before a user is ever logged in.
         * Used in the frontend.
         *
         * @return bool Returns TRUE if access is OK
         */
        public function checkBackendAccessSettingsFromInitPhp() {}
        public function extPageReadAccess($pageRec) {}
/** @var QueryBuilder $queryBuilder */
        public function extGetTreeList(/** @var QueryBuilder $queryBuilder */
$id, /** @var QueryBuilder $queryBuilder */
$depth, /** @var QueryBuilder $queryBuilder */
$begin = 0, /** @var QueryBuilder $queryBuilder */
$perms_clause) {}
        public function extGetLL($key) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Generic Backend exception
     */
    class Exception extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Backend\Tree {
    /**
     * Abstract Tree Data Provider
     */
    abstract class AbstractTreeDataProvider {
        /**
         * Root Node
         *
         * @var \TYPO3\CMS\Backend\Tree\TreeNode
         */
        protected $rootNode;

        /**
         * Returns the root node
         *
         * @return \TYPO3\CMS\Backend\Tree\TreeNode
         */
        abstract public function getRoot() ;
        abstract public function getNodes(\TYPO3\CMS\Backend\Tree\TreeNode $node) ;
    }

    /**
     * Abstract Tree
     */
    abstract class AbstractTree {
        /**
         * Data Provider
         *
         * @var \TYPO3\CMS\Backend\Tree\AbstractTreeDataProvider
         */
        protected $dataProvider;
        /**
         * Tree Node Decorator
         *
         * @var \TYPO3\CMS\Backend\Tree\Renderer\AbstractTreeRenderer
         */
        protected $nodeRenderer;

        public function setDataProvider(\TYPO3\CMS\Backend\Tree\AbstractTreeDataProvider $dataProvider) {}
        /**
         * @return \TYPO3\CMS\Backend\Tree\AbstractTreeDataProvider
         */
        public function getDataProvider() {}
        public function setNodeRenderer(\TYPO3\CMS\Backend\Tree\Renderer\AbstractTreeRenderer $nodeRenderer) {}
        /**
         * @return \TYPO3\CMS\Backend\Tree\Renderer\AbstractTreeRenderer
         */
        public function getNodeRenderer() {}
        /**
         * Returns the root node
         *
         * @return \TYPO3\CMS\Backend\Tree\TreeNode
         */
        abstract public function getRoot() ;
    }

    /**
     * Tree Node
     */
    class TreeNode implements \typo3\cms\backend\tree\comparablenodeinterface, \serializable {
        /**
         * Node Identifier
         *
         * @var string
         */
        protected $id;
        /**
         * Parent Node
         *
         * @var \TYPO3\CMS\Backend\Tree\TreeNode
         */
        protected $parentNode;
        /**
         * Child Nodes
         *
         * @var \TYPO3\CMS\Backend\Tree\TreeNodeCollection
         */
        protected $childNodes;

        public function __construct(array $data = [ ]) {}
        public function setChildNodes(\TYPO3\CMS\Backend\Tree\TreeNodeCollection $childNodes) {}
        /**
         * Removes child nodes collection
         */
        public function removeChildNodes() {}
        /**
         * Returns child nodes collection
         *
         * @return \TYPO3\CMS\Backend\Tree\TreeNodeCollection
         */
        public function getChildNodes() {}
        /**
         * Returns TRUE if the node has child nodes attached
         *
         * @return bool
         */
        public function hasChildNodes() {}
        public function setId($id) {}
        /**
         * Returns the identifier
         *
         * @return string
         */
        public function getId() {}
        public function setParentNode(\TYPO3\CMS\Backend\Tree\TreeNode $parentNode = null) {}
        /**
         * Returns the parent node
         *
         * @return \TYPO3\CMS\Backend\Tree\TreeNode
         */
        public function getParentNode() {}
        public function equals(\TYPO3\CMS\Backend\Tree\TreeNode $other) {}
        public function compareTo($other) {}
        public function toArray($addChildNodes = true) {}
        public function dataFromArray($data) {}
        /**
         * Returns the serialized instance
         *
         * @return string
         */
        public function serialize() {}
        public function unserialize($serializedString) {}
    }

    /**
     * Representation Tree Node
     */
    class TreeRepresentationNode extends \typo3\cms\backend\tree\treenode {
        /**
         * Node Label
         *
         * @var string
         */
        protected $label;
        /**
         * Node Type
         *
         * @var string
         */
        protected $type;
        /**
         * Node CSS Class
         *
         * @var string
         */
        protected $class;
        /**
         * Node Icon
         *
         * @var string | Icon
         */
        protected $icon;
        /**
         * Callback function that is called e.g after a click on the label
         *
         * @var string
         */
        protected $callbackAction;

        public function setClass($class) {}
        /**
         * @return string
         */
        public function getClass() {}
        public function setIcon($icon) {}
        /**
         * @return string|Icon
         */
        public function getIcon() {}
        public function setLabel($label) {}
        /**
         * @return string
         */
        public function getLabel() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setCallbackAction($callbackAction) {}
        /**
         * Returns the callback action
         *
         * @return string
         */
        public function getCallbackAction() {}
        public function toArray($addChildNodes = true) {}
        public function dataFromArray($data) {}
    }

    /**
     * Tree Node Collection
     */
    class TreeNodeCollection extends \arrayobject {
        public function __construct(array $data = [ ]) {}
        /**
         * Sorts the internal nodes array
         */
        public function asort() {}
        public function nodeCompare(\TYPO3\CMS\Backend\Tree\TreeNode $node, \TYPO3\CMS\Backend\Tree\TreeNode $otherNode) {}
        /**
         * Returns the serialized instance
         *
         * @return string
         */
        public function serialize() {}
        public function unserialize($serializedString) {}
        /**
         * Returns the collection in an array representation for e.g. serialization
         *
         * @return array
         */
        public function toArray() {}
        public function dataFromArray($data) {}
    }

    /**
     * Sorted Tree Node Collection
     *
     * Note: This collection works only with integers as offset keys and not
     * with much datasets. You have been warned!
     */
    class SortedTreeNodeCollection extends \typo3\cms\backend\tree\treenodecollection {
        public function contains(\TYPO3\CMS\Backend\Tree\TreeNode $node) {}
        protected function offsetOf(\TYPO3\CMS\Backend\Tree\TreeNode $node) {}
        protected function binarySearch(\TYPO3\CMS\Backend\Tree\TreeNode $node, $start, $end) {}
        /**
         * Normalizes the array by reordering the keys
         */
        protected function normalize() {}
        public function append($node) {}
    }


    /**
     * Interface that defines the comparison of nodes
     */
    interface ComparableNodeInterface {
        function compareTo($other) ;
    }

}

namespace TYPO3\CMS\Backend\Tree\Repository {
    /**
     * Fetches ALL pages in the page tree, possibly overlaid with the workspace
     * in a sorted way.
     *
     * This works agnostic of the Backend User, allows to be used in FE as well in the future.
     *
     * @internal this class is not public API yet, as it needs to be proven stable enough first.
     */
    class PageTreeRepository {
        /**
         * Fields to be queried from the database
         *
         * @var string[]
         */
        protected $fields;
        /**
         * The workspace ID to operate on
         *
         * @var int
         */
        protected $currentWorkspace;
        /**
         * Full page tree when selected without permissions applied.
         *
         * @var array
         */
        protected $fullPageTree;

        public function __construct(int $workspaceId = 0, array $additionalFieldsToQuery = [ ]) {}
        public function getTree(int $entryPoint, callable $callback = null) : array {}
        protected function applyCallbackToChildren(array $tree, callable $callback) {}
        /**
         * Fetch all non-deleted pages, regardless of permissions. That's why it's internal.
         *
         * @return array the full page tree of the whole installation
         */
        protected function fetchAllPages() : array {}
        protected function addChildrenToPage(array $page, array $groupedAndSortedPagesByPid) {}
        protected function findInPageTree(int $pageId, array $pages) : array {}
    }

}

namespace TYPO3\CMS\Backend\Tree\Renderer {
    /**
     * Renderer for unordered lists
     */
    class UnorderedListTreeRenderer extends \typo3\cms\backend\tree\renderer\abstracttreerenderer {
        /**
         * recursion level
         *
         * @var int
         */
        protected $recursionLevel;

        public function renderNode(\TYPO3\CMS\Backend\Tree\TreeRepresentationNode $node, $recursive = true) {}
        public function renderTree(\TYPO3\CMS\Backend\Tree\AbstractTree $tree, $recursive = true) {}
        public function renderNodeCollection(\TYPO3\CMS\Backend\Tree\TreeNodeCollection $collection, $recursive = true) {}
    }

    /**
     * Abstract Renderer
     */
    abstract class AbstractTreeRenderer {
        abstract public function renderNode(\TYPO3\CMS\Backend\Tree\TreeRepresentationNode $node, $recursive = true) ;
        abstract public function renderNodeCollection(\TYPO3\CMS\Backend\Tree\TreeNodeCollection $collection, $recursive = true) ;
        abstract public function renderTree(\TYPO3\CMS\Backend\Tree\AbstractTree $tree, $recursive = true) ;
    }

}

namespace TYPO3\CMS\Backend\Tree\View {
    /**
     * Position map class for moving pages,
     * previously resided in typo3/move_el.php
     */
    class PageMovingPagePositionMap extends \typo3\cms\backend\tree\view\pagepositionmap {
        /**
         * @var string
         */
        public $l_insertNewPageHere;
        /**
         * Page tree implementation class name
         *
         * @var string
         */
        protected $pageTreeClassName;

        public function onClickEvent($pid, $newPagePID) {}
        public function linkPageTitle($str, $rec) {}
        public function boldTitle($t_code, $dat, $id) {}
    }

    /**
     * Position map class for content elements within the page module
     */
    class ContentLayoutPagePositionMap extends \typo3\cms\backend\tree\view\pagepositionmap {
        /**
         * @var bool
         */
        public $dontPrintPageInsertIcons;
        /**
         * @var string
         */
        public $l_insertNewRecordHere;

        public function wrapRecordTitle($str, $row) {}
        public function wrapColumnHeader($str, $vv) {}
        public function onClickInsertRecord($row, $vv, $moveUid, $pid, $sys_lang = 0) {}
/** @var IconFactory $iconFactory */
        public function wrapRecordHeader(/** @var IconFactory $iconFactory */
$str, /** @var IconFactory $iconFactory */
$row) {}
        protected function linkToCurrentModule($params) {}
    }

    /**
     * Generate a page-tree, non-browsable.
     */
    class PageTreeView extends \typo3\cms\backend\tree\view\abstracttreeview {
        /**
         * @var array
         */
        public $fieldArray;
        /**
         * override to use this treeName
         * @var string
         */
        public $treeName;
        /**
         * override to use this table
         * @var string
         */
        public $table;
        /**
         * @var bool
         */
        public $ext_showNavTitle;

        public function init($clause = '', $orderByFields = '') {}
        public function expandNext($id) {}
        public function PMicon($row, $a, $c, $nextCount, $isExpand) {}
        /**
         * Get stored tree structure AND updating it if needed according to incoming PM GET var.
         * - Here we just set it to nothing since we want to just render the tree, nothing more.
         *
         * @access private
         */
        public function initializePositionSaving() {}
        public function getTitleStr($row, $titleLen = 30) {}
    }

    /**
     * Generate a folder tree,
     * specially made for browsing folders in the File module
     */
    class FolderTreeView extends \typo3\cms\backend\tree\view\abstracttreeview {
        /**
         * The users' file Storages
         *
         * @var ResourceStorage[]
         */
        protected $storages;
        /**
         * @var array
         */
        protected $storageHashNumbers;
        /**
         * Indicates, whether the AJAX call was successful,
         * i.e. the requested page has been found
         *
         * @var bool
         */
        protected $ajaxStatus;
        /**
         * @var array
         */
        protected $scope;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * If file-drag mode is set, temp and recycler folders are filtered out.
         * @var bool
         */
        public $ext_noTempRecyclerDirs;
        /**
         * override to not use a title attribute
         * @var string
         */
        public $titleAttrib;
        /**
         * override to use this treeName
         * does not need to be set in __construct()
         * @var string
         */
        public $treeName;
        /**
         * override to use this domIdPrefix
         * @var string
         */
        public $domIdPrefix;

        /**
         * Constructor function of the class
         */
        public function __construct() {}
        public function PMicon($folderObject, $subFolderCounter, $totalSubFolders, $nextCount, $isExpanded) {}
        public function PMiconATagWrap($icon, $cmd, $isExpand = true) {}
        protected function renderPMIconAndLink($cmd, $isOpen) {}
        public function wrapIcon($icon, $folderObject) {}
        public function wrapTitle($title, $folderObject, $bank = 0) {}
        public function getId($folderObject) {}
        public function getJumpToParam($folderObject) {}
        public function getTitleStr($row, $titleLen = 30) {}
        public function getTitleAttrib($folderObject) {}
        /**
         * Will create and return the HTML code for a browsable tree of folders.
         * Is based on the mounts found in the internal array ->MOUNTS (set in the constructor)
         *
         * @return string HTML code for the browsable tree
         */
        public function getBrowsableTree() {}
/** @var $rootLevelFolder Folder */
        public function getBrowseableTreeForStorage(/** @var $rootLevelFolder Folder */
ResourceStorage $storageObject) {}
/** @var Folder $subFolder */
        public function getFolderTree(/** @var Folder $subFolder */
Folder $folderObject, /** @var Folder $subFolder */
$depth = 999, /** @var Folder $subFolder */
$type = '') {}
/** @var $folderObject Folder */
        public function printTree(/** @var $folderObject Folder */
$treeItems = '') {}
        protected function getTableNameForClickMenu(Folder $folderObject) {}
        public function getNumberOfSubfolders(Folder $folderObject) {}
        /**
         * Get stored tree structure AND updating it if needed according to incoming PM GET var.
         *
         * @access private
         */
        public function initializePositionSaving() {}
        protected function getShortHashNumberForStorage(ResourceStorage $storageObject = null, Folder $startingPointFolder = null) {}
        protected function evaluateExpandCollapseParameter($PM = null) {}
        protected function generateExpandCollapseParameter($mountKey = null, $doExpand = false, Folder $folderObject = null, $treeName = null) {}
        /**
         * Gets the AJAX status.
         *
         * @return bool
         */
        public function getAjaxStatus() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Base extension class which generates the folder tree.
     * Used directly by the RTE.
     * also used for the linkpicker on files
     *
     * Browsable folder tree, used in Element Browser and RTE (for which it will be extended)
     * previously located inside typo3/class.browse_links.php
     */
    class ElementBrowserFolderTreeView extends \typo3\cms\backend\tree\view\foldertreeview {
        /**
         * @var string
         */
        public $ext_IconMode;
        /**
         * @var LinkParameterProviderInterface
         */
        protected $linkParameterProvider;

        public function setLinkParameterProvider(LinkParameterProviderInterface $linkParameterProvider) {}
        public function wrapIcon($icon, $folderObject) {}
        public function wrapTitle($title, $folderObject, $bank = 0) {}
        public function ext_isLinkable(Folder $folderObject) {}
        protected function renderPMIconAndLink($cmd, $isOpen) {}
        public function PM_ATagWrap($icon, $cmd, $bMark = '', $isOpen = false) {}
        public function PMiconATagWrap($icon, $cmd, $isExpand = true) {}
    }

    /**
     * Position map class for moving content elements,
     * previously resided in typo3/move_el.php
     */
    class ContentMovingPagePositionMap extends \typo3\cms\backend\tree\view\pagepositionmap {
        /**
         * @var int
         */
        public $dontPrintPageInsertIcons;
        /**
         * Page tree implementation class name
         *
         * @var string
         */
        protected $pageTreeClassName;

        public function linkPageTitle($str, $rec) {}
        public function wrapRecordTitle($str, $row) {}
    }

    /**
     * Extension for the tree class that generates the tree of pages in the page-wizard mode
     * see typo3/sysext/backend/Classes/Tree/View/NewRecordPageTreeView.php
     */
    class NewRecordPageTreeView extends \typo3\cms\backend\tree\view\pagetreeview {
        public function expandNext($id) {}
    }

    /**
     * Position map class - generating a page tree / content element list which links for inserting (copy/move) of records.
     * Used for pages / tt_content element wizards of various kinds.
     */
    class PagePositionMap {
        /**
         * @var string
         */
        public $moveOrCopy;
        /**
         * @var int
         */
        public $dontPrintPageInsertIcons;
        /**
         * @var int
         */
        public $depth;
        /**
         * @var string
         */
        public $cur_sys_language;
        /**
         * @var string
         */
        public $R_URI;
        /**
         * @var string
         */
        public $elUid;
        /**
         * @var string
         */
        public $moveUid;
        /**
         * @var array
         */
        public $getModConfigCache;
        /**
         * @var array
         */
        public $checkNewPageCache;
        /**
         * @var string
         */
        public $l_insertNewPageHere;
        /**
         * @var string
         */
        public $l_insertNewRecordHere;
        /**
         * @var string
         */
        public $modConfigStr;
        /**
         * Page tree implementation class name
         *
         * @var string
         */
        protected $pageTreeClassName;
        /**
         * @var IconFactory
         */
        protected $iconFactory;

        public function __construct($pageTreeClassName = null) {}
/** @var \TYPO3\CMS\Backend\Tree\View\PageTreeView $pageTree */
        public function positionTree(/** @var \TYPO3\CMS\Backend\Tree\View\PageTreeView $pageTree */
$id, /** @var \TYPO3\CMS\Backend\Tree\View\PageTreeView $pageTree */
$pageinfo, /** @var \TYPO3\CMS\Backend\Tree\View\PageTreeView $pageTree */
$perms_clause, /** @var \TYPO3\CMS\Backend\Tree\View\PageTreeView $pageTree */
$R_URI) {}
        public function boldTitle($t_code, $dat, $id) {}
        public function onClickEvent($pid, $newPagePID) {}
        /**
         * Get label, htmlspecialchars()'ed
         *
         * @return string The localized label for "insert new page here
         */
        public function insertlabel() {}
        public function linkPageTitle($str, $rec) {}
        public function checkNewPageInPid($pid) {}
        public function getModConfig($pid) {}
        public function printContentElementColumns($pid, $moveUid, $colPosList, $showHidden, $R_URI) {}
        public function printRecordMap($lines, $colPosArray, $pid = 0) {}
        public function wrapColumnHeader($str, $vv) {}
        public function insertPositionIcon($row, $vv, $kk, $moveUid, $pid) {}
        public function onClickInsertRecord($row, $vv, $moveUid, $pid, $sys_lang = 0) {}
        public function wrapRecordHeader($str, $row) {}
        public function getRecordHeader($row) {}
        public function wrapRecordTitle($str, $row) {}
        /**
         * Returns the BackendUser
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns the LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Base class for creating a browsable array/page/folder tree in HTML
     */
    abstract class AbstractTreeView {
        /**
         * @var bool
         */
        public $expandFirst;
        /**
         * @var bool
         */
        public $expandAll;
        /**
         * @var string
         */
        public $thisScript;
        /**
         * @var string
         */
        public $titleAttrib;
        /**
         * @var bool
         */
        public $ext_IconMode;
        /**
         * @var bool
         */
        public $ext_showPathAboveMounts;
        /**
         * @var int
         */
        public $addSelfId;
        /**
         * @var string
         */
        public $title;
        /**
         * @var bool
         */
        public $showDefaultTitleAttribute;
        /**
         * Needs to be initialized with $GLOBALS['BE_USER']
         * Done by default in init()
         *
         * @var \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        public $BE_USER;
        /**
         * Needs to be initialized with e.g. $GLOBALS['BE_USER']->returnWebmounts()
         * Default setting in init() is 0 => 0
         * The keys are mount-ids (can be anything basically) and the
         * values are the ID of the root element (COULD be zero or anything else.
         * For pages that would be the uid of the page, zero for the pagetree root.)
         *
         * @var array|null
         */
        public $MOUNTS;
        /**
         * Database table to get the tree data from.
         * Leave blank if data comes from an array.
         *
         * @var string
         */
        public $table;
        /**
         * Defines the field of $table which is the parent id field (like pid for table pages).
         *
         * @var string
         */
        public $parentField;
        /**
         * WHERE clause used for selecting records for the tree. Is set by function init.
         * Only makes sense when $this->table is set.
         *
         * @see init()
         * @var string
         */
        public $clause;
        /**
         * Field for ORDER BY. Is set by function init.
         * Only makes sense when $this->table is set.
         *
         * @see init()
         * @var string
         */
        public $orderByFields;
        /**
         * Default set of fields selected from the tree table.
         * Make SURE that these fields names listed herein are actually possible to select from $this->table (if that variable is set to a TCA table name)
         *
         * @see addField()
         * @var array
         */
        public $fieldArray;
        /**
         * List of other fields which are ALLOWED to set (here, based on the "pages" table!)
         *
         * @see addField()
         * @var array
         */
        public $defaultList;
        /**
         * Unique name for the tree.
         * Used as key for storing the tree into the BE users settings.
         * Used as key to pass parameters in links.
         * MUST NOT contain underscore chars.
         * etc.
         *
         * @var string
         */
        public $treeName;
        /**
         * A prefix for table cell id's which will be wrapped around an item.
         * Can be used for highlighting by JavaScript.
         * Needs to be unique if multiple trees are on one HTML page.
         *
         * @see printTree()
         * @var string
         */
        public $domIdPrefix;
        /**
         * If 1, HTML code is also accumulated in ->tree array during rendering of the tree
         *
         * @var int
         */
        public $makeHTML;
        /**
         * If TRUE, records as selected will be stored internally in the ->recs array
         *
         * @var int
         */
        public $setRecs;
        /**
         * Sets the associative array key which identifies a new sublevel if arrays are used for trees.
         * This value has formerly been "subLevel" and "--sublevel--"
         *
         * @var string
         */
        public $subLevelID;
        /**
         * @var array
         */
        public $ids;
        /**
         * @var array
         */
        public $ids_hierarchy;
        /**
         * @var array
         */
        public $orig_ids_hierarchy;
        /**
         * @var array
         */
        public $buffer_idH;
        /**
         * @var array
         */
        public $specUIDmap;
        /**
         * @var bool
         */
        public $data;
        /**
         * @var bool
         */
        public $dataLookup;
        /**
         * @var array
         */
        public $tree;
        /**
         * @var array
         */
        public $stored;
        /**
         * @var int
         */
        public $bank;
        /**
         * @var array
         */
        public $recs;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Sets the script url depending on being a module or script request
         */
        protected function determineScriptUrl() {}
        /**
         * @return string
         */
        protected function getThisScript() {}
        public function init($clause = '', $orderByFields = '') {}
        public function addField($field, $noCheck = false) {}
        /**
         * Resets the tree, recs, ids, ids_hierarchy and orig_ids_hierarchy internal variables. Use it if you need it.
         */
        public function reset() {}
        /**
         * Will create and return the HTML code for a browsable tree
         * Is based on the mounts found in the internal array ->MOUNTS (set in the constructor)
         *
         * @return string HTML code for the browsable tree
         */
        public function getBrowsableTree() {}
        public function printTree($treeArr = '') {}
        public function PMicon($row, $a, $c, $nextCount, $isOpen) {}
        public function PM_ATagWrap($icon, $cmd, $bMark = '', $isOpen = false) {}
        public function wrapTitle($title, $row, $bank = 0) {}
        public function wrapIcon($icon, $row) {}
        public function addTagAttributes($icon, $attr) {}
        public function wrapStop($str, $row) {}
        public function expandNext($id) {}
        /**
         * Get stored tree structure AND updating it if needed according to incoming PM GET var.
         *
         * @access private
         */
        public function initializePositionSaving() {}
        /**
         * Saves the content of ->stored (keeps track of expanded positions in the tree)
         * $this->treeName will be used as key for BE_USER->uc[] to store it in
         *
         * @access private
         */
        public function savePosition() {}
        public function getRootIcon($rec) {}
        public function getIcon($row) {}
        public function getTitleStr($row, $titleLen = 30) {}
        public function getTitleAttrib($row) {}
        public function getId($row) {}
        public function getJumpToParam($row) {}
        public function getTree($uid, $depth = 999, $depthData = '') {}
        public function getCount($uid) {}
        /**
         * Returns root record for uid (<=0)
         *
         * @return array Array with title/uid keys with values of $this->title/0 (zero)
         */
        public function getRootRecord() {}
        public function getRecord($uid) {}
        public function getDataInit($parentId) {}
        public function getDataCount($res) {}
        public function getDataNext($res) {}
        public function getDataFree($res) {}
        public function setDataFromArray($dataArr, $traverse = false, $pid = 0) {}
        public function setDataFromTreeArray($treeArr, $treeLookupArr) {}
        protected function getMountPointPath(int $uid) : string {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Class which generates the selectable page tree
     *
     * Browsable tree, used in PagePositionMaps (move elements), the Link Wizard and the Database Browser (for which it will be extended)
     */
    class ElementBrowserPageTreeView extends \typo3\cms\backend\tree\view\browsetreeview {
        /**
         * whether the page ID should be shown next to the title, activate through
         * userTSconfig (options.pageTree.showPageIdWithTitle)
         *
         * @var bool
         */
        public $ext_showPageId;
        /**
         * @var bool
         */
        public $ext_pArrPages;
        /**
         * @var LinkParameterProviderInterface
         */
        protected $linkParameterProvider;

        /**
         * Constructor. Just calling init()
         */
        public function __construct() {}
        public function setLinkParameterProvider(LinkParameterProviderInterface $linkParameterProvider) {}
        public function wrapTitle($title, $v, $ext_pArrPages = false) {}
        public function printTree($treeArr = '') {}
        public function ext_isLinkable($doktype, $uid) {}
        public function PM_ATagWrap($icon, $cmd, $bMark = '', $isOpen = false) {}
        public function wrapIcon($icon, $row) {}
    }

    /**
     * Local position map class when creating new Content Elements
     */
    class ContentCreationPagePositionMap extends \typo3\cms\backend\tree\view\pagepositionmap {
        /**
         * @var bool
         */
        public $dontPrintPageInsertIcons;

        public function wrapRecordTitle($str, $row) {}
        public function onClickInsertRecord($row, $vv, $moveUid, $pid, $sys_lang = 0) {}
    }

    /**
     * Generate a page-tree, browsable.
     */
    class BrowseTreeView extends \typo3\cms\backend\tree\view\abstracttreeview {
        /**
         * @var array
         */
        public $fieldArray;
        /**
         * override to use this treeName
         * @var string
         */
        public $treeName;
        /**
         * override to use this table
         * @var string
         */
        public $table;
        /**
         * override to use this domIdPrefix
         * @var string
         */
        public $domIdPrefix;
        /**
         * @var bool
         */
        public $ext_showNavTitle;

        public function init($clause = '', $orderByFields = '') {}
        public function getTitleAttrib($row) {}
        public function wrapIcon($icon, $row) {}
        public function getTitleStr($row, $titleLen = 30) {}
    }

}

namespace TYPO3\CMS\Backend\Configuration {
    /**
     * Contains translation tools
     */
    class TranslationConfigurationProvider {
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        public function getSystemLanguages($pageId = 0) {}
        public function translationInfo($table, $uid, $languageUid = 0, array $row = null, $selFieldList = '') {}
        public function getTranslationTable($table) {}
        public function isTranslationInOwnTable($table) {}
        public function foreignTranslationTable($table) {}
        protected function getDefaultLanguageFlag(array $modSharedTSconfig) {}
        protected function getDefaultLanguageLabel(array $modSharedTSconfig) {}
    }

    /**
     * A TS-Config parsing class which performs condition evaluation
     */
    class TsConfigParser extends \typo3\cms\core\typoscript\parser\typoscriptparser {
        /**
         * @var array
         */
        protected $rootLine;
        /**
         * The uid of the page being handled
         *
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $type;

        public function parseTSconfig($TStext, $type, $id = 0, array $rootLine = [ ]) {}
/** @var $matchObj \TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching\ConditionMatcher */
        protected function parseWithConditions(/** @var $matchObj \TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching\ConditionMatcher */
$TSconfig) {}
/** @var $matchObj \TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching\ConditionMatcher */
        protected function matching(/** @var $matchObj \TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching\ConditionMatcher */
array $cc) {}
    }

}

namespace TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching {
    /**
     * Matching TypoScript conditions for backend disposal.
     *
     * Used with the TypoScript parser.
     * Matches browserinfo, IPnumbers for use with templates
     */
    class ConditionMatcher extends \typo3\cms\core\configuration\typoscript\conditionmatching\abstractconditionmatcher {
        /**
         * Constructor for this class
         */
        public function __construct() {}
        protected function evaluateCondition($string) {}
        protected function getVariable($var) {}
        /**
         * Get the usergroup list of the current user.
         *
         * @return string The usergroup list of the current user
         */
        protected function getGroupList() {}
        /**
         * Tries to determine the ID of the page currently processed.
         * When User/Group TS-Config is parsed when no specific page is handled
         * (i.e. in the Extension Manager, etc.) this function will return "0", so that
         * the accordant conditions (e.g. PIDinRootline) will return "FALSE"
         *
         * @return int The determined page id or otherwise 0
         */
        protected function determinePageId() {}
        /**
         * Gets the properties for the current page.
         *
         * @return array The properties for the current page.
         */
        protected function getPage() {}
        protected function getPageIdByRecord($table, $id, $ignoreTable = false) {}
        protected function isNewPageWithPageId($pageId) {}
        /**
         * Determines the rootline for the current page.
         *
         * @return array The rootline for the current page.
         */
        protected function determineRootline() {}
        /**
         * Get the id of the current user.
         *
         * @return int The id of the current user
         */
        protected function getUserId() {}
        /**
         * Determines if a user is logged in.
         *
         * @return bool Determines if a user is logged in
         */
        protected function isUserLoggedIn() {}
        /**
         * Determines whether the current user is admin.
         *
         * @return bool Whether the current user is admin
         */
        protected function isAdminUser() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

}

namespace TYPO3\CMS\Backend\Form {
    /**
     * Handle inline stack.
     *
     * Code related to inline elements need to know their nesting level. This class takes
     * care of the according handling and can return field prefixes to be used in DOM.
     *
     * @internal: This class may change any time or vanish altogether
     */
    class InlineStackProcessor {
        /**
         * The structure/hierarchy where working in, e.g. cascading inline tables
         *
         * @var array
         */
        protected $inlineStructure;

        public function initializeByGivenStructure(array $structure = [ ]) {}
        public function initializeByParsingDomObjectIdString($domObjectId) {}
        public function injectAjaxConfiguration(array $config) {}
        /**
         * Get current structure stack
         *
         * @return array Current structure stack
         */
        public function getStructure() {}
        public function pushStableStructureItem(array $structureItem = [ ]) {}
        /**
         * Prefix for inline form fields
         *
         * @return string
         */
        public function getCurrentStructureFormPrefix() {}
        public function getCurrentStructureDomObjectIdPrefix($inlineFirstPid) {}
        public function getStructureLevel($level) {}
        /**
         * Get the "unstable" structure item from structure stack.
         * This is typically initialized by initializeByParsingDomObjectIdString()
         *
         * @return array Unstable structure item
         * @throws \RuntimeException
         */
        public function getUnstableStructure() {}
        protected function calculateStructureLevel($level) {}
        protected function getStructurePath($structureDepth = -1) {}
        /**
         * Get the depth of the stable structure stack.
         * (count($this->inlineStructure['stable'])
         *
         * @return int The depth of the structure stack
         */
        public function getStructureDepth() {}
        protected function getStructureItemName($levelData, $disposal = 'Disposal_AttributeId') {}
    }

    /**
     * Create and return a defined array of data ready to be used by the
     * container / element render part of FormEngine
     */
    class FormDataCompiler {
        /**
         * Data group that provides data
         *
         * @var FormDataGroupInterface
         */
        protected $formDataGroup;
        /**
         * List of top level array elements to be unset from
         * result array before final result is returned.
         *
         * @var array
         */
        protected $removeKeysFromFinalResultArray;

        public function __construct(FormDataGroupInterface $formDataGroup) {}
        public function compile(array $initialData) {}
        /**
         * @return array
         */
        protected function initializeResultArray() {}
    }

    /**
     * Create an element object depending on renderType.
     *
     * This is the main factory to instantiate any node within the render
     * chain of FormEngine. All nodes must implement NodeInterface.
     *
     * Nodes are "container" classes of the render chain, "element" classes that
     * render single elements, as well as "fieldWizard", "fieldInformation" and
     * "fieldControl" classes which are called by single elements to enrich them.
     *
     * This factory gets a string "renderType" and then looks up in a list which
     * specific class should handle this renderType. This list can be extended with
     * own renderTypes by extensions, existing renderTypes can be overridden, and
     * - for complex cases - it is possible to register own resolver classes for single
     * renderTypes that can return a node class name to override the default lookup list.
     */
    class NodeFactory {
        /**
         * Node resolver classes
         * Nested array with nodeName as key, (sorted) priority as sub key and class as value
         *
         * @var array
         */
        protected $nodeResolver;
        /**
         * Default registry of node name to handling class
         *
         * @var array
         */
        protected $nodeTypes;

        /**
         * Set up factory. Initialize additionally registered nodes.
         */
        public function __construct() {}
/** @var AbstractNode $nodeInstance */
        public function create(/** @var AbstractNode $nodeInstance */
array $data) {}
        /**
         * Add node types from nodeRegistry to $this->nodeTypes.
         * This can be used to add new render types or to overwrite existing node types. The registered class must
         * implement the NodeInterface and will be called if a node with this renderType is rendered.
         *
         * @throws Exception if configuration is incomplete or two nodes with identical priorities are registered
         */
        protected function registerAdditionalNodeTypesFromConfiguration() {}
        /**
         * Add resolver and add them sorted to a local property.
         * This can be used to manipulate the nodeName to class resolution with own code.
         *
         * @throws Exception if configuration is incomplete or two resolver with identical priorities are registered
         */
        protected function initializeNodeResolver() {}
        protected function instantiate($className, array $data) {}
    }

    /**
     * Base class for container and single elements - their abstracts extend from here.
     */
    abstract class AbstractNode implements \typo3\cms\backend\form\nodeinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * Instance of the node factory to create sub elements, container and single element expansions.
         *
         * @var NodeFactory
         */
        protected $nodeFactory;
        /**
         * Main data array to work on, given from parent to child elements
         *
         * @var array
         */
        protected $data;
        /**
         * A list of default field information added to the element / container.
         *
         * @var array
         */
        protected $defaultFieldInformation;
        /**
         * A list of default field controls added to the element / container.
         * This property is often reset by single elements.
         *
         * @var array
         */
        protected $defaultFieldControl;
        /**
         * A list of default field wizards added to the element / container.
         * This property is often reset by single elements.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        public function __construct(NodeFactory $nodeFactory, array $data) {}
        /**
         * Handler for single nodes
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        abstract public function render() ;
        /**
         * Initialize the array that is returned to parent after calling. This structure
         * is identical for *all* nodes. Parent will merge the return of a child with its
         * own stuff and in itself return an array of the same structure.
         *
         * @return array
         */
        protected function initializeResultArray() : array {}
        protected function mergeChildReturnIntoExistingResult(array $existing, array $childReturn, bool $mergeHtml = true) : array {}
        protected function getValidationDataAsJsonString(array $config) : string {}
    }

    /**
     * This is form engine - Class for creating the backend editing forms.
     *
     * @internal This class and its exposed method and method signatures will change
     */
    class FormResultCompiler {
        /**
         * @var array HTML of additional hidden fields rendered by sub containers
         */
        protected $hiddenFieldAccum;
        /**
         * Can be set to point to a field name in the form which will be set to '1' when the form
         * is submitted with a *save* button. This way the recipient script can determine that
         * the form was submitted for save and not "close" for example.
         *
         * @var string
         */
        protected $doSaveFieldName;
        /**
         * @var array Data array from IRRE pushed to frontend as json array
         */
        protected $inlineData;
        /**
         * List of additional style sheet files to load
         *
         * @var array
         */
        protected $stylesheetFiles;
        /**
         * Additional JavaScript printed after the form
         *
         * @var array
         */
        protected $additionalJavaScriptPost;
        /**
         * Additional JavaScript executed on submit; If you set "OK" variable it will raise an error
         * about RTEs not being loaded and offer to block further submission.
         *
         * @var array
         */
        protected $additionalJavaScriptSubmit;
        /**
         * Additional language label files to include.
         *
         * @var array
         */
        protected $additionalInlineLanguageLabelFiles;
        /**
         * Array with requireJS modules, use module name as key, the value could be callback code.
         * Use NULL as value if no callback is used.
         *
         * @var array
         */
        protected $requireJsModules;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;

        public function mergeResult(array $resultArray) {}
        /**
         * Adds CSS files BEFORE the form is drawn
         *
         * @return string
         */
        public function addCssFiles() {}
        /**
         * Prints necessary JavaScript for TCEforms (after the form HTML).
         * currently this is used to transform page-specific options in the TYPO3.Settings array for JS
         * so the JS module can access these values
         *
         * @return string
         */
        public function printNeededJSFunctions() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function JSbottom() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * Wrapper for access to the current page renderer object
         *
         * @return \TYPO3\CMS\Core\Page\PageRenderer
         */
        protected function getPageRenderer() {}
    }

    /**
     * Generic backend form exception
     */
    class Exception extends \typo3\cms\backend\exception {}


    /**
     * Interface must be implemented by form data group classes.
     * This interface is type hinted in FormDataCompiler and is a wrapper to group single data provider.
     */
    interface FormDataGroupInterface {
        function compile(array $result) ;
    }

    /**
     * Interface must be implemented by form data provider classes.
     * This is a single data provider called by a form data group.
     */
    interface FormDataProviderInterface {
        function addData(array $result) ;
    }

    /**
     * Interface must be implemented by node resolver classes
     */
    interface NodeResolverInterface {
        function __construct(NodeFactory $nodeFactory, array $data) ;
        /**
         * Main resolver method
         *
         * @return string|void New class name or void if this resolver does not change current class name.
         */
        function resolve() ;
    }

    /**
     * Interface must be implemented by all container and widget classes
     */
    interface NodeInterface {
        function __construct(NodeFactory $nodeFactory, array $data) ;
        /**
         * Main render method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        function render() ;
    }

}

namespace TYPO3\CMS\Backend\Form\FormDataGroup {
    /**
     * Calls provider given by setter. This group is used to call a hard coded list of providers
     * in some situations where extendability is not wanted. Use with care if at all ...
     */
    class OnTheFly implements \typo3\cms\backend\form\formdatagroupinterface {
        /**
         * @var array<FormDataProviderInterface>
         */
        protected $providerList;

/** @var FormDataProviderInterface $provider */
        public function compile(/** @var FormDataProviderInterface $provider */
array $result) {}
        public function setProviderList(array $list) {}
    }

    /**
     * A data provider group for casual database records
     */
    class TcaDatabaseRecord implements \typo3\cms\backend\form\formdatagroupinterface {
        public function compile(array $result) {}
    }

    /**
     * A data provider group for flex form elements
     */
    class FlexFormSegment implements \typo3\cms\backend\form\formdatagroupinterface {
        public function compile(array $result) {}
    }

    /**
     * Calls provider with dependencies specified given by setter
     *
     * This group is used to call a list of providers in order by specified
     * dependencies before/depends.
     */
    class OrderedProviderList implements \typo3\cms\backend\form\formdatagroupinterface {
        /**
         * @var array<FormDataProviderInterface>
         */
        protected $providerList;

/** @var FormDataProviderInterface $provider */
        public function compile(/** @var FormDataProviderInterface $provider */
array $result) {}
        public function setProviderList(array $list) {}
    }

    /**
     * A data provider group for database records used for input placeholder values
     */
    class TcaInputPlaceholderRecord implements \typo3\cms\backend\form\formdatagroupinterface {
        public function compile(array $result) {}
    }

    /**
     * A data provider group dedicated for the type='select', renderType='selectTree'
     * calculate tree items FormSelectTreeAjaxController.
     */
    class TcaSelectTreeAjaxFieldData implements \typo3\cms\backend\form\formdatagroupinterface {
        public function compile(array $result) {}
    }

}

namespace TYPO3\CMS\Backend\Form\FormDataProvider {
    /**
     * Resolve checkbox items and set processed item list in processedTca
     */
    class TcaCheckboxItems extends \typo3\cms\backend\form\formdataprovider\abstractitemprovider implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Contains methods used by Data providers that handle elements
     * with single items like select, radio and some more.
     */
    abstract class AbstractItemProvider {
/** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
        protected function resolveItemProcessorFunction(/** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
array $result, /** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
$fieldName, /** @var $flashMessageService \TYPO3\CMS\Core\Messaging\FlashMessageService */
array $items) {}
        protected function addItemsFromPageTsConfig(array $result, $fieldName, array $items) {}
/** @var ModuleLoader $loadModules */
        protected function addItemsFromSpecial(/** @var ModuleLoader $loadModules */
array $result, /** @var ModuleLoader $loadModules */
$fieldName, /** @var ModuleLoader $loadModules */
array $items) {}
        protected function addItemsFromFolder(array $result, $fieldName, array $items) {}
/** @var $defaultFlashMessageQueue FlashMessageQueue */
        protected function addItemsFromForeignTable(/** @var $defaultFlashMessageQueue FlashMessageQueue */
array $result, /** @var $defaultFlashMessageQueue FlashMessageQueue */
$fieldName, /** @var $defaultFlashMessageQueue FlashMessageQueue */
array $items) {}
        protected function removeItemsByKeepItemsPageTsConfig(array $result, $fieldName, array $items) {}
        protected function removeItemsByRemoveItemsPageTsConfig(array $result, $fieldName, array $items) {}
        protected function removeItemsByUserLanguageFieldRestriction(array $result, $fieldName, array $items) {}
        protected function removeItemsByUserAuthMode(array $result, $fieldName, array $items) {}
        protected function removeItemsByDoktypeUserRestriction(array $result, $fieldName, array $items) {}
        protected function removeItemsByUserStorageRestriction(array $result, $fieldName, array $items) {}
        /**
         * Returns an array with the exclude fields as defined in TCA and FlexForms
         * Used for listing the exclude fields in be_groups forms.
         *
         * @return array Array of arrays with excludeFields (fieldName, table:fieldName) from TCA
         *               and FlexForms (fieldName, table:extKey;sheetName;fieldName)
         */
        protected function getExcludeFields() {}
        protected function getRegisteredFlexForms($table) {}
        /**
         * Returns an array with explicit Allow/Deny fields.
         * Used for listing these field/value pairs in be_groups forms
         *
         * @return array Array with information from all of $GLOBALS['TCA']
         */
        protected function getExplicitAuthFieldValues() {}
/** @var QueryBuilder $queryBuilder */
        protected function buildForeignTableQueryBuilder(/** @var QueryBuilder $queryBuilder */
array $result, /** @var QueryBuilder $queryBuilder */
string $localFieldName) : QueryBuilder {}
        protected function processForeignTableClause(array $result, $foreignTableName, $localFieldName) {}
        protected function processDatabaseFieldValue(array $row, $fieldName) {}
/** @var RelationHandler $relationHandler */
        protected function processSelectFieldValue(/** @var RelationHandler $relationHandler */
array $result, /** @var RelationHandler $relationHandler */
$fieldName, /** @var RelationHandler $relationHandler */
array $staticValues) {}
        public function translateLabels(array $result, array $itemArray, $table, $fieldName) {}
        public function sanitizeItemArray($itemArray, $tableName, $fieldName) {}
        protected function getLiveUid(array $result) {}
        protected function getStaticValues($itemArray, $dynamicItemArray) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Handle TCA default values on row. This affects existing rows as well as new rows.
     *
     * Hint: Even after this class it is NOT safe no rely that *all* fields from
     * columns are set in databaseRow.
     */
    class DatabaseRowDefaultValues implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Works on processedTca to determine the final value of field labels.
     *
     * processedTca['columns]['aField']['label']
     */
    class TcaColumnsProcessFieldLabels implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function setLabelFromShowitemAndPalettes(array $result) {}
        protected function setLabelFromPageTsConfig(array $result) {}
        protected function translateLabels(array $result) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Mark columns that are common to many tables for further processing
     */
    class TcaColumnsProcessCommon implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Resolve flex data structure and data values, prepare and normalize.
     *
     * This is the first data provider in the chain of flex form related providers.
     */
    class TcaFlexPrepare implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function initializeDataStructure(array $result, $fieldName) {}
        protected function initializeDataValues(array $result, $fieldName) {}
        protected function removeTceFormsArrayKeyFromDataStructureElements(array $result, $fieldName) {}
        protected function removeElementTceFormsRecursive(array $structure) {}
        protected function migrateFlexformTcaDataStructureElements(array $result, $fieldName) {}
        protected function migrateFlexformTcaRecursive($structure, $table, $fieldName) {}
    }

    /**
     * Create final showitem configuration in processedTca for types and palette
     * fields
     * Handles all the nasty details like subtypes_addlist and friends.
     */
    class TcaTypesShowitem implements \typo3\cms\backend\form\formdataproviderinterface {
        /**
         * Processed TCA array
         *
         * @var array
         */
        protected $processedTca;

        public function addData(array $result) {}
        protected function addFieldsBySubtypeAddList(array $result, $subtypeFieldName, $subtypeValue, $recordTypeValue) {}
        protected function removeFieldsBySubtypeExcludeList(array $result, $subtypeValue, $recordTypeValue) {}
        protected function removeFieldsByBitmaskExcludeBits(array $result, $bitmaskValue, $recordTypeValue) {}
        protected function removeFields(array $result, array $removeListArray, $recordTypeValue) {}
        protected function removeFieldsFromPalettes(array $result, $removeListArray) {}
    }

    /**
     * On "new" command, initialize new database row with default data
     */
    class DatabaseRowInitializeNew implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function setDefaultsFromUserTsConfig(array $result) {}
        protected function setDefaultsFromPageTsConfig(array $result) {}
        protected function setDefaultsFromNeighborRow(array $result) {}
        protected function setDefaultsFromDevVals(array $result) {}
        protected function setDefaultsFromInlineRelations(array $result) {}
        protected function setDefaultsFromInlineParentLanguage(array $result) : array {}
        protected function setPid(array $result) {}
    }

    /**
     * Set rootline
     */
    class DatabasePageRootline implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Set or initialize configuration for inline fields in TCA
     */
    class TcaInlineConfiguration implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function initializeMinMaxItems(array $result, $fieldName) {}
        protected function initializeAppearance(array $result, $fieldName) {}
        protected function initializeChildrenLanguage(array $result, $fieldName) {}
        protected function addInlineSelectorAndUniqueConfiguration(array $result, $fieldName) {}
    }

    /**
     * Merge type specific columnsOverrides into columns of processedTca
     */
    class TcaColumnsOverrides implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Resolve and prepare inline data.
     */
    class TcaInline extends \typo3\cms\backend\form\formdataprovider\abstractdatabaserecordprovider implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function isInlineField($fieldConfig) {}
        protected function isUserAllowedToModify($fieldConfig) {}
        protected function addInlineFirstPid(array $result) {}
        protected function resolveRelatedRecords(array $result, $fieldName) {}
/** @var FormDataCompiler $formDataCompiler */
        protected function addForeignSelectorAndUniquePossibleRecords(/** @var FormDataCompiler $formDataCompiler */
array $result, /** @var FormDataCompiler $formDataCompiler */
$fieldName) {}
/** @var FormDataCompiler $formDataCompiler */
        protected function compileChild(/** @var FormDataCompiler $formDataCompiler */
array $result, /** @var FormDataCompiler $formDataCompiler */
$parentFieldName, /** @var FormDataCompiler $formDataCompiler */
$childUid) {}
/** @var FormDataCompiler $formDataCompiler */
        protected function compileChildChild(/** @var FormDataCompiler $formDataCompiler */
array $child, /** @var FormDataCompiler $formDataCompiler */
array $parentConfig) {}
        protected function getWorkspacedUids(array $connectedUids, $childTableName) {}
/** @var RelationHandler $relationHandler */
        protected function resolveConnectedRecordUids(/** @var RelationHandler $relationHandler */
array $parentConfig, /** @var RelationHandler $relationHandler */
$parentTableName, /** @var RelationHandler $relationHandler */
$parentUid, /** @var RelationHandler $relationHandler */
$parentFieldValue) {}
        protected function getLiveDefaultId($tableName, $uid) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Mark columns that are used to generate the record title for
     * further processing
     */
    class TcaColumnsProcessRecordTitle implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Add vanilla TCA of parent page
     *
     * @todo: maybe not needed?
     */
    class ParentPageTca implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Add language related data to result array
     */
    class DatabaseLanguageRows implements \typo3\cms\backend\form\formdataproviderinterface {
/** @var TranslationConfigurationProvider $translationProvider */
        public function addData(/** @var TranslationConfigurationProvider $translationProvider */
array $result) {}
        protected function getRecordWorkspaceOverlay(string $tableName, int $uid) : array {}
    }

    /**
     * On "new" command, initialize uid with an unqique uid
     */
    class DatabaseUniqueUidNewRow implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Determine the final TCA type value
     */
    class DatabaseRecordTypeValue implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function getDatabaseRow(string $tableName, int $uid, string $fieldName) : array {}
    }

    /**
     * Determine the title of a record and write it to $result['recordTitle'].
     *
     * TCA ctrl fields like label and label_alt are evaluated and their
     * current values from databaseRow used to create the title.
     */
    class TcaRecordTitle implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function getRecordTitleByLabelProperties(array $result) {}
        protected function getRecordTitleForField($fieldName, $result) {}
        protected function getRecordTitleForRadioType($value, $fieldConfig) {}
        protected function getRecordTitleForInlineType($value, array $children) {}
        protected function getRecordTitleForSelectType($value, $fieldConfig) {}
        protected function getRecordTitleForGroupType($value, $fieldConfig) {}
        protected function getRecordTitleForCheckboxType($value, $fieldConfig) {}
        protected function getRecordTitleForInputType($value, $fieldConfig) {}
        protected function getRecordTitleForTextType($value) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Resolve return Url if not set otherwise.
     */
    class ReturnUrl implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Mark columns that are used by input placeholders for further processing
     */
    class TcaColumnsProcessPlaceholders implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Fetch information of user specific inline record expanded / collapsed state
     * from user->uc and put it into $result['inlineExpandCollapseStateArray']
     */
    class TcaInlineExpandCollapseState implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Initialize processed TCA from vanilla TCA
     */
    class InitializeProcessedTca implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Page TsConfig relevant for this record
     */
    class PageTsConfigMerged implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Resolve databaseRow field content to the real connected rows for type=group
     */
    class TcaGroup implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Determine user permission for action and check them
     */
    class DatabaseUserPermissionCheck implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Fill the "systemLanguageRows" part of the result array
     */
    class DatabaseSystemLanguageRows implements \typo3\cms\backend\form\formdataproviderinterface {
/** @var $flashMessageService FlashMessageService */
        public function addData(/** @var $flashMessageService FlashMessageService */
array $result) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Fill the "pageLanguageOverlayRows" part of the result array
     */
    class DatabasePageLanguageOverlayRows implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function getDatabaseRows(int $pid) : array {}
    }

    /**
     * Extended by other provider that fetch records from database
     */
    abstract class AbstractDatabaseRecordProvider {
        protected function getRecordFromDatabase($tableName, $uid) {}
        protected function getDatabaseRow(string $tableName, int $uid) : array {}
    }

    /**
     * Resolve radio items and set processed item list in processedTca
     */
    class TcaRadioItems extends \typo3\cms\backend\form\formdataprovider\abstractitemprovider implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Mark columns that are used in showitem or palettes for further processing
     */
    class TcaColumnsProcessShowitem implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Set effective pid we're working on
     */
    class DatabaseEffectivePid implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Determine whether the child is on symmetric side or not.
     *
     * TCA ctrl fields like label and label_alt are evaluated and their
     * current values from databaseRow used to create the title.
     */
    class TcaInlineIsOnSymmetricSide implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Remove fields from columns not in showitem or palette list or needed otherwise
     * This is a relatively effective performance improvement preventing other
     * providers from resolving stuff of fields that are not shown later.
     * Especially effective for fal related tables.
     */
    class TcaColumnsRemoveUnused implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Migrate date and datetime db field values to timestamp
     */
    class DatabaseRowDateTimeFields implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Fetch existing database row on edit
     */
    class DatabaseEditRow extends \typo3\cms\backend\form\formdataprovider\abstractdatabaserecordprovider implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Process data structures and data values, calculate defaults.
     *
     * This is typically the last provider, executed after TcaFlexPrepare
     */
    class TcaFlexProcess implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function scanForInvalidSectionContainerTca(array $result, string $fieldName) {}
        protected function getSimplifiedDataStructureIdentifier(string $dataStructureIdentifier) : string {}
        protected function getPageTsOfFlex(array $result, $fieldName, $flexIdentifier) {}
        protected function modifyOuterDataStructure(array $result, $fieldName, $pageTsConfig) {}
        protected function removeExcludeFieldsFromDataStructure(array $result, $fieldName, $flexIdentifier) {}
        protected function removeDisabledFieldsFromDataStructure(array $result, $fieldName, $pageTsConfig) {}
        protected function modifyDataStructureAndDataValuesByFlexFormSegmentGroup(array $result, $fieldName, $pageTsConfig) {}
        protected function prepareNewSectionContainer(array $result, string $fieldName) : array {}
        protected function modifySingleSheetInformation(array $dataStructure, array $pageTsOfSheet) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Resolve placeholders for fields of type input or text. The placeholder value
     * in the processedTca section of the result will be replaced with the resolved
     * value.
     */
    class TcaInputPlaceholders implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function getPlaceholderValue($fieldNameArray, $result, $recursionLevel = 0) {}
/** @var FormDataCompiler $formDataCompiler */
        protected function getRelatedFormData(/** @var FormDataCompiler $formDataCompiler */
$tableName, /** @var FormDataCompiler $formDataCompiler */
$uid, /** @var FormDataCompiler $formDataCompiler */
$columnToProcess) {}
        protected function getRelatedGroupFieldUids(array $fieldConfig, $value) {}
        protected function getAllowedTableForGroupField(array $fieldConfig) {}
        protected function getPossibleUidsByCurrentSysLanguage(array $possibleUids, $foreignTableName, $currentLanguage) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Determine the final TCA type value
     */
    class DatabaseRecordOverrideValues implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Page TsConfig relevant for this record
     */
    class PageTsConfig implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Add user TsConfig to result
     */
    class UserTsConfig implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Fetch page in default language from database if it's a translated pages record
     */
    class DatabaseDefaultLanguagePageRow extends \typo3\cms\backend\form\formdataprovider\abstractdatabaserecordprovider implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Fetch parent page row from database if possible
     */
    class DatabaseParentPageRow extends \typo3\cms\backend\form\formdataprovider\abstractdatabaserecordprovider implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Resolve select items, set processed item list in processedTca, sanitize and resolve database field
     */
    class TcaSelectItems extends \typo3\cms\backend\form\formdataprovider\abstractitemprovider implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        public function addInvalidItemsFromDatabase(array $result, $table, $fieldName, array $fieldConf, array $databaseValues, array $removedItems) {}
        protected function isTargetRenderType(array $fieldConfig) {}
    }

    /**
     * Override child TCA in an inline parent child relation.
     *
     * This basically merges the inline property ['overrideChildTca'] from
     * parent TCA over given child TCA.
     */
    class InlineOverrideChildTca implements \typo3\cms\backend\form\formdataproviderinterface {
        /**
         * ['columns'] section child TCA field names that can not be overridden
         * by overrideChildTca from parent.
         *
         * @var array
         */
        protected $notSettableFields;
        /**
         * Configuration fields in ctrl section. Their values are field names and if the
         * keys are set in ['ctrl'] section, they are added to the $notSettableFields list
         * and can not be overridden, too.
         *
         * @var array
         */
        protected $configurationKeysForNotSettableFields;

        public function addData(array $result) : array {}
        protected function overrideTypes(array $result) : array {}
        protected function overrideColumns(array $result) : array {}
        protected function generateFieldBlackList(array $result) : array {}
    }

    /**
     * Resolve databaseRow field content for type=text, especially handle
     * richtext transformations "from db to rte"
     */
    class TcaText implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
    }

    /**
     * Data provider for type=select + renderType=selectTree fields.
     *
     * Used in combination with SelectTreeElement to create the base HTML for trees,
     * does a little bit of sanitation and preparation then.
     *
     * Used in combination with FormSelectTreeAjaxController to fetch the final tree list, this is
     * triggered if $result['selectTreeCompileItems'] is set to true. This way the tree item
     * calculation is only triggered if needed in this ajax context. Writes the prepared
     * item array to ['config']['items'] in this case.
     */
    class TcaSelectTreeItems extends \typo3\cms\backend\form\formdataprovider\abstractitemprovider implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) {}
        protected function isTargetRenderType(array $fieldConfig) {}
    }

    /**
     * Class EvaluateDisplayConditions implements the TCA 'displayCond' option.
     * The display condition is a colon separated string which describes
     * the condition to decide whether a form field should be displayed.
     */
    class EvaluateDisplayConditions implements \typo3\cms\backend\form\formdataproviderinterface {
        public function addData(array $result) : array {}
        protected function parseDisplayConditions(array $result) : array {}
        protected function parseConditionRecursive($condition, array $databaseRow, array $flexContext = [ ]) : array {}
        protected function parseSingleConditionString(string $conditionString, array $databaseRow, array $flexContext = [ ]) : array {}
        protected function findFieldValue(string $givenFieldName, array $databaseRow, array $flexContext = [ ]) {}
        protected function evaluateConditions(array $result) : array {}
        protected function evaluateConditionRecursive(array $conditionArray) : bool {}
        protected function matchFieldCondition(array $condition) : bool {}
        protected function matchRecordCondition(array $condition) : bool {}
        protected function matchVersionCondition(array $condition) : bool {}
        protected function matchUserCondition(array $condition) : bool {}
        /**
         * Get current backend user
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Backend\Form\NodeExpansion {
    /**
     * Field controls are additional HTML on a single element level that are typically
     * shown right aside the main element HTML.
     *
     * They are restricted to only allow an icon as output.
     *
     * The "link popup" button next to the input field of a renderType "inputLink"
     * is an example of such an additional control.
     *
     * The element itself must position any field controls at an appropriate place.
     * For instance the "group" element shows them in a row vertically, while others
     * display single controls next to each other.
     */
    class FieldControl extends \typo3\cms\backend\form\abstractnode {
        /**
         * Order the list of field wizards to be rendered with the ordering service,
         * then call each wizard element through the node factory and merge their
         * results.
         *
         * @return array Result array
         */
        public function render() : array {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Field wizards are additional HTML on a single element level that are typically
     * shown below the element input. They are registered in ['config']['fieldWizard']
     * TCA section and each element may merge that with default wizards.
     *
     * Field wizards may add additional functionality to the element. They could add
     * new ajax controllers for instance or add buttons and are not restricted by the
     * framework further.
     *
     * Examples for field wizards are the display of the "languaged diff" in input elements
     * and the file upload button in group elements.
     */
    class FieldWizard extends \typo3\cms\backend\form\abstractnode {
        /**
         * Order the list of field wizards to be rendered with the ordering service,
         * then call each wizard element through the node factory and merge their
         * results.
         *
         * @return array Result array
         */
        public function render() : array {}
    }

    /**
     * Field information are additional HTML on a single node level that are typically
     * shown between the label and the main element. They are registered in ['config']['fieldInformation']
     * TCA section and each element may merge that with default registered information.
     *
     * Field information must not add additional functionality to the element. They are only
     * allowed to add "informational" stuff like links, div and spans and similar.
     */
    class FieldInformation extends \typo3\cms\backend\form\abstractnode {
        /**
         * Order the list of field information to be rendered with the ordering service,
         * then call each information element through the node factory and merge their
         * results.
         *
         * @return array Result array
         */
        public function render() : array {}
    }

}

namespace TYPO3\CMS\Backend\Form\FieldWizard {
    /**
     * Render details of selected records,
     * typically used with type=group and internal_type=db.
     */
    class RecordsOverview extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render table with record details
         *
         * @return array
         */
        public function render() : array {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Render thumbnails of icons,
     * typically used with type=group and internal_type=file and file_reference.
     */
    class SelectIcons extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render thumbnails of selected files
         *
         * @return array
         */
        public function render() : array {}
    }

    /**
     * Render thumbnails of selected files,
     * typically used with type=group and internal_type=file and file_reference.
     */
    class FileThumbnails extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render thumbnails of selected files
         *
         * @return array
         */
        public function render() : array {}
    }

    /**
     * Render list of allowed / disalowwed file types,
     * typically used with type=group and internal_type=file.
     */
    class FileTypeList extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render list of allowed and disallowed file types
         *
         * @return array
         */
        public function render() : array {}
    }

    /**
     * Render file upload,
     * typically used with type=group and internal_type=file and file_reference.
     */
    class FileUpload extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render file upload
         *
         * @return array
         */
        public function render() : array {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * Allows to define the localization state per field.
     */
    class LocalizationStateSelector extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render the radio buttons if enabled
         *
         * @return array Result array
         */
        public function render() : array {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Render values of "other" languages. If editing a localized row, this is typically
     * the content value of the according default record, but it may render field values
     * of other languages too, depending on configuration.
     */
    class OtherLanguageContent extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render other language content if enabled.
         *
         * @return array
         */
        public function render() : array {}
        protected function previewFieldValue($value, $config, $field = '') {}
    }

    /**
     * Renders the diff-view of default language record content compared with what the record was originally
     * translated from. Will render content if any is found in the internal array.
     *
     * This is typically used of renderTypes that are based on text input
     */
    class DefaultLanguageDifferences extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render the diff view if enabled
         *
         * @return array Result array
         */
        public function render() : array {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Render list of tables and link to element browser,
     * typically used with type=group and internal_type=db.
     */
    class TableList extends \typo3\cms\backend\form\abstractnode {
        /**
         * Render table buttons
         *
         * @return array
         */
        public function render() : array {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Backend\Form\Wizard {
    /**
     * Default implementation of a handler class for an ajax record selector.
     *
     * Normally other implementations should be inherited from this one.
     * queryTable() should not be overwritten under normal circumstances.
     */
    class SuggestWizardDefaultReceiver {
        /**
         * The name of the table to query
         *
         * @var string
         */
        protected $table;
        /**
         * The name of the foreign table to query (records from this table will be used for displaying instead of the ones
         * from $table)
         *
         * @var string
         */
        protected $mmForeignTable;
        /**
         * Configuration for this selector from TSconfig
         *
         * @var array
         */
        protected $config;
        /**
         * The list of pages that are allowed to perform the search for records on
         *
         * @var array Array of PIDs
         */
        protected $allowedPages;
        /**
         * The maximum number of items to select.
         *
         * @var int
         */
        protected $maxItems;
        /**
         * @var array
         */
        protected $params;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var QueryBuilder
         */
        protected $queryBuilder;

        public function __construct($table, $config) {}
        public function queryTable($params, $recursionCounter = 0) {}
        /**
         * Prepare the statement for selecting the records which will be returned to the selector. May also return some
         * other records (e.g. from a mm-table) which will be used later on to select the real records
         */
        protected function prepareSelectStatement() {}
        protected function getAllSubpagesOfPage($uid, $depth = 99) {}
        /**
         * Prepares the clause by which the result elements are sorted. See description of ORDER BY in
         * SQL standard for reference.
         */
        protected function prepareOrderByStatement() {}
        protected function manipulateRecord($row) {}
        protected function checkRecordAccess($row, $uid) {}
        protected function makeWorkspaceOverlay($row) {}
        protected function getRecordPath($row, $uid) {}
        protected function getLabel($row) {}
        protected function renderRecord($row, $entry) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        protected function getQueryBuilderForTable($table) {}
    }

    /**
     * Wizard for rendering image manipulation view
     */
    class ImageManipulationWizard {
        /**
         * @var StandaloneView
         */
        private $templateView;

        public function __construct(StandaloneView $templateView = null) {}
        public function getWizardAction(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function isSignatureValid(ServerRequestInterface $request) {}
    }

}

namespace TYPO3\CMS\Backend\Form\Element {
    /**
     * Base class for form elements of FormEngine. Contains several helper methods used by single elements.
     */
    abstract class AbstractFormElement extends \typo3\cms\backend\form\abstractnode {
        /**
         * Default width value for a couple of elements like text
         *
         * @var int
         */
        protected $defaultInputWidth;
        /**
         * Minimum width value for a couple of elements like text
         *
         * @var int
         */
        protected $minimumInputWidth;
        /**
         * Maximum width value for a couple of elements like text
         *
         * @var int
         */
        protected $maxInputWidth;
        /**
         * @var IconFactory
         */
        protected $iconFactory;

        public function __construct(NodeFactory $nodeFactory, array $data) {}
        /**
         * Merge field information configuration with default and render them.
         *
         * @return array Result array
         */
        protected function renderFieldInformation() : array {}
        /**
         * Merge field control configuration with default controls and render them.
         *
         * @return array Result array
         */
        protected function renderFieldControl() : array {}
        /**
         * Merge field wizard configuration with default wizards and render them.
         *
         * @return array Result array
         */
        protected function renderFieldWizard() : array {}
        /**
         * Returns true if the "null value" checkbox should be rendered. This is used in some
         * "text" based types like "text" and "input" for some renderType's.
         *
         * A field has eval=null set, but has no useOverridePlaceholder defined.
         * Goal is to have a field that can distinct between NULL and empty string in the database.
         * A checkbox and an additional hidden field will be created, both with the same name
         * and prefixed with "control[active]". If the checkbox is set (value 1), the value from the casual
         * input field will be written to the database. If the checkbox is not set, the hidden field
         * transfers value=0 to DataHandler, the value of the input field will then be reset to NULL by the
         * DataHandler at an early point in processing, so NULL will be written to DB as field value.
         *
         * All that only works if the field is not within flex form scope since flex forms
         * can not store a "null" value or distinct it from "empty string".
         *
         * @return bool
         */
        protected function hasNullCheckboxButNoPlaceholder() : bool {}
        /**
         * Returns true if the "null value" checkbox should be rendered and the placeholder
         * handling is enabled. This is used in some "text" based types like "text" and
         * "input" for some renderType's.
         *
         * A field has useOverridePlaceholder set and null in eval and is not within a flex form.
         * Here, a value from a deeper DB structure can be "fetched up" as value, and can also be overridden by a
         * local value. This is used in FAL, where eg. the "title" field can have the default value from sys_file_metadata,
         * the title field of sys_file_reference is then set to NULL. Or the "override" checkbox is set, and a string
         * or an empty string is then written to the field of sys_file_reference.
         * The situation is similar to hasNullCheckboxButNoPlaceholder(), but additionally a "default" value should be shown.
         * To achieve this, again a hidden control[hidden] field is added together with a checkbox with the same name
         * to transfer the information whether the default value should be used or not: Checkbox checked transfers 1 as
         * value in control[active], meaning the overridden value should be used.
         * Additionally to the casual input field, a second field is added containing the "placeholder" value. This
         * field has no name attribute and is not transferred at all. Those two are then hidden / shown depending
         * on the state of the above checkbox in via JS.
         *
         * @return bool
         */
        protected function hasNullCheckboxWithPlaceholder() : bool {}
        protected function formatValue($format, $itemValue, $formatOptions = [ ]) {}
        protected function formMaxWidth($size = 48) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Link input element.
     *
     * Shows current link and the link popup.
     */
    class InputLinkElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field controls render the link icon
         *
         * @var array
         */
        protected $defaultFieldControl;
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a single-line input form field, possibly with various control/validation features
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
/** @var Folder $folder */
        protected function getLinkExplanation(/** @var Folder $folder */
string $itemValue) : array {}
        protected function getDomainByUrl(string $uriString) : string {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Generation of TCEform elements of the type "input type=text"
     */
    class InputDateTimeElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a single-line input form field, possibly with various control/validation features
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         * @throws \RuntimeException with invalid configuration
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() : LanguageService {}
    }

    /**
     * Generation of elements of the type "group"
     */
    class GroupElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field controls for this element.
         *
         * @var array
         */
        protected $defaultFieldControl;
        /**
         * Default field wizards for this element
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a selector box into which elements from either
         * the file system or database can be inserted. Relations.
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         * @throws \RuntimeException
         */
        public function render() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Render data as a tree.
     *
     * Typically rendered for config type=select, renderType=selectTree
     */
    class SelectTreeElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default number of tree nodes to show (determines tree height)
         * when no ['config']['size'] is set
         *
         * @var int
         */
        protected $itemsToShow;
        /**
         * Number of items to show at last
         * e.g. when you have only 2 items in a tree
         *
         * @var int
         */
        protected $minItemsToShow;
        /**
         * Pixel height of a single tree node
         *
         * @var int
         */
        protected $itemHeight;

        /**
         * Render tree widget
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         * @see AbstractNode::initializeResultArray()
         */
        public function render() {}
        /**
         * Generates JS code triggered on change of the tree
         *
         * @return string
         */
        protected function getTreeOnChangeJs() {}
    }

    /**
     * Create a widget with a select box where multiple items can be selected
     *
     * This is rendered for config type=select, renderType=selectSingleBox
     */
    class SelectSingleBoxElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field controls for this element.
         *
         * @var array
         */
        protected $defaultFieldControl;
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a selector box element, or possibly a special construction with two selector boxes.
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        protected function renderSelectElement(array $optionElements, array $parameterArray, array $config) {}
        protected function renderOptionElement($value, $label, array $attributes = [ ]) {}
    }

    /**
     * None element is a "disabled" input element with formatted values if needed.
     */
    class NoneElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * This will render a non-editable display of the content of the field.
         *
         * @return string The HTML code for the TCEform field
         */
        public function render() {}
    }

    /**
     * Creates a widget where only one item can be selected.
     * This is either a select drop-down if no size config is given or set to 1, or a select box.
     *
     * This is rendered for type=select, renderType=selectSingle
     */
    class SelectSingleElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /** @var InlineStackProcessor $inlineStackProcessor */
        public function render() {}
    }

    /**
     * Creates a widget with check box elements.
     *
     * This is rendered for config type=select, renderType=selectCheckBox
     */
    class SelectCheckBoxElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * Render check boxes
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

    /**
     * Generation of TCEform elements of where the type is unknown
     */
    class UnknownElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Handler for unknown types.
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

    /**
     * Generation of TCEform elements of the type "check"
     */
    class CheckboxElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a checkbox or an array of checkboxes
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        protected function renderSingleCheckboxElement($label, $itemCounter, $formElementValue, $numberOfItems, $additionalInformation, $disabled) {}
        protected function checkBoxParams($itemName, $formElementValue, $checkbox, $checkboxesCount, $additionalJavaScript = '') {}
    }

    /**
     * Generation of image manipulation FormEngine element.
     * This is typically used in FAL relations to cut images.
     */
    class ImageManipulationElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default element configuration
         *
         * @var array
         */
        static protected $defaultConfig;
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;
        /**
         * @var StandaloneView
         */
        protected $templateView;
        /**
         * @var UriBuilder
         */
        protected $uriBuilder;

        public function __construct(NodeFactory $nodeFactory, array $data) {}
        /**
         * This will render an imageManipulation field
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         * @throws \TYPO3\CMS\Core\Imaging\ImageManipulation\InvalidConfigurationException
         */
        public function render() {}
        protected function getFile(array $row, $fieldName) {}
        protected function getPreviewUrl(array $databaseRow, File $file) : string {}
        protected function populateConfiguration(array $baseConfiguration) {}
        protected function processConfiguration(array $config, string $elementValue, File $file) {}
        protected function getWizardUri(array $cropVariants, File $image) : string {}
    }

    /**
     * Render elements of type radio
     */
    class RadioElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a series of radio buttons.
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

    /**
     * This renderType is used with type=user in FAL for table sys_file and
     * sys_file_metadata, for field fileinfo and renders an informational
     * element with image preview, filename, size and similar.
     */
    class FileInfoElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Handler for single nodes
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() : array {}
/** @var LanguageService $lang */
        protected function renderFileInformationContent(/** @var LanguageService $lang */
File $file = null) : string {}
    }

    /**
     * Generation of elements of the type "user"
     */
    class UserElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * User defined field type
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

    /**
     * General type=input element.
     *
     * This one kicks in if no specific renderType like "inputDateTime"
     * or "inputColorPicker" is set.
     */
    class InputTextElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a single-line input form field, possibly with various control/validation features
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Generation of TCEform elements of the type "text"
     */
    class TextTableElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;
        /**
         * This renderType adds the "table wizard icon" by default (on not new records)
         *
         * @var array
         */
        protected $defaultFieldControl;
        /**
         * The number of chars expected per row when the height of a text area field is
         * automatically calculated based on the number of characters found in the field content.
         *
         * @var int
         */
        protected $charactersPerRow;

        /**
         * This will render a <textarea> with table wizard
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * Render an input field with a color picker
     */
    class InputColorPickerElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * This will render a single-line input form field, possibly with various control/validation features
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Generation of TCEform elements of the type "input type=hidden"
     */
    class InputHiddenElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * This will render an input type="hidden" form field
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

    /**
     * Generation of TCEform elements of the type "text"
     */
    class TextElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;
        /**
         * The number of chars expected per row when the height of a text area field is
         * automatically calculated based on the number of characters found in the field content.
         *
         * @var int
         */
        protected $charactersPerRow;

        /**
         * This will render a <textarea>
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Render a widget with two boxes side by side.
     *
     * This is rendered for config type=select, renderType=selectMultipleSideBySide set
     */
    class SelectMultipleSideBySideElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field controls for this element.
         *
         * @var array
         */
        protected $defaultFieldControl;
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * Render side by side element.
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * Create HTML of a read only multi select. Right side is not
         * rendered, but just the left side with the selected items.
         *
         * @return array
         */
        protected function renderReadOnly() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }


    /**
     * Interface for classes which hook into inline element handling
     */
    interface InlineElementHookInterface {
        function renderForeignRecordHeaderControl_preProcess($parentUid, $foreignTable, array $childRecord, array $childConfig, $isVirtual, array $enabledControls) ;
        function renderForeignRecordHeaderControl_postProcess($parentUid, $foreignTable, array $childRecord, array $childConfig, $isVirtual, array $controlItems) ;
    }

}

namespace TYPO3\CMS\Backend\Form\Container {
    /**
     * Render a given list of field of a TCA table.
     *
     * This is an entry container called from FormEngine to handle a
     * list of specific fields. Access rights are checked here and globalOption array
     * is prepared for further processing of single fields by PaletteAndSingleContainer.
     */
    class ListOfFieldsContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Handle a record that has no tabs.
     *
     * This container is called by FullRecordContainer and just wraps the output
     * of PaletteAndSingleContainer in some HTML.
     */
    class NoTabsContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

    /**
     * Handle palettes and single fields.
     *
     * This container is called by TabsContainer, NoTabsContainer and ListOfFieldsContainer.
     *
     * This container mostly operates on TCA showItem of a specific type - the value is
     * coming in from upper containers as "fieldArray". It handles palettes with all its
     * different options and prepares rendering of single fields for the SingleFieldContainer.
     */
    class PaletteAndSingleContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Final result array accumulating results from children and final HTML
         *
         * @var array
         */
        protected $resultArray;

        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        protected function createPaletteContentArray($paletteName) {}
        protected function renderInnerPaletteContent(array $elementArray) {}
        protected function fieldSetWrap($content, $paletteHidden = false, $label = '') {}
        protected function wrapSingleFieldContentWithLabelAndOuterDiv(array $element, array $additionalPaletteClasses = [ ]) {}
        protected function isUserNoTableWrappingField($element) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Entry container to a flex form element. This container is created by
     * SingleFieldContainer if a type='flex' field is rendered.
     *
     * It either forks a FlexFormTabsContainer or a FlexFormNoTabsContainer.
     */
    class FlexFormEntryContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

    /**
     * Abstract container has various methods used by the container classes
     */
    abstract class AbstractContainer extends \typo3\cms\backend\form\abstractnode {
        /**
         * Merge field information configuration with default and render them.
         *
         * @return array Result array
         */
        protected function renderFieldInformation() : array {}
        /**
         * Merge field control configuration with default controls and render them.
         *
         * @return array Result array
         */
        protected function renderFieldControl() : array {}
        /**
         * Merge field wizard configuration with default wizards and render them.
         *
         * @return array Result array
         */
        protected function renderFieldWizard() : array {}
        protected function explodeSingleFieldShowItemConfiguration($field) {}
        protected function renderTabMenu(array $menuItems, $domId, $defaultTabIndex = 1) {}
    }

    /**
     * Flex form container implementation
     * This one is called by FlexFormSectionContainer and renders HTML for a single container.
     * For processing of single elements FlexFormElementContainer is called
     */
    class FlexFormContainerContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Inline element entry container.
     *
     * This container is the entry step to rendering an inline element. It is created by SingleFieldContainer.
     *
     * The code creates the main structure for the single inline elements, initializes
     * the inlineData array, that is manipulated and also returned back in its manipulated state.
     * The "control" stuff of inline elements is rendered here, for example the "create new" button.
     *
     * For each existing inline relation an InlineRecordContainer is called for further processing.
     */
    class InlineControlContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Inline data array used in JS, returned as JSON object to frontend
         *
         * @var array
         */
        protected $inlineData;
        /**
         * @var InlineStackProcessor
         */
        protected $inlineStackProcessor;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var string[]
         */
        protected $requireJsModules;
        /**
         * @var array Default wizards
         */
        protected $defaultFieldWizard;

        public function __construct(NodeFactory $nodeFactory, array $data) {}
        /** @var InlineStackProcessor $inlineStackProcessor */
        public function render() {}
        protected function getLevelInteractionLink($type, $objectPrefix, $conf = [ ]) {}
        protected function wrapWithAnchor($text, $link, $attributes = [ ]) {}
        protected function renderPossibleRecordsSelectorTypeGroupDB(array $inlineConfiguration) {}
        protected function renderPossibleRecordsSelectorTypeSelect(array $config, array $uniqueIds) {}
        protected function extractFlexFormParts($formElementName) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * A container rendering a "full record". This is an entry container used as first
     * step into the rendering tree..
     *
     * This container determines the to be rendered fields depending on the record type,
     * initializes possible language base data, finds out if tabs should be rendered and
     * then calls either TabsContainer or a NoTabsContainer for further processing.
     */
    class FullRecordContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Render header and footer row.
     *
     * This is an entry container called from controllers.
     * It wraps the title and a footer around the main html.
     * It either calls a FullRecordContainer or ListOfFieldsContainer to render
     * a full record or only some fields from a full record.
     */
    class OuterWrapContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * Handle flex forms that have tabs (multiple "sheets").
     *
     * This container is called by FlexFormEntryContainer. It resolves each
     * sheet and hands rendering of single sheet content over to FlexFormElementContainer.
     */
    class FlexFormTabsContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * The container handles single elements.
     *
     * This one is called by FlexFormTabsContainer, FlexFormNoTabsContainer or FlexFormContainerContainer.
     * For single fields, the code is similar to SingleFieldContainer, processing will end up in single
     * element classes depending on specific renderType of an element. Additionally, it determines if a
     * section is handled and hands over to FlexFormSectionContainer in this case.
     */
    class FlexFormElementContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * Render all tabs of a record that has tabs.
     *
     * This container is called from FullRecordContainer and resolves the --div-- structure,
     * operates on given fieldArrays and calls a PaletteAndSingleContainer for each single tab.
     */
    class TabsContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         * @throws \RuntimeException
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Container around a "single field".
     *
     * This container is the last one in the chain before processing is handed over to single element classes.
     * If a single field is of type flex or inline, it however creates FlexFormEntryContainer or InlineControlContainer.
     *
     * The container does various checks and processing for a given single fields.
     */
    class SingleFieldContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @throws \InvalidArgumentException
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
/** @var InlineStackProcessor $inlineStackProcessor */
        protected function isInlineChildAndLabelField(/** @var InlineStackProcessor $inlineStackProcessor */
$table, /** @var InlineStackProcessor $inlineStackProcessor */
$field) {}
        /** @var InlineStackProcessor $inlineStackProcessor */
        protected function inlineFieldShouldBeSkipped() {}
        protected function arrayCompareComplex($subjectArray, $searchArray, $type = '') {}
        protected function isAssociativeArray($object) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Handle a flex form that has no tabs.
     *
     * This container is called by FlexFormEntryContainer if only a default sheet
     * exists. It evaluates the display condition and hands over rendering of single
     * fields to FlexFormElementContainer.
     */
    class FlexFormNoTabsContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
    }

    /**
     * Render a single inline record relation.
     *
     * This container is called by InlineControlContainer to render single existing records.
     * Furthermore it is called by FormEngine for an incoming ajax request to expand an existing record
     * or to create a new one.
     *
     * This container creates the outer HTML of single inline records - eg. drag and drop and delete buttons.
     * For rendering of the record itself processing is handed over to FullRecordContainer.
     */
    class InlineRecordContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Inline data array used for JSON output
         *
         * @var array
         */
        protected $inlineData;
        /**
         * @var InlineStackProcessor
         */
        protected $inlineStackProcessor;
        /**
         * Array containing instances of hook classes called once for IRRE objects
         *
         * @var array
         */
        protected $hookObjects;
        /**
         * @var IconFactory
         */
        protected $iconFactory;

        public function __construct(NodeFactory $nodeFactory, array $data) {}
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         * @throws AccessDeniedContentEditException
         */
        public function render() {}
        protected function renderChild(array $data) {}
        protected function renderCombinationChild(array $data, $appendFormFieldNames) {}
        protected function renderForeignRecordHeader(array $data) {}
/** @var InlineElementHookInterface $hookObj */
        protected function renderForeignRecordHeaderControl(/** @var InlineElementHookInterface $hookObj */
array $data) {}
        protected function normalizeUid($string) {}
        /**
         * Initialized the hook objects for this class.
         * Each hook object has to implement the interface
         * \TYPO3\CMS\Backend\Form\Element\InlineElementHookInterface
         *
         * @throws \UnexpectedValueException
         */
        protected function initHookObjects() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Handle flex form sections.
     *
     * This container is created by FlexFormElementContainer if a "single" element is in
     * fact a section. For each existing section container it creates as FlexFormContainerContainer
     * to render its inner fields.
     * Additionally, a button for each possible container is rendered with information for the
     * ajax controller that fetches one on click.
     */
    class FlexFormSectionContainer extends \typo3\cms\backend\form\container\abstractcontainer {
        /**
         * Entry method
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         */
        public function render() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Backend\Form\FieldControl {
    /**
     * Renders the icon with link parameters to add a new record,
     * typically used for single elements of type=group or type=select.
     */
    class AddRecord extends \typo3\cms\backend\form\abstractnode {
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function render() : array {}
    }

    /**
     * Renders the icon "insert record from clipboard",
     * typically used for type=group.
     */
    class InsertClipboard extends \typo3\cms\backend\form\abstractnode {
        /**
         * Add button control
         *
         * @return array As defined by FieldControl class
         */
        public function render() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Renders the icon with link parameters to edit a selected element,
     * typically used for single elements of type=group or type=select.
     */
    class EditPopup extends \typo3\cms\backend\form\abstractnode {
        /**
         * Edit popup control
         *
         * @return array As defined by FieldControl class
         */
        public function render() {}
        /**
         * Returns an instance of LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * "Reset selection to previous selected items" icon,
     * typically used by type=select with renderType=selectSingleBox
     */
    class ResetSelection extends \typo3\cms\backend\form\abstractnode {
        /**
         * Add button control
         *
         * @return array As defined by FieldControl class
         */
        public function render() {}
    }

    /**
     * Renders the icon with link parameters to jump to the list module
     * "single table" view, showing only one configurable table.
     */
    class ListModule extends \typo3\cms\backend\form\abstractnode {
        /**
         * Add button control
         *
         * @return array As defined by FieldControl class
         */
        public function render() {}
    }

    /**
     * Renders the icon with link parameters to the table wizard,
     * typically used for type=text with renderType=textTable.
     */
    class TableWizard extends \typo3\cms\backend\form\abstractnode {
        /**
         * Add button control
         *
         * @return array As defined by FieldControl class
         */
        public function render() {}
    }

    /**
     * Renders the icon with link parameters to open the element browser.
     * Used in InputLinkElement.
     */
    class LinkPopup extends \typo3\cms\backend\form\abstractnode {
        /**
         * Link popup control
         *
         * @return array As defined by FieldControl class
         */
        public function render() : array {}
    }

    /**
     * Renders the icon "select element via element browser",
     * typically used for type=group.
     */
    class ElementBrowser extends \typo3\cms\backend\form\abstractnode {
        /**
         * Add button control
         *
         * @return array As defined by FieldControl class
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Backend\Form\Exception {
    /**
     * Access denied exception.
     * This indicated a recoverable error that should be changed to a user message.
     * This abstract exception is extended by more fine grained exceptions.
     */
    abstract class AccessDeniedException extends \typo3\cms\backend\form\exception {}

    /**
     * Thrown if a language overlay record is handled and no default language record is found.
     */
    class DatabaseDefaultLanguageException extends \typo3\cms\backend\form\exception {}

    /**
     * User has no modify table access to a table record
     */
    class AccessDeniedTableModifyException extends \typo3\cms\backend\form\exception\accessdeniedexception {}

    /**
     * User has no sufficient rights to modify a row that is located at root node
     */
    class AccessDeniedRootNodeException extends \typo3\cms\backend\form\exception\accessdeniedexception {}

    /**
     * A record could not be fetched from database, maybe it vanished meanwhile.
     */
    class DatabaseRecordException extends \typo3\cms\backend\form\exception {
        /**
         * @var string Table name
         */
        protected $tableName;
        /**
         * @var int Table row uid
         */
        protected $uid;

        public function __construct($message, $code, \Exception $previousException = null, $tableName, $uid) {}
        /**
         * Return table name
         *
         * @return string
         */
        public function getTableName() {}
        /**
         * Return row uid
         *
         * @return int
         */
        public function getUid() {}
    }

    /**
     * User is not allowed to edit this content elements
     */
    class AccessDeniedContentEditException extends \typo3\cms\backend\form\exception\accessdeniedexception {}

    /**
     * User access to record was denied by a makeEditForm_accessCheck hook
     */
    class AccessDeniedHookException extends \typo3\cms\backend\form\exception\accessdeniedexception {}

    /**
     * User is not allowed to add a new page
     */
    class AccessDeniedPageNewException extends \typo3\cms\backend\form\exception\accessdeniedexception {}

    /**
     * User is not allowed to edit this page
     */
    class AccessDeniedPageEditException extends \typo3\cms\backend\form\exception\accessdeniedexception {}

    /**
     * User check did not survive "recordEditAccessInternals" to edit record
     */
    class AccessDeniedEditInternalsException extends \typo3\cms\backend\form\exception\accessdeniedexception {}

}

namespace TYPO3\CMS\Backend\Form\Utility {
    /**
     * This is a static, internal and intermediate helper class for various
     * FormEngine related tasks.
     *
     * This class was introduced to help disentangling FormEngine and
     * its sub classes. It MUST NOT be used in other extensions and will
     * change or vanish without further notice.
     *
     * @internal
     * @todo: These helpers are target to be dropped if further FormEngine refactoring is done
     */
    class FormEngineUtility {
        /**
         * Whitelist that allows TCA field configuration to be overridden by TSconfig
         *
         * @see overrideFieldConf()
         * @var array
         */
        static protected $allowOverrideMatrix;

        public static function overrideFieldConf($fieldConfig, $TSconfig) {}
        public static function getTSconfigForTableRow($table, $row, $field = '') {}
        public static function getIconHtml($icon, $alt = '', $title = '') {}
        public static function updateInlineView($uc, $tce) {}
        public static function databaseRowCompatibility(array $row) {}
        /**
         * @return BackendUserAuthentication
         */
        protected static function getBackendUserAuthentication() {}
    }

}

namespace TYPO3\CMS\Backend\Security {
    /**
     * We do not have AOP in TYPO3 for now, thus the aspect which
     * deals with tree data security is a slot which reacts on a signal
     * on data data object initialization.
     *
     * The aspect define category mount points according to BE User permissions.
     */
    class CategoryPermissionsAspect {
        /**
         * @var string
         */
        protected $categoryTableName;
        /**
         * @var BackendUserAuthentication
         */
        protected $backendUserAuthentication;

        public function __construct($backendUserAuthentication = null) {}
/** @var TreeNodeCollection $securedTreeNodeCollection */
        public function addUserPermissionsToCategoryTreeData(/** @var TreeNodeCollection $securedTreeNodeCollection */
DatabaseTreeDataProvider $dataProvider, /** @var TreeNodeCollection $securedTreeNodeCollection */
$treeData) {}
/** @var TreeNode $node */
        protected function lookUpCategoryMountPointInTreeNodes(/** @var TreeNode $node */
$categoryMountPoint, /** @var TreeNode $node */
TreeNodeCollection $treeNodeCollection) {}
/** @var \TYPO3\CMS\Core\Database\Query\QueryBuilder $queryBuilder */
        protected function findUidsInRootline(/** @var \TYPO3\CMS\Core\Database\Query\QueryBuilder $queryBuilder */
$uid) {}
    }

}

namespace TYPO3\CMS\Backend\Module {
    /**
     * Model for the module storage
     */
    class ModuleStorage implements \typo3\cms\core\singletoninterface {
        /**
         * @var \SplObjectStorage
         */
        protected $entries;

        /**
         * construct
         */
        public function __construct() {}
        public function setEntries($entries) {}
        /**
         * Get Entries
         *
         * @return \SplObjectStorage
         */
        public function getEntries() {}
        public function attachEntry(BackendModule $entry) {}
    }

    /**
     * A backend module. This class may be used by extension backend modules
     * to implement own actions and controllers. It initializes the module
     * template and comes with a simple dispatcher method.
     *
     * @internal Experimental for now
     * @deprecated
     */
    class AbstractModule {
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * PSR Request Object
         *
         * @var ServerRequestInterface
         */
        protected $request;

        /**
         * Constructor Method
         */
        public function __construct() {}
        public function processRequest(ServerRequestInterface $request, ResponseInterface $response) {}
    }

    /**
     * Parent class for 'Extension Objects' in backend modules.
     *
     * Used for 'submodules' to other modules. Also called 'Function menu modules'
     * in \TYPO3\CMS\Core\Utility\ExtensionManagementUtility. And now its even called
     * 'Extension Objects'. Or 'Module functions'. Wish we had just one name. Or a
     * name at all...(?) Thank God its not so advanced when it works...
     *
     * In other words this class is used for backend modules which is not true
     * backend modules appearing in the menu but rather adds themselves as a new
     * entry in the function menu which typically exists for a backend
     * module (like Web>Info or Tools etc...)
     * The magic that binds this together is stored in the global variable
     * $TBE_MODULES_EXT where extensions wanting to connect a module based on
     * this class to an existing backend module store configuration which consists
     * of the classname, script-path and a label (title/name).
     *
     * For more information about this, please see the large example comment for the
     * class \TYPO3\CMS\Backend\Module\BaseScriptClass. This will show the principle of a
     * 'level-1' connection. The more advanced example - having two layers as it is done
     * with the 'web_info' module - can be seen in the comment above.
     *
     * EXAMPLE: One level.
     * This can be seen in the extension 'frontend' where the info module have a
     * function added. In 'ext_tables.php' this is done by this function call:
     *
     * \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::insertModuleFunction(
     * 'web_info',
     * \TYPO3\CMS\Frontend\Controller\PageInformationController::class,
     * NULL,
     * 'LLL:EXT:frontend/Resources/Private/Language/locallang_tca.xlf:mod_tx_cms_webinfo_page'
     * );
     *
     * For this two-level thing to work it also requires that the parent
     * module (the real backend module) supports it.
     * This is the case for the modules web_info since it has two
     * times inclusion sections in their index.php scripts.
     *
     * @see \TYPO3\CMS\Backend\Module\BaseScriptClass
     */
    abstract class AbstractFunctionModule {
        /**
         * Contains a reference to the parent (calling) object (which is probably an instance of
         * an extension class to \TYPO3\CMS\Backend\Module\BaseScriptClass
         *
         * @var BaseScriptClass
         * @see init()
         */
        public $pObj;
        /**
         * @var BaseScriptClass
         */
        public $extObj;
        /**
         * Can be hardcoded to the name of a locallang.xlf file (from the same directory as the class file) to use/load
         * and is included / added to $GLOBALS['LOCAL_LANG']
         *
         * @see init()
         * @var string
         */
        public $localLangFile;
        /**
         * Contains module configuration parts from TBE_MODULES_EXT if found
         *
         * @see handleExternalFunctionValue()
         * @var array
         */
        public $extClassConf;
        /**
         * If this value is set it points to a key in the TBE_MODULES_EXT array (not on the top level..) where another classname/filepath/title can be defined for sub-subfunctions.
         * This is a little hard to explain, so see it in action; it used in the extension 'func_wizards' in order to provide yet a layer of interfacing with the backend module.
         * The extension 'func_wizards' has this description: 'Adds the 'Wizards' item to the function menu in Web>Func. This is just a framework for wizard extensions.' - so as you can see it is designed to allow further connectivity - 'level 2'
         *
         * @see handleExternalFunctionValue(), \TYPO3\CMS\FuncWizards\Controller\WebFunctionWizardsBaseController
         * @var string
         */
        public $function_key;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;

        public function init($pObj, $conf) {}
        /**
         * If $this->function_key is set (which means there are two levels of object connectivity) then
         * $this->extClassConf is loaded with the TBE_MODULES_EXT configuration for that sub-sub-module
         *
         * @see $function_key, \TYPO3\CMS\FuncWizards\Controller\WebFunctionWizardsBaseController::init()
         */
        public function handleExternalFunctionValue() {}
        /**
         * Same as \TYPO3\CMS\Backend\Module\BaseScriptClass::checkExtObj()
         *
         * @see \TYPO3\CMS\Backend\Module\BaseScriptClass::checkExtObj()
         */
        public function checkExtObj() {}
        /**
         * Calls the main function inside ANOTHER sub-submodule which might exist.
         */
        public function extObjContent() {}
        /**
         * Dummy function - but is used to set up additional menu items for this submodule.
         *
         * @return array A MOD_MENU array which will be merged together with the one from the parent object
         * @see init(), \TYPO3\CMS\Frontend\Controller\PageInformationController::modMenu()
         */
        public function modMenu() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return DocumentTemplate
         */
        protected function getDocumentTemplate() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

    /**
     * This document provides a class that loads the modules for the TYPO3 interface.
     *
     * Load Backend Interface modules
     *
     * Typically instantiated like this:
     * $this->loadModules = GeneralUtility::makeInstance(\TYPO3\CMS\Backend\Module\ModuleLoader::class);
     * $this->loadModules->load($TBE_MODULES);
     * @internal
     */
    class ModuleLoader {
        /**
         * After the init() function this array will contain the structure of available modules for the backend user.
         *
         * @var array
         */
        public $modules;
        /**
         * This array will hold the elements that should go into the select-list of modules for groups...
         *
         * @var array
         */
        public $modListGroup;
        /**
         * This array will hold the elements that should go into the select-list of modules for users...
         *
         * @var array
         */
        public $modListUser;
        /**
         * The backend user for use internally
         *
         * @var \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        public $BE_USER;
        /**
         * If set TRUE, workspace "permissions" will be observed so non-allowed modules will not be included in the array of modules.
         *
         * @var bool
         */
        public $observeWorkspaces;
        /**
         * Contains the registered navigation components
         *
         * @var array
         */
        protected $navigationComponents;
        /**
         * Labels for the modules
         * @var array
         */
        protected $moduleLabels;

        public function load($modulesArray, BackendUserAuthentication $beUser = null) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function checkMod(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$name) {}
        protected function getModuleSetupInformation($moduleName) {}
        public function checkModAccess($name, $MCONF) {}
        public function checkModWorkspace($name, $MCONF) {}
        public function parseModulesArray($arr) {}
        public function cleanName($str) {}
        public function addLabelsForModule($moduleName, $labels) {}
        public function getLabelsForModule($moduleName) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Parent class for 'ScriptClasses' in backend modules.
     *
     * EXAMPLE PROTOTYPE
     *
     * As for examples there are lots of them if you search for classes which extends \TYPO3\CMS\Backend\Module\BaseScriptClass
     * However you can see a prototype example of how a module might use this class in an index.php file typically hosting a backend module.
     *
     * NOTICE: This example only outlines the basic structure of how this class is used.
     * You should consult the documentation and other real-world examples for some actual things to do when building modules.
     *
     * TYPICAL SETUP OF A BACKEND MODULE:
     *
     * PrototypeController EXTENDS THE CLASS \TYPO3\CMS\Backend\Module\BaseScriptClass with a main() function:
     *
     * namespace Vendor\Prototype\Controller;
     *
     * class PrototypeController extends \TYPO3\CMS\Backend\Module\BaseScriptClass {
     * 	public function __construct() {
     * 		$this->getLanguageService()->includeLLFile('EXT:prototype/Resources/Private/Language/locallang.xlf');
     * 		$this->getBackendUser()->modAccess($GLOBALS['MCONF'], TRUE);
     * 	}
     * }
     *
     * MAIN FUNCTION - HERE YOU CREATE THE MODULE CONTENT IN $this->content
     * public function main() {
     * 	TYPICALLY THE INTERNAL VAR, $this->doc is instantiated like this:
     * 	$this->doc = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\TYPO3\CMS\Backend\Template\DocumentTemplate::class);
     * 	... AND OF COURSE A LOT OF OTHER THINGS GOES ON - LIKE PUTTING CONTENT INTO $this->content
     * 	$this->content='';
     * }
     *
     * MAKE INSTANCE OF THE SCRIPT CLASS AND CALL init()
     * $GLOBALS['SOBE'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\Vendor\Prototype\Controller\PrototypeController::class);
     * $GLOBALS['SOBE']->init();
     *
     *
     * THEN WE WILL CHECK IF THERE IS A 'SUBMODULE' REGISTERED TO BE INITIALIZED AS WELL:
     * $GLOBALS['SOBE']->checkExtObj();
     *
     * THEN WE CALL THE main() METHOD AND THIS SHOULD SPARK THE CREATION OF THE MODULE OUTPUT.
     * $GLOBALS['SOBE']->main();
     */
    class BaseScriptClass {
        /**
         * Loaded with the global array $MCONF which holds some module configuration from the conf.php file of backend modules.
         *
         * @see init()
         * @var array
         */
        public $MCONF;
        /**
         * The integer value of the GET/POST var, 'id'. Used for submodules to the 'Web' module (page id)
         *
         * @see init()
         * @var int
         */
        public $id;
        /**
         * The value of GET/POST var, 'CMD'
         *
         * @see init()
         * @var mixed
         */
        public $CMD;
        /**
         * A WHERE clause for selection records from the pages table based on read-permissions of the current backend user.
         *
         * @see init()
         * @var string
         */
        public $perms_clause;
        /**
         * The module menu items array. Each key represents a key for which values can range between the items in the array of that key.
         *
         * @see init()
         * @var array
         */
        public $MOD_MENU;
        /**
         * Current settings for the keys of the MOD_MENU array
         *
         * @see $MOD_MENU
         * @var array
         */
        public $MOD_SETTINGS;
        /**
         * Module TSconfig based on PAGE TSconfig / USER TSconfig
         *
         * @see menuConfig()
         * @var array
         */
        public $modTSconfig;
        /**
         * If type is 'ses' then the data is stored as session-lasting data. This means that it'll be wiped out the next time the user logs in.
         * Can be set from extension classes of this class before the init() function is called.
         *
         * @see menuConfig(), \TYPO3\CMS\Backend\Utility\BackendUtility::getModuleData()
         * @var string
         */
        public $modMenu_type;
        /**
         * dontValidateList can be used to list variables that should not be checked if their value is found in the MOD_MENU array. Used for dynamically generated menus.
         * Can be set from extension classes of this class before the init() function is called.
         *
         * @see menuConfig(), \TYPO3\CMS\Backend\Utility\BackendUtility::getModuleData()
         * @var string
         */
        public $modMenu_dontValidateList;
        /**
         * List of default values from $MOD_MENU to set in the output array (only if the values from MOD_MENU are not arrays)
         * Can be set from extension classes of this class before the init() function is called.
         *
         * @see menuConfig(), \TYPO3\CMS\Backend\Utility\BackendUtility::getModuleData()
         * @var string
         */
        public $modMenu_setDefaultList;
        /**
         * Contains module configuration parts from TBE_MODULES_EXT if found
         *
         * @see handleExternalFunctionValue()
         * @var array
         */
        public $extClassConf;
        /**
         * Generally used for accumulating the output content of backend modules
         *
         * @var string
         */
        public $content;
        /**
         * @var \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        public $doc;
        /**
         * May contain an instance of a 'Function menu module' which connects to this backend module.
         *
         * @see checkExtObj()
         * @var AbstractFunctionModule
         */
        public $extObj;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;

        /**
         * Initializes the backend module by setting internal variables, initializing the menu.
         *
         * @see menuConfig()
         */
        public function init() {}
        /**
         * Initializes the internal MOD_MENU array setting and unsetting items based on various conditions. It also merges in external menu items from the global array TBE_MODULES_EXT (see mergeExternalItems())
         * Then MOD_SETTINGS array is cleaned up (see \TYPO3\CMS\Backend\Utility\BackendUtility::getModuleData()) so it contains only valid values. It's also updated with any SET[] values submitted.
         * Also loads the modTSconfig internal variable.
         *
         * @see init(), $MOD_MENU, $MOD_SETTINGS, \TYPO3\CMS\Backend\Utility\BackendUtility::getModuleData(), mergeExternalItems()
         */
        public function menuConfig() {}
        public function mergeExternalItems($modName, $menuKey, $menuArr) {}
        public function handleExternalFunctionValue($MM_key = 'function', $MS_value = null) {}
        public function getExternalItemConfig($modName, $menuKey, $value = '') {}
        /**
         * Creates an instance of the class found in $this->extClassConf['name'] in $this->extObj if any (this should hold three keys, "name", "path" and "title" if a "Function menu module" tries to connect...)
         * This value in extClassConf might be set by an extension (in an ext_tables/ext_localconf file) which thus "connects" to a module.
         * The array $this->extClassConf is set in handleExternalFunctionValue() based on the value of MOD_SETTINGS[function]
         * If an instance is created it is initiated with $this passed as value and $this->extClassConf as second argument. Further the $this->MOD_SETTING is cleaned up again after calling the init function.
         *
         * @see handleExternalFunctionValue(), \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::insertModuleFunction(), $extObj
         */
        public function checkExtObj() {}
        /**
         * Calls the checkExtObj function in sub module if present.
         */
        public function checkSubExtObj() {}
        /**
         * Calls the 'header' function inside the "Function menu module" if present.
         * A header function might be needed to add JavaScript or other stuff in the head. This can't be done in the main function because the head is already written.
         */
        public function extObjHeader() {}
        /**
         * Calls the 'main' function inside the "Function menu module" if present
         */
        public function extObjContent() {}
        /**
         * Return the content of the 'main' function inside the "Function menu module" if present
         *
         * @return string
         */
        public function getExtObjContent() {}
        /**
         * Returns the Language Service
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the Backend User
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

}

namespace TYPO3\CMS\Backend\Composer {
    /**
     * Hook into Composer build to generate TYPO3 backend entry script
     */
    class InstallerScripts implements \typo3\cms\composer\plugin\core\installerscriptsregistration {
        public static function register(Event $event, ScriptDispatcher $scriptDispatcher) {}
    }

}

namespace TYPO3\CMS\Backend\Toolbar {
    /**
     * Interface for classes which hook into \TYPO3\CMS\Backend\Toolbar\ClearCacheToolbarItem and manipulate CacheMenuItems array
     */
    interface ClearCacheActionsHookInterface {
        function manipulateCacheActions($cacheActions, $optionValues) ;
    }

    /**
     * Interface for classes which extend the backend by adding items to the top toolbar
     *
     * @TODO: This interface is FIRST DRAFT and still WILL CHANGE
     * @see https://forge.typo3.org/issues/62928
     */
    interface ToolbarItemInterface {
        /**
         * Checks whether the user has access to this toolbar item
         * @TODO: Split into two methods a permission method and a "hasContent" or similar
         *
         * @return bool TRUE if user has access, FALSE if not
         */
        function checkAccess() ;
        /**
         * Render "item" part of this toolbar
         *
         * @return string Toolbar item HTML
         */
        function getItem() ;
        /**
         * TRUE if this toolbar item has a collapsible drop down
         *
         * @return bool
         */
        function hasDropDown() ;
        /**
         * Render "drop down" part of this toolbar
         *
         * @return string Drop down HTML
         */
        function getDropDown() ;
        /**
         * Returns an array with additional attributes added to containing <li> tag of the item.
         *
         * Typical usages are additional css classes and data-* attributes, classes may be merged
         * with other classes needed by the framework. Do NOT set an id attribute here.
         *
         * array(
         *     'class' => 'my-class',
         *     'data-foo' => '42',
         * )
         *
         * @return array List item HTML attributes
         */
        function getAdditionalAttributes() ;
        /**
         * Returns an integer between 0 and 100 to determine
         * the position of this item relative to others
         *
         * By default, extensions should return 50 to be sorted between main core
         * items and other items that should be on the very right.
         *
         * @return int 0 .. 100
         */
        function getIndex() ;
    }

}

namespace TYPO3\CMS\Backend\Toolbar\Enumeration {
    /**
     * This class holds the severities of the SystemInformation toolbar menu
     */
    class InformationStatus extends \typo3\cms\core\type\enumeration {
        const __default = self::STATUS_INFO;
        const STATUS_NOTICE = '';
        const STATUS_INFO = 'info';
        const STATUS_OK = 'success';
        const STATUS_WARNING = 'warning';
        const STATUS_ERROR = 'danger';

        /**
         * @var int[]
         */
        static protected $statusIntegerMap;

        public function isGreaterThan(InformationStatus $status) {}
    }

}

namespace TYPO3\CMS\Backend\Wizard {
    /**
     * Interface for classes which hook into \TYPO3\CMS\Backend\Controller\ContentElement\NewContentElementController
     * and manipulate wizardItems array
     */
    interface NewContentElementWizardHookInterface {
        function manipulateWizardItems($wizardItems, $parentObject) ;
    }

}

namespace TYPO3\CMS\Backend\Template {
    /**
     * A class taking care of the "outer" HTML of a module, especially
     * the doc header and other related parts.
     *
     * @internal This API is not yet carved in stone and may be adapted later.
     */
    class ModuleTemplate {
        const STATUS_ICON_ERROR = 3;
        const STATUS_ICON_WARNING = 2;
        const STATUS_ICON_NOTIFICATION = 1;
        const STATUS_ICON_OK = -1;

        /**
         * DocHeaderComponent
         *
         * @var DocHeaderComponent
         */
        protected $docHeaderComponent;
        /**
         * Javascript Code Array
         * Used for inline JS
         *
         * @var array
         */
        protected $javascriptCodeArray;
        /**
         * Expose the pageRenderer
         *
         * @var PageRenderer
         */
        protected $pageRenderer;
        /**
         * @var bool
         */
        protected $uiBlock;
        /**
         * TemplateRootPath
         *
         * @var string[]
         */
        protected $templateRootPaths;
        /**
         * PartialRootPath
         *
         * @var string[]
         */
        protected $partialRootPaths;
        /**
         * LayoutRootPath
         *
         * @var string[]
         */
        protected $layoutRootPaths;
        /**
         * Template name
         *
         * @var string
         */
        protected $templateFile;
        /**
         * Fluid Standalone View
         *
         * @var StandaloneView
         */
        protected $view;
        /**
         * Content String
         *
         * @var string
         */
        protected $content;
        /**
         * IconFactory Member
         *
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * Module ID
         *
         * @var string
         */
        protected $moduleId;
        /**
         * Module Name
         *
         * @var string
         */
        protected $moduleName;
        /**
         * Title Tag
         *
         * @var string
         */
        protected $title;
        /**
         * Body Tag
         *
         * @var string
         */
        protected $bodyTag;
        /**
         * Flash message queue
         *
         * @var \TYPO3\CMS\Core\Messaging\FlashMessageQueue
         */
        protected $flashMessageQueue;

        /**
         * Returns the current body tag
         *
         * @return string
         */
        public function getBodyTag() {}
        public function setBodyTag($bodyTag) {}
        /**
         * Gets the standalone view.
         *
         * @return StandaloneView
         */
        public function getView() {}
        public function setContent($content) {}
        public function setTitle($title) {}
        /**
         * Returns the IconFactory
         *
         * @return IconFactory
         */
        public function getIconFactory() {}
        /**
         * Class constructor
         * Sets up view and property objects
         *
         * @throws InvalidTemplateResourceException In case a template is invalid
         */
        public function __construct() {}
        /**
         * Loads all necessary Javascript Files
         */
        protected function loadJavaScripts() {}
        /**
         * Loads all necessary stylesheets
         */
        protected function loadStylesheets() {}
        /**
         * Sets mandatory parameters for the view (pageRenderer)
         */
        protected function setupPage() {}
        /**
         * Wrapper function for adding JS inline blocks
         */
        protected function setJavaScriptCodeArray() {}
        public function addJavaScriptCode($name = '', $code = '') {}
        /**
         * Get the DocHeader
         *
         * @return DocHeaderComponent
         */
        public function getDocHeaderComponent() {}
        /**
         * Returns the fully rendered view
         *
         * @return string
         */
        public function renderContent() {}
        /**
         * Get PageRenderer
         *
         * @return PageRenderer
         */
        public function getPageRenderer() {}
        public function setForm($formTag = '') {}
        public function setModuleId($moduleId) {}
        public function setModuleName($moduleName) {}
        public function registerModuleMenu($moduleMenuIdentifier) {}
        public function getDynamicTabMenu(array $menuItems, $domId, $defaultTabIndex = 1, $collapsible = false, $wrapContent = true, $storeLastActiveTab = true) {}
        public function loadJavascriptLib($lib) {}
        public function makeShortcutIcon($gvList, $setList, $modName, $motherModName = '', $displayName = '', $classes = 'btn btn-default btn-sm') {}
        public function makeShortcutUrl($gvList, $setList) {}
        /**
         * Returns the BE USER Object
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * Returns the LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
        public function icons($type) {}
        public function redirectUrls($thisLocation = '') {}
        public function header($text) {}
        public function addFlashMessage($messageBody, $messageTitle = '', $severity = AbstractMessage::OK, $storeInSession = true) {}
        public function setFlashMessageQueue($flashMessageQueue) {}
        /**
         * @return \TYPO3\CMS\Core\Messaging\FlashMessageQueue
         */
        protected function getFlashMessageQueue() {}
        /**
         * @return bool
         */
        public function isUiBlock() : bool {}
        public function setUiBlock(bool $uiBlock) {}
    }

    /**
     * TYPO3 Backend Template Class
     *
     * This class contains functions for starting and ending the HTML of backend modules
     * It also contains methods for outputting sections of content.
     * Further there are functions for making icons, links, setting form-field widths etc.
     * Color scheme and stylesheet definitions are also available here.
     * Finally this file includes the language class for TYPO3's backend.
     *
     * After this file $LANG and $TBE_TEMPLATE are global variables / instances of their respective classes.
     *
     * Please refer to Inside TYPO3 for a discussion of how to use this API.
     */
    class DocumentTemplate implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * This can be set to the HTML-code for a formtag.
         * Useful when you need a form to span the whole page; Inserted exactly after the body-tag.
         *
         * @var string
         */
        public $form;
        /**
         * Additional header code (eg. a JavaScript section) could be accommulated in this var. It will be directly outputted in the header.
         *
         * @var string
         */
        public $JScode;
        /**
         * Similar to $JScode but for use as array with associative keys to prevent double inclusion of JS code. a <script> tag is automatically wrapped around.
         *
         * @var array
         */
        public $JScodeArray;
        /**
         * Additional 'page-end' code could be accumulated in this var. It will be outputted at the end of page before </body> and some other internal page-end code.
         *
         * @var string
         */
        public $postCode;
        /**
         * HTML template with markers for module
         *
         * @var string
         */
        public $moduleTemplate;
        /**
         * The base file (not overlaid by TBE_STYLES) for the current module, useful for hooks when finding out which modules is rendered currently
         *
         * @var string
         */
        protected $moduleTemplateFilename;
        /**
         * Script ID
         *
         * @var string
         */
        public $scriptID;
        /**
         * Id which can be set for the body tag. Default value is based on script ID
         *
         * @var string
         */
        public $bodyTagId;
        /**
         * You can add additional attributes to the body-tag through this variable.
         *
         * @var string
         */
        public $bodyTagAdditions;
        /**
         * Additional CSS styles which will be added to the <style> section in the header
         * used as array with associative keys to prevent double inclusion of CSS code
         *
         * @var array
         */
        public $inDocStylesArray;
        /**
         * Filename of stylesheet
         *
         * @var string
         */
        public $styleSheetFile;
        /**
         * Filename of stylesheet #2 - linked to right after the $this->styleSheetFile script
         *
         * @var string
         */
        public $styleSheetFile2;
        /**
         * Filename of a post-stylesheet - included right after all inline styles.
         *
         * @var string
         */
        public $styleSheetFile_post;
        /**
         * Whether to use the X-UA-Compatible meta tag
         *
         * @var bool
         */
        protected $useCompatibilityTag;
        /**
         * X-Ua-Compatible version output in meta tag
         *
         * @var string
         */
        protected $xUaCompatibilityVersion;
        /**
         * Include these CSS directories from skins by default
         *
         * @var array
         */
        protected $stylesheetsSkins;
        /**
         * JavaScript files loaded for every page in the Backend
         *
         * @var array
         */
        protected $jsFiles;
        /**
         * JavaScript files loaded for every page in the Backend, but explicitly excluded from concatenation (useful for libraries etc.)
         *
         * @var array
         */
        protected $jsFilesNoConcatenation;
        /**
         * Indicates if a <div>-output section is open
         *
         * @var int
         * @internal will be removed in TYPO3 v9
         */
        public $sectionFlag;
        /**
         * (Default) Class for wrapping <DIV>-tag of page. Is set in class extensions.
         *
         * @var string
         */
        public $divClass;
        /**
         * @var string
         */
        public $pageHeaderBlock;
        /**
         * @var string
         */
        public $endOfPageJsBlock;
        /**
         * @var bool
         */
        public $hasDocheader;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;
        /**
         * Alternative template file
         *
         * @var string
         */
        protected $pageHeaderFooterTemplateFile;
        /**
         * Whether flashmessages should be rendered or not
         *
         * @var bool $showFlashMessages
         */
        public $showFlashMessages;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var MarkerBasedTemplateService
         */
        protected $templateService;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initializes the page renderer object
         */
        protected function initPageRenderer() {}
        public function makeShortcutIcon($gvList, $setList, $modName, $motherModName = '', $classes = '') {}
        public function makeShortcutUrl($gvList, $setList) {}
        public function formWidth($size = 48, $textarea = false, $styleOverride = '') {}
        public function redirectUrls($thisLocation = '') {}
        public function useCompatibilityTag($useCompatibilityTag = true) {}
        public function startPage($title) {}
        /**
         * Returns page end; This includes finishing form, div, body and html tags.
         *
         * @return string The HTML end of a page
         * @see startPage()
         */
        public function endPage() {}
        public function render($title, $content) {}
        /**
         * Creates the bodyTag.
         * You can add to the bodyTag by $this->bodyTagAdditions
         *
         * @return string HTML body tag
         */
        public function docBodyTagBegin() {}
        /**
         * Outputting document style
         *
         * @return string HTML style section/link tags
         */
        public function docStyle() {}
        public function addStyleSheet($key, $href, $title = '', $relation = 'stylesheet') {}
        public function addStyleSheetDirectory($path) {}
        public function insertStylesAndJS($content) {}
        /**
         * Returns an array of all stylesheet directories belonging to core and skins
         *
         * @return array Stylesheet directories
         */
        public function getSkinStylesheetDirectories() {}
        /**
         * Returns generator meta tag
         *
         * @return string <meta> tag with name "generator
         */
        public function generator() {}
        public function xUaCompatible($content = 'IE=8') {}
        public function getHtmlTemplate($filename) {}
        public function setModuleTemplate($filename) {}
        public function moduleBody($pageRecord = [ ], $buttons = [ ], $markerArray = [ ], $subpartArray = [ ]) {}
        /**
         * Get the default rendered FlashMessages from queue
         *
         * @return string
         */
        public function getFlashMessages() {}
        protected function getDocHeaderButtons($buttons) {}
        protected function getPagePath($pageRecord) {}
        protected function getPageInfo($pageRecord) {}
        /**
         * Retrieves configured favicon for backend (with fallback)
         *
         * @return string
         */
        protected function getBackendFavicon() {}
        protected function getUriForFileName($filename) {}
    }

}

namespace TYPO3\CMS\Backend\Template\Components {
    /**
     * Control used by various components
     */
    class AbstractControl {
        /**
         * HTML tag attribute for class
         *
         * @var string
         */
        protected $classes;
        /**
         * HTML tag attribute for title
         *
         * @var string
         */
        protected $title;
        /**
         * HTML tag attributes for data-*
         * Use key => value pairs
         *
         * @var array
         */
        protected $dataAttributes;
        /**
         * HTML tag attribute onClick
         * Outdated, use sparingly
         *
         * @var string
         */
        protected $onClick;

        /**
         * Get classes
         *
         * @return string
         */
        public function getClasses() {}
        /**
         * Get Title
         *
         * @return string
         */
        public function getTitle() {}
        /**
         * Get Data attributes
         *
         * @return array
         */
        public function getDataAttributes() {}
        /**
         * Get Onclick Attribute
         *
         * @return string
         */
        public function getOnClick() {}
        public function setClasses($classes) {}
        public function setTitle($title) {}
        public function setDataAttributes(array $dataAttributes) {}
        public function setOnClick($onClick) {}
    }

    /**
     * Bar holding the buttons
     */
    class ButtonBar {
        const BUTTON_POSITION_RIGHT = 'right';
        const BUTTON_POSITION_LEFT = 'left';

        /**
         * Internal array of all registered buttons
         *
         * @var array
         */
        protected $buttons;

        public function addButton(ButtonInterface $button, $buttonPosition = self::BUTTON_POSITION_LEFT, $buttonGroup = 1) {}
        public function makeButton($button) {}
        /**
         * Creates a new InputButton
         *
         * @return InputButton
         */
        public function makeInputButton() {}
        /**
         * Creates a new SplitButton
         *
         * @return SplitButton
         */
        public function makeSplitButton() {}
        /**
         * Creates a new LinkButton
         *
         * @return LinkButton
         */
        public function makeLinkButton() {}
        /**
         * Creates a new FullyRenderedButton
         *
         * @return FullyRenderedButton
         */
        public function makeFullyRenderedButton() {}
        /**
         * Creates a new ShortcutButton
         *
         * @return ShortcutButton
         */
        public function makeShortcutButton() {}
        /**
         * Creates a new HelpButton
         *
         * @return HelpButton
         */
        public function makeHelpButton() {}
        /**
         * Returns an associative array of all buttons in the form of
         * ButtonPosition > ButtonGroup > Button
         *
         * @return array
         */
        public function getButtons() {}
    }

    /**
     * MetaInformation
     */
    class MetaInformation {
        /**
         * The recordArray.
         * Typically this is a page record
         *
         * @var array
         */
        protected $recordArray;

        public function setRecordArray(array $recordArray) {}
        /**
         * Generate the page path for docHeader
         *
         * @return string The page path
         */
        public function getPath() {}
        /**
         * Setting page icon with context menu + uid for docheader
         *
         * @return string Record info
         */
        public function getRecordInformation() {}
        /**
         * Setting page icon
         *
         * @return string Record icon
         */
        public function getRecordInformationIcon() {}
        /**
         * Setting page title
         *
         * @return string Record title, already htmlspecialchar()'ed
         */
        public function getRecordInformationTitle() {}
        /**
         * Setting page uid
         *
         * @return int|null Record uid
         */
        public function getRecordInformationUid() {}
        /**
         * Setting page array
         *
         * @return array Record info
         */
        protected function getRecordInformations() {}
        /**
         * Get LanguageService Object
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Get the Backend User Object
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * DocHeader component class
     */
    class DocHeaderComponent {
        /**
         * MenuRegistry Object
         *
         * @var MenuRegistry
         */
        protected $menuRegistry;
        /**
         * Meta information
         *
         * @var MetaInformation
         */
        protected $metaInformation;
        /**
         * Registry Container for Buttons
         *
         * @var ButtonBar
         */
        protected $buttonBar;
        /**
         * @var bool
         */
        protected $enabled;

        /**
         * Sets up buttonBar and MenuRegistry
         */
        public function __construct() {}
        public function setMetaInformation(array $metaInformation) {}
        /**
         * Get moduleMenuRegistry
         *
         * @return MenuRegistry
         */
        public function getMenuRegistry() {}
        /**
         * Get ButtonBar
         *
         * @return ButtonBar
         */
        public function getButtonBar() {}
        /**
         * Determines whether this components is enabled.
         *
         * @return bool
         */
        public function isEnabled() {}
        /**
         * Sets the enabled property to TRUE.
         */
        public function enable() {}
        /**
         * Sets the enabled property to FALSE (disabled).
         */
        public function disable() {}
        /**
         * Returns the abstract content of the docHeader as an array
         *
         * @return array
         */
        public function docHeaderContent() {}
    }

    /**
     * MenuRegistry
     */
    class MenuRegistry {
        /**
         * Internal array that stores all registered menus
         *
         * @var array
         */
        protected $menus;

        public function addMenu(Menu $menu) {}
        /**
         * For Code Completion
         *
         * @var int $key
         * @var Menu $menu
         */
        public function getMenus() {}
        /**
         * MenuFactory method
         *
         * @return Menu
         */
        public function makeMenu() {}
    }

}

namespace TYPO3\CMS\Backend\Template\Components\Buttons {
    /**
     * InputButton
     *
     * This button type renders a HTML tag <button> and takes the HTML attributes
     * name and value as additional attributes to those defined in AbstractButton.
     *
     * Since we no longer want to have any <input type="submit" /> in the TYPO3 core
     * you should use this button type to send forms
     *
     * EXAMPLE USAGE TO ADD A BUTTON TO THE FIRST BUTTON GROUP IN THE LEFT BAR:
     *
     * $buttonBar = $this->moduleTemplate->getDocHeaderComponent()->getButtonBar();
     * $saveButton = $buttonBar->makeInputButton()
     *      ->setName('save')
     *      ->setValue('1')
     *      ->setIcon($this->iconFactory->getIcon('actions-document-save', Icon::SIZE_SMALL))
     *      ->setTitle('Save');
     * $buttonBar->addButton($saveButton, ButtonBar::BUTTON_POSITION_LEFT, 1);
     */
    class InputButton extends \typo3\cms\backend\template\components\buttons\abstractbutton implements \typo3\cms\backend\template\components\buttons\buttoninterface {
        /**
         * Name Attribute of the button
         *
         * @var string
         */
        protected $name;
        /**
         * Value attribute of the button
         *
         * @var string
         */
        protected $value;
        /**
         * ID of the referenced <form> tag
         *
         * @var string
         */
        protected $form;

        /**
         * Get name
         *
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * Get value
         *
         * @return string
         */
        public function getValue() {}
        public function setValue($value) {}
        /**
         * @return string
         */
        public function getForm() {}
        public function setForm($form) {}
        /**
         * Validates the current button
         *
         * @return bool
         */
        public function isValid() {}
        /**
         * Renders the markup of the button
         *
         * @return string
         */
        public function render() {}
        /**
         * Magic method so Fluid can access a button via {button}
         *
         * @return string
         */
        public function __toString() {}
    }

    /**
     * AbstractButton
     */
    class AbstractButton extends \typo3\cms\backend\template\components\abstractcontrol implements \typo3\cms\backend\template\components\buttons\buttoninterface {
        /**
         * Icon object
         *
         * @var Icon
         */
        protected $icon;
        /**
         * ButtonType
         *
         * @var string
         */
        protected $type;
        /**
         * Defines whether to show the title as a label within the button
         *
         * @var bool
         */
        protected $showLabelText;

        /**
         * Show Label text
         *
         * @return bool
         */
        public function getShowLabelText() {}
        public function setShowLabelText($showLabelText) {}
        /**
         * Get icon
         *
         * @return Icon
         */
        public function getIcon() {}
        /**
         * Get type
         *
         * @return string
         */
        public function getType() {}
        public function setIcon(Icon $icon) {}
        /**
         * Implementation from ButtonInterface
         * This object is an abstract, so no implementation is necessary
         *
         * @return bool
         */
        public function isValid() {}
        /**
         * Implementation from ButtonInterface
         * This object is an abstract, so no implementation is necessary
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Implementation from ButtonInterface
         * This object is an abstract, so no implementation is necessary
         *
         * @return string
         */
        public function render() {}
    }

    /**
     * LinkButton
     *
     * This button type renders a regular anchor tag with TYPO3s way to render a
     * button control.
     *
     * EXAMPLE USAGE TO ADD A BUTTON TO THE FIRST BUTTON GROUP IN THE LEFT BAR:
     *
     * $buttonBar = $this->moduleTemplate->getDocHeaderComponent()->getButtonBar();
     * $saveButton = $buttonBar->makeLinkButton()
     *      ->setHref('#')
     *      ->setDataAttributes([
     *          'foo' => 'bar'
     *      ])
     *      ->setIcon($this->iconFactory->getIcon('actions-document-save', Icon::SIZE_SMALL))
     *      ->setTitle('Save');
     * $buttonBar->addButton($saveButton, ButtonBar::BUTTON_POSITION_LEFT, 1);
     */
    class LinkButton extends \typo3\cms\backend\template\components\buttons\abstractbutton implements \typo3\cms\backend\template\components\buttons\buttoninterface {
        /**
         * HREF attribute of the link
         *
         * @var string
         */
        protected $href;

        /**
         * Get href
         *
         * @return string
         */
        public function getHref() {}
        public function setHref($href) {}
        /**
         * Validates the current button
         *
         * @return bool
         */
        public function isValid() {}
        /**
         * Renders the markup for the button
         *
         * @return string
         */
        public function render() {}
        /**
         * Magic method so Fluid can access a button via {button}
         *
         * @return string
         */
        public function __toString() {}
    }

    /**
     * FullyRenderedButton
     *
     * This button type is an intermediate solution for buttons that are rendered
     * by methods from TYPO3 itself, like the CSH buttons or Bookmark buttons.
     *
     * There should be no need to use them, so do yourself a favour and don't.
     *
     * EXAMPLE USAGE TO ADD A BUTTON TO THE FIRST BUTTON GROUP IN THE LEFT BAR:
     *
     * $buttonBar = $this->moduleTemplate->getDocHeaderComponent()->getButtonBar();
     * $myButton = $buttonBar->makeFullyRenderedButton()
     *      ->setHtmlSource('<span class="i-should-not-be-using-this>Foo</span>');
     * $buttonBar->addButton($myButton, ButtonBar::BUTTON_POSITION_LEFT, 1);
     */
    class FullyRenderedButton implements \typo3\cms\backend\template\components\buttons\buttoninterface {
        /**
         * The full HTML source of the rendered button.
         * This source will be passed through to the frontend as is,
         * so keep htmlspecialchars() in mind
         *
         * @var string
         */
        protected $htmlSource;

        /**
         * Gets the HTML Source of the button
         *
         * @return string
         */
        public function getHtmlSource() {}
        public function setHtmlSource($htmlSource) {}
        /**
         * Gets the type of the button
         *
         * @return string
         */
        public function getType() {}
        /**
         * Validator for a FullyRenderedButton
         *
         * @return bool
         */
        public function isValid() {}
        /**
         * Renders the button
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Renders the button
         *
         * @return string
         */
        public function render() {}
    }

    /**
     * SplitButton
     *
     * This button type renders a bootstrap split button.
     * It takes multiple button objects as parameters
     *
     * EXAMPLE USAGE TO ADD A SPLIT BUTTON TO THE FIRST BUTTON GROUP IN THE LEFT BAR:
     *
     * $buttonBar = $this->moduleTemplate->getDocHeaderComponent()->getButtonBar();
     *
     * $saveButton = $buttonBar->makeInputButton()
     *      ->setName('save')
     *      ->setValue('1')
     *      ->setIcon($this->iconFactory->getIcon('actions-document-save', Icon::SIZE_SMALL))
     *      ->setTitle('Save');
     *
     * $saveAndCloseButton = $buttonBar->makeInputButton()
     *      ->setName('save_and_close')
     *      ->setValue('1')
     *      ->setTitle('Save and close')
     *      ->setIcon($this->iconFactory->getIcon('actions-document-save-close', Icon::SIZE_SMALL));
     *
     * $saveAndShowPageButton = $buttonBar->makeInputButton()
     *      ->setName('save_and_show')
     *      ->setValue('1')
     *      ->setTitle('Save and show')
     *      ->setIcon($this->iconFactory->getIcon('actions-document-save-view', Icon::SIZE_SMALL));
     *
     * $splitButtonElement = $buttonBar->makeSplitButton()
     *      ->addItem($saveButton, TRUE)
     *      ->addItem($saveAndCloseButton)
     *      ->addItem($saveAndShowPageButton);
     */
    class SplitButton extends \typo3\cms\backend\template\components\buttons\abstractbutton implements \typo3\cms\backend\template\components\buttons\buttoninterface {
        /**
         * Internal var that determines whether the split button has received any primary
         * actions yet
         *
         * @var bool
         */
        protected $containsPrimaryAction;
        /**
         * Internal array of items in the split button
         *
         * @var array
         */
        protected $items;

        public function addItem(AbstractButton $item, $primaryAction = false) {}
        /**
         * Returns the current button
         *
         * @return array
         */
        public function getButton() {}
        /**
         * Validates the current button
         *
         *
         * @return bool
         */
        public function isValid() {}
        /** @var InputButton $option */
        public function render() {}
        /**
         * Magic method so Fluid can access a button via {button}
         *
         * @return string
         */
        public function __toString() {}
    }


    /**
     * Interface for buttons
     */
    interface PositionInterface {
        /**
         * Gets the button position.
         *
         * @return string
         */
        function getPosition() ;
        /**
         * Gets the button group.
         *
         * @return int
         */
        function getGroup() ;
    }

    /**
     * Interface for buttons
     */
    interface ButtonInterface {
        /**
         * Validates all set parameters of a button.
         *
         * @return bool
         */
        function isValid() ;
        /**
         * Returns the fully qualified class name of the button as a string
         *
         * @return string
         */
        function getType() ;
        /**
         * RenderMethod of a button if accessed as string from fluid
         *
         * @return string
         */
        function __toString() ;
        /**
         * Renders the markup for the button
         *
         * @return string
         */
        function render() ;
    }

}

namespace TYPO3\CMS\Backend\Template\Components\Buttons\Action {
    /**
     * HelpButton
     *
     * Renders a help button in the DocHeader which will be rendered
     * to the right position using button group "99".
     *
     * EXAMPLE USAGE TO ADD A HELP BUTTON:
     *
     * $buttonBar = $this->moduleTemplate->getDocHeaderComponent()->getButtonBar();
     * $myButton = $buttonBar->makeHelpButton()
     *       ->setModuleName('xMOD_csh_corebe')
     *       ->setFieldName('list_module');
     * $buttonBar->addButton($myButton);
     */
    class HelpButton implements \typo3\cms\backend\template\components\buttons\positioninterface, \typo3\cms\backend\template\components\buttons\buttoninterface {
        /**
         * @var string
         */
        protected $moduleName;
        /**
         * @var string
         */
        protected $fieldName;

        /**
         * Gets the name of the module.
         *
         * @return string
         */
        public function getModuleName() {}
        public function setModuleName($moduleName) {}
        /**
         * Gets the name of the field.
         *
         * @return string
         */
        public function getFieldName() {}
        public function setFieldName($fieldName) {}
        /**
         * Gets the button position.
         *
         * @return string
         */
        public function getPosition() {}
        /**
         * Gets the button group.
         *
         * @return int
         */
        public function getGroup() {}
        /**
         * Gets the type of the button
         *
         * @return string
         */
        public function getType() {}
        /**
         * Determines whether the button shall be rendered.
         * Depends on the defined module and field name.
         *
         * @return bool
         */
        public function isValid() {}
        /**
         * Renders the button
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Renders the button
         *
         * @return string
         */
        public function render() {}
    }

    /**
     * ShortcutButton
     *
     * Renders a shortcut button in the DocHeader which will be rendered
     * to the right position using button group "91".
     *
     * EXAMPLE USAGE TO ADD A SHORTCUT BUTTON:
     *
     * $buttonBar = $this->moduleTemplate->getDocHeaderComponent()->getButtonBar();
     * $myButton = $buttonBar->makeShortcutButton()
     *       ->setModuleName('my_info');
     * $buttonBar->addButton($myButton);
     */
    class ShortcutButton implements \typo3\cms\backend\template\components\buttons\positioninterface, \typo3\cms\backend\template\components\buttons\buttoninterface {
        /**
         * @var string
         */
        protected $moduleName;
        /**
         * @var string
         */
        protected $displayName;
        /**
         * @var array
         */
        protected $setVariables;
        /**
         * @var array
         */
        protected $getVariables;
        /**
         * @var ControllerContext
         */
        protected $controllerContext;

        /**
         * Gets the name of the module.
         *
         * @return string
         */
        public function getModuleName() {}
        public function setModuleName($moduleName) {}
        /**
         * Gets the display name of the module.
         *
         * @return string
         */
        public function getDisplayName() {}
        public function setDisplayName($displayName) {}
        /**
         * Gets the SET variables.
         *
         * @return array
         */
        public function getSetVariables() {}
        public function setSetVariables(array $setVariables) {}
        /**
         * Gets the GET variables.
         *
         * @return array
         */
        public function getGetVariables() {}
        public function setGetVariables(array $getVariables) {}
        /**
         * Gets the button position.
         *
         * @return string
         */
        public function getPosition() {}
        /**
         * Gets the button group.
         *
         * @return int
         */
        public function getGroup() {}
        /**
         * Gets the type of the button
         *
         * @return string
         */
        public function getType() {}
        /**
         * Determines whether the button shall be rendered.
         * Depends on the backend user permission to create
         * shortcuts and the defined module name.
         *
         * @return bool
         */
        public function isValid() {}
        /**
         * Renders the button
         *
         * @return string
         */
        public function __toString() {}
        /** @var ModuleTemplate $moduleTemplate */
        public function render() {}
        /**
         * Pre-processes class member values.
         */
        protected function preProcess() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Backend\Template\Components\Menu {
    /**
     * Menu
     */
    class Menu {
        /**
         * Menu Identifier
         *
         * @var string
         */
        protected $identifier;
        /**
         * Label of the Menu (useful for Selectbox menus)
         *
         * @var string
         */
        protected $label;
        /**
         * Container for menuitems
         *
         * @var array
         */
        protected $menuItems;

        /**
         * Get the label
         *
         * @return string
         */
        public function getLabel() {}
        public function setLabel($label) {}
        public function setIdentifier($identifier) {}
        public function addMenuItem(MenuItem $menuItem) {}
        /**
         * Get menu items
         *
         * @return array
         */
        public function getMenuItems() {}
        /**
         * Get identifier
         *
         * @return string
         */
        public function getIdentifier() {}
        /**
         * MenuItem Factory Method
         *
         * @return MenuItem
         */
        public function makeMenuItem() {}
        public function isValid(Menu $menu) {}
    }

    /**
     * MenuItem
     */
    class MenuItem extends \typo3\cms\backend\template\components\abstractcontrol {
        /**
         * Sets the href of the menuItem
         *
         * @var string
         */
        protected $href;
        /**
         * Sets the active state of the menuItem
         *
         * @var bool
         */
        protected $active;

        public function setHref($href) {}
        public function setActive($active) {}
        /**
         * Get href
         *
         * @return string
         */
        public function getHref() {}
        /**
         * Check if is active
         *
         * @return bool
         */
        public function isActive() {}
        public function isValid(MenuItem $menuItem) {}
    }

}

namespace TYPO3\CMS\Backend\Provider {
    /**
     * This Provider adds Backend Layouts based on PageTsConfig
     *
     * = Example =
     * mod {
     * 	web_layout {
     * 		BackendLayouts {
     * 			example {
     * 				title = Example
     * 				config {
     * 					backend_layout {
     * 						colCount = 1
     * 						rowCount = 2
     * 						rows {
     * 							1 {
     * 								columns {
     * 									1 {
     * 										name = LLL:EXT:frontend/Resources/Private/Language/locallang_ttc.xlf:colPos.I.3
     * 										colPos = 3
     * 										colspan = 1
     * 									}
     * 								}
     * 							}
     * 							2 {
     * 								columns {
     * 									1 {
     * 										name = Main
     * 										colPos = 0
     * 										colspan = 1
     * 									}
     * 								}
     * 							}
     * 						}
     * 					}
     * 				}
     * 				icon = EXT:example_extension/Resources/Public/Images/BackendLayouts/default.gif
     * 			}
     * 		}
     * 	}
     * }
     */
    class PageTsBackendLayoutDataProvider implements \typo3\cms\backend\view\backendlayout\dataproviderinterface {
        /**
         * Internal Backend Layout stack
         *
         * @var array
         */
        protected $backendLayouts;
        /**
         * PageTs Config
         *
         * @var array
         */
        protected $pageTsConfig;
        /**
         * PageId
         *
         * @var int
         */
        protected $pageId;

        protected function setPageTsConfig(array $pageTsConfig) {}
        /**
         * Get PageTsConfig
         *
         * @return array
         */
        protected function getPageTsConfig() {}
        protected function setPageId($pageId) {}
        /**
         * Get PageId
         *
         * @return int
         */
        protected function getPageId() {}
        protected function generatePageTsConfig($dataProviderContext = null) {}
        protected function generateBackendLayouts($dataProviderContext = null) {}
        protected function generateBackendLayoutFromTsConfig($identifier, $data) {}
        protected function attachBackendLayout($backendLayout = null) {}
        public function addBackendLayouts(DataProviderContext $dataProviderContext, BackendLayoutCollection $backendLayoutCollection) {}
        public function getBackendLayout($identifier, $pageId) {}
        protected function createBackendLayout(array $data) {}
        protected function getIconPath($icon) {}
    }

}

namespace TYPO3\CMS\Backend\ViewHelpers {
    /**
     * Create internal link within backend app
     */
    class ModuleLinkViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) : string {}
    }

    /**
     * Render the avatar img tag for a given backend user
     */
    class AvatarViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Backend\ContextMenu {
    /**
     * Class for generating the click menu
     * @internal
     */
    class ContextMenu {
        /**
         * Click menu item providers shipped with EXT:backend
         *
         * @var array
         */
        protected $itemProviders;

/** @var $provider \TYPO3\CMS\Backend\ContextMenu\ItemProviders\ProviderInterface */
        public function getItems(/** @var $provider \TYPO3\CMS\Backend\ContextMenu\ItemProviders\ProviderInterface */
string $table, /** @var $provider \TYPO3\CMS\Backend\ContextMenu\ItemProviders\ProviderInterface */
string $identifier, /** @var $provider \TYPO3\CMS\Backend\ContextMenu\ItemProviders\ProviderInterface */
string $context = '') : array {}
        protected function getAvailableProviders(string $table, string $identifier, string $context) : array {}
        protected function cleanItems(array $items) : array {}
    }

}

namespace TYPO3\CMS\Backend\ContextMenu\ItemProviders {
    /**
     * Context menu item provider for pages table
     */
    class PageProvider extends \typo3\cms\backend\contextmenu\itemproviders\recordprovider {
        /**
         * @var string
         */
        protected $table;
        /**
         * @var array
         */
        protected $itemsConfiguration;

        /**
         * Checks if the provider can add items to the menu
         *
         * @return bool
         */
        public function canHandle() : bool {}
        /**
         * @return int
         */
        public function getPriority() : int {}
        protected function canRender(string $itemName, string $type) : bool {}
        /**
         * Saves calculated permissions for a page to speed things up
         */
        protected function initPermissions() {}
        /**
         * Checks if the user may create pages below the given page
         *
         * @return bool
         */
        protected function canBeCreated() : bool {}
        /**
         * Checks if the user has editing rights
         *
         * @return bool
         */
        protected function canBeEdited() : bool {}
        /**
         * Check if a page is locked
         *
         * @return bool
         */
        protected function isRecordLocked() : bool {}
        /**
         * Checks if the page is allowed to can be cut
         *
         * @return bool
         */
        protected function canBeCut() : bool {}
        /**
         * Checks if the page is allowed to be copied
         *
         * @return bool
         */
        protected function canBeCopied() : bool {}
        /**
         * Checks if something can be pasted into the node
         *
         * @return bool
         */
        protected function canBePastedInto() : bool {}
        /**
         * Checks if something can be pasted after the node
         *
         * @return bool
         */
        protected function canBePastedAfter() : bool {}
        /**
         * Check if sub pages of given page can be sorted
         *
         * @return bool
         */
        protected function canBeSorted() : bool {}
        /**
         * Checks if the page is allowed to be removed
         *
         * @return bool
         */
        protected function canBeRemoved() : bool {}
        /**
         * Checks if the page is allowed to be viewed in frontend
         *
         * @return bool
         */
        protected function canBeViewed() : bool {}
        /**
         * Checks if the page is allowed to show info
         *
         * @return bool
         */
        protected function canShowInfo() : bool {}
        /**
         * Checks if the user has clear cache rights
         *
         * @return bool
         */
        protected function canClearCache() : bool {}
        /**
         * Determines whether this node is deleted.
         *
         * @return bool
         */
        protected function isDeleted() : bool {}
        /**
         * Returns true if current record is a root page
         *
         * @return bool
         */
        protected function isRoot() {}
        /**
         * Returns true if current record is a web mount
         *
         * @return bool
         */
        protected function isWebMount() {}
        protected function getAdditionalAttributes(string $itemName) : array {}
        /**
         * @return int
         */
        protected function getPreviewPid() : int {}
    }

    /**
     * Class responsible for providing click menu items for db records which don't have custom provider (as e.g. pages)
     */
    class RecordProvider extends \typo3\cms\backend\contextmenu\itemproviders\abstractprovider {
        /**
         * Database record
         *
         * @var array
         */
        protected $record;
        /**
         * Database record of the page $this->record is placed on
         *
         * @var array
         */
        protected $pageRecord;
        /**
         * Local cache for the result of BackendUserAuthentication::calcPerms()
         *
         * @var int
         */
        protected $pagePermissions;
        /**
         * @var array
         */
        protected $itemsConfiguration;

        /**
         * Whether this provider should kick in
         *
         * @return bool
         */
        public function canHandle() : bool {}
        /**
         * Initialize db record
         */
        protected function initialize() {}
        /**
         * Priority is set to lower then default value, in order to skip this provider if there is less generic provider available.
         *
         * @return int
         */
        public function getPriority() : int {}
        public function addItems(array $items) : array {}
        protected function canRender(string $itemName, string $type) : bool {}
        /**
         * Saves calculated permissions for a page containing given record, to speed things up
         */
        protected function initPermissions() {}
        protected function hasPagePermission(int $permission) : bool {}
        protected function getAdditionalAttributes(string $itemName) : array {}
        /**
         * Additional attributes for the 'view' item
         *
         * @return array
         */
        protected function getViewAdditionalAttributes() : array {}
        protected function getPasteAdditionalAttributes(string $type) : array {}
        /**
         * Additional data for a "delete" action (confirmation modal title and message)
         *
         * @return array
         */
        protected function getDeleteAdditionalAttributes() : array {}
        /**
         * Returns id of the Page used for preview
         *
         * @return int
         */
        protected function getPreviewPid() : int {}
        /**
         * Returns the view link
         *
         * @return string
         */
        protected function getViewLink() : string {}
        /**
         * Checks if the page is allowed to show info
         *
         * @return bool
         */
        protected function canShowInfo() : bool {}
        /**
         * Checks if the page is allowed to show info
         *
         * @return bool
         */
        protected function canShowHistory() : bool {}
        /**
         * Checks if the record can be previewed in frontend
         *
         * @return bool
         */
        protected function canBeViewed() : bool {}
        /**
         * Whether a record can be edited
         *
         * @return bool
         */
        protected function canBeEdited() : bool {}
        /**
         * Checks if the user has the right to delete the page
         *
         * @return bool
         */
        protected function canBeDeleted() : bool {}
        /**
         * Returns true if current record can be unhidden/enabled
         *
         * @return bool
         */
        protected function canBeEnabled() : bool {}
        /**
         * Returns true if current record can be hidden
         *
         * @return bool
         */
        protected function canBeDisabled() : bool {}
        /**
         * Returns true new content element wizard can be shown
         *
         * @return bool
         */
        protected function canOpenNewCEWizard() : bool {}
        /**
         * @return bool
         */
        protected function canOpenListModule() : bool {}
        /**
         * @return bool
         */
        protected function canBeCopied() : bool {}
        /**
         * @return bool
         */
        protected function canBeCut() : bool {}
        /**
         * Paste after is only shown for records from the same table (comparing record in clipboard and record clicked)
         *
         * @return bool
         */
        protected function canBePastedAfter() : bool {}
        protected function hasDisableColumnWithValue(int $value) : bool {}
        /**
         * Record is locked if page is locked or page is not locked but record is
         *
         * @return bool
         */
        protected function isRecordLocked() : bool {}
        /**
         * Returns true is a current record is a delete placeholder
         *
         * @return bool
         */
        protected function isDeletePlaceholder() : bool {}
        protected function isRecordInClipboard(string $mode = '') : bool {}
        /**
         * Returns true is a record ia a translation
         *
         * @return bool
         */
        protected function isRecordATranslation() : bool {}
        /**
         * @return string
         */
        protected function getIdentifier() : string {}
    }

    /**
     * Abstract provider is a base class for context menu item providers
     */
    class AbstractProvider implements \typo3\cms\backend\contextmenu\itemproviders\providerinterface {
        /**
         * Language Service property. Used to access localized labels
         *
         * @var LanguageService
         */
        protected $languageService;
        /**
         * @var BackendUserAuthentication
         */
        protected $backendUser;
        /**
         * @var \TYPO3\CMS\Backend\Clipboard\Clipboard
         */
        protected $clipboard;
        /**
         * Array of items the class is providing
         *
         * @var array
         */
        protected $itemsConfiguration;
        /**
         * Click menu items disabled by TSConfig
         *
         * @var array
         */
        protected $disabledItems;
        /**
         * Current table name
         *
         * @var string
         */
        protected $table;
        /**
         * @var string clicked record identifier (usually uid or file combined identifier)
         */
        protected $identifier;
        /**
         * Context - from where the click menu was triggered (e.g. 'tree')
         *
         * @var string
         */
        protected $context;

        public function __construct(string $table, string $identifier, string $context = '') {}
        /**
         * Provider initialization, heavy stuff
         */
        protected function initialize() {}
        /**
         * Returns the provider priority which is used for determining the order in which providers are adding items
         * to the result array. Highest priority means provider is evaluated first.
         *
         * @return int
         */
        public function getPriority() : int {}
        /**
         * Whether this provider can handle given request (usually a check based on table, uid and context)
         *
         * @return bool
         */
        public function canHandle() : bool {}
        /**
         * Initialize clipboard object - necessary for all copy/cut/paste operations
         */
        protected function initClipboard() {}
        /**
         * Fills $this->disabledItems with the values from TSConfig.
         * Disabled items can be set separately for each context.
         */
        protected function initDisabledItems() {}
        public function addItems(array $items) : array {}
        protected function prepareItems(array $itemsConfiguration) : array {}
        protected function getAdditionalAttributes(string $itemName) : array {}
        protected function canRender(string $itemName, string $type) : bool {}
        /**
         * Returns a clicked record identifier
         *
         * @return string
         */
        protected function getIdentifier() : string {}
    }


    /**
     * Interface for context menu items providers
     */
    interface ProviderInterface {
        function addItems(array $items) : array ;
        /**
         * Returns the priority of the provider. Higher priority value means provider is executed first
         *
         * @return int
         */
        function getPriority() : int ;
        /**
         * Checks if the provider can add items to the menu
         *
         * @return bool
         */
        function canHandle() : bool ;
    }

}

namespace TYPO3\CMS\Backend\Backend\ToolbarItems {
    /**
     * Help toolbar item
     */
    class HelpToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        /**
         * @var \SplObjectStorage<BackendModule>
         */
        protected $helpModuleMenu;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Users see this if a module is available
         *
         * @return bool TRUE
         */
        public function checkAccess() {}
        /**
         * Render help icon
         *
         * @return string toolbar item for the help icon
         */
        public function getItem() {}
        /**
         * Render drop down
         *
         * @return string
         */
        public function getDropDown() {}
        /**
         * No additional attributes needed.
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has a drop down
         *
         * @return bool
         */
        public function hasDropDown() {}
        /**
         * Position relative to others
         *
         * @return int
         */
        public function getIndex() {}
        protected function getFluidTemplateObject(string $filename) : StandaloneView {}
    }

    /**
     * Adds backend live search to the toolbar by adding JavaScript and adding an input search field
     */
    class LiveSearchToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        /**
         * Loads the needed JavaScript file, ands includes it to the page renderer
         */
        public function __construct() {}
        /**
         * Checks whether the user has access to this toolbar item,
         * only allowed when the list module is available.
         * Live search is heavily dependent on the list module and only available when that module is.
         *
         * @return bool TRUE if user has access, FALSE if not
         */
        public function checkAccess() {}
        /**
         * Render search field
         *
         * @return string Live search form HTML
         */
        public function getItem() {}
        /**
         * This item needs to additional attributes
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has no drop down
         *
         * @return bool
         */
        public function hasDropDown() {}
        /**
         * No drop down here
         *
         * @return string
         */
        public function getDropDown() {}
        /**
         * Position relative to others, live search should be very right
         *
         * @return int
         */
        public function getIndex() {}
        /**
         * Returns current PageRenderer
         *
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
        protected function getFluidTemplateObject(string $filename) : StandaloneView {}
    }

    /**
     * Render cache clearing toolbar item
     * Adds a dropdown if there are more than one item to clear (usually for admins to render the flush all caches)
     *
     * The dropdown items can be extended via a hook named "cacheActions".
     */
    class ClearCacheToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        /**
         * @var array
         */
        protected $cacheActions;
        /**
         * @var array
         */
        protected $optionValues;

        /**
         * @throws \UnexpectedValueException
         */
        public function __construct() {}
        /**
         * Checks whether the user has access to this toolbar item
         *
         * @return bool TRUE if user has access, FALSE if not
         */
        public function checkAccess() {}
        /**
         * Render clear cache icon, based on the option if there is more than one icon or just one.
         *
         * @return string Icon HTML
         */
        public function getItem() {}
        /**
         * Render drop down
         *
         * @return string Drop down HTML
         */
        public function getDropDown() {}
        /**
         * No additional attributes needed.
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has a drop down if there is more than one cache action available for the current Backend user.
         *
         * @return bool
         */
        public function hasDropDown() {}
        /**
         * Position relative to others
         *
         * @return int
         */
        public function getIndex() {}
        /**
         * Returns the current BE user.
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
        protected function getFluidTemplateObject(string $filename) : StandaloneView {}
    }

    /**
     * User toolbar item
     */
    class UserToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        /**
         * Item is always enabled
         *
         * @return bool TRUE
         */
        public function checkAccess() {}
        /**
         * Render username and an icon
         *
         * @return string HTML
         */
        public function getItem() {}
        /**
         * Render drop down
         *
         * @return string HTML
         */
        public function getDropDown() {}
        /**
         * Returns an additional class if user is in "switch user" mode
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has a drop down
         *
         * @return bool
         */
        public function hasDropDown() {}
        /**
         * Position relative to others
         *
         * @return int
         */
        public function getIndex() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        protected function getFluidTemplateObject(string $filename) : StandaloneView {}
    }

    /**
     * Render system info toolbar item
     */
    class SystemInformationToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        /**
         * Number displayed as badge on the dropdown trigger
         *
         * @var int
         */
        protected $totalCount;
        /**
         * Holds the highest severity
         *
         * @var InformationStatus
         */
        protected $highestSeverity;
        /**
         * The CSS class for the badge
         *
         * @var string
         */
        protected $severityBadgeClass;
        /**
         * @var array
         */
        protected $systemInformation;
        /**
         * @var array
         */
        protected $systemMessages;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * @var int
         */
        protected $maximumCountInBadge;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Collect the information for the menu
         */
        protected function collectInformation() {}
        public function renderMenuAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Gets the PHP version
         */
        protected function getPhpVersion() {}
        /**
         * Get the database info
         */
        protected function getDatabase() {}
        /**
         * Gets the application context
         */
        protected function getApplicationContext() {}
        /**
         * Adds the information if the Composer mode is enabled or disabled to the displayed system information
         */
        protected function getComposerMode() {}
        /**
         * Gets the current GIT revision and branch
         */
        protected function getGitRevision() {}
        /**
         * Gets the system kernel and version
         */
        protected function getOperatingSystem() {}
        /**
         * Gets the webserver software
         */
        protected function getWebServer() {}
        /**
         * Gets the TYPO3 version
         */
        protected function getTypo3Version() {}
        /**
         * Emits the "getSystemInformation" signal
         */
        protected function emitGetSystemInformation() {}
        /**
         * Emits the "loadMessages" signal
         */
        protected function emitLoadMessages() {}
/** @var InformationStatus $messageSeverity */
        public function addSystemMessage(/** @var InformationStatus $messageSeverity */
$text, /** @var InformationStatus $messageSeverity */
$status = InformationStatus::STATUS_OK, /** @var InformationStatus $messageSeverity */
$count = 0, /** @var InformationStatus $messageSeverity */
$module = '', /** @var InformationStatus $messageSeverity */
$params = '') {}
        public function addSystemInformation($title, $value, $iconIdentifier, $status = InformationStatus::STATUS_NOTICE) {}
        /**
         * Checks whether the user has access to this toolbar item
         *
         * @return bool TRUE if user has access, FALSE if not
         */
        public function checkAccess() {}
        /**
         * Render system information dropdown
         *
         * @return string Icon HTML
         */
        public function getItem() {}
        /**
         * Render drop down
         *
         * @return string Drop down HTML
         */
        public function getDropDown() {}
        /**
         * No additional attributes needed.
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has a drop down
         *
         * @return bool
         */
        public function hasDropDown() {}
        /**
         * Position relative to others
         *
         * @return int
         */
        public function getIndex() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * Returns current PageRenderer
         *
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        protected function getFluidTemplateObject(string $filename) : StandaloneView {}
    }

    /**
     * Class to render the shortcut menu
     */
    class ShortcutToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        const SUPERGLOBAL_GROUP = -100;

        /**
         * @var string
         */
        public $perms_clause;
        /**
         * @var array
         */
        public $fieldArray;
        /**
         * All available shortcuts
         *
         * @var array
         */
        protected $shortcuts;
        /**
         * @var array
         */
        protected $shortcutGroups;
        /**
         * Labels of all groups.
         * If value is 1, the system will try to find a label in the locallang array.
         *
         * @var array
         */
        protected $groupLabels;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var ModuleLoader
         */
        protected $moduleLoader;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Checks whether the user has access to this toolbar item
         *
         * @return bool TRUE if user has access, FALSE if not
         */
        public function checkAccess() {}
        /**
         * Render shortcut icon
         *
         * @return string HTML
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\InvalidExtensionNameException
         * @throws \InvalidArgumentException
         */
        public function getItem() {}
        /**
         * Render drop down content
         *
         * @return string HTML
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\InvalidExtensionNameException
         * @throws \InvalidArgumentException
         */
        public function getDropDown() {}
        public function menuAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * This toolbar item needs no additional attributes
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has a drop down
         *
         * @return bool
         */
        public function hasDropDown() {}
        /**
         * Retrieves the shortcuts for the current user
         *
         * @return array Array of shortcuts
         */
        protected function initShortcuts() {}
/** @var \TYPO3\CMS\Backend\Routing\Router $router */
        protected function getTokenUrl(/** @var \TYPO3\CMS\Backend\Routing\Router $router */
$url) {}
        protected function getShortcutsByGroup($groupId) {}
        protected function getShortcutById($shortcutId) {}
        /**
         * Gets the available shortcut groups from default groups, user TSConfig, and global groups
         *
         * @return array
         */
        protected function initShortcutGroups() {}
        public function editFormAction(ServerRequestInterface $request, ResponseInterface $response) {}
        public function removeShortcutAction(ServerRequestInterface $request) : ResponseInterface {}
        public function createShortcutAction(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function tryAddingTheShortcut(ResponseInterface $response, $url, $shortcutName) {}
        protected function addShortcut($url, $shortcutName, $module) {}
        protected function shortcutExists($url) {}
        public function saveFormAction(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function getShortcutGroupLabel($groupId) {}
        /**
         * Gets a list of global groups, shortcuts in these groups are available to all users
         *
         * @return array Array of global groups
         */
        protected function getGlobalShortcutGroups() {}
        /**
         * runs through the available shortcuts an collects their groups
         *
         * @return array Array of groups which have shortcuts
         */
        protected function getGroupsFromShortcuts() {}
        protected function getShortcutIcon($row, $shortcut) {}
        protected function getShortcutIconTitle($shortcutLabel, $moduleName, $parentModuleName = '') {}
        protected function getLinkedPageId($url) {}
        /**
         * Position relative to others, live search should be very right
         *
         * @return int
         */
        public function getIndex() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns current PageRenderer
         *
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        protected function getFluidTemplateObject(string $templateFilename) : StandaloneView {}
    }

}

namespace TYPO3\CMS\Backend\Backend\Avatar {
    /**
     * Main class to render an avatar image of a certain Backend user, resolving any avatar provider
     * that takes care of fetching the image.
     *
     * See render() and getImgTag() as main entry points
     */
    class Avatar {
        /**
         * Array of sorted and initialized avatar providers
         *
         * @var AvatarProviderInterface[]
         */
        protected $avatarProviders;

        public function render(array $backendUser = null, int $size = 32, bool $showIcon = false) {}
        public function getImgTag(array $backendUser = null, $size = 32) {}
        public function getImage(array $backendUser, $size) {}
        /**
         * Validates the registered avatar providers
         *
         * @throws \RuntimeException
         */
        protected function validateSortAndInitiateAvatarProviders() {}
        /**
         * Returns the current BE user.
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        protected function getFluidTemplateObject(string $filename = null) : StandaloneView {}
        /**
         * @return FrontendInterface
         */
        protected function getCache() {}
    }

    /**
     * Acts as a pseudo model for holding all information of an avatar image
     * Holds url + dimensions of avatar image
     */
    class Image {
        /**
         * Url of avatar image. Needs to be relative to the website root or an absolute URL.
         *
         * @var string
         */
        protected $url;
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $height;

        public function __construct($url, $width, $height) {}
        public function getUrl($relativeToCurrentScript = false) {}
        /**
         * @return int
         */
        public function getWidth() {}
        /**
         * @return int
         */
        public function getHeight() {}
    }

    /**
     * Avatar Provider used for rendering avatars based on local files (based on FAL), stored in the be_users.avatar
     * relation field with sys_file_reference.
     */
    class DefaultAvatarProvider implements \typo3\cms\backend\backend\avatar\avatarproviderinterface {
        public function getImage(array $backendUser, $size) {}
        protected function getAvatarFileUid($backendUserId) {}
    }


    /**
     * Contract for avatar providers that ensure how an avater should be rendered for a given Backend User
     */
    interface AvatarProviderInterface {
        function getImage(array $backendUser, $size) ;
    }

}

namespace TYPO3\CMS\Backend\Controller {
    /**
     * Handle FormEngine inline ajax calls
     */
    class FormInlineAjaxController extends \typo3\cms\backend\controller\abstractformengineajaxcontroller {
/** @var FormDataCompiler $formDataCompiler */
        public function createAction(/** @var FormDataCompiler $formDataCompiler */
ServerRequestInterface $request) : ResponseInterface {}
/** @var InlineStackProcessor $inlineStackProcessor */
        public function detailsAction(/** @var InlineStackProcessor $inlineStackProcessor */
ServerRequestInterface $request) : ResponseInterface {}
/** @var $tce DataHandler */
        public function synchronizeLocalizeAction(/** @var $tce DataHandler */
ServerRequestInterface $request) : ResponseInterface {}
/** @var InlineStackProcessor $inlineStackProcessor */
        public function expandOrCollapseAction(/** @var InlineStackProcessor $inlineStackProcessor */
ServerRequestInterface $request) : ResponseInterface {}
/** @var FormDataCompiler $formDataCompiler */
        protected function compileChild(/** @var FormDataCompiler $formDataCompiler */
array $parentData, /** @var FormDataCompiler $formDataCompiler */
$parentFieldName, /** @var FormDataCompiler $formDataCompiler */
$childUid, /** @var FormDataCompiler $formDataCompiler */
array $inlineStructure) {}
/** @var FormDataCompiler $formDataCompiler */
        protected function compileChildChild(/** @var FormDataCompiler $formDataCompiler */
array $child, /** @var FormDataCompiler $formDataCompiler */
array $parentConfig, /** @var FormDataCompiler $formDataCompiler */
array $inlineStructure) {}
        protected function mergeChildResultIntoJsonResult(array $jsonResult, array $childResult) {}
        protected function getInlineRelatedRecordsUidArray($itemList) {}
        protected function getInlineExpandCollapseStateArrayForTableUid($table, $uid) {}
        /**
         * Get expand / collapse state of inline items
         *
         * @return array
         */
        protected function getInlineExpandCollapseStateArray() {}
        protected function backendUserHasUcInlineView(BackendUserAuthentication $backendUser) {}
        protected function removeFromArray($needle, $haystack, $strict = false) {}
        protected function getErrorMessageForAJAX($message) {}
        protected function getInlineFirstPidFromDomObjectId($domObjectId) {}
        protected function extractSignedParentConfigFromRequest(string $contextString) : array {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * This is the ajax handler for backend login after timeout.
     */
    class AjaxLoginController {
        public function loginAction(ServerRequestInterface $request) : ResponseInterface {}
        public function logoutAction(ServerRequestInterface $request) : ResponseInterface {}
        public function refreshAction(ServerRequestInterface $request) : ResponseInterface {}
        public function isTimedOutAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Checks if a user is logged in and the session is active.
         *
         * @return bool
         */
        protected function isAuthorizedBackendSession() {}
        /**
         * Check whether the user was already authorized or not
         *
         * @return bool
         */
        protected function hasLoginBeenProcessed() {}
        /**
         * @return BackendUserAuthentication|null
         */
        protected function getBackendUser() {}
    }

    /**
     * A wrapper class to call BE_USER->uc
     * used for AJAX and TYPO3.Storage JS object
     */
    class UserSettingsController {
        public function processAjaxRequest(ServerRequestInterface $request) : ResponseInterface {}
        public function process($action, $key = '', $value = '') {}
        protected function get($key) {}
        /**
         * Get all user settings
         *
         * @return mixed all values, usually a multi-dimensional array
         */
        protected function getAll() {}
        protected function set($key, $value) {}
        protected function addToList($key, $value) {}
        protected function removeFromList($key, $value) {}
        /**
         * Resets the user settings to the default
         */
        protected function clear() {}
        protected function unsetOption($key) {}
        protected function getFromDottedNotation($key) {}
        protected function setFromDottedNotation($key, $value) {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Script Class for rendering the login form
     */
    class LoginController {
        /**
         * The URL to redirect to after login.
         *
         * @var string
         */
        protected $redirectUrl;
        /**
         * Set to the redirect URL of the form (may be redirect_url or "index.php?M=main")
         *
         * @var string
         */
        protected $redirectToURL;
        /**
         * the active login provider identifier
         *
         * @var string
         */
        protected $loginProviderIdentifier;
        /**
         * List of registered and sorted login providers
         *
         * @var array
         */
        protected $loginProviders;
        /**
         * Login-refresh bool; The backend will call this script
         * with this value set when the login is close to being expired
         * and the form needs to be redrawn.
         *
         * @var bool
         */
        protected $loginRefresh;
        /**
         * Value of forms submit button for login.
         *
         * @var string
         */
        protected $submitValue;
        /**
         * @var StandaloneView
         */
        protected $view;

        /** @var Locales $locales */
        public function __construct() {}
        public function formAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /** @var LoginProviderInterface $loginProvider */
        public function main() {}
        /**
         * Checking, if we should perform some sort of redirection OR closing of windows.
         *
         * Do redirect:
         *
         * If a user is logged in AND
         *   a) if either the login is just done (isLoginInProgress) or
         *   b) a loginRefresh is done
         *
         * @throws \RuntimeException
         * @throws \UnexpectedValueException
         */
        protected function checkRedirect() {}
        /**
         * Making interface selector:
         */
        public function makeInterfaceSelectorBox() {}
        /**
         * Gets news from sys_news and converts them into a format suitable for
         * showing them at the login screen.
         *
         * @return array An array of login news.
         */
        protected function getSystemNews() {}
        private function getUriForFileName($filename) {}
        /**
         * Checks if login credentials are currently submitted
         *
         * @return bool
         */
        protected function isLoginInProgress() {}
        /** @var StandaloneView $view */
        protected function getFluidTemplateObject() {}
        /**
         * Validates the registered login providers
         *
         * @throws \RuntimeException
         */
        protected function validateAndSortLoginProviders() {}
        /**
         * Detect the login provider, get from request or choose the
         * first one as default
         *
         * @return string
         */
        protected function detectLoginProvider() {}
        /**
         * @return string
         */
        public function getLoginProviderIdentifier() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * Returns an instance of DocumentTemplate
         *
         * @return \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        protected function getDocumentTemplate() {}
    }

    /**
     * Returns the results for any live searches, e.g. in the toolbar
     */
    class LiveSearchController {
        /**
         * @var array
         */
        protected $searchResults;

        public function liveSearchAction(ServerRequestInterface $request) : ResponseInterface {}
    }

    /**
     * Script Class for Web > Layout module
     */
    class PageLayoutController {
        /**
         * Page Id for which to make the listing
         *
         * @var int
         */
        public $id;
        /**
         * Pointer - for browsing list of records.
         *
         * @var int
         */
        public $pointer;
        /**
         * Thumbnails or not
         *
         * @var string
         */
        public $imagemode;
        /**
         * Search-fields
         *
         * @var string
         */
        public $search_field;
        /**
         * Search-levels
         *
         * @var int
         */
        public $search_levels;
        /**
         * Show-limit
         *
         * @var int
         */
        public $showLimit;
        /**
         * Return URL
         *
         * @var string
         */
        public $returnUrl;
        /**
         * Clear-cache flag - if set, clears page cache for current id.
         *
         * @var bool
         */
        public $clear_cache;
        /**
         * PopView id - for opening a window with the page
         *
         * @var bool
         */
        public $popView;
        /**
         * Page select perms clause
         *
         * @var string
         */
        public $perms_clause;
        /**
         * Module TSconfig
         *
         * @var array
         */
        public $modTSconfig;
        /**
         * Module shared TSconfig
         *
         * @var array
         */
        public $modSharedTSconfig;
        /**
         * Current ids page record
         *
         * @var array
         */
        public $pageinfo;
        /**
         * "Pseudo" Description -table name
         *
         * @var string
         */
        public $descrTable;
        /**
         * List of column-integers to edit. Is set from TSconfig, default is "1,0,2,3"
         *
         * @var string
         */
        public $colPosList;
        /**
         * Flag: If content can be edited or not.
         *
         * @var bool
         */
        public $EDIT_CONTENT;
        /**
         * Users permissions integer for this page.
         *
         * @var int
         */
        public $CALC_PERMS;
        /**
         * Currently selected language for editing content elements
         *
         * @var int
         */
        public $current_sys_language;
        /**
         * Module configuration
         *
         * @var array
         */
        public $MCONF;
        /**
         * Menu configuration
         *
         * @var array
         */
        public $MOD_MENU;
        /**
         * Module settings (session variable)
         *
         * @var array
         */
        public $MOD_SETTINGS;
        /**
         * Module output accumulation
         *
         * @var string
         */
        public $content;
        /**
         * List of column-integers accessible to the current BE user.
         * Is set from TSconfig, default is $colPosList
         *
         * @var string
         */
        public $activeColPosList;
        /**
         * @var string
         */
        protected $editSelect;
        /**
         * Caches the available languages in a colPos
         *
         * @var array
         */
        protected $languagesInColumnCache;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;
        /**
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * @var ButtonBar
         */
        protected $buttonBar;
        /**
         * @var string
         */
        protected $searchContent;

        /**
         * Initializing the module
         */
        public function init() {}
        /**
         * Initialize menu array
         */
        public function menuConfig() {}
        /**
         * Initializes the available actions this module provides
         *
         * @return array the available actions
         */
        protected function initActions() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function makeActionMenu(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $actions) {}
        /**
         * Clears page cache for the current id, $this->id
         */
        public function clearCache() {}
        /**
         * Generate the flashmessages for current pid
         *
         * @return string HTML content with flashmessages
         */
        protected function getHeaderFlashMessagesForCurrentPid() {}
        protected function getPageLinksWhereContentIsAlsoShownOn($pageId) {}
        /**
         * @return string $title
         */
        protected function getLocalizedPageTitle() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        /** @var $dbList \TYPO3\CMS\Backend\View\PageLayoutView */
        public function renderContent() {}
        /**
         * @return ModuleTemplate
         */
        public function getModuleTemplate() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function makeButtons() {}
        /**
         * Returns the number of hidden elements (including those hidden by start/end times)
         * on the current page (for the current sys_language)
         *
         * @return int
         */
        public function getNumberOfHiddenElements() {}
        public function local_linkThisScript($params) {}
        /**
         * Check if page can be edited by current user
         *
         * @return bool
         */
        public function pageIsNotLockedForEditors() {}
        /**
         * Check if content can be edited by current user
         *
         * @return bool
         */
        public function contentIsNotLockedForEditors() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns current PageRenderer
         *
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function makeLanguageMenu() {}
        /** @var QueryBuilder $queryBuilder */
        protected function currentPageHasSubPages() {}
    }

    /**
     * Backend controller for selectTree ajax operations
     */
    class FormSelectTreeAjaxController {
        public function fetchDataAction(ServerRequestInterface $request) : ResponseInterface {}
    }

    /**
     * Script Class, creating object of \TYPO3\CMS\Core\DataHandling\DataHandler and
     * sending the posted data to the object.
     *
     * Used by many smaller forms/links in TYPO3, including the QuickEdit module.
     * Is not used by FormEngine though (main form rendering script) - that uses the same class (DataHandler) but makes its own initialization (to save the redirect request).
     * For all other cases than FormEngine it is recommended to use this script for submitting your editing forms - but the best solution in any case would probably be to link your application to FormEngine, that will give you easy form-rendering as well.
     */
    class SimpleDataHandlerController {
        /**
         * Array. Accepts options to be set in TCE object. Currently it supports "reverseOrder" (bool).
         *
         * @var array
         */
        public $flags;
        /**
         * Data array on the form [tablename][uid][fieldname] = value
         *
         * @var array
         */
        public $data;
        /**
         * Command array on the form [tablename][uid][command] = value.
         * This array may get additional data set internally based on clipboard commands send in CB var!
         *
         * @var array
         */
        public $cmd;
        /**
         * Array passed to ->setMirror.
         *
         * @var array
         */
        public $mirror;
        /**
         * Cache command sent to ->clear_cacheCmd
         *
         * @var string
         */
        public $cacheCmd;
        /**
         * Redirect URL. Script will redirect to this location after performing operations (unless errors has occurred)
         *
         * @var string
         */
        public $redirect;
        /**
         * Clipboard command array. May trigger changes in "cmd"
         *
         * @var array
         */
        public $CB;
        /**
         * TYPO3 Core Engine
         *
         * @var \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        public $tce;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialization of the class
         */
        public function init() {}
        /**
         * Clipboard pasting and deleting.
         */
        public function initClipboard() {}
        /**
         * Executing the posted actions ...
         */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
/** @var \TYPO3\CMS\Core\Messaging\FlashMessageService $flashMessageService */
        public function processAjaxRequest(/** @var \TYPO3\CMS\Core\Messaging\FlashMessageService $flashMessageService */
ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Main script class for rendering of the folder tree
     */
    class FileSystemNavigationFrameController {
        /**
         * Content accumulates in this variable.
         *
         * @var string
         */
        public $content;
        /**
         * @var \TYPO3\CMS\Backend\Tree\View\FolderTreeView
         */
        public $foldertree;
        /**
         * @var string
         */
        public $currentSubScript;
        /**
         * @var bool
         */
        public $cMR;
        /**
         * @var array
         */
        protected $scopeData;
        /**
         * ModuleTemplate Container
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Initialiation of the script class
         */
        protected function init() {}
        /**
         * initialization for the visual parts of the class
         * Use template rendering only if this is a non-AJAX call
         */
        public function initPage() {}
        /**
         * Main function, rendering the folder tree
         */
        public function main() {}
        /**
         * Register docHeader buttons
         */
        protected function getButtons() {}
        public function ajaxExpandCollapse(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns an instance of LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Class for rendering the TYPO3 backend
     */
    class BackendController {
        /**
         * @var string
         */
        protected $content;
        /**
         * @var string
         */
        protected $css;
        /**
         * @var array
         */
        protected $cssFiles;
        /**
         * @var string
         */
        protected $js;
        /**
         * @var array
         */
        protected $jsFiles;
        /**
         * @var array
         */
        protected $toolbarItems;
        /**
         * @var bool
         */
        protected $debug;
        /**
         * @var string
         */
        protected $templatePath;
        /**
         * @var string
         */
        protected $partialPath;
        /**
         * @var \TYPO3\CMS\Backend\Domain\Repository\Module\BackendModuleRepository
         */
        protected $backendModuleRepository;
        /**
         * @var \TYPO3\CMS\Backend\Module\ModuleLoader Object for loading backend modules
         */
        protected $moduleLoader;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;
        /**
         * @var IconFactory
         */
        protected $iconFactory;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialize toolbar item objects
         *
         * @throws \RuntimeException
         */
        protected function initializeToolbarItems() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Main function generating the BE scaffolding
         */
        public function render() {}
        /**
         * Renders the topbar, containing the backend logo, sitename etc.
         *
         * @return string
         */
        protected function renderTopbar() {}
        /** @var \TYPO3\CMS\Backend\Toolbar\ToolbarItemInterface $toolbarItem */
        protected function renderToolbar() {}
        /**
         * Generates the JavaScript code for the backend.
         */
        protected function generateJavascript() {}
        /**
         * Checking if the "&edit" variable was sent so we can open it for editing the page.
         */
        protected function handlePageEditing() {}
        /**
         * Sets the startup module from either GETvars module and modParams or user configuration.
         *
         * @return string the JavaScript code for the startup module
         */
        protected function setStartupModule() {}
        public function addCss($css) {}
        protected function executeHook($identifier, array $hookConfiguration = [ ]) {}
        /**
         * loads all modules from the repository
         * and renders it with a template
         *
         * @return string
         */
        protected function generateModuleMenu() {}
        public function getModuleMenu(ServerRequestInterface $request) : ResponseInterface {}
        public function getTopbar(ServerRequestInterface $request) : ResponseInterface {}
        protected function getFluidTemplateObject($templatePathAndFileName = null) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns an instance of DocumentTemplate
         *
         * @return \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        protected function getDocumentTemplate() {}
    }

    /**
     * Script Class for logging a user out.
     * Does not display any content, just calls the logout-function for the current user and then makes a redirect.
     */
    class LogoutController {
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function logoutAction(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ServerRequestInterface $request, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ResponseInterface $response) {}
        /** @var \TYPO3\CMS\Core\FormProtection\BackendFormProtection $backendFormProtection */
        public function logout() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Render FlashMessages
     */
    class FlashMessageController {
        public function getQueuedFlashMessagesAction(ServerRequestInterface $request) : ResponseInterface {}
    }

    /**
     * Class ContextHelpAjaxController
     */
    class ContextHelpAjaxController {
        public function getHelpAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        protected function getContextHelp($table, $field) {}
    }

    /**
     * Handle FormEngine flex field ajax calls
     */
    class FormFlexAjaxController extends \typo3\cms\backend\controller\abstractformengineajaxcontroller {
        public function containerAdd(ServerRequestInterface $request) : ResponseInterface {}
    }

    /**
     * Class OnlineMediaController handles uploading online media
     */
    class OnlineMediaController {
        public function createAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        public function mainAction(ServerRequestInterface $request) {}
        protected function addMediaFromUrl($url, $targetFolderIdentifier, array $allowedExtensions = [ ]) {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        protected function addFlashMessage(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
FlashMessage $flashMessage) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Script class for 'db_new'
     */
    class NewRecordController {
        /**
         * @var array
         */
        public $pageinfo;
        /**
         * @var array
         */
        public $pidInfo;
        /**
         * @var array
         */
        protected $newRecordSortList;
        /**
         * @var int
         */
        public $newPagesInto;
        /**
         * @var int
         */
        public $newContentInto;
        /**
         * @var int
         */
        public $newPagesAfter;
        /**
         * Determines, whether "Select Position" for new page should be shown
         *
         * @var bool
         */
        protected $newPagesSelectPosition;
        /**
         * @var array
         */
        public $web_list_modTSconfig;
        /**
         * @var array
         */
        public $allowedNewTables;
        /**
         * @var array
         */
        public $deniedNewTables;
        /**
         * @var array
         */
        public $web_list_modTSconfig_pid;
        /**
         * @var array
         */
        public $allowedNewTables_pid;
        /**
         * @var array
         */
        public $deniedNewTables_pid;
        /**
         * @var string
         */
        public $code;
        /**
         * @var string
         */
        public $R_URI;
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $returnUrl;
        /**
         * pagesOnly flag.
         *
         * @var int
         */
        public $pagesOnly;
        /**
         * @var string
         */
        public $perms_clause;
        /**
         * Accumulated HTML output
         *
         * @var string
         */
        public $content;
        /**
         * @var array
         */
        public $tRows;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Constructor function for the class
         */
        protected function init() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Main processing, creating the list of new record tables to select from
         */
        public function main() {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * Creates the position map for pages wizard
         */
        public function pagesOnly() {}
        /**
         * Create a regular new element (pages and records)
         */
        public function regularNew() {}
        public function sortNewRecordsByConfig($a, $b) {}
        public function linkWrap($linkText, $table, $pid, $addContentTable = false) {}
        public function isTableAllowedForThisPage($pid_row, $checkTable) {}
        public function showNewRecLink($table, array $allowedNewTables = [ ], array $deniedNewTables = [ ]) {}
        /**
         * Checks if sys_language records are present
         *
         * @return bool
         */
        protected function checkIfLanguagesExist() {}
        /**
         * Return language service instance
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the global BackendUserAuthentication object.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * Script Class: Drawing the editing form for editing records in TYPO3.
     * Notice: It does NOT use tce_db.php to submit data to, rather it handles submissions itself
     */
    class EditDocumentController {
        const DOCUMENT_CLOSE_MODE_DEFAULT = 0;
        const DOCUMENT_CLOSE_MODE_CLEAR_ALL = 3;
        const DOCUMENT_CLOSE_MODE_REDIRECT = 1;
        const DOCUMENT_CLOSE_MODE_NO_REDIRECT = 4;

        /**
         * GPvar "edit": Is an array looking approx like [tablename][list-of-ids]=command, eg.
         * "&edit[pages][123]=edit". See \TYPO3\CMS\Backend\Utility\BackendUtility::editOnClick(). Value can be seen
         * modified internally (converting NEW keyword to id, workspace/versioning etc).
         *
         * @var array
         */
        public $editconf;
        /**
         * Commalist of fieldnames to edit. The point is IF you specify this list, only those
         * fields will be rendered in the form. Otherwise all (available) fields in the record
         * is shown according to the types configuration in $GLOBALS['TCA']
         *
         * @var bool
         */
        public $columnsOnly;
        /**
         * Default values for fields (array with tablenames, fields etc. as keys).
         * Can be seen modified internally.
         *
         * @var array
         */
        public $defVals;
        /**
         * Array of values to force being set (as hidden fields). Will be set as $this->defVals
         * IF defVals does not exist.
         *
         * @var array
         */
        public $overrideVals;
        /**
         * If set, this value will be set in $this->retUrl (which is used quite many places
         * as the return URL). If not set, "dummy.php" will be set in $this->retUrl
         *
         * @var string
         */
        public $returnUrl;
        /**
         * Close-document command. Not really sure of all options...
         *
         * @var int
         */
        public $closeDoc;
        /**
         * Quite simply, if this variable is set, then the processing of incoming data will be performed
         * as if a save-button is pressed. Used in the forms as a hidden field which can be set through
         * JavaScript if the form is somehow submitted by JavaScript).
         *
         * @var bool
         */
        public $doSave;
        /**
         * The data array from which the data comes...
         *
         * @var array
         */
        public $data;
        /**
         * @var string
         */
        public $cmd;
        /**
         * @var array
         */
        public $mirror;
        /**
         * Clear-cache cmd.
         *
         * @var string
         */
        public $cacheCmd;
        /**
         * Redirect (not used???)
         *
         * @var string
         */
        public $redirect;
        /**
         * Boolean: If set, then the GET var "&id=" will be added to the
         * retUrl string so that the NEW id of something is returned to the script calling the form.
         *
         * @var bool
         */
        public $returnNewPageId;
        /**
         * update BE_USER->uc
         *
         * @var array
         */
        public $uc;
        /**
         * ID for displaying the page in the frontend (used for SAVE/VIEW operations)
         *
         * @var int
         */
        public $popViewId;
        /**
         * Additional GET vars for the link, eg. "&L=xxx"
         *
         * @var string
         */
        public $popViewId_addParams;
        /**
         * Alternative URL for viewing the frontend pages.
         *
         * @var string
         */
        public $viewUrl;
        /**
         * Alternative title for the document handler.
         *
         * @var string
         */
        public $recTitle;
        /**
         * If set, then no SAVE/VIEW button is printed
         *
         * @var bool
         */
        public $noView;
        /**
         * @var string
         */
        public $perms_clause;
        /**
         * If set, the $this->editconf array is returned to the calling script
         * (used by wizard_add.php for instance)
         *
         * @var bool
         */
        public $returnEditConf;
        /**
         * Workspace used for the editing action.
         *
         * @var int|null
         */
        protected $workspace;
        /**
         * document template object
         *
         * @var \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        public $doc;
        /**
         * a static HTML template, usually in templates/alt_doc.html
         *
         * @var string
         */
        public $template;
        /**
         * Content accumulation
         *
         * @var string
         */
        public $content;
        /**
         * Return URL script, processed. This contains the script (if any) that we should
         * RETURN TO from the FormEngine script IF we press the close button. Thus this
         * variable is normally passed along from the calling script so we can properly return if needed.
         *
         * @var string
         */
        public $retUrl;
        /**
         * Contains the parts of the REQUEST_URI (current url). By parts we mean the result of resolving
         * REQUEST_URI (current url) by the parse_url() function. The result is an array where eg. "path"
         * is the script path and "query" is the parameters...
         *
         * @var array
         */
        public $R_URL_parts;
        /**
         * Contains the current GET vars array; More specifically this array is the foundation for creating
         * the R_URI internal var (which becomes the "url of this script" to which we submit the forms etc.)
         *
         * @var array
         */
        public $R_URL_getvars;
        /**
         * Set to the URL of this script including variables which is needed to re-display the form. See main()
         *
         * @var string
         */
        public $R_URI;
        /**
         * @var array
         */
        public $MCONF;
        /**
         * @var array
         */
        public $pageinfo;
        /**
         * Is loaded with the "title" of the currently "open document" - this is used in the
         * Document Selector box. (see makeDocSel())
         *
         * @var string
         */
        public $storeTitle;
        /**
         * Contains an array with key/value pairs of GET parameters needed to reach the
         * current document displayed - used in the Document Selector box. (see compileStoreDat())
         *
         * @var array
         */
        public $storeArray;
        /**
         * Contains storeArray, but imploded into a GET parameter string (see compileStoreDat())
         *
         * @var string
         */
        public $storeUrl;
        /**
         * Hashed value of storeURL (see compileStoreDat())
         *
         * @var string
         */
        public $storeUrlMd5;
        /**
         * Module session data
         *
         * @var array
         */
        public $docDat;
        /**
         * An array of the "open documents" - keys are md5 hashes (see $storeUrlMd5) identifying
         * the various documents on the GET parameter list needed to open it. The values are
         * arrays with 0,1,2 keys with information about the document (see compileStoreDat()).
         * The docHandler variable is stored in the $docDat session data, key "0".
         *
         * @var array
         */
        public $docHandler;
        /**
         * Array of the elements to create edit forms for.
         *
         * @var array
         */
        public $elementsData;
        /**
         * Pointer to the first element in $elementsData
         *
         * @var array
         */
        public $firstEl;
        /**
         * Counter, used to count the number of errors (when users do not have edit permissions)
         *
         * @var int
         */
        public $errorC;
        /**
         * Counter, used to count the number of new record forms displayed
         *
         * @var int
         */
        public $newC;
        /**
         * Is set to the pid value of the last shown record - thus indicating which page to
         * show when clicking the SAVE/VIEW button
         *
         * @var int
         */
        public $viewId;
        /**
         * Is set to additional parameters (like "&L=xxx") if the record supports it.
         *
         * @var string
         */
        public $viewId_addParams;
        /**
         * Module TSconfig, loaded from main() based on the page id value of viewId
         *
         * @var array
         */
        public $modTSconfig;
        /**
         * @var FormResultCompiler
         */
        protected $formResultCompiler;
        /**
         * Used internally to disable the storage of the document reference (eg. new records)
         *
         * @var bool
         */
        public $dontStoreDocumentRef;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * Stores information needed to preview the currently saved record
         *
         * @var array
         */
        protected $previewData;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        protected function emitFunctionAfterSignal($signalName) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function preInit() {}
        /**
         * Detects, if a save command has been triggered.
         *
         * @return bool TRUE, then save the document (data submitted)
         */
        public function doProcessData() {}
        /**
         * Do processing of data, submitting it to DataHandler.
         */
        public function processData() {}
        /**
         * Initialize the normal module operation
         */
        public function init() {}
        /**
         * @return string
         */
        protected function generatePreviewCode() {}
        protected function parseAdditionalGetParameters(array $parameters, array $typoScript) {}
        /** @var FormResultCompiler formResultCompiler */
        public function main() {}
        /**
         * Creates the editing form with FormEnigne, based on the input from GPvars.
         *
         * @return string HTML form elements wrapped in tables
         */
        public function makeEditForm() {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         *
         * @return array All available buttons as an assoc. array
         */
        protected function getButtons() {}
        public function compileForm($editForm) {}
        /**
         * Create shortcut icon
         */
        public function shortCutLink() {}
        /**
         * Creates open-in-window link
         */
        public function openInNewWindowLink() {}
        /**
         * Returns the URL (usually for the "returnUrl") which closes the current window.
         * Used when editing a record in a popup.
         *
         * @return string
         */
        protected function getCloseUrl() : string {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function languageSwitch(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$uid, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$pid = null) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function localizationRedirect(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$justLocalized) {}
        public function getLanguages($id) {}
        public function fixWSversioningInEditConf($mapArray = false) {}
        public function getRecordForEdit($table, $theUid) {}
        /**
         * Populates the variables $this->storeArray, $this->storeUrl, $this->storeUrlMd5
         *
         * @see makeDocSel()
         */
        public function compileStoreDat() {}
        public function getNewIconMode($table, $key = 'saveDocNew') {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function closeDocument(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$mode = self::DOCUMENT_CLOSE_MODE_DEFAULT) {}
        public function setDocument($currentDocFromHandlerMD5 = '', $retUrl = '') {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Script Class, putting the frameset together.
     */
    class LoginFramesetController {
        /**
         * @var string
         */
        protected $content;

        /**
         * Constructor
         */
        public function __construct() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        /**
         * Returns an instance of DocumentTemplate
         *
         * @return \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        protected function getDocumentTemplate() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

    /**
     * Abstract class for a couple of FormEngine controllers triggered by
     * ajax calls. The class containers some helpers to for instance prepare
     * the form render result for json output.
     *
     * @internal Marked as internal for now, methods in this class may change any time.
     */
    abstract class AbstractFormEngineAjaxController {
        public function createExecutableStringRepresentationOfRegisteredRequireJsModules(array $result) : array {}
        protected function getRelativePathToStylesheetFile(string $stylesheetFile) : string {}
/** @var $languageFactory LocalizationFactory */
        protected function getLabelsFromLocalizationFile(/** @var $languageFactory LocalizationFactory */
$file) {}
    }

    /**
     * Extended controller for link browser
     */
    class LinkBrowserController extends \typo3\cms\recordlist\controller\abstractlinkbrowsercontroller {
        /**
         * Initialize $this->currentLinkParts
         */
        protected function initCurrentUrl() {}
        /**
         * Initialize document template object
         */
        protected function initDocumentTemplate() {}
        public function encodeTypoLink(ServerRequestInterface $request) : ResponseInterface {}
        protected function areFieldChangeFunctionsValid($handleFlexformSections = false) {}
        /**
         * Get attributes for the body tag
         *
         * @return string[] Array of body-tag attributes
         */
        protected function getBodyTagAttributes() {}
        /**
         * Return the ID of current page
         *
         * @return int
         */
        protected function getCurrentPageId() {}
    }

    /**
     * Script Class for the Context Sensitive Menu in TYPO3
     */
    class ContextMenuController {
        /**
         * Constructor
         */
        public function __construct() {}
        public function getContextMenuAction(ServerRequestInterface $request) : ResponseInterface {}
/** @var Clipboard $clipboard */
        public function clipboardAction(/** @var Clipboard $clipboard */
ServerRequestInterface $request) : ResponseInterface {}
        /**
         * Returns LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() : LanguageService {}
    }

    /**
     * Script Class, creating the content for the dummy script - which is just blank output.
     */
    class DummyController {
        /**
         * @var string
         */
        public $content;

        /**
         * Constructor
         */
        public function __construct() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Create content for the dummy script - outputting a blank page.
         */
        public function main() {}
        /**
         * Returns an instance of DocumentTemplate
         *
         * @return \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        protected function getDocumentTemplate() {}
    }

}

namespace TYPO3\CMS\Backend\Controller\Page {
    /**
     * "Create multiple pages" controller
     */
    class NewMultiplePagesController {
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        public function __construct(ModuleTemplate $moduleTemplate = null) {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        protected function createPages(array $newPagesData, int $pageUid, bool $afterExisting, bool $hidePages, bool $hidePagesInMenu) : bool {}
        protected function getTypeSelectData(int $pageUid) {}
        protected function getSubPagesOfPage(int $pageUid) : array {}
        /**
         * Returns LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns current BE user
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * LocalizationController handles the AJAX requests for record localization
     */
    class LocalizationController {
        const ACTION_LOCALIZE = 'localize';
        const ACTION_COPY = 'copyFromLanguage';

        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var LocalizationRepository
         */
        protected $localizationRepository;

        /**
         * Constructor
         */
        public function __construct() {}
/** @var TranslationConfigurationProvider $translationProvider */
        public function getUsedLanguagesInPageAndColumn(/** @var TranslationConfigurationProvider $translationProvider */
ServerRequestInterface $request, /** @var TranslationConfigurationProvider $translationProvider */
ResponseInterface $response) {}
        public function getRecordLocalizeSummary(ServerRequestInterface $request, ResponseInterface $response) {}
        public function localizeRecords(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function filterInvalidUids(int $pageId, int $colPos, int $destLanguageId, int $srcLanguageId, array $transmittedUidList) : array {}
        protected function process($params) {}
    }

    /**
     * "Sort sub pages" controller - reachable from context menu "more" on page records
     */
    class SortSubPagesController {
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        public function __construct(ModuleTemplate $moduleTemplate = null) {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        protected function sortSubPagesByField(int $parentPageUid, string $newSortBy) {}
        protected function reverseSortingOfPages(int $parentPageUid) {}
        protected function persistNewSubPageOrder(int $parentPageUid, array $subPages) {}
        protected function getSubPagesOfPage(int $parentPageUid, string $orderBy = 'sorting') : array {}
        /**
         * Returns LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns current BE user
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Controller providing data to the page tree
     */
    class TreeController {
        /**
         * Option to use the nav_title field for outputting in the tree items, set via userTS.
         *
         * @var bool
         */
        protected $useNavTitle;
        /**
         * Option to prefix the page ID when outputting the tree items, set via userTS.
         *
         * @var bool
         */
        protected $addIdAsPrefix;
        /**
         * Option to prefix the domain name of sys_domains when outputting the tree items, set via userTS.
         *
         * @var bool
         */
        protected $addDomainName;
        /**
         * Option to add the rootline path above each mount point, set via userTS.
         *
         * @var bool
         */
        protected $showMountPathAboveMounts;
        /**
         * An array of background colors for a branch in the tree, set via userTS.
         *
         * @var array
         */
        protected $backgroundColors;
        /**
         * A list of pages not to be shown.
         *
         * @var array
         */
        protected $hiddenRecords;
        /**
         * Contains the state of all items that are expanded.
         *
         * @var array
         */
        protected $expandedState;
        /**
         * Associative array containing all pageIds as key, and domain names as values.
         *
         * @var array|null
         */
        protected $domains;
        /**
         * Instance of the icon factory, to be used for generating the items.
         *
         * @var IconFactory
         */
        protected $iconFactory;

        /**
         * Constructor to set up common objects needed in various places.
         */
        public function __construct() {}
        /**
         * Returns page tree configuration in JSON
         *
         * @return ResponseInterface
         */
        public function fetchConfigurationAction() : ResponseInterface {}
        /**
         * Returns the list of doktypes to display in page tree toolbar drag area
         *
         * Note: The list can be filtered by the user TypoScript
         * option "options.pageTree.doktypesToShowInNewPageDragArea".
         *
         * @return array
         */
        protected function getDokTypes() : array {}
        public function fetchDataAction(ServerRequestInterface $request) : ResponseInterface {}
        public function setTemporaryMountPointAction(ServerRequestInterface $request) : ResponseInterface {}
        protected function pagesToFlatArray(array $page, int $entryPoint, int $depth = 0, array $inheritedData = [ ]) : array {}
        /**
         * Fetches all entry points for the page tree that the user is allowed to see
         *
         * @return array
         */
        protected function getAllEntryPointPageTrees() : array {}
        protected function getDomainNameForPage(int $pageId) : string {}
        protected function getMountPointPath(int $uid) : string {}
        protected function resolvePageCssClassNames(array $page) : string {}
        /**
         * @return WorkspaceService
         */
        protected function getWorkspaceService() : WorkspaceService {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() : BackendUserAuthentication {}
    }

}

namespace TYPO3\CMS\Backend\Controller\File {
    /**
     * Gateway for TCE (TYPO3 Core Engine) file-handling through POST forms.
     * This script serves as the file administration part of the TYPO3 Core Engine.
     * Basically it includes two libraries which are used to manipulate files on the server.
     * Before TYPO3 4.3, it was located in typo3/tce_file.php and redirected back to a
     * $redirectURL. Since 4.3 this class is also used for accessing via AJAX
     */
    class FileController {
        /**
         * Array of file-operations.
         *
         * @var array
         */
        protected $file;
        /**
         * Clipboard operations array
         *
         * @var array
         */
        protected $CB;
        /**
         * Defines behaviour when uploading files with names that already exist; possible values are
         * the values of the \TYPO3\CMS\Core\Resource\DuplicationBehavior enumeration
         *
         * @var \TYPO3\CMS\Core\Resource\DuplicationBehavior
         */
        protected $overwriteExistingFiles;
        /**
         * The page where the user should be redirected after everything is done
         *
         * @var string
         */
        protected $redirect;
        /**
         * Internal, dynamic:
         * File processor object
         *
         * @var ExtendedFileUtility
         */
        protected $fileProcessor;
        /**
         * The result array from the file processor
         *
         * @var array
         */
        protected $fileData;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Registering incoming data
         */
        protected function init() {}
        /**
         * Initialize the Clipboard. This will fetch the data about files to paste/delete if such an action has been sent.
         */
        public function initClipboard() {}
        /**
         * Performing the file admin action:
         * Initializes the objects, setting permissions, sending data to object.
         */
        public function main() {}
        /**
         * Redirecting the user after the processing has been done.
         * Might also display error messages directly, if any.
         */
        public function finish() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function mainAction(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ServerRequestInterface $request, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ResponseInterface $response) {}
        public function processAjaxRequest(ServerRequestInterface $request, ResponseInterface $response) {}
/** @var Folder $fileTargetObject */
        public function fileExistsInFolderAction(/** @var Folder $fileTargetObject */
ServerRequestInterface $request) {}
        protected function flattenResultDataValue($result) {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Script Class for the rename-file form.
     */
    class RenameFileController {
        /**
         * Name of the filemount
         *
         * @var string
         */
        public $title;
        /**
         * Target path
         *
         * @var string
         * @internal
         */
        public $target;
        /**
         * The file or folder object that should be renamed
         *
         * @var File|Folder $fileOrFolderObject
         */
        protected $fileOrFolderObject;
        /**
         * Return URL of list module.
         *
         * @var string
         */
        public $returnUrl;
        /**
         * Accumulating content
         *
         * @var string
         * @internal
         */
        public $content;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialize
         *
         * @throws \TYPO3\CMS\Core\Resource\Exception\InsufficientFileAccessPermissionsException
         */
        protected function init() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns an instance of DocumentTemplate
         *
         * @return \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        protected function getDocumentTemplate() {}
    }

    /**
     * Script Class for the rename-file form
     */
    class ReplaceFileController {
        /**
         * Document template object
         *
         * @var \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        public $doc;
        /**
         * Name of the filemount
         *
         * @var string
         */
        public $title;
        /**
         * sys_file uid
         *
         * @var int
         */
        public $uid;
        /**
         * The file or folder object that should be renamed
         *
         * @var \TYPO3\CMS\Core\Resource\ResourceInterface $fileOrFolderObject
         */
        protected $fileOrFolderObject;
        /**
         * Return URL of list module.
         *
         * @var string
         */
        public $returnUrl;
        /**
         * Accumulating content
         *
         * @var string
         */
        public $content;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Init
         *
         * @throws \RuntimeException
         * @throws InsufficientFileAccessPermissionsException
         */
        protected function init() {}
        /**
         * Main function, rendering the content of the rename form
         */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Script class for the create-new script
     *
     * Displays forms for creating folders (1 to 10), a media asset or a new file.
     */
    class CreateFolderController {
        /**
         * @var int
         */
        public $folderNumber;
        /**
         * Name of the filemount
         *
         * @var string
         */
        public $title;
        /**
         * @var int
         */
        public $number;
        /**
         * Set with the target path inputted in &target
         *
         * @var string
         */
        public $target;
        /**
         * The folder object which is  the target directory
         *
         * @var \TYPO3\CMS\Core\Resource\Folder $folderObject
         */
        protected $folderObject;
        /**
         * Return URL of list module.
         *
         * @var string
         */
        public $returnUrl;
        /**
         * @var array
         */
        protected $pathInfo;
        /**
         * Accumulating content
         *
         * @var string
         */
        public $content;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * @throws InsufficientFolderAccessPermissionsException
         * @throws \RuntimeException
         */
        protected function init() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Script Class for display up to 10 upload fields
     */
    class FileUploadController {
        /**
         * Name of the filemount
         *
         * @var string
         */
        public $title;
        /**
         * Set with the target path inputted in &target
         *
         * @var string
         */
        public $target;
        /**
         * Return URL of list module.
         *
         * @var string
         */
        public $returnUrl;
        /**
         * Accumulating content
         *
         * @var string
         */
        public $content;
        /**
         * The folder object which is the target directory for the upload
         *
         * @var \TYPO3\CMS\Core\Resource\Folder $folderObject
         */
        protected $folderObject;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function init() {}
        /**
         * Main function, rendering the upload file form fields
         */
        public function main() {}
        /**
         * This function renders the upload form
         *
         * @return string The HTML form as a string, ready for outputting
         */
        public function renderUploadForm() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Script Class for rendering the file editing screen
     */
    class EditFileController {
        /**
         * Module content accumulated.
         *
         * @var string
         */
        public $content;
        /**
         * @var string
         */
        public $title;
        /**
         * Document template object
         *
         * @var DocumentTemplate
         */
        public $doc;
        /**
         * Original input target
         *
         * @var string
         */
        public $origTarget;
        /**
         * The original target, but validated.
         *
         * @var string
         */
        public $target;
        /**
         * Return URL of list module.
         *
         * @var string
         */
        public $returnUrl;
        /**
         * the file that is being edited on
         *
         * @var \TYPO3\CMS\Core\Resource\AbstractFile
         */
        protected $fileObject;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialize script class
         *
         * @throws InsufficientFileAccessPermissionsException
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        protected function init() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Builds the buttons for the docheader and returns them as an array
         */
        public function getButtons() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Backend\Controller\Wizard {
    /**
     * Script Class for the New Content element wizard
     */
    class NewContentElementWizardController {
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * Page id
         *
         * @var int
         */
        protected $id;
        /**
         * Sys language
         *
         * @var int
         */
        protected $sysLanguage;
        /**
         * Return URL.
         *
         * @var string
         */
        protected $returnUrl;
        /**
         * If set, the content is destined for a specific column.
         *
         * @var int|null
         */
        protected $colPos;
        /**
         * @var int
         */
        protected $uidPid;
        /**
         * Module TSconfig.
         *
         * @var array
         */
        protected $modTsConfig;
        /**
         * Used to accumulate the content of the module.
         *
         * @var string
         */
        protected $content;
        /**
         * Access boolean.
         *
         * @var bool
         */
        protected $access;
        /**
         * config of the wizard
         *
         * @var array
         */
        protected $config;
        /**
         * @var array
         */
        protected $pageInfo;
        /**
         * @var string
         */
        protected $onClickEvent;
        /**
         * @var array
         */
        protected $moduleConfiguration;
        /**
         * @var StandaloneView
         */
        protected $view;
        /**
         * @var StandaloneView
         */
        protected $menuItemView;
        /**
         * PSR Request Object
         *
         * @var ServerRequestInterface
         */
        protected $request;

        /**
         * Constructor
         */
        public function __construct() {}
/** @var StandaloneView $view */
        protected function getFluidTemplateObject(/** @var StandaloneView $view */
string $filename = 'Main.html') : StandaloneView {}
        /**
         * Constructor, initializing internal variables.
         */
        protected function init() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) : ResponseInterface {}
        /**
         * Creating the module output.
         *
         * @throws \UnexpectedValueException
         */
        protected function main() {}
        /**
         * Returns the array of elements in the wizard display.
         * For the plugin section there is support for adding elements there from a global variable.
         *
         * @return array
         */
        protected function getWizardItems() : array {}
        protected function appendWizards(array $wizardElements) : array {}
        protected function prepareDependencyOrdering(array $wizardGroup, string $key) {}
        protected function getItem(array $itemConfiguration) : array {}
        protected function getGroupHeader(array $wizardGroup) : array {}
        protected function removeInvalidElements($wizardItems) {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * Returns LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() : LanguageService {}
        /**
         * Returns the current BE user.
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() : BackendUserAuthentication {}
    }

    /**
     * Script Class for rendering the Table Wizard
     */
    class TableController extends \typo3\cms\backend\controller\wizard\abstractwizardcontroller {
        /**
         * Content accumulation for the module.
         *
         * @var string
         */
        public $content;
        /**
         * If TRUE, <input> fields are shown instead of textareas.
         *
         * @var bool
         */
        public $inputStyle;
        /**
         * If set, the string version of the content is interpreted/written as XML
         * instead of the original line-based kind. This variable still needs binding
         * to the wizard parameters - but support is ready!
         *
         * @var int
         */
        public $xmlStorage;
        /**
         * Number of new rows to add in bottom of wizard
         *
         * @var int
         */
        public $numNewRows;
        /**
         * Name of field in parent record which MAY contain the number of columns for the table
         * here hardcoded to the value of tt_content. Should be set by FormEngine parameters (from P)
         *
         * @var string
         */
        public $colsFieldName;
        /**
         * Wizard parameters, coming from FormEngine linking to the wizard.
         *
         * @var array
         */
        public $P;
        /**
         * The array which is constantly submitted by the multidimensional form of this wizard.
         *
         * @var array
         */
        public $TABLECFG;
        /**
         * Table parsing
         * quoting of table cells
         *
         * @var string
         */
        public $tableParsing_quote;
        /**
         * delimiter between table cells
         *
         * @var string
         */
        public $tableParsing_delimiter;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialization of the class
         */
        protected function init() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Main function, rendering the table wizard
         */
        public function main() {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * Draws the table wizard content
         *
         * @return string HTML content for the form.
         * @throws \RuntimeException
         */
        public function tableWizard() {}
/** @var FlexFormTools $flexFormTools */
        public function getConfigCode(/** @var FlexFormTools $flexFormTools */
$row) {}
        public function getTableHTML($configuration) {}
        /**
         * Detects if a control button (up/down/around/delete) has been pressed for an item and accordingly it will
         * manipulate the internal TABLECFG array
         *
         * @internal
         */
        public function changeFunc() {}
        public function cfgArray2CfgString($cfgArr) {}
        public function cfgString2CfgArray($configurationCode, $columns) {}
    }

    /**
     * Script Class for redirecting a backend user to the editing form when an "Edit wizard" link was clicked in FormEngine somewhere
     */
    class EditController extends \typo3\cms\backend\controller\wizard\abstractwizardcontroller {
        /**
         * Wizard parameters, coming from FormEngine linking to the wizard.
         *
         * @var array
         */
        public $P;
        /**
         * Boolean; if set, the window will be closed by JavaScript
         *
         * @var int
         */
        public $doClose;
        /**
         * A little JavaScript to close the open window.
         *
         * @var string
         */
        protected $closeWindow;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialization of the script
         */
        protected function init() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Main function
         * Makes a header-location redirect to an edit form IF POSSIBLE from the passed data - otherwise the window will
         * just close.
         *
         * @return string
         */
        public function main() {}
    }

    /**
     * Script Class for adding new items to a group/select field. Performs proper redirection as needed.
     * Script is typically called after new child record was added and then adds the new child to select value of parent.
     */
    class AddController extends \typo3\cms\backend\controller\wizard\abstractwizardcontroller {
        /**
         * Content accumulation for the module.
         *
         * @var string
         */
        public $content;
        /**
         * If set, the DataHandler class is loaded and used to add the returning ID to the parent record.
         *
         * @var int
         */
        public $processDataFlag;
        /**
         * Create new record -pid (pos/neg). If blank, return immediately
         *
         * @var int
         */
        public $pid;
        /**
         * The parent table we are working on.
         *
         * @var string
         */
        public $table;
        /**
         * Loaded with the created id of a record FormEngine returns ...
         *
         * @var int
         */
        public $id;
        /**
         * Wizard parameters, coming from TCEforms linking to the wizard.
         *
         * @var array
         */
        public $P;
        /**
         * Information coming back from the FormEngine script, telling what the table/id was of the newly created record.
         *
         * @var array
         */
        public $returnEditConf;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialization of the class.
         */
        protected function init() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Main function
         * Will issue a location-header, redirecting either BACK or to a new FormEngine instance...
         */
        public function main() {}
    }

    /**
     * Class AbstractWizardController
     */
    class AbstractWizardController {
        protected function checkEditAccess($table, $uid) {}
        /**
         * Returns an instance of BackendUserAuthentication
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * Returns an instance of LanguageService
         *
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns an instance of DocumentTemplate
         *
         * @return DocumentTemplate
         */
        protected function getDocumentTemplate() {}
    }

    /**
     * Receives ajax request from FormEngine suggest wizard and creates suggest answer as json result
     */
    class SuggestWizardController {
        public function searchAction(ServerRequestInterface $request) : ResponseInterface {}
        protected function isTableHidden(array $tableConfig) {}
        protected function currentBackendUserMayAccessTable(array $tableConfig) {}
        protected function getConfigurationForTable($queryTable, array $wizardConfig, array $TSconfig, $table, $field) {}
        protected function getTablesToQueryFromFieldConfiguration(array $fieldConfig) {}
        protected function getWhereClause(array $fieldConfig) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Script Class for redirecting the user to the Web > List module if a wizard-link has been clicked in FormEngine
     */
    class ListController extends \typo3\cms\backend\controller\wizard\abstractwizardcontroller {
        /**
         * @var int
         */
        public $pid;
        /**
         * Wizard parameters, coming from FormEngine linking to the wizard.
         *
         * @var array
         */
        public $P;
        /**
         * Table to show, if none, then all tables are listed in list module.
         *
         * @var string
         */
        public $table;
        /**
         * Page id to list.
         *
         * @var string
         */
        public $id;

        /**
         * Initialization of the class, setting GPvars.
         */
        public function __construct() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Main function
         * Will issue a location-header, redirecting either BACK or to a new FormEngine instance...
         */
        public function main() {}
    }

}

namespace TYPO3\CMS\Backend\Controller\ContentElement {
    /**
     * Script Class for showing information about an item.
     */
    class ElementInformationController {
        /**
         * Record table name
         *
         * @var string
         */
        public $table;
        /**
         * Record uid
         *
         * @var int
         */
        public $uid;
        /**
         * @var string
         */
        protected $permsClause;
        /**
         * @var bool
         */
        public $access;
        /**
         * Which type of element:
         * - "file"
         * - "db"
         *
         * @var string
         */
        public $type;
        /**
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * For type "db": Set to page record of the parent page of the item set
         * (if type="db")
         *
         * @var array
         */
        public $pageInfo;
        /**
         * Database records identified by table/uid
         *
         * @var array
         */
        protected $row;
        /**
         * @var \TYPO3\CMS\Core\Resource\File
         */
        protected $fileObject;
        /**
         * @var Folder
         */
        protected $folderObject;
        /**
         * @var IconFactory
         */
        protected $iconFactory;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Determines if table/uid point to database record or file and
         * if user has access to view information
         */
        public function init() {}
        /**
         * Init database records (table)
         */
        protected function initDatabaseRecord() {}
        /**
         * Init file/folder parameters
         */
        protected function initFileOrFolderRecord() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Compiles the whole content to be outputted, which is then set as content to the moduleTemplate
         * There is a hook to do a custom rendering of a record.
         */
        public function main() {}
        /**
         * Get page title with icon, table title and record title
         *
         * @return array
         */
        protected function getPageTitle() : array {}
        /**
         * Get preview for current record
         *
         * @return array
         */
        protected function getPreview() : array {}
        /**
         * Get property array for html table
         *
         * @return array
         */
        protected function getPropertiesForTable() : array {}
        /**
         * Get references section (references from and references to current record)
         *
         * @return array
         */
        protected function getReferences() : array {}
        /**
         * Get a back button, if a returnUrl was provided
         *
         * @return array
         */
        protected function getBackButton() : array {}
        public function getLabelForTableColumn($tableName, $fieldName) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function getRecordActions(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$uid) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function makeRef(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$ref) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function makeRefFrom(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$ref) : array {}
/** @var $queryBuilder \TYPO3\CMS\Core\Database\Query\QueryBuilder */
        protected function transformFileReferenceToRecordReference(/** @var $queryBuilder \TYPO3\CMS\Core\Database\Query\QueryBuilder */
array $referenceRecord) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Script Class for rendering the move-element wizard display
     */
    class MoveElementController {
        /**
         * @var int
         */
        public $sys_language;
        /**
         * @var int
         */
        public $page_id;
        /**
         * @var string
         */
        public $table;
        /**
         * @var string
         */
        public $R_URI;
        /**
         * @var int
         */
        public $input_moveUid;
        /**
         * @var int
         */
        public $moveUid;
        /**
         * @var int
         */
        public $makeCopy;
        /**
         * Pages-select clause
         *
         * @var string
         */
        public $perms_clause;
        /**
         * Content for module accumulated here.
         *
         * @var string
         */
        public $content;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Constructor, initializing internal variables.
         */
        public function init() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Creating the module output.
         */
        public function main() {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Controller for showing the history module of TYPO3s backend
     * @see \TYPO3\CMS\Backend\History\RecordHistory
     */
    class ElementHistoryController {
        /**
         * @var ServerRequestInterface
         */
        protected $request;
        /**
         * @var StandaloneView
         */
        protected $view;
        /**
         * @var RecordHistory
         */
        protected $historyObject;
        /**
         * Display diff or not (0-no diff, 1-inline)
         *
         * @var int
         */
        protected $showDiff;
        /**
         * @var array
         */
        protected $recordCache;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function setPagePath($table, $uid) {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * Displays settings evaluation
         */
        protected function prepareDisplaySettings() {}
        protected function displayMultipleDiff(array $diff) {}
        protected function displayHistory(array $historyEntries) {}
        protected function renderDiff($entry, $table, $rollbackUid = 0) : array {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function buildUrl(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$overrideParameters = [ ]) : string {}
        protected function generateTitle($table, $uid) : string {}
        protected function getRecord($table, $uid) {}
        /** @var StandaloneView $view */
        protected function initializeView() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Gets the current backend user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Script Class for the New Content element wizard
     */
    class NewContentElementController {
        /**
         * Page id
         *
         * @var int
         */
        public $id;
        /**
         * Sys language
         *
         * @var int
         */
        public $sys_language;
        /**
         * Return URL.
         *
         * @var string
         */
        public $R_URI;
        /**
         * If set, the content is destined for a specific column.
         *
         * @var int|null
         */
        public $colPos;
        /**
         * @var int
         */
        public $uid_pid;
        /**
         * Module TSconfig.
         *
         * @var array
         */
        public $modTSconfig;
        /**
         * Internal backend template object
         *
         * @var DocumentTemplate
         */
        public $doc;
        /**
         * Used to accumulate the content of the module.
         *
         * @var string
         */
        public $content;
        /**
         * Access boolean.
         *
         * @var bool
         */
        public $access;
        /**
         * config of the wizard
         *
         * @var array
         */
        public $config;
        /**
         * @var array
         */
        protected $pageInfo;
        /**
         * @var string
         */
        protected $onClickEvent;
        /**
         * @var array
         */
        protected $MCONF;
        /**
         * @var StandaloneView
         */
        protected $view;
        /**
         * @var StandaloneView
         */
        protected $menuItemView;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Constructor, initializing internal variables.
         */
        public function init() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Creating the module output.
         *
         * @throws \UnexpectedValueException
         */
        public function main() {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * Returns the array of elements in the wizard display.
         * For the plugin section there is support for adding elements there from a global variable.
         *
         * @return array
         */
        public function wizardArray() {}
        public function wizard_appendWizards($wizardElements) {}
        public function wizard_getItem($groupKey, $itemKey, $itemConf) {}
        public function wizard_getGroupHeader($groupKey, $wizardGroup) {}
        public function removeInvalidElements($wizardItems) {}
        protected function prepareDependencyOrdering($wizardGroup, $key) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
/** @var StandaloneView $view */
        protected function getFluidTemplateObject(/** @var StandaloneView $view */
string $filename = 'Main.html') : StandaloneView {}
    }

}

namespace TYPO3\CMS\Backend\Search\LiveSearch {
    /**
     * Class for parsing query parameters in backend live search.
     * Detects searches for #pages:23 or #content:mycontent
     */
    class QueryParser {
        const COMMAND_KEY_INDICATOR = '#';
        const COMMAND_SPLIT_INDICATOR = ':';

        /**
         * @var string
         */
        protected $commandKey;
        /**
         * @var string
         */
        protected $tableName;

        protected function extractKeyFromQuery($query) {}
        public function getSearchQueryValue($query) {}
        public function getTableNameFromCommand($query) {}
        public function getId($query) {}
        public function isValidPageJump($query) {}
        public function isValidCommand($query) {}
        public function getCommandForTable($tableName) {}
        public function getCommandForPageJump($query) {}
    }

    /**
     * Class for handling backend live search.
     */
    class LiveSearch {
        const PAGE_JUMP_TABLE = 'pages';
        const RECURSIVE_PAGE_LEVEL = 99;
        const RECORD_TITLE_MAX_LENGTH = 28;
        const GROUP_TITLE_MAX_LENGTH = 15;

        /**
         * @var string
         */
        private $queryString;
        /**
         * @var int
         */
        private $startCount;
        /**
         * @var int
         */
        private $limitCount;
        /**
         * @var string
         */
        protected $userPermissions;
        /**
         * @var \TYPO3\CMS\Backend\Search\LiveSearch\QueryParser
         */
        protected $queryParser;

        /**
         * Initialize access settings
         */
        public function __construct() {}
        public function find($searchQuery) {}
        protected function findPageById($id) {}
        protected function findByGlobalTableList($pageIdList) {}
        protected function findByTable($tableName, $pageIdList, $firstResult, $maxResults) {}
        protected function getRecordArray($queryBuilder, $tableName) {}
        protected function getEditLink($tableName, $row) {}
        protected function getTitleOfCurrentRecordType($tableName) {}
        public function getRecordTitlePrep($title, $titleLength = 0) {}
        protected function makeQuerySearchByTable(QueryBuilder $queryBuilder, $tableName, array $fieldsToSearchWithin) {}
        protected function extractSearchableFieldsFromTable($tableName) {}
        public function setLimitCount($limitCount) {}
        public function setStartCount($startCount) {}
        public function setQueryString($queryString) {}
        protected function getAvailablePageIds($id, $depth) {}
    }

}

namespace TYPO3\CMS\Backend\LoginProvider {
    /**
     * Class UsernamePasswordLoginProvider
     */
    class UsernamePasswordLoginProvider implements \typo3\cms\backend\loginprovider\loginproviderinterface {
        const SIGNAL_getPageRenderer = 'getPageRenderer';

        public function render(StandaloneView $view, PageRenderer $pageRenderer, LoginController $loginController) {}
    }


    /**
     * Interface for Backend Login providers
     */
    interface LoginProviderInterface {
        function render(StandaloneView $view, PageRenderer $pageRenderer, LoginController $loginController) ;
    }

}

namespace TYPO3\CMS\Backend\Http {
    define('TYPO3_MODE', 'BE');

    /**
     * Entry point for the TYPO3 Backend (HTTP requests)
     */
    class Application implements \typo3\cms\core\core\applicationinterface {
        /**
         * @var Bootstrap
         */
        protected $bootstrap;
        /**
         * Number of subdirectories where the entry script is located, relative to PATH_site
         * Usually this is equal to PATH_site = 0
         * @var int
         */
        protected $entryPointLevel;
        /**
         * All available request handlers that can handle backend requests (non-CLI)
         * @var array
         */
        protected $availableRequestHandlers;

        public function __construct($classLoader) {}
        public function run(callable $execute = null) {}
        /**
         * Define constants and variables
         */
        protected function defineLegacyConstants() {}
    }

    /**
     * Dispatcher which resolves a route to call a controller and method (but also a callable)
     */
    class RouteDispatcher extends \typo3\cms\core\http\dispatcher implements \typo3\cms\core\http\dispatcherinterface {
/** @var Route $route */
        public function dispatch(/** @var Route $route */
ServerRequestInterface $request, /** @var Route $route */
ResponseInterface $response) {}
        /**
         * Wrapper method for static form protection utility
         *
         * @return \TYPO3\CMS\Core\FormProtection\AbstractFormProtection
         */
        protected function getFormProtection() {}
        protected function isValidRequest($request) {}
        protected function addAndValidateModuleConfiguration(ServerRequestInterface $request, Route $route) {}
        protected function getModuleConfiguration($moduleName) {}
    }

    /**
     * AJAX dispatcher
     *
     * Main entry point for AJAX calls in the TYPO3 Backend. Based on ?route=/ajax/* of the outside application.
     * Before doing the basic BE-related set up of this request (see the additional calls on $this->bootstrap inside
     * handleRequest()), some AJAX-calls can be made without a valid user, which is determined here.
     *
     * AJAX Requests are typically registered within EXT:myext/Configuration/Backend/AjaxRoutes.php
     */
    class AjaxRequestHandler implements \typo3\cms\core\http\requesthandlerinterface {
        /**
         * Instance of the current TYPO3 bootstrap
         * @var Bootstrap
         */
        protected $bootstrap;
        /**
         * List of requests that don't need a valid BE user
         * @var array
         */
        protected $publicAjaxRoutes;

        public function __construct(Bootstrap $bootstrap) {}
        public function handleRequest(ServerRequestInterface $request) {}
        public function canHandleRequest(ServerRequestInterface $request) {}
        /**
         * Returns the priority - how eager the handler is to actually handle the request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() {}
        protected function isLoggedInBackendUserRequired($routePath) {}
        protected function boot($proceedIfNoUserIsLoggedIn) {}
/** @var RouteDispatcher $dispatcher */
        protected function dispatch(/** @var RouteDispatcher $dispatcher */
ServerRequestInterface $request) {}
    }

    /**
     * General RequestHandler for the TYPO3 Backend. This is used for all Backend requests except for CLI
     * or AJAX calls.
     *
     * If a get/post parameter "route" is set, the Backend Routing is called and searches for a
     * matching route inside the Router. The corresponding controller / action is called then which returns the response.
     *
     * The following get/post parameters are evaluated here:
     *   - route
     *   - token
     */
    class RequestHandler implements \typo3\cms\core\http\requesthandlerinterface {
        /**
         * Instance of the current TYPO3 bootstrap
         * @var Bootstrap
         */
        protected $bootstrap;

        public function __construct(Bootstrap $bootstrap) {}
        public function handleRequest(ServerRequestInterface $request) {}
        protected function boot($proceedIfNoUserIsLoggedIn) {}
        public function canHandleRequest(ServerRequestInterface $request) {}
        /**
         * Returns the priority - how eager the handler is to actually handle the
         * request.
         *
         * @return int The priority of the request handler.
         */
        public function getPriority() {}
/** @var RouteDispatcher $dispatcher */
        protected function dispatch(/** @var RouteDispatcher $dispatcher */
$request) {}
    }

}

namespace TYPO3\CMS\Backend\History {
    /**
     * Class for fetching the history entries of a record (and if it is a page, its subelements
     * as well)
     */
    class RecordHistory {
        /**
         * Maximum number of sys_history steps to show.
         *
         * @var int
         */
        protected $maxSteps;
        /**
         * On a pages table - show sub elements as well.
         *
         * @var int
         */
        protected $showSubElements;
        /**
         * Element reference, syntax [tablename]:[uid]
         *
         * @var string
         */
        protected $element;
        /**
         * sys_history uid which is selected
         *
         * @var int
         */
        public $lastHistoryEntry;
        /**
         * @var array
         */
        public $changeLog;
        /**
         * Internal cache
         * @var array
         */
        protected $pageAccessCache;
        /**
         * Either "table:uid" or "table:uid:field" to know which data should be rolled back
         * @var string
         */
        protected $rollbackFields;

        public function __construct($element = '', $rollbackFields = '') {}
        public function setLastHistoryEntry(int $lastHistoryEntry) {}
        public function setMaxSteps(int $maxSteps) {}
        public function setShowSubElements(bool $showSubElements) {}
        /**
         * Creates change log including sub-elements, filling $this->changeLog
         */
        public function createChangeLog() {}
        /**
         * Whether rollback mode is on
         * @return bool
         */
        public function shouldPerformRollback() {}
        /**
         * An array (0 = tablename, 1 = uid) or false if no element is set
         *
         * @return array|bool
         */
        public function getElementData() {}
        /**
         * @return string named "tablename:uid"
         */
        public function getElementString() : string {}
        /**
         * Perform rollback via DataHandler
         */
        public function performRollback() {}
        /**
         * Creates a diff between the current version of the records and the selected version
         *
         * @return array Diff for many elements
         */
        public function createMultipleDiff() : array {}
        public function getHistoryData(string $table, int $uid, bool $includeSubentries = null, int $lastHistoryEntry = null) : array {}
        public function getHistoryDataForRecord(string $table, int $uid, int $lastHistoryEntry = null) : array {}
        protected function removeFilefields($table, $dataArray) {}
        protected function resolveElement(string $table, int $uid) : int {}
        public function getHistoryEntry(int $lastHistoryEntry) : array {}
        public function findEventsForRecord(string $table, int $uid, int $limit = 0, int $minimumUid = null) : array {}
        protected function hasPageAccess($table, $uid) {}
        protected function sanitizeElementValue($value) {}
        protected function sanitizeRollbackFieldsValue($value) {}
        protected function hasTableAccess($table) {}
        /**
         * Gets the current backend user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return QueryBuilder
         */
        protected function getQueryBuilder() : QueryBuilder {}
    }

}

namespace TYPO3\CMS\Backend\View {
    /**
     * Backend layout for CMS
     */
    class BackendLayoutView implements \typo3\cms\core\singletoninterface {
        /**
         * @var BackendLayout\DataProviderCollection
         */
        protected $dataProviderCollection;
        /**
         * @var array
         */
        protected $selectedCombinedIdentifier;
        /**
         * @var array
         */
        protected $selectedBackendLayout;

        /**
         * Creates this object and initializes data providers.
         */
        public function __construct() {}
        /** @var $dataProviderCollection BackendLayout\DataProviderCollection */
        protected function initializeDataProviderCollection() {}
        public function setDataProviderCollection(BackendLayout\DataProviderCollection $dataProviderCollection) {}
        /**
         * @return BackendLayout\DataProviderCollection
         */
        public function getDataProviderCollection() {}
        public function addBackendLayoutItems(array $parameters) {}
        protected function determinePageId($tableName, array $data) {}
        public function getSelectedCombinedIdentifier($pageId) {}
        protected function getIdentifiersToBeExcluded(array $pageTSconfig) {}
        public function colPosListItemProcFunc(array $parameters) {}
        protected function addColPosListLayoutItems($pageId, $items) {}
        public function getColPosListItemsParsed($id) {}
        protected function addItems($items, $iArray) {}
/** @var \TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching\ConditionMatcher $conditionMatcher */
        public function getSelectedBackendLayout(/** @var \TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching\ConditionMatcher $conditionMatcher */
$pageId) {}
        /**
         * Get default columns layout
         *
         * @return string Default four column layout
         * @static
         */
        public static function getDefaultColumnLayout() {}
        protected function getPage($pageId) {}
        protected function getRootLine($pageId) {}
        /**
         * @return BackendLayout\DataProviderContext
         */
        protected function createDataProviderContext() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        protected function getColumnName($column) {}
    }

    /**
     * Browse pages in Web module
     */
    class PageTreeView extends \typo3\cms\backend\tree\view\browsetreeview {
        /**
         * @var bool
         */
        public $ext_showPageId;
        /**
         * Indicates, whether the ajax call was successful, i.e. the requested page has been found
         *
         * @var bool
         */
        public $ajaxStatus;

        /**
         * Calls init functions
         */
        public function __construct() {}
/** @var $iconFactory IconFactory */
        public function wrapIcon(/** @var $iconFactory IconFactory */
$thePageIcon, /** @var $iconFactory IconFactory */
$row) {}
        public function wrapTitle($title, $row, $bank = 0) {}
        public function printTree($treeArr = '') {}
        public function PMicon($row, $a, $c, $nextCount, $exp) {}
        public function PMiconATagWrap($icon, $cmd, $isExpand = true) {}
        /**
         * Will create and return the HTML code for a browsable tree
         * Is based on the mounts found in the internal array ->MOUNTS (set in the constructor)
         *
         * @return string HTML code for the browsable tree
         */
        public function getBrowsableTree() {}
    }

    /**
     * Child class for the Web > Page module
     */
    class PageLayoutView implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * If TRUE, users/groups are shown in the page info box.
         *
         * @var bool
         */
        public $pI_showUser;
        /**
         * The number of successive records to edit when showing content elements.
         *
         * @var int
         */
        public $nextThree;
        /**
         * If TRUE, disables the edit-column icon for tt_content elements
         *
         * @var bool
         */
        public $pages_noEditColumns;
        /**
         * If TRUE, new-wizards are linked to rather than the regular new-element list.
         *
         * @var bool
         */
        public $option_newWizard;
        /**
         * If set to "1", will link a big button to content element wizard.
         *
         * @var int
         */
        public $ext_function;
        /**
         * If TRUE, elements will have edit icons (probably this is whether the user has permission to edit the page content). Set externally.
         *
         * @var bool
         */
        public $doEdit;
        /**
         * Age prefixes for displaying times. May be set externally to localized values.
         *
         * @var string
         */
        public $agePrefixes;
        /**
         * Array of tables to be listed by the Web > Page module in addition to the default tables.
         *
         * @var array
         */
        public $externalTables;
        /**
         * "Pseudo" Description -table name
         *
         * @var string
         */
        public $descrTable;
        /**
         * If set TRUE, the language mode of tt_content elements will be rendered with hard binding between
         * default language content elements and their translations!
         *
         * @var bool
         */
        public $defLangBinding;
        /**
         * External, static: Configuration of tt_content element display:
         *
         * @var array
         */
        public $tt_contentConfig;
        /**
         * Contains icon/title of pages which are listed in the tables menu (see getTableMenu() function )
         *
         * @var array
         */
        public $activeTables;
        /**
         * @var array
         */
        public $tt_contentData;
        /**
         * Used to store labels for CTypes for tt_content elements
         *
         * @var array
         */
        public $CType_labels;
        /**
         * Used to store labels for the various fields in tt_content elements
         *
         * @var array
         */
        public $itemLabels;
        /**
         * Indicates if all available fields for a user should be selected or not.
         *
         * @var int
         */
        public $allFields;
        /**
         * Number of records to show
         *
         * @var int
         */
        public $showLimit;
        /**
         * Shared module configuration, used by localization features
         *
         * @var array
         */
        public $modSharedTSconfig;
        /**
         * Tables which should not get listed
         *
         * @var string
         */
        public $hideTables;
        /**
         * Containing which fields to display in extended mode
         *
         * @var string[]
         */
        public $displayFields;
        /**
         * Tables which should not list their translations
         *
         * @var string
         */
        public $hideTranslations;
        /**
         * If set, csvList is outputted.
         *
         * @var bool
         */
        public $csvOutput;
        /**
         * Cache for record path
         *
         * @var mixed[]
         */
        public $recPath_cache;
        /**
         * Field, to sort list by
         *
         * @var string
         */
        public $sortField;
        /**
         * default Max items shown per table in "multi-table mode", may be overridden by tables.php
         *
         * @var int
         */
        public $itemsLimitPerTable;
        /**
         * Page select permissions
         *
         * @var string
         */
        public $perms_clause;
        /**
         * Page id
         *
         * @var int
         */
        public $id;
        /**
         * Return URL
         *
         * @var string
         */
        public $returnUrl;
        /**
         * Tablename if single-table mode
         *
         * @var string
         */
        public $table;
        /**
         * Some permissions...
         *
         * @var int
         */
        public $calcPerms;
        /**
         * Mode for what happens when a user clicks the title of a record.
         *
         * @var string
         */
        public $clickTitleMode;
        /**
         * Levels to search down.
         *
         * @var int
         */
        public $searchLevels;
        /**
         * "LIMIT " in SQL...
         *
         * @var int
         */
        public $iLimit;
        /**
         * Set to the total number of items for a table when selecting.
         *
         * @var string
         */
        public $totalItems;
        /**
         * TSconfig which overwrites TCA-Settings
         *
         * @var mixed[][]
         */
        public $tableTSconfigOverTCA;
        /**
         * Loaded with page record with version overlay if any.
         *
         * @var string[]
         */
        public $pageRecord;
        /**
         * Used for tracking duplicate values of fields
         *
         * @var string[]
         */
        public $duplicateStack;
        /**
         * Fields to display for the current table
         *
         * @var string[]
         */
        public $setFields;
        /**
         * Current script name
         *
         * @var string
         */
        public $script;
        /**
         * If TRUE, records are listed only if a specific table is selected.
         *
         * @var bool
         */
        public $listOnlyInSingleTableMode;
        /**
         * JavaScript code accumulation
         *
         * @var string
         */
        public $JScode;
        /**
         * Pointer for browsing list
         *
         * @var int
         */
        public $firstElementNumber;
        /**
         * Counting the elements no matter what...
         *
         * @var int
         */
        public $eCounter;
        /**
         * Search string
         *
         * @var string
         */
        public $searchString;
        /**
         * default Max items shown per table in "single-table mode", may be overridden by tables.php
         *
         * @var int
         */
        public $itemsLimitSingleTable;
        /**
         * Field, indicating to sort in reverse order.
         *
         * @var bool
         */
        public $sortRev;
        /**
         * String, can contain the field name from a table which must have duplicate values marked.
         *
         * @var string
         */
        public $duplicateField;
        /**
         * Specify a list of tables which are the only ones allowed to be displayed.
         *
         * @var string
         */
        public $tableList;
        /**
         * Array of collapsed / uncollapsed tables in multi table view
         *
         * @var int[][]
         */
        public $tablesCollapsed;
        /**
         * @var array[] Module configuration
         */
        public $modTSconfig;
        /**
         * HTML output
         *
         * @var string
         */
        public $HTMLcode;
        /**
         * Thumbnails on records containing files (pictures)
         *
         * @var bool
         */
        public $thumbs;
        /**
         * Used for tracking next/prev uids
         *
         * @var int[][]
         */
        public $currentTable;
        /**
         * OBSOLETE - NOT USED ANYMORE. leftMargin
         *
         * @var int
         */
        public $leftMargin;
        /**
         * Decides the columns shown. Filled with values that refers to the keys of the data-array. $this->fieldArray[0] is the title column.
         *
         * @var array
         */
        public $fieldArray;
        /**
         * Set to zero, if you don't want a left-margin with addElement function
         *
         * @var int
         */
        public $setLMargin;
        /**
         * Contains page translation languages
         *
         * @var array
         */
        public $pageOverlays;
        /**
         * Counter increased for each element. Used to index elements for the JavaScript-code that transfers to the clipboard
         *
         * @var int
         */
        public $counter;
        /**
         * Contains sys language icons and titles
         *
         * @var array
         */
        public $languageIconTitles;
        /**
         * Script URL
         *
         * @var string
         */
        public $thisScript;
        /**
         * If set this is <td> CSS-classname for odd columns in addElement. Used with db_layout / pages section
         *
         * @var string
         */
        public $oddColumnsCssClass;
        /**
         * Not used in this class - but maybe extension classes...
         * Max length of strings
         *
         * @var int
         */
        public $fixedL;
        /**
         * @var TranslationConfigurationProvider
         */
        public $translateTools;
        /**
         * Keys are fieldnames and values are td-parameters to add in addElement(), please use $addElement_tdCSSClass for CSS-classes;
         *
         * @var array
         */
        public $addElement_tdParams;
        /**
         * @var int
         */
        public $no_noWrap;
        /**
         * @var int
         */
        public $showIcon;
        /**
         * Keys are fieldnames and values are td-css-classes to add in addElement();
         *
         * @var array
         */
        public $addElement_tdCssClass;
        /**
         * @var \TYPO3\CMS\Backend\Clipboard\Clipboard
         */
        protected $clipboard;
        /**
         * User permissions
         *
         * @var int
         */
        public $ext_CALC_PERMS;
        /**
         * Current ids page record
         *
         * @var array
         */
        protected $pageinfo;
        /**
         * Caches the available languages in a colPos
         *
         * @var array
         */
        protected $languagesInColumnCache;
        /**
         * Caches the amount of content elements as a matrix
         *
         * @var array
         * @internal
         */
        protected $contentElementCache;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * Stores whether a certain language has translations in it
         *
         * @var array
         */
        protected $languageHasTranslationsCache;
        /**
         * @var LocalizationController
         */
        protected $localizationController;
        /**
         * Override the page ids taken into account by getPageIdConstraint()
         *
         * @var array
         */
        protected $overridePageIdList;
        /**
         * Override/add urlparameters in listUrl() method
         *
         * @var string[]
         */
        protected $overrideUrlParameters;
        /**
         * Array with before/after setting for tables
         * Structure:
         * 'tableName' => [
         *    'before' => ['A', ...]
         *    'after' => []
         *  ]
         * @var array[]
         */
        protected $tableDisplayOrder;

        /**
         * Construct to initialize class variables.
         */
        public function __construct() {}
        public function getTable($table, $id, $fields = '') {}
        public function getExternalTables($id, $table) {}
        public function getTable_pages($id) {}
/** @var $pageRenderer PageRenderer */
        public function getTable_tt_content(/** @var $pageRenderer PageRenderer */
$id) {}
        public function makeOrdinaryList($table, $id, $fList, $icon = false, $addWhere = '') {}
        public function dataFields($fieldArr, $table, $row, $out = [ ]) {}
        public function headerFields($fieldArr, $table, $out = [ ]) {}
        protected function getContentRecordsPerColumn($table, $id, array $columns, $additionalWhereClause = '') {}
        protected function getPageRecordsRecursive(int $pid, int $depth, string $iconPrefix = '', array $rows = [ ]) : array {}
        public function pages_drawItem($row, $fieldArr) {}
        protected function getPagesTableFieldValue($field, array $row) {}
        public function tt_content_drawColHeader($colName, $editParams = '') {}
        protected function tt_content_drawPasteIcon($pasteItem, $pasteTitle, $copyMode, $cssClass, $title) {}
        protected function tt_content_drawFooter(array $row) {}
        public function tt_content_drawHeader($row, $space = 0, $disableMoveAndNewButtons = false, $langMode = false, $dragDropEnabled = false) {}
        protected function isDragAndDropAllowed(array $row) {}
/** @var FlexFormService $flexFormService */
        public function tt_content_drawItem(/** @var FlexFormService $flexFormService */
$row) {}
        protected function generateListForCTypeMenu(array $row) {}
        public function getNonTranslatedTTcontentUids($defaultLanguageUids, $id, $lP) {}
        public function newLanguageButton($defaultLanguageUids, $lP, $colPos = 0) {}
        public function newContentElementOnClick($id, $colPos, $sys_language) {}
        public function linkEditContent($str, $row) {}
        public function languageSelector($id) {}
        public function getResult(Statement $result, string $table = 'tt_content') : array {}
        /**
         * Initializes the clipboard for generating paste links
         *
         *
         * @see \TYPO3\CMS\Recordlist\RecordList::main()
         * @see \TYPO3\CMS\Backend\Controller\ContextMenuController::clipboardAction()
         * @see \TYPO3\CMS\Filelist\Controller\FileListController::indexAction()
         */
        protected function initializeClipboard() {}
        protected function generateTtContentDataArray(array $rowArray) {}
        public function numberOfRecords($table, $pid) {}
        public function renderText($input) {}
        public function getIcon($table, $row, $enabledClickMenuItems = '') {}
        public function getProcessedValue($table, $fieldList, array $row, array $info) {}
        public function isDisabled($table, $row) {}
        public function noEditIcon($label = 'noEditItems') {}
        public function getTableMenu($id) {}
        public function getThumbCodeUnlinked($row, $table, $field) {}
/**
 * Build up caches
 */
        protected function checkIfTranslationsExistInLanguage(/**
 * Build up caches
 */
array $contentElements, /**
 * Build up caches
 */
$language) {}
        /**
         * @return BackendLayoutView
         */
        protected function getBackendLayoutView() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return PageLayoutController
         */
        protected function getPageLayoutController() {}
        public function start($id, $table, $pointer, $search = '', $levels = 0, $showLimit = 0) {}
        /**
         * Traverses the table(s) to be listed and renders the output code for each:
         * The HTML is accumulated in $this->HTMLcode
         * Finishes off with a stopper-gif
         */
        public function generateList() {}
/** @var $iconFactory IconFactory */
        public function getSearchBox(/** @var $iconFactory IconFactory */
$formFields = true) {}
        /**
         * Setting the field names to display in extended list.
         * Sets the internal variable $this->setFields
         */
        public function setDispFields() {}
        public function thumbCode($row, $table, $field) {}
        public function getQueryBuilder(string $table, int $pageId, array $additionalConstraints = [ ], array $fields = ['*']) : QueryBuilder {}
        protected function prepareQueryBuilder(string $table, int $pageId, array $fieldList = ['*'], array $additionalConstraints = [ ], QueryBuilder $queryBuilder, bool $addSorting = true) : QueryBuilder {}
        public function setTotalItems(string $table, int $pageId, array $constraints) {}
        public function makeSearchString($table, $currentPid = -1) {}
        protected function getSearchFields($tableName) {}
        public function linkWrapTable($table, $code) {}
        public function linkWrapItems($table, $uid, $code, $row) {}
        public function linkUrlMail($code, $testString) {}
        public function listURL($altId = '', $table = '-1', $exclList = '') {}
        /**
         * Returns "requestUri" - which is basically listURL
         * @return string Content of ->listURL()
         */
        public function requestUri() {}
        public function makeFieldList($table, $dontCheckUser = false, $addDateFields = false) {}
        public function localizationRedirect($justLocalized) {}
        public function setOverrideUrlParameters(array $urlParameters) {}
        public function setTableDisplayOrder(array $orderInformation) {}
        /**
         * @return array
         */
        public function getOverridePageIdList() : array {}
        public function setOverridePageIdList(array $overridePageIdList) {}
/** @var PageTreeView $tree */
        protected function getSearchableWebmounts(/** @var PageTreeView $tree */
$id, /** @var PageTreeView $tree */
$depth, /** @var PageTreeView $tree */
$perms_clause) {}
        protected function addPageIdConstraint(string $tableName, QueryBuilder $queryBuilder) : QueryBuilder {}
        protected function logDeprecation(string $index) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * Sets the script url depending on being a module or script request
         */
        protected function determineScriptUrl() {}
        public function addElement($h, $icon, $data, $rowParams = '', $_ = '', $_2 = '', $colType = 'td') {}
        /**
         * Dummy function, used to write the top of a table listing.
         */
        public function writeTop() {}
        public function fwd_rwd_nav($table = '') {}
        public function fwd_rwd_HTML($type, $pointer, $table = '') {}
        /**
         * @return string
         */
        protected function getThisScript() {}
        /**
         * Returning JavaScript for ClipBoard functionality.
         *
         * @return string
         */
        public function CBfunctions() {}
        /**
         * Initializes page languages and icons
         */
        public function initializeLanguages() {}
        public function languageFlag($sys_language_uid, $addAsAdditionalText = true) {}
        /**
         * Gets an instance of TranslationConfigurationProvider
         *
         * @return TranslationConfigurationProvider
         */
        protected function getTranslateTools() {}
        protected function generateReferenceToolTip($references, $launchViewParameter = '') {}
        /**
         * Returns the language service
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Decorates the main template view. Should be used as view if you want to use
     * Fluid templates in a backend module in order to have a consistent backend.
     *
     * @api
     */
    class BackendTemplateView implements \typo3\cms\extbase\mvc\view\viewinterface {
        /**
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * @var TemplateView
         */
        protected $templateView;

        public function injectModuleTemplate(ModuleTemplate $moduleTemplate) {}
        public function injectTemplateView(TemplateView $templateView) {}
        /**
         * @return ModuleTemplate
         */
        public function getModuleTemplate() {}
        public function render($actionName = null) {}
        public function setControllerContext(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
        public function assign($key, $value) {}
        public function assignMultiple(array $values) {}
        public function canRender(ControllerContext $controllerContext) {}
        /**
         * Init view
         */
        public function initializeView() {}
        public function setTemplateRootPaths(array $templateRootPaths) {}
        public function setPartialRootPaths(array $partialRootPaths) {}
        public function setLayoutRootPaths(array $layoutRootPaths) {}
    }


    /**
     * Interface for classes which hook into PageLayoutView and do additional
     * tt_content_drawItem processing.
     */
    interface PageLayoutViewDrawItemHookInterface {
        function preProcess(\TYPO3\CMS\Backend\View\PageLayoutView $parentObject, $drawItem, $headerContent, $itemContent, array $row) ;
    }

    /**
     * Interface for classes which hook into PageLayoutView and do additional
     * tt_content_drawFooter processing.
     */
    interface PageLayoutViewDrawFooterHookInterface {
        function preProcess(\TYPO3\CMS\Backend\View\PageLayoutView $parentObject, $info, array $row) ;
    }

}

namespace TYPO3\CMS\Backend\View\Wizard\Element {
    /**
     * Backend layout element
     */
    class BackendLayoutWizardElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * @var array
         */
        protected $rows;
        /**
         * @var int
         */
        protected $colCount;
        /**
         * @var int
         */
        protected $rowCount;

        /**
         * @return array
         */
        public function render() {}
        /**
         * Initialize wizard
         */
        protected function init() {}
    }

}

namespace TYPO3\CMS\Backend\View\BackendLayout {
    /**
     * Collection of backend layout data providers.
     */
    class DataProviderCollection implements \typo3\cms\core\singletoninterface {
        /**
         * @var array|DataProviderInterface[]
         */
        protected $dataProviders;
        /**
         * @var array
         */
        protected $results;

        public function add($identifier, $classNameOrObject) {}
        public function getBackendLayoutCollections(DataProviderContext $dataProviderContext) {}
        public function getBackendLayout($combinedIdentifier, $pageId) {}
        protected function createBackendLayoutCollection($identifier) {}
    }

    /**
     * Class to represent a backend layout.
     */
    class BackendLayout {
        /**
         * @var string
         */
        protected $identifier;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var string
         */
        protected $iconPath;
        /**
         * @var string
         */
        protected $configuration;
        /**
         * @var array
         */
        protected $data;

        public static function create($identifier, $title, $configuration) {}
        public function __construct($identifier, $title, $configuration) {}
        /**
         * @return string
         */
        public function getIdentifier() {}
        public function setIdentifier($identifier) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getIconPath() {}
        public function setIconPath($iconPath) {}
        /**
         * @return string
         */
        public function getConfiguration() {}
        public function setConfiguration($configuration) {}
        /**
         * @return array
         */
        public function getData() {}
        public function setData(array $data) {}
    }

    /**
     * Collection of backend layouts.
     */
    class BackendLayoutCollection {
        /**
         * @var string
         */
        protected $identifier;
        /**
         * @var array|BackendLayout[]
         */
        protected $backendLayouts;

        public function __construct($identifier) {}
        /**
         * @return string
         */
        public function getIdentifier() {}
        public function setIdentifier($identifier) {}
        public function add(BackendLayout $backendLayout) {}
        public function get($identifier) {}
        /**
         * Gets all backend layouts in this collection.
         *
         * @return array|BackendLayout[]
         */
        public function getAll() {}
    }

    /**
     * Backend layout data provider class
     */
    class DefaultDataProvider implements \typo3\cms\backend\view\backendlayout\dataproviderinterface {
        /**
         * @var string
         * Table name for backend_layouts
         */
        protected $tableName;

        public function addBackendLayouts(DataProviderContext $dataProviderContext, BackendLayoutCollection $backendLayoutCollection) {}
        public function getBackendLayout($identifier, $pageId) {}
        /**
         * Creates a backend layout with the default configuration.
         *
         * @return BackendLayout
         */
        protected function createDefaultBackendLayout() {}
        protected function createBackendLayout(array $data) {}
        protected function getIconPath(array $icon) {}
        protected function getLayoutData($fieldName, array $pageTsConfig, $pageUid) {}
        protected function getStoragePid(array $pageTsConfig) {}
        protected function getPageTSconfigIds(array $pageTsConfig) {}
    }

    /**
     * Context that is forwarded to backend layout data providers.
     */
    class DataProviderContext implements \typo3\cms\core\singletoninterface {
        /**
         * @var int
         */
        protected $pageId;
        /**
         * @var string
         */
        protected $tableName;
        /**
         * @var string
         */
        protected $fieldName;
        /**
         * @var array
         */
        protected $data;
        /**
         * @var array
         */
        protected $pageTsConfig;

        /**
         * @return int
         */
        public function getPageId() {}
        public function setPageId($pageId) {}
        /**
         * @return string
         */
        public function getTableName() {}
        public function setTableName($tableName) {}
        /**
         * @return string
         */
        public function getFieldName() {}
        public function setFieldName($fieldName) {}
        /**
         * @return array
         */
        public function getData() {}
        public function setData(array $data) {}
        /**
         * @return array
         */
        public function getPageTsConfig() {}
        public function setPageTsConfig(array $pageTsConfig) {}
    }


    /**
     * Interface for classes which hook into BackendLayoutDataProvider
     * to provide additional backend layouts from various sources.
     */
    interface DataProviderInterface {
        function addBackendLayouts(DataProviderContext $dataProviderContext, BackendLayoutCollection $backendLayoutCollection) ;
        function getBackendLayout($identifier, $pageId) ;
    }

}

namespace TYPO3\CMS\Backend\Command {
    /**
     * Core function for unlocking the TYPO3 Backend
     */
    class UnlockBackendCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        /**
         * Location of the file name
         *
         * @return string
         */
        protected function getLockFileName() {}
    }

    /**
     * Core function for locking the TYPO3 Backend
     */
    class LockBackendCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        /**
         * Location of the file name
         *
         * @return string
         */
        protected function getLockFileName() {}
    }

    /**
     * Core function to check/update the Reference Index
     */
    class ReferenceIndexUpdateCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
/** @var ReferenceIndex $referenceIndex */
        protected function execute(/** @var ReferenceIndex $referenceIndex */
InputInterface $input, /** @var ReferenceIndex $referenceIndex */
OutputInterface $output) {}
    }

}

namespace TYPO3\CMS\Backend\Routing {
    /**
     * This is a single entity for a Route.
     *
     * The architecture is highly inspired by the Symfony Routing Component.
     */
    class Route {
        /**
         * @var string
         */
        protected $path;
        /**
         * @var array
         */
        protected $options;

        public function __construct($path, $options) {}
        /**
         * Returns the path
         *
         * @return string The path pattern
         */
        public function getPath() {}
        public function setPath($pattern) {}
        /**
         * Returns the options set
         *
         * @return array The options
         */
        public function getOptions() {}
        public function setOptions(array $options) {}
        public function setOption($name, $value) {}
        public function getOption($name) {}
        public function hasOption($name) {}
    }

    /**
     * Implementation of a class for adding routes, collecting throughout the Bootstrap
     * to register all sorts of Backend Routes, and to fetch the main Collection in order
     * to resolve a route (see ->match() and ->matchRequest()).
     *
     * Ideally, the Router is solely instantiated and accessed via the Bootstrap, the RequestHandler and the UriBuilder.
     *
     * See \TYPO3\CMS\Backend\Http\RequestHandler for more details on route matching() and Bootstrap->initializeBackendRouting().
     *
     * The architecture is inspired by the Symfony Routing Component.
     */
    class Router implements \typo3\cms\core\singletoninterface {
        /**
         * All routes used in the Backend
         *
         * @var Route[]
         */
        protected $routes;

        public function addRoute($routeIdentifier, $route) {}
        /**
         * Fetch all registered routes, only use in UriBuilder
         *
         * @return Route[]
         */
        public function getRoutes() {}
        public function match($pathInfo) {}
        public function matchRequest(ServerRequestInterface $request) {}
    }

    /**
     * Main UrlGenerator for creating URLs for the Backend. Generates a URL based on
     * an identifier defined by Configuration/Backend/Routes.php of an extension,
     * and adds some more parameters to the URL.
     *
     * Currently only available and useful when called from Router->generate() as the information
     * about possible routes needs to be handed over.
     */
    class UriBuilder {
        const ABSOLUTE_PATH = 'absolute';
        const ABSOLUTE_URL = 'url';

        /**
         * @var Route[]
         */
        protected $routes;

        /**
         * Fetches the available routes from the Router to be used for generating routes
         */
        protected function loadBackendRoutes() {}
        public function buildUriFromRoutePath($pathInfo, $parameters = [ ], $referenceType = self::ABSOLUTE_PATH) {}
        public function buildUriFromRoute($name, $parameters = [ ], $referenceType = self::ABSOLUTE_PATH) {}
        public function buildUriFromModule($moduleName, $parameters = [ ], $referenceType = self::ABSOLUTE_PATH) {}
        protected function buildUri($parameters, $referenceType) {}
    }

}

namespace TYPO3\CMS\Backend\Routing\Exception {
    /**
     * Exception thrown when a resource was not found.
     */
    class ResourceNotFoundException extends \typo3\cms\core\exception {}

    /**
     * Exception thrown when a route does not exist
     */
    class RouteNotFoundException extends \typo3\cms\core\exception {}

    /**
     * Exception thrown when request token was invalid
     */
    class InvalidRequestTokenException extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Backend\Domain\Repository\Module {
    /**
     * Repository for backend module menu
     * compiles all data from $GLOBALS[TBE_MODULES]
     */
    class BackendModuleRepository implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Backend\Module\ModuleStorage
         */
        protected $moduleStorage;

        /**
         * Constructs the module menu and gets the Singleton instance of the menu
         */
        public function __construct() {}
        public function loadAllowedModules(array $excludeGroupNames = [ ]) {}
        public function findByGroupName($groupName = '') {}
        public function findByModuleName($name) {}
        public function findByModuleNameInGivenEntries($name, \SplObjectStorage $entries) {}
        protected function convertRawModuleDataToModuleMenuObject(array $rawModuleData) {}
/** @var $entry \TYPO3\CMS\Backend\Domain\Model\Module\BackendModule */
        protected function createEntryFromRawData(/** @var $entry \TYPO3\CMS\Backend\Domain\Model\Module\BackendModule */
array $module) {}
        /**
         * Creates the "third level" menu entries (submodules for the info module for
         * example) from the TBE_MODULES_EXT array
         */
        protected function createMenuEntriesForTbeModulesExt() {}
        /**
         * Return language service instance
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * loads the module menu from the moduleloader based on $GLOBALS['TBE_MODULES']
         * and compiles an array with all the data needed for menu etc.
         *
         * @return array
         */
        public function getRawModuleMenuData() {}
        protected function removeHiddenModules($loadedModules) {}
        protected function getModuleIcon($moduleKey, $moduleData) {}
    }

}

namespace TYPO3\CMS\Backend\Domain\Repository\Localization {
    /**
     * Repository for record localizations
     */
    class LocalizationRepository {
        public function fetchOriginLanguage($pageId, $colPos, $localizedLanguage) {}
        public function getLocalizedRecordCount($pageId, $colPos, $languageId) {}
        public function fetchAvailableLanguages($pageId, $colPos, $languageId) {}
        /**
         * Builds additional query constraints to exclude hidden languages and
         * limit a backend user to its allowed languages (unless the user is an admin)
         *
         * @return array
         */
        protected function getAllowedLanguageConstraintsForBackendUser() : array {}
        public function getRecordsToCopyDatabaseResult($pageId, $colPos, $destLanguageId, $languageId, $fields = '*') {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        protected function getQueryBuilderWithWorkspaceRestriction(string $tableName) : QueryBuilder {}
    }

}

namespace TYPO3\CMS\Backend\Domain\Model\Module {
    /**
     * Model for menu entries
     */
    class BackendModule {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var string
         */
        protected $icon;
        /**
         * @var string
         */
        protected $link;
        /**
         * @var string
         */
        protected $onClick;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var string
         */
        protected $navigationComponentId;
        /**
         * @var string
         */
        protected $navigationFrameScript;
        /**
         * @var string
         */
        protected $navigationFrameScriptParameters;
        /**
         * @var \SplObjectStorage
         */
        protected $children;

        /**
         * construct
         */
        public function __construct() {}
        public function setChildren($children) {}
        /**
         * Get children
         *
         * @return \SplObjectStorage
         */
        public function getChildren() {}
        public function addChild(\TYPO3\CMS\Backend\Domain\Model\Module\BackendModule $child) {}
        public function setIcon($icon) {}
        /**
         * Get icon
         *
         * @return string
         */
        public function getIcon() {}
        public function setName($name) {}
        /**
         * Get name
         *
         * @return string
         */
        public function getName() {}
        public function setTitle($title) {}
        /**
         * Get Title
         *
         * @return string
         */
        public function getTitle() {}
        public function setLink($link) {}
        /**
         * Get Link
         *
         * @return string
         */
        public function getLink() {}
        public function setDescription($description) {}
        /**
         * Get Description
         *
         * @return string
         */
        public function getDescription() {}
        public function setNavigationComponentId($navigationComponentId) {}
        /**
         * Get Navigation Component Id
         *
         * @return string
         */
        public function getNavigationComponentId() {}
        public function setNavigationFrameScript($navigationFrameScript) {}
        /**
         * @return string
         */
        public function getNavigationFrameScript() {}
        public function setNavigationFrameScriptParameters($navigationFrameScriptParameters) {}
        /**
         * @return string
         */
        public function getNavigationFrameScriptParameters() {}
        public function setOnClick($onClick) {}
        /**
         * Get onClick
         *
         * @return string
         */
        public function getOnClick() {}
    }

}

namespace TYPO3\CMS\Backend\RecordList {
    /**
     * Displays the page tree for browsing database records.
     */
    class ElementBrowserRecordList extends \typo3\cms\recordlist\recordlist\databaserecordlist {
        /**
         * Table name of the field pointing to this element browser
         *
         * @var string
         */
        protected $relatingTable;
        /**
         * Field name of the field pointing to this element browser
         *
         * @var string
         */
        protected $relatingField;

        public function linkWrapItems($table, $uid, $code, $row) {}
        protected function isRowListingConditionFulfilled($table, $row) {}
        public function setRelatingTableAndField($tableName, $fieldName) {}
        /**
         * Local version that sets allFields to TRUE to support userFieldSelect
         *
         * @see fieldSelectBox
         */
        public function generateList() {}
    }

    /**
     * Library with a single function addElement that returns table
     * rows based on some input.
     *
     * Base for class listing of database records and files in the
     * modules Web>List and File>Filelist
     * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
     */
    abstract class AbstractRecordList {
        /**
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected $id;
        /**
         * default Max items shown
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $iLimit;
        /**
         * OBSOLETE - NOT USED ANYMORE. leftMargin
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $leftMargin;
        /**
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $showIcon;
        /**
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $no_noWrap;
        /**
         * If set this is <td> CSS-classname for odd columns in addElement. Used with db_layout / pages section
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $oddColumnsCssClass;
        /**
         * Decides the columns shown. Filled with values that refers to the keys of the data-array. $this->fieldArray[0] is the title column.
         *
         * @var array
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $fieldArray;
        /**
         * Keys are fieldnames and values are td-parameters to add in addElement(), please use $addElement_tdCSSClass for CSS-classes;
         *
         * @var array
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $addElement_tdParams;
        /**
         * Keys are fieldnames and values are td-css-classes to add in addElement();
         *
         * @var array
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $addElement_tdCssClass;
        /**
         * Not used in this class - but maybe extension classes...
         * Max length of strings
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $fixedL;
        /**
         * Script URL
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $thisScript;
        /**
         * Set to zero, if you don't want a left-margin with addElement function
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $setLMargin;
        /**
         * Counter increased for each element. Used to index elements for the JavaScript-code that transfers to the clipboard
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $counter;
        /**
         * This could be set to the total number of items. Used by the fwd_rew_navigation...
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $totalItems;
        /**
         * Internal (used in this class.)
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $firstElementNumber;
        /**
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $eCounter;
        /**
         * String with accumulated HTML content
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $HTMLcode;
        /**
         * Contains page translation languages
         *
         * @var array
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $pageOverlays;
        /**
         * Contains sys language icons and titles
         *
         * @var array
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $languageIconTitles;
        /**
         * @var TranslationConfigurationProvider
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $translateTools;
        /**
         * @var IconFactory
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected $iconFactory;

        /**
         * Constructor
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public function __construct() {}
        /**
         * Sets the script url depending on being a module or script request
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected function determineScriptUrl() {}
        /**
         * @return string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected function getThisScript() {}
        public function addElement($h, $icon, $data, $rowParams = '', $_ = '', $_2 = '', $colType = 'td') {}
        /**
         * Dummy function, used to write the top of a table listing.
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public function writeTop() {}
        public function fwd_rwd_nav($table = '') {}
        public function fwd_rwd_HTML($type, $pointer, $table = '') {}
        public function listURL($altId = '', $table = '-1', $exclList = '') {}
        /**
         * Returning JavaScript for ClipBoard functionality.
         *
         * @return string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public function CBfunctions() {}
        /**
         * Initializes page languages and icons
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public function initializeLanguages() {}
        public function languageFlag($sys_language_uid, $addAsAdditionalText = true) {}
        /**
         * Gets an instance of TranslationConfigurationProvider
         *
         * @return TranslationConfigurationProvider
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected function getTranslateTools() {}
        protected function generateReferenceToolTip($references, $launchViewParameter = '') {}
        /**
         * Returns the language service
         * @return LanguageService
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected function getLanguageService() {}
    }


    /**
     * Interface for classes which hook into \TYPO3\CMS\Recordlist\RecordList\DatabaseRecordList
     * and do additional getTable processing
     */
    interface RecordListGetTableHookInterface {
        function getDBlistQuery($table, $pageId, $additionalWhereClause, $selectedFieldsList, $parentObject) ;
    }

}

namespace TYPO3\CMS\Backend\Utility {
    /**
     * Standard functions available for the TYPO3 backend.
     * You are encouraged to use this class in your own applications (Backend Modules)
     * Don't instantiate - call functions with "\TYPO3\CMS\Backend\Utility\BackendUtility::" prefixed the function name.
     *
     * Call ALL methods without making an object!
     * Eg. to get a page-record 51 do this: '\TYPO3\CMS\Backend\Utility\BackendUtility::getRecord('pages',51)'
     */
    class BackendUtility {
        /**
         * Cache the TCA configuration of tables with their types during runtime
         *
         * @var array
         * @see self::getTCAtypes()
         */
        static protected $tcaTableTypeConfigurationCache;

        public static function deleteClause($table, $tableAlias = '') {}
        public static function getRecord($table, $uid, $fields = '*', $where = '', $useDeleteClause = true) {}
        public static function getRecordWSOL($table, $uid, $fields = '*', $where = '', $useDeleteClause = true, $unsetMovePointers = false) {}
        public static function purgeComputedPropertiesFromRecord(array $record) : array {}
        public static function purgeComputedPropertyNames(array $propertyNames) : array {}
        public static function splitTable_Uid($str) {}
        public static function BEenableFields($table, $inv = false) {}
        public static function getRecordLocalization($table, $uid, $language, $andWhereClause = '') {}
        public static function BEgetRootLine($uid, $clause = '', $workspaceOL = false, array $additionalFields = [ ]) {}
        protected static function getPageForRootline($uid, $clause, $workspaceOL, array $additionalFields = [ ]) {}
        public static function openPageTree($pid, $clearExpansion) {}
        public static function getRecordPath($uid, $clause, $titleLimit, $fullTitleLimit = 0) {}
        public static function getOriginalTranslationTable($table) {}
        public static function isTableLocalizable($table) {}
        public static function readPageAccess($id, $perms_clause) {}
        public static function getTCAtypes($table, $rec, $useFieldNameAsKey = false) {}
        public static function getTCAtypeValue($table, $row) {}
        public static function storeHash($hash, $data, $ident) {}
        public static function getHash($hash) {}
        public static function getPagesTSconfig($id, $rootLine = null, $returnPartArray = false) {}
        public static function getRawPagesTSconfig($id, array $rootLine = null) {}
        public static function getUserNames($fields = 'username,usergroup,usergroup_cached_list,uid', $where = '') {}
        public static function getGroupNames($fields = 'title,uid', $where = '') {}
        protected static function getRecordsSortedByTitle(array $fields, $table, $titleField, $where = '') {}
        public static function getListGroupNames($fields = 'title, uid') {}
        public static function blindUserNames($usernames, $groupArray, $excludeBlindedFlag = false) {}
        public static function blindGroupNames($groups, $groupArray, $excludeBlindedFlag = false) {}
        public static function daysUntil($tstamp) {}
        public static function date($tstamp) {}
        public static function datetime($value) {}
        public static function time($value, $withSeconds = true) {}
        public static function calcAge($seconds, $labels = ' min| hrs| days| yrs| min| hour| day| year') {}
        public static function dateTimeAge($tstamp, $prefix = 1, $date = '') {}
/**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
        public static function resolveFileReferences(/**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
$tableName, /**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
$fieldName, /**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
$element, /**
 * The storage does not exist anymore
 * Log the exception message for admins as they maybe can restore the storage
 */
$workspaceId = null) {}
/** @var File $fileObject */
        public static function thumbCode(/** @var File $fileObject */
$row, /** @var File $fileObject */
$table, /** @var File $fileObject */
$field, /** @var File $fileObject */
$backPath = '', /** @var File $fileObject */
$thumbScript = '', /** @var File $fileObject */
$uploaddir = null, /** @var File $fileObject */
$abs = 0, /** @var File $fileObject */
$tparams = '', /** @var File $fileObject */
$size = '', /** @var File $fileObject */
$linkInfoPopup = true) {}
        public static function titleAttribForPages($row, $perms_clause = '', $includeAttrib = true) {}
        public static function getRecordToolTip(array $row, $table = 'pages') {}
        public static function getRecordIconAltText($row, $table = 'pages') {}
        public static function getLabelFromItemlist($table, $col, $key) {}
        public static function getLabelFromItemListMerged($pageId, $table, $column, $key) {}
        public static function getLabelsFromItemsList($table, $column, $keyList, array $columnTsConfig = [ ]) {}
        public static function getItemLabel($table, $col) {}
        public static function getRecordTitle($table, $row, $prep = false, $forceResult = true) {}
        public static function getRecordTitlePrep($title, $titleLength = 0) {}
        public static function getNoRecordTitle($prep = false) {}
/** @var $dbGroup RelationHandler */
        public static function getProcessedValue(/** @var $dbGroup RelationHandler */
$table, /** @var $dbGroup RelationHandler */
$col, /** @var $dbGroup RelationHandler */
$value, /** @var $dbGroup RelationHandler */
$fixed_lgd_chars = 0, /** @var $dbGroup RelationHandler */
$defaultPassthrough = false, /** @var $dbGroup RelationHandler */
$noRecordLookup = false, /** @var $dbGroup RelationHandler */
$uid = 0, /** @var $dbGroup RelationHandler */
$forceResult = true, /** @var $dbGroup RelationHandler */
$pid = 0) {}
        public static function getProcessedValueExtra($table, $fN, $fV, $fixed_lgd_chars = 0, $uid = 0, $forceResult = true, $pid = 0) {}
        public static function getCommonSelectFields($table, $prefix = '', $fields = [ ]) {}
        public static function helpTextArray($table, $field) {}
/** @var IconFactory $iconFactory */
        public static function helpText(/** @var IconFactory $iconFactory */
$table, /** @var IconFactory $iconFactory */
$field) {}
/** @var IconFactory $iconFactory */
        public static function wrapInHelp(/** @var IconFactory $iconFactory */
$table, /** @var IconFactory $iconFactory */
$field, /** @var IconFactory $iconFactory */
$text = '', /** @var IconFactory $iconFactory */
array $overloadHelpText = [ ]) {}
        public static function cshItem($table, $field, $_ = '', $wrap = '') {}
        public static function editOnClick($params, $_ = '', $requestUri = '') {}
        public static function viewOnClick($pageUid, $backPath = '', $rootLine = null, $anchorSection = '', $alternativeUrl = '', $additionalGetVars = '', $switchFocus = true) {}
        public static function wrapClickMenuOnIcon($content, $table, $uid = 0, $context = '', $_addParams = '', $_enDisItems = '', $returnTagParameters = false) {}
        public static function getLinkToDataHandlerAction($parameters, $redirectUrl = '') {}
        protected static function createPreviewUrl($pageUid, $rootLine, $anchorSection, $additionalGetVars, $viewScript) {}
        public static function getViewDomain($pageId, $rootLine = null) {}
        public static function getModTSconfig($id, $TSref) {}
        public static function getFuncMenu($mainParams, $elementName, $currentValue, $menuItems, $script = '', $addParams = '') {}
        public static function getDropdownMenu($mainParams, $elementName, $currentValue, $menuItems, $script = '', $addParams = '') {}
        public static function getFuncCheck($mainParams, $elementName, $currentValue, $script = '', $addParams = '', $tagParams = '') {}
        public static function getFuncInput($mainParams, $elementName, $currentValue, $size = 10, $script = '', $addParams = '') {}
        protected static function buildScriptUrl($mainParams, $addParams, $script = '') {}
        public static function unsetMenuItems($modTSconfig, $itemArray, $TSref) {}
        public static function setUpdateSignal($set = '', $params = '') {}
        /**
         * Call to update the page tree frame (or something else..?) if this is set by the function
         * setUpdateSignal(). It will return some JavaScript that does the update
         *
         * @return string HTML javascript code
         * @see BackendUtility::setUpdateSignal()
         */
        public static function getUpdateSignalCode() {}
        public static function getModuleData($MOD_MENU, $CHANGED_SETTINGS, $modName, $type = '', $dontValidateList = '', $setDefaultList = '') {}
/** @var UriBuilder $uriBuilder */
        public static function getModuleUrl(/** @var UriBuilder $uriBuilder */
$moduleName, /** @var UriBuilder $uriBuilder */
$urlParameters = [ ]) {}
        public static function lockRecords($table = '', $uid = 0, $pid = 0) {}
        public static function isRecordLocked($table, $uid) {}
        public static function getTCEFORM_TSconfig($table, $row) {}
        public static function getTSconfig_pidValue($table, $uid, $pid) {}
        public static function getPidForModTSconfig($table, $uid, $pid) {}
        public static function getTSCpidCached($table, $uid, $pid) {}
        public static function getTSCpid($table, $uid, $pid) {}
        public static function firstDomainRecord($rootLine) {}
        public static function getDomainStartPage($domain, $path = '') {}
        public static function &softRefParserObj($spKey) {}
        /**
         * Gets an instance of the runtime cache.
         *
         * @return FrontendInterface
         */
        protected static function getRuntimeCache() {}
        public static function explodeSoftRefParserList($parserList) {}
        public static function isModuleSetInTBE_MODULES($modName) {}
        public static function referenceCount($table, $ref, $msg = '', $count = null) {}
        public static function translationCount($table, $ref, $msg = '') {}
        public static function selectVersionsOfRecord($table, $uid, $fields = '*', $workspace = 0, $includeDeletedRecords = false, $row = null) {}
        public static function fixVersioningPid($table, $rr, $ignoreWorkspaceMatch = false) {}
        public static function workspaceOL($table, $row, $wsid = -99, $unsetMovePointers = false) {}
        public static function movePlhOL($table, $row) {}
        public static function getWorkspaceVersionOfRecord($workspace, $table, $uid, $fields = '*') {}
        public static function getLiveVersionOfRecord($table, $uid, $fields = '*') {}
        public static function getLiveVersionIdOfRecord($table, $uid) {}
        public static function versioningPlaceholderClause($table) {}
        public static function getWorkspaceWhereClause($table, $workspaceId = null) {}
        public static function wsMapId($table, $uid) {}
        public static function getMovePlaceholder($table, $uid, $fields = '*', $workspace = null) {}
        /**
         * Prints TYPO3 Copyright notice for About Modules etc. modules.
         *
         * Warning:
         * DO NOT prevent this notice from being shown in ANY WAY.
         * According to the GPL license an interactive application must show such a notice on start-up ('If the program is interactive, make it output a short notice... ' - see GPL.txt)
         * Therefore preventing this notice from being properly shown is a violation of the license, regardless of whether you remove it or use a stylesheet to obstruct the display.
         *
         * @return string Text/Image (HTML) for copyright notice.
         */
        public static function TYPO3_copyRightNotice() {}
        public static function ADMCMD_previewCmds($pageInfo) {}
        public static function getBackendScript($interface = '') {}
        public static function isTableWorkspaceEnabled($table) {}
        public static function getTcaFieldConfiguration($table, $field) {}
        public static function isWebMountRestrictionIgnored($table) {}
        public static function isRootLevelRestrictionIgnored($table) {}
        public static function shortcutExists($url) {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected static function getSignalSlotDispatcher() {}
        protected static function emitGetPagesTSconfigPreIncludeSignal(array $TSdataArray, $id, array $rootLine) {}
        protected static function getConnectionForTable($table) {}
        protected static function getQueryBuilderForTable($table) {}
        /**
         * @return LoggerInterface
         */
        protected static function getLogger() {}
        /**
         * @return LanguageService
         */
        protected static function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected static function getBackendUserAuthentication() {}
    }

}

namespace TYPO3\CMS\Backend\Clipboard {
    /**
     * TYPO3 clipboard for records and files
     */
    class Clipboard {
        /**
         * @var int
         */
        public $numberTabs;
        /**
         * Clipboard data kept here
         *
         * Keys:
         * 'normal'
         * 'tab_[x]' where x is >=1 and denotes the pad-number
         * 'mode'	:	'copy' means copy-mode, default = moving ('cut')
         * 'el'	:	Array of elements:
         * DB: keys = '[tablename]|[uid]'	eg. 'tt_content:123'
         * DB: values = 1 (basically insignificant)
         * FILE: keys = '_FILE|[shortmd5 of path]'	eg. '_FILE|9ebc7e5c74'
         * FILE: values = The full filepath, eg. '/www/htdocs/typo3/32/dummy/fileadmin/sem1_3_examples/alternative_index.php'
         * or 'C:/www/htdocs/typo3/32/dummy/fileadmin/sem1_3_examples/alternative_index.php'
         *
         * 'current' pointer to current tab (among the above...)
         *
         * The virtual tablename '_FILE' will always indicate files/folders. When checking for elements from eg. 'all tables'
         * (by using an empty string) '_FILE' entries are excluded (so in effect only DB elements are counted)
         *
         * @var array
         */
        public $clipData;
        /**
         * @var int
         */
        public $changed;
        /**
         * @var string
         */
        public $current;
        /**
         * @var int
         */
        public $lockToNormal;
        /**
         * If set, clipboard is displaying files.
         *
         * @var bool
         */
        public $fileMode;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var StandaloneView
         */
        protected $view;

        /**
         * Construct
         * @throws \TYPO3\CMS\Extbase\Mvc\Exception\InvalidExtensionNameException
         * @throws \InvalidArgumentException
         */
        public function __construct() {}
        /**
         * Initialize the clipboard from the be_user session
         */
        public function initializeClipboard() {}
        /**
         * Call this method after initialization if you want to lock the clipboard to operate on the normal pad only.
         * Trying to switch pad through ->setCmd will not work.
         * This is used by the clickmenu since it only allows operation on single elements at a time (that is the "normal" pad)
         */
        public function lockToNormal() {}
        public function setCmd($cmd) {}
        public function setCurrentPad($padIdent) {}
        /**
         * Call this after initialization and setCmd in order to save the clipboard to the user session.
         * The function will check if the internal flag ->changed has been set and if so, save the clipboard. Else not.
         */
        public function endClipboard() {}
        public function cleanUpCBC($CBarr, $table, $removeDeselected = 0) {}
        /**
         * Prints the clipboard
         *
         * @return string HTML output
         * @throws \BadFunctionCallException
         */
        public function printClipboard() {}
        public function getContentFromTab($pad) {}
        /**
         * Returns true if the clipboard contains elements
         *
         * @return bool
         */
        public function hasElements() {}
        public function getLocalizations($table, $parentRec, $bgColClass, $pad) {}
        public function padTitle($pad) {}
        public function linkItemText($str, $rec, $table = '') {}
        public function selUrlDB($table, $uid, $copy = 0, $deselect = 0, $baseArray = [ ]) {}
        public function selUrlFile($path, $copy = 0, $deselect = 0, $baseArray = [ ]) {}
        public function pasteUrl($table, $uid, $setRedirect = true, array $update = null) {}
        public function deleteUrl($setRedirect = true, $file = false) {}
        /**
         * editUrl of all current elements
         * ONLY database
         * Links to FormEngine
         *
         * @return string The URL to FormEngine with parameters.
         */
        public function editUrl() {}
        public function removeUrl($table, $uid) {}
        public function confirmMsgText($table, $rec, $type, $clElements, $columnLabel = '') {}
        public function clLabel($key, $Akey = 'labels') {}
        /**
         * Creates GET parameters for linking to the export module.
         *
         * @return array GET parameters for current clipboard content to be exported
         */
        protected function exportClipElementParameters() {}
        public function removeElement($el) {}
        /**
         * Saves the clipboard, no questions asked.
         * Use ->endClipboard normally (as it checks if changes has been done so saving is necessary)
         *
         * @access private
         */
        public function saveClipboard() {}
        /**
         * Returns the current mode, 'copy' or 'cut'
         *
         * @return string "copy" or "cut
         */
        public function currentMode() {}
        /**
         * This traverses the elements on the current clipboard pane
         * and unsets elements which does not exist anymore or are disabled.
         */
        public function cleanCurrent() {}
        public function elFromTable($matchTable = '', $pad = '') {}
        public function isSelected($table, $uid) {}
        public function getSelectedRecord($table = '', $uid = '') {}
        /**
         * Reports if the current pad has elements (does not check file/DB type OR if file/DBrecord exists or not. Only counting array)
         *
         * @return bool TRUE if elements exist.
         */
        public function isElements() {}
        public function makePasteCmdArray($ref, $CMD, array $update = null) {}
        public function makeDeleteCmdArray($CMD) {}
        public function makePasteCmdArray_file($ref, $FILE) {}
        public function makeDeleteCmdArray_file($FILE) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /** @var StandaloneView $view */
        protected function getStandaloneView() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Tree {
    /**
     * Testcase for class \TYPO3\CMS\Backend\Tree\TreeNode.
     */
    class TreeNodeTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Returns the absolute fixtures path for this testcase.
         *
         * @return string the absolute fixtures path for this testcase, will not be empty
         */
        private function determineFixturesPath() {}
        protected function setUpNodeTestData() {}
        /**
         * @test
         */
        public function serializeFixture() {}
        /**
         * @test
         */
        public function deserializeFixture() {}
        /**
         * @test
         */
        public function compareNodes() {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Backend\Tree\SortedTreeNodeCollection.
     */
    class SortedTreeNodeCollectionTest extends \typo3\testingframework\core\unit\unittestcase {
        protected function createTestCollection() {}
        protected function createTestCollectionWithTwoNodes() {}
        /**
         * @test
         */
        public function appendsSorted() {}
        /**
         * @test
         */
        public function collectionContainsNode() {}
        /**
         * @test
         */
        public function searchDataWithBinarySearch() {}
    }

    /**
     * Testcase for class \TYPO3\CMS\Backend\Tree\TreeNodeCollection.
     */
    class TreeNodeCollectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function sortNodes() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Configuration\TypoScript\ConditionMatching {
    /**
     * Testcase for class \TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching\ConditionMatcher.
     */
    class ConditionMatcherTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array
         */
        protected $rootline;
        /**
         * @var \TYPO3\CMS\Backend\Configuration\TypoScript\ConditionMatching\ConditionMatcher
         */
        protected $matchCondition;
        /**
         * @var string
         */
        protected $testGlobalNamespace;
        /**
         * @var string
         */
        protected $testTableName;

        /**
         * Set up tests
         */
        protected function setUp() {}
        /**
         * Set up a backend
         */
        private function setUpBackend() {}
        /**
         * Set up database mock
         */
        private function setUpDatabaseMockForDeterminePageId() {}
        /**
         * Tests whether a faulty expression fails.
         *
         * @test
         */
        public function simulateDisabledMatchAllConditionsFailsOnFaultyExpression() {}
        /**
         * Tests whether simulating positive matches for all conditions succeeds.
         *
         * @test
         */
        public function simulateEnabledMatchAllConditionsSucceeds() {}
        /**
         * Tests whether simulating positive matches for specific conditions succeeds.
         *
         * @test
         */
        public function simulateEnabledMatchSpecificConditionsSucceeds() {}
        /**
         * Tests whether the language comparison matches.
         *
         * @test
         */
        public function languageConditionMatchesSingleLanguageExpression() {}
        /**
         * Tests whether the language comparison matches.
         *
         * @test
         */
        public function languageConditionMatchesMultipleLanguagesExpression() {}
        /**
         * Tests whether the language comparison matches.
         *
         * @test
         */
        public function languageConditionMatchesCompleteLanguagesExpression() {}
        /**
         * Tests whether usergroup comparison matches.
         *
         * @test
         */
        public function usergroupConditionMatchesSingleGroupId() {}
        /**
         * Tests whether usergroup comparison matches.
         *
         * @test
         */
        public function usergroupConditionMatchesMultipleUserGroupId() {}
        /**
         * Tests whether user comparison matches.
         *
         * @test
         */
        public function loginUserConditionMatchesAnyLoggedInUser() {}
        /**
         * Tests whether user comparison matches.
         *
         * @test
         */
        public function loginUserConditionMatchesSingleLoggedInUser() {}
        /**
         * Tests whether user comparison matches.
         *
         * @test
         */
        public function loginUserConditionDoesNotMatchSingleLoggedInUser() {}
        /**
         * Tests whether user comparison matches.
         *
         * @test
         */
        public function loginUserConditionMatchesMultipleLoggedInUsers() {}
        /**
         * Tests whether checkinf for an admin user matches
         *
         * @test
         */
        public function adminUserConditionMatchesAdminUser() {}
        /**
         * Tests whether checkinf for an admin user matches
         *
         * @test
         */
        public function adminUserConditionMatchesRegularUser() {}
        /**
         * Tests whether checkinf for an admin user matches
         *
         * @test
         */
        public function adminUserConditionDoesNotMatchRegularUser() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnEqualExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnEqualExpressionWithMultipleValues() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnNotEqualExpression() {}
        /**
         * Tests whether numerical comparison does not match.
         *
         * @test
         */
        public function globalVarConditionDoesNotMatchOnNotEqualExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnNotEqualExpressionWithMultipleValues() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnLowerThanExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnLowerThanOrEqualExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnGreaterThanExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnGreaterThanOrEqualExpression() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionMatchesOnEmptyExpressionWithNoValueSet() {}
        /**
         * Tests whether numerical comparison matches.
         *
         * @test
         */
        public function globalVarConditionDoesNotMatchOnEmptyExpressionWithValueSetToZero() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesOnEqualExpression() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesOnEmptyExpressionWithValueSetToEmptyString() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesOnEmptyLiteralExpressionWithValueSetToEmptyString() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesWildcardExpression() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesRegularExpression() {}
        /**
         * Tests whether string comparison matches.
         *
         * @test
         */
        public function globalStringConditionMatchesEmptyRegularExpression() {}
        /**
         * Tests whether treeLevel comparison matches.
         *
         * @test
         */
        public function treeLevelConditionMatchesSingleValue() {}
        /**
         * Tests whether treeLevel comparison matches.
         *
         * @test
         */
        public function treeLevelConditionMatchesMultipleValues() {}
        /**
         * Tests whether treeLevel comparison matches.
         *
         * @test
         */
        public function treeLevelConditionDoesNotMatchFaultyValue() {}
        /**
         * Tests whether treeLevel comparison matches when creating new pages.
         *
         * @test
         */
        public function treeLevelConditionMatchesCurrentPageIdWhileEditingNewPage() {}
        /**
         * Tests whether treeLevel comparison matches when creating new pages.
         *
         * @test
         */
        public function treeLevelConditionMatchesCurrentPageIdWhileSavingNewPage() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionMatchesSinglePageIdInRootline() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionMatchesMultiplePageIdsInRootline() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionDoesNotMatchPageIdNotInRootline() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionDoesNotMatchLastPageIdInRootline() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionMatchesCurrentPageIdWhileEditingNewPage() {}
        /**
         * Tests whether a page Id is found in the previous rootline entries.
         *
         * @test
         */
        public function PIDupinRootlineConditionMatchesCurrentPageIdWhileSavingNewPage() {}
        /**
         * Tests whether a page Id is found in all rootline entries.
         *
         * @test
         */
        public function PIDinRootlineConditionMatchesSinglePageIdInRootline() {}
        /**
         * Tests whether a page Id is found in all rootline entries.
         *
         * @test
         */
        public function PIDinRootlineConditionMatchesMultiplePageIdsInRootline() {}
        /**
         * Tests whether a page Id is found in all rootline entries.
         *
         * @test
         */
        public function PIDinRootlineConditionMatchesLastPageIdInRootline() {}
        /**
         * Tests whether a page Id is found in all rootline entries.
         *
         * @test
         */
        public function PIDinRootlineConditionDoesNotMatchPageIdNotInRootline() {}
        /**
         * Tests whether the compatibility version can be evaluated.
         * (e.g. 7.9 is compatible to 7.0 but not to 15.0)
         *
         * @test
         */
        public function compatVersionConditionMatchesOlderRelease() {}
        /**
         * Tests whether the compatibility version can be evaluated.
         * (e.g. 7.9 is compatible to 7.0 but not to 15.0)
         *
         * @test
         */
        public function compatVersionConditionMatchesSameRelease() {}
        /**
         * Tests whether the compatibility version can be evaluated.
         * (e.g. 7.9 is compatible to 7.0 but not to 15.0)
         *
         * @test
         */
        public function compatVersionConditionDoesNotMatchNewerRelease() {}
        /**
         * Tests whether the generic fetching of variables works with the namespace 'GP'.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithNamespaceGP() {}
        /**
         * Tests whether the generic fetching of variables does not work with the namespace 'TSFE',
         * since we are in the backend context here.
         *
         * @test
         */
        public function genericGetVariablesFailsWithNamespaceTSFE() {}
        /**
         * Tests whether the generic fetching of variables works with the namespace 'ENV'.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithNamespaceENV() {}
        /**
         * Tests whether the generic fetching of variables works with the namespace 'IENV'.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithNamespaceIENV() {}
        /**
         * Tests whether the generic fetching of variables works with any global namespace.
         *
         * @test
         */
        public function genericGetVariablesSucceedsWithAnyGlobalNamespace() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileCallingModuleWithPageTree() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileEditingAPageRecord() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileEditingARegularRecord() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileCreatingARecord() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileCreatingARecordAfterAnExistingRecord() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileDeletingAPageRecord() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileCopyingARecordToAnotherPage() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileCopyingARecordAfterAnExistingRecord() {}
        /**
         * Tests whether determining a pageId works.
         *
         * @test
         */
        public function pageIdCanBeDeterminedWhileMovingARecordToAnotherPage() {}
        /**
         * @test
         */
        public function matchCallsTestConditionAndHandsOverParameters() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Configuration\TypoScript\ConditionMatching\Fixtures {
    /**
     * Fixture for custom conditions
     */
    class TestCondition extends \typo3\cms\core\configuration\typoscript\conditionmatching\abstractcondition {
        public function matchCondition(array $conditionParameters) {}
    }

    /**
     * Exception thrown by TestCondition
     */
    class TestConditionException extends \exception {}

}

namespace TYPO3\CMS\Backend\Tests\Unit\Form {
    /**
     * Test case
     */
    class FormDataCompilerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var FormDataCompiler
         */
        protected $subject;
        /**
         * @var FormDataGroupInterface | ObjectProphecy
         */
        protected $formDataGroupProphecy;

        protected function setUp() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfInputContainsKeysNotValidInResult() {}
        /**
         * @test
         */
        public function compileThrowsExceptionAtUnknownCommand() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfNoTableNameGiven() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfUidIsNotAnInteger() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfCommandIsEditAndUidIsNegative() {}
        /**
         * @test
         */
        public function compileReturnsResultArrayWithInputDataSet() {}
        /**
         * @test
         */
        public function compileReturnsResultArrayWithAdditionalDataFormFormDataGroup() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfFormDataGroupDoesNotReturnArray() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfRenderDataIsNotEmpty() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfFormDataGroupRemovedKeysFromResultArray() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfFormDataGroupAddedKeysToResultArray() {}
    }

    /**
     * Test case
     */
    class NodeFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructThrowsExceptionIfOverrideMissesNodeNameKey() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfOverrideMissesPriorityKey() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfOverrideMissesClassKey() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfOverridePriorityIsLowerThanZero() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfOverridePriorityIsHigherThanHundred() {}
        /**
         * @test
         */
        public function constructorThrowsExceptionIfOverrideTwoNodesWithSamePriorityAndSameNodeNameAreRegistered() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfResolverMissesNodeNameKey() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfResolverMissesPriorityKey() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfResolverMissesClassKey() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfResolverPriorityIsLowerThanZero() {}
        /**
         * @test
         */
        public function constructThrowsExceptionIfResolverPriorityIsHigherThanHundred() {}
        /**
         * @test
         */
        public function constructorThrowsExceptionIfResolverTwoNodesWithSamePriorityAndSameNodeNameAreRegistered() {}
        /**
         * @test
         */
        public function constructorThrowsNoExceptionIfResolverWithSamePriorityButDifferentNodeNameAreRegistered() {}
        /**
         * @test
         */
        public function createThrowsExceptionIfRenderTypeIsNotGiven() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createThrowsExceptionIfNodeDoesNotImplementNodeInterface() {}
        /**
         * @test
         */
        public function createReturnsInstanceOfUnknownElementIfTypeIsNotRegistered() {}
        /**
         * @test
         */
        public function createReturnsInstanceOfSelectTreeElementIfNeeded() {}
        /**
         * @test
         */
        public function createReturnsInstanceOfSelectSingleElementIfNeeded() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createInstantiatesNewRegisteredElement() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createInstantiatesElementRegisteredWithHigherPriorityWithOneGivenOrder() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createInstantiatesElementRegisteredWithHigherPriorityWithOtherGivenOrder() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createThrowsExceptionIfResolverDoesNotImplementNodeResolverInterface() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createInstantiatesResolverWithHighestPriorityFirstWithOneGivenOrder() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createInstantiatesResolverWithHighestPriorityFirstWithOtherGivenOrder() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createInstantiatesNodeClassReturnedByResolver() {}
        /** @var NodeFactory|\PHPUnit_Framework_MockObject_MockObject $mockSubject */
        public function createDoesNotCallSecondResolverWithLowerPriorityIfFirstResolverReturnedClassName() {}
    }

    /**
     * Test case
     */
    class InlineStackProcessorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @return array
         */
        public function structureStringIsParsedDataProvider() {}
/** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function initializeByParsingDomObjectIdStringParsesStructureString(/** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$string, /** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
array $expectedInlineStructure, /** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
array $_) {}
/** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function getCurrentStructureFormPrefixReturnsExceptedStringAfterInitializationByStructureString(/** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$string, /** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
array $_, /** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
array $expectedFormName) {}
/** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function getCurrentStructureDomObjectIdPrefixReturnsExceptedStringAfterInitializationByStructureString(/** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$string, /** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
array $_, /** @var InlineStackProcessor|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
array $expectedFormName) {}
    }

    /**
     * Test case
     */
    class AbstractFormElementTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @return array
         */
        public function formatValueDataProvider() {}
/** @var AbstractFormElement|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
        public function formatValueWithGivenConfiguration(/** @var AbstractFormElement|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$config, /** @var AbstractFormElement|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$itemValue, /** @var AbstractFormElement|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface */
$expectedResult) {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Form\FormDataGroup {
    /**
     * Test case
     */
    class TcaDatabaseRecordTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaDatabaseRecord
         */
        protected $subject;

        protected function setUp() {}
        /** @var DependencyOrderingService|ObjectProphecy $orderingServiceProphecy */
        public function compileReturnsIncomingData() {}
        /**
         * @test
         */
        public function compileReturnsResultChangedByDataProvider() {}
        /** @var FormDataProviderInterface|ObjectProphecy $formDataProviderProphecy */
        public function compileThrowsExceptionIfDataProviderDoesNotImplementInterface() {}
    }

    /**
     * Test case
     */
    class OnTheFlyTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var OnTheFly
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function compileThrowsExceptionWithEmptyOnTheFlyList() {}
        /**
         * @test
         */
        public function compileReturnsIncomingData() {}
        /**
         * @test
         */
        public function compileReturnsResultChangedByDataProvider() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfDataProviderDoesNotImplementInterface() {}
    }

    /**
     * Test case
     */
    class TcaInputPlaceholderRecordTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaInputPlaceholderRecord
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function compileReturnsIncomingData() {}
        /**
         * @test
         */
        public function compileReturnsResultChangedByDataProvider() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfDataProviderDoesNotImplementInterface() {}
    }

    /**
     * Test case
     */
    class OrderedProviderListTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var OrderedProviderList
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function compileReturnsIncomingData() {}
        /**
         * @test
         */
        public function compileReturnsResultChangedByDataProvider() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfDataProviderDoesNotImplementInterface() {}
    }

    /**
     * Test case
     */
    class TcaSelectTreeAjaxFieldDataTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaSelectTreeAjaxFieldData
         */
        protected $subject;

        protected function setUp() {}
        /** @var DependencyOrderingService|ObjectProphecy $orderingServiceProphecy */
        public function compileReturnsIncomingData() {}
        /**
         * @test
         */
        public function compileReturnsResultChangedByDataProvider() {}
        /** @var FormDataProviderInterface|ObjectProphecy $formDataProviderProphecy */
        public function compileThrowsExceptionIfDataProviderDoesNotImplementInterface() {}
    }

    /**
     * Test case
     */
    class FlexFormSegmentTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var FlexFormSegment
         */
        protected $subject;

        protected function setUp() {}
        /** @var DependencyOrderingService|ObjectProphecy $orderingServiceProphecy */
        public function compileReturnsIncomingData() {}
        /** @var FormDataProviderInterface|ObjectProphecy $formDataProviderProphecy */
        public function compileReturnsResultChangedByDataProvider() {}
        /**
         * @test
         */
        public function compileThrowsExceptionIfDataProviderDoesNotImplementInterface() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Form\FormDataProvider {
    /**
     * Test case
     */
    class TcaColumnsProcessPlaceholdersTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaColumnsProcessPlaceholders
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataRegistersPlaceholderColumns() {}
        /**
         * @test
         */
        public function addDataRegistersFirstPlaceholderColumn() {}
        /**
         * @test
         */
        public function addDataRegistersAlternativeLabelColumnn() {}
    }

    /**
     * Test case
     */
    class TcaColumnsProcessShowitemTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaColumnsProcessShowitem
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfTypesHasNoShowitem() {}
        /**
         * @test
         */
        public function addDataRegistersColumnsFieldReferencedInShowitems() {}
        /**
         * @test
         */
        public function addDataKeepsColumnsFieldReferencedInPalette() {}
        /**
         * @test
         */
        public function addDataSkipsColumnsNotReferencedInShowitemOrPalette() {}
        /**
         * @test
         */
        public function addDataSkipsColumnsForCollapsedInlineChild() {}
        /**
         * @test
         */
        public function addDataSkipsColumnsForCollapsedAllInlineChild() {}
        /**
         * @test
         */
        public function addDataAddsColumnsForExpandedInlineChild() {}
    }

    /**
     * Test case
     */
    class DatabaseRowInitializeNewTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseRowInitializeNew
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataReturnSameDataIfCommandIsEdit() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfDatabaseRowIsNotArray() {}
        /**
         * @test
         */
        public function addDataKeepsGivenDefaultsIfCommandIsNew() {}
        /**
         * @test
         */
        public function addDataSetsDefaultDataFromUserTsIfColumnIsDefinedInTca() {}
        /**
         * @test
         */
        public function addDataDoesNotSetDefaultDataFromUserTsIfColumnIsMissingInTca() {}
        /**
         * @test
         */
        public function addDataSetsDefaultDataFromPageTsIfColumnIsDefinedInTca() {}
        /**
         * @test
         */
        public function addDataDoesNotSetDefaultDataFromPageTsIfColumnIsMissingInTca() {}
        /**
         * @test
         */
        public function addDataSetsDefaultDataOverrulingFromPageTs() {}
        /**
         * @test
         */
        public function addDataSetsDefaultFromNeighborRow() {}
        /**
         * @test
         */
        public function addDataSetsDefaultDataOverrulingFromNeighborRow() {}
        /**
         * @test
         */
        public function addDataSetsDefaultDataFromGetIfColumnIsDefinedInTca() {}
        /**
         * @test
         */
        public function addDataSetsDefaultDataFromPostIfColumnIsDefinedInTca() {}
        /**
         * @test
         */
        public function addDataSetsPrioritizesDefaultPostOverDefaultGet() {}
        /**
         * @test
         */
        public function addDataDoesNotSetDefaultDataFromGetPostIfColumnIsMissingInTca() {}
        /**
         * @test
         */
        public function addDataSetsDefaultDataOverrulingGetPost() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionWithGivenChildChildUidButMissingInlineConfig() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionWithGivenChildChildUidButIsNotInteger() {}
        /**
         * @test
         */
        public function addDataSetsForeignSelectorFieldToValueOfChildChildUid() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfForeignSelectorDoesNotPointToGroupOrSelectField() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfInlineParentLanguageIsNoInteger() {}
        /**
         * @test
         */
        public function addDataSetsSysLanguageUidFromParent() {}
        /**
         * @test
         */
        public function addDataSetsPidToVanillaUid() {}
        /**
         * @test
         */
        public function addDataDoesNotUsePageTsValueForPidIfRecordIsNotInlineChild() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfPageTsConfigPidValueCanNotBeInterpretedAsInteger() {}
        /**
         * @test
         */
        public function addDataDoesUsePageTsValueForPidIfRecordIsInlineChild() {}
    }

    /**
     * Test case
     */
    class DatabaseRecordOverrideValuesTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseRecordOverrideValues
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataReturnSameDataIfNoOverrideValuesSet() {}
        /**
         * @test
         */
        public function addDataSetsDatabaseRowAndTcaType() {}
    }

    /**
     * Test case
     */
    class TcaFlexProcessTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var BackendUserAuthentication|ObjectProphecy
         */
        protected $backendUserProphecy;

        /** @var BackendUserAuthentication|ObjectProphecy backendUserProphecy */
        protected function setUp() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionWithMissingDataStructureIdentifier() {}
        /**
         * @test
         */
        public function addDataRemovesSheetIfDisabledByPageTsConfig() {}
        /**
         * @test
         */
        public function addDataSetsSheetTitleFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataSetsSheetDescriptionFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataSetsSheetShortDescriptionFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataSetsSheetShortDescriptionForSingleSheetFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataRemovesExcludeFieldFromDataStructure() {}
        /**
         * @test
         */
        public function addDataKeepsExcludeFieldInDataStructureWithUserAccess() {}
        /**
         * @test
         */
        public function addDataKeepsExcludeFieldInDataStructureForAdminUser() {}
        /**
         * @test
         */
        public function addDataRemovesPageTsDisabledFieldFromDataStructure() {}
        /**
         * @test
         */
        public function addDataHandlesPageTsConfigSettingsOfSingleFlexField() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataSetsDefaultValueFromFlexTcaForField() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForDataStructureTypeArrayWithoutSection() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForDataStructureSectionWithoutTypeArray() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataSetsValuesAndStructureForSectionContainerElements() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForInlineElementsNestedInSectionContainers() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForNestedSectionContainers() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForSelectElementsInSectionContainers() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForGroupElementsInSectionContainers() {}
        /**
         * @test
         */
        public function addDataCallsFlexFormSegmentGroupForFieldAndAddsFlexParentDatabaseRow() {}
        /**
         * @test
         */
        public function addDataCallsFlexFormSegmentGroupForDummyContainerAndAddsFlexParentDatabaseRow() {}
    }

    /**
     * Test case
     */
    class DatabaseSystemLanguageRowsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseSystemLanguageRows
         */
        protected $subject;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function addDataSetsDefaultLanguageAndAllEntries() {}
        /**
         * @test
         */
        public function addDataSetsDefaultLanguageTitleFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataSetsDefaultLanguageFlagFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataResolvesLanguageIsocodeFromDatabaseField() {}
        /** @var FlashMessageQueue|ObjectProphecy $flashMessageQueue */
        public function addDataAddFlashMessageWithMissingIsoCode() {}
    }

    /**
     * Test case
     */
    class DatabaseEditRowTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseEditRow|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataRetrievesRecordInformationFromDatabase() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRetrievedRowHasNoPid() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfGivenUidIsNotPositive() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfDatabaseFetchingReturnsNoRow() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionDatabaseRecordExceptionWithAdditionalInformationSet() {}
        /**
         * @test
         */
        public function addDataSkipsDatabaseLookupIfDatabaseRowIsPopulated() {}
    }

    /**
     * Test case
     */
    class TcaCheckboxItemsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaCheckboxItems
         */
        protected $subject;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function addDataKeepExistingItems() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfItemsAreNoArray() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfItemLabelIsNotSet() {}
        /**
         * @test
         */
        public function addDataTranslatesItemLabels() {}
        /**
         * @test
         */
        public function addDataCallsItemsProcFunc() {}
        /** @var FlashMessageQueue|ObjectProphecy $flashMessageQueue */
        public function addDataItemsProcFuncReceivesParameters() {}
        /** @var FlashMessageQueue|ObjectProphecy $flashMessageQueue */
        public function addDataItemsProcFuncEnqueuesFlashMessageOnException() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataTranslatesItemLabelsFromPageTsConfig() {}
    }

    /**
     * Tests for the TcaSelectTreeItems provider.
     *
     * This test only covers the renderTree() method. All other methods are covered TcaSelecItemsTest
     *
     * @see TcaSelecItemsTest
     */
    class TcaSelectTreeItemsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaSelectTreeItems
         */
        protected $subject;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /**
         * Initializes the mock object.
         */
        public function setUp() {}
        protected function tearDown() {}
        /**
         * Setup a mock database connection with expectations for
         * the testsuite.
         */
        protected function mockDatabaseConnection() {}
        /** @var  TableConfigurationTree|ObjectProphecy $treeDataProviderProphecy */
        public function addDataAddsTreeConfigurationForExtJs() {}
        /** @var  TableConfigurationTree|ObjectProphecy $treeDataProviderProphecy */
        public function addDataHandsPageTsConfigSettingsOverToTableConfigurationTree() {}
    }

    /**
     * Test case
     */
    class ParentPageTcaTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ParentPageTca
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataSetsTableTcaFromGlobalsPagesTcaInResult() {}
    }

    /**
     * Test case
     */
    class DatabaseDefaultLanguagePageRowTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseDefaultLanguagePageRow|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataDoesNotApplyToAnyNonPagesTable() {}
        /**
         * @test
         */
        public function addDataDoesApplyToAPagesTableButNoChangeForDefaultLanguage() {}
        /**
         * @test
         */
        public function addDataDoesApplyToATranslatedPagesTable() {}
    }

    /**
     * Test case
     */
    class DatabasePageLanguageOverlayRowsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabasePageLanguageOverlayRows|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataSetsPageLanguageOverlayRows() {}
    }

    /**
     * Test case
     */
    class TcaRadioItemsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaRadioItems
         */
        protected $subject;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRadioItemsNotDefined() {}
        /**
         * @test
         */
        public function addDataKeepExistingItems() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfItemsAreNoArray() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfItemLabelIsNotSet() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfItemValueIsNotSet() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataTranslatesItemLabels() {}
        /**
         * @test
         */
        public function addDataCallsItemsProcFunc() {}
        /**
         * @test
         */
        public function addDataItemsProcFuncReceivesParameters() {}
        /** @var FlashMessageQueue|ObjectProphecy $flashMessageQueue */
        public function addDataItemsProcFuncEnqueuesFlashMessageOnException() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataTranslatesItemLabelsFromPageTsConfig() {}
    }

    /**
     * Test case
     */
    class TcaInlineIsOnSymmetricSideTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaInlineIsOnSymmetricSide
         */
        protected $subject;

        /**
         * Initializes the mock object.
         */
        public function setUp() {}
        /**
         * @test
         */
        public function addDataSetsIsOnSymmetricSideToTrue() {}
    }

    /**
     * Test case
     */
    class TcaInlineExpandCollapseStateTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaInlineExpandCollapseState
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataAddsInlineStatusForTableUid() {}
        /**
         * @test
         */
        public function addDataAddsInlineStatusForSecondLevelChild() {}
        /**
         * @return array
         */
        public function addDataAddsCorrectIsInlineChildExpandedDataProvider() {}
        public function addDataAddsCorrectIsInlineChildExpanded(array $input, $expectedIsInlineChildExpanded) {}
    }

    /**
     * Test case
     */
    class TcaColumnsProcessRecordTitleTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaColumnsProcessRecordTitle
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataRegistersLabelColumn() {}
        /**
         * @test
         */
        public function addDataRegistersAlternativeLabelColumnn() {}
        /**
         * @test
         */
        public function addDataRegistersForeignLabelInInlineContext() {}
        /**
         * @test
         */
        public function addDataRegistersSymmetricLabelInInlineContext() {}
    }

    /**
     * Test case
     */
    class TcaTextTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function addDataSetsRichtextConfigurationAndTransformsContent() {}
    }

    /**
     * Test case
     */
    class TcaRecordTitleTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaRecordTitle
         */
        protected $subject;
        /**
         * @var string
         */
        protected $timeZone;

        public function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionWithMissingLabel() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForLabelUserFunction() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForFormattedLabelUserFunction() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForInlineChildWithForeignLabel() {}
        /**
         * @test
         */
        public function addDataOverridesRecordTitleWithFormattedLabelUserFuncForInlineChildWithForeignLabel() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForInlineChildWithSymmetricLabel() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForUid() {}
        /**
         * Data provider for addDataReturnsRecordTitleForInputType
         * Each data set is an array with the following elements:
         *  - TCA field ['config'] section
         *  - Database value for field
         *  - expected title to be generated
         *
         * @returns array
         */
        public function addDataReturnsRecordTitleForInputTypeDataProvider() {}
/** @var LanguageService|ObjectProphecy $languageService */
        public function addDataReturnsRecordTitleForInputType(/** @var LanguageService|ObjectProphecy $languageService */
$fieldConfig, /** @var LanguageService|ObjectProphecy $languageService */
$fieldValue, /** @var LanguageService|ObjectProphecy $languageService */
$expectedTitle) {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleWithAlternativeLabel() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleWithMultipleAlternativeLabels() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleWithForcedAlternativeLabel() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleWithMultipleForcedAlternativeLabels() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleIgnoresEmptyAlternativeLabels() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForRadioType() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForInlineType() {}
        /**
         * Data provider for addDataReturnsRecordTitleForGroupType
         * Each data set is an array with the following elements:
         *  - TCA field configuration (merged with base config)
         *  - Database value for field
         *  - expected title to be generated
         *
         * @returns array
         */
        public function addDataReturnsRecordTitleForGroupTypeDataProvider() {}
/** @var LanguageService|ObjectProphecy $languageService */
        public function addDataReturnsRecordTitleForGroupType(/** @var LanguageService|ObjectProphecy $languageService */
$fieldConfig, /** @var LanguageService|ObjectProphecy $languageService */
$fieldValue, /** @var LanguageService|ObjectProphecy $languageService */
$expectedTitle) {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForGroupTypeWithInternalTypeDb() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForSingleCheckboxType() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForArrayCheckboxType() {}
        /**
         * @test
         */
        public function addDataReturnsEmptyRecordTitleForFlexType() {}
        /**
         * @test
         */
        public function addDataReturnsRecordTitleForSelectType() {}
        /**
         * @test
         */
        public function addDataReturnsStrippedAndTrimmedValueForTextType() {}
    }

    /**
     * Test case
     */
    class UserTsConfigTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var UserTsConfig
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataSetsUserTypoScriptInResult() {}
    }

    /**
     * Test case
     */
    class TcaColumnsRemoveUnusedTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaColumnsRemoveUnused
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataKeepsColumnsToProcess() {}
    }

    /**
     * Test case
     */
    class TcaSelectItemsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaSelectItems|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        protected function mockDatabaseConnection($tableName = 'fTable') {}
        /**
         * Mock a doctrine database connection with all expectations
         * required for the processSelectField* tests.
         */
        protected function mockDatabaseConnectionForProcessSelectField() {}
        /**
         * @test
         */
        public function addDataKeepExistingItems() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfAnItemIsNotAnArray() {}
        /**
         * @test
         */
        public function addDataTranslatesItemLabels() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataKeepsIconFromItem() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionWithUnknownSpecialValue() {}
        /**
         * @test
         */
        public function addDataAddsTablesWithSpecialTables() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataAddsTablesWithSpecialPageTypes() {}
        /**
         * Data provider
         */
        public function addDataAddsExcludeFieldsWithSpecialExcludeDataProvider() {}
/** @var LanguageService|ObjectProphecy $languageService */
        public function addDataAddsExcludeFieldsWithSpecialExclude(/** @var LanguageService|ObjectProphecy $languageService */
$tca, /** @var LanguageService|ObjectProphecy $languageService */
$expectedItems) {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataAddsExcludeFieldsFromFlexWithSpecialExclude() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataAddsExplicitAllowFieldsWithSpecialExplicitValues() {}
        /**
         * @test
         */
        public function addDataAddsExplicitDenyFieldsWithSpecialExplicitValues() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataAddsExplicitIndividualAllowFieldsWithSpecialExplicitValues() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataAddsExplicitIndividualDenyFieldsWithSpecialExplicitValues() {}
        /**
         * @test
         */
        public function addDataAddsLanguagesWithSpecialLanguages() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataAddsCustomOptionsWithSpecialCustom() {}
        /**
         * @test
         */
        public function addDataAddsGroupItemsWithSpecialModListGroup() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataAddsFileItemsWithConfiguredFileFolder() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForInvalidFileFolder() {}
        /**
         * @test
         */
        public function addDataAddsItemsByAddItemsFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataAddsItemsByAddItemsWithDuplicateValuesFromPageTsConfig() {}
        /**
         * Data provider
         */
        public function addDataReplacesMarkersInForeignTableClauseDataProvider() {}
/** @var BackendUserAuthentication|ObjectProphecy $backendUserProphecy */
        public function addDataReplacesMarkersInForeignTableClause(/** @var BackendUserAuthentication|ObjectProphecy $backendUserProphecy */
$foreignTableWhere, /** @var BackendUserAuthentication|ObjectProphecy $backendUserProphecy */
$expectedWhere, /** @var BackendUserAuthentication|ObjectProphecy $backendUserProphecy */
array $inputOverride) {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfForeignTableIsNotDefinedInTca() {}
        /** @var Statement|ObjectProphecy $statementProphet */
        public function addDataForeignTableSplitsGroupOrderAndLimit() {}
        /**
         * @test
         */
        public function addDataForeignTableQueuesFlashMessageOnDatabaseError() {}
        /**
         * @test
         */
        public function addDataForeignTableHandlesForeignTableRows() {}
        /**
         * @test
         */
        public function addDataForeignTableResolvesIconFromSelicon() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataRemovesItemsByKeepItemsPageTsConfig() {}
        /**
         * @test
         */
        public function addDataRemovesAllItemsByEmptyKeepItemsPageTsConfig() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataEvaluatesKeepItemsBeforeAddItemsFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataRemovesItemsByRemoveItemsPageTsConfig() {}
        /**
         * @test
         */
        public function addDataRemovesItemsByZeroValueRemoveItemsPageTsConfig() {}
        /**
         * @test
         */
        public function addDataRemovesItemsAddedByAddItemsFromPageTsConfigByRemoveItemsPageTsConfig() {}
        /**
         * @test
         */
        public function addDataRemovesItemsByLanguageFieldUserRestriction() {}
        /**
         * @test
         */
        public function addDataRemovesItemsByUserAuthModeRestriction() {}
        /**
         * @test
         */
        public function addDataKeepsAllPagesDoktypesForAdminUser() {}
        /**
         * @test
         */
        public function addDataKeepsAllowedPageTypesForNonAdminUser() {}
        /**
         * @test
         */
        public function addDataCallsItemsProcFunc() {}
        /**
         * @test
         */
        public function addDataItemsProcFuncReceivesParameters() {}
        /** @var FlashMessageQueue|ObjectProphecy $flashMessageQueue */
        public function addDataItemsProcFuncEnqueuesFlashMessageOnException() {}
        /**
         * @test
         */
        public function addDataTranslatesItemLabelsFromPageTsConfig() {}
        /**
         * @test
         */
        public function processSelectFieldValueSetsMmForeignRelationValues() {}
        /** @var RelationHandler|ObjectProphecy $relationHandlerProphecy */
        public function processSelectFieldValueSetsForeignRelationValues() {}
        /**
         * @test
         */
        public function processSelectFieldValueRemovesInvalidDynamicValues() {}
        /**
         * @test
         */
        public function processSelectFieldValueKeepsValuesFromStaticItems() {}
        /**
         * @test
         */
        public function processSelectFieldValueReturnsEmptyValueForSingleSelect() {}
        /**
         * @test
         */
        public function processSelectFieldValueTrimsEmptyValueForMultiValueSelect() {}
        /**
         * @test
         */
        public function processSelectFieldValueDoesNotCallRelationManagerForStaticOnlyItems() {}
        /**
         * @test
         */
        public function processSelectFieldValueAddsInvalidValuesToItemsForSingleSelects() {}
        /**
         * @test
         */
        public function processSelectFieldValueReturnsDuplicateValuesForMultipleSelect() {}
        /**
         * @test
         */
        public function processSelectFieldValueReturnsUniqueValuesForMultipleSelect() {}
        /**
         * Data Provider
         *
         * @return array
         */
        public function processSelectFieldSetsCorrectValuesForMmRelationsDataProvider() {}
/** @var RelationHandler|ObjectProphecy $relationHandlerProphecy */
        public function processSelectFieldSetsCorrectValuesForMmRelations(/** @var RelationHandler|ObjectProphecy $relationHandlerProphecy */
array $input, /** @var RelationHandler|ObjectProphecy $relationHandlerProphecy */
array $overrideRelationHandlerSettings, /** @var RelationHandler|ObjectProphecy $relationHandlerProphecy */
array $relationHandlerUids) {}
    }

    /**
     * Test case
     */
    class DatabaseEffectivePidTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseEffectivePid
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataSetsUidOfRecordIsPageIsEdited() {}
        /**
         * @test
         */
        public function addDataSetsPidOfRecordIfNoPageIsEdited() {}
        /**
         * @test
         */
        public function addDataSetsUidOfParentPageRowIfParentPageRowExistsAndCommandIsNew() {}
        /**
         * @test
         */
        public function addDataSetsZeroWithMissingParentPageRowAndCommandIsNew() {}
    }

    /**
     * Test case
     */
    class TcaColumnsOverridesTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaColumnsOverrides
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataRemovesGivenColumnsOverrides() {}
        /**
         * @test
         */
        public function addDataMergesColumnsOverridesIntoColumns() {}
    }

    /**
     * Test case
     */
    class DatabaseUserPermissionCheckTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseUserPermissionCheck
         */
        protected $subject;
        /**
         * @var BackendUserAuthentication | ObjectProphecy
         */
        protected $beUserProphecy;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataSetsUserPermissionsOnPageForAdminUser() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfUserHasNoTablesModifyPermissionForGivenTable() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfUserHasNoContentEditPermissionsOnPage() {}
        /**
         * @test
         */
        public function addDataAddsUserPermissionsOnPageForContentIfUserHasCorrespondingPermissions() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfCommandIsEditTableIsPagesAndUserHasNoPagePermissions() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfCommandIsEditTableIsPagesAndUserHasNoDoktypePermissions() {}
        /**
         * @test
         */
        public function addDataAddsUserPermissionsOnPageIfTableIsPagesAndUserHasPagePermissions() {}
        /**
         * @test
         */
        public function addDataSetsPermissionsToAllIfRootLevelRestrictionForTableIsIgnoredForContentEditRecord() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRootNodeShouldBeEditedWithoutPermissions() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRecordEditAccessInternalsReturnsFalse() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForNewContentRecordWithoutPermissions() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForNewPageWithoutPermissions() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfHookDeniesAccess() {}
        /**
         * @test
         */
        public function addDataSetsUserPermissionsOnPageForNewPageIfPageNewIsDeniedAndHookAllowsAccess() {}
        /**
         * @test
         */
        public function addDataSetsUserPermissionsOnPageForNewPage() {}
        /**
         * @test
         */
        public function addDataSetsUserPermissionsOnPageForNewContentRecord() {}
        /**
         * @test
         */
        public function addDataSetsPermissionsToAllIfRootLevelRestrictionForTableIsIgnoredForNewContentRecord() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForNewRecordsOnRootLevelWithoutPermissions() {}
    }

    /**
     * Test case
     */
    class InitializeProcessedTcaTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var InitializeProcessedTca
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataSetsTableTcaFromGlobalsInResult() {}
        /**
         * @test
         */
        public function addDataKeepsGivenProcessedTca() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfGlobalTableTcaIsNotSet() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfGlobalTableTcaIsNotAnArray() {}
    }

    /**
     * Test case
     */
    class TcaInlineConfigurationTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaInlineConfiguration
         */
        protected $subject;
        /**
         * @var array Set of default controls
         */
        protected $defaultConfig;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForInlineFieldWithoutForeignTableConfig() {}
        /**
         * @test
         */
        public function addDataSetsDefaults() {}
        /**
         * @test
         */
        public function addDataKeepsGivenMinitems() {}
        /**
         * @test
         */
        public function addDataForcesMinitemsPositive() {}
        /**
         * @test
         */
        public function addDataKeepsGivenMaxitems() {}
        /**
         * @test
         */
        public function addDataForcesMaxitemsPositive() {}
        /**
         * @test
         */
        public function addDataMergesWithGivenAppearanceSettings() {}
        /**
         * @test
         */
        public function addDataForcesLevelLinksPositionWithForeignSelector() {}
        /**
         * @test
         */
        public function addDataKeepsLevelLinksPositionWithForeignSelectorAndUseCombination() {}
        /**
         * @test
         */
        public function addDataKeepsShowPossibleLocalizationRecordsButForcesBooleanTrue() {}
        /**
         * @test
         */
        public function addDataKeepsShowPossibleLocalizationRecordsButForcesBooleanFalse() {}
        /**
         * @test
         */
        public function addDataKeepshowRemovedLocalizationRecordsButForcesBooleanTrue() {}
        /**
         * @test
         */
        public function addDataKeepsShowRemovedLocalizationRecordsButForcesBooleanFalse() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfForeignSelectorAndForeignUniquePointToDifferentFields() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfForeignSelectorPointsToANotExistingField() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfForeignUniquePointsToANotExistingField() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfForeignUniqueTargetIsNotTypeSelectOrGroup() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForForeignSelectorGroupWithoutInternalTypeDb() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfForeignUniqueSelectDoesNotDefineForeignTable() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfForeignUniqueGroupDoesNotDefineForeignTable() {}
        /**
         * @test
         */
        public function addDataAddsSelectorOrUniqueConfigurationForForeignUnique() {}
        /**
         * @test
         */
        public function addDataMergesForeignSelectorFieldTcaOverride() {}
    }

    /**
     * Test case
     */
    class PageTsConfigMergedTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var PageTsConfigMerged
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataSetsMergedTsConfigToTsConfig() {}
        /**
         * @test
         */
        public function addDataKeepsTableSpecificConfigurationWithoutType() {}
        /**
         * @test
         */
        public function addDataMergesTypeSpecificConfiguration() {}
        /**
         * @test
         */
        public function addDataTypeSpecificConfigurationOverwritesMainConfiguration() {}
    }

    /**
     * Test case
     */
    class TcaInlineTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaInline
         */
        protected $subject;
        /**
         * @var BackendUserAuthentication | ObjectProphecy
         */
        protected $beUserProphecy;
        /**
         * @var array Set of default controls
         */
        protected $defaultConfig;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataWithoutModifyRightsButWithInlineTypeWillNotParseChildren() {}
        /**
         * @test
         */
        public function addDataWithUserRightsButWithoutInlineTypeWillNotParseChildren() {}
        /**
         * @test
         */
        public function addDataWithInlineTypeAndModifyRightsWillAddChildren() {}
    }

    /**
     * Test case
     */
    class DatabaseRecordTypeValueTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseRecordTypeValue|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfTcaTypesAreEmpty() {}
        /**
         * @test
         */
        public function addDataKeepsExistingTcaRecordTypeValue() {}
        /**
         * @test
         */
        public function addDataKeepsExistingTcaRecordTypeValueWithValueZero() {}
        /**
         * @test
         */
        public function addDataSetsRecordTypeValueToHistoricalOneIfTypeZeroIsNotDefined() {}
        /**
         * @test
         */
        public function addDataSetsRecordTypeValueToZero() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfTypePointsToANotExistingField() {}
        /**
         * @test
         */
        public function addDataSetsRecordTypeValueToValueOfDatabaseField() {}
        /**
         * @test
         */
        public function addDataSetsRecordTypeValueToZeroIfValueOfDatabaseFieldIsNotDefinedInTca() {}
        /**
         * @test
         */
        public function addDataSetsRecordTypeValueToZeroIfValueOfDatabaseFieldIsEmptyString() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfValueTypesNotExistsAndNoFallbackExists() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForForeignTypeConfigurationNotAsSelectOrGroup() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForForeignTypeIfPointerConfigurationHasNoTable() {}
        /**
         * @test
         */
        public function addDataSetsTypeValueFromForeignTableRecord() {}
        /**
         * @test
         */
        public function addDataSetsTypeValueFromNestedTcaGroupField() {}
    }

    /**
     * Test case
     */
    class TcaFlexPrepareTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaFlexPrepare
         */
        protected $subject;
        /**
         * @var BackendUserAuthentication|ObjectProphecy
         */
        protected $backendUserProphecy;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /** @var CacheManager|ObjectProphecy $cacheManagerProphecy */
        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function addDataKeepsExistingDataStructure() {}
        /**
         * @test
         */
        public function addDataSetsParsedDataStructureArray() {}
        /**
         * @test
         */
        public function addDataSetsParsedDataStructureArrayWithSheets() {}
        /**
         * @test
         */
        public function addDataInitializesDatabaseRowValueIfNoDataStringIsGiven() {}
    }

    /**
     * Test case
     */
    class DatabaseParentPageRowTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseParentPageRow|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataFetchesParentPageRowOfRecordIfNeighbourGiven() {}
        /**
         * @test
         */
        public function addDataSetsNeigborRowIfNegativeUidGiven() {}
        /**
         * @test
         */
        public function addDataSetsParentPageRowToNullIfParentIsRoot() {}
        /**
         * @test
         */
        public function addDataSetsParentPageToGivenPageIdIfCommandIsNew() {}
        /**
         * @test
         */
        public function addDataSetsParentPageRowOnParentIfCommandIsEdit() {}
    }

    /**
     * Test case
     */
    class DatabaseRowDefaultValuesTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseRowDefaultValues
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataKeepsExistingValue() {}
        /**
         * @test
         */
        public function addDataKeepsExistingNullValueWithEvalNull() {}
        /**
         * @test
         */
        public function addDataSetsNullValueWithDefaultNullForNewRecord() {}
        /**
         * @test
         */
        public function addDataSetsDefaultValueIfEvalNullIsSet() {}
        /**
         * @test
         */
        public function addDataSetsDefaultValueIsSet() {}
    }

    /**
     * Test case
     */
    class TcaTypesShowitemTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaTypesShowitem
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataRemovesTypeRelatedFields() {}
        /**
         * @test
         */
        public function addDataInsertsMatchingSubtypeAddListAfterSubtypeValueField() {}
        /**
         * @test
         */
        public function addDataInsertsMatchingSubtypeAddListAfterPaletteWithSubtypeValueField() {}
        /**
         * @test
         */
        public function addDataRemovesMatchingSubtypeExcludeListItems() {}
        /**
         * @test
         */
        public function addDataRemovesMatchingSubtypeExcludeListItemsFromPalettes() {}
        /**
         * @test
         */
        public function addDataRemovesMatchingBitmaskExcludeListItems() {}
        /**
         * @test
         */
        public function addDataRemovesMatchingBitmaskExcludeListItemsFromPalettes() {}
    }

    /**
     * Test case
     */
    class TcaGroupTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaGroup
         */
        protected $subject;
        /**
         * @var array
         */
        protected $singletonInstances;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function addDataReturnsFieldUnchangedIfFieldIsNotTypeGroup() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionWithTypeGroupAndNoValidInternalType() {}
        /**
         * @test
         */
        public function addDataSetsUploadFolderForFileReference() {}
        /**
         * @test
         */
        public function addDataSetsFileData() {}
        /**
         * @test
         */
        public function addDataSetsFolderData() {}
        /**
         * @test
         */
        public function addDataSetsDatabaseData() {}
    }

    /**
     * Test case
     */
    class DatabaseRowDateTimeFieldsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function addDataSetsTimestampZeroForDefaultDateField() {}
        /**
         * @test
         */
        public function addDataSetsTimestampZeroForDefaultDateTimeField() {}
        /**
         * @test
         */
        public function addDataSetsTimestampZeroForDefaultTimeField() {}
        /**
         * @test
         */
        public function addDataConvertsDateStringToTimestamp() {}
        /**
         * @test
         */
        public function addDataConvertsDateTimeStringToTimestamp() {}
        /**
         * @test
         */
        public function addDataConvertsTimeStringToTimestamp() {}
    }

    /**
     * Test case
     */
    class EvaluateDisplayConditionsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function addDataThrowsExceptionIfMultipleConditionsAreNotCombinedWithAndOrOr() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionWithMultipleConditionsCombinedWithAndHavingOnlyOneSubCondition() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfConditionIsNotStringOrArray() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfConditionTypeIsUnknown() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFieldConditionHasNoFieldName() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFieldConditionHasNoOperator() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFieldConditionHasInvalidOperator() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFieldConditionHasNoOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFieldConditionReqHasInvalidOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFieldConditionNumberComparisonHasInvalidOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFieldConditionRangeComparisonHasInvalidOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFieldConditionRangeComparisonHasInvalidMaxOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRecordConditionHasNoNewKeyword() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRecordConditionHasInvalidNewKeyword() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRecordConditionHasNoOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRecordConditionHasInvalidOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfRecordConditionHasNoUidInDatabaseRow() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfVersionConditionHasNoIsKeyword() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfVersionConditionHasInvalidIsKeyword() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfVersionConditionHasNoOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfVersionConditionHasInvalidOperand() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfVersionConditionHasNoUidInDatabaseRow() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfUserConditionHasNoUserfuncSpecified() {}
        /**
         * @test
         */
        public function addDataEvaluatesUserCondition() {}
        public function addDataEvaluatesUserConditionCallback(array $parameter) {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFlexSheetNameAndFieldNameCombinationsOverlap() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFlexSheetConditionReferencesFieldFromSameSheet() {}
        /**
         * @test
         */
        public function addDataTrowsExceptionIfFlexFieldSheetConditionReferencesNotExistingFieldValue() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFlexFieldFieldConditionReferencesNotExistingFieldValue() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFlexFieldReferencingFlexFieldIsNotFoundInFieldValue() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfFlexSectionContainerFoundNoReferencedFieldValue() {}
        /**
         * Test scenarios for "a display condition references the value of another field"
         *
         * @return array
         */
        public function addDataRemovesTcaReferencingOtherFieldsInDisplayConditionDataProvider() {}
        public function addDataRemovesTcaReferencingOtherFieldsInDisplayCondition($processedTcaFieldToBeRemovedPath, array $databaseRow, array $processedTca) {}
        /**
         * Returns data sets for the test matchConditionStrings
         * Each data set is an array with the following elements:
         * - the condition string
         * - the current record
         * - the expected result
         *
         * @return array
         */
        public function conditionStringDataProvider() {}
        public function matchConditionStrings($condition, array $record, $expectedResult) {}
        public function matchConditionStringsWithRecordTestFieldBeingArray($condition, array $record, $expectedResult) {}
        /**
         * @test
         */
        public function matchHideForNonAdminsReturnsTrueIfBackendUserIsAdmin() {}
        /**
         * @test
         */
        public function matchHideForNonAdminsReturnsFalseIfBackendUserIsNotAdmin() {}
    }

    /**
     * Test case
     */
    class TcaColumnsProcessCommonTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaColumnsProcessCommon
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataRegistersOrigUidColumn() {}
        /**
         * @test
         */
        public function addDataRegistersRecordTypeColumn() {}
        /**
         * @test
         */
        public function addDataRegistersRecordTypeRelationColumn() {}
        /**
         * @test
         */
        public function addDataRegistersLanguageFieldColumn() {}
        /**
         * @test
         */
        public function addDataRegistersTransOrigPointerColumn() {}
        /**
         * @test
         */
        public function addDataRegistersTransOrigDiffSourceColumn() {}
        /**
         * @test
         */
        public function addDataRegistersSingleSubtypesAddlistFields() {}
        /**
         * @test
         */
        public function addDataRegistersMultipleSubtypesAddlistFields() {}
    }

    /**
     * Test case
     */
    class TcaInputPlaceholdersTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaInputPlaceholders
         */
        protected $subject;

        public function setUp() {}
        /**
         * @test
         */
        public function addDataRemovesEmptyPlaceholderOption() {}
        /**
         * @test
         */
        public function addDataReturnsUnmodifiedSimpleStringPlaceholder() {}
        /**
         * @test
         */
        public function addDataReturnsValueFromDatabaseRowAsPlaceholder() {}
        /** @var FormDataCompiler|ObjectProphecy $formDataCompilerProphecy */
        public function addDataReturnsValueFromSelectTypeRelation() {}
        /**
         * @test
         */
        public function addDataReturnsNoPlaceholderForNewSelectTypeRelation() {}
        /** @var TcaInputPlaceholderRecord $languageService */
        public function addDataReturnsValueFromGroupTypeRelation() {}
        /** @var TcaInputPlaceholderRecord $languageService */
        public function addDataReturnsValueFromInlineTypeRelation() {}
        /**
         * @test
         */
        public function addDataReturnsValueFromRelationsRecursively() {}
        /** @var LanguageService|ObjectProphecy $languageService */
        public function addDataCallsLanguageServiceForLocalizedPlaceholders() {}
    }

    /**
     * Test case
     */
    class DatabaseLanguageRowsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseLanguageRows|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $subject;
        /**
         * @var BackendUserAuthentication | ObjectProphecy
         */
        protected $beUserProphecy;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataReturnsUnchangedResultIfTableProvidesNoTranslations() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfDefaultOfLocalizedRecordIsNotFound() {}
        /**
         * @test
         */
        public function addDataSetsDefaultLanguageRow() {}
        /**
         * @test
         */
        public function addDataSetsDiffSourceFieldIfGiven() {}
        /** @var TranslationConfigurationProvider|ObjectProphecy $translationProphecy */
        public function addDataSetsAdditionalLanguageRowsIfRequestedInUserTypoScript() {}
        /** @var TranslationConfigurationProvider|ObjectProphecy $translationProphecy */
        public function addDataSetsDoesNotAddHandledRowAsAdditionalLanguageRows() {}
        /**
         * @test
         */
        public function addDataSetsSourceLanguageRow() {}
    }

    /**
     * Test case
     */
    class DatabaseUniqueUidNewRowTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var DatabaseUniqueUidNewRow
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataReturnSameDataIfCommandIsEdit() {}
        /**
         * @test
         */
        public function addDataKeepsGivenUidIfAlreadySet() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionIfUidIsAlreadySetButDoesNotStartWithNewKeyword() {}
        /**
         * @test
         */
        public function addDataSetsUniqeId() {}
    }

    /**
     * Test case
     */
    class TcaColumnsProcessFieldLabelsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaColumnsProcessFieldLabels
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataKeepsLabelAsIsIfNoOverrideIsGiven() {}
        /**
         * @test
         */
        public function addDataSetsLabelFromShowitem() {}
        /**
         * @test
         */
        public function addDataSetsLabelFromPalettesShowitem() {}
        /**
         * @test
         */
        public function addDataSetsLabelFromPageTsConfig() {}
        /**
         * @test
         */
        public function addDataSetsLabelFromPageTsConfigForSpecificLanguage() {}
    }

    /**
     * Test case
     */
    class FormEngineUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function databaseRowCompatibilityKeepsSimpleValue() {}
        /**
         * @test
         */
        public function databaseRowCompatibilityImplodesSimpleArray() {}
        /**
         * @test
         */
        public function databaseRowCompatibilityImplodesSelectArrayWithValuesAtSecondPosition() {}
    }

}

namespace typo3\sysext\backend\Tests\Unit\Form\FormDataProvider {
    /**
     * InlineOverrideChildTca Test file
     */
    class InlineOverrrideChildTcaTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var InlineOverrideChildTca
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function addDataOverrulesShowitemByGivenOverrideChildTca() {}
        /**
         * @test
         */
        public function addDataAddsTypeShowitemByGivenOverrideChildTca() {}
        /**
         * @test
         */
        public function addDataMergesForeignSelectorFieldTcaOverride() {}
        /**
         * @test
         */
        public function addDataSetsDefaultValueForChildRecordColumn() {}
        /**
         * @test
         */
        public function addDataThrowsExceptionForRestrictedField() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Form\NodeExpansion {
    /**
     * Test case
     */
    class FieldControlTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function renderMergesResultOfSingleControls() {}
    }

}

namespace typo3\sysext\backend\Tests\Unit\Form\Element {
    /**
     * Test case
     */
    class InputDateTimeElementTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string Selected timezone backup
         */
        protected $timezoneBackup;

        /**
         * We're fiddling with hard timestamps in the tests, but time methods in
         * the system under test do use timezone settings. Therefore we backup the
         * current timezone setting, set it to UTC explicitly and reconstitute it
         * again in tearDown()
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * Data provider for renderAppliesCorrectTimestampConversion
         *
         * @return array
         */
        public function renderAppliesCorrectTimestampConversionDataProvider() {}
        public function renderAppliesCorrectTimestampConversion($input, $serverTimezone, $expectedOutput) {}
    }

    /**
     * Tests for InputHiddenElement Form
     */
    class InputHiddenElementTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function renderReturnsElementsAsAdditionalHiddenFields() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Form\Container {
    /**
     * Test case
     */
    class PaletteAndSingleContainerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function renderUsesPaletteLabelFromFieldArray() {}
        /**
         * @test
         */
        public function renderUsesPaletteLabelFromPaletteArray() {}
        /**
         * @test
         */
        public function renderPrefersFieldArrayPaletteLabelOverPaletteLabel() {}
    }

    /**
     * Test case
     */
    class ListOfFieldsContainerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function renderDelegatesShowitemField() {}
        /**
         * @test
         */
        public function renderDelegatesShowitemFieldAndRemovesDuplicates() {}
        /**
         * @test
         */
        public function renderDelegatesPaletteFields() {}
        /**
         * @test
         */
        public function renderRemovesNotExistingTypesField() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Module {
    /**
     * Test case
     */
    class ModuleLoaderTest extends \typo3\testingframework\core\unit\unittestcase {
        protected function setUp() {}
        /**
         * @return array
         */
        public function addModuleLabelsDataProvider() {}
        public function validateLabelsString($moduleName, $labels, array $expectedResult) {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Template\Components {
    /**
     * Test case for Menu
     */
    class MenuTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Try setting an empty menu
         *
         * @test
         */
        public function isMenuValidBlankCallExpectFalse() {}
        /**
         * Set a valid menu
         *
         * @test
         */
        public function isMenuValidValidMenuWithDefaultsExpectTrue() {}
        /**
         * Set a valid menu
         *
         * @test
         */
        public function makeMenuAllGoodExpectTrue() {}
        /**
         * Tests if empty menus get removed from the stack
         *
         * @test
         */
        public function getMenusremovedEmptyMenusExpectsEquals() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Template\Components\Buttons {
    /**
     * Test case for LinkButton
     */
    class LinkButtonTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Try validating an empty button
         *
         * @test
         */
        public function isButtonValidBlankCallExpectFalse() {}
        /**
         * Omit the Icon
         *
         * @test
         */
        public function isButtonValidOmittedIconExpectFalse() {}
        /**
         * Omit the title
         *
         * @test
         */
        public function isButtonValidOmittedTitleExpectFalse() {}
        /**
         * Omit Href
         *
         * @test
         */
        public function isButtonValidOmittedHrefExpectFalse() {}
        /**
         * Send a valid button
         *
         * @test
         */
        public function isButtonValidAllValuesSetExpectTrue() {}
    }

    /**
     * Class BackendModuleRequestHandlerTest
     */
    class SplitButtonTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Try to validate an empty button
         *
         * @test
         */
        public function isButtonValidBlankCallExpectFalse() {}
        /**
         * Try adding an invalid button to a splitButton
         *
         * @test
         */
        public function isButtonValidInvalidButtonGivenExpectFalse() {}
        /**
         * Try to add multiple primary actions
         *
         * @test
         */
        public function isButtonValidBrokenSetupMultiplePrimaryActionsGivenExpectFalse() {}
        /**
         * Try to add an invalid button as second parameter
         *
         * @test
         */
        public function isButtonValidBrokenSetupInvalidButtonAsSecondParametersGivenExpectFalse() {}
        /**
         * Send in a valid button
         *
         * @test
         */
        public function isButtonValidValidSetupExpectTrue() {}
    }

    /**
     * Test case for FullyRenderedButton
     */
    class FullyRenderedButtonTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Try to valide an empty button
         *
         * @test
         */
        public function isButtonValidBlankCallExpectFalse() {}
        /**
         * Tests a valid HTML Button
         *
         * @test
         */
        public function isButtonValidHtmlSourceGivenExpectTrue() {}
    }

    /**
     * Test case for InputButton
     */
    class InputButtonTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Try to validate an empty button
         *
         * @test
         */
        public function isButtonValidBlankCallExpectFalse() {}
        /**
         * Omit the Icon
         *
         * @test
         */
        public function isButtonValidOmittedIconExpectFalse() {}
        /**
         * Omit the title
         *
         * @test
         */
        public function isButtonValidOmittedTitleExpectFalse() {}
        /**
         * Omit the name
         *
         * @test
         */
        public function isButtonValidOmittedNameExpectFalse() {}
        /**
         * Omit the Value
         *
         * @test
         */
        public function isButtonValidOmittedValueExpectFalse() {}
        /**
         * Set a 100% valid button
         *
         * @test
         */
        public function isButtonValidAllValuesSetExpectTrue() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Template\Components\Menu {
    /**
     * Test case for MenuItem
     */
    class MenuItemTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Try a blank menu Item
         *
         * @test
         */
        public function isMenuItemValidBlankCallExpectFalse() {}
        /**
         * Try omitting the title and a Href
         *
         * @test
         */
        public function isMenuItemValidOmittedHrefAndRouteExpectFalse() {}
        /**
         * Try omitting the title
         *
         * @test
         */
        public function isMenuItemValidOmittedTitleExpectFalse() {}
        /**
         * Set a valid title and href
         *
         * @test
         */
        public function isMenuItemValidSetValidHrefAndTitleExpectTrue() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Controller {
    /**
     * Test case
     */
    class FormInlineAjaxControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function createActionThrowsExceptionIfContextIsEmpty() {}
        /**
         * @test
         */
        public function createActionThrowsExceptionIfContextConfigSectionIsEmpty() {}
        /**
         * @test
         */
        public function createActionThrowsExceptionIfContextConfigSectionDoesNotValidate() {}
        /**
         * @test
         */
        public function detailsActionThrowsExceptionIfContextIsEmpty() {}
        /**
         * @test
         */
        public function detailsActionThrowsExceptionIfContextConfigSectionIsEmpty() {}
        /**
         * @test
         */
        public function detailsActionThrowsExceptionIfContextConfigSectionDoesNotValidate() {}
        /**
         * @test
         */
        public function synchronizeLocalizeActionThrowsExceptionIfContextIsEmpty() {}
        /**
         * @test
         */
        public function synchronizeLocalizeActionThrowsExceptionIfContextConfigSectionIsEmpty() {}
        /**
         * @test
         */
        public function synchronizeLocalizeActionThrowsExceptionIfContextConfigSectionDoesNotValidate() {}
        /**
         * Fallback for IRRE items without inline view attribute
         * @see https://forge.typo3.org/issues/76561
         *
         * @test
         */
        public function getInlineExpandCollapseStateArraySwitchesToFallbackIfTheBackendUserDoesNotHaveAnUCInlineViewProperty() {}
        /**
         * Unserialize uc inline view string for IRRE item
         * @see https://forge.typo3.org/issues/76561
         *
         * @test
         */
        public function getInlineExpandCollapseStateArrayWillUnserializeUCInlineViewPropertyAsAnArrayWithData() {}
    }

    /**
     * Tests for EditDocumentController
     */
    class EditDocumentControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function parseAdditionalGetParametersCreatesCorrectParameterArray() {}
    }

    /**
     * Test case
     */
    class FormSelectTreeAjaxControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function fetchDataActionThrowsExceptionIfTcaOfTableDoesNotExist() {}
        /**
         * @test
         */
        public function fetchDataActionThrowsExceptionIfTcaOfTableFieldDoesNotExist() {}
    }

    /**
     * Class LoginControllerTest
     */
    class LoginControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var LoginController|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $loginControllerMock;

        /**
         * @throws \InvalidArgumentException
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function validateAndSortLoginProvidersDetectsMissingProviderConfiguration() {}
        /**
         * @test
         */
        public function validateAndSortLoginProvidersDetectsNonArrayProviderConfiguration() {}
        /**
         * @test
         */
        public function validateAndSortLoginProvidersDetectsIfNoProviderIsRegistered() {}
        /**
         * @test
         */
        public function validateAndSortLoginProvidersDetectsMissingConfigurationForProvider() {}
        /**
         * @test
         */
        public function validateAndSortLoginProvidersDetectsWrongProvider() {}
        /**
         * @test
         */
        public function validateAndSortLoginProvidersDetectsMissingLabel() {}
        /**
         * @test
         */
        public function validateAndSortLoginProvidersDetectsMissingIconClass() {}
        /**
         * @test
         */
        public function validateAndSortLoginProvidersDetectsMissingSorting() {}
    }

    /**
     * Class PageLayoutControllerTest
     */
    class PageLayoutControllerTest extends \typo3\testingframework\core\unit\unittestcase {
/** @var PageLayoutController|\PHPUnit_Framework_MockObject_MockObject $pageController */
        public function pageIsNotLockedForEditorsReturnsCorrectValue(/** @var PageLayoutController|\PHPUnit_Framework_MockObject_MockObject $pageController */
$isAdmin, /** @var PageLayoutController|\PHPUnit_Framework_MockObject_MockObject $pageController */
$permissions, /** @var PageLayoutController|\PHPUnit_Framework_MockObject_MockObject $pageController */
$editLock, /** @var PageLayoutController|\PHPUnit_Framework_MockObject_MockObject $pageController */
$expected) {}
        /**
         * @return array
         */
        public function pageIsNotLockedForEditorsReturnsCorrectValueDataProvider() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Controller\File {
    /**
     * Tests for \TYPO3\CMS\Backend\Tests\Unit\Controller\File\FileController
     */
    class FileControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Backend\Controller\File\FileController|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $fileController;
        /**
         * @var \TYPO3\CMS\Core\Resource\File|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $fileResourceMock;
        /**
         * @var \TYPO3\CMS\Core\Resource\Folder|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $folderResourceMock;
        /**
         * @var \TYPO3\CMS\Core\Utility\File\ExtendedFileUtility|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockFileProcessor;
        /**
         * @var ServerRequest|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $request;
        /**
         * @var Response|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $response;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function flattenResultDataValueFlattensFileAndFolderResourcesButReturnsAnythingElseAsIs() {}
        /**
         * @test
         */
        public function processAjaxRequestDeleteProcessActuallyDoesNotChangeFileData() {}
        /**
         * @test
         */
        public function processAjaxRequestEditFileProcessActuallyDoesNotChangeFileData() {}
        /**
         * @test
         */
        public function processAjaxRequestReturnsStatus200IfNoErrorOccures() {}
        /**
         * @test
         */
        public function processAjaxRequestReturnsStatus500IfErrorOccurs() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Controller\Wizard {
    /**
     * Test case
     */
    class SuggestWizardControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function getFlexFieldConfigurationThrowsExceptionIfSimpleFlexFieldIsNotFound() {}
        /**
         * @test
         */
        public function getFlexFieldConfigurationThrowsExceptionIfSectionContainerFlexFieldIsNotFound() {}
        public function isTableHiddenIsProperlyRetrieved($expected, $array) {}
        public function isTableHiddenIsProperlyRetrievedDataProvider() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\View {
    /**
     * Testing behaviour of \TYPO3\CMS\Backend\View\BackendLayoutView
     */
    class BackendLayoutViewTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Backend\View\BackendLayoutView|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $backendLayoutView;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        public function selectedCombinedIdentifierIsDetermined($expected, array $page, array $rootLine) {}
        /**
         * @return array
         */
        public function selectedCombinedIdentifierIsDeterminedDataProvider() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\View\BackendLayout {
    /**
     * Testing backend layout representation.
     */
    class BackendLayoutTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function invalidIdentifierIsRecognizedOnCreation() {}
        /**
         * @test
         */
        public function objectIsCreated() {}
    }

    /**
     * Testing collection of backend layouts.
     */
    class BackendLayoutCollectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function invalidIdentifierIsRecognizedOnCreation() {}
        /**
         * @test
         */
        public function objectIsCreated() {}
        /**
         * @test
         */
        public function invalidBackendLayoutIsRecognizedOnAdding() {}
        /**
         * @test
         */
        public function duplicateBackendLayoutIsRecognizedOnAdding() {}
        /**
         * @test
         */
        public function backendLayoutCanBeFetched() {}
    }

    /**
     * Testing collection of backend layout data providers.
     */
    class DataProviderCollectionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Backend\View\BackendLayout\DataProviderCollection
         */
        protected $dataProviderCollection;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function invalidIdentifierIsRecognizedOnAdding() {}
        /**
         * @test
         */
        public function invalidInterfaceIsRecognizedOnAdding() {}
        /**
         * @test
         */
        public function defaultBackendLayoutIsFound() {}
        /**
         * @test
         */
        public function providedBackendLayoutIsFound() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Routing {
    /**
     * Test case
     */
    class UriBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var UriBuilder|\PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface
         */
        protected $uriBuilder;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @return array
         */
        public function validRoutesAreBuiltDataProvider() {}
        public function validRoutesAreBuilt(array $routes, string $routeName, array $routeParameters, string $expectation) {}
        /**
         * @test
         */
        public function nonExistingRouteThrowsException() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Utility {
    /**
     * Test case
     */
    class BackendUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for calcAge function
         *
         * @return array
         */
        public function calcAgeDataProvider() {}
        public function calcAgeReturnsExpectedValues($seconds, $expectedLabel) {}
        /**
         * @test
         * @see http://forge.typo3.org/issues/20994
         */
        public function getProcessedValueForZeroStringIsZero() {}
        /**
         * @test
         */
        public function getProcessedValueForGroup() {}
        /**
         * @test
         */
        public function getProcessedValueForGroupWithOneAllowedTable() {}
        /**
         * @test
         */
        public function getProcessedValueForGroupWithMultipleAllowedTables() {}
        protected function mockDatabaseConnection($tableName = 'sys_category') {}
        /**
         * @test
         */
        public function getProcessedValueForSelectWithMMRelation() {}
        /** @var ObjectProphecy $languageServiceProphecy */
        public function getProcessedValueDisplaysAgeForDateInputFieldsIfSettingAbsent() {}
        /**
         * @return array
         */
        public function inputTypeDateDisplayOptions() {}
/** @var ObjectProphecy $languageServiceProphecy */
        public function getProcessedValueHandlesAgeDisplayCorrectly(/** @var ObjectProphecy $languageServiceProphecy */
$input, /** @var ObjectProphecy $languageServiceProphecy */
$expected) {}
        /**
         * Data provider for getCommonSelectFieldsReturnsCorrectFields
         *
         * @return array The test data with $table, $prefix, $presetFields, $tca, $expectedFields
         */
        public function getCommonSelectFieldsReturnsCorrectFieldsDataProvider() {}
        public function getCommonSelectFieldsReturnsCorrectFields($table, $prefix = '', array $presetFields, array $tca, $expectedFields = '') {}
        /**
         * Data provider for getLabelFromItemlistReturnsCorrectFields
         *
         * @return array The test data with $table, $col, $key, $expectedLabel
         */
        public function getLabelFromItemlistReturnsCorrectFieldsDataProvider() {}
        public function getLabelFromItemlistReturnsCorrectFields($table, $col = '', $key = '', array $tca, $expectedLabel = '') {}
        /**
         * Data provider for getLabelFromItemListMerged
         *
         * @return array The test data with $pageId, $table, $column, $key, $expectedLabel
         */
        public function getLabelFromItemListMergedReturnsCorrectFieldsDataProvider() {}
        public function getLabelFromItemListMergedReturnsCorrectFields($pageId, $table, $column = '', $key = '', array $tca, $expectedLabel = '') {}
        /**
         * @test
         */
        public function getFuncCheckReturnsInputTagWithValueAttribute() {}
        /**
         * @return array
         */
        public function getLabelsFromItemsListDataProvider() {}
        public function getLabelsFromItemsListReturnsCorrectValue($table, $col, $keyList, $tca, array $pageTsConfig, $expectedLabel) {}
        /**
         * @test
         */
        public function getProcessedValueReturnsLabelsForExistingValuesSolely() {}
        /**
         * @test
         */
        public function getProcessedValueReturnsPlainValueIfItemIsNotFound() {}
        /**
         * @test
         */
        public function viewOnClickReturnsOnClickCodeWithAlternativeUrl() {}
        /**
         * @test
         */
        public function getModTSconfigIgnoresValuesFromUserTsConfigIfNoSet() {}
        /**
         * @test
         */
        public function dateTimeAgeReturnsCorrectValues() {}
        /**
         * @test
         */
        public function getTCAtypesReturnsCorrectValuesDataProvider() {}
        public function getTCAtypesReturnsCorrectValues($table, $rec, $useFieldNameAsKey, $expected) {}
        /**
         * @test
         */
        public function purgeComputedPropertyNamesRemovesPropertiesStartingWithUnderscore() {}
        /**
         * @test
         */
        public function purgeComputedPropertiesFromRecordRemovesPropertiesStartingWithUnderscore() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Unit\Utility\Fixtures {
    /**
     * BackendUtility fixture
     */
    class BackendUtilityFixture extends \typo3\cms\backend\utility\backendutility {
        public static function getPagesTSconfig($id, $rootLine = null, $returnPartArray = false) {}
    }

    /**
     * Disable getRecordWSOL and getRecordTitle dependency by returning stable results
     */
    class ProcessedValueForSelectWithMMRelationFixture extends \typo3\cms\backend\utility\backendutility {
        public static function getRecordTitle($table, $row, $prep = false, $forceResult = true) {}
    }

    /**
     * Disable getRecordWSOL and getRecordTitle dependency by returning stable results
     */
    class LabelFromItemListMergedReturnsCorrectFieldsFixture extends \typo3\cms\backend\utility\backendutility {
        public static function getPagesTSconfig($id, $rootLine = null, $returnPartArray = false) {}
    }

    /**
     * Disable getRecordWSOL and getRecordTitle dependency by returning stable results
     */
    class ProcessedValueForGroupWithOneAllowedTableFixture extends \typo3\cms\backend\utility\backendutility {
        public static function getRecordWSOL($table, $uid, $fields = '*', $where = '', $useDeleteClause = true, $unsetMovePointers = false) {}
        public static function getRecordTitle($table, $row, $prep = false, $forceResult = true) {}
    }

    /**
     * Disable getRecordWSOL and getRecordTitle dependency by returning stable results
     */
    class ProcessedValueForGroupWithMultipleAllowedTablesFixture extends \typo3\cms\backend\utility\backendutility {
        public static function getRecordWSOL($table, $uid, $fields = '*', $where = '', $useDeleteClause = true, $unsetMovePointers = false) {}
        public static function getRecordTitle($table, $row, $prep = false, $forceResult = true) {}
    }

}

namespace TYPO3\CMS\Backend\Tests\UnitDeprecated\Form\FormDataProvider {
    /**
     * Test case for TcaFlexPrepare to render the functionality when a TCA migration happened
     */
    class TcaFlexPrepareTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var TcaFlexPrepare
         */
        protected $subject;
        /**
         * @var BackendUserAuthentication|ObjectProphecy
         */
        protected $backendUserProphecy;
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;

        /** @var CacheManager|ObjectProphecy $cacheManagerProphecy */
        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function addDataMigratesFlexformTca() {}
        /**
         * @test
         */
        public function addDataMigratesFlexformTcaInContainer() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Functional\Form {
    /**
     * Service class for handling recurring tasks in tests.
     */
    class FormTestService {
        public function createNewRecordForm(string $table, array $defaults = [ ]) {}
        public function formHtmlContainsField(string $fieldName, string $formHtml) : bool {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Functional\Controller {
    /**
     * Test case for TYPO3\CMS\Backend\Controller\FormInlineAjaxController
     */
    class FormInlineAjaxControllerTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var FormInlineAjaxController
         */
        protected $subject;
        /**
         * @var array
         */
        protected $testExtensionsToLoad;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function createActionWithNewParentReturnsResponseForInlineChildData() {}
        /**
         * @test
         */
        public function createActionWithExistingParentReturnsResponseForInlineChildData() {}
        /**
         * @test
         */
        public function createActionWithExistingLocalizedParentReturnsResponseWithLocalizedChildData() {}
        /**
         * @test
         */
        public function createActionWithExistingLocalizedParentAndNotLocalizableChildReturnsResponseWithChildData() {}
        protected function getContextForSysLanguageUid(int $sysLanguageUid) : array {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Functional\Controller\Page {
    /**
     * Test case for TYPO3\CMS\Backend\Controller\Page\LocalizationController
     */
    class LocalizationControllerTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var LocalizationController
         */
        protected $subject;
        /**
         * @var \TYPO3\TestingFramework\Core\Functional\Framework\DataHandling\ActionService
         */
        protected $actionService;
        /**
         * @var \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected $backendUser;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function recordsGetTranslatedFromDefaultLanguage() {}
        /**
         * @test
         */
        public function recordsGetTranslatedFromDifferentTranslation() {}
        /**
         * @test
         */
        public function recordsGetCopiedFromDefaultLanguage() {}
        /**
         * @test
         */
        public function recordsGetCopiedFromAnotherLanguage() {}
        /**
         * @test
         */
        public function copyingNewContentFromLanguageIntoExistingLocalizationHasSameOrdering() {}
        /**
         * @test
         */
        public function recordLocalizeSummaryRespectsWorkspaceEncapsulationForDeletedRecords() {}
        /**
         * @test
         */
        public function recordLocalizeSummaryRespectsWorkspaceEncapsulationForMovedRecords() {}
        /**
         * Get record localized summary list reduced to list of uids
         *
         * @return array
         */
        protected function getReducedRecordLocalizeSummary() {}
    }

    /**
     * Test case for TYPO3\CMS\Backend\Controller\Page\LocalizationController
     */
    class BackendUtilityTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function determineFirstDomainRecord() {}
    }

}

namespace TYPO3\CMS\Backend\Tests\Functional\Domain\Repository\Localization {
    /**
     * Test case for TYPO3\CMS\Backend\Domain\Repository\Localization\LocalizationRepository
     */
    class LocalizationRepositoryTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var LocalizationRepository
         */
        protected $subject;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        public function fetchOriginLanguageDataProvider() {}
        public function fetchOriginLanguage($pageId, $colPos, $localizedLanguage, $expectedResult) {}
        public function getLocalizedRecordCountDataProvider() {}
        public function getLocalizedRecordCount($pageId, $colPos, $localizedLanguage, $expectedResult) {}
        public function getRecordsToCopyDatabaseResultDataProvider() {}
        public function getRecordsToCopyDatabaseResult($pageId, $colPos, $destLanguageId, $languageId, $expectedResult) {}
    }

}

namespace TYPO3\CMS\About\Controller {
    /**
     * Module 'about' shows some standard information for TYPO3 CMS: About-text, version number, available modules and so on.
     */
    class AboutController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var ViewInterface
         */
        protected $defaultViewObjectName;
        /**
         * @var ExtensionRepository
         */
        protected $extensionRepository;

        public function injectExtensionRepository(ExtensionRepository $extensionRepository) {}
/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /**
         * Main action: Show standard information
         */
        public function indexAction() {}
        /**
         * Create array with data of all main modules (Web, File, ...)
         * and its nested sub modules
         *
         * @return array
         */
        protected function getModulesData() {}
        protected function getSubModuleData(ModuleLoader $loadedModules, $moduleName) {}
    }

}

namespace TYPO3\CMS\About\Domain\Repository {
    /**
     * Repository for TYPO3\CMS\About\Domain\Model\Extension
     */
    class ExtensionRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * Finds all loaded third-party extensions (no system extensions)
         *
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\About\Domain\Model\Extension>
         */
        public function findAllLoaded() {}
    }

}

namespace TYPO3\CMS\About\Domain\Model {
    /**
     * An extension helper model to be used in ext:about context
     */
    class Extension extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var array
         */
        protected $authors;
        /**
         * @var string
         */
        protected $key;
        /**
         * @var string
         */
        protected $title;

        public function setAuthors($authors) {}
        /**
         * @return array
         */
        public function getAuthors() {}
        public function setKey($key) {}
        /**
         * @return string
         */
        public function getKey() {}
        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getTitle() {}
    }

}

namespace TYPO3\CMS\Workspaces {
    /**
     * Interface for (additional) columns.
     */
    interface ColumnDataProviderInterface {
        /**
         * @return array
         */
        function getDefinition() ;
        function getData(\TYPO3\CMS\Workspaces\Domain\Model\CombinedRecord $combinedRecord) ;
    }

}

namespace TYPO3\CMS\Workspaces\Dependency {
    /**
     * Processor having generic callback methods for element entities
     */
    class ElementEntityProcessor {
        /**
         * @var int
         */
        protected $workspace;
        /**
         * @var \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        protected $dataHandler;

        public function setWorkspace($workspace) {}
        /**
         * Gets the current workspace.
         *
         * @return int
         */
        public function getWorkspace() {}
        /**
         * @return \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        public function getDataHandler() {}
/** @var $element ElementEntity */
        public function transformDependentElementsToUseLiveId(/** @var $element ElementEntity */
array $elements) {}
        public function createNewDependentElementChildReferenceCallback(array $callerArguments, array $targetArgument, ElementEntity $caller, $eventName) {}
        public function createNewDependentElementParentReferenceCallback(array $callerArguments, array $targetArgument, ElementEntity $caller, $eventName) {}
        public function createClearDependentElementChildReferenceCallback(array $callerArguments, array $targetArgument, ElementEntity $caller, $eventName) {}
        public function createClearDependentElementParentReferenceCallback(array $callerArguments, array $targetArgument, ElementEntity $caller, $eventName) {}
        public function createNewDependentElementCallback(array $callerArguments, array $targetArgument, ElementEntity $caller, $eventName) {}
    }

    /**
     * Object to handle and determine dependent references of elements.
     */
    class DependencyResolver {
        /**
         * @var int
         */
        protected $workspace;
        /**
         * @var \TYPO3\CMS\Workspaces\Dependency\DependencyEntityFactory
         */
        protected $factory;
        /**
         * @var array
         */
        protected $elements;
        /**
         * @var array
         */
        protected $eventCallbacks;
        /**
         * @var bool
         */
        protected $outerMostParentsRequireReferences;
        /**
         * @var array
         */
        protected $outerMostParents;

        public function setWorkspace($workspace) {}
        /**
         * Gets the current workspace.
         *
         * @return int
         */
        public function getWorkspace() {}
        public function setEventCallback($eventName, \TYPO3\CMS\Workspaces\Dependency\EventCallback $callback) {}
/** @var $callback \TYPO3\CMS\Workspaces\Dependency\EventCallback */
        public function executeEventCallback(/** @var $callback \TYPO3\CMS\Workspaces\Dependency\EventCallback */
$eventName, /** @var $callback \TYPO3\CMS\Workspaces\Dependency\EventCallback */
$caller, /** @var $callback \TYPO3\CMS\Workspaces\Dependency\EventCallback */
array $callerArguments = [ ]) {}
        public function setOuterMostParentsRequireReferences($outerMostParentsRequireReferences) {}
        public function addElement($table, $id, array $data = [ ]) {}
        /** @var $element \TYPO3\CMS\Workspaces\Dependency\ElementEntity */
        public function getOuterMostParents() {}
        protected function processOuterMostParent(\TYPO3\CMS\Workspaces\Dependency\ElementEntity $element) {}
        public function getNestedElements(\TYPO3\CMS\Workspaces\Dependency\ElementEntity $outerMostParent) {}
        /**
         * Gets the registered elements.
         *
         * @return array
         */
        public function getElements() {}
        /**
         * Gets an instance of the factory to keep track of element or reference entities.
         *
         * @return \TYPO3\CMS\Workspaces\Dependency\DependencyEntityFactory
         */
        public function getFactory() {}
    }

    /**
     * Object to create and keep track of element or reference entities.
     */
    class DependencyEntityFactory {
        /**
         * @var array
         */
        protected $elements;
        /**
         * @var array
         */
        protected $references;

/** @var $element ElementEntity */
        public function getElement(/** @var $element ElementEntity */
$table, /** @var $element ElementEntity */
$id, /** @var $element ElementEntity */
array $data = [ ], /** @var $element ElementEntity */
\TYPO3\CMS\Workspaces\Dependency\DependencyResolver $dependency) {}
        public function getReference(\TYPO3\CMS\Workspaces\Dependency\ElementEntity $element, $field) {}
        public function getReferencedElement($table, $id, $field, array $data = [ ], \TYPO3\CMS\Workspaces\Dependency\DependencyResolver $dependency) {}
    }

    /**
     * Object to hold information on a callback to a defined object and method.
     */
    class EventCallback {
        /**
         * @var object
         */
        protected $object;
        /**
         * @var string
         */
        protected $method;
        /**
         * @var array
         */
        protected $targetArguments;

        public function __construct($object, $method, array $targetArguments = [ ]) {}
        public function execute(array $callerArguments = [ ], $caller, $eventName) {}
    }

    /**
     * Object to hold reference information of a database field and one accordant element.
     */
    class ReferenceEntity {
        /**
         * @var \TYPO3\CMS\Workspaces\Dependency\ElementEntity
         */
        protected $element;
        /**
         * @var string
         */
        protected $field;

        public function __construct(\TYPO3\CMS\Workspaces\Dependency\ElementEntity $element, $field) {}
        /**
         * Gets the elements.
         *
         * @return \TYPO3\CMS\Workspaces\Dependency\ElementEntity
         */
        public function getElement() {}
        /**
         * Gets the field.
         *
         * @return string
         */
        public function getField() {}
        /**
         * Converts this object for string representation.
         *
         * @return string
         */
        public function __toString() {}
    }

    /**
     * Object to hold information on a dependent database element in abstract.
     */
    class ElementEntity {
        const REFERENCES_ChildOf = 'childOf';
        const RESPONSE_Skip = 'TYPO3\\CMS\\Version\\Dependency\\ElementEntity->skip';
        const EVENT_Construct = 'TYPO3\\CMS\\Version\\Dependency\\ElementEntity::construct';
        const REFERENCES_ParentOf = 'parentOf';
        const EVENT_CreateParentReference = 'TYPO3\\CMS\\Version\\Dependency\\ElementEntity::createParentReference';
        const EVENT_CreateChildReference = 'TYPO3\\CMS\\Version\\Dependency\\ElementEntity::createChildReference';

        /**
         * @var bool
         */
        protected $invalid;
        /**
         * @var string
         */
        protected $table;
        /**
         * @var int
         */
        protected $id;
        /**
         * @var array
         */
        protected $data;
        /**
         * @var array
         */
        protected $record;
        /**
         * @var \TYPO3\CMS\Workspaces\Dependency\DependencyResolver
         */
        protected $dependency;
        /**
         * @var array
         */
        protected $children;
        /**
         * @var array
         */
        protected $parents;
        /**
         * @var bool
         */
        protected $traversingParents;
        /**
         * @var \TYPO3\CMS\Workspaces\Dependency\ElementEntity
         */
        protected $outerMostParent;
        /**
         * @var array
         */
        protected $nestedChildren;

        public function __construct($table, $id, array $data = [ ], \TYPO3\CMS\Workspaces\Dependency\DependencyResolver $dependency) {}
        public function setInvalid($invalid) {}
        /**
         * @return bool
         */
        public function isInvalid() {}
        /**
         * Gets the table.
         *
         * @return string
         */
        public function getTable() {}
        /**
         * Gets the id.
         *
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * Gets the data.
         *
         * @return array
         */
        public function getData() {}
        public function getDataValue($key) {}
        public function setDataValue($key, $value) {}
        public function hasDataValue($key) {}
        /**
         * Converts this object for string representation.
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Gets the parent dependency object.
         *
         * @return \TYPO3\CMS\Workspaces\Dependency\DependencyResolver
         */
        public function getDependency() {}
        /**
         * Gets all child references.
         *
         * @return array|ReferenceEntity[]
         */
        public function getChildren() {}
        /**
         * Gets all parent references.
         *
         * @return array|ReferenceEntity[]
         */
        public function getParents() {}
        /**
         * Determines whether there are child or parent references.
         *
         * @return bool
         */
        public function hasReferences() {}
        /** @var $parent \TYPO3\CMS\Workspaces\Dependency\ReferenceEntity */
        public function getOuterMostParent() {}
        /**
         * Gets nested children accumulated.
         *
         * @return array|ReferenceEntity[]
         */
        public function getNestedChildren() {}
        public static function getIdentifier($table, $id) {}
        /**
         * Gets the database record of this element.
         *
         * @return array
         */
        public function getRecord() {}
    }

}

namespace TYPO3\CMS\Workspaces\Backend\ToolbarItems {
    /**
     * Class to render the workspace selector
     */
    class WorkspaceSelectorToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        /**
         * @var array
         */
        protected $availableWorkspaces;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Checks whether the user has access to this toolbar item
         *
         * @return bool TRUE if user has access, FALSE if not
         */
        public function checkAccess() {}
        /**
         * Render item
         *
         * @return string HTML
         */
        public function getItem() {}
        /**
         * Get drop down
         *
         * @return string
         */
        public function getDropDown() {}
        /**
         * This toolbar needs no additional attributes
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has a drop down
         *
         * @return bool
         */
        public function hasDropDown() {}
        /**
         * Position relative to others
         *
         * @return int
         */
        public function getIndex() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns current PageRenderer
         *
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
        protected function getFluidTemplateObject(string $filename) : StandaloneView {}
    }

}

namespace TYPO3\CMS\Workspaces\Controller {
    /**
     * Review controller.
     */
    class ReviewController extends \typo3\cms\workspaces\controller\abstractcontroller {
        protected function initializeView(ViewInterface $view) {}
        /**
         * Registers the DocHeader buttons
         */
        protected function registerButtons() {}
        /**
         * Renders the review module user dependent with all workspaces.
         * The module will show all records of one workspace.
         */
        public function indexAction() {}
        /**
         * Renders the review module user dependent.
         * The module will show all records of all workspaces.
         */
        public function fullIndexAction() {}
        /**
         * Renders the review module for a single page. This is used within the
         * workspace-preview frame.
         */
        public function singleIndexAction() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function initializeAction() {}
        protected function prepareWorkspaceTabs(array $workspaceList, $activeWorkspace, $showAllWorkspaceTab = true) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function getModuleUri(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$workspaceId) {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Implements the AJAX functionality for the various asynchronous calls
     */
    class AjaxController {
        public function switchWorkspaceAction(ServerRequestInterface $request) : ResponseInterface {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Abstract action controller.
     */
    class AbstractController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var string
         */
        protected $defaultViewObjectName;
        /**
         * @var BackendTemplateView
         */
        protected $view;
        /**
         * @var string Key of the extension this controller belongs to
         */
        protected $extensionName;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;
        /**
         * @var int
         */
        protected $pageId;

        /**
         * Initializes the controller before invoking an action method.
         */
        protected function initializeAction() {}
        /**
         * Assigns additional Workspace settings to TYPO3.settings.Workspaces.extension
         */
        protected function assignExtensionSettings() {}
        /**
         * Gets the selected language.
         *
         * @return string
         */
        protected function getLanguageSelection() {}
        /**
         * @return AdditionalColumnService
         */
        protected function getAdditionalColumnService() {}
        /**
         * @return AdditionalResourceService
         */
        protected function getAdditionalResourceService() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

    /**
     * Implements the preview controller of the workspace module.
     */
    class PreviewController extends \typo3\cms\workspaces\controller\abstractcontroller {
        /**
         * @var StagesService
         */
        protected $stageService;
        /**
         * @var WorkspaceService
         */
        protected $workspaceService;

/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function initializeAction() {}
/** @var $uriBuilder UriBuilder */
        public function indexAction(/** @var $uriBuilder UriBuilder */
$previewWS = null) {}
        protected function isInvalidStage($stageArray) {}
        /**
         */
        public function newPageAction() {}
        /**
         * Generates the JavaScript code for the backend,
         * and since we're loading a backend module outside of the actual backend
         * this copies parts of the index.php?M=main module
         *
         * @return string
         */
        protected function generateJavascript() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Implements the AJAX functionality for the various asynchronous calls
     */
    class AjaxDispatcher {
        /**
         * @var array
         */
        protected $classMap;

        public function dispatch(ServerRequestInterface $request) : ResponseInterface {}
        protected function buildResultFromResponse($responseFromMethod, $call) {}
    }

}

namespace TYPO3\CMS\Workspaces\Controller\Remote {
    /**
     * Class RemoteServer
     */
    class RemoteServer extends \typo3\cms\workspaces\controller\remote\abstracthandler {
        /**
         * @var GridDataService
         */
        protected $gridDataService;
        /**
         * @var StagesService
         */
        protected $stagesService;
        /**
         * @var DiffUtility
         */
        protected $differenceHandler;

        public function checkIntegrity(\stdClass $parameters) {}
        public function getWorkspaceInfos($parameter) {}
        public function getStageActions(\stdClass $parameter) {}
/** @var $historyService HistoryService */
        public function getRowDetails(/** @var $historyService HistoryService */
$parameter) {}
/**
 * @var string $identifierWithRandomValue
 * @var FileReference $fileReference
 */
        protected function prepareFileReferenceDifferences(/**
 * @var string $identifierWithRandomValue
 * @var FileReference $fileReference
 */
array $liveFileReferences, /**
 * @var string $identifierWithRandomValue
 * @var FileReference $fileReference
 */
array $versionFileReferences, /**
 * @var string $identifierWithRandomValue
 * @var FileReference $fileReference
 */
$useThumbnails = false) {}
/** @var Avatar $avatar */
        public function getCommentsForRecord(/** @var Avatar $avatar */
$uid, /** @var Avatar $avatar */
$table) {}
        /**
         * Gets all available system languages.
         *
         * @return array
         */
        public function getSystemLanguages() {}
        /**
         * @return BackendUserAuthentication;
         */
        protected function getBackendUser() {}
        /**
         * @return LanguageService;
         */
        protected function getLanguageService() {}
        /**
         * Gets the Grid Data Service.
         *
         * @return GridDataService
         */
        protected function getGridDataService() {}
        /**
         * Gets the Stages Service.
         *
         * @return StagesService
         */
        protected function getStagesService() {}
        /**
         * Gets the difference handler, parsing differences based on sentences.
         *
         * @return DiffUtility
         */
        protected function getDifferenceHandler() {}
        /**
         * @return \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected function getObjectManager() {}
    }

    /**
     * Class AbstractHandler
     */
    abstract class AbstractHandler {
        /**
         * Gets the current workspace ID.
         *
         * @return int The current workspace ID
         */
        protected function getCurrentWorkspace() {}
        protected function getErrorResponse($errorLabel, $errorCode = 0, $successFlagValue = false) {}
        /**
         * Gets an instance of the workspaces service.
         *
         * @return \TYPO3\CMS\Workspaces\Service\WorkspaceService
         */
        protected function getWorkspaceService() {}
        protected function validateLanguageParameter(\stdClass $parameters) {}
        protected function getAffectedElements(\stdClass $parameters) {}
/** @var $integrityService \TYPO3\CMS\Workspaces\Service\IntegrityService */
        protected function createIntegrityService(/** @var $integrityService \TYPO3\CMS\Workspaces\Service\IntegrityService */
array $affectedElements) {}
    }

    /**
     * Class MassActionHandler
     * Class encapsulates all actions which are triggered for all elements within the current workspace.
     */
    class MassActionHandler extends \typo3\cms\workspaces\controller\remote\abstracthandler {
        const MAX_RECORDS_TO_PROCESS = 30;

        /**
         * Path to the locallang file
         *
         * @var string
         */
        private $pathToLocallang;

        public function getMassStageActions($parameter) {}
        public function publishWorkspace(\stdClass $parameters) {}
        public function flushWorkspace(\stdClass $parameters) {}
        protected function initPublishData($workspace, $swap, $language = null) {}
        protected function initFlushData($workspace, $language = null) {}
/** @var $tce \TYPO3\CMS\Core\DataHandling\DataHandler */
        protected function processData(/** @var $tce \TYPO3\CMS\Core\DataHandling\DataHandler */
$workspace) {}
    }

    /**
     * Class ActionHandler
     */
    class ActionHandler extends \typo3\cms\workspaces\controller\remote\abstracthandler {
        /**
         * @var StagesService
         */
        protected $stageService;

        /**
         * Creates this object.
         */
        public function __construct() {}
        public function generateWorkspacePreviewLink($uid) {}
        public function generateWorkspacePreviewLinksForAllLanguages($uid) {}
        public function swapSingleRecord($table, $t3ver_oid, $orig_uid) {}
        public function deleteSingleRecord($table, $uid) {}
        public function viewSingleRecord($table, $uid) {}
        public function executeSelectionAction($parameter) {}
        protected function getPublishSwapCommands(array $selection, $swapIntoWorkspace) {}
        protected function getFlushCommands(array $selection) {}
        public function saveColumnModel($model) {}
        public function loadColumnModel() {}
        public function saveLanguageSelection($language) {}
        public function sendToNextStageWindow($uid, $table, $t3ver_oid) {}
        public function sendToPrevStageWindow($uid, $table) {}
        public function sendToSpecificStageWindow($nextStageId, array $elements) {}
        public function getRecipientList(array $uidOfRecipients, $additionalRecipients, $stageId) {}
/** @var $stageService StagesService */
        public function discardStagesFromPage(/** @var $stageService StagesService */
$pageId) {}
        public function sentCollectionToStage(\stdClass $parameters) {}
/** @var \TYPO3\CMS\Core\DataHandling\DataHandler $dataHandler */
        protected function processTcaCmd(/** @var \TYPO3\CMS\Core\DataHandling\DataHandler $dataHandler */
array $cmdMapArray) {}
        public function sendToNextStageExecute(\stdClass $parameters) {}
        public function sendToPrevStageExecute(\stdClass $parameters) {}
        public function sendToSpecificStageExecute(\stdClass $parameters) {}
        protected function getSentToStageWindow($nextStage) {}
        protected function getRecipientsOfStage($stageRecord) {}
        protected function getDefaultCommentOfStage($stage) {}
        /**
         * Gets an instance of the Stage service.
         *
         * @return StagesService
         */
        protected function getStageService() {}
        public function sendPageToPreviousStage($id) {}
        public function sendPageToNextStage($id) {}
/** @var StandaloneView $view */
        public function updateStageChangeButtons(/** @var StandaloneView $view */
$id) {}
        protected function setTemporaryWorkspace($workspaceId) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Workspaces\Task {
    /**
     * This class provides a task to cleanup ol preview links.
     */
    class CleanupPreviewLinkTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Cleanup old preview links.
         * endtime < $GLOBALS['EXEC_TIME']
         *
         * @return bool
         */
        public function execute() {}
    }

    /**
     * This class provides a wrapper around the autopublication
     * mechanism of workspaces, as a Scheduler task
     */
    class AutoPublishTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Method executed from the Scheduler.
         * Call on the workspace logic to publish workspaces whose publication date
         * is in the past
         *
         * @return bool
         */
        public function execute() {}
    }

}

namespace TYPO3\CMS\Workspaces\DataHandler {
    /**
     * Handles the \TYPO3\CMS\Core\DataHandling\DataHandler command map and is
     * only used in combination with \TYPO3\CMS\Core\DataHandling\DataHandler
     */
    class CommandMap {
        const KEY_ElementCreateParentReferenceCallback = 'KEY_ElementCreateParentReferenceCallback';
        const KEY_UpdateGetIdCallback = 'KEY_UpdateGetIdCallback';
        const KEY_TransformDependentElementsToUseLiveId = 'KEY_TransformDependentElementsToUseLiveId';
        const SCOPE_WorkspacesSwap = 'SCOPE_WorkspacesSwap';
        const SCOPE_WorkspacesSetStage = 'SCOPE_WorkspacesSetStage';
        const KEY_ElementCreateChildReferenceCallback = 'KEY_ElementCreateChildReferenceCallback';
        const KEY_ElementConstructCallback = 'KEY_EventConstructCallback';
        const KEY_GetCommonPropertiesCallback = 'KEY_GetCommonPropertiesCallback';
        const KEY_GetElementPropertiesCallback = 'KEY_GetElementPropertiesCallback';
        const SCOPE_WorkspacesClear = 'SCOPE_WorkspacesClear';

        /**
         * @var \TYPO3\CMS\Workspaces\Hook\DataHandlerHook
         */
        protected $parent;
        /**
         * @var \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        protected $tceMain;
        /**
         * @var array
         */
        protected $commandMap;
        /**
         * @var int
         */
        protected $workspace;
        /**
         * @var string
         */
        protected $workspacesSwapMode;
        /**
         * @var string
         */
        protected $workspacesChangeStageMode;
        /**
         * @var array
         */
        protected $scopes;
        /**
         * @var \TYPO3\CMS\Workspaces\Dependency\ElementEntityProcessor
         */
        protected $elementEntityProcessor;

        public function __construct(\TYPO3\CMS\Workspaces\Hook\DataHandlerHook $parent, \TYPO3\CMS\Core\DataHandling\DataHandler $tceMain, array $commandMap, $workspace) {}
        /**
         * Gets the command map.
         *
         * @return array
         */
        public function get() {}
        public function set(array $commandMap) {}
        /**
         * Gets the parent object.
         *
         * @return \TYPO3\CMS\Workspaces\Hook\DataHandlerHook
         */
        public function getParent() {}
        public function setParent(\TYPO3\CMS\Workspaces\Hook\DataHandlerHook $parent) {}
        /**
         * Gets the parent object.
         *
         * @return \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        public function getTceMain() {}
        public function setTceMain(\TYPO3\CMS\Core\DataHandling\DataHandler $tceMain) {}
        public function setWorkspace($workspace) {}
        /**
         * Gets the current workspace.
         *
         * @return int
         */
        public function getWorkspace() {}
        public function setWorkspacesSwapMode($workspacesSwapMode) {}
        public function setWorkspacesChangeStageMode($workspacesChangeStageMode) {}
        /**
         * Gets the element entity processor.
         *
         * @return \TYPO3\CMS\Workspaces\Dependency\ElementEntityProcessor
         */
        protected function getElementEntityProcessor() {}
        /**
         * Processes the command map.
         *
         * @return \TYPO3\CMS\Workspaces\DataHandler\CommandMap
         */
        public function process() {}
        protected function invokeWorkspacesSwapItems($callbackMethod, array $arguments = [ ]) {}
        /**
         * Resolves workspaces related dependencies for swapping/publishing of the command map.
         * Workspaces records that have children or (relative) parents which are versionized
         * but not published with this request, are removed from the command map. Otherwise
         * this would produce hanging record sets and lost references.
         */
        protected function resolveWorkspacesSwapDependencies() {}
        protected function applyWorkspacesSwapBehaviour($table, $liveId, array $properties) {}
        protected function addWorkspacesSwapElements(\TYPO3\CMS\Workspaces\Dependency\DependencyResolver $dependency, $table, $liveId, array $properties) {}
        protected function invokeWorkspacesSetStageItems($callbackMethod, array $arguments = [ ]) {}
        /**
         * Resolves workspaces related dependencies for staging of the command map.
         * Workspaces records that have children or (relative) parents which are versionized
         * but not staged with this request, are removed from the command map.
         */
        protected function resolveWorkspacesSetStageDependencies() {}
        protected function applyWorkspacesSetStageBehaviour($table, $versionIdList, array $properties) {}
        protected function addWorkspacesSetStageElements(\TYPO3\CMS\Workspaces\Dependency\DependencyResolver $dependency, $table, $versionId, array $properties) {}
        /**
         * Resolves workspaces related dependencies for clearing/flushing of the command map.
         * Workspaces records that have children or (relative) parents which are versionized
         * but not cleared/flushed with this request, are removed from the command map.
         */
        protected function resolveWorkspacesClearDependencies() {}
        protected function explodeSetStage($table, $versionIdList, array $properties) {}
/** @var $outerMostParent ElementEntity */
        protected function applyWorkspacesDependencies(/** @var $outerMostParent ElementEntity */
\TYPO3\CMS\Workspaces\Dependency\DependencyResolver $dependency, /** @var $outerMostParent ElementEntity */
$scope) {}
/** @var $element ElementEntity */
        protected function update(/** @var $element ElementEntity */
ElementEntity $intersectingElement, /** @var $element ElementEntity */
array $elements, /** @var $element ElementEntity */
$scope) {}
        protected function mergeToTop(array $commandMap) {}
        protected function mergeToBottom(array $commandMap) {}
        protected function remove($table, $id, $command = null) {}
        protected function getElementLiveIdCallback(ElementEntity $element) {}
        protected function getElementIdCallback(ElementEntity $element) {}
        protected function getElementSwapPropertiesCallback(ElementEntity $element) {}
        protected function getCommonClearPropertiesCallback(ElementEntity $element) {}
        protected function getCommonSwapPropertiesCallback(ElementEntity $element) {}
        protected function getElementSetStagePropertiesCallback(ElementEntity $element) {}
        protected function getCommonSetStagePropertiesCallback(ElementEntity $element) {}
/** @var $dependency \TYPO3\CMS\Workspaces\Dependency\DependencyResolver */
        protected function getDependencyUtility(/** @var $dependency \TYPO3\CMS\Workspaces\Dependency\DependencyResolver */
$scope) {}
        /**
         * Constructs the scope settings.
         * Currently the scopes for swapping/publishing and staging are available.
         */
        protected function constructScopes() {}
        protected function getScopeData($scope, $key) {}
        protected function getDependencyCallback($method, array $targetArguments = [ ]) {}
        protected function processCallback($method, array $callbackArguments) {}
    }

}

namespace TYPO3\CMS\Workspaces\Command {
    /**
     * Fetches all versions in the database, and checks for integrity
     */
    class WorkspaceVersionRecordsCommand extends \symfony\component\console\command\command {
        /**
         * List of all workspaces
         * @var array
         */
        protected $allWorkspaces;
        /**
         * Array with all records found when traversing the database
         * @var array
         */
        protected $foundRecords;

        /**
         * Configuring the command options
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function traversePageTreeForVersionedRecords(int $rootID, int $depth, bool $isInsideVersionedPage = false, bool $rootIsVersion = false) {}
        /**
         * Find all records where the field t3ver_state=1 (new placeholder)
         *
         * @return array the records (md5 as hash) with "table:uid" as value
         */
        protected function findUnusedPlaceholderRecords() : array {}
        /**
         * Find all records where the field t3ver_state=3 (move placeholder)
         * and checks against the ws_id etc.
         *
         * @return array the records (md5 as hash) with an array of data
         */
        protected function findInvalidMovePlaceholderRecords() : array {}
        /**
         * Find records with a t3ver_move_id field != 0 that are
         * neither a move placeholder or, if it is a move placeholder is offline
         *
         * @return array
         */
        protected function findInvalidMoveIdRecords() : array {}
        protected function deleteRecords(array $records, bool $dryRun, SymfonyStyle $io) {}
        protected function resetRecordsWithoutValidWorkspace(array $records, bool $dryRun, SymfonyStyle $io) {}
        protected function deleteUnusedPlaceholders(array $records, bool $dryRun, SymfonyStyle $io) {}
        /**
         * Fetches all sys_workspace records from the database
         *
         * @return array all workspaces with UID as key, and the title as value
         */
        protected function loadAllWorkspaceRecords() : array {}
        /**
         * Returns all TCA tables where workspaces is enabled
         *
         * @return array
         */
        protected function getAllVersionableTables() : array {}
    }

}

namespace TYPO3\CMS\Workspaces\Service {
    /**
     * Service for history
     */
    class HistoryService implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $backendUserNames;
        /**
         * @var array
         */
        protected $historyEntries;
        /**
         * @var \TYPO3\CMS\Core\Utility\DiffUtility
         */
        protected $differencesObject;

        /**
         * Creates this object.
         */
        public function __construct() {}
        public function getHistory($table, $id) {}
/** @var Avatar $avatar */
        protected function getHistoryEntry(/** @var Avatar $avatar */
array $entry) {}
        protected function getDifferences(array $entry) {}
        protected function getUserName($user) {}
/** @var $historyObject \TYPO3\CMS\Backend\History\RecordHistory */
        protected function getHistoryEntries(/** @var $historyObject \TYPO3\CMS\Backend\History\RecordHistory */
$table, /** @var $historyObject \TYPO3\CMS\Backend\History\RecordHistory */
$id) {}
        /**
         * Gets an instance of the record differences utility.
         *
         * @return \TYPO3\CMS\Core\Utility\DiffUtility
         */
        protected function getDifferencesObject() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Service for additional columns in GridPanel
     */
    class AdditionalColumnService implements \typo3\cms\core\singletoninterface {
        /**
         * @var array|\TYPO3\CMS\Workspaces\ColumnDataProviderInterface[]
         */
        protected $columns;

        /**
         * @return \TYPO3\CMS\Workspaces\Service\AdditionalColumnService
         */
        public static function getInstance() {}
        /**
         * @return \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        public static function getObjectManager() {}
        public function register($columnName, $dataProviderClassOrObject) {}
        /**
         * Gets definition for JavaScript settings.
         *
         * @return array Column settings
         */
        public function getDefinition() {}
        /**
         * Gets JavaScript handler object, e.g.
         * TYPO3.Workspaces.Configuration.AdditionalColumn.extension.MyCustomField
         *
         * @return array Column settings
         */
        public function getHandler() {}
        public function getData(\TYPO3\CMS\Workspaces\Domain\Model\CombinedRecord $combinedRecord) {}
    }

    /**
     * Workspace service
     */
    class WorkspaceService implements \typo3\cms\core\singletoninterface {
        const SELECT_ALL_WORKSPACES = -98;
        const TABLE_WORKSPACE = 'sys_workspace';
        const LIVE_WORKSPACE_ID = 0;

        /**
         * @var array
         */
        protected $pageCache;
        /**
         * @var array
         */
        protected $versionsOnPageCache;
        /**
         * @var array
         */
        protected $pagesWithVersionsInTable;

        /**
         * retrieves the available workspaces from the database and checks whether
         * they're available to the current BE user
         *
         * @return array array of worspaces available to the current user
         */
        public function getAvailableWorkspaces() {}
        /**
         * Gets the current workspace ID.
         *
         * @return int The current workspace ID
         */
        public function getCurrentWorkspace() {}
        public static function getWorkspaceTitle($wsId) {}
        public function getCmdArrayForPublishWS($wsid, $doSwap, $pageId = 0, $language = null) {}
        public function getCmdArrayForFlushWS($wsid, $flush = true, $pageId = 0, $language = null) {}
        public function selectVersionsInWorkspace($wsid, $filter = 0, $stage = -99, $pageId = -1, $recursionLevel = 0, $selectionType = 'tables_select', $language = null) {}
        protected function selectAllVersionsFromPages($table, $pageList, $wsid, $filter, $stage, $language = null) {}
        protected function getMoveToPlaceHolderFromPages($table, $pageList, $wsid, $filter, $stage) {}
/** @var $searchObj \TYPO3\CMS\Core\Database\QueryView */
        protected function getTreeUids(/** @var $searchObj \TYPO3\CMS\Core\Database\QueryView */
$pageId, /** @var $searchObj \TYPO3\CMS\Core\Database\QueryView */
$wsid, /** @var $searchObj \TYPO3\CMS\Core\Database\QueryView */
$recursionLevel) {}
        protected function filterPermittedElements($recs, $table) {}
        protected function isPageAccessibleForCurrentUser($table, array $record) {}
        protected function isLanguageAccessibleForCurrentUser($table, array $record) {}
        public static function isNewPage($id, $language = 0) {}
        public static function viewSingleRecord($table, $uid, array $liveRecord = null, array $versionRecord = null) {}
        public function canCreatePreviewLink($pageUid, $workspaceUid) {}
        public function generateWorkspacePreviewLink($uid) {}
/** @var $uriBuilder \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder */
        public function generateWorkspaceSplittedPreviewLink(/** @var $uriBuilder \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder */
$uid, /** @var $uriBuilder \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder */
$addDomain = false) {}
        public function generateWorkspacePreviewLinksForAllLanguages($uid) {}
        public function getLivePageUid($uid) {}
        public function hasPageRecordVersions($workspaceId, $pageId) {}
        public function getPagesWithVersionsInTable($workspaceId) {}
        protected function fetchPagesWithVersionsInTable($workspaceId, $tableName) {}
        protected function createQueryBuilderForTable(string $tableName) {}
        /**
         * @return \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected function getObjectManager() {}
/** @var \TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider $translationConfigurationProvider */
        public function getAvailableLanguages(/** @var \TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider $translationConfigurationProvider */
$pageId) {}
    }

    /**
     * Service for additional columns in GridPanel
     */
    class AdditionalResourceService implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $javaScriptResources;
        /**
         * @var array
         */
        protected $stylesheetResources;
        /**
         * @var array
         */
        protected $localizationResources;

        /**
         * @return \TYPO3\CMS\Workspaces\Service\AdditionalResourceService
         */
        public static function getInstance() {}
        /**
         * @return \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        public static function getObjectManager() {}
        public function addJavaScriptResource($name, $resourcePath) {}
        public function addStylesheetResource($name, $resourcePath) {}
        public function addLocalizationResource($resourcePath) {}
        /**
         * @return array
         */
        public function getJavaScriptResources() {}
        /**
         * @return array
         */
        public function getStyleSheetResources() {}
        /**
         * @return array
         */
        public function getLocalizationResources() {}
        protected function resolvePath($resourcePath) {}
    }

    /**
     * Service for integrity
     */
    class IntegrityService {
        const STATUS_Info = 101;
        const STATUS_Warning = 102;
        const STATUS_Error = 103;
        const STATUS_Succes = 100;

        /**
         * @var array
         */
        protected $statusRepresentation;
        /**
         * @var \TYPO3\CMS\Workspaces\Domain\Model\CombinedRecord[]
         */
        protected $affectedElements;
        /**
         * Array storing all issues that have been checked and
         * found during runtime in this object. The array keys
         * are identifiers of table and the version-id.
         *
         * 'tx_table:123' => array(
         * array(
         * 'status' => 'warning',
         * 'message' => 'Element cannot be...',
         * )
         * )
         *
         * @var array
         */
        protected $issues;

        public function setAffectedElements(array $affectedElements) {}
        /**
         * Checks integrity of affected records.
         */
        public function check() {}
        public function checkElement(\TYPO3\CMS\Workspaces\Domain\Model\CombinedRecord $element) {}
        protected function checkLocalization(\TYPO3\CMS\Workspaces\Domain\Model\CombinedRecord $element) {}
        public function getStatus($identifier = null) {}
        public function getStatusRepresentation($identifier = null) {}
        public function getIssues($identifier = null) {}
        public function getIssueMessages($identifier = null, $asString = false) {}
        protected function addIssue($identifier, $status, $message) {}
    }

    /**
     * Stages service
     */
    class StagesService implements \typo3\cms\core\singletoninterface {
        const TABLE_STAGE = 'sys_workspace_stage';
        const MODE_NOTIFY_ALL = 1;
        const MODE_NOTIFY_ALL_STRICT = 2;
        const STAGE_EDIT_ID = 0;
        const MODE_NOTIFY_SOMEONE = 0;
        const STAGE_PUBLISH_EXECUTE_ID = -20;
        const STAGE_PUBLISH_ID = -10;

        /**
         * Path to the locallang file
         *
         * @var string
         */
        private $pathToLocallang;
        /**
         * @var RecordService
         */
        protected $recordService;
        /**
         * Local cache to reduce number of database queries for stages, groups, etc.
         *
         * @var array
         */
        protected $workspaceStageCache;
        /**
         * @var array
         */
        protected $workspaceStageAllowedCache;
        /**
         * @var array
         */
        protected $fetchGroupsCache;
        /**
         * @var array
         */
        protected $userGroups;

        /**
         * Getter for current workspace id
         *
         * @return int Current workspace id
         */
        public function getWorkspaceId() {}
        public function getPreviousStageForElementCollection($workspaceItems, array $byTableName = ['tt_content', 'pages']) {}
        public function getNextStageForElementCollection($workspaceItems, array $byTableName = ['tt_content', 'pages']) {}
        /**
         * Building an array with all stage ids and titles related to the given workspace
         *
         * @return array id and title of the stages
         */
        public function getStagesForWS() {}
        /**
         * Returns an array of stages, the user is allowed to send to
         *
         * @return array id and title of stages
         */
        public function getStagesForWSUser() {}
        protected function prepareStagesArray(array $stageRecords) {}
        public function getStageTitle($ver_stage) {}
        public function getStageRecord($stageid) {}
        public function getNextStage($stageId) {}
        public function getNextStages(array $nextStageArray, $stageId) {}
        public function getPrevStage($stageId) {}
        public function getPrevStages(array $prevStageArray, $stageId) {}
        public function getResponsibleBeUser($stageRecord, $selectDefaultUserField = false) {}
        public function getResponsibleUser($stageRespValue) {}
        public function resolveBackendUserIds($backendUserGroupList) {}
        public function getBackendUsers($backendUserList) {}
        public function getPreselectedRecipients(StageRecord $stageRecord) {}
        /**
         * @return WorkspaceRecord
         */
        protected function getWorkspaceRecord() {}
        private function fetchGroups($grList, $idList = '') {}
        private function fetchGroupsFromDB(array $groups) {}
        private function fetchGroupsRecursive($grList, $idList = '') {}
        public function getPropertyOfCurrentWorkspaceStage($stageId, $property) {}
        public function getPositionOfCurrentStage($stageId) {}
        public function isPrevStageAllowedForUser($stageId) {}
        public function isNextStageAllowedForUser($stageId) {}
        protected function isStageAllowedForUser($stageId) {}
        public function isValid($stageId) {}
        /**
         * @return RecordService
         */
        public function getRecordService() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Grid data service
     */
    class GridDataService implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        const SIGNAL_GenerateDataArray_BeforeCaching = 'generateDataArray.beforeCaching';
        const SIGNAL_SortDataArray_PostProcesss = 'sortDataArray.postProcess';
        const GridColumn_Collection = 'Workspaces_Collection';
        const SIGNAL_GenerateDataArray_PostProcesss = 'generateDataArray.postProcess';
        const SIGNAL_GetDataArray_PostProcesss = 'getDataArray.postProcess';
        const GridColumn_CollectionCurrent = 'Workspaces_CollectionCurrent';
        const GridColumn_CollectionChildren = 'Workspaces_CollectionChildren';
        const GridColumn_CollectionLevel = 'Workspaces_CollectionLevel';
        const GridColumn_CollectionParent = 'Workspaces_CollectionParent';

        /**
         * Id of the current active workspace.
         *
         * @var int
         */
        protected $currentWorkspace;
        /**
         * Version record information (filtered, sorted and limited)
         *
         * @var array
         */
        protected $dataArray;
        /**
         * Name of the field used for sorting.
         *
         * @var string
         */
        protected $sort;
        /**
         * Direction used for sorting (ASC, DESC).
         *
         * @var string
         */
        protected $sortDir;
        /**
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected $workspacesCache;
        /**
         * @var array
         */
        protected $systemLanguages;
        /**
         * @var \TYPO3\CMS\Workspaces\Service\IntegrityService
         */
        protected $integrityService;

        public function generateGridListFromVersions($versions, $parameter, $currentWorkspace) {}
/** @var $stagesObj \TYPO3\CMS\Workspaces\Service\StagesService */
        protected function generateDataArray(/** @var $stagesObj \TYPO3\CMS\Workspaces\Service\StagesService */
array $versions, /** @var $stagesObj \TYPO3\CMS\Workspaces\Service\StagesService */
$filterTxt) {}
        /**
         * Resolves dependencies of nested structures
         * and sort data elements considering these dependencies.
         */
        protected function resolveDataArrayDependencies() {}
        protected function getDataArray($start, $limit) {}
        /**
         * Initializes the workspace cache
         */
        protected function initializeWorkspacesCachingFramework() {}
        protected function setDataArrayIntoCache(array $versions, $filterTxt) {}
        protected function getDataArrayFromCache(array $versions, $filterTxt) {}
        protected function calculateHash(array $versions, $filterTxt) {}
        /**
         * Performs sorting on the data array accordant to the
         * selected column in the grid view to be used for sorting.
         */
        protected function sortDataArray() {}
        protected function intSort(array $a, array $b) {}
        protected function stringSort($a, $b) {}
        protected function isSortable(array $a, array $b) {}
        protected function isFilterTextInVisibleColumns($filterText, array $versionArray) {}
        protected function workspaceState($stateId, $hiddenOnline = false, $hiddenOffline = false) {}
        protected function getTcaEnableColumnsFieldName($table, $type) {}
        protected function getLanguageValue($table, array $record) {}
        protected function getSystemLanguageValue($id, $key) {}
        /** @var $translateTools \TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider */
        public function getSystemLanguages() {}
        /**
         * Gets an instance of the integrity service.
         *
         * @return \TYPO3\CMS\Workspaces\Service\IntegrityService
         */
        protected function getIntegrityService() {}
        protected function emitSignal($signalName, $arguments) {}
        /**
         * @return \TYPO3\CMS\Workspaces\Service\Dependency\CollectionService
         */
        protected function getDependencyCollectionService() {}
        /**
         * @return \TYPO3\CMS\Workspaces\Service\AdditionalColumnService
         */
        protected function getAdditionalColumnService() {}
        /**
         * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
        /**
         * @return \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected function getObjectManager() {}
    }

    /**
     * Automatic publishing of workspaces.
     */
    class AutoPublishService {
        /**
         * This method is called by the Scheduler task that triggers
         * the autopublication process
         * It searches for workspaces whose publication date is in the past
         * and publishes them
         */
        public function autoPublishWorkspaces() {}
    }

    /**
     * Service for records
     */
    class RecordService implements \typo3\cms\core\singletoninterface {
        /**
         * @var DatabaseRecord[]
         */
        protected $records;

        public function add($tableName, $id) {}
        /**
         * @return array
         */
        public function getIdsPerTable() {}
        /**
         * @return array
         */
        public function getCreateUserIds() {}
    }

}

namespace TYPO3\CMS\Workspaces\Service\Dependency {
    /**
     * Service to collect dependent elements.
     */
    class CollectionService implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        protected $dataHandler;
        /**
         * @var Dependency\ElementEntityProcessor
         */
        protected $elementEntityProcessor;
        /**
         * @var Dependency\DependencyResolver
         */
        protected $dependencyResolver;
        /**
         * @var array
         */
        protected $dataArray;
        /**
         * @var array
         */
        protected $nestedDataArray;

        /**
         * @return Dependency\DependencyResolver
         */
        public function getDependencyResolver() {}
        protected function getDependencyCallback($method, array $targetArguments = [ ]) {}
        /**
         * Gets the element entity processor.
         *
         * @return Dependency\ElementEntityProcessor
         */
        protected function getElementEntityProcessor() {}
        /**
         * Gets the current workspace id.
         *
         * @return int
         */
        protected function getWorkspace() {}
        public function process(array $dataArray) {}
        protected function finalize(array $dataArray) {}
        protected function resolveDataArrayChildDependencies(Dependency\ElementEntity $parent, $collection, $nextParentIdentifier = '', $collectionLevel = 0) {}
    }

}

namespace TYPO3\CMS\Workspaces\Domain\Record {
    /**
     * Combined record class
     */
    class StageRecord extends \typo3\cms\workspaces\domain\record\abstractrecord {
        /**
         * @var WorkspaceRecord
         */
        protected $workspace;
        /**
         * @var bool
         */
        protected $internal;
        /**
         * @var array
         */
        protected $responsiblePersons;
        /**
         * @var array
         */
        protected $defaultRecipients;
        /**
         * @var array
         */
        protected $preselectedRecipients;
        /**
         * @var array
         */
        protected $allRecipients;

        public static function get($uid, array $record = null) {}
        public static function build(WorkspaceRecord $workspace, $uid, array $record = null) {}
        public function __construct(WorkspaceRecord $workspace, array $record) {}
        /**
         * @return WorkspaceRecord
         */
        public function getWorkspace() {}
        /**
         * @return StageRecord|null
         */
        public function getPrevious() {}
        /**
         * @return StageRecord|null
         */
        public function getNext() {}
        public function determineOrder(StageRecord $stageRecord) {}
        public function isPreviousTo(StageRecord $stageRecord) {}
        public function isNextTo(StageRecord $stageRecord) {}
        /**
         * @return string
         */
        public function getDefaultComment() {}
        public function setInternal($internal = true) {}
        /**
         * @return bool
         */
        public function isInternal() {}
        /**
         * @return bool
         */
        public function isEditStage() {}
        /**
         * @return bool
         */
        public function isPublishStage() {}
        /**
         * @return bool
         */
        public function isExecuteStage() {}
        /**
         * @return bool
         */
        public function isDialogEnabled() {}
        /**
         * @return bool
         */
        public function isPreselectionChangeable() {}
        /**
         * @return bool
         */
        public function areOwnersPreselected() {}
        /**
         * @return bool
         */
        public function areMembersPreselected() {}
        /**
         * @return bool
         */
        public function areEditorsPreselected() {}
        /**
         * @return bool
         */
        public function areResponsiblePersonsPreselected() {}
        /**
         * @return bool
         */
        public function hasPreselection() {}
        /**
         * @return array
         */
        public function getResponsiblePersons() {}
        /**
         * @return array
         */
        public function getDefaultRecipients() {}
        /**
         * Gets all recipients (backend user ids).
         *
         * @return array
         */
        public function getAllRecipients() {}
        /**
         * @return int[]
         */
        public function getPreselectedRecipients() {}
        /**
         * @return bool
         */
        public function isAllowed() {}
    }

    /**
     * Combined record class
     */
    class WorkspaceRecord extends \typo3\cms\workspaces\domain\record\abstractrecord {
        /**
         * @var array
         */
        protected $internalStages;
        /**
         * @var array
         */
        protected $internalStageFieldNames;
        /**
         * @var array
         */
        protected $owners;
        /**
         * @var array
         */
        protected $members;
        /**
         * @var StageRecord[]
         */
        protected $stages;

        public static function get($uid, array $record = null) {}
        /**
         * @return array
         */
        public function getOwners() {}
        /**
         * @return array
         */
        public function getMembers() {}
        /**
         * @return StageRecord[]
         */
        public function getStages() {}
        public function getStage($stageId) {}
        public function getPreviousStage($stageId) {}
        public function getNextStage($stageId) {}
        protected function addStage(StageRecord $stage) {}
        protected function createInternalStage($stageId) {}
    }

    /**
     * Combined record class
     */
    abstract class AbstractRecord {
        /**
         * @var array
         */
        protected $record;

        protected static function fetch($tableName, $uid) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected static function getBackendUser() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected static function getLanguageService() {}
        public function __construct(array $record) {}
        /**
         * @return string
         */
        public function __toString() {}
        /**
         * @return int
         */
        public function getUid() {}
        /**
         * @return string
         */
        public function getTitle() {}
        /**
         * @return StagesService
         */
        protected function getStagesService() {}
    }

}

namespace TYPO3\CMS\Workspaces\Domain\Model {
    /**
     * Combined record class
     */
    class CombinedRecord {
        /**
         * @var string
         */
        protected $table;
        /**
         * @var \TYPO3\CMS\Workspaces\Domain\Model\DatabaseRecord
         */
        protected $versionRecord;
        /**
         * @var \TYPO3\CMS\Workspaces\Domain\Model\DatabaseRecord
         */
        protected $liveRecord;

        public static function create($table, $liveId, $versionId) {}
        public static function createFromArrays($table, array $liveRow, array $versionRow) {}
        public function __construct($table, DatabaseRecord $liveRecord, DatabaseRecord $versionRecord) {}
        /**
         * Gets the name of the database table.
         *
         * @return string
         */
        public function getTable() {}
        public function setTable($table) {}
        /**
         * Gets the live-record object.
         *
         * @return \TYPO3\CMS\Workspaces\Domain\Model\DatabaseRecord
         */
        public function getLiveRecord() {}
        public function setLiveRecord(DatabaseRecord $liveRecord) {}
        /**
         * Gets the version-record object.
         *
         * @return \TYPO3\CMS\Workspaces\Domain\Model\DatabaseRecord
         */
        public function getVersionRecord() {}
        public function setVersionRecord(DatabaseRecord $versionRecord) {}
        /**
         * Gets the id of the live-record.
         *
         * @return int
         */
        public function getLiveId() {}
        /**
         * Gets the id of version-record.
         *
         * @return int
         */
        public function getVersiondId() {}
    }

    /**
     * Database record class
     */
    class DatabaseRecord {
        /**
         * @var string
         */
        protected $table;
        /**
         * @var int
         */
        protected $uid;
        /**
         * @var array
         */
        protected $row;

        public static function create($table, $uid) {}
        public static function createFromArray($table, array $row) {}
        public function __construct($table, $uid, array $row = null) {}
        /**
         * Gets the name of the database table.
         *
         * @return string
         */
        public function getTable() {}
        public function setTable($table) {}
        /**
         * Gets the id of the database record row.
         *
         * @return int
         */
        public function getUid() {}
        public function setUid($uid) {}
        /**
         * Gets the database record row.
         *
         * @return array
         */
        public function getRow() {}
        public function setRow(array $row) {}
        /**
         * Gets the record identifier (table:id).
         *
         * @return string
         */
        public function getIdentifier() {}
        /**
         * Loads the database record row (if not available yet).
         */
        protected function loadRow() {}
    }

}

namespace TYPO3\CMS\Workspaces\Hook {
    /**
     * Contains some parts for staging, versioning and workspaces
     * to interact with the TYPO3 Core Engine
     */
    class DataHandlerHook {
        /**
         * For accumulating information about workspace stages raised
         * on elements so a single mail is sent as notification.
         * previously called "accumulateForNotifEmail" in DataHandler
         *
         * @var array
         */
        protected $notificationEmailInfo;
        /**
         * Contains remapped IDs.
         *
         * @var array
         */
        protected $remappedIds;
        /**
         * @var \TYPO3\CMS\Workspaces\Service\WorkspaceService
         */
        protected $workspaceService;

        public function processCmdmap_beforeStart(DataHandler $dataHandler) {}
        public function processCmdmap($command, $table, $id, $value, $commandIsProcessed, DataHandler $dataHandler) {}
        public function processCmdmap_afterFinish(DataHandler $dataHandler) {}
        public function processCmdmap_deleteAction($table, $id, array $record, $recordWasDeleted, DataHandler $dataHandler) {}
        public function processCmdmap_postProcess($command, $table, $id, $value, \TYPO3\CMS\Core\DataHandling\DataHandler $dataHandler) {}
        public function moveRecord($table, $uid, $destPid, array $propArr, array $moveRec, $resolvedPid, $recordWasMoved, DataHandler $dataHandler) {}
        protected function moveRecord_processFields(DataHandler $dataHandler, $resolvedPageId, $table, $uid) {}
        protected function moveRecord_processFieldValue(DataHandler $dataHandler, $resolvedPageId, $table, $uid, $field, $value, array $configuration) {}
/** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
        protected function notifyStageChange(/** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
array $stat, /** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
$stageId, /** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
$table, /** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
$id, /** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
$comment, /** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
DataHandler $dataHandler, /** @var $mail \TYPO3\CMS\Core\Mail\MailMessage */
array $notificationAlternativeRecipients = [ ]) {}
        protected function getEmailsForStageChangeNotification($listOfUsers, $noTablePrefix = false) {}
        protected function version_setStage($table, $id, $stageId, $comment = '', $notificationEmailInfo = false, DataHandler $dataHandler, array $notificationAlternativeRecipients = [ ]) {}
/** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
        protected function version_swap(/** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$table, /** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$id, /** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$swapWith, /** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$swapIntoWS = 0, /** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
DataHandler $dataHandler, /** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$comment = '', /** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$notificationEmailInfo = false, /** @var $refIndexObj \TYPO3\CMS\Core\Database\ReferenceIndex */
$notificationAlternativeRecipients = [ ]) {}
        public function writeRemappedForeignField(\TYPO3\CMS\Core\Database\RelationHandler $dbAnalysis, array $configuration, $parentId) {}
        protected function version_swap_processFields($tableName, $fieldName, array $configuration, array $liveData, array $versionData, DataHandler $dataHandler) {}
        public function updateInlineForeignFieldSorting($parentTableName, $parentId, $foreignTableName, $foreignIds, array $configuration, $targetWorkspaceId) {}
        protected function version_clearWSID($table, $id, $flush = false, DataHandler $dataHandler) {}
        protected function resetStageOfElements($stageId) {}
        protected function flushWorkspaceElements($workspaceId) {}
        /**
         * Gets all defined TCA tables.
         *
         * @return array
         */
        protected function getTcaTables() {}
        /**
         * @return \TYPO3\CMS\Core\DataHandling\DataHandler
         */
        protected function getDataHandler() {}
        protected function flushWorkspaceCacheEntriesByWorkspaceId($workspaceId) {}
        public function findPageElementsForVersionSwap($table, $id, $offlineId) {}
        public function findPageElementsForVersionStageChange(array $pageIdList, $workspaceId, array $elementList) {}
        public function findPageIdsForVersionStateChange($table, array $idList, $workspaceId, array $pageIdList, array $elementList) {}
        public function findRealPageIds(array $idList) {}
        protected function moveRecord_wsPlaceholders($table, $uid, $destPid, $wsUid, DataHandler $dataHandler) {}
        public function getCommandMap(DataHandler $dataHandler) {}
        protected function getUniqueFields($table) {}
        /**
         * @return \TYPO3\CMS\Core\Database\RelationHandler
         */
        protected function createRelationHandlerInstance() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Befunc service
     */
    class BackendUtilityHook implements \typo3\cms\core\singletoninterface {
        /**
         * Gets a singleton instance of this object.
         *
         * @return \TYPO3\CMS\Workspaces\Hook\BackendUtilityHook
         */
        public static function getInstance() {}
        public function preProcess($pageUid, $backPath, $rootLine, $anchorSection, $viewScript, $additionalGetVars, $switchFocus) {}
        /**
         * Gets an instance of the workspaces service.
         *
         * @return \TYPO3\CMS\Workspaces\Service\WorkspaceService
         */
        protected function getWorkspaceService() {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        public function makeEditForm_accessCheck(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$params) {}
    }

    /**
     * Hook for checking if the preview mode is activated
     * preview mode = show a page of a workspace without having to log in
     */
    class PreviewHook implements \typo3\cms\core\singletoninterface {
        /**
         * the GET parameter to be used
         *
         * @var string
         */
        protected $previewKey;
        /**
         * instance of the \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController object
         *
         * @var \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected $tsfeObj;
        /**
         * preview configuration
         *
         * @var array
         */
        protected $previewConfiguration;
        /**
         * Defines whether to force read permissions on pages.
         *
         * @var bool
         * @see \TYPO3\CMS\Core\Authentication\BackendUserAuthentication::getPagePermsClause
         */
        protected $forceReadPermissions;

        public function checkForPreview($params, $pObj) {}
/** @var FrontendBackendUserAuthentication $tempBackendUser */
        public function initializePreviewUser(/** @var FrontendBackendUserAuthentication $tempBackendUser */
$params, /** @var FrontendBackendUserAuthentication $tempBackendUser */
$pObj) {}
        public function overridePagePermissionClause(array $parameters) {}
        public function overridePermissionCalculation(array $parameters) {}
        /**
         * Looking for an ADMCMD_prev code, looks it up if found and returns configuration data.
         * Background: From the backend a request to the frontend to show a page, possibly with
         * workspace preview can be "recorded" and associated with a keyword.
         * When the frontend is requested with this keyword the associated request parameters are
         * restored from the database AND the backend user is loaded - only for that request.
         * The main point is that a special URL valid for a limited time,
         * eg. http://localhost/typo3site/index.php?ADMCMD_prev=035d9bf938bd23cb657735f68a8cedbf will
         * open up for a preview that doesn't require login. Thus it's useful for sending in an email
         * to someone without backend account.
         * This can also be used to generate previews of hidden pages, start/endtimes, usergroups and
         * those other settings from the Admin Panel - just not implemented yet.
         *
         * @throws \Exception
         * @return array Preview configuration array from sys_preview record.
         */
        public function getPreviewConfiguration() {}
        /**
         * returns the input code value from the admin command variable
         *
         * @return string Input code
         */
        protected function getPreviewInputCode() {}
        public function compilePreviewKeyword($getVarsStr, $backendUserUid, $ttl = 172800, $fullWorkspace = null) {}
        /**
         * easy function to just return the number of hours
         * a preview link is valid, based on the TSconfig value "options.workspaces.previewLinkTTLHours"
         * by default, it's 48hs
         *
         * @return int The hours as a number
         */
        public function getPreviewLinkLifetime() {}
        /**
         * @return FrontendBackendUserAuthentication
         */
        protected function createFrontendBackendUser() {}
    }

    /**
     * Frontend hooks
     */
    class TypoScriptFrontendControllerHook {
        public function renderPreviewInfo(array $params, \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController $pObj) {}
        protected function getWorkspaceTitle(int $workspaceId) : string {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Unit\Controller\Remote {
    /**
     * RemoteServer test
     */
    class RemoteServerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Workspaces\Controller\Remote\RemoteServer
         */
        protected $subject;
        /**
         * @var FileReference[]|ObjectProphecy[]
         */
        protected $fileReferenceProphecies;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down.
         */
        protected function tearDown() {}
        /**
         * @return array
         */
        public function prepareFileReferenceDifferencesAreCorrectDataProvider() {}
        public function prepareFileReferenceDifferencesAreCorrect($fileFileReferenceList, $versionFileReferenceList, $useThumbnails, array $expected = null) {}
        protected function getFileReferenceProphecies($idList) {}
        protected function getFileReferenceProphecy($id) {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Unit\Tca {
    class WorkspaceStageVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var array
         */
        static protected $workspaceStageFields;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function workspaceStageFormContainsExpectedFields() {}
    }

    class WorkspaceVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var array
         */
        static protected $workspaceFields;

        /**
         * Sets up this test case.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function workspaceFormContainsExpectedFields() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\ActionHandler {
    /**
     * Action handler test
     */
    class ActionHandlerTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function sendToSpecificStageExecuteIgnoresDoublePublishes() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\ManyToMany {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\manytomany\abstractactiontestcase {
        const VALUE_CategoryIdLast = 31;
        const VALUE_WorkspaceId = 1;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        protected function setUp() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndAddCategoryRelation.csv
         */
        public function createContentAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryRecordAndAddCategoryRelation.csv
         */
        public function createCategoryAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndCreateCategoryRelation.csv
         */
        public function createContentAndCreateRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryRecordAndCreateCategoryRelation.csv
         */
        public function createCategoryAndCreateRelation() {}
        public function createContentWithCategoryAndAddRelation() {}
        public function createCategoryWithContentAndAddRelation() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\ManyToMany\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\manytomany\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addCategoryRelation.csv
         */
        public function addCategoryRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRelation.csv
         */
        public function deleteCategoryRelation() {}
        /**
         * @test
         * @see DataSet/changeCategoryRelationSorting.csv
         */
        public function changeCategoryRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndAddCategoryRelation.csv
         */
        public function createContentAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryRecordAndAddCategoryRelation.csv
         */
        public function createCategoryAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndCreateCategoryRelation.csv
         */
        public function createContentAndCreateRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryRecordAndCreateCategoryRelation.csv
         */
        public function createCategoryAndCreateRelation() {}
        /**
         * @test
         * @see DataSet/createContentWCategoryNAddRelation.csv
         */
        public function createContentWithCategoryAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryWContentNAddRelation.csv
         */
        public function createCategoryWithContentAndAddRelation() {}
        /**
         * @test
         * @see DataSet/modifyCategoryRecordOfCategoryRelation.csv
         */
        public function modifyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentRecordOfCategoryRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothRecordsOfCategoryRelation.csv
         */
        public function modifyBothsOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentRecordOfCategoryRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRecordOfCategoryRelation.csv
         */
        public function deleteCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentRecordOfCategoryRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyCategoryRecordOfCategoryRelation.csv
         */
        public function copyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentRecordOfCategoryRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeCategoryRecordOfCategoryRelation.csv
         */
        public function localizeCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentRecordOfCategoryRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
        /**
         * @test
         * @see DataSet/copyPage.csv
         */
        public function copyPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\ManyToMany\Publish {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\manytomany\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addCategoryRelation.csv
         */
        public function addCategoryRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRelation.csv
         */
        public function deleteCategoryRelation() {}
        /**
         * @test
         * @see DataSet/changeCategoryRelationSorting.csv
         */
        public function changeCategoryRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndAddCategoryRelation.csv
         */
        public function createContentAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryRecordAndAddCategoryRelation.csv
         */
        public function createCategoryAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndCreateCategoryRelation.csv
         */
        public function createContentAndCreateRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryRecordAndCreateCategoryRelation.csv
         */
        public function createCategoryAndCreateRelation() {}
        /**
         * @test
         * @see DataSet/createContentWCategoryNAddRelation.csv
         */
        public function createContentWithCategoryAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryWContentNAddRelation.csv
         */
        public function createCategoryWithContentAndAddRelation() {}
        /**
         * @test
         * @see DataSet/modifyCategoryRecordOfCategoryRelation.csv
         */
        public function modifyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentRecordOfCategoryRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothRecordsOfCategoryRelation.csv
         */
        public function modifyBothsOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentRecordOfCategoryRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRecordOfCategoryRelation.csv
         */
        public function deleteCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentRecordOfCategoryRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyCategoryRecordOfCategoryRelation.csv
         */
        public function copyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentRecordOfCategoryRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeCategoryRecordOfCategoryRelation.csv
         */
        public function localizeCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentRecordOfCategoryRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
        /**
         * @test
         * @see DataSet/copyPage.csv
         */
        public function copyPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\ManyToMany\PublishAll {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\manytomany\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addCategoryRelation.csv
         */
        public function addCategoryRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRelation.csv
         */
        public function deleteCategoryRelation() {}
        /**
         * @test
         * @see DataSet/changeCategoryRelationSorting.csv
         */
        public function changeCategoryRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndAddCategoryRelation.csv
         */
        public function createContentAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryRecordAndAddCategoryRelation.csv
         */
        public function createCategoryAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndCreateCategoryRelation.csv
         */
        public function createContentAndCreateRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryRecordAndCreateCategoryRelation.csv
         */
        public function createCategoryAndCreateRelation() {}
        /**
         * @test
         * @see DataSet/createContentWCategoryNAddRelation.csv
         */
        public function createContentWithCategoryAndAddRelation() {}
        /**
         * @test
         * @see DataSet/createCategoryWContentNAddRelation.csv
         */
        public function createCategoryWithContentAndAddRelation() {}
        /**
         * @test
         * @see DataSet/modifyCategoryRecordOfCategoryRelation.csv
         */
        public function modifyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentRecordOfCategoryRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothRecordsOfCategoryRelation.csv
         */
        public function modifyBothsOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentRecordOfCategoryRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteCategoryRecordOfCategoryRelation.csv
         */
        public function deleteCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentRecordOfCategoryRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyCategoryRecordOfCategoryRelation.csv
         */
        public function copyCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentRecordOfCategoryRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeCategoryRecordOfCategoryRelation.csv
         */
        public function localizeCategoryOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentRecordOfCategoryRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
        /**
         * @test
         * @see DataSet/copyPage.csv
         */
        public function copyPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Group {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\group\abstractactiontestcase {
        const VALUE_WorkspaceId = 1;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        protected function setUp() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Group\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\group\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Group\Publish {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\group\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Group\PublishAll {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\group\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\FAL {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\fal\abstractactiontestcase {
        const VALUE_WorkspaceId = 1;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        protected function setUp() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\FAL\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\fal\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/modifyContentRecord.csv
         */
        public function modifyContent() {}
        /**
         * @test
         * @see DataSet/deleteContentRecord.csv
         */
        public function deleteContent() {}
        /**
         * @test
         * @see DataSet/copyContentRecord.csv
         */
        public function copyContent() {}
        /**
         * @test
         * @see DataSet/localizeContentRecord.csv
         */
        public function localizeContent() {}
        /**
         * @test
         * @see DataSet/changeContentRecordSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSets/createContentWFileReference.csv
         */
        public function createContentWithFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentWFileReference.csv
         */
        public function modifyContentWithFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNAddFileReference.csv
         */
        public function modifyContentAndAddFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNDeleteFileReference.csv
         */
        public function modifyContentAndDeleteFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNDeleteAllFileReference.csv
         */
        public function modifyContentAndDeleteAllFileReference() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\FAL\Publish {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\fal\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/modifyContentRecord.csv
         */
        public function modifyContent() {}
        /**
         * @test
         * @see DataSet/deleteContentRecord.csv
         */
        public function deleteContent() {}
        /**
         * @test
         * @see DataSet/copyContentRecord.csv
         */
        public function copyContent() {}
        /**
         * @test
         * @see DataSet/localizeContentRecord.csv
         */
        public function localizeContent() {}
        /**
         * @test
         * @see DataSet/changeContentRecordSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSets/createContentWFileReference.csv
         */
        public function createContentWithFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentWFileReference.csv
         */
        public function modifyContentWithFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNAddFileReference.csv
         */
        public function modifyContentAndAddFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNDeleteFileReference.csv
         */
        public function modifyContentAndDeleteFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNDeleteAllFileReference.csv
         */
        public function modifyContentAndDeleteAllFileReference() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\FAL\PublishAll {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\fal\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/modifyContentRecord.csv
         */
        public function modifyContent() {}
        /**
         * @test
         * @see DataSet/deleteContentRecord.csv
         */
        public function deleteContent() {}
        /**
         * @test
         * @see DataSet/copyContentRecord.csv
         */
        public function copyContent() {}
        /**
         * @test
         * @see DataSet/localizeContentRecord.csv
         */
        public function localizeContent() {}
        /**
         * @test
         * @see DataSet/changeContentRecordSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSets/createContentWFileReference.csv
         */
        public function createContentWithFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentWFileReference.csv
         */
        public function modifyContentWithFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNAddFileReference.csv
         */
        public function modifyContentAndAddFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNDeleteFileReference.csv
         */
        public function modifyContentAndDeleteFileReference() {}
        /**
         * @test
         * @see DataSets/modifyContentNDeleteAllFileReference.csv
         */
        public function modifyContentAndDeleteAllFileReference() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\IRRE\ForeignField {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\irre\foreignfield\abstractactiontestcase {
        const VALUE_WorkspaceId = 1;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        protected function setUp() {}
        /**
         * @see DataSet/deleteParentContentRecordAndDiscardDeletedParentRecord.csv
         */
        public function deleteParentContentAndDiscardDeletedParent() {}
        /**
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecordsAndDiscardCopiedParentRecord.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildrenAndDiscardCopiedParent() {}
        /**
         * @see DataSet/createNLocParentNHotelNOfferChildrenNDiscardCreatedParent.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardCreatedParent() {}
        /**
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecordsAndDiscardLocalizedParentRecord.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardLocalizedParent() {}
        /**
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardModifiedParentRecord.csv
         */
        public function modifyParentWithHotelChildAndDiscardModifiedParent() {}
        /**
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardAllModifiedRecords.csv
         */
        public function modifyParentWithHotelChildAndDiscardAll() {}
        /**
         * @see DataSet/modifyNDiscardNModifyParentWHotelChild.csv
         */
        public function modifyAndDiscardAndModifyParentWithHotelChild() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\IRRE\ForeignField\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\irre\foreignfield\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @test
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecordAndDiscardDeletedParentRecord.csv
         */
        public function deleteParentContentAndDiscardDeletedParent() {}
        /**
         * @test
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @test
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @test
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecordsAndDiscardCopiedParentRecord.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildrenAndDiscardCopiedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createNLocalizeParentContentNHotelNOfferChildrenWOSortBy.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenWithoutSortByConfiguration() {}
        /**
         * @test
         * @see DataSet/createNLocParentNHotelNOfferChildrenNDiscardCreatedParent.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardCreatedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecordsAndDiscardLocalizedParentRecord.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardLocalizedParent() {}
        /**
         * @test
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardModifiedParentRecord.csv
         */
        public function modifyParentWithHotelChildAndDiscardModifiedParent() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardAllModifiedRecords.csv
         */
        public function modifyParentWithHotelChildAndDiscardAll() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyNDiscardNModifyParentWHotelChild.csv
         */
        public function modifyAndDiscardAndModifyParentWithHotelChild() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\IRRE\ForeignField\Publish {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\irre\foreignfield\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @test
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecordAndDiscardDeletedParentRecord.csv
         */
        public function deleteParentContentAndDiscardDeletedParent() {}
        /**
         * @test
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @test
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @test
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecordsAndDiscardCopiedParentRecord.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildrenAndDiscardCopiedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createNLocParentNHotelNOfferChildrenNDiscardCreatedParent.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardCreatedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecordsAndDiscardLocalizedParentRecord.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardLocalizedParent() {}
        /**
         * @test
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardModifiedParentRecord.csv
         */
        public function modifyParentWithHotelChildAndDiscardModifiedParent() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardAllModifiedRecords.csv
         */
        public function modifyParentWithHotelChildAndDiscardAll() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyNDiscardNModifyParentWHotelChild.csv
         */
        public function modifyAndDiscardAndModifyParentWithHotelChild() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\IRRE\ForeignField\PublishAll {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\irre\foreignfield\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @test
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecordAndDiscardDeletedParentRecord.csv
         */
        public function deleteParentContentAndDiscardDeletedParent() {}
        /**
         * @test
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @test
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @test
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecordsAndDiscardCopiedParentRecord.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildrenAndDiscardCopiedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createNLocParentNHotelNOfferChildrenNDiscardCreatedParent.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardCreatedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecordsAndDiscardLocalizedParentRecord.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardLocalizedParent() {}
        /**
         * @test
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardModifiedParentRecord.csv
         */
        public function modifyParentWithHotelChildAndDiscardModifiedParent() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardAllModifiedRecords.csv
         */
        public function modifyParentWithHotelChildAndDiscardAll() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyNDiscardNModifyParentWHotelChild.csv
         */
        public function modifyAndDiscardAndModifyParentWithHotelChild() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\IRRE\CSV {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\irre\csv\abstractactiontestcase {
        const VALUE_WorkspaceId = 1;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        protected function setUp() {}
        /**
         * @see DataSet/deleteParentContentRecordAndDiscardDeletedParentRecord.csv
         */
        public function deleteParentContentAndDiscardDeletedParent() {}
        /**
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecordsAndDiscardCopiedParentRecord.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildrenAndDiscardCopiedParent() {}
        /**
         * @see DataSet/createNLocParentNHotelNOfferChildrenNDiscardCreatedParent.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardCreatedParent() {}
        /**
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecordsAndDiscardLocalizedParentRecord.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardLocalizedParent() {}
        /**
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardModifiedParentRecord.csv
         */
        public function modifyParentWithHotelChildAndDiscardModifiedParent() {}
        /**
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardAllModifiedRecords.csv
         */
        public function modifyParentWithHotelChildAndDiscardAll() {}
        /**
         * @see DataSet/modifyNDiscardNModifyParentWHotelChild.csv
         */
        public function modifyAndDiscardAndModifyParentWithHotelChild() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\IRRE\CSV\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\irre\csv\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @test
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecordAndDiscardDeletedParentRecord.csv
         */
        public function deleteParentContentAndDiscardDeletedParent() {}
        /**
         * @test
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @test
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @test
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecordsAndDiscardCopiedParentRecord.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildrenAndDiscardCopiedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createNLocParentNHotelNOfferChildrenNDiscardCreatedParent.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardCreatedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecordsAndDiscardLocalizedParentRecord.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardLocalizedParent() {}
        /**
         * @test
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardModifiedParentRecord.csv
         */
        public function modifyParentWithHotelChildAndDiscardModifiedParent() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardAllModifiedRecords.csv
         */
        public function modifyParentWithHotelChildAndDiscardAll() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyNDiscardNModifyParentWHotelChild.csv
         */
        public function modifyAndDiscardAndModifyParentWithHotelChild() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\IRRE\CSV\Publish {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\irre\csv\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * Parent content records
         */
        protected function setUp() {}
        /**
         * @test
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @test
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecordAndDiscardDeletedParentRecord.csv
         */
        public function deleteParentContentAndDiscardDeletedParent() {}
        /**
         * @test
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @test
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @test
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecordsAndDiscardCopiedParentRecord.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildrenAndDiscardCopiedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createNLocParentNHotelNOfferChildrenNDiscardCreatedParent.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardCreatedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecordsAndDiscardLocalizedParentRecord.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardLocalizedParent() {}
        /**
         * @test
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardModifiedParentRecord.csv
         */
        public function modifyParentWithHotelChildAndDiscardModifiedParent() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardAllModifiedRecords.csv
         */
        public function modifyParentWithHotelChildAndDiscardAll() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyNDiscardNModifyParentWHotelChild.csv
         */
        public function modifyAndDiscardAndModifyParentWithHotelChild() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\IRRE\CSV\PublishAll {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\irre\csv\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * Parent content records
         */
        protected function setUp() {}
        /**
         * @test
         * @see DataSet/createParentContentRecord.csv
         */
        public function createParentContent() {}
        /**
         * @test
         * @see DataSet/modifyParentContentRecord.csv
         */
        public function modifyParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecord.csv
         */
        public function deleteParentContent() {}
        /**
         * @test
         * @see DataSet/deleteParentContentRecordAndDiscardDeletedParentRecord.csv
         */
        public function deleteParentContentAndDiscardDeletedParent() {}
        /**
         * @test
         * @see DataSet/copyParentContentRecord.csv
         */
        public function copyParentContent() {}
        /**
         * @test
         * @see DataSet/copyParentContentToDifferentPage.csv
         */
        public function copyParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/localizeParentContentWAllChildren.csv
         */
        public function localizeParentContentWithAllChildren() {}
        /**
         * @test
         * @see DataSet/changeParentContentRecordSorting.csv
         */
        public function changeParentContentSorting() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPage.csv
         */
        public function moveParentContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveParentContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveParentContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageWHotelBeforeParentContent.csv
         */
        public function copyPageWithHotelBeforeParentContent() {}
        /**
         * @test
         * @see DataSet/createParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createAndCopyParentContentRecordWithHotelAndOfferChildRecordsAndDiscardCopiedParentRecord.csv
         */
        public function createAndCopyParentContentWithHotelAndOfferChildrenAndDiscardCopiedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecords.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildren() {}
        /**
         * @test
         * @see DataSet/createNLocParentNHotelNOfferChildrenNDiscardCreatedParent.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardCreatedParent() {}
        /**
         * @test
         * @see DataSet/createAndLocalizeParentContentRecordWithHotelAndOfferChildRecordsAndDiscardLocalizedParentRecord.csv
         */
        public function createAndLocalizeParentContentWithHotelAndOfferChildrenAndDiscardLocalizedParent() {}
        /**
         * @test
         * @see DataSet/modifyOnlyHotelChildRecord.csv
         */
        public function modifyOnlyHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndChangeHotelChildRecordsSorting.csv
         */
        public function modifyParentAndChangeHotelChildrenSorting() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecord.csv
         */
        public function modifyParentWithHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardModifiedParentRecord.csv
         */
        public function modifyParentWithHotelChildAndDiscardModifiedParent() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordWithHotelChildRecordAndDiscardAllModifiedRecords.csv
         */
        public function modifyParentWithHotelChildAndDiscardAll() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndAddHotelChildRecord.csv
         */
        public function modifyParentAndAddHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyParentRecordAndDeleteHotelChildRecord.csv
         */
        public function modifyParentAndDeleteHotelChild() {}
        /**
         * @test
         * @see DataSet/modifyNDiscardNModifyParentWHotelChild.csv
         */
        public function modifyAndDiscardAndModifyParentWithHotelChild() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Select {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\select\abstractactiontestcase {
        const VALUE_WorkspaceId = 1;

        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        protected function setUp() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Select\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\select\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Select\Publish {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\select\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Select\PublishAll {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\select\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/addElementRelation.csv
         */
        public function addElementRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementRelation.csv
         */
        public function deleteElementRelation() {}
        /**
         * @test
         * @see DataSet/changeElementSorting.csv
         */
        public function changeElementSorting() {}
        /**
         * @test
         * @see DataSet/changeElementRelationSorting.csv
         */
        public function changeElementRelationSorting() {}
        /**
         * @test
         * @see DataSet/createContentNAddRelation.csv
         */
        public function createContentAndAddElementRelation() {}
        /**
         * @test
         * @see DataSet/createContentNCreateRelation.csv
         */
        public function createContentAndCreateElementRelation() {}
        /**
         * @test
         * @see DataSet/modifyElementOfRelation.csv
         */
        public function modifyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyContentOfRelation.csv
         */
        public function modifyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/modifyBothSidesOfRelation.csv
         */
        public function modifyBothSidesOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteContentOfRelation.csv
         */
        public function deleteContentOfRelation() {}
        /**
         * @test
         * @see DataSet/deleteElementOfRelation.csv
         */
        public function deleteElementOfRelation() {}
        /**
         * @test
         * @see DataSet/copyContentOfRelation.csv
         */
        public function copyContentOfRelation() {}
        /**
         * @test
         * @see DataSet/copyElementOfRelation.csv
         */
        public function copyElementOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeContentOfRelation.csv
         */
        public function localizeContentOfRelation() {}
        /**
         * @test
         * @see DataSet/localizeElementOfRelation.csv
         */
        public function localizeElementOfRelation() {}
        /**
         * @test
         * @see DataSet/moveContentOfRelationToDifferentPage.csv
         */
        public function moveContentOfRelationToDifferentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Regular {
    /**
     * Functional test for the DataHandler
     */
    abstract class AbstractActionTestCase extends \typo3\cms\core\tests\functional\datahandling\regular\abstractactiontestcase {
        const VALUE_ContentIdTenth = 310;
        const VALUE_ContentIdTenthLocalized = 311;
        const VALUE_ContentIdTenthLocalized2 = 312;
        const VALUE_WorkspaceId = 1;
        const VALUE_ParentPageId = 88;
        const VALUE_ContentIdZero = 296;

        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var string
         */
        protected $scenarioDataSetDirectory;

        protected function setUp() {}
        /**
         * @see DataSet/createContentRecordAndDiscardCreatedContentRecord.csv
         */
        public function createContentAndDiscardCreatedContent() {}
        /**
         * @see DataSet/createAndCopyContentRecordAndDiscardCopiedContentRecord.csv
         */
        public function createAndCopyContentAndDiscardCopiedContent() {}
        /**
         * @see DataSet/changeContentSortingNDeleteMovedRecord.csv
         */
        public function changeContentSortingAndDeleteMovedRecord() {}
        /**
         * @see DataSet/changeContentSortingNDeleteLiveRecord.csv
         */
        public function changeContentSortingAndDeleteLiveRecord() {}
        /**
         * @see DataSet/deleteContentAndPage.csv
         */
        public function deleteContentAndPage() {}
        /**
         * @see DataSet/copyPageFreeMode.csv
         */
        public function copyPageFreeMode() {}
        /**
         * @see DataSet/movePageRecordToDifferentPageAndCreatePageRecordAfterMovedPageRecord.csv
         * @see http://forge.typo3.org/issues/33104
         * @see http://forge.typo3.org/issues/55573
         */
        public function movePageToDifferentPageAndCreatePageAfterMovedPage() {}
        /**
         * Creates a content element and copies the page in draft workspace.
         */
        public function createContentAndCopyDraftPage() {}
        /**
         * Creates a content element and copies the page in live workspace.
         */
        public function createContentAndCopyLivePage() {}
        /**
         * Creates a page in a draft workspace and copies the parent page in draft workspace.
         */
        public function createPageAndCopyDraftParentPage() {}
        /**
         * Creates a page in a draft workspace and copies the parent page in live workspace.
         */
        public function createPageAndCopyLiveParentPage() {}
        /**
         * Creates nested pages in a draft workspace and copies the parent page in draft workspace.
         */
        public function createNestedPagesAndCopyDraftParentPage() {}
        /**
         * Creates nested pages in a draft workspace and copies the parent page in live workspace.
         */
        public function createNestedPagesAndCopyLiveParentPage() {}
        /**
         * Deletes a content element and copies the page in draft workspace
         */
        public function deleteContentAndCopyDraftPage() {}
        /**
         * Deletes a content element and copies the page in live workspace
         */
        public function deleteContentAndCopyLivePage() {}
        /**
         * Changes content sorting and copies the page in draft workspace.
         */
        public function changeContentSortingAndCopyDraftPage() {}
        /**
         * Changes content sorting and copies the page in live workspace.
         */
        public function changeContentSortingAndCopyLivePage() {}
        /**
         * Moves content either from and to the current page and copies the page in draft workspace.
         */
        public function moveContentAndCopyDraftPage() {}
        /**
         * Moves content either from and to the current page and copies the page in draft workspace.
         */
        public function moveContentAndCopyLivePage() {}
        /**
         * Creates new and move placeholders for pages and deleted the parent page in draft workspace.
         */
        public function createPlaceholdersAndDeleteDraftParentPage() {}
        /**
         * Creates new and move placeholders for pages and deleted the parent page in live workspace.
         */
        public function createPlaceholdersAndDeleteLiveParentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Regular\Modify {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\regular\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createContentRecords.csv
         */
        public function createContents() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndDiscardCreatedContentRecord.csv
         */
        public function createContentAndDiscardCreatedContent() {}
        /**
         * @test
         * @see DataSet/createAndCopyContentRecordAndDiscardCopiedContentRecord.csv
         */
        public function createAndCopyContentAndDiscardCopiedContent() {}
        /**
         * @test
         * @see DataSet/modifyContentRecord.csv
         */
        public function modifyContent() {}
        /**
         * @test
         * @see DataSet/deleteContentRecord.csv
         */
        public function deleteContent() {}
        /**
         * @test
         * @see DataSet/deleteLocalizedContentNDeleteContent.csv
         */
        public function deleteLocalizedContentAndDeleteContent() {}
        /**
         * @test
         * @see DataSet/copyContentRecord.csv
         */
        public function copyContent() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguage.csv
         */
        public function copyContentToLanguage() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageFromNonDefaultLanguage.csv
         */
        public function copyContentToLanguageFromNonDefaultLanguage() {}
        /**
         * @test
         * @see DataSet/localizeContentRecord.csv
         */
        public function localizeContent() {}
        /**
         * @test
         * @see DataSet/localizeContentFromNonDefaultLanguage.csv
         */
        public function localizeContentFromNonDefaultLanguage() {}
        /**
         * @test
         * @see DataSet/changeContentRecordSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @test
         * @see DataSet/changeContentSortingNDeleteMovedRecord.csv
         */
        public function changeContentSortingAndDeleteMovedRecord() {}
        /**
         * @test
         * @see DataSet/changeContentSortingNDeleteLiveRecord.csv
         */
        public function changeContentSortingAndDeleteLiveRecord() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/createPageRecord.csv
         */
        public function createPage() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/deleteContentAndPage.csv
         */
        public function deleteContentAndPage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageFreeMode.csv
         */
        public function copyPageFreeMode() {}
        /**
         * @test
         * @see DataSet/localizePageRecord.csv
         */
        public function localizePage() {}
        /**
         * @test
         * @see DataSet/changePageRecordSorting.csv
         */
        public function changePageSorting() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPage.csv
         */
        public function movePageToDifferentPage() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPageAndChangeSorting.csv
         */
        public function movePageToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPageAndCreatePageRecordAfterMovedPageRecord.csv
         * @see http://forge.typo3.org/issues/33104
         * @see http://forge.typo3.org/issues/55573
         */
        public function movePageToDifferentPageAndCreatePageAfterMovedPage() {}
        /**
         * @test
         * @see DataSet/createContentAndCopyDraftPage.csv
         */
        public function createContentAndCopyDraftPage() {}
        /**
         * @test
         * @see DataSet/createContentAndCopyLivePage.csv
         */
        public function createContentAndCopyLivePage() {}
        /**
         * @test
         * @see DataSet/createPageAndCopyDraftParentPage.csv
         */
        public function createPageAndCopyDraftParentPage() {}
        /**
         * @test
         * @see DataSet/createPageAndCopyParentPage.csv
         */
        public function createPageAndCopyLiveParentPage() {}
        /**
         * @test
         * @see DataSet/createNestedPagesAndCopyDraftParentPage.csv
         */
        public function createNestedPagesAndCopyDraftParentPage() {}
        /**
         * @test
         * @see DataSet/createNestedPagesAndCopyParentPage.csv
         */
        public function createNestedPagesAndCopyLiveParentPage() {}
        /**
         * @test
         * @see DataSet/deleteContentAndCopyDraftPage.csv
         */
        public function deleteContentAndCopyDraftPage() {}
        /**
         * @test
         * @see DataSet/deleteContentAndCopyLivePage.csv
         */
        public function deleteContentAndCopyLivePage() {}
        /**
         * @test
         * @see DataSet/changeContentSortingAndCopyDraftPage.csv
         * @group not-postgres
         * @group not-mssql
         * @todo Analyse PostgreSQL issues further, which is a generic issue
         */
        public function changeContentSortingAndCopyDraftPage() {}
        /**
         * @test
         * @see DataSet/changeContentSortingAndCopyLivePage.csv
         */
        public function changeContentSortingAndCopyLivePage() {}
        /**
         * @test
         * @see DataSet/moveContentAndCopyDraftPage.csv
         */
        public function moveContentAndCopyDraftPage() {}
        /**
         * @test
         * @see DataSet/moveContentAndCopyLivePage.csv
         */
        public function moveContentAndCopyLivePage() {}
        /**
         * @test
         * @see DataSet/createPlaceholdersAndDeleteDraftParentPage.csv
         */
        public function createPlaceholdersAndDeleteDraftParentPage() {}
        /**
         * @test
         * @see DataSet/createPlaceholdersAndDeleteLiveParentPage.csv
         */
        public function createPlaceholdersAndDeleteLiveParentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Regular\Publish {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\regular\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createContentRecords.csv
         */
        public function createContents() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndDiscardCreatedContentRecord.csv
         */
        public function createContentAndDiscardCreatedContent() {}
        /**
         * @test
         * @see DataSet/createAndCopyContentRecordAndDiscardCopiedContentRecord.csv
         */
        public function createAndCopyContentAndDiscardCopiedContent() {}
        /**
         * @test
         * @see DataSet/modifyContentRecord.csv
         */
        public function modifyContent() {}
        /**
         * @test
         * @see DataSet/deleteContentRecord.csv
         */
        public function deleteContent() {}
        /**
         * @test
         * @see DataSet/deleteLocalizedContentNDeleteContent.csv
         */
        public function deleteLocalizedContentAndDeleteContent() {}
        /**
         * @test
         * @see DataSet/copyContentRecord.csv
         */
        public function copyContent() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguage.csv
         */
        public function copyContentToLanguage() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageFromNonDefaultLanguage.csv
         */
        public function copyContentToLanguageFromNonDefaultLanguage() {}
        /**
         * @test
         * @see DataSet/localizeContentRecord.csv
         */
        public function localizeContent() {}
        /**
         * @test
         * @see DataSet/localizeContentFromNonDefaultLanguage.csv
         */
        public function localizeContentFromNonDefaultLanguage() {}
        /**
         * @test
         * @see DataSet/changeContentRecordSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/createPageRecord.csv
         */
        public function createPage() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/deleteContentAndPage.csv
         */
        public function deleteContentAndPage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageFreeMode.csv
         */
        public function copyPageFreeMode() {}
        /**
         * @test
         * @see DataSet/localizePageRecord.csv
         */
        public function localizePage() {}
        /**
         * @test
         * @see DataSet/changePageRecordSorting.csv
         */
        public function changePageSorting() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPage.csv
         */
        public function movePageToDifferentPage() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPageAndChangeSorting.csv
         */
        public function movePageToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPageAndCreatePageRecordAfterMovedPageRecord.csv
         * @see http://forge.typo3.org/issues/33104
         * @see http://forge.typo3.org/issues/55573
         */
        public function movePageToDifferentPageAndCreatePageAfterMovedPage() {}
        /**
         * @test
         * @see DataSet/createPlaceholdersAndDeleteDraftParentPage.csv
         */
        public function createPlaceholdersAndDeleteDraftParentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\DataHandling\Regular\PublishAll {
    /**
     * Functional test for the DataHandler
     */
    class ActionTest extends \typo3\cms\workspaces\tests\functional\datahandling\regular\abstractactiontestcase {
        /**
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * @test
         * @see DataSet/createContentRecords.csv
         */
        public function createContents() {}
        /**
         * @test
         * @see DataSet/createContentRecordAndDiscardCreatedContentRecord.csv
         */
        public function createContentAndDiscardCreatedContent() {}
        /**
         * @test
         * @see DataSet/createAndCopyContentRecordAndDiscardCopiedContentRecord.csv
         */
        public function createAndCopyContentAndDiscardCopiedContent() {}
        /**
         * @test
         * @see DataSet/modifyContentRecord.csv
         */
        public function modifyContent() {}
        /**
         * @test
         * @see DataSet/deleteContentRecord.csv
         */
        public function deleteContent() {}
        /**
         * @test
         * @see DataSet/deleteLocalizedContentNDeleteContent.csv
         */
        public function deleteLocalizedContentAndDeleteContent() {}
        /**
         * @test
         * @see DataSet/copyContentRecord.csv
         */
        public function copyContent() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguage.csv
         */
        public function copyContentToLanguage() {}
        /**
         * @test
         * @see DataSet/copyContentToLanguageFromNonDefaultLanguage.csv
         */
        public function copyContentToLanguageFromNonDefaultLanguage() {}
        /**
         * @test
         * @see DataSet/localizeContentRecord.csv
         */
        public function localizeContent() {}
        /**
         * @test
         * @see DataSet/localizeContentFromNonDefaultLanguage.csv
         */
        public function localizeContentFromNonDefaultLanguage() {}
        /**
         * @test
         * @see DataSet/changeContentRecordSorting.csv
         */
        public function changeContentSorting() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPage.csv
         */
        public function moveContentToDifferentPage() {}
        /**
         * @test
         * @see DataSet/moveContentRecordToDifferentPageAndChangeSorting.csv
         */
        public function moveContentToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/createPageRecord.csv
         */
        public function createPage() {}
        /**
         * @test
         * @see DataSet/modifyPageRecord.csv
         */
        public function modifyPage() {}
        /**
         * @test
         * @see DataSet/deletePageRecord.csv
         */
        public function deletePage() {}
        /**
         * @test
         * @see DataSet/deleteContentAndPage.csv
         */
        public function deleteContentAndPage() {}
        /**
         * @test
         * @see DataSet/copyPageRecord.csv
         */
        public function copyPage() {}
        /**
         * @test
         * @see DataSet/copyPageFreeMode.csv
         */
        public function copyPageFreeMode() {}
        /**
         * @test
         * @see DataSet/localizePageRecord.csv
         */
        public function localizePage() {}
        /**
         * @test
         * @see DataSet/changePageRecordSorting.csv
         */
        public function changePageSorting() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPage.csv
         */
        public function movePageToDifferentPage() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPageAndChangeSorting.csv
         */
        public function movePageToDifferentPageAndChangeSorting() {}
        /**
         * @test
         * @see DataSet/movePageRecordToDifferentPageAndCreatePageRecordAfterMovedPageRecord.csv
         * @see http://forge.typo3.org/issues/33104
         * @see http://forge.typo3.org/issues/55573
         */
        public function movePageToDifferentPageAndCreatePageAfterMovedPage() {}
        /**
         * @test
         * @see DataSet/createPlaceholdersAndDeleteDraftParentPage.csv
         */
        public function createPlaceholdersAndDeleteDraftParentPage() {}
        /**
         * @test
         * @see DataSet/createPlaceholdersAndDeleteLiveParentPage.csv
         */
        public function createPlaceholdersAndDeleteLiveParentPage() {}
    }

}

namespace TYPO3\CMS\Workspaces\Tests\Functional\Service {
    /**
     * Workspace service test
     */
    class WorkspaceServiceTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function emptyWorkspaceReturnsEmptyArray() {}
        /**
         * @test
         */
        public function versionsFromSpecificWorkspaceCanBeFound() {}
        /**
         * @test
         */
        public function versionsFromAllWorkspaceCanBeFound() {}
        /**
         * @test
         */
        public function versionsCanBeFoundRecursive() {}
        /**
         * @test
         */
        public function versionsCanBeFilteredToSpecificStage() {}
        /**
         * @test
         */
        public function versionsCanBeFilteredToSpecificLifecycleStep() {}
        /**
         * The only change which we could find here actually moved away from this
         * branch of the tree - therefore we're not supposed to find anything here
         *
         * @test
         */
        public function movedElementsCanNotBeFoundAtTheirOrigin() {}
        /**
         * @test
         */
        public function movedElementsCanBeFoundAtTheirDestination() {}
        /**
         * @test
         */
        public function movedElementsCanBeFoundUsingTheirLiveUid() {}
        /**
         * @test
         */
        public function getPagesWithVersionsInTableReturnsPagesWithVersionsInTable() {}
        /**
         * @test
         */
        public function hasPageRecordVersionsReturnsTrueForPageWithVersions() {}
        /**
         * @test
         */
        public function hasPageRecordVersionsReturnsFalseForPageWithoutVersions() {}
    }

}

namespace TYPO3\CMS\Fluid\Core\Parser {
    interface InterceptorInterface extends \typo3fluid\fluid\core\parser\interceptorinterface {}

}

namespace TYPO3\CMS\Fluid\Core\Parser\SyntaxTree {
    class RootNode extends \typo3fluid\fluid\core\parser\syntaxtree\rootnode {}

    class ViewHelperNode extends \typo3fluid\fluid\core\parser\syntaxtree\viewhelpernode {}


    interface NodeInterface extends \typo3fluid\fluid\core\parser\syntaxtree\nodeinterface {}

}

namespace TYPO3\CMS\Fluid\Core\Rendering {
    /**
     * Class RenderingContext
     */
    class RenderingContext extends \typo3fluid\fluid\core\rendering\renderingcontext {
        /**
         * Controller context being passed to the ViewHelper
         *
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         */
        protected $controllerContext;

        public function injectViewHelperVariableContainer(\TYPO3Fluid\Fluid\Core\ViewHelper\ViewHelperVariableContainer $viewHelperVariableContainer) {}
/** @var FluidTemplateCache $cache */
        public function __construct(/** @var FluidTemplateCache $cache */
ViewInterface $view = null) {}
        /**
         * Build parser configuration
         *
         * @return Configuration
         * @throws \InvalidArgumentException if a class not implementing InterceptorInterface was registered
         */
        public function buildParserConfiguration() {}
        /**
         * Get the controller context which will be passed to the ViewHelper
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext The controller context to set
         */
        public function getControllerContext() {}
        public function setControllerAction($action) {}
        public function setControllerName($controllerName) {}
        public function setControllerContext(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
    }


    interface RenderingContextInterface extends \typo3fluid\fluid\core\rendering\renderingcontextinterface {}

}

namespace TYPO3\CMS\Fluid\Core\ViewHelper {
    class Exception extends \typo3fluid\fluid\core\viewhelper\exception {}

    abstract class AbstractViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {}

    abstract class AbstractConditionViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractconditionviewhelper {}

    abstract class AbstractTagBasedViewHelper extends \typo3fluid\fluid\core\viewhelper\abstracttagbasedviewhelper {}

    class TemplateVariableContainer extends \typo3fluid\fluid\core\variables\standardvariableprovider {}

    class ViewHelperVariableContainer extends \typo3fluid\fluid\core\viewhelper\viewhelpervariablecontainer {}

    class TagBuilder extends \typo3fluid\fluid\core\viewhelper\tagbuilder {}

    /**
     * Class ViewHelperResolver
     *
     * Class whose purpose is dedicated to resolving classes which
     * can be used as ViewHelpers and ExpressionNodes in Fluid.
     *
     * This CMS-specific version of the ViewHelperResolver works
     * almost exactly like the one from Fluid itself, with the main
     * differences being that this one supports a legacy mode flag
     * which when toggled on makes the Fluid parser behave exactly
     * like it did in the legacy CMS Fluid package.
     *
     * In addition to modifying the behavior or the parser when
     * legacy mode is requested, this ViewHelperResolver is also
     * made capable of "mixing" two different ViewHelper namespaces
     * to effectively create aliases for the Fluid core ViewHelpers
     * to be loaded in the TYPO3\CMS\ViewHelpers scope as well.
     *
     * Default ViewHelper namespaces are read TYPO3 configuration at:
     *
     * $GLOBALS['TYPO3_CONF_VARS']['SYS']['fluid']['namespaces']
     *
     * Extending this array allows third party ViewHelper providers
     * to automatically add or extend namespaces which then become
     * available in every Fluid template file without having to
     * register the namespace.
     */
    class ViewHelperResolver extends \typo3fluid\fluid\core\viewhelper\viewhelperresolver {
        /**
         * ViewHelperResolver constructor
         *
         * Loads namespaces defined in global TYPO3 configuration. Overlays `f:`
         * with `f:debug:` when Fluid debugging is enabled in the admin panel,
         * causing debugging-specific ViewHelpers to be resolved in that case.
         */
        public function __construct() {}
        public function createViewHelperInstanceFromClassName($viewHelperClassName) {}
        /**
         * @return ObjectManagerInterface
         */
        protected function getObjectManager() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }


    interface ViewHelperInterface extends \typo3fluid\fluid\core\viewhelper\viewhelperinterface {}

}

namespace TYPO3\CMS\Fluid\Core\ViewHelper\Facets {
    interface ChildNodeAccessInterface extends \typo3fluid\fluid\core\viewhelper\viewhelperinterface {}

    interface CompilableInterface extends \typo3fluid\fluid\core\viewhelper\viewhelperinterface {}

    interface PostParseInterface extends \typo3fluid\fluid\core\viewhelper\viewhelperinterface {}

}

namespace TYPO3\CMS\Fluid\Core {
    class Exception extends \typo3fluid\fluid\core\exception {}

}

namespace TYPO3\CMS\Fluid\Core\ViewHelper\Exception {
    class InvalidVariableException extends \typo3fluid\fluid\core\exception {}

}

namespace TYPO3\CMS\Fluid\View {
    class Exception extends \typo3fluid\fluid\view\exception {}

    /**
     * A standalone template view.
     * Should be used as view if you want to use Fluid without Extbase extensions
     *
     * @api
     */
    class StandaloneView extends \typo3\cms\fluid\view\abstracttemplateview {
        /**
         * @var ObjectManager|null
         */
        protected $objectManager;

/** @var ControllerContext $controllerContext */
        public function __construct(/** @var ControllerContext $controllerContext */
ContentObjectRenderer $contentObject = null) {}
        public function setFormat($format) {}
        /**
         * Returns the format of the current request (defaults is "html")
         *
         * @return string $format
         * @throws \RuntimeException
         * @api
         */
        public function getFormat() {}
        /**
         * Returns the current request object
         *
         * @return WebRequest
         * @throws \RuntimeException
         */
        public function getRequest() {}
        /**
         * Returns the absolute path to a Fluid template file if it was specified with setTemplatePathAndFilename() before.
         * If the template filename was never specified, Fluid attempts to resolve the file based on controller and action.
         *
         * NB: If TemplatePaths was previously told to use the specific template path and filename it will short-circuit
         * and return that template path and filename directly, instead of attempting to resolve it.
         *
         * @return string Fluid template path
         * @api
         */
        public function getTemplatePathAndFilename() {}
        public function setTemplateSource($templateSource) {}
        /**
         * Checks whether a template can be resolved for the current request
         *
         * @return bool
         * @api
         */
        public function hasTemplate() {}
    }

    /**
     * The main template view. Should be used as view if you want Fluid Templating
     *
     * @api
     */
    class TemplateView extends \typo3\cms\fluid\view\abstracttemplateview {
        public function setLayoutPathAndFilename($layoutPathAndFilename) {}
        public function canRender(ControllerContext $controllerContext) {}
    }

    /**
     * Class TemplatePaths
     *
     * Custom implementation for template paths resolving, one which differs from the base
     * implementation in that it is capable of resolving template paths based on TypoScript
     * configuration when given a package name, and is aware of the Frontend/Backend contexts of TYPO3.
     */
    class TemplatePaths extends \typo3fluid\fluid\view\templatepaths {
        /**
         * @var array
         */
        protected $typoScript;
        /**
         * @var string
         */
        protected $templateSource;
        /**
         * @var string
         */
        protected $templatePathAndFilename;

        protected function getExtensionPrivateResourcesPath($extensionKey) {}
        /**
         * @return ConfigurationManagerInterface
         */
        protected function getConfigurationManager() {}
        protected function getContextSpecificViewConfiguration($extensionKey) {}
        public function fillDefaultsByPackageName($packageName) {}
        public function setTemplateRootPaths(array $templateRootPaths) {}
        public function setLayoutRootPaths(array $layoutRootPaths) {}
        public function setPartialRootPaths(array $partialRootPaths) {}
        public function getPartialPathAndFilename($partialName) {}
        /**
         * Get absolute path to template file
         *
         * @return string Returns the absolute path to a Fluid template file
         */
        public function getTemplatePathAndFilename() {}
        protected function ensureAbsolutePath($reference) {}
        /**
         * @return bool
         */
        protected function isBackendMode() {}
        /**
         * @return bool
         */
        protected function isFrontendMode() {}
    }

    /**
     * Abstract Fluid Template View.
     *
     * Contains the fundamental methods which any Fluid based template view needs.
     */
    abstract class AbstractTemplateView extends \typo3fluid\fluid\view\templateview implements \typo3\cms\extbase\mvc\view\viewinterface {
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         */
        protected $controllerContext;

        /**
         * Initializes this view.
         *
         * @api
         */
        public function initializeView() {}
        public function __construct(RenderingContextInterface $context = null) {}
        public function canRender(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
        public function setControllerContext(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext $controllerContext) {}
        public function setTemplate($templateName) {}
        public function setTemplatePathAndFilename($templatePathAndFilename) {}
        public function setTemplateRootPaths(array $templateRootPaths) {}
        /**
         * Resolves the template root to be used inside other paths.
         *
         * @return string[] Path(s) to template root directory
         */
        public function getTemplateRootPaths() {}
        public function setPartialRootPaths(array $partialRootPaths) {}
        /**
         * Returns the absolute path to the folder that contains Fluid partial files
         *
         * @return string[] Fluid partial root paths
         * @throws InvalidTemplateResourceException
         * @api
         */
        public function getPartialRootPaths() {}
        /**
         * Resolves the layout root to be used inside other paths.
         *
         * @return string[] Fluid layout root paths
         * @throws InvalidTemplateResourceException
         * @api
         */
        public function getLayoutRootPaths() {}
        public function setLayoutRootPaths(array $layoutRootPaths) {}
    }

}

namespace TYPO3\CMS\Fluid\View\Exception {
    class InvalidSectionException extends \typo3fluid\fluid\view\exception\invalidsectionexception {}

    class InvalidTemplateResourceException extends \typo3fluid\fluid\view\exception\invalidtemplateresourceexception {}

}

namespace TYPO3\CMS\Fluid\Core\Compiler {
    class TemplateCompiler extends \typo3fluid\fluid\core\compiler\templatecompiler {}

}

namespace TYPO3\CMS\Fluid\Core\Variables {
    class CmsVariableProvider extends \typo3fluid\fluid\core\variables\standardvariableprovider {}

}

namespace TYPO3\CMS\Fluid\Core\Widget {
    /**
     * Builds the WidgetRequest if an AJAX widget is called.
     */
    class WidgetRequestBuilder extends \typo3\cms\extbase\mvc\web\requestbuilder {
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder
         */
        private $ajaxWidgetContextHolder;

        public function injectAjaxWidgetContextHolder(\TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder $ajaxWidgetContextHolder) {}
        /**
         * Builds a widget request object from the raw HTTP information
         *
         * @return \TYPO3\CMS\Fluid\Core\Widget\WidgetRequest The widget request as an object
         */
        public function build() {}
    }

    /**
     * Widget request handler, which handles the request if
     * f3-fluid-widget-id is found.
     *
     * This Request Handler gets the WidgetRequestBuilder injected.
     */
    class WidgetRequestHandler extends \typo3\cms\extbase\mvc\web\abstractrequesthandler {
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder
         */
        protected $ajaxWidgetContextHolder;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetRequestBuilder
         */
        protected $requestBuilder;

        public function injectAjaxWidgetContextHolder(\TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder $ajaxWidgetContextHolder) {}
        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        public function injectRequestBuilder(\TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder $requestBuilder) {}
        public function injectWidgetRequestBuilder(\TYPO3\CMS\Fluid\Core\Widget\WidgetRequestBuilder $requestBuilder) {}
        /**
         * Handles the web request. The response will automatically be sent to the client.
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Web\Response
         */
        public function handleRequest() {}
        /**
         * @return bool TRUE if it is an AJAX widget request
         */
        public function canHandleRequest() {}
        /**
         * This request handler has a higher priority than the default request handler.
         *
         * @return int
         */
        public function getPriority() {}
    }

    /**
     * The WidgetContext stores all information a widget needs to know about the
     * environment.
     *
     * The WidgetContext can be fetched from the current WidgetRequest, and is thus
     * available throughout the whole sub-request of the widget. It is used internally
     * by various ViewHelpers (like <f:widget.link>, <f:widget.uri>, <f:widget.renderChildren>),
     * to get knowledge over the current widget's configuration.
     *
     * It is a purely internal class which should not be used outside of Fluid.
     */
    class WidgetContext {
        /**
         * Uniquely identifies a Widget Instance on a certain page.
         *
         * @var string
         */
        protected $widgetIdentifier;
        /**
         * Per-User unique identifier of the widget, if it is an AJAX widget.
         *
         * @var string
         */
        protected $ajaxWidgetIdentifier;
        /**
         * User-supplied widget configuration, available inside the widget
         * controller as $this->widgetConfiguration.
         *
         * @var array
         */
        protected $widgetConfiguration;
        /**
         * The fully qualified object name of the Controller which this widget uses.
         *
         * @var string
         */
        protected $controllerObjectName;
        /**
         * The child nodes of the Widget ViewHelper.
         * Only available inside non-AJAX requests.
         *
         * @var \TYPO3Fluid\Fluid\Core\Parser\SyntaxTree\RootNode
         */
        protected $viewHelperChildNodes;
        /**
         * The rendering context of the ViewHelperChildNodes.
         * Only available inside non-AJAX requests.
         * @todo rename to something more meaningful.
         *
         * @var \TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface
         */
        protected $viewHelperChildNodeRenderingContext;
        /**
         * @var string
         */
        protected $parentPluginNamespace;
        /**
         * @var string
         */
        protected $parentExtensionName;
        /**
         * @var string
         */
        protected $parentPluginName;
        /**
         * @var string
         */
        protected $widgetViewHelperClassName;

        /**
         * @return string
         */
        public function getWidgetIdentifier() {}
        public function setWidgetIdentifier($widgetIdentifier) {}
        /**
         * @return string
         */
        public function getAjaxWidgetIdentifier() {}
        public function setAjaxWidgetIdentifier($ajaxWidgetIdentifier) {}
        public function setParentPluginNamespace($parentPluginNamespace) {}
        /**
         * Returns the URI namespace of the plugin that contains the widget
         *
         * @return string
         */
        public function getParentPluginNamespace() {}
        public function setParentExtensionName($parentExtensionName) {}
        /**
         * Returns the Extension name of the plugin that contains the widget
         *
         * @return string
         */
        public function getParentExtensionName() {}
        public function setParentPluginName($parentPluginName) {}
        /**
         * Returns the name of the plugin that contains the widget
         *
         * @return string
         */
        public function getParentPluginName() {}
        public function setWidgetViewHelperClassName($widgetViewHelperClassName) {}
        /**
         * Returns the fully qualified class name of the view helper this context belongs to
         *
         * @return string
         */
        public function getWidgetViewHelperClassName() {}
        /**
         * @return array
         */
        public function getWidgetConfiguration() {}
        public function setWidgetConfiguration($widgetConfiguration) {}
        /**
         * @return string
         */
        public function getControllerObjectName() {}
        public function setControllerObjectName($controllerObjectName) {}
        public function setViewHelperChildNodes(\TYPO3Fluid\Fluid\Core\Parser\SyntaxTree\RootNode $viewHelperChildNodes, \TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface $viewHelperChildNodeRenderingContext) {}
        /**
         * @return \TYPO3Fluid\Fluid\Core\Parser\SyntaxTree\RootNode
         */
        public function getViewHelperChildNodes() {}
        /**
         * @return \TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface
         */
        public function getViewHelperChildNodeRenderingContext() {}
        /**
         * @return array
         */
        public function __sleep() {}
    }

    /**
     * Represents a widget request.
     */
    class WidgetRequest extends \typo3\cms\extbase\mvc\web\request {
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetContext
         */
        protected $widgetContext;

        /**
         * @return \TYPO3\CMS\Fluid\Core\Widget\WidgetContext
         */
        public function getWidgetContext() {}
        public function setWidgetContext(\TYPO3\CMS\Fluid\Core\Widget\WidgetContext $widgetContext) {}
        /**
         * Returns the unique URI namespace for this widget in the format pluginNamespace[widgetIdentifier]
         *
         * @return string
         */
        public function getArgumentPrefix() {}
    }

    /**
     * This is the bootstrap for Ajax Widget responses
     */
    class Bootstrap {
        /**
         * Back reference to the parent content object
         * This has to be public as it is set directly from TYPO3
         *
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        public $cObj;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;

        public function run($content, $configuration) {}
/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $contentObject */
        public function initializeConfiguration(/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $contentObject */
$configuration) {}
        /**
         * Configures the object manager object configuration from
         * config.tx_extbase.objects
         *
         * @see initialize()
         * @todo this is duplicated code (see \TYPO3\CMS\Extbase\Core\Bootstrap::configureObjectManager())
         */
        public function configureObjectManager() {}
    }

    /**
     * @api
     */
    abstract class AbstractWidgetViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
        /**
         * The Controller associated to this widget.
         * This needs to be filled by the individual subclass by an inject method.
         *
         * @var \TYPO3\CMS\Fluid\Core\Widget\AbstractWidgetController
         * @api
         */
        protected $controller;
        /**
         * If set to TRUE, it is an AJAX widget.
         *
         * @var bool
         * @api
         */
        protected $ajaxWidget;
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder
         */
        private $ajaxWidgetContextHolder;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $extensionService;
        /**
         * @var bool
         */
        protected $escapeOutput;
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetContext
         */
        private $widgetContext;

        public function injectAjaxWidgetContextHolder(\TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder $ajaxWidgetContextHolder) {}
        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        public function injectExtensionService(\TYPO3\CMS\Extbase\Service\ExtensionService $extensionService) {}
        /**
         * Initialize arguments.
         */
        public function initializeArguments() {}
        /**
         * Initialize the arguments of the ViewHelper, and call the render() method of the ViewHelper.
         *
         * @return string the rendered ViewHelper.
         */
        public function initializeArgumentsAndRender() {}
        /**
         * Initialize the Widget Context, before the Render method is called.
         */
        private function initializeWidgetContext() {}
        public function setChildNodes(array $childNodes) {}
        /**
         * Generate the configuration for this widget. Override to adjust.
         *
         * @return array
         * @api
         */
        protected function getWidgetConfiguration() {}
        /**
         * Initiate a sub request to $this->controller. Make sure to fill $this->controller
         * via Dependency Injection.
         *
         * @return \TYPO3\CMS\Extbase\Mvc\ResponseInterface the response of this request.
         * @throws \TYPO3\CMS\Fluid\Core\Widget\Exception\MissingControllerException
         * @api
         */
        protected function initiateSubRequest() {}
        private function passArgumentsToSubRequest(\TYPO3\CMS\Fluid\Core\Widget\WidgetRequest $subRequest) {}
        /**
         * The widget identifier is unique on the current page, and is used
         * in the URI as a namespace for the widget's arguments.
         *
         * @return string the widget identifier for this widget
         * @todo clean up, and make it somehow more routing compatible.
         */
        private function initializeWidgetIdentifier() {}
        public function compile($argumentsName, $closureName, $initializationPhpCode, ViewHelperNode $node, TemplateCompiler $compiler) {}
    }

    /**
     * This is the base class for all widget controllers.
     * It is basically an ActionController and additionally has $this->widgetConfiguration set to the
     * Configuration of the current Widget.
     *
     * @api
     */
    abstract class AbstractWidgetController extends \typo3\cms\extbase\mvc\controller\actioncontroller implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $supportedRequestTypes;
        /**
         * Configuration for this widget.
         *
         * @var array
         * @api
         */
        protected $widgetConfiguration;

        public function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        protected function setViewConfiguration(\TYPO3\CMS\Extbase\Mvc\View\ViewInterface $view) {}
    }

    /**
     * A Fluid Widget exception.
     *
     * @api
     */
    class Exception extends \typo3fluid\fluid\core\exception {}

    /**
     * This object stores the WidgetContext for the currently active widgets
     * of the current user, to make sure the WidgetContext is available in
     * Widget AJAX requests.
     *
     * This class is only used internally by the widget framework.
     */
    class AjaxWidgetContextHolder implements \typo3\cms\core\singletoninterface {
        /**
         * An array $ajaxWidgetIdentifier => $widgetContext
         * which stores the widget context.
         *
         * @var array
         */
        protected $widgetContexts;
        /**
         * @var string
         */
        protected $widgetContextsStorageKey;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Loads the windget contexts from the TYPO3 user session
         */
        protected function loadWidgetContexts() {}
        public function get($ajaxWidgetId) {}
        public function store(\TYPO3\CMS\Fluid\Core\Widget\WidgetContext $widgetContext) {}
        /**
         * Persists the widget contexts in the TYPO3 user session
         */
        protected function storeWidgetContexts() {}
    }

}

namespace TYPO3\CMS\Fluid\Core\Widget\Exception {
    /**
     * An exception if no widget Request could be found inside <f:renderChildren>.
     */
    class WidgetRequestNotFoundException extends \typo3\cms\fluid\core\widget\exception {}

    /**
     * An exception if no widget context could be found inside the AjaxWidgetContextHolder.
     */
    class RenderingContextNotFoundException extends \typo3\cms\fluid\core\widget\exception {}

    /**
     * An exception if no widget context could be found inside the AjaxWidgetContextHolder.
     */
    class WidgetContextNotFoundException extends \typo3\cms\fluid\core\widget\exception {}

    /**
     * An exception if the controller is missing.
     */
    class MissingControllerException extends \typo3\cms\fluid\core\widget\exception {}

}

namespace TYPO3\CMS\Fluid\Core\Cache {
    /**
     * Class FluidTemplateCache
     *
     * Connector class that enables the TYPO3 cache called "fluid_template" to be operated with the
     * interface appropriate for the Fluid engine.
     */
    class FluidTemplateCache extends \typo3\cms\core\cache\frontend\phpfrontend implements \typo3fluid\fluid\core\cache\fluidcacheinterface {
        public function flush($name = null) {}
        public function get($entryIdentifier) {}
        public function set($entryIdentifier, $sourceCode, array $tags = [ ], $lifetime = null) {}
        /**
         * @return FluidCacheWarmerInterface
         */
        public function getCacheWarmer() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers {
    /**
     * This ViewHelper generates a HTML dump of the tagged variable.
     *
     * = Examples =
     *
     * <code title="Simple">
     * <f:debug>{testVariables.array}</f:debug>
     * </code>
     * <output>
     * foobarbazfoo
     * </output>
     *
     * <code title="All Features">
     * <f:debug title="My Title" maxDepth="5" blacklistedClassNames="{0:'Tx_BlogExample_Domain_Model_Administrator'}" plainText="true" ansiColors="false" inline="true" blacklistedPropertyNames="{0:'posts'}">{blogs}</f:debug>
     * </code>
     * <output>
     * [A HTML view of the var_dump]
     * </output>
     */
    class DebugViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * This prevents double escaping as the output is encoded in DebuggerUtility::var_dump
         *
         * @var bool
         */
        protected $escapeChildren;
        /**
         * Output of this viewhelper is already escaped
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * View helper which creates a <base href="..."></base> tag. The Base URI is taken from the
     * current request.
     * In TYPO3 Flow, you should always include this ViewHelper to make the links work.
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:base />
     * </code>
     * <output>
     * <base href="http://yourdomain.tld/" />
     * (depending on your domain)
     * </output>
     *
     * @api
     */
    class BaseViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Translate a key from locallang. The files are loaded from the folder
     * "Resources/Private/Language/".
     *
     * == Examples ==
     *
     * <code title="Translate key">
     * <f:translate key="key1" />
     * </code>
     * <output>
     * value of key "key1" in the current website language
     * </output>
     *
     * <code title="Keep HTML tags">
     * <f:format.raw><f:translate key="htmlKey" /></f:format.raw>
     * </code>
     * <output>
     * value of key "htmlKey" in the current website language, no htmlspecialchars applied
     * </output>
     *
     * <code title="Translate key from custom locallang file">
     * <f:translate key="LLL:EXT:myext/Resources/Private/Language/locallang.xlf:key1" />
     * </code>
     * <output>
     * value of key "key1" in the current website language
     * </output>
     *
     * <code title="Inline notation with arguments and default value">
     * {f:translate(key: 'argumentsKey', arguments: {0: 'dog', 1: 'fox'}, default: 'default value')}
     * </code>
     * <output>
     * value of key "argumentsKey" in the current website language
     * with "%1" and "%2" are replaced by "dog" and "fox" (printf)
     * if the key is not found, the output is "default value"
     * </output>
     *
     * <code title="Inline notation with extension name">
     * {f:translate(key: 'someKey', extensionName: 'SomeExtensionName')}
     * </code>
     * <output>
     * value of key "someKey" in the current website language
     * the locallang file of extension "some_extension_name" will be used
     * </output>
     *
     * <code title="Translate id as in TYPO3 Flow">
     * <f:translate id="key1" />
     * </code>
     * <output>
     * value of id "key1" in the current website language
     * </output>
     */
    class TranslateViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Output is escaped already. We must not escape children, to avoid double encoding.
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        protected static function translate($id, $extensionName, $arguments, $languageKey, $alternativeLanguageKeys) {}
    }

    /**
     * Render a given media file with the correct html tag.
     *
     * It asks the RendererRegister for the correct Renderer class and if not found it falls
     * back to the ImageViewHelper as that is the "Renderer" class for images in Fluid context.
     *
     * = Examples =
     *
     * <code title="Image Object">
     *     <f:media file="{file}" width="400" height="375" />
     * </code>
     * <output>
     *     <img alt="alt set in image record" src="fileadmin/_processed_/323223424.png" width="396" height="375" />
     * </output>
     *
     * <code title="MP4 Video Object">
     *     <f:media file="{file}" width="400" height="375" />
     * </code>
     * <output>
     *     <video width="400" height="375" controls><source src="fileadmin/user_upload/my-video.mp4" type="video/mp4"></video>
     * </output>
     *
     * <code title="MP4 Video Object with loop and autoplay option set">
     *     <f:media file="{file}" width="400" height="375" additionalConfig="{loop: '1', autoplay: '1'}" />
     * </code>
     * <output>
     *     <video width="400" height="375" controls loop><source src="fileadmin/user_upload/my-video.mp4" type="video/mp4"></video>
     * </output>
     */
    class MediaViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize arguments.
         */
        public function initializeArguments() {}
        /**
         * Render a given media file
         *
         * @return string Rendered tag
         * @throws \UnexpectedValueException
         */
        public function render() {}
        protected function renderImage(FileInterface $image, $width, $height) {}
        /**
         * Return an instance of ImageService
         *
         * @return ImageService
         */
        protected function getImageService() {}
    }

    /**
     * This ViewHelper renders CObjects from the global TypoScript configuration.
     * NOTE: You have to ensure proper escaping (htmlspecialchars/intval/etc.) on your own!
     *
     * = Examples =
     *
     * <code title="Render lib object">
     * <f:cObject typoscriptObjectPath="lib.someLibObject" />
     * </code>
     * <output>
     * rendered lib.someLibObject
     * </output>
     *
     * <code title="Specify cObject data & current value">
     * <f:cObject typoscriptObjectPath="lib.customHeader" data="{article}" currentValueKey="title" />
     * </code>
     * <output>
     * rendered lib.customHeader. data and current value will be available in TypoScript
     * </output>
     *
     * <code title="inline notation">
     * {article -> f:cObject(typoscriptObjectPath: 'lib.customHeader')}
     * </code>
     * <output>
     * rendered lib.customHeader. data will be available in TypoScript
     * </output>
     */
    class CObjectViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * Disable escaping of child nodes' output
         *
         * @var bool
         */
        protected $escapeChildren;
        /**
         * Disable escaping of this node's output
         *
         * @var bool
         */
        protected $escapeOutput;
        /**
         * @var \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController contains a backup of the current $GLOBALS['TSFE'] if used in BE mode
         */
        static protected $tsfeBackup;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        /**
         * @return ConfigurationManagerInterface
         */
        protected static function getConfigurationManager() {}
        /**
         * @return ContentObjectRenderer
         */
        protected static function getContentObjectRenderer() {}
        /**
         * Sets the $TSFE->cObjectDepthCounter in Backend mode
         * This somewhat hacky work around is currently needed because the cObjGetSingle() function of \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer relies on this setting
         */
        protected static function simulateFrontendEnvironment() {}
        /**
         * Resets $GLOBALS['TSFE'] if it was previously changed by simulateFrontendEnvironment()
         *
         * @see simulateFrontendEnvironment()
         */
        protected static function resetFrontendEnvironment() {}
    }

    /**
     * Form view helper. Generates a <form> Tag.
     *
     * = Basic usage =
     *
     * Use <f:form> to output an HTML <form> tag which is targeted at the specified action, in the current controller and package.
     * It will submit the form data via a POST request. If you want to change this, use method="get" as an argument.
     * <code title="Example">
     * <f:form action="...">...</f:form>
     * </code>
     *
     * = A complex form with a specified encoding type =
     *
     * <code title="Form with enctype set">
     * <f:form action=".." controller="..." package="..." enctype="multipart/form-data">...</f:form>
     * </code>
     *
     * = A Form which should render a domain object =
     *
     * <code title="Binding a domain object to a form">
     * <f:form action="..." name="customer" object="{customer}">
     * <f:form.hidden property="id" />
     * <f:form.textbox property="name" />
     * </f:form>
     * </code>
     * This automatically inserts the value of {customer.name} inside the textbox and adjusts the name of the textbox accordingly.
     */
    class FormViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformviewhelper {
        /**
         * @var string
         */
        protected $tagName;
        /**
         * @var \TYPO3\CMS\Extbase\Security\Cryptography\HashService
         */
        protected $hashService;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService
         */
        protected $mvcPropertyMappingConfigurationService;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $extensionService;
        /**
         * We need the arguments of the formActionUri on requesthash calculation
         * therefore we will store them in here right after calling uriBuilder
         *
         * @var array
         */
        protected $formActionUriArguments;

        public function injectHashService(\TYPO3\CMS\Extbase\Security\Cryptography\HashService $hashService) {}
        public function injectMvcPropertyMappingConfigurationService(\TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService $mvcPropertyMappingConfigurationService) {}
        public function injectExtensionService(\TYPO3\CMS\Extbase\Service\ExtensionService $extensionService) {}
        /**
         * Initialize arguments.
         */
        public function initializeArguments() {}
        /**
         * Render the form.
         *
         * @return string rendered form
         */
        public function render() {}
        /**
         * Sets the "action" attribute of the form tag
         */
        protected function setFormActionUri() {}
        /**
         * Render additional identity fields which were registered by form elements.
         * This happens if a form field is defined like property="bla.blubb" - then we might need an identity property for the sub-object "bla".
         *
         * @return string HTML-string for the additional identity properties
         */
        protected function renderAdditionalIdentityFields() {}
        /**
         * Renders hidden form fields for referrer information about
         * the current controller and action.
         *
         * @return string Hidden fields with referrer information
         * @todo filter out referrer information that is equal to the target (e.g. same packageKey)
         */
        protected function renderHiddenReferrerFields() {}
        /**
         * Adds the form object name to the ViewHelperVariableContainer if "objectName" argument or "name" attribute is specified.
         */
        protected function addFormObjectNameToViewHelperVariableContainer() {}
        /**
         * Removes the form name from the ViewHelperVariableContainer.
         */
        protected function removeFormObjectNameFromViewHelperVariableContainer() {}
        /**
         * Returns the name of the object that is bound to this form.
         * If the "objectName" argument has been specified, this is returned. Otherwise the name attribute of this form.
         * If neither objectName nor name arguments have been set, NULL is returned.
         *
         * @return string specified Form name or NULL if neither $objectName nor $name arguments have been specified
         */
        protected function getFormObjectName() {}
        /**
         * Adds the object that is bound to this form to the ViewHelperVariableContainer if the formObject attribute is specified.
         */
        protected function addFormObjectToViewHelperVariableContainer() {}
        /**
         * Removes the form object from the ViewHelperVariableContainer.
         */
        protected function removeFormObjectFromViewHelperVariableContainer() {}
        /**
         * Adds the field name prefix to the ViewHelperVariableContainer
         */
        protected function addFieldNamePrefixToViewHelperVariableContainer() {}
        /**
         * Get the field name prefix
         *
         * @return string
         */
        protected function getFieldNamePrefix() {}
        /**
         * Removes field name prefix from the ViewHelperVariableContainer
         */
        protected function removeFieldNamePrefixFromViewHelperVariableContainer() {}
        /**
         * Adds a container for form field names to the ViewHelperVariableContainer
         */
        protected function addFormFieldNamesToViewHelperVariableContainer() {}
        /**
         * Removes the container for form field names from the ViewHelperVariableContainer
         */
        protected function removeFormFieldNamesFromViewHelperVariableContainer() {}
        /**
         * Render the request hash field
         *
         * @return string the hmac field
         */
        protected function renderRequestHashField() {}
        protected function postProcessUriArgumentsForRequestHash($arguments, $results, $currentPrefix = '', $level = 0) {}
        /**
         * Retrieves the default field name prefix for this form
         *
         * @return string default field name prefix
         */
        protected function getDefaultFieldNamePrefix() {}
        /**
         * Remove Checkbox field names from ViewHelper variable container, to start from scratch when a new form starts.
         */
        protected function removeCheckboxFieldNamesFromViewHelperVariableContainer() {}
        /**
         * Render the request hash field
         *
         * @return string The hmac field
         */
        protected function renderTrustedPropertiesField() {}
    }

    /**
     * Resizes a given image (if required) and renders the respective img tag
     *
     * = Examples =
     *
     * <code title="Default">
     * <f:image src="EXT:myext/Resources/Public/typo3_logo.png" alt="alt text" />
     * </code>
     * <output>
     * <img alt="alt text" src="typo3conf/ext/myext/Resources/Public/typo3_logo.png" width="396" height="375" />
     * or (in BE mode):
     * <img alt="alt text" src="../typo3conf/ext/viewhelpertest/Resources/Public/typo3_logo.png" width="396" height="375" />
     * </output>
     *
     * <code title="Image Object">
     * <f:image image="{imageObject}" />
     * </code>
     * <output>
     * <img alt="alt set in image record" src="fileadmin/_processed_/323223424.png" width="396" height="375" />
     * </output>
     *
     * <code title="Inline notation">
     * {f:image(src: 'EXT:viewhelpertest/Resources/Public/typo3_logo.png', alt: 'alt text', minWidth: 30, maxWidth: 40)}
     * </code>
     * <output>
     * <img alt="alt text" src="../typo3temp/assets/images/f13d79a526.png" width="40" height="38" />
     * (depending on your TYPO3s encryption key)
     * </output>
     *
     * <code title="Other resource type (e.g. PDF)">
     * <f:image src="fileadmin/user_upload/example.pdf" alt="foo" />
     * </code>
     * <output>
     * If your graphics processing library is set up correctly then it will output a thumbnail of the first page of your PDF document.
     * <img src="fileadmin/_processed_/1/2/csm_example_aabbcc112233.gif" width="200" height="284" alt="foo">
     * </output>
     *
     * <code title="Non-existent image">
     * <f:image src="NonExistingImage.png" alt="foo" />
     * </code>
     * <output>
     * Could not get image resource for "NonExistingImage.png".
     * </output>
     */
    class ImageViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ImageService
         */
        protected $imageService;

        public function injectImageService(\TYPO3\CMS\Extbase\Service\ImageService $imageService) {}
        /**
         * Initialize arguments.
         */
        public function initializeArguments() {}
        /**
         * Resizes a given image (if required) and renders the respective img tag
         *
         * @see https://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Image/
         *
         * @throws Exception
         * @return string Rendered tag
         */
        public function render() {}
    }

    /**
     * View helper which renders the flash messages (if there are any) as an unsorted list.
     *
     * In case you need custom Flash Message HTML output, please write your own ViewHelper for the moment.
     *
     *
     * = Examples =
     *
     * <code title="Simple">
     * <f:flashMessages />
     * </code>
     * <output>
     * A list of flash messages.
     * </output>
     *
     * <code title="TYPO3 core style">
     * <f:flashMessages />
     * </code>
     * <output>
     * <div class="typo3-messages">
     *  <div class="alert alert-info">
     *      <div class="media">
     *          <div class="media-left">
     *              <span class="fa-stack fa-lg">
     *                  <i class="fa fa-circle fa-stack-2x"></i>
     *                  <i class="fa fa-info fa-stack-1x"></i>
     *              </span>
     *          </div>
     *          <div class="media-body">
     *              <h4 class="alert-title">Info - Title for Info message</h4>
     *              <p class="alert-message">Message text here.</p>
     *          </div>
     *      </div>
     *  </div>
     * </div>
     * </output>
     * <code title="Output flash messages as a description list">
     * <f:flashMessages as="flashMessages">
     * 	<dl class="messages">
     * 	<f:for each="{flashMessages}" as="flashMessage">
     * 		<dt>{flashMessage.code}</dt>
     * 		<dd>{flashMessage.message}</dd>
     * 	</f:for>
     * 	</dl>
     * </f:flashMessages>
     * </code>
     * <output>
     * <dl class="messages">
     * 	<dt>1013</dt>
     * 	<dd>Some Warning Message.</dd>
     * </dl>
     * </output>
     *
     * <code title="Using a specific queue">
     * <f:flashMessages queueIdentifier="myQueue" />
     * </code>
     *
     * @api
     */
    class FlashMessagesViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * ViewHelper outputs HTML therefore output escaping has to be disabled
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Render the inner parts of a Widget.
     * This ViewHelper can only be used in a template which belongs to a Widget Controller.
     *
     * It renders everything inside the Widget ViewHelper, and you can pass additional
     * arguments.
     *
     * @api
     */
    class RenderChildrenViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper might render HTML, the output must not be escaped
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        protected static function getWidgetRenderingContext(RenderingContextInterface $renderingContext) {}
        protected static function getWidgetChildNodes(RenderingContextInterface $renderingContext) {}
        protected static function getWidgetContext(RenderingContextInterface $renderingContext) {}
        protected static function addArgumentsToTemplateVariableContainer(RenderingContextInterface $renderingContext, array $arguments) {}
        protected static function removeArgumentsFromTemplateVariableContainer(RenderingContextInterface $renderingContext, array $arguments) {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Form {
    /**
     * Abstract Form View Helper. Bundles functionality related to direct property access of objects in other Form ViewHelpers.
     *
     * If you set the "property" attribute to the name of the property to resolve from the object, this class will
     * automatically set the name and value of a form element.
     */
    abstract class AbstractFormViewHelper extends \typo3fluid\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;

        public function injectPersistenceManager(\TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface $persistenceManager) {}
        protected function prefixFieldName($fieldName) {}
        protected function renderHiddenIdentityField($object, $name) {}
        protected function registerFieldNameForFormTokenGeneration($fieldName) {}
    }

    /**
     * Validation results view helper
     *
     * = Examples =
     *
     * <code title="Output error messages as a list">
     * <f:form.validationResults>
     *   <f:if condition="{validationResults.flattenedErrors}">
     *     <ul class="errors">
     *       <f:for each="{validationResults.flattenedErrors}" as="errors" key="propertyPath">
     *         <li>{propertyPath}
     *           <ul>
     *           <f:for each="{errors}" as="error">
     *             <li>{error.code}: {error}</li>
     *           </f:for>
     *           </ul>
     *         </li>
     *       </f:for>
     *     </ul>
     *   </f:if>
     * </f:form.validationResults>
     * </code>
     * <output>
     * <ul class="errors">
     *   <li>1234567890: Validation errors for argument "newBlog"</li>
     * </ul>
     * </output>
     *
     * <code title="Output error messages for a single property">
     * <f:form.validationResults for="someProperty">
     *   <f:if condition="{validationResults.flattenedErrors}">
     *     <ul class="errors">
     *       <f:for each="{validationResults.errors}" as="error">
     *         <li>{error.code}: {error}</li>
     *       </f:for>
     *     </ul>
     *   </f:if>
     * </f:form.validationResults>
     * </code>
     * <output>
     * <ul class="errors">
     *   <li>1234567890: Some error message</li>
     * </ul>
     * </output>
     *
     * @api
     */
    class ValidationResultsViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * A view helper which generates an <input type="file"> HTML element.
     * Make sure to set enctype="multipart/form-data" on the form!
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:form.upload name="file" />
     * </code>
     * <output>
     * <input type="file" name="file" />
     * </output>
     *
     * @api
     */
    class UploadViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the upload field.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

    /**
     * Creates a submit button.
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <f:form.submit value="Send Mail" />
     * </code>
     * <output>
     * <input type="submit" />
     * </output>
     *
     * <code title="Dummy content for template preview">
     * <f:submit name="mySubmit" value="Send Mail"><button>dummy button</button></f:submit>
     * </code>
     * <output>
     * <input type="submit" name="mySubmit" value="Send Mail" />
     * </output>
     *
     * @api
     */
    class SubmitViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the submit button.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

    /**
     * View Helper which creates a simple Password Text Box (<input type="password">).
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:form.password name="myPassword" />
     * </code>
     * <output>
     * <input type="password" name="myPassword" value="default value" />
     * </output>
     *
     * @api
     */
    class PasswordViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the password input field.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

    /**
     * View Helper which creates a simple checkbox (<input type="checkbox">).
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:form.checkbox name="myCheckBox" value="someValue" />
     * </code>
     * <output>
     * <input type="checkbox" name="myCheckBox" value="someValue" />
     * </output>
     *
     * <code title="Preselect">
     * <f:form.checkbox name="myCheckBox" value="someValue" checked="{object.value} == 5" />
     * </code>
     * <output>
     * <input type="checkbox" name="myCheckBox" value="someValue" checked="checked" />
     * (depending on $object)
     * </output>
     *
     * <code title="Bind to object property">
     * <f:form.checkbox property="interests" value="TYPO3" />
     * </code>
     * <output>
     * <input type="checkbox" name="user[interests][]" value="TYPO3" checked="checked" />
     * (depending on property "interests")
     * </output>
     *
     * @api
     */
    class CheckboxViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the checkbox.
         *
         * @throws \TYPO3\CMS\Fluid\Core\ViewHelper\Exception
         * @return string
         * @api
         */
        public function render() {}
    }

    /**
     * Abstract Form View Helper. Bundles functionality related to direct property access of objects in other Form ViewHelpers.
     *
     * If you set the "property" attribute to the name of the property to resolve from the object, this class will
     * automatically set the name and value of a form element.
     *
     * @api
     */
    abstract class AbstractFormFieldViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformviewhelper {
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var bool
         */
        protected $respectSubmittedDataValue;

        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        /**
         * Initialize arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Getting the current configuration for respectSubmittedDataValue.
         *
         * @return bool
         */
        public function getRespectSubmittedDataValue() {}
        public function setRespectSubmittedDataValue($respectSubmittedDataValue) {}
        /**
         * Get the name of this form element.
         * Either returns arguments['name'], or the correct name for Object Access.
         *
         * In case property is something like bla.blubb (hierarchical), then [bla][blubb] is generated.
         *
         * @return string Name
         */
        protected function getName() {}
        /**
         * Shortcut for retrieving the request from the controller context
         *
         * @return \TYPO3\CMS\Extbase\Mvc\Request
         */
        protected function getRequest() {}
        /**
         * Get the name of this form element, without prefix.
         *
         * @return string name
         */
        protected function getNameWithoutPrefix() {}
        /**
         * Returns the current value of this Form ViewHelper and converts it to an identifier string in case it's an object
         * The value is determined as follows:
         * * If property mapping errors occurred and the form is re-displayed, the *last submitted* value is returned
         * * Else the bound property is returned (only in objectAccessor-mode)
         * * As fallback the "value" argument of this ViewHelper is used
         *
         * Note: This method should *not* be used for form elements that must not change the value attribute, e.g. (radio) buttons and checkboxes.
         *
         * @return mixed Value
         */
        protected function getValueAttribute() {}
        protected function getValueFromSubmittedFormData($value) {}
        protected function convertToPlainValue($value) {}
        /**
         * Checks if a property mapping error has occurred in the last request.
         *
         * @return bool TRUE if a mapping error occurred, FALSE otherwise
         */
        protected function hasMappingErrorOccurred() {}
        /**
         * Get the form data which has last been submitted; only returns valid data in case
         * a property mapping error has occurred. Check with hasMappingErrorOccurred() before!
         *
         * @return mixed
         */
        protected function getLastSubmittedFormData() {}
        /**
         * Add additional identity properties in case the current property is hierarchical (of the form "bla.blubb").
         * Then, [bla][__identity] has to be generated as well.
         */
        protected function addAdditionalIdentityPropertiesIfNeeded() {}
        /**
         * Get the current property of the object bound to this form.
         *
         * @return mixed Value
         */
        protected function getPropertyValue() {}
        /**
         * Internal method which checks if we should evaluate a domain object or just output arguments['name'] and arguments['value']
         *
         * @return bool TRUE if we should evaluate the domain object, FALSE otherwise.
         */
        protected function isObjectAccessorMode() {}
        /**
         * Add an CSS class if this view helper has errors
         */
        protected function setErrorClassAttribute() {}
        /**
         * Get errors for the property and form name of this view helper
         *
         * @return \TYPO3\CMS\Extbase\Error\Result Array of errors
         */
        protected function getMappingResultsForProperty() {}
        /**
         * Renders a hidden field with the same name as the element, to make sure the empty value is submitted
         * in case nothing is selected. This is needed for checkbox and multiple select fields
         *
         * @return string the hidden field.
         */
        protected function renderHiddenFieldForEmptyValue() {}
    }

    /**
     * Creates a button.
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <f:form.button>Send Mail</f:form.button>
     * </code>
     * <output>
     * <button type="submit" name="" value="">Send Mail</button>
     * </output>
     *
     * <code title="Disabled cancel button with some HTML5 attributes">
     * <f:form.button type="reset" name="buttonName" value="buttonValue" disabled="disabled" formmethod="post" formnovalidate="formnovalidate">Cancel</f:form.button>
     * </code>
     * <output>
     * <button disabled="disabled" formmethod="post" formnovalidate="formnovalidate" type="reset" name="myForm[buttonName]" value="buttonValue">Cancel</button>
     * </output>
     *
     * @api
     */
    class ButtonViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the button.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

    /**
     * View Helper which creates a text field (<input type="text">).
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:form.textfield name="myTextBox" value="default value" />
     * </code>
     * <output>
     * <input type="text" name="myTextBox" value="default value" />
     * </output>
     *
     * @api
     */
    class TextfieldViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the textfield.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

    /**
     * Textarea view helper.
     * The value of the text area needs to be set via the "value" attribute, as with all other form ViewHelpers.
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:form.textarea name="myTextArea" value="This is shown inside the textarea" />
     * </code>
     * <output>
     * <textarea name="myTextArea">This is shown inside the textarea</textarea>
     * </output>
     *
     * @api
     */
    class TextareaViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the textarea.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

    /**
     * View Helper which creates a simple radio button (<input type="radio">).
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:form.radio name="myRadioButton" value="someValue" />
     * </code>
     * <output>
     * <input type="radio" name="myRadioButton" value="someValue" />
     * </output>
     *
     * <code title="Preselect">
     * <f:form.radio name="myRadioButton" value="someValue" checked="{object.value} == 5" />
     * </code>
     * <output>
     * <input type="radio" name="myRadioButton" value="someValue" checked="checked" />
     * (depending on $object)
     * </output>
     *
     * <code title="Bind to object property">
     * <f:form.radio property="newsletter" value="1" /> yes
     * <f:form.radio property="newsletter" value="0" /> no
     * </code>
     * <output>
     * <input type="radio" name="user[newsletter]" value="1" checked="checked" /> yes
     * <input type="radio" name="user[newsletter]" value="0" /> no
     * (depending on property "newsletter")
     * </output>
     *
     * @api
     */
    class RadioViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the checkbox.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

    /**
     * This view helper generates a <select> dropdown list for the use with a form.
     *
     * = Basic usage =
     *
     * The most straightforward way is to supply an associative array as the "options" parameter.
     * The array key is used as option key, and the value is used as human-readable name.
     *
     * <code title="Basic usage">
     * <f:form.select name="paymentOptions" options="{payPal: 'PayPal International Services', visa: 'VISA Card'}" />
     * </code>
     *
     * = Pre-select a value =
     *
     * To pre-select a value, set "value" to the option key which should be selected.
     * <code title="Default value">
     * <f:form.select name="paymentOptions" options="{payPal: 'PayPal International Services', visa: 'VISA Card'}" value="visa" />
     * </code>
     * Generates a dropdown box like above, except that "VISA Card" is selected.
     *
     * If the select box is a multi-select box (multiple="1"), then "value" can be an array as well.
     *
     * = Custom options and option group rendering =
     *
     * Child nodes can be used to create a completely custom set of ``<option>`` and ``<optgroup>`` tags in a way compatible with
     * the HMAC generation. To do so, leave out the ``options`` argument and use child ViewHelpers:
     * <code title="Custom options and optgroup">
     * <f:form.select name="myproperty">
     *     <f:form.select.option value="1">Option one</f:form.select.option>
     *     <f:form.select.option value="2">Option two</f:form.select.option>
     *     <f:form.select.optgroup>
     *         <f:form.select.option value="3">Grouped option one</f:form.select.option>
     *         <f:form.select.option value="4">Grouped option twi</f:form.select.option>
     *     </f:form.select.optgroup>
     * </f:form.select>
     * </code>
     * Note: do not use vanilla ``<option>`` or ``<optgroup>`` tags! They will invalidate the HMAC generation!
     *
     * = Usage on domain objects =
     *
     * If you want to output domain objects, you can just pass them as array into the "options" parameter.
     * To define what domain object value should be used as option key, use the "optionValueField" variable. Same goes for optionLabelField.
     * If neither is given, the Identifier (UID/uid) and the __toString() method are tried as fallbacks.
     *
     * If the optionValueField variable is set, the getter named after that value is used to retrieve the option key.
     * If the optionLabelField variable is set, the getter named after that value is used to retrieve the option value.
     *
     * If the prependOptionLabel variable is set, an option item is added in first position, bearing an empty string or -
     * If provided, the value of the prependOptionValue variable as value.
     *
     * <code title="Domain objects">
     * <f:form.select name="users" options="{userArray}" optionValueField="id" optionLabelField="firstName" />
     * </code>
     * In the above example, the userArray is an array of "User" domain objects, with no array key specified.
     *
     * So, in the above example, the method $user->getId() is called to retrieve the key, and $user->getFirstName() to retrieve the displayed value of each entry.
     *
     * The "value" property now expects a domain object, and tests for object equivalence.
     *
     * @api
     */
    class SelectViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;
        /**
         * @var mixed
         */
        protected $selectedValue;

        /**
         * Initialize arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Render the tag.
         *
         * @return string rendered tag.
         * @api
         */
        public function render() {}
        /**
         * Render prepended option tag
         *
         * @return string rendered prepended empty option
         */
        protected function renderPrependOptionTag() {}
        protected function renderOptionTags($options) {}
        /**
         * Render the option tags.
         *
         * @return array an associative array of options, key will be the value of the option tag
         */
        protected function getOptions() {}
        protected function isSelected($value) {}
        /**
         * Retrieves the selected value(s)
         *
         * @return mixed value string or an array of strings
         */
        protected function getSelectedValue() {}
        protected function getOptionValueScalar($valueElement) {}
        protected function renderOptionTag($value, $label, $isSelected) {}
    }

    /**
     * Renders an <input type="hidden" ...> tag.
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:form.hidden name="myHiddenValue" value="42" />
     * </code>
     * <output>
     * <input type="hidden" name="myHiddenValue" value="42" />
     * </output>
     *
     * You can also use the "property" attribute if you have bound an object to the form.
     * See <f:form> for more documentation.
     *
     * @api
     */
    class HiddenViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize the arguments.
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Renders the hidden field.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Form\Select {
    /**
     * Adds custom `<optgroup>` tags inside an `<f:form.select>`,
     * supports further child `<f:form.select.option>` tags.
     *
     * @api
     */
    class OptgroupViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize additional arguments available for this tag view helper.
         */
        public function initializeArguments() {}
        /**
         * @return string
         */
        public function render() {}
    }

    /**
     * Adds custom `<option>` tags inside an `<f:form.select>`
     *
     * @api
     */
    class OptionViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformfieldviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize additional arguments available for this tag view helper.
         */
        public function initializeArguments() {}
        /**
         * @return string
         */
        public function render() {}
        protected function isValueSelected($value) {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Widget {
    /**
     * This ViewHelper renders a Pagination of objects.
     *
     * = Examples =
     *
     * <code title="required arguments">
     * <f:widget.paginate objects="{blogs}" as="paginatedBlogs">
     * use {paginatedBlogs} as you used {blogs} before, most certainly inside
     * a <f:for> loop.
     * </f:widget.paginate>
     * </code>
     *
     * <code title="full configuration">
     * <f:widget.paginate objects="{blogs}" as="paginatedBlogs" configuration="{itemsPerPage: 5, insertAbove: 1, insertBelow: 0, maximumNumberOfLinks: 10}">
     * use {paginatedBlogs} as you used {blogs} before, most certainly inside
     * a <f:for> loop.
     * </f:widget.paginate>
     * </code>
     *
     * = Performance characteristics =
     *
     * In the above examples, it looks like {blogs} contains all Blog objects, thus
     * you might wonder if all objects were fetched from the database.
     * However, the blogs are NOT fetched from the database until you actually use them,
     * so the paginate ViewHelper will adjust the query sent to the database and receive
     * only the small subset of objects.
     * So, there is no negative performance overhead in using the Paginate Widget.
     *
     * @api
     */
    class PaginateViewHelper extends \typo3\cms\fluid\core\widget\abstractwidgetviewhelper {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Widget\Controller\PaginateController
         */
        protected $controller;

        public function injectPaginateController(\TYPO3\CMS\Fluid\ViewHelpers\Widget\Controller\PaginateController $controller) {}
        /**
         * Initialize arguments.
         *
         * @api
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * @return string
         * @throws \UnexpectedValueException
         */
        public function render() {}
    }

    /**
     * A view helper for creating Links to extbase actions within widets.
     *
     * = Examples =
     *
     * <code title="URI to the show-action of the current controller">
     * <f:widget.link action="show">link</f:widget.link>
     * </code>
     * <output>
     * <a href="index.php?id=123&tx_myextension_plugin[widgetIdentifier][action]=show&tx_myextension_plugin[widgetIdentifier][controller]=Standard&cHash=xyz">link</a>
     * (depending on the current page, widget and your TS configuration)
     * </output>
     *
     * @api
     */
    class LinkViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * Render the link.
         *
         * @return string The rendered link
         * @api
         */
        public function render() {}
        /**
         * Get the URI for an AJAX Request.
         *
         * @return string the AJAX URI
         */
        protected function getAjaxUri() {}
        /**
         * Get the URI for a non-AJAX Request.
         *
         * @return string the Widget URI
         */
        protected function getWidgetUri() {}
    }

    /**
     * Simple paginate widget
     * Note: Make sure to include jQuery and jQuery UI in the HTML, like that:
     * <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
     * <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.4/jquery-ui.min.js"></script>
     * <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.3/themes/base/jquery-ui.css" type="text/css" media="all" />
     * <link rel="stylesheet" href="http://static.jquery.com/ui/css/demo-docs-theme/ui.theme.css" type="text/css" media="all" />
     * You can include the provided TS template that includes the above snippet to the pages headerData.
     *
     * = Examples =
     *
     * <code title="Render lib object">
     * <input type="text" id="name" />
     * <f:widget.autocomplete for="name" objects="{posts}" searchProperty="author">
     * </code>
     * <output>
     * <input type="text" id="name" />
     * the input field and the required JavaScript for the Ajax communication (see Resources/Private/Templates/ViewHelpers/Widget/Autocomplete/Index.html
     * </output>
     *
     * @api
     */
    class AutocompleteViewHelper extends \typo3\cms\fluid\core\widget\abstractwidgetviewhelper {
        /**
         * @var bool
         */
        protected $ajaxWidget;
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Widget\Controller\AutocompleteController
         */
        protected $controller;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public function injectAutocompleteController(\TYPO3\CMS\Fluid\ViewHelpers\Widget\Controller\AutocompleteController $controller) {}
        /**
         * @return string
         */
        public function render() {}
    }

    /**
     * A view helper for creating URIs to extbase actions within widgets.
     *
     * = Examples =
     *
     * <code title="URI to the show-action of the current controller">
     * <f:widget.uri action="show" />
     * </code>
     * <output>
     * index.php?id=123&tx_myextension_plugin[widgetIdentifier][action]=show&tx_myextension_plugin[widgetIdentifier][controller]=Standard&cHash=xyz
     * (depending on the current page, widget and your TS configuration)
     * </output>
     *
     * @api
     */
    class UriViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        protected static function getAjaxUri(RenderingContextInterface $renderingContext, array $arguments) {}
        protected static function getWidgetUri(RenderingContextInterface $renderingContext, array $arguments) {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Widget\Controller {
    /**
     * Class AutocompleteController
     */
    class AutocompleteController extends \typo3\cms\fluid\core\widget\abstractwidgetcontroller {
        /**
         * Simply assigns the ID of the widget.
         */
        public function indexAction() {}
        public function autocompleteAction($term) {}
    }

    /**
     * Class PaginateController
     */
    class PaginateController extends \typo3\cms\fluid\core\widget\abstractwidgetcontroller {
        /**
         * @var array
         */
        protected $configuration;
        /**
         * @var QueryResultInterface|ObjectStorage|array
         */
        protected $objects;
        /**
         * @var int
         */
        protected $currentPage;
        /**
         * @var int
         */
        protected $maximumNumberOfLinks;
        /**
         * @var int
         */
        protected $numberOfPages;
        /**
         * @var int
         */
        protected $displayRangeStart;
        /**
         * @var int
         */
        protected $displayRangeEnd;

        /**
         * Initializes the current information on which page the visitor is.
         */
        public function initializeAction() {}
        public function indexAction($currentPage = 1) {}
        /**
         * If a certain number of links should be displayed, adjust before and after
         * amounts accordingly.
         */
        protected function calculateDisplayRange() {}
        /**
         * Returns an array with the keys "pages", "current", "numberOfPages",
         * "nextPage" & "previousPage"
         *
         * @return array
         */
        protected function buildPagination() {}
        protected function prepareObjectsSlice($itemsPerPage, $offset) {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Be {
    /**
     * View helper which allows you to create extbase based modules in the style of TYPO3 default modules.
     *
     * = Examples =
     *
     * <code title="All options">
     * <f:be.pageRenderer pageTitle="foo" includeCssFiles="0: '{f:uri.resource(path:\'Css/Styles.css\')}'" includeJsFiles="0: '{f:uri.resource(path:\'JavaScript/Library1.js\')}', 1: '{f:uri.resource(path:\'JavaScript/Library2.js\')}'" addJsInlineLabels="{0: 'label1', 1: 'label2'}" />
     * </code>
     * <output>
     *
     * Custom CSS file EXT:your_extension/Resources/Public/Css/styles.css and
     * JavaScript files EXT:your_extension/Resources/Public/JavaScript/Library1.js and EXT:your_extension/Resources/Public/JavaScript/Library2.js
     * will be loaded, plus some inline labels for usage in JS code.
     * </output>
     */
    class PageRendererViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        /**
         * @return PageRenderer
         */
        protected static function getPageRenderer() {}
    }

    /**
     * View helper which allows you to create extbase based modules in the style of TYPO3 default modules.
     *
     * = Examples =
     *
     * <code title="Simple">
     * <f:be.container>your module content</f:be.container>
     * </code>
     * <output>
     * "your module content" wrapped with proper head & body tags.
     * Default backend CSS styles and JavaScript will be included
     * </output>
     *
     * <code title="All options">
     * <f:be.container pageTitle="foo" includeCssFiles="{0: '{f:uri.resource(path:\'Css/Styles.css\')}'}" includeJsFiles="{0: '{f:uri.resource(path:\'JavaScript/Library1.js\')}', 1: '{f:uri.resource(path:\'JavaScript/Library2.js\')}'}" addJsInlineLabels="{0: 'label1', 1: 'label2'}">your module content</f:be.container>
     * </code>
     * <output>
     * "your module content" wrapped with proper head & body tags.
     * Custom CSS file EXT:your_extension/Resources/Public/Css/styles.css and
     * JavaScript files EXT:your_extension/Resources/Public/JavaScript/Library1.js and EXT:your_extension/Resources/Public/JavaScript/Library2.js
     * will be loaded, plus some inline labels for usage in JS code.
     * </output>
     */
    class ContainerViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * Render start page with \TYPO3\CMS\Backend\Template\DocumentTemplate and pageTitle
         *
         * @return string
         * @see \TYPO3\CMS\Backend\Template\DocumentTemplate
         * @see \TYPO3\CMS\Core\Page\PageRenderer
         */
        public function render() {}
    }

    /**
     * The abstract base class for all backend view helpers
     * Note: backend view helpers are still experimental!
     */
    abstract class AbstractBackendViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
        /**
         * Gets instance of template if exists or create a new one.
         * Saves instance in viewHelperVariableContainer
         *
         * @return DocumentTemplate $doc
         */
        public function getDocInstance() {}
        /**
         * Gets instance of PageRenderer if exists or create a new one.
         * Saves instance in viewHelperVariableContainer
         *
         * @return PageRenderer
         */
        public function getPageRenderer() {}
    }

    /**
     * View helper which returns the current page path as known from TYPO3 backend modules
     * Note: This view helper is experimental!
     *
     * = Examples =
     *
     * <code>
     * <f:be.pagePath />
     * </code>
     * <output>
     * Current page path, prefixed with "Path:" and wrapped in a span with the class "typo3-docheader-pagePath"
     * </output>
     */
    class PagePathViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * This view helper renders HTML, thus output must not be escaped
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Renders the current page path
         *
         * @return string the rendered page path
         * @see \TYPO3\CMS\Backend\Template\DocumentTemplate::getPagePath() Note: can't call this method as it's protected!
         */
        public function render() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * View helper for rendering a styled content infobox markup.
     *
     * = States =
     *
     * The Infobox provides different context sensitive states that
     * can be used to provide an additional visual feedback to the
     * to the user to underline the meaning of the information.
     *
     * Possible values are in range from -2 to 2. Please choose a
     * meaningful value from the following list.
     *
     * -2: Notices (Default)
     * -1: Information
     * 0: Positive feedback
     * 1: Warnings
     * 2: Error
     *
     * = Examples =
     *
     * <code title="Simple">
     * <f:be.infobox title="Message title">your box content</f:be.infobox>
     * </code>
     *
     * <code title="All options">
     * <f:be.infobox title="Message title" message="your box content" state="-2" iconName="check" disableIcon="true" />
     * </code>
     */
    class InfoboxViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        const STATE_WARNING = 1;
        const STATE_OK = 0;
        const STATE_ERROR = 2;
        const STATE_INFO = -1;
        const STATE_NOTICE = -2;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * A view helper for creating URIs to modules.
     * = Examples =
     * <code title="URI to the web_ts module on page 92">
     * <f:be.link route="web_ts" parameters="{id: 92}">Go to web_ts</f:be.link>
     * </code>
     * <output>
     * <a href="/typo3/index.php?route=%2module%2web_ts%2&moduleToken=b6e9c9f?id=92">Go to web_ts</a>
     * </output>
     */
    class LinkViewHelper extends \typo3fluid\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Arguments initialization
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * @return string Rendered link
         */
        public function render() {}
    }

    /**
     * A view helper for creating URIs to modules.
     * = Examples =
     * <code title="URI to the web_ts module on page 92">
     * <f:be.uri route="web_ts" parameters="{id: 92}"/>
     * </code>
     * <output>
     * /typo3/index.php?M=web_ts&moduleToken=b6e9c9f?id=92
     * </output>
     *
     *  <code title="Inline notation">
     * {f:be.uri(route: 'web_ts', parameters: '{id: 92}')}
     * </code>
     * <output>
     * /typo3/index.php?route=%2module%2web_ts%2&moduleToken=b6e9c9f?id=92
     * </output>
     */
    class UriViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * Arguments initialization
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * @return string Rendered link
         */
        public function render() {}
    }

    /**
     * View helper which return page info icon as known from TYPO3 backend modules
     * Note: This view helper is experimental!
     *
     * = Examples =
     *
     * <code>
     * <f:be.pageInfo />
     * </code>
     * <output>
     * Page info icon with context menu
     * </output>
     */
    class PageInfoViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * This view helper renders HTML, thus output must not be escaped
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Render javascript in header
         *
         * @return string the rendered page info icon
         * @see \TYPO3\CMS\Backend\Template\DocumentTemplate::getPageInfo() Note: can't call this method as it's protected!
         */
        public function render() {}
/** @var IconFactory $iconFactory */
        public static function renderStatic(/** @var IconFactory $iconFactory */
array $arguments, /** @var IconFactory $iconFactory */
\Closure $renderChildrenClosure, /** @var IconFactory $iconFactory */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * View helper which renders a record list as known from the TYPO3 list module
     * Note: This feature is experimental!
     *
     * = Examples =
     *
     * <code title="Minimal">
     * <f:be.tableList tableName="fe_users" />
     * </code>
     * <output>
     * List of all "Website user" records stored in the configured storage PID.
     * Records will be editable, if the current BE user has got edit rights for the table "fe_users".
     * Only the title column (username) will be shown.
     * Context menu is active.
     * </output>
     *
     * <code title="Full">
     * <f:be.tableList tableName="fe_users" fieldList="{0: 'name', 1: 'email'}" storagePid="1" levels="2" filter='foo' recordsPerPage="10" sortField="name" sortDescending="true" readOnly="true" enableClickMenu="false" clickTitleMode="info" />
     * </code>
     * <output>
     * List of "Website user" records with a text property of "foo" stored on PID 1 and two levels down.
     * Clicking on a username will open the TYPO3 info popup for the respective record
     * </output>
     */
    class TableListViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $configurationManager;

        public function injectConfigurationManager(\TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface $configurationManager) {}
        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /** @var $dblist \TYPO3\CMS\Recordlist\RecordList\DatabaseRecordList */
        public function render() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons {
    /**
     * View helper which returns shortcut button with icon
     * Note: This view helper is experimental!
     *
     * = Examples =
     *
     * <code title="Default">
     * <f:be.buttons.shortcut />
     * </code>
     * <output>
     * Shortcut button as known from the TYPO3 backend.
     * By default the current page id, module name and all module arguments will be stored
     * </output>
     *
     * <code title="Explicitly set parameters to be stored in the shortcut">
     * <f:be.buttons.shortcut getVars="{0: 'route', 1: 'myOwnPrefix'}" setVars="{0: 'function'}" />
     * </code>
     * <output>
     * Shortcut button as known from the TYPO3 backend.
     * This time only the specified GET parameters and SET[]-settings will be stored.
     * Note:
     * Normally you won't need to set getVars & setVars parameters in Extbase modules
     * </output>
     */
    class ShortcutViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * Renders a shortcut button as known from the TYPO3 backend
         *
         * @return string the rendered shortcut button
         * @see \TYPO3\CMS\Backend\Template\DocumentTemplate::makeShortcutIcon()
         */
        public function render() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * View helper which returns CSH (context sensitive help) button with icon
     * Note: The CSH button will only work, if the current BE user has the "Context Sensitive Help mode"
     * set to something else than "Display no help information" in the Users settings
     * Note: This view helper is experimental!
     *
     * = Examples =
     *
     * <code title="Default">
     * <f:be.buttons.csh />
     * </code>
     * <output>
     * CSH button as known from the TYPO3 backend.
     * </output>
     *
     * <code title="Full configuration">
     * <f:be.buttons.csh table="xMOD_csh_corebe" field="someCshKey" />
     * </code>
     * <output>
     * CSH button as known from the TYPO3 backend with some custom settings.
     * </output>
     */
    class CshViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * Render context sensitive help (CSH) for the given table
         *
         * @return string the rendered CSH icon
         */
        public function render() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Be\Widget {
    /**
     * This ViewHelper renders a Pagination of objects for the TYPO3 Backend.
     *
     * = Examples =
     *
     * <code title="required arguments">
     * <f:be.widget.paginate objects="{blogs}" as="paginatedBlogs">
     * use {paginatedBlogs} as you used {blogs} before, most certainly inside
     * a <f:for> loop.
     * </f:be.widget.paginate>
     * </code>
     *
     * <code title="full configuration">
     * <f:be.widget.paginate objects="{blogs}" as="paginatedBlogs" configuration="{itemsPerPage: 5, insertAbove: 1, insertBelow: 0, recordsLabel: 'MyRecords'}">
     * use {paginatedBlogs} as you used {blogs} before, most certainly inside
     * a <f:for> loop.
     * </f:be.widget.paginate>
     * The recordsLabel can be used to replace the text in "Records 1 - 99" with a label of your own choice
     * </code>
     *
     * = Performance characteristics =
     *
     * In the above examples, it looks like {blogs} contains all Blog objects, thus
     * you might wonder if all objects were fetched from the database.
     * However, the blogs are NOT fetched from the database until you actually use them,
     * so the paginate ViewHelper will adjust the query sent to the database and receive
     * only the small subset of objects.
     * So, there is no negative performance overhead in using the Be Paginate Widget.
     *
     * @api
     */
    class PaginateViewHelper extends \typo3\cms\fluid\core\widget\abstractwidgetviewhelper {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Be\Widget\Controller\PaginateController
         */
        protected $controller;

        public function injectPaginateController(\TYPO3\CMS\Fluid\ViewHelpers\Be\Widget\Controller\PaginateController $controller) {}
        /**
         * Initialize arguments.
         */
        public function initializeArguments() {}
        /**
         * @throws Exception
         * @return string
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Be\Widget\Controller {
    /**
     * Class PaginateController
     */
    class PaginateController extends \typo3\cms\fluid\core\widget\abstractwidgetcontroller {
        /**
         * @var array
         */
        protected $configuration;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\QueryResultInterface
         */
        protected $objects;
        /**
         * @var int
         */
        protected $currentPage;
        /**
         * @var int
         */
        protected $numberOfPages;
        /**
         * @var int
         */
        protected $offset;
        /**
         * @var int
         */
        protected $itemsPerPage;
        /**
         * @var int
         */
        protected $numberOfObjects;

        /**
         * Initializes necessary variables for all actions.
         */
        public function initializeAction() {}
        public function indexAction($currentPage = 1) {}
        /**
         * Returns an array with the keys "current", "numberOfPages", "nextPage", "previousPage", "startRecord", "endRecord"
         *
         * @return array
         */
        protected function buildPagination() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Be\Security {
    /**
     * This view helper implements an ifHasRole/else condition for BE users/groups.
     *
     * = Examples =
     *
     * <code title="Basic usage">
     * <f:be.security.ifHasRole role="Administrator">
     * This is being shown in case the current BE user belongs to a BE usergroup (aka role) titled "Administrator" (case sensitive)
     * </f:be.security.ifHasRole>
     * </code>
     * <output>
     * Everything inside the <f:ifHasRole> tag is being displayed if the logged in BE user belongs to the specified role.
     * </output>
     *
     * <code title="Using the usergroup uid as role identifier">
     * <f:be.security.ifHasRole role="1">
     * This is being shown in case the current BE user belongs to a BE usergroup (aka role) with the uid "1"
     * </f:be.security.ifHasRole>
     * </code>
     * <output>
     * Everything inside the <f:ifHasRole> tag is being displayed if the logged in BE user belongs to the specified role.
     * </output>
     *
     * <code title="IfRole / then / else">
     * <f:be.security.ifHasRole role="Administrator">
     * <f:then>
     * This is being shown in case you have the role.
     * </f:then>
     * <f:else>
     * This is being displayed in case you do not have the role.
     * </f:else>
     * </f:be.security.ifHasRole>
     * </code>
     * <output>
     * Everything inside the "then" tag is displayed if the logged in BE user belongs to the specified role.
     * Otherwise, everything inside the "else"-tag is displayed.
     * </output>
     *
     * @api
     */
    class IfHasRoleViewHelper extends \typo3\cms\fluid\core\viewhelper\abstractconditionviewhelper {
        /**
         * Initializes the "role" argument.
         * Renders <f:then> child if the current logged in BE user belongs to the specified role (aka usergroup)
         * otherwise renders <f:else> child.
         */
        public function initializeArguments() {}
        protected static function evaluateCondition($arguments = null) {}
        /**
         * @return mixed
         */
        public function render() {}
    }

    /**
     * This view helper implements an ifAuthenticated/else condition for BE users/groups.
     *
     * = Examples =
     *
     * <code title="Basic usage">
     * <f:be.security.ifAuthenticated>
     * This is being shown whenever a BE user is logged in
     * </f:be.security.ifAuthenticated>
     * </code>
     * <output>
     * Everything inside the <f:be.ifAuthenticated> tag is being displayed if you are authenticated with any BE user account.
     * </output>
     *
     * <code title="IfAuthenticated / then / else">
     * <f:be.security.ifAuthenticated>
     * <f:then>
     * This is being shown in case you have access.
     * </f:then>
     * <f:else>
     * This is being displayed in case you do not have access.
     * </f:else>
     * </f:be.security.ifAuthenticated>
     * </code>
     * <output>
     * Everything inside the "then" tag is displayed if you have access.
     * Otherwise, everything inside the "else"-tag is displayed.
     * </output>
     *
     * @api
     */
    class IfAuthenticatedViewHelper extends \typo3\cms\fluid\core\viewhelper\abstractconditionviewhelper {
        protected static function evaluateCondition($arguments = null) {}
        /**
         * @return mixed
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Be\Labels {
    /**
     * View helper which returns CSH (context sensitive help) label with icon hover
     * Note: The CSH label will only work, if the current BE user has the "Context Sensitive Help mode"
     * set to something else than "Display no help information" in the Users settings
     * Note: This view helper is experimental!
     *
     * = Examples =
     *
     * <code title="Default">
     * <f:be.labels.csh />
     * </code>
     * <output>
     * CSH label as known from the TYPO3 backend.
     * </output>
     *
     * <code title="Full configuration">
     * <f:be.labels.csh table="xMOD_csh_corebe" field="someCshKey" label="lang/Resources/Private/Language/locallang/header.languages" />
     * </code>
     * <output>
     * CSH label as known from the TYPO3 backend with some custom settings.
     * </output>
     */
    class CshViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Returns the Language Service
         * @return LanguageService
         */
        protected static function getLanguageService() {}
        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * Render context sensitive help (CSH) for the given table
         *
         * @return string the rendered CSH icon
         */
        public function render() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Be\Menus {
    /**
     * View helper which returns a select box, that can be used to switch between
     * multiple actions and controllers and looks similar to TYPO3s funcMenu.
     * Note: This view helper is experimental!
     *
     * = Examples =
     *
     * <code title="Simple">
     * <f:be.menus.actionMenu>
     * <f:be.menus.actionMenuItem label="Overview" controller="Blog" action="index" />
     * <f:be.menus.actionMenuItem label="Create new Blog" controller="Blog" action="new" />
     * <f:be.menus.actionMenuItem label="List Posts" controller="Post" action="index" arguments="{blog: blog}" />
     * </f:be.menus.actionMenu>
     * </code>
     * <output>
     * Selectbox with the options "Overview", "Create new Blog" and "List Posts"
     * </output>
     *
     * <code title="Localized">
     * <f:be.menus.actionMenu>
     * <f:be.menus.actionMenuItem label="{f:translate(key:'overview')}" controller="Blog" action="index" />
     * <f:be.menus.actionMenuItem label="{f:translate(key:'create_blog')}" controller="Blog" action="new" />
     * </f:be.menus.actionMenu>
     * </code>
     * <output>
     * localized selectbox
     * <output>
     */
    class ActionMenuViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;
        /**
         * An array of \TYPO3\CMS\Fluid\Core\Parser\SyntaxTree\AbstractNode
         *
         * @var array
         */
        protected $childNodes;

        public function setChildNodes(array $childNodes) {}
        /**
         * Initialize arguments.
         *
         * @api
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * Render FunctionMenu
         *
         * @return string
         */
        public function render() {}
        public function compile($argumentsName, $closureName, $initializationPhpCode, ViewHelperNode $node, TemplateCompiler $compiler) {}
    }

    /**
     * View helper which returns an option tag.
     * This view helper only works in conjunction with \TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuViewHelper
     * Note: This view helper is experimental!
     *
     * = Examples =
     *
     * <code title="Simple">
     * <f:be.menus.actionMenu>
     * <f:be.menus.actionMenuItem label="Overview" controller="Blog" action="index" />
     * <f:be.menus.actionMenuItem label="Create new Blog" controller="Blog" action="new" />
     * <f:be.menus.actionMenuItem label="List Posts" controller="Post" action="index" arguments="{blog: blog}" />
     * </f:be.menus.actionMenu>
     * </code>
     * <output>
     * Selectbox with the options "Overview", "Create new Blog" and "List Posts"
     * </output>
     *
     * <code title="Localized">
     * <f:be.menus.actionMenu>
     * <f:be.menus.actionMenuItem label="{f:translate(key='overview')}" controller="Blog" action="index" />
     * <f:be.menus.actionMenuItem label="{f:translate(key='create_blog')}" controller="Blog" action="new" />
     * </f:be.menus.actionMenu>
     * </code>
     * <output>
     * localized selectbox
     * <output>
     */
    class ActionMenuItemViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * Renders an ActionMenu option tag
         *
         * @return string the rendered option tag
         * @see \TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuViewHelper
         */
        public function render() {}
    }

    /**
     * View helper which groups options of an option tag.
     *
     * = Example =
     *
     * 	<f:be.menus.actionMenu>
     *		<f:be.menus.actionMenuItem label="Default: Welcome" controller="Default" action="index" />
     *		<f:be.menus.actionMenuItem label="Community: get in touch" controller="Community" action="index" />
     *
     *		<f:be.menus.actionMenuItemGroup label="Information">
     *			<f:be.menus.actionMenuItem label="PHP Information" controller="Information" action="listPhpInfo" />
     *			<f:be.menus.actionMenuItem label="Documentation" controller="Information" action="documentation" />
     *			<f:be.menus.actionMenuItem label="Hooks" controller="Information" action="hooks" />
     *			<f:be.menus.actionMenuItem label="Signals" controller="Information" action="signals" />
     *			<f:be.menus.actionMenuItem label="XClasses" controller="Information" action="xclass" />
     *		</f:be.menus.actionMenuItemGroup>
     *	</f:be.menus.actionMenu>
     */
    class ActionMenuItemGroupViewHelper extends \typo3\cms\fluid\viewhelpers\be\menus\actionmenuviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize arguments.
         *
         * @api
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * @return string
         */
        public function render() {}
        public function compile($argumentsName, $closureName, $initializationPhpCode, ViewHelperNode $node, TemplateCompiler $compiler) {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Security {
    /**
     * This view helper implements an ifHasRole/else condition for FE users/groups.
     *
     * = Examples =
     *
     * <code title="Basic usage">
     * <f:security.ifHasRole role="Administrator">
     * This is being shown in case the current FE user belongs to a FE usergroup (aka role) titled "Administrator" (case sensitive)
     * </f:security.ifHasRole>
     * </code>
     * <output>
     * Everything inside the <f:ifHasRole> tag is being displayed if the logged in FE user belongs to the specified role.
     * </output>
     *
     * <code title="Using the usergroup uid as role identifier">
     * <f:security.ifHasRole role="1">
     * This is being shown in case the current FE user belongs to a FE usergroup (aka role) with the uid "1"
     * </f:security.ifHasRole>
     * </code>
     * <output>
     * Everything inside the <f:ifHasRole> tag is being displayed if the logged in FE user belongs to the specified role.
     * </output>
     *
     * <code title="IfRole / then / else">
     * <f:security.ifHasRole role="Administrator">
     * <f:then>
     * This is being shown in case you have the role.
     * </f:then>
     * <f:else>
     * This is being displayed in case you do not have the role.
     * </f:else>
     * </f:security.ifHasRole>
     * </code>
     * <output>
     * Everything inside the "then" tag is displayed if the logged in FE user belongs to the specified role.
     * Otherwise, everything inside the "else"-tag is displayed.
     * </output>
     *
     * @api
     */
    class IfHasRoleViewHelper extends \typo3\cms\fluid\core\viewhelper\abstractconditionviewhelper {
        /**
         * Initializes the "role" argument.
         * Renders <f:then> child if the current logged in FE user belongs to the specified role (aka usergroup)
         * otherwise renders <f:else> child.
         */
        public function initializeArguments() {}
        protected static function evaluateCondition($arguments = null) {}
        /**
         * @return mixed
         */
        public function render() {}
    }

    /**
     * This view helper implements an ifAuthenticated/else condition for FE users/groups.
     *
     * = Examples =
     *
     * <code title="Basic usage">
     * <f:security.ifAuthenticated>
     * This is being shown whenever a FE user is logged in
     * </f:security.ifAuthenticated>
     * </code>
     * <output>
     * Everything inside the <f:ifAuthenticated> tag is being displayed if you are authenticated with any FE user account.
     * </output>
     *
     * <code title="IfAuthenticated / then / else">
     * <f:security.ifAuthenticated>
     * <f:then>
     * This is being shown in case you have access.
     * </f:then>
     * <f:else>
     * This is being displayed in case you do not have access.
     * </f:else>
     * </f:security.ifAuthenticated>
     * </code>
     * <output>
     * Everything inside the "then" tag is displayed if you have access.
     * Otherwise, everything inside the "else"-tag is displayed.
     * </output>
     *
     * @api
     */
    class IfAuthenticatedViewHelper extends \typo3\cms\fluid\core\viewhelper\abstractconditionviewhelper {
        protected static function evaluateCondition($arguments = null) {}
        /**
         * @return mixed
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Link {
    /**
     * A ViewHelper to create links from fields supported by the link wizard
     *
     * == Example ==
     *
     * {link} contains "19 _blank - "testtitle with whitespace" &X=y"
     *
     * <code title="minimal usage">
     * <f:link.typolink parameter="{link}">
     * Linktext
     * </f:link.typolink>
     * <output>
     * <a href="index.php?id=19&X=y" title="testtitle with whitespace" target="_blank">
     * Linktext
     * </a>
     * </output>
     * </code>
     *
     * <code title="Full parameter usage">
     * <f:link.typolink parameter="{link}" target="_blank" class="ico-class" title="some title" additionalParams="&u=b" additionalAttributes="{type:'button'}" useCacheHash="true">
     * Linktext
     * </f:link.typolink>
     * </code>
     * <output>
     * <a href="index.php?id=19&X=y&u=b" title="some title" target="_blank" class="ico-class" type="button">
     * Linktext
     * </a>
     * </output>
     */
    class TypolinkViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize ViewHelper arguments
         *
         * @throws Exception
         */
        public function initializeArguments() {}
/** @var ContentObjectRenderer $contentObject */
        public static function renderStatic(/** @var ContentObjectRenderer $contentObject */
array $arguments, /** @var ContentObjectRenderer $contentObject */
\Closure $renderChildrenClosure, /** @var ContentObjectRenderer $contentObject */
RenderingContextInterface $renderingContext) {}
        protected static function createTypolinkParameterArrayFromArguments($parameter, $target = '', $class = '', $title = '', $additionalParams = '') {}
    }

    /**
     * A view helper for creating links to TYPO3 pages.
     *
     * = Examples =
     *
     * <code title="link to the current page">
     * <f:link.page>page link</f:link.page>
     * </code>
     * <output>
     * <a href="index.php?id=123">page link</f:link.action>
     * (depending on the current page and your TS configuration)
     * </output>
     *
     * <code title="query parameters">
     * <f:link.page pageUid="1" additionalParams="{foo: 'bar'}">page link</f:link.page>
     * </code>
     * <output>
     * <a href="index.php?id=1&foo=bar">page link</f:link.action>
     * (depending on your TS configuration)
     * </output>
     *
     * <code title="query parameters for extensions">
     * <f:link.page pageUid="1" additionalParams="{extension_key: {foo: 'bar'}}">page link</f:link.page>
     * </code>
     * <output>
     * <a href="index.php?id=1&extension_key[foo]=bar">page link</f:link.action>
     * (depending on your TS configuration)
     * </output>
     */
    class PageViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Arguments initialization
         */
        public function initializeArguments() {}
        /**
         * @return string Rendered page URI
         */
        public function render() {}
    }

    /**
     * Email link view helper.
     * Generates an email link incorporating TYPO3s spamProtectEmailAddresses-settings.
     *
     * = Examples
     *
     * <code title="basic email link">
     * <f:link.email email="foo@bar.tld" />
     * </code>
     * <output>
     * <a href="javascript:linkTo_UnCryptMailto('ocknvq,hqqBdct0vnf');">foo(at)bar.tld</a>
     * (depending on your spamProtectEmailAddresses-settings)
     * </output>
     *
     * <code title="Email link with custom linktext">
     * <f:link.email email="foo@bar.tld">some custom content</f:link.email>
     * </code>
     * <output>
     * <a href="javascript:linkTo_UnCryptMailto('ocknvq,hqqBdct0vnf');">some custom content</a>
     * </output>
     */
    class EmailViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Arguments initialization
         */
        public function initializeArguments() {}
        /**
         * @return string Rendered email link
         */
        public function render() {}
        /**
         * @return bool
         */
        protected function isFrontendAvailable() {}
    }

    /**
     * A view helper for creating links to extbase actions.
     *
     * = Examples =
     *
     * <code title="link to the show-action of the current controller">
     * <f:link.action action="show">action link</f:link.action>
     * </code>
     * <output>
     * <a href="index.php?id=123&tx_myextension_plugin[action]=show&tx_myextension_plugin[controller]=Standard&cHash=xyz">action link</f:link.action>
     * (depending on the current page and your TS configuration)
     * </output>
     */
    class ActionViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Arguments initialization
         */
        public function initializeArguments() {}
        /**
         * @return string Rendered link
         */
        public function render() {}
    }

    /**
     * A view helper for creating links to external targets.
     *
     * = Examples =
     *
     * <code>
     * <f:link.external uri="http://www.typo3.org" target="_blank">external link</f:link.external>
     * </code>
     * <output>
     * <a href="http://www.typo3.org" target="_blank">external link</a>
     * </output>
     *
     * <code title="custom default scheme">
     * <f:link.external uri="typo3.org" defaultScheme="ftp">external ftp link</f:link.external>
     * </code>
     * <output>
     * <a href="ftp://typo3.org">external ftp link</a>
     * </output>
     *
     * @api
     */
    class ExternalViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        /**
         * @return string Rendered link
         * @api
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Format {
    /**
     * Applies htmlentities() escaping to a value
     * @see http://www.php.net/manual/function.htmlentities.php
     *
     * = Examples =
     *
     * <code title="default notation">
     * <f:format.htmlentities>{text}</f:format.htmlentities>
     * </code>
     * <output>
     * Text with & " ' < > * replaced by HTML entities (htmlentities applied).
     * </output>
     *
     * <code title="inline notation">
     * {text -> f:format.htmlentities(encoding: 'ISO-8859-1')}
     * </code>
     * <output>
     * Text with & " ' < > * replaced by HTML entities (htmlentities applied).
     * </output>
     *
     * @api
     */
    class HtmlentitiesViewHelper extends \typo3\cms\fluid\viewhelpers\format\abstractencodingviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * Output gets encoded by this viewhelper
         *
         * @var bool
         */
        protected $escapeOutput;
        /**
         * This prevents double encoding as the whole output gets encoded at the end
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize ViewHelper arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Modifies the case of an input string to upper- or lowercase or capitalization.
     * The default transformation will be uppercase as in ``mb_convert_case`` [1].
     *
     * Possible modes are:
     *
     * ``lower``
     *   Transforms the input string to its lowercase representation
     *
     * ``upper``
     *   Transforms the input string to its uppercase representation
     *
     * ``capital``
     *   Transforms the input string to its first letter upper-cased, i.e. capitalization
     *
     * ``uncapital``
     *   Transforms the input string to its first letter lower-cased, i.e. uncapitalization
     *
     * ``capitalWords``
     *   Not supported yet: Transforms the input string to each containing word being capitalized
     *
     * Note that the behavior will be the same as in the appropriate PHP function ``mb_convert_case`` [1];
     * especially regarding locale and multibyte behavior.
     *
     * @see http://php.net/manual/function.mb-convert-case.php [1]
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:format.case>Some Text with miXed case</f:format.case>
     * </code>
     * <output>
     * SOME TEXT WITH MIXED CASE
     * </output>
     *
     * <code title="Example with given mode">
     * <f:format.case mode="capital">someString</f:format.case>
     * </code>
     * <output>
     * SomeString
     * </output>
     *
     * @api
     */
    class CaseViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        const CASE_CAPITAL_WORDS = 'capitalWords';
        const CASE_UNCAPITAL = 'uncapital';
        const CASE_CAPITAL = 'capital';
        const CASE_UPPER = 'upper';
        const CASE_LOWER = 'lower';

        /**
         * Output is escaped already. We must not escape children, to avoid double encoding.
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize ViewHelper arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * This is the base class for ViewHelpers that work with encodings.
     * Currently that are format.htmlentities, format.htmlentitiesDecode and format.htmlspecialchars
     */
    abstract class AbstractEncodingViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
        /**
         * @var string
         */
        static protected $defaultEncoding;

        /**
         * Resolve the default encoding. If none is set in Frontend or Backend, uses UTF-8.
         *
         * @return string the encoding
         */
        protected static function resolveDefaultEncoding() {}
    }

    /**
     * Formats an integer with a byte count into human-readable form.
     *
     * = Examples =
     *
     * <code title="Defaults">
     * {fileSize -> f:format.bytes()}
     * </code>
     * <output>
     * 123 KB
     * // depending on the value of {fileSize}
     * </output>
     *
     * <code title="Defaults">
     * {fileSize -> f:format.bytes(decimals: 2, decimalSeparator: '.', thousandsSeparator: ',')}
     * </code>
     * <output>
     * 1,023.00 B
     * // depending on the value of {fileSize}
     * </output>
     *
     * You may provide an own set of units, like this: B,KB,MB,GB,TB,PB,EB,ZB,YB
     * <code title="custom units">
     * {fileSize -> f:format.bytes(units: '{f:translate(\'viewhelper.format.bytes.units\', \'fluid\')}'
     * </code>
     * <output>
     * 123 KB
     * // depending on the value of {fileSize}
     * </output>
     *
     * @api
     */
    class BytesViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * Output is escaped already. We must not escape children, to avoid double encoding.
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize ViewHelper arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Formats a number with custom precision, decimal point and grouped thousands.
     *
     * @see http://www.php.net/manual/en/function.number-format.php
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <f:format.number>423423.234</f:format.number>
     * </code>
     * <output>
     * 423,423.20
     * </output>
     *
     * <code title="With all parameters">
     * <f:format.number decimals="1" decimalSeparator="," thousandsSeparator=".">423423.234</f:format.number>
     * </code>
     * <output>
     * 423.423,2
     * </output>
     */
    class NumberViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Output is escaped already. We must not escape children, to avoid double encoding.
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Encodes the given string according to http://www.faqs.org/rfcs/rfc3986.html (applying PHPs rawurlencode() function)
     * @see http://www.php.net/manual/function.rawurlencode.php
     * Note: The output is not escaped. You may have to ensure proper escaping on your own.
     *
     * = Examples =
     *
     * <code title="default notation">
     * <f:format.rawurlencode>foo @+%/</f:format.rawurlencode>
     * </code>
     * <output>
     * foo%20%40%2B%25%2F (rawurlencode() applied)
     * </output>
     *
     * <code title="inline notation">
     * {text -> f:format.urlencode()}
     * </code>
     * <output>
     * Url encoded text (rawurlencode() applied)
     * </output>
     */
    class UrlencodeViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * Output is escaped already. We must not escape children, to avoid double encoding.
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize ViewHelper arguments
         *
         * @throws Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Wrapper for PHPs nl2br function.
     * @see http://www.php.net/manual/en/function.nl2br.php
     *
     * = Examples =
     *
     * <code title="Example">
     * <f:format.nl2br>{text_with_linebreaks}</f:format.nl2br>
     * </code>
     * <output>
     * text with line breaks replaced by <br />
     * </output>
     *
     * <code title="Inline notation">
     * {text_with_linebreaks -> f:format.nl2br()}
     * </code>
     * <output>
     * text with line breaks replaced by <br />
     * </output>
     */
    class Nl2brViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Removes tags from the given string (applying PHPs strip_tags() function)
     *
     * @see http://www.php.net/manual/function.strip-tags.php
     *
     * = Examples =
     *
     * <code title="default notation">
     * <f:format.stripTags>Some Text with <b>Tags</b> and an &Uuml;mlaut.</f:format.stripTags>
     * </code>
     * <output>
     * Some Text with Tags and an &Uuml;mlaut. (strip_tags() applied. Note: encoded entities are not decoded)
     * </output>
     *
     * <code title="default notation with allowedTags">
     * <f:format.stripTags allowedTags="<p><span><div><script>"><p>paragraph</p><span>span</span><div>divider</div><iframe>iframe</iframe><script>script</script></f:format.stripTags>
     * </code>
     * <output>
     * <p>paragraph</p><span>span</span><div>divider</div>iframe<script>script</script>
     * </output>
     *
     * <code title="inline notation">
     * {text -> f:format.stripTags()}
     * </code>
     * <output>
     * Text without tags (strip_tags() applied)
     * </output>
     *
     * <code title="inline notation with allowedTags">
     * {text -> f:format.stripTags(allowedTags: "<p><span><div><script>")}
     * </code>
     * <output>
     * Text with p, span, div and script Tags inside, all other tags are removed
     * </output>
     *
     * @api
     */
    class StripTagsViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * No output escaping as some tags may be allowed
         *
         * @var bool
         */
        protected $escapeOutput;
        /**
         * To ensure all tags are removed, child node's output must not be escaped
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize ViewHelper arguments
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Applies html_entity_decode() to a value
     * @see http://www.php.net/html_entity_decode
     *
     * = Examples =
     *
     * <code title="default notation">
     * <f:format.htmlentitiesDecode>{text}</f:format.htmlentitiesDecode>
     * </code>
     * <output>
     * Text with &amp; &quot; &lt; &gt; replaced by unescaped entities (html_entity_decode applied).
     * </output>
     *
     * <code title="inline notation">
     * {text -> f:format.htmlentitiesDecode(encoding: 'ISO-8859-1')}
     * </code>
     * <output>
     * Text with &amp; &quot; &lt; &gt; replaced by unescaped entities (html_entity_decode applied).
     * </output>
     *
     * @api
     */
    class HtmlentitiesDecodeViewHelper extends \typo3\cms\fluid\viewhelpers\format\abstractencodingviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * We accept value and children interchangeably, thus we must disable children escaping.
         *
         * @var bool
         */
        protected $escapeChildren;
        /**
         * If we decode, we must not encode again after that.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize ViewHelper arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Formats a string using PHPs str_pad function.
     * @see http://www.php.net/manual/en/function.str_pad.php
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <f:format.padding padLength="10">TYPO3</f:format.padding>
     * </code>
     * <output>
     * TYPO3     (note the trailing whitespace)
     * <output>
     *
     * <code title="Specify padding string">
     * <f:format.padding padLength="10" padString="-=">TYPO3</f:format.padding>
     * </code>
     * <output>
     * TYPO3-=-=-
     * </output>
     *
     * <code title="Specify padding type">
     * <f:format.padding padLength="10" padString="-" padType="both">TYPO3</f:format.padding>
     * </code>
     * <output>
     * --TYPO3---
     * </output>
     */
    class PaddingViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * Output is escaped already. We must not escape children, to avoid double encoding.
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Use this view helper to crop the text between its opening and closing tags.
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <f:format.crop maxCharacters="10">This is some very long text</f:format.crop>
     * </code>
     * <output>
     * This is...
     * </output>
     *
     * <code title="Custom suffix">
     * <f:format.crop maxCharacters="17" append="&nbsp;[more]">This is some very long text</f:format.crop>
     * </code>
     * <output>
     * This is some&nbsp;[more]
     * </output>
     *
     * <code title="Don't respect word boundaries">
     * <f:format.crop maxCharacters="10" respectWordBoundaries="false">This is some very long text</f:format.crop>
     * </code>
     * <output>
     * This is so...
     * </output>
     *
     * <code title="Don't respect HTML tags">
     * <f:format.crop maxCharacters="28" respectWordBoundaries="false" respectHtml="false">This is some text with <strong>HTML</strong> tags</f:format.crop>
     * </code>
     * <output>
     * This is some text with <stro
     * </output>
     *
     * <code title="Inline notation">
     * {someLongText -> f:format.crop(maxCharacters: 10)}
     * </code>
     * <output>
     * someLongText cropped after 10 characters...
     * (depending on the value of {someLongText})
     * </output>
     */
    class CropViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * The output may contain HTML and can not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @api
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
/** @var ContentObjectRenderer $contentObject */
        public static function renderStatic(/** @var ContentObjectRenderer $contentObject */
array $arguments, /** @var ContentObjectRenderer $contentObject */
\Closure $renderChildrenClosure, /** @var ContentObjectRenderer $contentObject */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Renders a string by passing it to a TYPO3 parseFunc.
     * You can either specify a path to the TypoScript setting or set the parseFunc options directly.
     * By default lib.parseFunc_RTE is used to parse the string.
     *
     * == Examples ==
     *
     * <code title="Default parameters">
     * <f:format.html>foo <b>bar</b>. Some <LINK 1>link</LINK>.</f:format.html>
     * </code>
     * <output>
     * <p class="bodytext">foo <b>bar</b>. Some <a href="index.php?id=1" >link</a>.</p>
     * (depending on your TYPO3 setup)
     * </output>
     *
     * <code title="Custom parseFunc">
     * <f:format.html parseFuncTSPath="lib.parseFunc">foo <b>bar</b>. Some <LINK 1>link</LINK>.</f:format.html>
     * </code>
     * <output>
     * foo <b>bar</b>. Some <a href="index.php?id=1" >link</a>.
     * </output>
     *
     * <code title="Inline notation">
     * {someText -> f:format.html(parseFuncTSPath: 'lib.parseFunc')}
     * </code>
     * <output>
     * foo <b>bar</b>. Some <a href="index.php?id=1" >link</a>.
     * </output>
     *
     * @see https://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Parsefunc/
     */
    class HtmlViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * @var \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController contains a backup of the current $GLOBALS['TSFE'] if used in BE mode
         */
        static protected $tsfeBackup;
        /**
         * Children must not be escaped, to be able to pass {bodytext} directly to it
         *
         * @var bool
         */
        protected $escapeChildren;
        /**
         * Plain HTML should be returned, no output escaping allowed
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        /**
         * Copies the specified parseFunc configuration to $GLOBALS['TSFE']->tmpl->setup in Backend mode
         * This somewhat hacky work around is currently needed because the parseFunc() function of \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer relies on those variables to be set
         */
        protected static function simulateFrontendEnvironment() {}
        /**
         * Resets $GLOBALS['TSFE'] if it was previously changed by simulateFrontendEnvironment()
         *
         * @see simulateFrontendEnvironment()
         */
        protected static function resetFrontendEnvironment() {}
    }

    /**
     * Wrapper for PHPs json_encode function.
     *
     * = Examples =
     *
     * <code title="encoding a view variable">
     * {someArray -> f:format.json()}
     * </code>
     * <output>
     * ["array","values"]
     * // depending on the value of {someArray}
     * </output>
     *
     * <code title="associative array">
     * {f:format.json(value: {foo: 'bar', bar: 'baz'})}
     * </code>
     * <output>
     * {"foo":"bar","bar":"baz"}
     * </output>
     *
     * <code title="non-associative array with forced object">
     * {f:format.json(value: {0: 'bar', 1: 'baz'}, forceObject: true)}
     * </code>
     * <output>
     * {"0":"bar","1":"baz"}
     * </output>
     *
     * @api
     */
    class JsonViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Formats a given float to a currency representation.
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <f:format.currency>123.456</f:format.currency>
     * </code>
     * <output>
     * 123,46
     * </output>
     *
     * <code title="All parameters">
     * <f:format.currency currencySign="$" decimalSeparator="." thousandsSeparator="," prependCurrency="true" separateCurrency="false" decimals="2">54321</f:format.currency>
     * </code>
     * <output>
     * $54,321.00
     * </output>
     *
     * <code title="Inline notation">
     * {someNumber -> f:format.currency(thousandsSeparator: ',', currencySign: '€')}
     * </code>
     * <output>
     * 54,321,00 €
     * (depending on the value of {someNumber})
     * </output>
     *
     * @api
     */
    class CurrencyViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Output is escaped already. We must not escape children, to avoid double encoding.
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize arguments.
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Formats an object implementing \DateTimeInterface.
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <f:format.date>{dateObject}</f:format.date>
     * </code>
     * <output>
     * 1980-12-13
     * (depending on the current date)
     * </output>
     *
     * <code title="Custom date format">
     * <f:format.date format="H:i">{dateObject}</f:format.date>
     * </code>
     * <output>
     * 01:23
     * (depending on the current time)
     * </output>
     *
     * <code title="Relative date with given time">
     * <f:format.date format="Y" base="{dateObject}">-1 year</f:format.date>
     * </code>
     * <output>
     * 2016
     * (assuming dateObject is in 2017)
     * </output>
     *
     * <code title="strtotime string">
     * <f:format.date format="d.m.Y - H:i:s">+1 week 2 days 4 hours 2 seconds</f:format.date>
     * </code>
     * <output>
     * 13.12.1980 - 21:03:42
     * (depending on the current time, see http://www.php.net/manual/en/function.strtotime.php)
     * </output>
     *
     * <code title="Localized dates using strftime date format">
     * <f:format.date format="%d. %B %Y">{dateObject}</f:format.date>
     * </code>
     * <output>
     * 13. Dezember 1980
     * (depending on the current date and defined locale. In the example you see the 1980-12-13 in a german locale)
     * </output>
     *
     * <code title="Inline notation">
     * {f:format.date(date: dateObject)}
     * </code>
     * <output>
     * 1980-12-13
     * (depending on the value of {dateObject})
     * </output>
     *
     * <code title="Inline notation (2nd variant)">
     * {dateObject -> f:format.date()}
     * </code>
     * <output>
     * 1980-12-13
     * (depending on the value of {dateObject})
     * </output>
     */
    class DateViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithcontentargumentandrenderstatic;

        /**
         * Needed as child node's output can return a DateTime object which can't be escaped
         *
         * @var bool
         */
        protected $escapeChildren;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Uri {
    /**
     * A ViewHelper to create uris from fields supported by the link wizard
     *
     * == Example ==
     *
     * {link} contains "19 - - - &X=y"
     * Please note that due to the nature of typolink you have to provide a
     * full set of parameters if you use the parameter only. Target, class
     * and title will be discarded.
     *
     * <code title="minimal usage">
     * <f:uri.typolink parameter="{link}" />
     * <output>
     * index.php?id=19&X=y
     * </output>
     * </code>
     *
     * <code title="Full parameter usage">
     * <f:uri.typolink parameter="{link}" additionalParams="&u=b" useCacheHash="true" />
     * </code>
     * <output>
     * index.php?id=19&X=y&u=b
     * </output>
     */
    class TypolinkViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        protected static function createTypolinkParameterFromArguments($parameter, $additionalParameters = '') {}
    }

    /**
     * A view helper for creating URIs to TYPO3 pages.
     *
     * = Examples =
     *
     * <code title="URI to the current page">
     * <f:uri.page>page link</f:uri.page>
     * </code>
     * <output>
     * index.php?id=123
     * (depending on the current page and your TS configuration)
     * </output>
     *
     * <code title="query parameters">
     * <f:uri.page pageUid="1" additionalParams="{foo: 'bar'}" />
     * </code>
     * <output>
     * index.php?id=1&foo=bar
     * (depending on your TS configuration)
     * </output>
     *
     * <code title="query parameters for extensions">
     * <f:uri.page pageUid="1" additionalParams="{extension_key: {foo: 'bar'}}" />
     * </code>
     * <output>
     * index.php?id=1&extension_key[foo]=bar
     * (depending on your TS configuration)
     * </output>
     */
    class PageViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Email URI view helper.
     * Generates an email URI incorporating TYPO3s spamProtectEmailAddresses-settings.
     *
     * = Examples
     *
     * <code title="basic email URI">
     * <f:uri.email email="foo@bar.tld" />
     * </code>
     * <output>
     * javascript:linkTo_UnCryptMailto('ocknvq,hqqBdct0vnf');
     * (depending on your spamProtectEmailAddresses-settings)
     * </output>
     */
    class EmailViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * A view helper for creating URIs to extbase actions.
     *
     * = Examples =
     *
     * <code title="URI to the show-action of the current controller">
     * <f:uri.action action="show" />
     * </code>
     * <output>
     * index.php?id=123&tx_myextension_plugin[action]=show&tx_myextension_plugin[controller]=Standard&cHash=xyz
     * (depending on the current page and your TS configuration)
     * </output>
     */
    class ActionViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * A view helper for creating URIs to external targets.
     * Currently the specified URI is simply passed through.
     *
     * = Examples =
     *
     * <code>
     * <f:uri.external uri="http://www.typo3.org" />
     * </code>
     * <output>
     * http://www.typo3.org
     * </output>
     *
     * <code title="custom default scheme">
     * <f:uri.external uri="typo3.org" defaultScheme="ftp" />
     * </code>
     * <output>
     * ftp://typo3.org
     * </output>
     *
     * @api
     */
    class ExternalViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * A view helper for creating URIs to resources.
     *
     * = Examples =
     *
     * <code title="Defaults">
     * <link href="{f:uri.resource(path:'css/stylesheet.css')}" rel="stylesheet" />
     * </code>
     * <output>
     * <link href="Resources/Packages/MyPackage/stylesheet.css" rel="stylesheet" />
     * (depending on current package)
     * </output>
     */
    class ResourceViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         *
         * @api
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Resizes a given image (if required) and returns its relative path.
     *
     * = Examples =
     *
     * <code title="Default">
     * <f:uri.image src="EXT:myext/Resources/Public/typo3_logo.png" />
     * </code>
     * <output>
     * typo3conf/ext/myext/Resources/Public/typo3_logo.png
     * or (in BE mode):
     * ../typo3conf/ext/myext/Resources/Public/typo3_logo.png
     * </output>
     *
     * <code title="Image Object">
     * <f:uri.image image="{imageObject}" />
     * </code>
     * <output>
     * fileadmin/images/image.png
     * or (in BE mode):
     * fileadmin/images/image.png
     * </output>
     *
     * <code title="Inline notation">
     * {f:uri.image(src: 'EXT:myext/Resources/Public/typo3_logo.png', minWidth: 30, maxWidth: 40)}
     * </code>
     * <output>
     * typo3temp/assets/images/[b4c0e7ed5c].png
     * (depending on your TYPO3s encryption key)
     * </output>
     *
     * <code title="non existing image">
     * <f:uri.image src="NonExistingImage.png" />
     * </code>
     * <output>
     * Could not get image resource for "NonExistingImage.png".
     * </output>
     */
    class ImageViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        /**
         * Return an instance of ImageService using object manager
         *
         * @return ImageService
         */
        protected static function getImageService() {}
    }

}

namespace TYPO3\CMS\Fluid\ViewHelpers\Debug {
    /**
     * Debuggable version of f:render - performs the same
     * rendering operation but wraps the output with HTML
     * that can be inspected with the admin panel in FE.
     *
     * Replaces `f:render` when the admin panel decides
     * (see ViewHelperResolver class). Also possible to use
     * explicitly by using `f:debug.render` instead of the
     * normal `f:render` statement.
     *
     * @api
     */
    class RenderViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
        /**
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes additional arguments available for this view helper.
         */
        public function initializeArguments() {}
        /**
         * Renders the content.
         *
         * @return string
         * @api
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\Core\Widget {
    /**
     * Test case
     */
    class AbstractWidgetViewHelperTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\AbstractWidgetViewHelper
         */
        protected $viewHelper;
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder
         */
        protected $ajaxWidgetContextHolder;
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetContext
         */
        protected $widgetContext;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
         */
        protected $controllerContext;
        /**
         * @var \TYPO3\CMS\Extbase\Mvc\Web\Request
         */
        protected $request;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $mockExtensionService;

        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function initializeArgumentsAndRenderCallsTheRightSequenceOfMethods() {}
        /**
         * @test
         */
        public function initializeArgumentsAndRenderStoresTheWidgetContextIfInAjaxMode() {}
        /**
         * Calls the ViewHelper, and emulates a rendering.
         */
        public function callViewHelper() {}
        /**
         * @test
         */
        public function setChildNodesAddsChildNodesToWidgetContext() {}
        /**
         * @test
         */
        public function initiateSubRequestThrowsExceptionIfControllerIsNoWidgetController() {}
        /**
         * @test
         */
        public function initiateSubRequestBuildsRequestProperly() {}
        /**
         * @test
         */
        public function getWidgetConfigurationReturnsArgumentsProperty() {}
        /**
         * @test
         */
        public function compileDisablesTemplateCompiler() {}
    }

    /**
     * Test case
     */
    class AbstractWidgetControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var AbstractWidgetController|\PHPUnit_Framework_MockObject_MockObject $abstractWidgetController */
        public function canHandleWidgetRequest() {}
        /**
         * @test
         */
        public function processRequestSetsWidgetConfiguration() {}
        public function setViewConfigurationPerformsExpectedInitialization(array $parent, $widget, array $expected) {}
        /**
         * @return array
         */
        public function getSetViewConfigurationTestValues() {}
    }

    /**
     * Test case
     */
    class WidgetRequestTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function setWidgetContextAlsoSetsControllerObjectName() {}
        /**
         * @test
         */
        public function getArgumentPrefixReadsVariablesFromWidgetContext() {}
        /**
         * @test
         */
        public function widgetContextCanBeReadAgain() {}
    }

    /**
     * Test case
     */
    class AjaxWidgetContextHolderTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var \TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder $ajaxWidgetContextHolder */
        public function getThrowsExceptionIfWidgetContextIsNotFound() {}
    }

    /**
     * Test case
     */
    class WidgetContextTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetContext
         */
        protected $widgetContext;

        /**
         */
        protected function setUp() {}
        public function getterMethodReturnsValue($name, $value) {}
        public function setterMethodSetsPropertyValue($name, $value) {}
        /**
         * @return array
         */
        public function getSetterGetterTestValues() {}
        /**
         * @test
         */
        public function widgetIdentifierCanBeReadAgain() {}
        /**
         * @test
         */
        public function ajaxWidgetIdentifierCanBeReadAgain() {}
        /**
         * @test
         */
        public function widgetConfigurationCanBeReadAgain() {}
        /**
         * @test
         */
        public function controllerObjectNameCanBeReadAgain() {}
        /**
         * @test
         */
        public function viewHelperChildNodesCanBeReadAgain() {}
        /**
         * @test
         */
        public function sleepReturnsExpectedPropertyNames() {}
    }

    /**
     * Test case
     */
    class WidgetRequestBuilderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetRequestBuilder
         */
        protected $widgetRequestBuilder;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetRequest
         */
        protected $mockWidgetRequest;
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\AjaxWidgetContextHolder
         */
        protected $mockAjaxWidgetContextHolder;
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetContext
         */
        protected $mockWidgetContext;

        protected function setUp() {}
        /**
         * @test
         */
        public function buildSetsRequestUri() {}
        /**
         * @test
         */
        public function buildSetsBaseUri() {}
        /**
         * @test
         */
        public function buildSetsRequestMethod() {}
        /**
         * @test
         */
        public function buildSetsPostArgumentsFromRequest() {}
        /**
         * @test
         */
        public function buildSetsGetArgumentsFromRequest() {}
        /**
         * @test
         */
        public function buildSetsControllerActionNameFromGetArguments() {}
        /**
         * @test
         */
        public function buildSetsWidgetContext() {}
        /**
         * @test
         */
        public function buildReturnsRequest() {}
    }

    /**
     * Test case
     */
    class WidgetRequestHandlerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Fluid\Core\Widget\WidgetRequestHandler
         */
        protected $widgetRequestHandler;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function canHandleRequestReturnsTrueIfCorrectGetParameterIsSet() {}
        /**
         * @test
         */
        public function canHandleRequestReturnsFalsefGetParameterIsNotSet() {}
        /**
         * @test
         */
        public function priorityIsHigherThanDefaultRequestHandler() {}
        /**
         * @test
         */
        public function handleRequestCallsExpectedMethods() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\Core\Cache {
    /**
     * Test case
     */
    class FluidTemplateCacheTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function flushCallsFlushOnBackend() {}
        /**
         * @test
         */
        public function getDelegatesToRequireOnce() {}
        /**
         * @test
         */
        public function setCallsSetOnBackend() {}
        /**
         * @test
         */
        public function setRemovesLeadingPhpTagBeforeCallingParentWhichAddsLeadingPhpTag() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\Core\ViewHelper {
    /**
     * Test case
     */
    class ViewHelperResolverTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function createViewHelperInstanceCreatesViewHelperInstanceUsingObjectManager() {}
        public function resolveViewHelperClassNameResolvesExpectedViewHelperClassName($namespace, $method, $expected) {}
        /**
         * @return array
         */
        public function getResolveViewHelperNameTestValues() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\Core\Fixtures {
    /**
     * Class TestViewHelper
     */
    class TestViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
        public function render($param1, array $param2, $param3 = 'default') {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\Core\Rendering {
    /**
     * Test case
     */
    class RenderingContextTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Parsing state
         *
         * @var \TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface
         */
        protected $renderingContext;

        protected function setUp() {}
        /**
         * @test
         */
        public function setControllerContextWithSubpackageKeySetsExpectedControllerContext() {}
        /**
         * @test
         */
        public function templateVariableContainerCanBeReadCorrectly() {}
        /**
         * @test
         */
        public function controllerContextCanBeReadCorrectly() {}
        /**
         * @test
         */
        public function viewHelperVariableContainerCanBeReadCorrectly() {}
        public function setControllerActionProcessesInputCorrectly($input, $expected) {}
        /**
         * @return array
         */
        public function getControllerActionTestValues() {}
    }

    /**
     * Fixture for RenderingContext
     */
    class RenderingContextFixture extends \typo3\cms\fluid\core\rendering\renderingcontext {
        /**
         * Replacement NOOP constructor
         */
        public function __construct() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers {
    class ImageViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var ImageViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @return array
         */
        public function getInvalidArguments() {}
        public function renderMethodThrowsExceptionOnInvalidArguments(array $arguments) {}
        /**
         * @return array
         */
        public function getRenderMethodTestValues() {}
        public function renderMethodCreatesExpectedTag(array $arguments, array $expected) {}
    }

    /**
     * Class CObjectViewHelperTest
     */
    class CObjectViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var CObjectViewHelper
         */
        protected $viewHelper;
        /**
         * @var ConfigurationManagerInterface
         */
        protected $configurationManager;
        /**
         * @var ContentObjectRenderer
         */
        protected $contentObjectRenderer;

        /**
         * Set up the fixture
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperAcceptsDataParameterAsInput() {}
        /**
         * @test
         */
        public function viewHelperAcceptsChildrenClosureAsInput() {}
        /**
         * @test
         */
        public function renderThrowsExceptionIfTyposcriptObjectPathDoesNotExist() {}
        /**
         * @test
         */
        public function renderReturnsSimpleTyposcriptValue() {}
        /**
         * Stubs base dependencies
         */
        protected function stubBaseDependencies() {}
    }

    /**
     * Test class for TranslateViewHelper
     */
    class TranslateViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var TranslateViewHelper
         */
        protected $viewHelper;

        /**
         * @test
         */
        public function renderThrowsExceptionIfNoKeyOrIdParameterIsGiven() {}
        /**
         * @test
         */
        public function renderReturnsStringForGivenKey() {}
        /**
         * @test
         */
        public function renderReturnsStringForGivenId() {}
        /**
         * @test
         */
        public function renderReturnsDefaultIfNoTranslationIsFound() {}
    }

    /**
     */
    class BaseViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @test
         */
        public function renderTakesBaseUriFromControllerContext() {}
    }

    /**
     * Test for the Form view helper
     */
    class FormViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $mockExtensionService;
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $mockConfigurationManager;

        protected function setUp() {}
        /**
         * @test
         */
        public function initializeArgumentsRegistersExpectedArguments() {}
        /**
         * @test
         */
        public function setFormActionUriRespectsOverriddenArgument() {}
        protected function injectDependenciesIntoViewHelper(ViewHelperInterface $viewHelper) {}
        /**
         * @test
         */
        public function renderAddsObjectToViewHelperVariableContainer() {}
        /**
         * @test
         */
        public function renderAddsObjectNameToTemplateVariableContainer() {}
        /**
         * @test
         */
        public function formObjectNameArgumentOverrulesNameArgument() {}
        /**
         * @test
         */
        public function renderCallsRenderHiddenReferrerFields() {}
        /**
         * @test
         */
        public function renderCallsRenderHiddenIdentityField() {}
        /**
         * @test
         */
        public function renderCallsRenderAdditionalIdentityFields() {}
        /**
         * @test
         */
        public function renderWrapsHiddenFieldsWithDivForXhtmlCompatibilityWithRewrittenPropertyMapper() {}
        /**
         * @test
         */
        public function renderWrapsHiddenFieldsWithDivAndAnAdditionalClassForXhtmlCompatibilityWithRewrittenPropertyMapper() {}
        /**
         * @test
         */
        public function renderAdditionalIdentityFieldsFetchesTheFieldsFromViewHelperVariableContainerAndBuildsHiddenFieldsForThem() {}
        /**
         * @test
         */
        public function renderHiddenReferrerFieldsAddCurrentControllerAndActionAsHiddenFields() {}
        /**
         * @test
         */
        public function renderAddsSpecifiedPrefixToTemplateVariableContainer() {}
        /**
         * @test
         */
        public function renderAddsDefaultFieldNamePrefixToTemplateVariableContainerIfNoPrefixIsSpecified() {}
        /**
         * Data Provider for postProcessUriArgumentsForRequestHashWorks
         */
        public function argumentsForPostProcessUriArgumentsForRequestHash() {}
        public function postProcessUriArgumentsForRequestHashWorks($arguments, $expectedResults) {}
    }

    /**
     * Testcase for FlashMessagesViewHelper
     */
    class FlashMessagesViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\FlashMessagesViewHelper
         */
        protected $viewHelper;
        /**
         * @var FlashMessageQueue
         */
        protected $flashMessageQueue;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function renderReturnsEmptyStringIfNoFlashMessagesAreInQueue() {}
        /**
         * @test
         */
        public function fetchMessagesFromSpecificQueue() {}
        /**
         * @test
         */
        public function parameterAsStartsRenderingOnTemplate() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Form {
    /**
     * Test for the "Select" Form view helper
     */
    class SelectViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Form\SelectViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function selectCorrectlySetsTagName() {}
        /**
         * @test
         */
        public function selectCreatesExpectedOptions() {}
        /**
         * @test
         */
        public function selectShouldSetTheRequiredAttribute() {}
        /**
         * @test
         */
        public function selectCreatesExpectedOptionsWithArraysAndOptionValueFieldAndOptionLabelFieldSet() {}
        /**
         * @test
         */
        public function selectCreatesExpectedOptionsWithStdClassesAndOptionValueFieldAndOptionLabelFieldSet() {}
        /**
         * @test
         */
        public function selectCreatesExpectedOptionsWithArrayObjectsAndOptionValueFieldAndOptionLabelFieldSet() {}
        /**
         * @test
         */
        public function OrderOfOptionsIsNotAlteredByDefault() {}
        /**
         * @test
         */
        public function optionsAreSortedByLabelIfSortByOptionLabelIsSet() {}
        /**
         * @test
         */
        public function optionsAreSortedByLabelIfSortByOptionLabelIsSetAndLocaleEqualsUtf8() {}
        /**
         * @test
         */
        public function multipleSelectCreatesExpectedOptions() {}
        /**
         * @test
         */
        public function selectOnDomainObjectsCreatesExpectedOptions() {}
        /**
         * @test
         */
        public function multipleSelectOnDomainObjectsCreatesExpectedOptions() {}
        /**
         * @test
         */
        public function multipleSelectOnDomainObjectsCreatesExpectedOptionsWithoutOptionValueField() {}
        /**
         * @test
         */
        public function selectWithoutFurtherConfigurationOnDomainObjectsUsesUuidForValueAndLabel() {}
        /**
         * @test
         */
        public function selectWithoutFurtherConfigurationOnDomainObjectsUsesToStringForLabelIfAvailable() {}
        /**
         * @test
         */
        public function selectOnDomainObjectsThrowsExceptionIfNoValueCanBeFound() {}
        /**
         * @test
         */
        public function renderCallsSetErrorClassAttribute() {}
        /**
         * @test
         */
        public function allOptionsAreSelectedIfSelectAllIsTrue() {}
        /**
         * @test
         */
        public function selectAllHasNoEffectIfValueIsSet() {}
        /**
         * @test
         */
        public function optionsContainPrependedItemWithEmptyValueIfPrependOptionLabelIsSet() {}
        /**
         * @test
         */
        public function optionsContainPrependedItemWithCorrectValueIfPrependOptionLabelAndPrependOptionValueAreSet() {}
    }

    /**
     * Test for the "Upload" Form view helper
     */
    class UploadViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Form\UploadViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagName() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTypeNameAndValueAttributes() {}
        /**
         * @test
         */
        public function renderCallsSetErrorClassAttribute() {}
        /** @var TagBuilder $tagBuilder */
        public function renderSetsAttributeNameAsArrayIfMultipleIsGiven() {}
    }

    /**
     * Test for the Abstract Form view helper
     */
    abstract class FormFieldViewHelperBaseTestcase extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface
         */
        protected $mockConfigurationManager;

        /**
         */
        protected function setUp() {}
        protected function injectDependenciesIntoViewHelper(ViewHelperInterface $viewHelper) {}
    }

    /**
     * Test for the "Submit" Form view helper
     */
    class SubmitViewHelperTest extends \typo3\cms\fluid\tests\unit\viewhelpers\form\formfieldviewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Form\SubmitViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagNameAndDefaultAttributes() {}
    }

    /**
     * Test for the Abstract Form view helper
     */
    class AbstractFormFieldViewHelperTest extends \typo3\cms\fluid\tests\unit\viewhelpers\form\formfieldviewhelperbasetestcase {
        /**
         * @test
         */
        public function getRespectSubmittedDataValueInitiallyReturnsFalse() {}
        public function setRespectSubmittedDataValueToTrue() {}
        /**
         * @test
         */
        public function getValueAttributeBuildsValueFromPropertyAndFormObjectIfInObjectAccessorModeAndRespectSubmittedDataValueSetFalse() {}
        /**
         * @test
         */
        public function getNameBuildsNameFromFieldNamePrefixFormObjectNameAndPropertyIfInObjectAccessorMode() {}
        /**
         * @test
         */
        public function getNameBuildsNameFromFieldNamePrefixFormObjectNameAndHierarchicalPropertyIfInObjectAccessorMode() {}
        /**
         * @test
         */
        public function getNameBuildsNameFromFieldNamePrefixAndPropertyIfInObjectAccessorModeAndNoFormObjectNameIsSpecified() {}
        /**
         * @test
         */
        public function getNameBuildsNameFromFieldNamePrefixAndFieldNameIfNotInObjectAccessorMode() {}
        /**
         * @test
         */
        public function isObjectAccessorModeReturnsTrueIfPropertyIsSetAndFormObjectIsGiven() {}
        /**
         * @test
         */
        public function addAdditionalIdentityPropertiesIfNeededDoesNotCreateAnythingIfPropertyIsWithoutDot() {}
        /**
         * @test
         */
        public function addAdditionalIdentityPropertiesIfNeededCallsRenderIdentityFieldWithTheRightParameters() {}
        /**
         * @test
         */
        public function addAdditionalIdentityPropertiesIfNeededCallsRenderIdentityFieldWithTheRightParametersWithMoreHierarchyLevels() {}
        /**
         * @test
         */
        public function renderHiddenFieldForEmptyValueRendersHiddenFieldIfItHasNotBeenRenderedBefore() {}
        /**
         * @test
         */
        public function renderHiddenFieldForEmptyValueAddsHiddenFieldNameToVariableContainerIfItHasBeenRendered() {}
        /**
         * @test
         */
        public function renderHiddenFieldForEmptyValueDoesNotRenderHiddenFieldIfItHasBeenRenderedBefore() {}
        /**
         * @test
         */
        public function renderHiddenFieldForEmptyValueRemovesEmptySquareBracketsFromHiddenFieldName() {}
        /**
         * @test
         */
        public function renderHiddenFieldForEmptyValueDoesNotRemoveNonEmptySquareBracketsFromHiddenFieldName() {}
        /**
         * @test
         */
        public function getPropertyValueReturnsArrayValueByPropertyPath() {}
    }

    /**
     * Test for the Abstract Form view helper
     */
    class AbstractFormViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @test
         */
        public function renderHiddenIdentityFieldReturnsAHiddenInputFieldContainingTheObjectsUID() {}
        /**
         * @test
         */
        public function renderHiddenIdentityFieldReturnsAHiddenInputFieldIfObjectIsNewButAClone() {}
        /**
         * @test
         */
        public function prefixFieldNameReturnsEmptyStringIfGivenFieldNameIsNULL() {}
        /**
         * @test
         */
        public function prefixFieldNameReturnsEmptyStringIfGivenFieldNameIsEmpty() {}
        /**
         * @test
         */
        public function prefixFieldNameReturnsGivenFieldNameIfFieldNamePrefixIsEmpty() {}
        /**
         * @test
         */
        public function prefixFieldNamePrefixesGivenFieldNameWithFieldNamePrefix() {}
        /**
         * @test
         */
        public function prefixFieldNamePreservesSquareBracketsOfFieldName() {}
    }

    /**
     * Test for the "Hidden" Form view helper
     */
    class HiddenViewHelperTest extends \typo3\cms\fluid\tests\unit\viewhelpers\form\formfieldviewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Form\HiddenViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagNameAndDefaultAttributes() {}
    }

    /**
     * Test for the "Button" Form view helper
     */
    class ButtonViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var ButtonViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagNameAndDefaultAttributes() {}
    }

    /**
     * Test for the "Radio" Form view helper
     */
    class RadioViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Form\RadioViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderSetsTagNameAndDefaultAttributes() {}
        /**
         * @test
         */
        public function renderSetsCheckedAttributeIfSpecified() {}
        /**
         * @test
         */
        public function renderIgnoresBoundPropertyIfCheckedIsSet() {}
        /**
         * @test
         */
        public function renderCorrectlySetsCheckedAttributeIfCheckboxIsBoundToAPropertyOfTypeBoolean() {}
        /**
         * @test
         */
        public function renderDoesNotAppendSquareBracketsToNameAttributeIfBoundToAPropertyOfTypeArray() {}
        /**
         * @test
         */
        public function renderSetsCheckedAttributeIfCheckboxIsBoundToAPropertyOfTypeString() {}
        /**
         * @test
         */
        public function renderDoesNotSetsCheckedAttributeIfBoundPropertyIsNull() {}
        /**
         * @test
         */
        public function renderSetsCheckedAttributeForListOfObjects() {}
        /**
         * @test
         */
        public function renderCallSetsErrorClassAttribute() {}
        /**
         * @test
         */
        public function renderCallSetsStandardErrorClassAttributeIfNonIsSpecified() {}
        /**
         * @test
         */
        public function renderCallExtendsClassAttributeWithErrorClass() {}
    }

    /**
     * Test for the "Textfield" Form view helper
     */
    class TextfieldViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var TextfieldViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagName() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTypeNameAndValueAttributes() {}
        /**
         * @test
         */
        public function renderCallsSetErrorClassAttribute() {}
        /**
         * @test
         */
        public function renderAddsPlaceholder() {}
        /**
         * @test
         */
        public function renderCorrectlySetsRequiredAttribute() {}
    }

    /**
     * Test for the "Textarea" Form view helper
     */
    class TextareaViewHelperTest extends \typo3\cms\fluid\tests\unit\viewhelpers\form\formfieldviewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Form\TextareaViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagName() {}
        /**
         * @test
         */
        public function renderCorrectlySetsNameAttributeAndContent() {}
        /**
         * @test
         */
        public function renderCallsSetErrorClassAttribute() {}
        /**
         * @test
         */
        public function renderEscapesTextareaContent() {}
        /**
         * @test
         */
        public function renderAddsPlaceholder() {}
    }

    /**
     * Test for the "Checkbox" Form view helper
     */
    class CheckboxViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var CheckboxViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagNameAndDefaultAttributes() {}
        /**
         * @test
         */
        public function renderSetsCheckedAttributeIfSpecified() {}
        /**
         * Object property = false, argument "checked" set
         *
         * @test
         */
        public function renderIgnoresValueOfBoundPropertyIfCheckedIsSet() {}
        /**
         * Object property = true, argument "checked" not set
         *
         * @test
         */
        public function renderSetsCheckedAttributeIfCheckboxIsBoundToAPropertyOfTypeBoolean() {}
        /**
         * @test
         */
        public function renderAppendsSquareBracketsToNameAttributeIfBoundToAPropertyOfTypeArray() {}
        /**
         * @test
         */
        public function renderSetsCheckedAttributeIfCheckboxIsBoundToAPropertyOfTypeArray() {}
        /**
         * @test
         */
        public function renderSetsCheckedAttributeIfCheckboxIsBoundToAPropertyOfTypeArrayObject() {}
        /**
         * @test
         */
        public function renderSetsCheckedAttributeIfBoundPropertyIsNotNull() {}
        /**
         * @test
         */
        public function renderDoesNotSetsCheckedAttributeIfBoundPropertyIsNull() {}
        /**
         * @test
         */
        public function renderSetsCheckedAttributeForListOfObjects() {}
        /**
         * @test
         */
        public function renderCallSetsErrorClassAttribute() {}
        /**
         * @test
         */
        public function renderCallSetsStandardErrorClassAttributeIfNonIsSpecified() {}
        /**
         * @test
         */
        public function renderCallExtendsClassAttributeWithErrorClass() {}
    }

    /**
     * Test for the "Password" Form view helper
     */
    class PasswordViewHelperTest extends \typo3\cms\fluid\tests\unit\viewhelpers\form\formfieldviewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Form\PasswordViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagName() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTypeNameAndValueAttributes() {}
        /**
         * @test
         */
        public function renderCallsSetErrorClassAttribute() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Form\Fixtures {
    /**
     * [Enter description here]
     */
    class EmptySyntaxTreeNode extends \typo3fluid\fluid\core\parser\syntaxtree\viewhelpernode {
        public function __construct() {}
    }

    /**
     * Class ExtendsAbstractEntity
     */
    class ExtendsAbstractEntity extends \typo3\cms\extbase\domainobject\abstractentity {}

    /**
     * Class EmptyClass
     */
    class EmptyClass {}

    /**
     * Class ClassWithTwoGetters
     */
    class ClassWithTwoGetters {
        protected $value;

        /**
         * @return string
         */
        public function getSomething() {}
        /**
         * @return mixed
         */
        public function getValue() {}
    }

    /**
     * Example domain class which can be used to test different view helpers, e.g. the "select" view helper.
     */
    class UserDomainClass {
        protected $id;
        protected $firstName;
        protected $lastName;

        public function __construct($id, $firstName, $lastName) {}
        /**
         * Return the ID
         *
         * @return int ID
         */
        public function getId() {}
        /**
         * Return the first name
         *
         * @return string first name
         */
        public function getFirstName() {}
        /**
         * Return the last name
         *
         * @return string lastname
         */
        public function getLastName() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Widget\Controller {
    /**
     * Test case
     */
    class PaginateControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Query
         */
        protected $query;
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Widget\Controller\PaginateController|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $controller;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface
         */
        protected $querySettings;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
         */
        protected $persistenceManager;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\BackendInterface
         */
        protected $backend;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function calculateDisplayRangeDeterminesCorrectDisplayRangeStartAndEndForEvenMaximumNumberOfLinks() {}
        /**
         * @test
         */
        public function calculateDisplayRangeDeterminesCorrectDisplayRangeStartAndEndForOddMaximumNumberOfLinks() {}
        /**
         * @test
         */
        public function calculateDisplayRangeDeterminesCorrectDisplayRangeStartAndEndForEvenMaximumNumberOfLinksWhenOnFirstPage() {}
        /**
         * @test
         */
        public function calculateDisplayRangeDeterminesCorrectDisplayRangeStartAndEndForOddMaximumNumberOfLinksWhenOnFirstPage() {}
        /**
         * @test
         */
        public function calculateDisplayRangeDeterminesCorrectDisplayRangeStartAndEndForEvenMaximumNumberOfLinksWhenOnLastPage() {}
        /**
         * @test
         */
        public function calculateDisplayRangeDeterminesCorrectDisplayRangeStartAndEndForOddMaximumNumberOfLinksWhenOnLastPage() {}
        /**
         * @test
         */
        public function acceptQueryResultInterfaceAsObjects() {}
        /**
         * @test
         */
        public function acceptArrayAsObjects() {}
        /**
         * @test
         */
        public function acceptObjectStorageAsObjects() {}
        /**
         * @test
         */
        public function prepareObjectsSliceReturnsCorrectPortionForObjectStorageAndFirstPage() {}
        /**
         * @test
         */
        public function prepareObjectsSliceReturnsCorrectPortionForObjectStorageAndSecondPage() {}
        /**
         * @test
         */
        public function prepareObjectsSliceReturnsCorrectPortionForObjectStorageAndLastPage() {}
        /**
         * @test
         */
        public function prepareObjectsSliceReturnsCorrectPortionForArrayAndFirstPage() {}
        /**
         * @test
         */
        public function prepareObjectsSliceReturnsCorrectPortionForArrayAndSecondPage() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Be {
    /**
     * Test-case for Be\UriViewHelper
     */
    class UriViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var UriViewHelper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $viewHelper;
        /**
         * @var UriBuilder|\PHPUnit_Framework_MockObject_MockBuilder
         */
        protected $uriBuilderMock;

        /**
         * setUp function
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function initializeArgumentsRegistersExpectedArguments() {}
        /**
         * @test
         */
        public function renderRendersTagWithHrefFromRoute() {}
    }

    /**
     * Test-case for Be\LinkViewHelper
     */
    class LinkViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var LinkViewHelper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $viewHelper;
        /**
         * @var UriBuilder|\PHPUnit_Framework_MockObject_MockBuilder
         */
        protected $uriBuilderMock;

        /**
         * setUp function
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function initializeArgumentsRegistersExpectedArguments() {}
        /**
         * @test
         */
        public function renderRendersTagWithHrefFromRoute() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Be\Security {
    /**
     * Testcase for be.security.ifAuthenticated view helper
     */
    class IfAuthenticatedViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfAuthenticatedViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperRendersThenChildIfBeUserIsLoggedIn() {}
        /**
         * @test
         */
        public function viewHelperRendersElseChildIfBeUserIsNotLoggedIn() {}
    }

    /**
     * Testcase for be.security.ifHasRole view helper
     */
    class IfHasRoleViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfAuthenticatedViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperRendersThenChildIfBeUserWithSpecifiedRoleIsLoggedIn() {}
        /**
         * @test
         */
        public function viewHelperRendersThenChildIfBeUserWithSpecifiedRoleIdIsLoggedIn() {}
        /**
         * @test
         */
        public function viewHelperRendersElseChildIfBeUserWithSpecifiedRoleIsNotLoggedIn() {}
        /**
         * @test
         */
        public function viewHelperRendersElseChildIfBeUserWithSpecifiedRoleIdIsNotLoggedIn() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Security {
    /**
     * Testcase for security.ifAuthenticated view helper
     */
    class IfAuthenticatedViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Security\IfAuthenticatedViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperRendersThenChildIfFeUserIsLoggedIn() {}
        /**
         * @test
         */
        public function viewHelperRendersElseChildIfFeUserIsNotLoggedIn() {}
    }

    /**
     * Testcase for security.ifHasRole view helper
     */
    class IfHasRoleViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Security\IfHasRoleViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperRendersThenChildIfFeUserWithSpecifiedRoleIsLoggedIn() {}
        /**
         * @test
         */
        public function viewHelperRendersThenChildIfFeUserWithSpecifiedRoleIdIsLoggedIn() {}
        /**
         * @test
         */
        public function viewHelperRendersElseChildIfFeUserWithSpecifiedRoleIsNotLoggedIn() {}
        /**
         * @test
         */
        public function viewHelperRendersElseChildIfFeUserWithSpecifiedRoleIdIsNotLoggedIn() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Link {
    /**
     * Class TypolinkViewHelperTest
     */
    class TypolinkViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var TypolinkViewHelper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;

        /** @var RenderingContext $renderingContext */
        protected function setUp() {}
        /**
         * @test
         */
        public function renderReturnsResultOfContentObjectRenderer() {}
        /**
         * @test
         */
        public function renderCallsStdWrapWithrightParameters() {}
        /**
         * @return array
         */
        public function typoScriptConfigurationData() {}
        public function createTypolinkParameterArrayFromArgumentsReturnsExpectedArray($input, $targetFromFluid, $classFromFluid, $titleFromFluid, $additionalParametersFromFluid, $expected) {}
    }

    /**
     * Test-case for Link\PageViewHelper
     */
    class PageViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var PageViewHelper
         */
        protected $viewHelper;

        /**
         * setUp function
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function renderProvidesATagForValidLinkTarget() {}
        /**
         * @test
         */
        public function renderWillNotProvideATagForNonValidLinkTarget() {}
    }

    /**
     * Test for \TYPO3\CMS\Fluid\ViewHelpers\Link\ExternalViewHelper
     */
    class ExternalViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Link\ExternalViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagNameAndAttributesAndContent() {}
        /**
         * @test
         */
        public function renderAddsHttpPrefixIfSpecifiedUriDoesNotContainScheme() {}
        /**
         * @test
         */
        public function renderAddsSpecifiedSchemeIfUriDoesNotContainScheme() {}
        /**
         * @test
         */
        public function renderDoesNotAddEmptyScheme() {}
    }

    /**
     * Test case
     */
    class EmailViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Link\EmailViewHelper
         */
        protected $viewHelper;
        /**
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        protected $cObjBackup;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderCorrectlySetsTagNameAndAttributesAndContent() {}
        /**
         * @test
         */
        public function renderSetsTagContentToEmailIfRenderChildrenReturnNull() {}
        /**
         * @return array
         */
        public function renderEncodesEmailInFrontendDataProvider() {}
/** @var TypoScriptFrontendController $tsfe */
        public function renderEncodesEmailInFrontend(/** @var TypoScriptFrontendController $tsfe */
$email, /** @var TypoScriptFrontendController $tsfe */
$spamProtectEmailAddresses, /** @var TypoScriptFrontendController $tsfe */
$expected) {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Format {
    /**
     * Test case
     */
    class HtmlentitiesViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesViewHelper
         */
        protected $viewHelper;
        /**
         * shortcut for default Arguments which would be prepared by initializeArguments()
         *
         * @var array
         */
        protected $defaultArguments;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderUsesValueAsSourceIfSpecified() {}
        /**
         * @test
         */
        public function renderUsesChildnodesAsSourceIfSpecified() {}
        /**
         * @test
         */
        public function renderDoesNotModifyValueIfItDoesNotContainSpecialCharacters() {}
        /**
         * @test
         */
        public function renderDecodesSimpleString() {}
        /**
         * @test
         */
        public function renderRespectsKeepQuoteArgument() {}
        /**
         * @test
         */
        public function renderRespectsEncodingArgument() {}
        /**
         * @test
         */
        public function renderConvertsAlreadyConvertedEntitiesByDefault() {}
        /**
         * @test
         */
        public function renderDoesNotConvertAlreadyConvertedEntitiesIfDoubleQuoteIsFalse() {}
        /**
         * This test tests the behaviour of render without relying on the validation of registerArguments
         * In the normal course of things "value" can't be anything but a string as it is registered that way
         *
         * @test
         */
        public function renderReturnsUnmodifiedSourceIfItIsNoString() {}
    }

    /**
     * Test case
     */
    class PaddingViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var PaddingViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function stringsArePaddedWithBlanksByDefault() {}
        /**
         * @test
         */
        public function paddingStringCanBeSpecified() {}
        /**
         * @test
         */
        public function stringIsNotTruncatedIfPadLengthIsBelowStringLength() {}
        /**
         * @test
         */
        public function integersAreRespectedAsValue() {}
        /**
         * @test
         */
        public function valueParameterIsRespected() {}
    }

    /**
     * Test case.
     */
    class CropViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var CropViewHelper
         */
        protected $viewHelper;
        /**
         * @var ContentObjectRenderer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockContentObject;

        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperCallsCropHtmlByDefault() {}
        /**
         * @test
         */
        public function viewHelperCallsCropHtmlByDefault2() {}
        /**
         * @test
         */
        public function respectWordBoundariesCanBeDisabled() {}
        /**
         * @test
         */
        public function respectHtmlCanBeDisabled() {}
    }

    /**
     * Test case
     */
    class StripTagsViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Format\StripTagsViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderUsesValueAsSourceIfSpecified() {}
        /**
         * @test
         */
        public function renderUsesChildnodesAsSourceIfSpecified() {}
        /**
         * Data Provider for the render tests
         *
         * @return array
         */
        public function stringsTestDataProvider() {}
        public function renderCorrectlyConvertsIntoPlaintext($source, $allowed, $expectedResult) {}
        /**
         * @test
         */
        public function renderReturnsUnmodifiedSourceIfItIsNoString() {}
    }

    /**
     * Test case
     */
    class HtmlentitiesDecodeViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var HtmlentitiesDecodeViewHelper
         */
        protected $viewHelper;
        /**
         * shortcut for default Arguments which would be prepared by initializeArguments()
         *
         * @var array
         */
        protected $defaultArguments;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderUsesValueAsSourceIfSpecified() {}
        /**
         * @test
         */
        public function renderUsesChildnodesAsSourceIfSpecified() {}
        /**
         * @test
         */
        public function renderDoesNotModifyValueIfItDoesNotContainSpecialCharacters() {}
        /**
         * @test
         */
        public function renderDecodesSimpleString() {}
        /**
         * @test
         */
        public function renderRespectsKeepQuoteArgument() {}
        /**
         * @test
         */
        public function renderRespectsEncodingArgument() {}
        /**
         * @test
         */
        public function renderReturnsUnmodifiedSourceIfItIsNoString() {}
    }

    /**
     * Test case
     */
    class NumberViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var NumberViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function formatNumberDefaultsToEnglishNotationWithTwoDecimals() {}
        /**
         * @test
         */
        public function formatNumberWithDecimalPoint() {}
        /**
         * @test
         */
        public function formatNumberWithDecimals() {}
        /**
         * @test
         */
        public function formatNumberWithThousandsSeparator() {}
    }

    /**
     * Test case
     */
    class CaseViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var CaseViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperRendersChildrenIfGivenValueIsNull() {}
        /**
         * @test
         */
        public function viewHelperDoesNotRenderChildrenIfGivenValueIsNotNull() {}
        /**
         * @test
         */
        public function viewHelperThrowsExceptionIfIncorrectModeIsGiven() {}
        /**
         * @test
         */
        public function viewHelperConvertsUppercasePerDefault() {}
        /**
         * Signature: $input, $mode, $expected
         */
        public function conversionTestingDataProvider() {}
        public function viewHelperConvertsCorrectly($input, $mode, $expected) {}
    }

    /**
     * Test case
     */
    class BytesViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var BytesViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @return array
         */
        public function valueDataProvider() {}
        public function renderConvertsAValue($value, $decimals, $decimalSeparator, $thousandsSeparator, $expected) {}
        /**
         * @test
         */
        public function renderUsesChildNodesIfValueArgumentIsOmitted() {}
    }

    /**
     * Test case
     */
    class UrlencodeViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var UrlencodeViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderUsesValueAsSourceIfSpecified() {}
        /**
         * @test
         */
        public function renderUsesChildnodesAsSourceIfSpecified() {}
        /**
         * @test
         */
        public function renderDoesNotModifyValueIfItDoesNotContainSpecialCharacters() {}
        /**
         * @test
         */
        public function renderEncodesString() {}
        /**
         * @test
         */
        public function renderReturnsUnmodifiedSourceIfItIsNoString() {}
    }

    /**
     * Test case
     */
    class DateViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var DateViewHelper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;
        /**
         * @var string Backup of current timezone, it is manipulated in tests
         */
        protected $timezone;
        /**
         * @var DateViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        protected function tearDown() {}
        /**
         * @test
         */
        public function viewHelperFormatsDateCorrectly() {}
        /**
         * @test
         */
        public function viewHelperFormatsDateStringCorrectly() {}
        /**
         * @test
         */
        public function viewHelperRespectsCustomFormat() {}
        /**
         * @test
         */
        public function viewHelperSupportsDateTimeImmutable() {}
        /**
         * @test
         */
        public function viewHelperReturnsEmptyStringIfChildrenIsNULL() {}
        /**
         * @test
         */
        public function viewHelperReturnsCurrentDateIfEmptyStringIsGiven() {}
        /**
         * @test
         */
        public function viewHelperReturnsCurrentDateIfChildrenIsEmptyString() {}
        /**
         * @test
         */
        public function viewHelperUsesDefaultIfNoSystemFormatIsAvailable() {}
        /**
         * @test
         */
        public function viewHelperUsesSystemFormat() {}
        /**
         * @test
         */
        public function viewHelperThrowsExceptionWithOriginalMessageIfDateStringCantBeParsed() {}
        /**
         * @test
         */
        public function viewHelperUsesChildNodesIfDateAttributeIsNotSpecified() {}
        /**
         * @test
         */
        public function viewHelperUsesChildNodesWithTimestamp() {}
        /**
         * @test
         */
        public function dateArgumentHasPriorityOverChildNodes() {}
        /**
         * @test
         */
        public function relativeDateCalculationWorksWithoutBase() {}
        /**
         * @test
         */
        public function baseArgumentIsConsideredForRelativeDate() {}
        /**
         * @test
         */
        public function baseArgumentAsDateTimeIsConsideredForRelativeDate() {}
        /**
         * @test
         */
        public function baseArgumentDoesNotAffectAbsoluteTime() {}
        /**
         * Data provider for viewHelperRespectsDefaultTimezoneForIntegerTimestamp
         *
         * @return array
         */
        public function viewHelperRespectsDefaultTimezoneForIntegerTimestampDataProvider() {}
        public function viewHelperRespectsDefaultTimezoneForIntegerTimestamp($timezone, $expected) {}
        /**
         * Data provider for viewHelperRespectsDefaultTimezoneForStringTimestamp
         *
         * @return array
         */
        public function viewHelperRespectsDefaultTimezoneForStringTimestampDataProvider() {}
        public function viewHelperRespectsDefaultTimezoneForStringTimestamp($timeZone, $date, $expected) {}
        /**
         * Data provider for dateViewHelperFormatsDateLocalizedDataProvider
         *
         * @return array
         */
        public function dateViewHelperFormatsDateLocalizedDataProvider() {}
        public function dateViewHelperFormatsDateLocalized($locale, $expected) {}
    }

    /**
     * Test case
     */
    class CurrencyViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var CurrencyViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperRoundsFloatCorrectly() {}
        /**
         * @test
         */
        public function viewHelperRendersCurrencySign() {}
        /**
         * @test
         */
        public function viewHelperRendersPrependedCurrencySign() {}
        /**
         * @test
         */
        public function viewHelperRespectsCurrencySeparator() {}
        /**
         * @test
         */
        public function viewHelperRespectsDecimalSeparator() {}
        /**
         * @test
         */
        public function viewHelperRespectsThousandsSeparator() {}
        /**
         * @test
         */
        public function viewHelperRendersNullValues() {}
        /**
         * @test
         */
        public function viewHelperRendersEmptyString() {}
        /**
         * @test
         */
        public function viewHelperRendersZeroValues() {}
        /**
         * @test
         */
        public function viewHelperRendersNegativeAmounts() {}
        /**
         * @test
         */
        public function viewHelperRendersStringsToZeroValueFloat() {}
        /**
         * @test
         */
        public function viewHelperRendersCommaValuesToValueBeforeComma() {}
        /**
         * @test
         */
        public function viewHelperRendersValuesWithoutDecimals() {}
        /**
         * @test
         */
        public function viewHelperRendersThreeDecimals() {}
    }

    /**
     * Test case
     */
    class Nl2brViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var Nl2brViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function viewHelperDoesNotModifyTextWithoutLineBreaks() {}
        /**
         * @test
         */
        public function viewHelperConvertsLineBreaksToBRTags() {}
        /**
         * @test
         */
        public function viewHelperConvertsWindowsLineBreaksToBRTags() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Fixtures {
    /**
     * Fixture class for mocking static translate function
     */
    class TranslateViewHelperFixtureForEmptyString extends \typo3\cms\fluid\viewhelpers\translateviewhelper {
        protected static function translate($id, $extensionName, $arguments, $languageKey, $alternativeLanguageKeys) {}
    }

    /**
     * Fixture class for mocking static translate function
     */
    class TranslateViewHelperFixtureForTranslatedString extends \typo3\cms\fluid\viewhelpers\translateviewhelper {
        protected static function translate($id, $extensionName, $arguments) {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\ViewHelpers\Uri {
    /**
     * Class TypolinkViewHelperTest
     */
    class TypolinkViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @return array
         */
        public function typoScriptConfigurationData() {}
/** @var \TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function createTypolinkParameterFromArgumentsReturnsExpectedArray(/** @var \TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$input, /** @var \TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$additionalParametersFromFluid, /** @var \TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
$expected) {}
    }

    /**
     * Test-case for Link\PageViewHelper
     */
    class PageViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var PageViewHelper
         */
        protected $viewHelper;

        /**
         * setUp function
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function renderProvidesUriForValidLinkTarget() {}
        /**
         * @test
         */
        public function renderWillNotProvideUriForNonValidLinkTarget() {}
    }

    /**
     * Testcase for the external uri view helper
     */
    class ExternalViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Uri\ExternalViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderReturnsSpecifiedUri() {}
        /**
         * @test
         */
        public function renderAddsHttpPrefixIfSpecifiedUriDoesNotContainScheme() {}
        /**
         * @test
         */
        public function renderAddsSpecifiedSchemeIfUriDoesNotContainScheme() {}
        /**
         * @test
         */
        public function renderDoesNotAddEmptyScheme() {}
    }

    /**
     * Testcase for the email uri view helper
     */
    class EmailViewHelperTest extends \typo3\testingframework\fluid\unit\viewhelpers\viewhelperbasetestcase {
        /**
         * @var \TYPO3\CMS\Fluid\ViewHelpers\Uri\EmailViewHelper
         */
        protected $viewHelper;

        protected function setUp() {}
        /**
         * @test
         */
        public function renderReturnsFirstResultOfGetMailTo() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\View {
    /**
     * Test case
     */
    class StandaloneViewTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var StandaloneView|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $view;
        /**
         * @var \TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockRenderingContext;
        /**
         * @var ViewHelperVariableContainer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockViewHelperVariableContainer;
        /**
         * @var ControllerContext|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockControllerContext;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManager|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockObjectManager;
        /**
         * @var Request|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockRequest;
        /**
         * @var UriBuilder|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockUriBuilder;
        /**
         * @var ConfigurationManagerInterface|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockConfigurationManager;
        /**
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockContentObject;
        /**
         * @var TemplatePaths|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockTemplatePaths;
        /**
         * @var StandardVariableProvider|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockVariableProvider;
        /**
         * @var CacheManager|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $mockCacheManager;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         */
        protected function tearDown() {}
        public function objectManagerCallback($className) {}
        /**
         * @test
         */
        public function constructorSetsSpecifiedContentObject() {}
        /**
         * @test
         */
        public function constructorCreatesContentObjectIfItIsNotSpecified() {}
        /**
         * @test
         */
        public function constructorSetsRequestUri() {}
        /**
         * @test
         */
        public function constructorSetsBaseUri() {}
        /**
         * @test
         */
        public function constructorInjectsRequestToUriBuilder() {}
        /**
         * @test
         */
        public function constructorInjectsRequestToControllerContext() {}
        /**
         * @test
         */
        public function constructorInjectsUriBuilderToControllerContext() {}
        /**
         * @test
         */
        public function setFormatSetsRequestFormat() {}
    }

    /**
     * Test case
     */
    class TemplatePathsTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @return array
         */
        public function getPathSetterMethodTestValues() {}
        public function pathSetterMethodSortsPathsByKeyDescending($method, array $paths, array $expected) {}
        /**
         * @test
         */
        public function getContextSpecificViewConfigurationSortsTypoScriptConfiguredPathsCorrectlyInFrontendMode() {}
        /**
         * @test
         */
        public function getContextSpecificViewConfigurationSortsTypoScriptConfiguredPathsCorrectlyInBackendMode() {}
        /**
         * @test
         */
        public function getContextSpecificViewConfigurationDoesNotResolveFromTypoScriptAndDoesNotSortInUnspecifiedMode() {}
    }

    /**
     * Test case
     */
    class AbstractTemplateViewTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var AbstractTemplateView|AccessibleObjectInterface
         */
        protected $view;
        /**
         * @var RenderingContext|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $renderingContext;
        /**
         * @var ViewHelperVariableContainer|\PHPUnit_Framework_MockObject_MockObject
         */
        protected $viewHelperVariableContainer;

        /**
         * Sets up this test case
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function viewIsPlacedInViewHelperVariableContainer() {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Unit\View\Fixtures {
    /**
     * Fixture
     */
    class TemplateViewFixture extends \typo3\cms\fluid\view\templateview {
        public $syntaxTree;

        protected function resolveTemplateFile() {}
        protected function loadTemplateFile($templateFilePath) {}
    }

    /**
     * Fixture
     */
    class TransparentSyntaxTreeNode extends \typo3fluid\fluid\core\parser\syntaxtree\abstractnode {
        public $variableContainer;

        public function evaluate(\TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\Fluid\Tests\Functional {
    class EscapeChildrenRenderingTest extends \typo3\testingframework\core\functional\functionaltestcase {
        protected $testExtensionsToLoad;
        protected $coreExtensionsToLoad;

        public function viewHelperTemplateSourcesDataProvider() {}
        public function renderingTest($viewHelperTemplate, $expectedOutput) {}
    }

    class EscapeChildrenRenderingStandaloneTest extends \typo3\testingframework\core\functional\functionaltestcase {
        protected $testExtensionsToLoad;
        protected $coreExtensionsToLoad;

        public function viewHelperTemplateSourcesDataProvider() {}
        public function renderingTest($viewHelperTemplate, $expectedOutput) {}
    }

}

namespace TYPO3\CMS\Fluid\Tests\Functional\ViewHelpers {
    class TypolinkViewHelperTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;

        protected function setUp() {}
        public function renderCreatesCorrectLink(bool $addQueryString, string $addQueryStringMethod, string $addQueryStringExclude, string $expected, string $template) {}
        /**
         * @return array
         */
        public function renderCreatesCorrectLinkProvider() : array {}
    }

}

namespace TYPO3\Fluid\Tests\Functional\View {
    class TemplatesPathsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var array
         */
        protected $configurationToUseInTestInstance;

        public function setUp() {}
        /**
         * @return array
         */
        public function differentOverrideScenariosDataProvider() : array {}
        public function baseRenderingWorksForCObject($overrideType, $expectedTemplate, $expectedPartial, $expectedLayout) {}
        public function baseRenderingWorksForControllerAsGlobalUsage($overrideType, $expectedTemplate, $expectedPartial, $expectedLayout) {}
        public function baseRenderingWorksForControllerAsPluginUsage($overrideType, $expectedTemplate, $expectedPartial, $expectedLayout) {}
        public function baseRenderingWorksForControllerAsPluginUsageWithPluginConfig($overrideType, $expectedTemplate, $expectedPartial, $expectedLayout) {}
        /**
         * @test
         */
        public function widgetTemplateCanBeOverridden() {}
        /**
         * @test
         */
        public function widgetTemplateCanBeOverriddenWithLegacyConfig() {}
        /**
         * @test
         */
        public function baseRenderingWorksForControllerAsPluginUsageWithIncompleteConfig() {}
        /**
         * @test
         */
        public function baseRenderingWorksForControllerWithTwoPlugins() {}
        protected function fetchFrontendResponse(array $requestArguments, $failOnFailure = true) {}
    }

}

namespace TYPO3Fluid\FluidTest\ViewHelpers {
    /**
     * Class EscapeChildrenDisabledAndEscapeOutputDisabledViewHelper
     */
    class EscapeChildrenDisabledAndEscapeOutputDisabledViewHelper extends \typo3fluid\fluidtest\viewhelpers\abstractescapingbaseviewhelper {
        protected $escapeChildren;
        protected $escapeOutput;

    }

    /**
     * Class EscapeChildrenDisabledAndEscapeOutputEnabledViewHelper
     */
    class EscapeChildrenDisabledAndEscapeOutputEnabledViewHelper extends \typo3fluid\fluidtest\viewhelpers\abstractescapingbaseviewhelper {
        protected $escapeChildren;
        protected $escapeOutput;

    }

    /**
     * Class EscapeChildrenEnabledAndEscapeOutputDisabledViewHelper
     */
    class EscapeChildrenEnabledAndEscapeOutputDisabledViewHelper extends \typo3fluid\fluidtest\viewhelpers\abstractescapingbaseviewhelper {
        protected $escapeChildren;
        protected $escapeOutput;

    }

    /**
     * Class EscapeChildrenEnabledAndEscapeOutputEnabledViewHelper
     */
    class EscapeChildrenEnabledAndEscapeOutputEnabledViewHelper extends \typo3fluid\fluidtest\viewhelpers\abstractescapingbaseviewhelper {
        protected $escapeChildren;
        protected $escapeOutput;

    }

    /**
     * Class EscapingInterceptorDisabledViewHelper
     */
    abstract class AbstractEscapingBaseViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
        public function initializeArguments() {}
        /**
         * @return string
         */
        public function render() {}
    }

}

namespace TYPO3Fluid\FluidTest\Controller {
    /**
     * Class TemplateController
     */
    class TemplateController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        public function baseTemplateAction() {}
    }

}

namespace TYPO3\CMS\Tstemplate\Controller {
    /**
     * TypoScript template analyzer
     */
    class TemplateAnalyzerModuleFunctionController extends \typo3\cms\backend\module\abstractfunctionmodule {
        /**
         * @var TypoScriptTemplateModuleController
         */
        public $pObj;
        /**
         * @var string
         */
        protected $localLanguageFilePath;
        /**
         * The currently selected sys_template record
         * @var array
         */
        protected $templateRow;
        /**
         * @var ExtendedTemplateService
         */
        protected $templateService;

        public function init($pObj, $conf) {}
        /**
         * Mod menu
         *
         * @return array
         */
        public function modMenu() {}
        public function initialize_editor($pageId, $templateUid = 0) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
    }

    /**
     * Module: TypoScript Tools
     */
    class TypoScriptTemplateModuleController extends \typo3\cms\backend\module\basescriptclass {
        /**
         * @var string
         */
        public $perms_clause;
        /**
         * @var string
         */
        public $sObj;
        /**
         * @var string
         */
        public $edit;
        /**
         * @var string
         */
        public $textExtensions;
        /**
         * @var string
         */
        public $modMenu_type;
        /**
         * @var string
         */
        public $modMenu_dontValidateList;
        /**
         * @var string
         */
        public $modMenu_setDefaultList;
        /**
         * @var array
         */
        public $pageinfo;
        /**
         * @var bool
         */
        public $access;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;
        /**
         * ModuleTemplate Container
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * @var ExtendedTemplateService
         */
        protected $templateService;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Init
         */
        public function init() {}
        /**
         * Clear cache
         */
        public function clearCache() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        /**
         * Generates the menu based on $this->MOD_MENU
         *
         * @throws \InvalidArgumentException
         */
        protected function generateMenu() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function linkWrapTemplateTitle(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$title, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$onlyKey = '') {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function noTemplate(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$newStandardTemplate = 0) {}
        /**
         * Render template menu
         *
         * @return string
         */
        public function templateMenu() {}
/** @var DataHandler $tce */
        public function createTemplate(/** @var DataHandler $tce */
$id, /** @var DataHandler $tce */
$actTemplateId = 0) {}
        public function setInPageArray($pArray, $rlArr, $row) {}
        public function renderList($pArray, $lines = [ ], $c = 0) {}
/** @var StandaloneView $view */
        protected function getFluidTemplateObject(/** @var StandaloneView $view */
$extensionName, /** @var StandaloneView $view */
$templateName = 'Main') {}
        protected function getHookObjectForAction($action) {}
    }

    /**
     * This class displays the submodule "TypoScript Object Browser" inside the Web > Template module
     */
    class TypoScriptTemplateObjectBrowserModuleFunctionController extends \typo3\cms\backend\module\abstractfunctionmodule {
        /**
         * @var string
         */
        protected $localLanguageFilePath;
        /**
         * @var TypoScriptTemplateModuleController
         */
        public $pObj;
        /**
         * The currently selected sys_template record
         * @var array
         */
        protected $templateRow;
        /**
         * @var ExtendedTemplateService
         */
        protected $templateService;

        public function init($pObj, $conf) {}
        /**
         * Mod menu
         *
         * @return array
         */
        public function modMenu() {}
        public function initialize_editor($pageId, $template_uid = 0) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        protected function addFlashMessage(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
FlashMessage $flashMessage) {}
    }

    /**
     * TypoScript Constant editor
     */
    class TypoScriptTemplateConstantEditorModuleFunctionController extends \typo3\cms\backend\module\abstractfunctionmodule {
        /**
         * @var TypoScriptTemplateModuleController
         */
        public $pObj;
        /**
         * The currently selected sys_template record
         * @var array
         */
        protected $templateRow;
        /**
         * @var ExtendedTemplateService
         */
        protected $templateService;
        /**
         * @var array
         */
        protected $constants;

        public function initialize_editor($pageId, $template_uid = 0) {}
        /**
         * Main
         *
         * @return string
         */
        public function main() {}
    }

    /**
     * This class displays the Info/Modify screen of the Web > Template module
     */
    class TypoScriptTemplateInformationModuleFunctionController extends \typo3\cms\backend\module\abstractfunctionmodule {
        /**
         * Indicator for t3editor, whether data is stored
         *
         * @var bool
         */
        public $tce_processed;
        /**
         * @var TypoScriptTemplateModuleController
         */
        public $pObj;
        /**
         * The currently selected sys_template record
         * @var array
         */
        protected $templateRow;
        /**
         * @var ExtendedTemplateService
         */
        protected $templateService;

/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function tableRowData(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$label, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$data, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$field, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$id) {}
        public function initialize_editor($pageId, $template_uid = 0) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
    }

}

namespace TYPO3\CMS\InfoPagetsconfig\Controller {
    class InfoPageTyposcriptConfigController extends \typo3\cms\info\controller\infopagetyposcriptconfigcontroller {}

}

namespace TYPO3\CMS\Info\Controller {
    /**
     * Class for displaying translation status of pages in the tree.
     */
    class TranslationStatusController extends \typo3\cms\backend\module\abstractfunctionmodule {
        /**
         * @var IconFactory
         */
        protected $iconFactory;

        /**
         * Construct for initialize class variables
         */
        public function __construct() {}
        /**
         * Returns the menu array
         *
         * @return array
         */
        public function modMenu() {}
        /**
         * MAIN function for page information of localization
         *
         * @return string Output HTML for the module.
         */
        public function main() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function renderL10nTable(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$tree) {}
        /**
         * Selects all system languages (from sys_language)
         *
         * @return array System language records in an array.
         */
        public function getSystemLanguages() {}
        public function getLangStatus($pageId, $langId) {}
        public function getContentElementCount($pageId, $sysLang) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Page TSconfig viewer
     */
    class InfoPageTyposcriptConfigController extends \typo3\cms\backend\module\abstractfunctionmodule {
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var StandaloneView
         */
        protected $view;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Function menu initialization
         *
         * @return array Menu array
         */
        public function modMenu() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function main() {}
        /**
         * Renders table rows of all pages containing TSConfig together with its rootline
         *
         * @return array
         */
        protected function getOverviewOfPagesUsingTSConfig() {}
        protected function setInPageArray($hierarchicArray, $rootlineArray, $row) {}
        protected function extractLinesFromTSConfig(array $row) {}
        protected function getList($pageArray, $lines = [ ], $pageDepth = 0) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * returns a new standalone view, shorthand function
         *
         * @return StandaloneView
         */
        protected function getFluidTemplateObject() {}
    }

    /**
     * Script Class for the Web > Info module
     * This class creates the framework to which other extensions can connect their sub-modules
     */
    class InfoModuleController extends \typo3\cms\backend\module\basescriptclass {
        /**
         * @var array
         */
        public $pageinfo;
        /**
         * @var \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected $backendUser;
        /**
         * @var \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected $languageService;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;
        /**
         * ModuleTemplate Container
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * @var StandaloneView
         */
        protected $view;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialize module header etc and call extObjContent function
         */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         */
        protected function getButtons() {}
        /**
         * Generate the ModuleMenu
         */
        protected function generateMenu() {}
        /**
         * Returns the ModuleTemplate container
         * This is used by PageLayoutView.php
         *
         * @return ModuleTemplate
         */
        public function getModuleTemplate() {}
        /** @var StandaloneView $view */
        protected function getFluidTemplateObject() {}
    }

    /**
     * Class for displaying page information (records, page record properties)
     */
    class PageInformationController extends \typo3\cms\backend\module\abstractfunctionmodule {
        /**
         * Returns the menu array
         *
         * @return array
         */
        public function modMenu() {}
        /**
         * MAIN function for page information display
         *
         * @return string Output HTML for the module.
         */
        public function main() {}
        /**
         * Function, which fills in the internal array, $this->allowedTableNames with all tables to
         * which the user has access. Also a set of standard tables (pages, sys_filemounts, etc...)
         * are filtered out. So what is left is basically all tables which makes sense to list content from.
         *
         * @return string[]
         */
        protected function cleanTableNames() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Lang\Controller {
    /**
     * Language controller
     */
    class LanguageController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var string
         */
        protected $defaultViewObjectName;
        /**
         * @var BackendTemplateView
         */
        protected $view;
        /**
         * @var \TYPO3\CMS\Lang\Domain\Repository\LanguageRepository
         */
        protected $languageRepository;
        /**
         * @var \TYPO3\CMS\Lang\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;
        /**
         * @var \TYPO3\CMS\Lang\Service\TranslationService
         */
        protected $translationService;
        /**
         * @var \TYPO3\CMS\Lang\Service\RegistryService
         */
        protected $registryService;

        public function injectLanguageRepository(LanguageRepository $languageRepository) {}
        public function injectExtensionRepository(ExtensionRepository $extensionRepository) {}
        public function injectTranslationService(TranslationService $translationService) {}
        public function injectRegistryService(RegistryService $registryService) {}
        /**
         * List languages
         */
        public function listLanguagesAction() {}
        /**
         * List translations
         */
        public function listTranslationsAction() {}
        /**
         * Returns the translations
         */
        public function getTranslationsAction() {}
/** @var Extension $extension */
        public function updateLanguageAction(/** @var Extension $extension */
array $data) {}
        public function updateTranslationAction(array $data) {}
        public function activateLanguageAction(array $data) {}
        public function deactivateLanguageAction(array $data) {}
        public function removeLanguageAction(array $data) {}
        /**
         * DocHeaderMenu
         */
        protected function prepareDocHeaderMenu() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * DocHeaderButtons
         */
        protected function prepareDocHeaderButtons() {}
    }

}

namespace TYPO3\CMS\Lang\View {
    /**
     * Base class for JSON views
     */
    abstract class AbstractJsonView extends \typo3\cms\extbase\mvc\view\abstractview {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;

        public function injectObjectManager(ObjectManagerInterface $objectManager) {}
        /**
         * Render template content
         */
        public function render() {}
        /**
         * Returns the response data
         *
         * @return array The response data
         */
        abstract protected function getResponseData() ;
        protected function sendResponse(array $data) {}
    }

}

namespace TYPO3\CMS\Lang\View\Language {
    /**
     * JSON view for "getTranslations" action in "Language" controller
     */
    class GetTranslationsJson extends \typo3\cms\lang\view\abstractjsonview {
        /** @var $language \TYPO3\CMS\Lang\Domain\Model\Language */
        protected function getResponseData() {}
    }

    /**
     * JSON view for "activateLanguage" action in "Language" controller
     */
    class ActivateLanguageJson extends \typo3\cms\lang\view\abstractjsonview {
        /**
         * Returns the response data
         *
         * @return array The response data
         */
        protected function getResponseData() {}
    }

    /**
     * JSON view for "removeLanguage" action in "Language" controller
     */
    class RemoveLanguageJson extends \typo3\cms\lang\view\abstractjsonview {
        /**
         * Returns the response data
         *
         * @return array The response data
         */
        protected function getResponseData() {}
    }

    /**
     * JSON view for "updateLanguage" action in "Language" controller
     */
    class UpdateLanguageJson extends \typo3\cms\lang\view\abstractjsonview {
        /**
         * Returns the response data
         *
         * @return array The response data
         */
        protected function getResponseData() {}
    }

    /**
     * JSON view for "updateTranslation" action in "Language" controller
     */
    class UpdateTranslationJson extends \typo3\cms\lang\view\abstractjsonview {
        /**
         * Returns the response data
         *
         * @return array The response data
         */
        protected function getResponseData() {}
    }

    /**
     * JSON view for "deactivateLanguage" action in "Language" controller
     */
    class DeactivateLanguageJson extends \typo3\cms\lang\view\abstractjsonview {
        /**
         * Returns the response data
         *
         * @return array The response data
         */
        protected function getResponseData() {}
    }

}

namespace TYPO3\CMS\Lang\Command {
    /**
     * Core function for updating the language files
     */
    class LanguageUpdateCommand extends \symfony\component\console\command\command {
        /**
         * @var ObjectManagerInterface
         */
        protected $objectManager;

        public function __construct($name = null) {}
        /**
         * Configure the command by defining the name, options and arguments
         */
        protected function configure() {}
/** @var PackageInterface $package */
        protected function execute(/** @var PackageInterface $package */
InputInterface $input, /** @var PackageInterface $package */
OutputInterface $output) {}
        /**
         * Emits packages may have changed signal
         *
         * @throws \TYPO3\CMS\Extbase\SignalSlot\Exception\InvalidSlotException
         * @throws \TYPO3\CMS\Extbase\SignalSlot\Exception\InvalidSlotReturnException
         */
        protected function emitPackagesMayHaveChangedSignal() {}
    }

}

namespace TYPO3\CMS\Lang\Service {
    /**
     * Extends of extensionmanager ter connection to enrich with translation
     * related methods
     */
    class TerService extends \typo3\cms\extensionmanager\utility\connection\terutility implements \typo3\cms\core\singletoninterface {
        public function fetchTranslationStatus($extensionKey, $mirrorUrl) {}
        protected function parseL10nXML($string) {}
        public function updateTranslation($extensionKey, $language, $mirrorUrl) {}
        protected function fetchTranslation($extensionKey, $language, $mirrorUrl) {}
        protected function unzipTranslationFile($file, $path) {}
    }

    /**
     * Registry service
     */
    class RegistryService {
        /**
         * @var \TYPO3\CMS\Core\Registry
         */
        protected $registry;
        /**
         * @var string
         */
        protected $namespaceIdentifier;

        public function injectRegistry(Registry $registry) {}
        public function setNamespace($namespace) {}
        /**
         * Get namespace
         *
         * @return string The namespace
         */
        public function getNamespace() {}
        public function has($name, $namespace = null) {}
        public function get($name, $namespace = null) {}
        public function set($name, $value, $namespace = null) {}
        public function remove($name, $namespace = null) {}
    }

    /**
     * Translation service
     */
    class TranslationService implements \typo3\cms\core\singletoninterface {
        const TRANSLATION_UPDATED = 5;
        const TRANSLATION_INVALID = 4;
        const TRANSLATION_OK = 3;
        const TRANSLATION_FAILED = 2;
        const TRANSLATION_AVAILABLE = 1;
        const TRANSLATION_NOT_AVAILABLE = 0;

        /**
         * @var \TYPO3\CMS\Lang\Service\TerService
         */
        protected $terService;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * @var string
         */
        protected $mirrorUrl;

        public function injectTerService(TerService $terService) {}
        public function injectSignalSlotDispatcher(Dispatcher $signalSlotDispatcher) {}
        public function injectRepositoryHelper(Helper $helper) {}
        public function updateTranslation($extensionKey, $locales) {}
        protected function updateTranslationForExtension($extensionKey, $locale) {}
        protected function getMirrorUrl($extensionKey) {}
    }

}

namespace TYPO3\CMS\Lang\Domain\Repository {
    /**
     * Extension repository
     */
    class ExtensionRepository {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ListUtility
         */
        protected $listUtility;
        /**
         * @var array
         */
        protected $extensions;

        public function injectObjectManager(ObjectManagerInterface $objectManager) {}
        public function injectListUtility(ListUtility $listUtility) {}
        /**
         * Returns all objects of this repository
         *
         * @return array The extensions
         */
        public function findAll() {}
        /**
         * Counts all objects of this repository
         *
         * @return int The extension count
         */
        public function countAll() {}
        public function findOneByOffset($offset) {}
        protected function getExtensionIconWithPath($extensionEntry) {}
    }

    /**
     * Language repository
     */
    class LanguageRepository {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Core\Localization\Locales
         */
        protected $locales;
        /**
         * @var \TYPO3\CMS\Lang\Domain\Model\Language[]
         */
        protected $selectedLocales;
        /**
         * @var \TYPO3\CMS\Lang\Domain\Model\Language[]
         */
        protected $languages;
        /**
         * @var string
         */
        protected $configurationPath;
        /**
         * @var \TYPO3\CMS\Lang\Service\RegistryService
         */
        protected $registryService;

        public function injectObjectManager(ObjectManagerInterface $objectManager) {}
        public function injectLocales(Locales $locales) {}
        public function injectRegistryService(RegistryService $registryService) {}
        /**
         * Constructor of the language repository
         */
        public function __construct() {}
        /**
         * Returns all objects of this repository
         *
         * @return \TYPO3\CMS\Lang\Domain\Model\Language[] The language objects
         */
        public function findAll() {}
        /**
         * Find selected languages
         *
         * @return \TYPO3\CMS\Lang\Domain\Model\Language[] The language objects
         */
        public function findSelected() {}
        public function updateSelectedLanguages($languages) {}
        public function activateByLocale($locale) {}
        public function deactivateByLocale($locale) {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Lang\Domain\Model {
    /**
     * Language model
     */
    class Language extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $locale;
        /**
         * @var string
         */
        protected $label;
        /**
         * @var bool
         */
        protected $selected;
        /**
         * @var int
         */
        protected $lastUpdate;

        public function __construct($locale = '', $label = '', $selected = false, $lastUpdate = null) {}
        /**
         * @return int
         */
        public function getLastUpdate() {}
        public function setLastUpdate($lastUpdate) {}
        public function setLabel($language) {}
        /**
         * Getter for the language
         *
         * @return string
         */
        public function getLabel() {}
        public function setLocale($locale) {}
        /**
         * Getter for the locale
         *
         * @return string
         */
        public function getLocale() {}
        public function setSelected($selected) {}
        /**
         * Getter for the selected
         *
         * @return bool
         */
        public function getSelected() {}
        /**
         * Returns an array represetation of current model
         *
         * @return array The properties
         */
        public function toArray() {}
    }

    /**
     * Extension model
     */
    class Extension extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $key;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $icon;
        /**
         * @var int
         */
        protected $iconWidth;
        /**
         * @var int
         */
        protected $iconHeight;
        /**
         * @var int
         */
        protected $version;
        /**
         * @var array
         */
        protected $updateResult;

        public function __construct($key = '', $title = '', $icon = '') {}
        public function setIcon($icon) {}
        /**
         * Getter for the icon
         *
         * @return string ext_icon path relative to typo3 folder
         */
        public function getIcon() {}
        /**
         * @return int
         */
        public function getIconWidth() {}
        public function setIconWidth($iconWidth) {}
        /**
         * @return int
         */
        public function getIconHeight() {}
        public function setIconHeight($iconHeight) {}
        public function setKey($key) {}
        /**
         * Getter for the key
         *
         * @return string
         */
        public function getKey() {}
        public function setTitle($title) {}
        /**
         * Getter for the title
         *
         * @return string
         */
        public function getTitle() {}
        public function setVersion($version) {}
        public function setVersionFromString($version) {}
        /**
         * Getter for the version
         *
         * @return int interpretation of the extension version
         */
        public function getVersion() {}
        public function setUpdateResult($updateResult) {}
        /**
         * Getter for updateResult
         *
         * @return array returns the update result as an array in the structure like array('icon' => '', 'message' => '')
         */
        public function getUpdateResult() {}
        /**
         * Returns an array represetation of current model
         *
         * @return array The properties
         */
        public function toArray() {}
    }

}

namespace TYPO3\CMS\Lang\Exception {
    /**
     * An exception when something is wrong within parsing the xml
     */
    class XmlParser extends \typo3\cms\lang\exception {}

    /**
     * An exception when something is wrong within the language
     */
    class Language extends \typo3\cms\lang\exception {}

    /**
     * An exception when something is wrong within the ter
     */
    class Ter extends \typo3\cms\lang\exception {}

}

namespace TYPO3\CMS\Lang\Tests\Unit\Domain\Model {
    /**
     * Testcase for Extension
     */
    class ExtensionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Lang\Domain\Model\Extension
         */
        protected $subject;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getKeyInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function getKeyInitiallyReturnsGivenKeyFromConstruct() {}
        /**
         * @test
         */
        public function setKeySetsKey() {}
        /**
         * @test
         */
        public function getTitleInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function getTitleInitiallyReturnsGivenTitleFromConstruct() {}
        /**
         * @test
         */
        public function setTitleSetsTitle() {}
        /**
         * @test
         */
        public function getIconInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function getIconInitiallyReturnsGivenIconFromConstruct() {}
        /**
         * @test
         */
        public function setIconSetsIcon() {}
        /**
         * @test
         */
        public function getVersionInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function setVersionSetsVersion() {}
        /**
         * @test
         */
        public function setVersionSetsVersionFromString() {}
        /**
         * @test
         */
        public function getUpdateResultInitiallyReturnsEmptyArray() {}
        /**
         * @test
         */
        public function setUpdateResultSetsUpdateResult() {}
    }

    /**
     * Testcase for Language
     */
    class LanguageTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Lang\Domain\Model\Language
         */
        protected $subject;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getLocaleInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function getLocaleInitiallyReturnsGivenLocaleFromConstruct() {}
        /**
         * @test
         */
        public function setLocaleSetsLocale() {}
        /**
         * @test
         */
        public function getLanguageInitiallyReturnsEmptyString() {}
        /**
         * @test
         */
        public function getLanguageInitiallyReturnsGivenLanguageFromConstruct() {}
        /**
         * @test
         */
        public function setLanguageSetsLanguage() {}
        /**
         * @test
         */
        public function getSelectedInitiallyReturnsFalse() {}
        /**
         * @test
         */
        public function getSelectedInitiallyReturnsGivenSelectedFromConstruct() {}
        /**
         * @test
         */
        public function setSelectedSetsSelected() {}
    }

}

namespace TYPO3\CMS\Saltedpasswords {
    /**
     * Class implements salted-password hashes authentication service.
     * Contains authentication service class for salted hashed passwords.
     */
    class SaltedPasswordService extends \typo3\cms\core\authentication\abstractauthenticationservice {
        /**
         * Keeps class name.
         *
         * @var string
         */
        public $prefixId;
        /**
         * Keeps extension key.
         *
         * @var string
         */
        public $extKey;
        /**
         * Keeps extension configuration.
         *
         * @var mixed
         */
        protected $extConf;
        /**
         * An instance of the salted hashing method.
         * This member is set in the getSaltingInstance() function.
         *
         * @var \TYPO3\CMS\Saltedpasswords\Salt\SaltInterface
         */
        protected $objInstanceSaltedPW;
        /**
         * Indicates whether the salted password authentication has failed.
         *
         * Prevents authentication bypass. See vulnerability report:
         * { @link http://forge.typo3.org/issues/22030 }
         *
         * @var bool
         */
        protected $authenticationFailed;

        /**
         * Checks if service is available. In case of this service we check that
         * following prerequesties are fulfilled:
         * - loginSecurityLevel of according TYPO3_MODE is set to normal
         *
         * @return bool TRUE if service is available
         */
        public function init() {}
        public function compareUident(array $user, array $loginData, $passwordCompareStrategy = '') {}
        public function authUser(array $user) {}
        protected function updatePassword($uid, $updateFields) {}
/** @var TimeTracker $timeTracker */
        public function writeLogMessage(/** @var TimeTracker $timeTracker */
$message, /** @var TimeTracker $timeTracker */
$params) {}
    }

}

namespace TYPO3\CMS\Saltedpasswords\Salt {
    /**
     * Class that implements Blowfish salted hashing based on PHP's
     * crypt() function.
     *
     * Warning: Blowfish salted hashing with PHP's crypt() is not available
     * on every system.
     */
    class BlowfishSalt extends \typo3\cms\saltedpasswords\salt\md5salt {
        const HASH_COUNT = 7;
        const MAX_HASH_COUNT = 17;
        const MIN_HASH_COUNT = 4;

        /**
         * Keeps log2 number
         * of iterations for password stretching.
         *
         * @var int
         */
        static protected $hashCount;
        /**
         * Keeps maximum allowed log2 number
         * of iterations for password stretching.
         *
         * @var int
         */
        static protected $maxHashCount;
        /**
         * Keeps minimum allowed log2 number
         * of iterations for password stretching.
         *
         * @var int
         */
        static protected $minHashCount;
        /**
         * Keeps length of a Blowfish salt in bytes.
         *
         * @var int
         */
        static protected $saltLengthBlowfish;
        /**
         * Setting string to indicate type of hashing method (blowfish).
         *
         * @var string
         */
        static protected $settingBlowfish;

        protected function applySettingsToSalt(string $salt) : string {}
        protected function getCountLog2(string $setting) : int {}
        /**
         * Method returns log2 number of iterations for password stretching.
         *
         * @return int log2 number of iterations for password stretching
         * @see HASH_COUNT
         * @see $hashCount
         * @see setHashCount()
         */
        public function getHashCount() : int {}
        /**
         * Method returns maximum allowed log2 number of iterations for password stretching.
         *
         * @return int Maximum allowed log2 number of iterations for password stretching
         * @see MAX_HASH_COUNT
         * @see $maxHashCount
         * @see setMaxHashCount()
         */
        public function getMaxHashCount() : int {}
        /**
         * Returns whether all prerequisites for the hashing methods are matched
         *
         * @return bool Method available
         */
        public function isAvailable() : bool {}
        /**
         * Method returns minimum allowed log2 number of iterations for password stretching.
         *
         * @return int Minimum allowed log2 number of iterations for password stretching
         * @see MIN_HASH_COUNT
         * @see $minHashCount
         * @see setMinHashCount()
         */
        public function getMinHashCount() : int {}
        /**
         * Returns length of a Blowfish salt in bytes.
         *
         * Overwrites {@link Md5Salt::getSaltLength()}
         * with Blowfish specifics.
         *
         * @return int Length of a Blowfish salt in bytes
         */
        public function getSaltLength() : int {}
        /**
         * Returns setting string of Blowfish salted hashes.
         *
         * Overwrites {@link Md5Salt::getSetting()}
         * with Blowfish specifics.
         *
         * @return string Setting string of Blowfish salted hashes
         */
        public function getSetting() : string {}
        public function isHashUpdateNeeded(string $saltedPW) : bool {}
        public function isValidSalt(string $salt) : bool {}
        public function isValidSaltedPW(string $saltedPW) : bool {}
        public function setHashCount(int $hashCount = null) {}
        public function setMaxHashCount(int $maxHashCount = null) {}
        public function setMinHashCount(int $minHashCount = null) {}
    }

    /**
     * Class that implements PBKDF2 salted hashing based on PHP's
     * hash_pbkdf2() function.
     */
    class Pbkdf2Salt extends \typo3\cms\saltedpasswords\salt\abstractcomposedsalt {
        const MIN_HASH_COUNT = 1000;
        const MAX_HASH_COUNT = 10000000;
        const ITOA64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        const HASH_COUNT = 25000;

        /**
         * Keeps number of iterations for password stretching.
         *
         * @var int
         */
        static protected $hashCount;
        /**
         * Keeps maximum allowed number of iterations for password stretching.
         *
         * @var int
         */
        static protected $maxHashCount;
        /**
         * Keeps minimum allowed number of iterations for password stretching.
         *
         * @var int
         */
        static protected $minHashCount;
        /**
         * Keeps length of a PBKDF2 salt in bytes.
         *
         * @var int
         */
        static protected $saltLengthPbkdf2;
        /**
         * Setting string to indicate type of hashing method (PBKDF2).
         *
         * @var string
         */
        static protected $settingPbkdf2;

        protected function applySettingsToSalt(string $salt) : string {}
        public function checkPassword(string $plainPW, string $saltedHashPW) : bool {}
        protected function getIterationCount(string $setting) {}
        /**
         * Generates a random base 64-encoded salt prefixed and suffixed with settings for the hash.
         *
         * Proper use of salts may defeat a number of attacks, including:
         * - The ability to try candidate passwords against multiple hashes at once.
         * - The ability to use pre-hashed lists of candidate passwords.
         * - The ability to determine whether two users have the same (or different)
         * password without actually having to guess one of the passwords.
         *
         * @return string A character string containing settings and a random salt
         */
        protected function getGeneratedSalt() : string {}
        protected function getStoredSalt(string $salt) : string {}
        /**
         * Returns a string for mapping an int to the corresponding base 64 character.
         *
         * @return string String for mapping an int to the corresponding base 64 character
         */
        protected function getItoa64() : string {}
        public function getHashedPassword(string $password, string $salt = null) {}
        /**
         * Method returns number of iterations for password stretching.
         *
         * @return int number of iterations for password stretching
         * @see HASH_COUNT
         * @see $hashCount
         * @see setHashCount()
         */
        public function getHashCount() : int {}
        /**
         * Method returns maximum allowed number of iterations for password stretching.
         *
         * @return int Maximum allowed number of iterations for password stretching
         * @see MAX_HASH_COUNT
         * @see $maxHashCount
         * @see setMaxHashCount()
         */
        public function getMaxHashCount() : int {}
        /**
         * Returns whether all prerequisites for the hashing methods are matched
         *
         * @return bool Method available
         */
        public function isAvailable() : bool {}
        /**
         * Method returns minimum allowed number of iterations for password stretching.
         *
         * @return int Minimum allowed number of iterations for password stretching
         * @see MIN_HASH_COUNT
         * @see $minHashCount
         * @see setMinHashCount()
         */
        public function getMinHashCount() : int {}
        /**
         * Returns length of a PBKDF2 salt in bytes.
         *
         * Overwrites {@link Md5Salt::getSaltLength()}
         * with PBKDF2 specifics.
         *
         * @return int Length of a PBKDF2 salt in bytes
         */
        public function getSaltLength() : int {}
        /**
         * Returns setting string of PBKDF2 salted hashes.
         *
         * Overwrites {@link Md5Salt::getSetting()}
         * with PBKDF2 specifics.
         *
         * @return string Setting string of PBKDF2 salted hashes
         */
        public function getSetting() : string {}
        public function isHashUpdateNeeded(string $saltedPW) : bool {}
        public function isValidSalt(string $salt) : bool {}
        public function isValidSaltedPW(string $saltedPW) : bool {}
        public function setHashCount(int $hashCount = null) {}
        public function setMaxHashCount(int $maxHashCount = null) {}
        public function setMinHashCount(int $minHashCount = null) {}
        public function base64Encode(string $input, int $count) : string {}
        public function base64Decode(string $value) : string {}
    }

    /**
     * Class that implements PHPass salted hashing based on Drupal's
     * modified Openwall implementation.
     *
     * Derived from Drupal CMS
     * original license: GNU General Public License (GPL)
     *
     * PHPass should work on every system.
     * @see http://drupal.org/node/29706/
     * @see http://www.openwall.com/phpass/
     */
    class PhpassSalt extends \typo3\cms\saltedpasswords\salt\abstractcomposedsalt {
        const MAX_HASH_COUNT = 24;
        const HASH_COUNT = 14;
        const ITOA64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        const MIN_HASH_COUNT = 7;

        /**
         * Keeps log2 number
         * of iterations for password stretching.
         *
         * @var int
         */
        static protected $hashCount;
        /**
         * Keeps maximum allowed log2 number
         * of iterations for password stretching.
         *
         * @var int
         */
        static protected $maxHashCount;
        /**
         * Keeps minimum allowed log2 number
         * of iterations for password stretching.
         *
         * @var int
         */
        static protected $minHashCount;
        /**
         * Keeps length of a PHPass salt in bytes.
         *
         * @var int
         */
        static protected $saltLengthPhpass;
        /**
         * Setting string to indicate type of hashing method (PHPass).
         *
         * @var string
         */
        static protected $settingPhpass;

        protected function applySettingsToSalt(string $salt) : string {}
        public function checkPassword(string $plainPW, string $saltedHashPW) : bool {}
        /**
         * Returns whether all prerequisites for the hashing methods are matched
         *
         * @return bool Method available
         */
        public function isAvailable() : bool {}
        protected function cryptPassword(string $password, string $setting) {}
        protected function getCountLog2(string $setting) : int {}
        /**
         * Generates a random base 64-encoded salt prefixed and suffixed with settings for the hash.
         *
         * Proper use of salts may defeat a number of attacks, including:
         * - The ability to try candidate passwords against multiple hashes at once.
         * - The ability to use pre-hashed lists of candidate passwords.
         * - The ability to determine whether two users have the same (or different)
         * password without actually having to guess one of the passwords.
         *
         * @return string A character string containing settings and a random salt
         */
        protected function getGeneratedSalt() : string {}
        /**
         * Method returns log2 number of iterations for password stretching.
         *
         * @return int log2 number of iterations for password stretching
         * @see HASH_COUNT
         * @see $hashCount
         * @see setHashCount()
         */
        public function getHashCount() : int {}
        public function getHashedPassword(string $password, string $salt = null) {}
        /**
         * Returns a string for mapping an int to the corresponding base 64 character.
         *
         * @return string String for mapping an int to the corresponding base 64 character
         */
        protected function getItoa64() : string {}
        /**
         * Method returns maximum allowed log2 number of iterations for password stretching.
         *
         * @return int Maximum allowed log2 number of iterations for password stretching
         * @see MAX_HASH_COUNT
         * @see $maxHashCount
         * @see setMaxHashCount()
         */
        public function getMaxHashCount() : int {}
        /**
         * Method returns minimum allowed log2 number of iterations for password stretching.
         *
         * @return int Minimum allowed log2 number of iterations for password stretching
         * @see MIN_HASH_COUNT
         * @see $minHashCount
         * @see setMinHashCount()
         */
        public function getMinHashCount() : int {}
        /**
         * Returns length of a Blowfish salt in bytes.
         *
         * @return int Length of a Blowfish salt in bytes
         */
        public function getSaltLength() : int {}
        /**
         * Returns setting string of PHPass salted hashes.
         *
         * @return string Setting string of PHPass salted hashes
         */
        public function getSetting() : string {}
        public function isHashUpdateNeeded(string $passString) : bool {}
        public function isValidSalt(string $salt) : bool {}
        public function isValidSaltedPW(string $saltedPW) : bool {}
        public function setHashCount(int $hashCount = null) {}
        public function setMaxHashCount(int $maxHashCount = null) {}
        public function setMinHashCount(int $minHashCount = null) {}
    }

    /**
     * Class that implements Blowfish salted hashing based on PHP's
     * crypt() function.
     */
    class SaltFactory {
        /**
         * An instance of the salted hashing method.
         * This member is set in the getSaltingInstance() function.
         *
         * @var SaltInterface
         */
        static protected $instance;

        /**
         * Returns list of all registered hashing methods. Used eg. in
         * extension configuration to select the default hashing method.
         *
         * @return array
         */
        public static function getRegisteredSaltedHashingMethods() : array {}
        /**
         * Returns an array with default salt method class names.
         *
         * @return array
         */
        protected static function getDefaultSaltMethods() : array {}
        public static function getSaltingInstance($saltedHash = '', $mode = TYPO3_MODE) {}
        public static function determineSaltingHashingMethod(string $saltedHash, $mode = TYPO3_MODE) : bool {}
        public static function setPreferredHashingMethod(string $resource) {}
    }

    /**
     * Abstract class with methods needed to be extended
     * in a salted hashing class that composes an own salted password hash.
     */
    abstract class AbstractComposedSalt implements \typo3\cms\saltedpasswords\salt\saltinterface {
        abstract protected function applySettingsToSalt(string $salt) : string ;
        /**
         * Generates a random base salt settings for the hash.
         *
         * @return string A string containing settings and a random salt
         */
        abstract protected function getGeneratedSalt() : string ;
        /**
         * Returns a string for mapping an int to the corresponding base 64 character.
         *
         * @return string String for mapping an int to the corresponding base 64 character
         */
        abstract protected function getItoa64() : string ;
        /**
         * Returns setting string to indicate type of hashing method.
         *
         * @return string Setting string of hashing method
         */
        abstract protected function getSetting() : string ;
        /**
         * Returns length of required salt.
         *
         * @return int Length of required salt
         */
        abstract public function getSaltLength() : int ;
        abstract public function isValidSalt(string $salt) : bool ;
        public function base64Encode(string $input, int $count) : string {}
        protected function getLengthBase64FromBytes(int $byteLength) : int {}
    }

    /**
     * Class that implements MD5 salted hashing based on PHP's
     * crypt() function.
     *
     * MD5 salted hashing with PHP's crypt() should be available
     * on most of the systems.
     */
    class Md5Salt extends \typo3\cms\saltedpasswords\salt\abstractcomposedsalt {
        const ITOA64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

        /**
         * Keeps length of a MD5 salt in bytes.
         *
         * @var int
         */
        static protected $saltLengthMD5;
        /**
         * Keeps suffix to be appended to a salt.
         *
         * @var string
         */
        static protected $saltSuffixMD5;
        /**
         * Setting string to indicate type of hashing method (md5).
         *
         * @var string
         */
        static protected $settingMD5;

        protected function applySettingsToSalt(string $salt) : string {}
        public function checkPassword(string $plainPW, string $saltedHashPW) : bool {}
        /**
         * Generates a random base 64-encoded salt prefixed and suffixed with settings for the hash.
         *
         * Proper use of salts may defeat a number of attacks, including:
         * - The ability to try candidate passwords against multiple hashes at once.
         * - The ability to use pre-hashed lists of candidate passwords.
         * - The ability to determine whether two users have the same (or different)
         * password without actually having to guess one of the passwords.
         *
         * @return string A character string containing settings and a random salt
         */
        protected function getGeneratedSalt() : string {}
        public function getHashedPassword(string $password, string $salt = null) {}
        /**
         * Returns a string for mapping an int to the corresponding base 64 character.
         *
         * @return string String for mapping an int to the corresponding base 64 character
         */
        protected function getItoa64() : string {}
        /**
         * Returns whether all prerequisites for the hashing methods are matched
         *
         * @return bool Method available
         */
        public function isAvailable() : bool {}
        /**
         * Returns length of a MD5 salt in bytes.
         *
         * @return int Length of a MD5 salt in bytes
         */
        public function getSaltLength() : int {}
        /**
         * Returns suffix to be appended to a salt.
         *
         * @return string Suffix of a salt
         */
        protected function getSaltSuffix() : string {}
        /**
         * Returns setting string of MD5 salted hashes.
         *
         * @return string Setting string of MD5 salted hashes
         */
        public function getSetting() : string {}
        public function isHashUpdateNeeded(string $passString) : bool {}
        public function isValidSalt(string $salt) : bool {}
        public function isValidSaltedPW(string $saltedPW) : bool {}
    }


    /**
     * Interface with public methods needed to be implemented
     * in a salting hashing class.
     */
    interface SaltInterface {
        function checkPassword(string $plainPW, string $saltedHashPW) : bool ;
        /**
         * Returns whether all prequesites for the hashing methods are matched
         *
         * @return bool Method available
         */
        function isAvailable() : bool ;
        function getHashedPassword(string $password, string $salt = null) ;
        function isHashUpdateNeeded(string $passString) : bool ;
        function isValidSaltedPW(string $saltedPW) : bool ;
    }

}

namespace TYPO3\CMS\Saltedpasswords\Task {
    /**
     * Additional field for salted passwords bulk update task
     */
    class BulkUpdateFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        /**
         * Default value whether the task deactivates itself after last run.
         *
         * @var bool Whether the task is allowed to deactivate itself after processing all existing user records.
         */
        protected $defaultCanDeactivateSelf;
        /**
         * Default value for the number of records to handle at each run.
         *
         * @var int Number of records
         */
        protected $defaultNumberOfRecords;

        public function getAdditionalFields(array $taskInfo, $task, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function validateAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController $parentObject) {}
        public function saveAdditionalFields(array $submittedData, \TYPO3\CMS\Scheduler\Task\AbstractTask $task) {}
    }

    /**
     * Update plaintext and hashed passwords of existing users to salted passwords.
     */
    class BulkUpdateTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * @var bool Whether or not the task is allowed to deactivate itself after processing all existing user records.
         */
        protected $canDeactivateSelf;
        /**
         * Converting a password to a salted hash takes some milliseconds (~100ms on an entry system in 2010).
         * If all users are updated in one run, the task might run a long time if a lot of users must be handled.
         * Therefore only a small number of frontend and backend users are processed.
         * If saltedpasswords is enabled for both frontend and backend 2 * numberOfRecords will be handled.
         *
         * @var int Number of records
         */
        protected $numberOfRecords;
        /**
         * @var int Pointer to last handled frontend and backend user row
         */
        protected $userRecordPointer;

        /**
         * Constructor initializes user record pointer
         */
        public function __construct() {}
        /**
         * Execute task
         *
         * @return bool
         */
        public function execute() {}
        /**
         * Get additional information
         *
         * @return string Additional information
         */
        public function getAdditionalInformation() {}
        protected function findUsersToUpdate($mode) {}
        protected function convertPasswords($mode, array $users) {}
/** @var $saltedpasswordsInstance \TYPO3\CMS\Saltedpasswords\Salt\SaltInterface */
        protected function updatePasswords(/** @var $saltedpasswordsInstance \TYPO3\CMS\Saltedpasswords\Salt\SaltInterface */
$mode, /** @var $saltedpasswordsInstance \TYPO3\CMS\Saltedpasswords\Salt\SaltInterface */
array $users) {}
        protected function isSaltedHash($password) {}
        protected function isMd5Password($password) {}
        protected function incrementUserRecordPointer($mode, $number) {}
        /**
         * Activates this task instance.
         * Uses setDisabled() method of parent \TYPO3\CMS\Scheduler\Task\AbstractTask
         */
        protected function activateSelf() {}
        /**
         * Deactivates this task instance.
         * Uses setDisabled() method of parent \TYPO3\CMS\Scheduler\Task\AbstractTask
         */
        protected function deactivateSelf() {}
        public function setCanDeactivateSelf($canDeactivateSelf) {}
        /**
         * Get if it can deactivate self
         *
         * @return bool TRUE if task shall deactivate itself, FALSE otherwise
         */
        public function getCanDeactivateSelf() {}
        public function setNumberOfRecords($numberOfRecords) {}
        /**
         * Get number of records
         *
         * @return int The number of records
         */
        public function getNumberOfRecords() {}
        protected function getTablename(string $mode) : string {}
    }

}

namespace TYPO3\CMS\Saltedpasswords\Evaluation {
    /**
     * Class implementing salted evaluation methods for BE users.
     */
    class BackendEvaluator extends \typo3\cms\saltedpasswords\evaluation\evaluator {
        /**
         * Class constructor.
         */
        public function __construct() {}
    }

    /**
     * Class implementing salted evaluation methods.
     */
    class Evaluator {
        /**
         * Keeps TYPO3 mode.
         *
         * Either 'FE' or 'BE'.
         *
         * @var string
         */
        protected $mode;

        /**
         * This function just return the field value as it is. No transforming,
         * hashing will be done on server-side.
         *
         * @return string JavaScript code for evaluating the
         */
        public function returnFieldJS() {}
        public function evaluateFieldValue($value, $is_in, $set) {}
    }

    /**
     * Class implementing salted evaluation methods for FE users.
     */
    class FrontendEvaluator extends \typo3\cms\saltedpasswords\evaluation\evaluator {
        /**
         * Class constructor.
         */
        public function __construct() {}
    }

}

namespace TYPO3\CMS\Saltedpasswords\Utility {
    /**
     * General library class.
     */
    class SaltedPasswordsUtility {
        const EXTKEY = 'saltedpasswords';

        /**
         * Calculates number of backend users, who have no saltedpasswords protection.
         *
         * @return int
         */
        public static function getNumberOfBackendUsersWithInsecurePassword() {}
        public static function returnExtConf($mode = TYPO3_MODE) {}
        public function feloginForgotPasswordHook(array $params, \TYPO3\CMS\Felogin\Controller\FrontendLoginController $pObj) {}
        /**
         * Returns default configuration of this extension.
         *
         * @return array Default extension configuration data for localconf.php
         */
        public static function returnExtConfDefaults() {}
        public static function getDefaultSaltingHashingMethod($mode = TYPO3_MODE) {}
        public static function isUsageEnabled($mode = TYPO3_MODE) {}
    }

    /**
     * class providing configuration checks for saltedpasswords.
     */
    class ExtensionManagerConfigurationUtility {
        /**
         * @var int
         */
        protected $errorType;
        /**
         * @var string
         */
        protected $header;
        /**
         * @var string
         */
        protected $preText;
        /**
         * @var array
         */
        protected $problems;
        /**
         * @var array
         */
        protected $extConf;

        protected function setErrorLevel($level) {}
        /**
         * Renders the messages if problems have been found.
         *
         * @return array an array with errorType and html code
         */
        protected function renderMessage() {}
        /**
         * Initializes this object.
         */
        private function init() {}
        public function checkConfigurationBackend(array $params) {}
        /** @var \TYPO3\CMS\Rsaauth\Backend\BackendFactory $rsaauthBackendFactory */
        protected function isRsaAuthBackendAvailable() {}
        public function checkConfigurationFrontend(array $params) {}
        protected function buildHashMethodSelector(array $params, $disposal) {}
        public function buildHashMethodSelectorFE(array $params) {}
        public function buildHashMethodSelectorBE(array $params) {}
        protected function processPostData(array $postArray = [ ]) {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Saltedpasswords\Tests\Unit\Salt {
    /**
     * Testcases for Md5Salt
     */
    class Md5SaltTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Keeps instance of object to test.
         *
         * @var \TYPO3\CMS\Saltedpasswords\Salt\Md5Salt
         */
        protected $objectInstance;

        /**
         * Sets up the fixtures for this testcase.
         */
        protected function setUp() {}
        /**
         * Prepares a message to be shown when a salted hashing is not supported.
         *
         * @return string Empty string if salted hashing method is available, otherwise an according warning
         */
        protected function getWarningWhenMethodUnavailable() {}
        /**
         * @test
         */
        public function hasCorrectBaseClass() {}
        /**
         * @test
         */
        public function nonZeroSaltLength() {}
        /**
         * @test
         */
        public function emptyPasswordResultsInNullSaltedPassword() {}
        /**
         * @test
         */
        public function nonEmptyPasswordResultsInNonNullSaltedPassword() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructure() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructureForCustomSaltWithoutSetting() {}
        /**
         * Tests authentication procedure with fixed password and fixed (pre-generated) hash.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same fixed salt.
         *
         * @test
         */
        public function authenticationWithValidAlphaCharClassPasswordAndFixedHash() {}
        /**
         * Tests that authentication procedure fails with broken hash to compare to
         *
         * @test
         */
        public function authenticationFailsWithBrokenHash() {}
        /**
         * Tests authentication procedure with alphabet characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidAlphaCharClassPassword() {}
        /**
         * Tests authentication procedure with numeric characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidNumericCharClassPassword() {}
        /**
         * Tests authentication procedure with US-ASCII special characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidAsciiSpecialCharClassPassword() {}
        /**
         * Tests authentication procedure with latin1 special characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidLatin1SpecialCharClassPassword() {}
        /**
         * Tests authentication procedure with latin1 umlauts.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidLatin1UmlautCharClassPassword() {}
        /**
         * @test
         */
        public function authenticationWithNonValidPassword() {}
        /**
         * @test
         */
        public function passwordVariationsResultInDifferentHashes() {}
        /**
         * @test
         */
        public function noUpdateNecessityForMd5() {}
    }

    /**
     * Testcase for SaltFactory
     */
    class SaltFactoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Keeps instance of object to test.
         *
         * @var \TYPO3\CMS\Saltedpasswords\Salt\SaltInterface
         */
        protected $objectInstance;

        /**
         * Sets up the fixtures for this testcase.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function objectInstanceNotNull() {}
        /**
         * @test
         */
        public function objectInstanceImplementsInterface() {}
        /**
         * @test
         */
        public function abstractComposedSaltBase64EncodeReturnsProperLength() {}
        /**
         * @test
         */
        public function objectInstanceForMD5Salts() {}
        /**
         * @test
         */
        public function objectInstanceForBlowfishSalts() {}
        /**
         * @test
         */
        public function objectInstanceForPhpassSalts() {}
        /**
         * @test
         */
        public function objectInstanceForPbkdf2Salts() {}
        /**
         * @test
         */
        public function resettingFactoryInstanceSucceeds() {}
    }

    /**
     * Testcase for Pbkdf2Salt
     */
    class Pbkdf2SaltTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Keeps instance of object to test.
         *
         * @var Pbkdf2Salt
         */
        protected $objectInstance;

        /**
         * Sets up the fixtures for this testcase.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function hasCorrectBaseClass() {}
        /**
         * @test
         */
        public function nonZeroSaltLength() {}
        /**
         * @test
         */
        public function emptyPasswordResultsInNullSaltedPassword() {}
        /**
         * @test
         */
        public function nonEmptyPasswordResultsInNonNullSaltedPassword() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructure() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructureForCustomSaltWithoutSetting() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructureForMinimumHashCount() {}
        /**
         * Tests authentication procedure with fixed password and fixed (pre-generated) hash.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same fixed salt.
         *
         * @test
         */
        public function authenticationWithValidAlphaCharClassPasswordAndFixedHash() {}
        /**
         * Tests that authentication procedure fails with broken hash to compare to
         *
         * @test
         */
        public function authenticationFailsWithBrokenHash() {}
        /**
         * Tests authentication procedure with alphabet characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidAlphaCharClassPassword() {}
        /**
         * Tests authentication procedure with numeric characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidNumericCharClassPassword() {}
        /**
         * Tests authentication procedure with US-ASCII special characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidAsciiSpecialCharClassPassword() {}
        /**
         * Tests authentication procedure with latin1 special characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidLatin1SpecialCharClassPassword() {}
        /**
         * Tests authentication procedure with latin1 umlauts.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidLatin1UmlautCharClassPassword() {}
        /**
         * @test
         */
        public function authenticationWithNonValidPassword() {}
        /**
         * @test
         */
        public function passwordVariationsResultInDifferentHashes() {}
        /**
         * @test
         */
        public function modifiedMinHashCount() {}
        /**
         * @test
         */
        public function modifiedMaxHashCount() {}
        /**
         * @test
         */
        public function modifiedHashCount() {}
        /**
         * @test
         */
        public function updateNecessityForValidSaltedPassword() {}
        /**
         * @test
         */
        public function updateNecessityForIncreasedHashcount() {}
        /**
         * @test
         */
        public function updateNecessityForDecreasedHashcount() {}
        /**
         * @test
         */
        public function isCompatibleWithPythonPasslibHashes() {}
    }

    /**
     * Testcase for BlowfishSalt
     */
    class BlowfishSaltTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Keeps instance of object to test.
         *
         * @var \TYPO3\CMS\Saltedpasswords\Salt\BlowfishSalt
         */
        protected $objectInstance;

        /**
         * Sets up the fixtures for this testcase.
         */
        protected function setUp() {}
        /**
         * Marks tests as skipped if the blowfish method is not available.
         */
        protected function skipTestIfBlowfishIsNotAvailable() {}
        /**
         * @test
         */
        public function hasCorrectBaseClass() {}
        /**
         * @test
         */
        public function nonZeroSaltLength() {}
        /**
         * @test
         */
        public function emptyPasswordResultsInNullSaltedPassword() {}
        /**
         * @test
         */
        public function nonEmptyPasswordResultsInNonNullSaltedPassword() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructure() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructureForCustomSaltWithoutSetting() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructureForMinimumHashCount() {}
        /**
         * Tests authentication procedure with fixed password and fixed (pre-generated) hash.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same fixed salt.
         *
         * @test
         */
        public function authenticationWithValidAlphaCharClassPasswordAndFixedHash() {}
        /**
         * Tests that authentication procedure fails with broken hash to compare to
         *
         * @test
         */
        public function authenticationFailsWithBrokenHash() {}
        /**
         * Tests authentication procedure with alphabet characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidAlphaCharClassPassword() {}
        /**
         * Tests authentication procedure with numeric characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidNumericCharClassPassword() {}
        /**
         * Tests authentication procedure with US-ASCII special characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidAsciiSpecialCharClassPassword() {}
        /**
         * Tests authentication procedure with latin1 special characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidLatin1SpecialCharClassPassword() {}
        /**
         * Tests authentication procedure with latin1 umlauts.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidLatin1UmlautCharClassPassword() {}
        /**
         * @test
         */
        public function authenticationWithNonValidPassword() {}
        /**
         * @test
         */
        public function passwordVariationsResultInDifferentHashes() {}
        /**
         * @test
         */
        public function modifiedMinHashCount() {}
        /**
         * @test
         */
        public function modifiedMaxHashCount() {}
        /**
         * @test
         */
        public function modifiedHashCount() {}
        /**
         * @test
         */
        public function updateNecessityForValidSaltedPassword() {}
        /**
         * @test
         */
        public function updateNecessityForIncreasedHashcount() {}
        /**
         * @test
         */
        public function updateNecessityForDecreasedHashcount() {}
    }

    /**
     * Testcase for PhpassSalt
     */
    class PhpassSaltTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Keeps instance of object to test.
         *
         * @var \TYPO3\CMS\Saltedpasswords\Salt\PhpassSalt
         */
        protected $objectInstance;

        /**
         * Sets up the fixtures for this testcase.
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function hasCorrectBaseClass() {}
        /**
         * @test
         */
        public function nonZeroSaltLength() {}
        /**
         * @test
         */
        public function emptyPasswordResultsInNullSaltedPassword() {}
        /**
         * @test
         */
        public function nonEmptyPasswordResultsInNonNullSaltedPassword() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructure() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructureForCustomSaltWithoutSetting() {}
        /**
         * @test
         */
        public function createdSaltedHashOfProperStructureForMinimumHashCount() {}
        /**
         * Tests authentication procedure with fixed password and fixed (pre-generated) hash.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same fixed salt.
         *
         * @test
         */
        public function authenticationWithValidAlphaCharClassPasswordAndFixedHash() {}
        /**
         * Tests that authentication procedure fails with broken hash to compare to
         *
         * @test
         */
        public function authenticationFailsWithBrokenHash() {}
        /**
         * Tests authentication procedure with alphabet characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidAlphaCharClassPassword() {}
        /**
         * Tests authentication procedure with numeric characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidNumericCharClassPassword() {}
        /**
         * Tests authentication procedure with US-ASCII special characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidAsciiSpecialCharClassPassword() {}
        /**
         * Tests authentication procedure with latin1 special characters.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidLatin1SpecialCharClassPassword() {}
        /**
         * Tests authentication procedure with latin1 umlauts.
         *
         * Checks if a "plain-text password" is every time mapped to the
         * same "salted password hash" when using the same salt.
         *
         * @test
         */
        public function authenticationWithValidLatin1UmlautCharClassPassword() {}
        /**
         * @test
         */
        public function authenticationWithNonValidPassword() {}
        /**
         * @test
         */
        public function passwordVariationsResultInDifferentHashes() {}
        /**
         * @test
         */
        public function modifiedMinHashCount() {}
        /**
         * @test
         */
        public function modifiedMaxHashCount() {}
        /**
         * @test
         */
        public function modifiedHashCount() {}
        /**
         * @test
         */
        public function updateNecessityForValidSaltedPassword() {}
        /**
         * @test
         */
        public function updateNecessityForIncreasedHashcount() {}
        /**
         * @test
         */
        public function updateNecessityForDecreasedHashcount() {}
    }

}

namespace TYPO3\CMS\Saltedpasswords\Tests\Unit\Evaluation {
    /**
     * Testcase for SaltedPasswordsUtility
     */
    class EvaluatorTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var Evaluator
         */
        protected $subject;

        /**
         * Set up the a test
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function passwordIsTurnedIntoSaltedString() {}
        /**
         * @test
         */
        public function md5HashIsUpdatedToTemporarySaltedString() {}
        /**
         * @test
         */
        public function temporarySaltedStringIsNotTouched() {}
    }

}

namespace TYPO3\CMS\Saltedpasswords\Tests\Functional {
    /**
     * Test case for \TYPO3\CMS\Saltedpasswords\SaltedPasswordService
     */
    class SaltedPasswordServiceTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * XML database fixtures to be loaded into database.
         *
         * @var array
         */
        protected $xmlDatabaseFixtures;
        /**
         * @var SaltedPasswordService
         */
        protected $subject;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * Check if service updates backend user password
         *
         * @test
         */
        public function checkIfServiceUpdatesBackendUserPassword() {}
    }

}

namespace TYPO3\CMS\Saltedpasswords\Tests\Functional\Task {
    /**
     * Test case for \TYPO3\CMS\Saltedpasswords\Utility\SaltedPasswordsUtility
     */
    class BulkUpdateTaskTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * XML database fixtures to be loaded into database.
         *
         * @var array
         */
        protected $xmlDatabaseFixtures;
        /**
         * Core extensions to load
         *
         * @var array
         */
        protected $testExtensionsToLoad;
        /**
         * @var BulkUpdateTask
         */
        protected $subject;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * Test if bulk update task finds backend users to be updated
         *
         * @test
         */
        public function testIfBulkUpdateTaskFindsBackendUsersToBeUpdated() {}
        /**
         * Test if bulk update task finds frontend users to be updated
         *
         * @test
         */
        public function testIfBulkUpdateTaskFindsFrontendUsersToBeUpdated() {}
        /**
         * Test, if passwords are updated with salted hashes for a given user list
         *
         * @test
         */
        public function testIfPasswordsAreUpdatedWithSaltedHashesForGivenUserList() {}
    }

}

namespace TYPO3\CMS\Saltedpasswords\Tests\Functional\Utility {
    /**
     * Test case for \TYPO3\CMS\Saltedpasswords\Utility\SaltedPasswordsUtility
     */
    class SaltedPasswordsUtilityTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * XML database fixtures to be loaded into database.
         *
         * @var array
         */
        protected $xmlDatabaseFixtures;

        /**
         * Sets up this test suite.
         */
        protected function setUp() {}
        /**
         * Check if salted password utility returns the correct number of backend users with insecure passwords
         *
         * @test
         */
        public function checkIfNumberOfBackendUsersWithInsecurePasswordsIsFetchedCorrectly() {}
    }

}

namespace TYPO3\CMS\Recycler\Controller {
    /**
     * Module 'Recycler' for the 'recycler' extension.
     */
    class RecyclerModuleController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var string
         */
        protected $relativePath;
        /**
         * @var string
         */
        public $perms_clause;
        /**
         * @var array
         */
        protected $pageRecord;
        /**
         * @var bool
         */
        protected $isAccessibleForCurrentUser;
        /**
         * @var bool
         */
        protected $allowDelete;
        /**
         * @var int
         */
        protected $recordsPageLimit;
        /**
         * @var int
         */
        protected $id;
        /**
         * @var BackendTemplateView
         */
        protected $view;
        /**
         * BackendTemplateView Container
         *
         * @var BackendTemplateView
         */
        protected $defaultViewObjectName;

        /**
         * Initializes the Module
         */
        public function initializeAction() {}
/** @var BackendTemplateView $view */
        public function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /**
         * Renders the content of the module.
         */
        public function indexAction() {}
        /** @var ButtonBar $buttonBar */
        protected function registerDocheaderButtons() {}
        /**
         * Gets the JavaScript configuration.
         *
         * @return array The JavaScript configuration
         */
        protected function getJavaScriptConfiguration() {}
        protected function getDataFromSession($identifier, $default = null) {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns an instance of DocumentTemplate
         *
         * @return \TYPO3\CMS\Backend\Template\DocumentTemplate
         */
        protected function getDocumentTemplate() {}
        /**
         * Returns an instance of LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Deleted Records View
     */
    class DeletedRecordsController {
        /**
         * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected $runtimeCache;
        /**
         * @var DataHandler
         */
        protected $tce;

        public function __construct() {}
        public function transform($deletedRowsArray, $totalDeleted) {}
        protected function getPageTitle($pageId) {}
        protected function getBackendUser(int $userId) : string {}
        protected function getUserWhoDeleted(string $table, int $uid) : int {}
        /**
         * Returns an instance of LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Create and returns an instance of the CacheManager
         *
         * @return \TYPO3\CMS\Core\Cache\CacheManager
         */
        protected function getCacheManager() {}
        /**
         * Gets an instance of the memory cache.
         *
         * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
         */
        protected function getMemoryCache() {}
    }

    /**
     * Controller class for the 'recycler' extension. Handles the AJAX Requests
     */
    class RecyclerAjaxController {
        /**
         * The local configuration array
         *
         * @var array
         */
        protected $conf;

        /**
         * The constructor of this class
         */
        public function __construct() {}
        public function dispatch(ServerRequestInterface $request) {}
        protected function setDataInSession($identifier, $data) {}
        /**
         * Returns the BackendUser
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Recycler\Task {
    /**
     * A task that should be run regularly that deletes
     * datasets flagged as "deleted" from the DB.
     */
    class CleanerFieldProvider implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        public function getAdditionalFields(array $taskInfo, $task, SchedulerModuleController $schedulerModule) {}
        protected function getTcaSelectHtml($selectedTables = [ ]) {}
        public function validateAdditionalFields(array $submittedData, SchedulerModuleController $schedulerModule) {}
        protected function validateAdditionalFieldTca($tca, SchedulerModuleController $schedulerModule) {}
        protected function checkTcaIsNotEmpty($tca, SchedulerModuleController $schedulerModule) {}
        protected function checkTcaIsValid(array $tca, SchedulerModuleController $schedulerModule) {}
        protected function validateAdditionalFieldPeriod($period, SchedulerModuleController $schedulerModule) {}
        public function saveAdditionalFields(array $submittedData, AbstractTask $task) {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * A task that should be run regularly that deletes deleted
     * datasets from the DB.
     */
    class CleanerTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * @var int The time period, after which the rows are deleted
         */
        protected $period;
        /**
         * @var array The tables to clean
         */
        protected $tcaTables;

        /**
         * The main method of the task. Iterates through
         * the tables and calls the cleaning function
         *
         * @return bool Returns TRUE on successful execution, FALSE on error
         */
        public function execute() {}
        protected function cleanTable($tableName) {}
        /**
         * Returns the information shown in the task-list
         *
         * @return string Information-text fot the scheduler task-list
         */
        public function getAdditionalInformation() {}
        public function setPeriod($period) {}
        /**
         * Returns the period after which a row is deleted
         *
         * @return int
         */
        public function getPeriod() {}
        /**
         * @return int
         */
        public function getPeriodAsTimestamp() {}
        public function setTcaTables($tcaTables = [ ]) {}
        /**
         * Returns the TCA-tables which are cleaned
         *
         * @return array
         */
        public function getTcaTables() {}
        protected function checkFileResourceFieldsBeforeDeletion($table) {}
        protected function deleteFilesForTable($table, array $fieldList) {}
        protected function getFileResourceFields($table) {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Recycler\Domain\Model {
    /**
     * Model class for the 'recycler' extension.
     */
    class DeletedRecords {
        /**
         * Array with all deleted rows
         *
         * @var array
         */
        protected $deletedRows;
        /**
         * String with the global limit
         *
         * @var string
         */
        protected $limit;
        /**
         * Array with all available FE tables
         *
         * @var array
         */
        protected $table;
        /**
         * Object from helper class
         *
         * @var RecyclerUtility
         */
        protected $recyclerHelper;
        /**
         * Array with all label fields drom different tables
         *
         * @var array
         */
        public $label;
        /**
         * Array with all title fields drom different tables
         *
         * @var array
         */
        public $title;

        public function loadData($id, $table, $depth, $limit = '', $filter = '') {}
        public function getTotalCount($id, $table, $depth, $filter) {}
        protected function setData($id, $table, $depth, $filter) {}
        protected function getFilteredQueryBuilder(string $table, int $pid, string $filter) : QueryBuilder {}
        protected function checkRecordAccess($table, array $rows) {}
/** @var $tce DataHandler **/
        public function deleteData(/** @var $tce DataHandler **/
$recordsArray) {}
        public function undeleteData($recordsArray, $recursive = false) {}
        protected function getDeletedParentPages($uid, $pages = [ ]) {}
        public function setDeletedRows($table, array $row) {}
        /**
         * Get deleted Rows
         *
         * @return array Array with all deleted rows from TCA
         */
        public function getDeletedRows() {}
        /**
         * Get table
         *
         * @return array Array with table from TCA
         */
        public function getTable() {}
    }

    /**
     * Model class for the 'recycler' extension.
     */
    class Tables {
        public function getTables($startUid, $depth = 0) {}
        /**
         * Returns an instance of LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Recycler\Utility {
    /**
     * Helper class for the 'recycler' extension.
     */
    class RecyclerUtility {
        public static function checkAccess($table, $row) {}
        public static function getRecordPath($uid) {}
        public static function getDeletedField($tableName) {}
        public static function isParentPageDeleted($pid) {}
        public static function getPidOfUid($uid, $table) {}
        public static function getTableTCA($tableName) {}
        /**
         * Returns the BackendUser
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected static function getBackendUser() {}
        /**
         * Returns an instance of LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected static function getLanguageService() {}
        /**
         * Returns the modifyable tables of the current user
         */
        public static function getModifyableTables() {}
    }

}

namespace TYPO3\CMS\Recycler\Tests\Unit\Task {
    /**
     * Testcase
     */
    class CleanerTaskTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|CleanerTask
         */
        protected $subject;

        /**
         * sets up an instance of \TYPO3\CMS\Recycler\Task\CleanerTask
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getPeriodCanBeSet() {}
        /**
         * @test
         */
        public function getTcaTablesCanBeSet() {}
        /**
         * @test
         */
        public function taskBuildsCorrectQuery() {}
        /**
         * @test
         */
        public function taskFailsOnError() {}
    }

    /**
     * Testcase
     */
    class CleanerFieldProviderTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var CleanerFieldProvider
         */
        protected $subject;

        /**
         * Sets up an instance of \TYPO3\CMS\Recycler\Task\CleanerFieldProvider
         */
        protected function setUp() {}
        protected function getScheduleModuleControllerMock($mockedMethods = [ ]) {}
        /**
         * @return array
         */
        public function validateAdditionalFieldsLogsPeriodErrorDataProvider() {}
        public function validateAdditionalFieldsLogsPeriodError($period) {}
        /**
         * @return array
         */
        public function validateAdditionalFieldsDataProvider() {}
        public function validateAdditionalFieldsLogsTableError($table) {}
        /**
         * @test
         */
        public function validateAdditionalFieldsIsTrueIfValid() {}
        /**
         * @test
         */
        public function saveAdditionalFieldsSavesFields() {}
    }

}

namespace TYPO3\CMS\Recycler\Tests\Functional\Recycle {
    /**
     * Functional test for the Export
     */
    abstract class AbstractRecycleTestCase extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * The fixture which is used when initializing a backend user
         *
         * @var string
         */
        protected $backendUserFixture;

        /**
         * Set up for set up the backend user, initialize the language object
         * and creating the Export instance
         */
        protected function setUp() {}
/** @var $deletedRecords \TYPO3\CMS\Recycler\Domain\Model\DeletedRecords */
        protected function getDeletedPages(/** @var $deletedRecords \TYPO3\CMS\Recycler\Domain\Model\DeletedRecords */
$pageUid, /** @var $deletedRecords \TYPO3\CMS\Recycler\Domain\Model\DeletedRecords */
$depth = 0) {}
/** @var $deletedRecords \TYPO3\CMS\Recycler\Domain\Model\DeletedRecords */
        protected function getDeletedContent(/** @var $deletedRecords \TYPO3\CMS\Recycler\Domain\Model\DeletedRecords */
$contentUid) {}
/** @var $column \SimpleXMLElement */
        protected function loadDataSet(/** @var $column \SimpleXMLElement */
$path) {}
    }

}

namespace TYPO3\CMS\Recycler\Tests\Functional\Recycle\Pages {
    /**
     * Functional test for the Recycler
     */
    class AdminRecycleTest extends \typo3\cms\recycler\tests\functional\recycle\abstractrecycletestcase {
        /**
         * Directory which contains data sets for assertions
         *
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * Set up the test
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function retrieveDeletedPagesNoRecursion() {}
        /**
         * @test
         */
        public function retrieveDeletedPagesOneLevelRecursion() {}
    }

    /**
     * Functional test for the Recycler
     */
    class UserRecycleTest extends \typo3\cms\recycler\tests\functional\recycle\abstractrecycletestcase {
        /**
         * Directory which contains data sets for assertions
         *
         * @var string
         */
        protected $assertionDataSetDirectory;

        /**
         * Set up the test
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function retrieveDeletedPagesNoRecursion() {}
        /**
         * @test
         */
        public function retrieveDeletedPagesOneLevelRecursion() {}
        /**
         * @test
         */
        public function canNotRetrieveDeletedPagesOutsideWebmount() {}
        /**
         * @test
         */
        public function canNotRetrieveDeletedWithNoAccess() {}
    }

}

namespace TYPO3\CMS\Feedit {
    /**
     * View class for the edit panels in frontend editing.
     */
    class FrontendEditPanel {
        /**
         * The Content Object Renderer
         *
         * @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
         */
        protected $cObj;
        /**
         * Property for accessing TypoScriptFrontendController centrally
         *
         * @var TypoScriptFrontendController
         */
        protected $frontendController;
        /**
         * @var FrontendBackendUserAuthentication
         */
        protected $backendUser;
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconFactory
         */
        protected $iconFactory;

        public function __construct($_ = null, TypoScriptFrontendController $frontendController = null, FrontendBackendUserAuthentication $backendUser = null) {}
        public function editPanel($content, array $conf, $currentRecord = '', array $dataArr = [ ], $table = '', array $allow = [ ], $newUID = 0, array $hiddenFields = [ ]) {}
        public function editIcons($content, $params, array $conf = [ ], $currentRecord = '', array $dataArr = [ ], $addUrlParamStr = '', $table, $editUid, $fieldList) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function editPanelLinkWrap(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$string, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$formName, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$cmd, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$currentRecord = '', /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$confirm = '', /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$nPid = '') {}
        protected function editPanelLinkWrap_doWrap($string, $url, $additionalClasses = '') {}
        protected function isDisabled($table, array $row) {}
    }

}

namespace TYPO3\CMS\Extensionmanager {
    /**
     * A generic Extensionmanager exception
     */
    class Exception extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Extensionmanager\ViewHelpers {
    /**
     * Renders the distribution image
     *
     * @internal
     */
    class DistributionImageViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize arguments.
         */
        public function initializeArguments() {}
        /**
         * Renders the destribution preview image for the given extension
         *
         * @return string rendered tag.
         */
        public function render() {}
        protected function findImage($extensionKey) {}
        protected function getImageUri($src) {}
    }

    /**
     * Returns a string meant to be used as css class stating whether an extension is
     * available or installed
     * @internal
     */
    class InstallationStateCssClassViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * view helper for displaying a remove extension link
     * @internal
     */
    class RemoveExtensionViewHelper extends \typo3\cms\extensionmanager\viewhelpers\link\actionviewhelper {
        /**
         * Initialize arguments
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
        /**
         * Renders an install link
         *
         * @return string the rendered a tag
         */
        public function render() {}
    }

    /**
     * Display a link to show all versions of an extension
     * @internal
     */
    class ShowExtensionVersionsViewHelper extends \typo3\cms\extensionmanager\viewhelpers\link\actionviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        /** @var Extension $extension */
        public function render() {}
    }

    /**
     * Display a deactivate / activate link
     * @internal
     */
    class ToggleExtensionInstallationStateViewHelper extends \typo3\cms\extensionmanager\viewhelpers\link\actionviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        /**
         * Renders an install link
         *
         * @return string the rendered a tag
         */
        public function render() {}
    }

    /**
     * Shows the elapsed time since the last update of the extension repository
     * from TER in a readable manner.
     *
     * @internal
     */
    class TimeSinceLastUpdateViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Shows the version numbers of the TYPO3 dependency, if any
     *
     * @internal
     */
    class Typo3DependencyViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments
         *
         * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
         */
        public function initializeArguments() {}
/** @var Dependency $dependency */
        public static function renderStatic(/** @var Dependency $dependency */
array $arguments, /** @var Dependency $dependency */
\Closure $renderChildrenClosure, /** @var Dependency $dependency */
RenderingContextInterface $renderingContext) {}
        protected static function isVersionSuitable($lowestVersion, $highestVersion) {}
    }

    /**
     * View helper to let 3rd-party extensions process the list of available
     * actions for a given extension.
     * @internal
     */
    class ProcessAvailableActionsViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        const SIGNAL_ProcessActions = 'processActions';

        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;

        public function injectSignalSlotDispatcher(\TYPO3\CMS\Extbase\SignalSlot\Dispatcher $signalSlotDispatcher) {}
        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        /**
         * Processes the list of actions.
         *
         * @return string the rendered list of actions
         */
        public function render() {}
        protected function emitProcessActionsSignal($extension, array $actions) {}
    }

    /**
     * View helper for update script link
     * @internal
     */
    class UpdateScriptViewHelper extends \typo3\cms\extensionmanager\viewhelpers\link\actionviewhelper {
        /**
         * initialize arguments
         */
        public function initializeArguments() {}
        /** @var IconFactory $iconFactory */
        public function render() {}
    }

    /**
     * view helper
     * @internal
     */
    class DownloadExtensionViewHelper extends \typo3\cms\fluid\viewhelpers\form\abstractformviewhelper {
        /**
         * @var string
         */
        protected $tagName;
        /**
         * @var \TYPO3\CMS\Extbase\Service\ExtensionService
         */
        protected $extensionService;

        public function injectExtensionService(\TYPO3\CMS\Extbase\Service\ExtensionService $extensionService) {}
        /**
         * Initialize arguments.
         */
        public function initializeArguments() {}
        /**
         * Renders a download link
         *
         * @return string the rendered a tag
         */
        public function render() {}
        /**
         * Get the field name prefix
         *
         * @return string
         */
        protected function getFieldNamePrefix() {}
        /**
         * Retrieves the default field name prefix for this form
         *
         * @return string default field name prefix
         */
        protected function getDefaultFieldNamePrefix() {}
    }

    /**
     * View helper for update script link
     */
    class ReloadSqlDataViewHelper extends \typo3\cms\extensionmanager\viewhelpers\link\actionviewhelper {
        /**
         * @var string
         */
        static protected $registryNamespace;

        public function initializeArguments() {}
        /**
         * Renders a link to re-import the static SQL data of an extension
         *
         * @return string The rendered a tag
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\ViewHelpers\Be {
    /**
     * Special view helper for the BE module of the Extension Manager. Loads JS code for triggering
     * refresh events.
     *
     * = Examples =
     *
     * <code title="Simple">
     * <em:be.container triggers="{triggers}" />
     * </code>
     * <output>
     * Writes some JS inline code
     * </output>
     *
     * @internal
     */
    class TriggerViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        /**
         * Loads some JS inline code based on a list of triggers. This is used to reload the main
         * menu when modules are loaded/unloaded.
         *
         * @return string This view helper does not return any content
         * @see \TYPO3\CMS\Backend\Template\DocumentTemplate
         * @see \TYPO3\CMS\Core\Page\PageRenderer
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\ViewHelpers\Link {
    /**
     * A view helper for creating links to extensionmanager actions
     *
     * @internal
     */
    class ActionViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        /**
         * Arguments initialization
         */
        public function initializeArguments() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\ViewHelpers\Format {
    /**
     * View Helper for imploding arrays
     * @internal
     */
    class ImplodeViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments of this view helper
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Controller {
    /**
     * Controller for distribution related actions
     */
    class DistributionController extends \typo3\cms\extensionmanager\controller\abstractmodulecontroller {
        /**
         * @var \TYPO3\CMS\Core\Package\PackageManager
         */
        protected $packageManager;

        public function injectPackageManager(\TYPO3\CMS\Core\Package\PackageManager $packageManager) {}
/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        public function showAction(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension) {}
        /**
         * Registers the Icons into the docheader
         *
         * @throws \InvalidArgumentException
         */
        protected function registerDocheaderButtons() {}
    }

    /**
     * Controller for configuration related actions.
     */
    class UpdateScriptController extends \typo3\cms\extensionmanager\controller\abstractmodulecontroller {
/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
/** @var $updateScriptUtility \TYPO3\CMS\Extensionmanager\Utility\UpdateScriptUtility */
        public function showAction(/** @var $updateScriptUtility \TYPO3\CMS\Extensionmanager\Utility\UpdateScriptUtility */
$extensionKey) {}
        /**
         * Registers the Icons into the docheader
         *
         * @throws \InvalidArgumentException
         */
        protected function registerDocheaderButtons() {}
    }

    /**
     * Abstract action controller.
     */
    class AbstractController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        const TRIGGER_RefreshTopbar = 'refreshTopbar';
        const TRIGGER_RefreshModuleMenu = 'refreshModuleMenu';

        /**
         * @var array
         */
        protected $triggerArguments;

        protected function translate($key, $arguments = null) {}
        /**
         * Handles trigger arguments, e.g. refreshing the module menu
         * widget if an extension with backend modules has been enabled
         * or disabled.
         */
        protected function handleTriggerArguments() {}
    }

    /**
     * Controller for handling upload of a local extension file
     * Handles .t3x or .zip files
     */
    class UploadExtensionFileController extends \typo3\cms\extensionmanager\controller\abstractcontroller {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility
         */
        protected $fileHandlingUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\Connection\TerUtility
         */
        protected $terUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService
         */
        protected $managementService;
        /**
         * @var string
         */
        protected $extensionBackupPath;
        /**
         * @var bool
         */
        protected $removeFromOriginalPath;

        public function injectExtensionRepository(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository $extensionRepository) {}
        public function injectFileHandlingUtility(\TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility $fileHandlingUtility) {}
        public function injectTerUtility(\TYPO3\CMS\Extensionmanager\Utility\Connection\TerUtility $terUtility) {}
        public function injectManagementService(\TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService $managementService) {}
        /**
         * Remove backup folder before destruction
         */
        public function __destruct() {}
        /**
         * Render upload extension form
         */
        public function formAction() {}
        public function extractAction($overwrite = false) {}
        public function checkFileName($fileName) {}
        public function extractExtensionFromFile($uploadPath, $fileName, $overwrite) {}
        public function activateExtension($extensionKey) {}
        protected function getExtensionFromT3xFile($file, $overwrite = false) {}
        protected function getExtensionFromZipFile($file, $fileName, $overwrite = false) {}
        protected function getExtensionKeyFromFileName($fileName) {}
        protected function copyExtensionFolderToTempFolder($extensionKey) {}
        protected function removeExtensionAndRestoreFromBackup($fileName) {}
        /**
         * Removes the backup folder in typo3temp
         */
        protected function removeBackupFolder() {}
    }

    /**
     * Controller for handling extension related actions like
     * installing, removing, downloading of data or files
     */
    class ActionController extends \typo3\cms\extensionmanager\controller\abstractcontroller {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\InstallUtility
         */
        protected $installUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility
         */
        protected $fileHandlingUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility
         */
        protected $extensionModelUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService
         */
        protected $managementService;

        public function injectInstallUtility(\TYPO3\CMS\Extensionmanager\Utility\InstallUtility $installUtility) {}
        public function injectFileHandlingUtility(\TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility $fileHandlingUtility) {}
        public function injectExtensionModelUtility(\TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility $extensionModelUtility) {}
        public function injectManagementService(\TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService $managementService) {}
        protected function toggleExtensionInstallationStateAction($extensionKey) {}
        public function installExtensionWithoutSystemDependencyCheckAction($extensionKey) {}
        protected function removeExtensionAction($extension) {}
        protected function downloadExtensionZipAction($extension) {}
        protected function reloadExtensionDataAction($extension) {}
    }

    /**
     * Controller for actions relating to update of full extension list from TER
     */
    class UpdateFromTerController extends \typo3\cms\extensionmanager\controller\abstractcontroller {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\Repository\Helper
         */
        protected $repositoryHelper;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository
         */
        protected $repositoryRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ListUtility
         */
        protected $listUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;
        /**
         * @var JsonView
         */
        protected $defaultViewObjectName;

        public function injectRepositoryHelper(\TYPO3\CMS\Extensionmanager\Utility\Repository\Helper $repositoryHelper) {}
        public function injectRepositoryRepository(\TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository $repositoryRepository) {}
        public function injectListUtility(\TYPO3\CMS\Extensionmanager\Utility\ListUtility $listUtility) {}
        public function injectExtensionRepository(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository $extensionRepository) {}
/** @var $repository \TYPO3\CMS\Extensionmanager\Domain\Model\Repository */
        public function updateExtensionListFromTerAction(/** @var $repository \TYPO3\CMS\Extensionmanager\Domain\Model\Repository */
$forceUpdateCheck = false) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Controller for actions related to the TER download of an extension
     */
    class DownloadController extends \typo3\cms\extensionmanager\controller\abstractcontroller {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility
         */
        protected $fileHandlingUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService
         */
        protected $managementService;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\InstallUtility
         */
        protected $installUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\DownloadUtility
         */
        protected $downloadUtility;
        /**
         * @var JsonView
         */
        protected $defaultViewObjectName;
        /**
         * @var JsonView
         */
        protected $view;

        public function injectExtensionRepository(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository $extensionRepository) {}
        public function injectFileHandlingUtility(\TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility $fileHandlingUtility) {}
        public function injectManagementService(\TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService $managementService) {}
        public function injectInstallUtility(\TYPO3\CMS\Extensionmanager\Utility\InstallUtility $installUtility) {}
        public function injectDownloadUtility(\TYPO3\CMS\Extensionmanager\Utility\DownloadUtility $downloadUtility) {}
        /**
         * Defines which view object should be used for the installFromTer action
         */
        protected function initializeInstallFromTerAction() {}
        public function checkDependenciesAction(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension) {}
        public function installFromTerAction(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension, $downloadPath = 'Local') {}
        public function installExtensionWithoutSystemDependencyCheckAction(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension) {}
        public function installDistributionAction(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension) {}
        /**
         * Update an extension. Makes no sanity check but directly searches highest
         * available version from TER and updates. Update check is done by the list
         * already. This method should only be called if we are sure that there is
         * an update.
         *
         * @return string
         */
        protected function updateExtensionAction() {}
        /**
         * Show update comments for extensions that can be updated.
         * Fetches update comments for all versions between the current
         * installed and the highest version.
         */
        protected function updateCommentForUpdatableVersionsAction() {}
        protected function installFromTer(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension, $downloadPath = 'Local') {}
    }

    /**
     * Abstract action controller.
     */
    class AbstractModuleController extends \typo3\cms\extensionmanager\controller\abstractcontroller {
        /**
         * BackendTemplateContainer
         *
         * @var BackendTemplateView
         */
        protected $view;
        /**
         * Backend Template Container
         *
         * @var string
         */
        protected $defaultViewObjectName;

        /**
         * Resolve view and initialize the general view-variables extensionName,
         * controllerName and actionName based on the request object
         *
         * @return \TYPO3\CMS\Fluid\View\TemplateView
         */
        protected function resolveView() {}
        /**
         * Generates the action menu
         */
        protected function generateMenu() {}
        protected function getHref($controller, $action, $parameters = [ ]) {}
    }

    /**
     * Controller for extension listings (TER or local extensions)
     */
    class ListController extends \typo3\cms\extensionmanager\controller\abstractmodulecontroller {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ListUtility
         */
        protected $listUtility;
        /**
         * @var \TYPO3\CMS\Core\Page\PageRenderer
         */
        protected $pageRenderer;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\DependencyUtility
         */
        protected $dependencyUtility;

        public function injectExtensionRepository(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository $extensionRepository) {}
        public function injectListUtility(\TYPO3\CMS\Extensionmanager\Utility\ListUtility $listUtility) {}
        public function injectPageRenderer(\TYPO3\CMS\Core\Page\PageRenderer $pageRenderer) {}
        public function injectDependencyUtility(\TYPO3\CMS\Extensionmanager\Utility\DependencyUtility $dependencyUtility) {}
        /**
         * Add the needed JavaScript files for all actions
         */
        public function initializeAction() {}
/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /**
         * Adds an information about composer mode
         */
        protected function addComposerModeNotification() {}
        /**
         * Shows list of extensions present in the system
         */
        public function indexAction() {}
/** @var ExtensionModelUtility $extensionModelUtility */
        public function unresolvedDependenciesAction(/** @var ExtensionModelUtility $extensionModelUtility */
$extensionKey) {}
        public function terAction($search = '') {}
/** @var $repositoryHelper Helper */
        public function distributionsAction(/** @var $repositoryHelper Helper */
$showUnsuitableDistributions = false) {}
        public function showAllVersionsAction($extensionKey) {}
        /**
         * Registers the Icons into the docheader
         *
         * @throws \InvalidArgumentException
         */
        protected function registerDocheaderButtons() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Task {
    /**
     * Update extension list from TER task
     */
    class UpdateExtensionListTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Public method, called by scheduler.
         *
         * @return bool TRUE on success
         */
        public function execute() {}
        /** @var $persistenceManager \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager */
        protected function updateExtensionList() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Report {
    /**
     * Extension status reports
     */
    class ExtensionStatus implements \typo3\cms\reports\statusproviderinterface {
        /**
         * @var string
         */
        protected $ok;
        /**
         * @var string
         */
        protected $upToDate;
        /**
         * @var string
         */
        protected $error;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository
         */
        protected $repositoryRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ListUtility
         */
        protected $listUtility;
        /**
         * @var \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected $languageService;

        /**
         * Default constructor
         */
        public function __construct() {}
        /**
         * Determines extension manager status
         *
         * @return array List of statuses
         */
        public function getStatus() {}
        /**
         * Check main repository status: existence, has extensions, last update younger than 7 days
         *
         * @return \TYPO3\CMS\Reports\Report\Status\Status
         */
        protected function getMainRepositoryStatus() {}
        /**
         * Get security status of loaded and installed extensions
         *
         * @return \stdClass with properties 'loaded' and 'existing' containing a TYPO3\CMS\Reports\Report\Status\Status object
         */
        protected function getSecurityStatusOfExtensions() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Command {
    /**
     * CommandController for working with extension management through CLI/scheduler
     */
    class ExtensionCommandController extends \typo3\cms\extbase\mvc\controller\commandcontroller {
        /**
         * @var bool
         */
        protected $requestAdminPermissions;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;

        public function injectSignalSlotDispatcher(\TYPO3\CMS\Extbase\SignalSlot\Dispatcher $signalSlotDispatcher) {}
/** @var $service \TYPO3\CMS\Extensionmanager\Utility\InstallUtility */
        public function installCommand(/** @var $service \TYPO3\CMS\Extensionmanager\Utility\InstallUtility */
$extensionKey) {}
/** @var $service \TYPO3\CMS\Extensionmanager\Utility\InstallUtility */
        public function uninstallCommand(/** @var $service \TYPO3\CMS\Extensionmanager\Utility\InstallUtility */
$extensionKey) {}
        /**
         * Updates class loading information.
         *
         * This command is only needed during development. The extension manager takes care
         * creating or updating this info properly during extension (de-)activation.
         *
         * @cli
         */
        public function dumpClassLoadingInformationCommand() {}
        /**
         * Emits packages may have changed signal
         */
        protected function emitPackagesMayHaveChangedSignal() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Service {
    /**
     * Service class for managing multiple step processes (dependencies for example)
     */
    class ExtensionManagementService implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue
         */
        protected $downloadQueue;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\DependencyUtility
         */
        protected $dependencyUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\InstallUtility
         */
        protected $installUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility
         */
        protected $extensionModelUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\DownloadUtility
         */
        protected $downloadUtility;
        /**
         * @var bool
         */
        protected $automaticInstallationEnabled;
        /**
         * @var bool
         */
        protected $skipDependencyCheck;

        public function injectDownloadQueue(\TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue $downloadQueue) {}
        public function injectDependencyUtility(\TYPO3\CMS\Extensionmanager\Utility\DependencyUtility $dependencyUtility) {}
        public function injectInstallUtility(\TYPO3\CMS\Extensionmanager\Utility\InstallUtility $installUtility) {}
        public function injectExtensionModelUtility(\TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility $extensionModelUtility) {}
        public function injectDownloadUtility(\TYPO3\CMS\Extensionmanager\Utility\DownloadUtility $downloadUtility) {}
        public function markExtensionForInstallation($extensionKey) {}
        public function markExtensionForCopy($extensionKey, $sourceFolder) {}
        public function markExtensionForDownload(Extension $extension) {}
        public function markExtensionForUpdate(Extension $extension) {}
        public function setSkipDependencyCheck($skipDependencyCheck) {}
        public function setAutomaticInstallationEnabled($automaticInstallationEnabled) {}
        public function installExtension(Extension $extension) {}
        /**
         * Returns the unresolved dependency errors
         *
         * @return array
         */
        public function getDependencyErrors() {}
        public function getExtension($extensionKey) {}
        public function isAvailable($extensionKey) {}
        public function reloadPackageInformation($extensionKey) {}
        protected function downloadExtension(Extension $extension) {}
        protected function checkDependencies(Extension $extension) {}
        protected function setInExtensionRepository($extensionKey) {}
        protected function copyDependencies(array $copyQueue) {}
        protected function uninstallDependenciesToBeUpdated(array $updateQueue) {}
        protected function installDependencies(array $installQueue) {}
        protected function downloadDependencies(array $downloadQueue) {}
        public function getAndResolveDependencies(Extension $extension) {}
        public function downloadMainExtension(Extension $extension) {}
        protected function emitWillInstallExtensionsSignal(array $installQueue) {}
        protected function emitHasInstalledExtensionSignal($extensionKey) {}
        /**
         * Get the SignalSlot dispatcher
         *
         * @return Dispatcher
         */
        protected function getSignalSlotDispatcher() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Domain\Repository {
    /**
     * A repository for extensions
     */
    class ExtensionRepository extends \typo3\cms\extbase\persistence\repository {
        const TABLE_NAME = 'tx_extensionmanager_domain_model_extension';

        /**
         * @var \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
         */
        protected $dataMapper;

        public function injectDataMapper(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper $dataMapper) {}
        /**
         * Do not include pid in queries
         */
        public function initializeObject() {}
        /**
         * Count all extensions
         *
         * @return int
         */
        public function countAll() {}
        /**
         * Finds all extensions
         *
         * @return array|\TYPO3\CMS\Extbase\Persistence\QueryResultInterface
         */
        public function findAll() {}
        public function findByExtensionKeyOrderedByVersion($extensionKey) {}
        public function findOneByCurrentVersionByExtensionKey($extensionKey) {}
        public function findOneByExtensionKeyAndVersion($extensionKey, $version) {}
        public function findByTitleOrAuthorNameOrExtensionKey($searchString) {}
        public function findByVersionRangeAndExtensionKeyOrderedByVersion($extensionKey, $lowestVersion = 0, $highestVersion = 0, $includeCurrentVersion = true) {}
        /**
         * Finds all extensions with category "distribution" not published by the TYPO3 CMS Team
         *
         * @return \TYPO3\CMS\Extbase\Persistence\QueryResultInterface
         */
        public function findAllCommunityDistributions() {}
        /**
         * Finds all extensions with category "distribution" that are published by the TYPO3 CMS Team
         *
         * @return \TYPO3\CMS\Extbase\Persistence\QueryResultInterface
         */
        public function findAllOfficialDistributions() {}
        public function countByVersionRangeAndExtensionKey($extensionKey, $lowestVersion = 0, $highestVersion = 0) {}
        public function findHighestAvailableVersion($extensionKey) {}
        public function insertLastVersion($repositoryUid = 1) {}
        protected function markExtensionWithMaximumVersionAsCurrent($repositoryUid) {}
        protected function fetchMaximalVersionsForAllExtensions($repositoryUid) {}
        /**
         * Returns the number of extensions that are current.
         *
         * @return int
         */
        protected function getNumberOfCurrentExtensions() {}
        protected function addDefaultConstraints(\TYPO3\CMS\Extbase\Persistence\Generic\Query $query) {}
    }

    /**
     * A repository for extension repositories
     */
    class RepositoryRepository extends \typo3\cms\extbase\persistence\repository {
        /** @var $defaultQuerySettings \TYPO3\CMS\Extbase\Persistence\Generic\QuerySettingsInterface */
        public function initializeObject() {}
        public function updateRepositoryCount($extCount, $uid = 1) {}
        /**
         * Find main typo3.org repository
         *
         * @return \TYPO3\CMS\Extensionmanager\Domain\Model\Repository
         */
        public function findOneTypo3OrgRepository() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Domain\Model {
    /**
     * Download Queue - storage for extensions to be downloaded
     */
    class DownloadQueue implements \typo3\cms\core\singletoninterface {
        /**
         * Storage for extensions to be downloaded
         *
         * @var Extension[string][string]
         */
        protected $extensionStorage;
        /**
         * Storage for extensions to be installed
         *
         * @var array
         */
        protected $extensionInstallStorage;
        /**
         * Storage for extensions to be copied
         *
         * @var array
         */
        protected $extensionCopyStorage;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ListUtility
         */
        protected $listUtility;

        public function injectListUtility(\TYPO3\CMS\Extensionmanager\Utility\ListUtility $listUtility) {}
        public function addExtensionToQueue(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension, $stack = 'download') {}
        /**
         * @return array
         */
        public function getExtensionQueue() {}
        public function removeExtensionFromQueue(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension, $stack = 'download') {}
        public function addExtensionToInstallQueue($extension) {}
        public function removeExtensionFromInstallQueue($extensionKey) {}
        public function addExtensionToCopyQueue($extensionKey, $sourceFolder) {}
        public function removeExtensionFromCopyQueue($extensionKey) {}
        /**
         * Gets the extension installation queue
         *
         * @return array
         */
        public function getExtensionInstallStorage() {}
        /**
         * Gets the extension copy queue
         *
         * @return array
         */
        public function getExtensionCopyStorage() {}
        public function isQueueEmpty($stack = 'download') {}
        /**
         * Return whether the copy queue contains extensions or not
         *
         * @return bool
         */
        public function isCopyQueueEmpty() {}
        /**
         * Return whether the install queue contains extensions or not
         *
         * @return bool
         */
        public function isInstallQueueEmpty() {}
        public function resetExtensionQueue($stack = null) {}
        /**
         * Resets the copy queue and returns the old extensions
         * @return array
         */
        public function resetExtensionCopyStorage() {}
        /**
         * Resets the install queue and returns the old extensions
         * @return array
         */
        public function resetExtensionInstallStorage() {}
    }

    /**
     * Main extension model
     */
    class Dependency extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $identifier;
        /**
         * @var string
         */
        protected $lowestVersion;
        /**
         * @var string
         */
        protected $highestVersion;
        /**
         * @var string
         */
        protected $type;
        /**
         * @var array
         */
        static protected $dependencyTypes;
        /**
         * @var array
         */
        static public $specialDependencies;

        public function setHighestVersion($highestVersion) {}
        /**
         * @return string
         */
        public function getHighestVersion() {}
        public function setIdentifier($identifier) {}
        /**
         * @return string
         */
        public function getIdentifier() {}
        public function setLowestVersion($lowestVersion) {}
        /**
         * @return string
         */
        public function getLowestVersion() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getType() {}
    }

    /**
     * Repository mirrors object for extension manager.
     */
    class Mirrors extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * Keeps mirrors.
         *
         * @var array
         */
        protected $mirrors;
        /**
         * Keeps currently select mirror.
         *
         * Is array index.
         *
         * @var int
         */
        protected $currentMirror;
        /**
         * Keeps information if a mirror should
         * be randomly selected.
         *
         * @var bool
         */
        protected $isRandomSelection;

        public function setSelect($mirrorId = null) {}
        /**
         * Method returns one mirror for use.
         *
         * Mirror has previously been selected or is chosen
         * randomly.
         *
         * @access public
         * @return array array of a mirror's properties or NULL in case of errors
         */
        public function getMirror() {}
        /**
         * Gets the mirror url from selected mirror
         *
         * @return string
         */
        public function getMirrorUrl() {}
        /**
         * Method returns all available mirrors.
         *
         * @access public
         * @return array multidimensional array with mirrors and their properties
         * @see $mirrors, setMirrors()
         */
        public function getMirrors() {}
        public function setMirrors(array $mirrors) {}
    }

    /**
     * Main extension model
     */
    class Extension extends \typo3\cms\extbase\domainobject\abstractentity {
        const DISTRIBUTION_CATEGORY = 10;

        /**
         * Contains default categories.
         *
         * @var array
         */
        static protected $defaultCategories;
        /**
         * Contains default states.
         *
         * @var array
         */
        static protected $defaultStates;
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected $objectManager;
        /**
         * @var string
         */
        protected $extensionKey;
        /**
         * @var string
         */
        protected $version;
        /**
         * @var int
         */
        protected $integerVersion;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var int
         */
        protected $state;
        /**
         * @var int
         */
        protected $category;
        /**
         * @var \DateTime
         */
        protected $lastUpdated;
        /**
         * @var string
         */
        protected $updateComment;
        /**
         * @var string
         */
        protected $authorName;
        /**
         * @var string
         */
        protected $authorEmail;
        /**
         * @var bool
         */
        protected $currentVersion;
        /**
         * @var string
         */
        protected $md5hash;
        /**
         * @var int
         */
        protected $reviewState;
        /**
         * @var int
         */
        protected $alldownloadcounter;
        /**
         * @var string
         */
        protected $serializedDependencies;
        /**
         * @var \SplObjectStorage<\TYPO3\CMS\Extensionmanager\Domain\Model\Dependency>
         */
        protected $dependencies;
        /**
         * @internal
         * @var int
         */
        protected $position;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManager $objectManager) {}
        public function setAuthorEmail($authorEmail) {}
        /**
         * @return string
         */
        public function getAuthorEmail() {}
        public function setAuthorName($authorName) {}
        /**
         * @return string
         */
        public function getAuthorName() {}
        public function setCategory($category) {}
        /**
         * @return int
         */
        public function getCategory() {}
        /**
         * Get Category String
         *
         * @return string
         */
        public function getCategoryString() {}
        public function getCategoryIndexFromStringOrNumber($category) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setExtensionKey($extensionKey) {}
        /**
         * @return string
         */
        public function getExtensionKey() {}
        public function setLastUpdated(\DateTime $lastUpdated) {}
        /**
         * @return \DateTime
         */
        public function getLastUpdated() {}
        public function setState($state) {}
        /**
         * @return int
         */
        public function getState() {}
        /**
         * Get State string
         *
         * @return string
         */
        public function getStateString() {}
        public function getDefaultState($state = null) {}
        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setUpdateComment($updateComment) {}
        /**
         * @return string
         */
        public function getUpdateComment() {}
        public function setVersion($version) {}
        /**
         * @return string
         */
        public function getVersion() {}
        public function setCurrentVersion($currentVersion) {}
        /**
         * @return bool
         */
        public function getCurrentVersion() {}
        public function setMd5hash($md5hash) {}
        /**
         * @return string
         */
        public function getMd5hash() {}
        /**
         * Possible install paths
         *
         * @static
         * @return array
         */
        public static function returnInstallPaths() {}
        /**
         * Allowed install paths
         *
         * @static
         * @return array
         */
        public static function returnAllowedInstallPaths() {}
        /**
         * Allowed install names: System, Global, Local
         *
         * @static
         * @return array
         */
        public static function returnAllowedInstallTypes() {}
        public function setSerializedDependencies($dependencies) {}
        /**
         * @return string
         */
        public function getSerializedDependencies() {}
        public function setDependencies($dependencies) {}
        /** @var $extensionModelUtility \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility */
        public function getDependencies() {}
        public function addDependency(\TYPO3\CMS\Extensionmanager\Domain\Model\Dependency $dependency) {}
        public function setIntegerVersion($integerVersion) {}
        /**
         * @return int
         */
        public function getIntegerVersion() {}
        public function setReviewState($reviewState) {}
        /**
         * @return int
         */
        public function getReviewState() {}
        public function setPosition($position) {}
        /**
         * @return int
         */
        public function getPosition() {}
        public function setAlldownloadcounter($alldownloadcounter) {}
        /**
         * @return int
         */
        public function getAlldownloadcounter() {}
    }

    /**
     * Repository object for extension manager.
     */
    class Repository extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * Keeps repository title.
         *
         * @var string
         */
        protected $title;
        /**
         * Keeps repository description.
         *
         * @var string
         */
        protected $description;
        /**
         * Keeps mirror list URL.
         *
         * @var string
         */
        protected $mirrorListUrl;
        /**
         * Keeps repository mirrors object.
         *
         * @var \TYPO3\CMS\Extensionmanager\Domain\Model\Mirrors
         */
        protected $mirrors;
        /**
         * Keeps wsdl URL.
         *
         * @var string
         */
        protected $wsdlUrl;
        /**
         * Keeps last update.
         *
         * @var \DateTime
         */
        protected $lastUpdate;
        /**
         * Keeps extension count.
         *
         * @var string
         */
        protected $extensionCount;

        /**
         * Method returns title of a repository.
         *
         * @access public
         * @return string title of repository
         * @see $title, setTitle()
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * Method returns description of a repository.
         *
         * @access public
         * @return string title of repository
         * @see $title, setTitle()
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Method returns URL of a resource that contains repository mirrors.
         *
         * @access public
         * @return string URL of file that contains repository mirrors
         * @see $mirrorListUrl, getMirrorListUrl()
         */
        public function getMirrorListUrl() {}
        public function setMirrorListUrl($url) {}
        /**
         * Method returns URL of repository WSDL.
         *
         * @access public
         * @return string URL of repository WSDL
         * @see $wsdlUrl, setWsdlUrl()
         */
        public function getWsdlUrl() {}
        public function setWsdlUrl($url) {}
        /**
         * Method returns LastUpdate.
         *
         * @access public
         * @return \DateTime timestamp of last update
         */
        public function getLastUpdate() {}
        public function setLastUpdate(\DateTime $time) {}
        /**
         * Method returns extension count
         *
         * @access public
         * @return int count of read extensions
         */
        public function getExtensionCount() {}
        public function setExtensionCount($count) {}
        public function addMirrors(\TYPO3\CMS\Extensionmanager\Domain\Model\Mirrors $mirrors) {}
        /**
         * Method returns information if a repository mirrors
         * object has been registered to this repository.
         *
         * @access public
         * @return bool TRUE, if a repository mirrors object has been registered, otherwise FALSE
         * @see $mirrors, addMirrors(), getMirrors(), removeMirrors()
         */
        public function hasMirrors() {}
        /**
         * Method returns a repository mirrors object.
         *
         * @access public
         * @return \TYPO3\CMS\Extensionmanager\Domain\Model\Mirrors mirrors for repository
         * @see $mirrors, addMirrors(), hasMirrors(), removeMirrors()
         */
        public function getMirrors() {}
        /**
         * Method unregisters a repository mirrors object.
         *
         * @access public
         * @see $mirrors, addMirrors(), getMirrors(), hasMirrors()
         */
        public function removeMirrors() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Exception {
    /**
     * An exception when some dependency is unresolved
     */
    class MissingVersionDependencyException extends \typo3\cms\extensionmanager\exception\unresolveddependencyexception {}

    /**
     * An exception when some dependency is unresolved
     */
    class MissingExtensionDependencyException extends \typo3\cms\extensionmanager\exception\unresolveddependencyexception {}

    /**
     * An exception when something is wrong within the extension manager
     */
    class ExtensionManagerException extends \typo3\cms\extensionmanager\exception {}

    /**
     * An exception when some dependency is unresolved
     */
    class UnresolvedTypo3DependencyException extends \typo3\cms\extensionmanager\exception\unresolveddependencyexception {}

    /**
     * An exception when some dependency is unresolved
     */
    class UnresolvedDependencyException extends \typo3\cms\extensionmanager\exception\extensionmanagerexception {}

    /**
     * An exception when some dependency is unresolved
     */
    class UnresolvedPhpDependencyException extends \typo3\cms\extensionmanager\exception\unresolveddependencyexception {}

    /**
     * An exception when dependency configuration could not be found after uploading a t3x file
     */
    class DependencyConfigurationNotFoundException extends \typo3\cms\extensionmanager\exception\extensionmanagerexception {}

}

namespace TYPO3\CMS\Extensionmanager\Utility {
    /**
     * Utility for dealing with extension list related functions
     *
     * @TODO: Refactor this API class:
     * - The methods depend on each other, they take each others result, that could be done internally
     * - There is no good wording to distinguish existing and loaded extensions
     * - The name 'listUtility' is not good, the methods could be moved to some 'extensionInformationUtility', or a repository?
     */
    class ListUtility implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\EmConfUtility
         */
        protected $emConfUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\InstallUtility
         */
        protected $installUtility;
        /**
         * @var \TYPO3\CMS\Core\Package\PackageManager
         */
        protected $packageManager;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * @var array
         */
        protected $availableExtensions;

        public function injectEmConfUtility(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility $emConfUtility) {}
        public function injectExtensionRepository(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository $extensionRepository) {}
        public function injectInstallUtility(\TYPO3\CMS\Extensionmanager\Utility\InstallUtility $installUtility) {}
        public function injectPackageManager(\TYPO3\CMS\Core\Package\PackageManager $packageManager) {}
        public function injectSignalSlotDispatcher(\TYPO3\CMS\Extbase\SignalSlot\Dispatcher $signalSlotDispatcher) {}
        /**
         * Returns the list of available, but not necessarily loaded extensions
         *
         * @return array[] All extensions with info
         */
        public function getAvailableExtensions() {}
        /**
         * Reset and reload the available extensions
         */
        public function reloadAvailableExtensions() {}
        public function getExtension($extensionKey) {}
        /**
         * Emits packages may have changed signal
         */
        protected function emitPackagesMayHaveChangedSignal() {}
        protected function getInstallTypeForPackage(PackageInterface $package) {}
        public function getAvailableAndInstalledExtensions(array $availableExtensions) {}
        public function enrichExtensionsWithEmConfInformation(array $extensions) {}
        public function enrichExtensionsWithEmConfAndTerInformation(array $extensions) {}
        protected function getExtensionTerData($extensionKey, $version) {}
        public function enrichExtensionsWithIconInformation(array $extensions) {}
        /**
         * Gets all available and installed extension with additional information
         * from em_conf and TER (if available)
         *
         * @return array
         */
        public function getAvailableAndInstalledExtensionsWithAdditionalInformation() {}
    }

    /**
     * Utility for dealing with extension model related helper functions
     */
    class ExtensionModelUtility {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected $objectManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManager $objectManager) {}
/** @var \TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension */
        public function mapExtensionArrayToModel(/** @var \TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension */
array $extensionArray) {}
/** @var $dependencyObject \TYPO3\CMS\Extensionmanager\Domain\Model\Dependency */
        public function convertDependenciesToObjects(/** @var $dependencyObject \TYPO3\CMS\Extensionmanager\Domain\Model\Dependency */
$dependencies) {}
    }

    /**
     * Utility for dealing with ext_emconf
     */
    class EmConfUtility implements \typo3\cms\core\singletoninterface {
        public function includeEmConf(array $extension) {}
        public function constructEmConf(array $extensionData, \TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension = null) {}
        public function fixEmConf(array $emConf) {}
        public function stringToDependency($dependency) {}
    }

    /**
     * Utility for dealing with files and folders
     */
    class FileHandlingUtility implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\EmConfUtility
         */
        protected $emConfUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\InstallUtility
         */
        protected $installUtility;
        /**
         * @var \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected $languageService;

        public function injectEmConfUtility(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility $emConfUtility) {}
        public function injectInstallUtility(\TYPO3\CMS\Extensionmanager\Utility\InstallUtility $installUtility) {}
        public function injectLanguageService(\TYPO3\CMS\Core\Localization\LanguageService $languageService) {}
        /**
         * Initialize method - loads language file
         */
        public function initializeObject() {}
        public function unpackExtensionFromExtensionDataArray(array $extensionData, Extension $extension = null, $pathType = 'Local') {}
        protected function extractDirectoriesFromExtensionData(array $files) {}
        protected function extractFilesArrayFromExtensionData(array $extensionData) {}
        protected function createDirectoriesForExtensionFiles(array $directories, $rootPath) {}
        protected function createNestedDirectory($directory) {}
        protected function writeExtensionFiles(array $files, $rootPath) {}
        protected function makeAndClearExtensionDir($extensionKey, $pathType = 'Local') {}
        public function getExtensionDir($extensionKey, $pathType = 'Local') {}
        protected function addDirectory($extDirPath) {}
        public function ensureConfiguredDirectoriesExist(array $extension) {}
        protected function directoryExists($directory) {}
        protected function getAbsolutePathsToConfiguredDirectories(array $extension) {}
        protected function getPathToUploadFolder($extension) {}
        public function removeDirectory($extDirPath) {}
        protected function writeEmConfToFile(array $extensionData, $rootPath, Extension $extension = null) {}
        public function isValidExtensionPath($path) {}
        protected function getAbsolutePath($relativePath) {}
        protected function getRelativePath($absolutePath) {}
        public function getAbsoluteExtensionPath($extension) {}
        public function getExtensionVersion($extension) {}
        public function createZipFileFromExtension($extension) {}
        public function unzipExtensionFromFile($file, $fileName, $pathType = 'Local') {}
        public function sendZipFileToBrowserAndDelete($fileName, $downloadName = '') {}
        protected function reloadPackageInformation($extensionKey) {}
    }

    /**
     * Utility for Downloading Extensions
     */
    class DownloadUtility implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\Connection\TerUtility
         */
        protected $terUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\Repository\Helper
         */
        protected $repositoryHelper;
        /**
         * @var string
         */
        protected $downloadPath;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility
         */
        protected $fileHandlingUtility;

        public function injectTerUtility(\TYPO3\CMS\Extensionmanager\Utility\Connection\TerUtility $terUtility) {}
        public function injectRepositoryHelper(\TYPO3\CMS\Extensionmanager\Utility\Repository\Helper $repositoryHelper) {}
        public function injectFileHandlingUtility(\TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility $fileHandlingUtility) {}
        public function download(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extension) {}
        public function setDownloadPath($downloadPath) {}
        /**
         * Get the download path
         *
         * @return string
         */
        public function getDownloadPath() {}
    }

    /**
     * Utility to find and execute class.ext_update.php scripts of extensions
     */
    class UpdateScriptUtility {
        public function executeUpdateIfNeeded($extensionKey) {}
        protected function requireUpdateScript($extensionKey) {}
        public function checkUpdateScriptExists($extensionKey) {}
        protected function determineUpdateClassName($extensionKey) {}
    }

    /**
     * Extension Manager Install Utility
     */
    class InstallUtility implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        public $objectManager;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\DependencyUtility
         */
        protected $dependencyUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility
         */
        protected $fileHandlingUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ListUtility
         */
        protected $listUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        public $extensionRepository;
        /**
         * @var \TYPO3\CMS\Core\Package\PackageManager
         */
        protected $packageManager;
        /**
         * @var \TYPO3\CMS\Core\Cache\CacheManager
         */
        protected $cacheManager;
        /**
         * @var \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
         */
        protected $signalSlotDispatcher;
        /**
         * @var \TYPO3\CMS\Core\Registry
         */
        protected $registry;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManager $objectManager) {}
        public function injectDependencyUtility(\TYPO3\CMS\Extensionmanager\Utility\DependencyUtility $dependencyUtility) {}
        public function injectFileHandlingUtility(\TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility $fileHandlingUtility) {}
        public function injectListUtility(\TYPO3\CMS\Extensionmanager\Utility\ListUtility $listUtility) {}
        public function injectExtensionRepository(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository $extensionRepository) {}
        public function injectPackageManager(\TYPO3\CMS\Core\Package\PackageManager $packageManager) {}
        public function injectCacheManager(\TYPO3\CMS\Core\Cache\CacheManager $cacheManager) {}
        public function injectSignalSlotDispatcher(\TYPO3\CMS\Extbase\SignalSlot\Dispatcher $signalSlotDispatcher) {}
        public function injectRegistry(\TYPO3\CMS\Core\Registry $registry) {}
        public function install($extensionKey) {}
        public function processExtensionSetup($extensionKey) {}
        public function uninstall($extensionKey) {}
        public function isLoaded($extensionKey) {}
        /**
         * Reset and reload the available extensions
         */
        public function reloadAvailableExtensions() {}
        protected function loadExtension($extensionKey) {}
        protected function unloadExtension($extensionKey) {}
        protected function emitAfterExtensionInstallSignal($extensionKey) {}
        protected function emitAfterExtensionUninstallSignal($extensionKey) {}
        public function isAvailable($extensionKey) {}
        public function reloadPackageInformation($extensionKey) {}
        public function enrichExtensionWithDetails($extensionKey, $loadTerInformation = true) {}
        protected function getExtensionArray($extensionKey) {}
        protected function ensureConfiguredDirectoriesExist(array $extension) {}
        public function processDatabaseUpdates(array $extension) {}
        protected function processRuntimeDatabaseUpdates($extensionKey) {}
        protected function emitTablesDefinitionIsBeingBuiltSignal($extensionKey) {}
        /**
         * Reload Cache files and Typo3LoadedExtensions
         */
        public function reloadCaches() {}
        /**
         * Reloads PHP opcache
         */
        protected function reloadOpcache() {}
        protected function saveDefaultConfiguration($extensionKey) {}
        public function updateDbWithExtTablesSql($rawDefinitions) {}
        public function importStaticSql($rawDefinitions) {}
        public function removeExtension($extension) {}
        public function isUpdateAvailable(Extension $extensionData) {}
/** @var $extensionUpdates[] \TYPO3\CMS\Extensionmanager\Domain\Model\Extension */
        public function getUpdateableVersion(/** @var $extensionUpdates[] \TYPO3\CMS\Extensionmanager\Domain\Model\Extension */
Extension $extensionData) {}
/** @var \TYPO3\CMS\Core\Log\Logger $logger */
        protected function importT3DFile(/** @var \TYPO3\CMS\Core\Log\Logger $logger */
$extensionSiteRelPath) {}
        protected function emitAfterExtensionT3DImportSignal($importFileToUse, $importResult) {}
        protected function importStaticSqlFile($extensionSiteRelPath) {}
        protected function emitAfterExtensionStaticSqlImportSignal($extTablesStaticSqlRelFile) {}
        protected function importInitialFiles($extensionSiteRelPath, $extensionKey) {}
        protected function emitAfterExtensionFileImportSignal($destinationAbsolutePath) {}
    }

    /**
     * Utility for dealing with dependencies
     */
    class DependencyUtility implements \typo3\cms\core\singletoninterface {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManager
         */
        protected $objectManager;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ListUtility
         */
        protected $listUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\EmConfUtility
         */
        protected $emConfUtility;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService
         */
        protected $managementService;
        /**
         * @var array
         */
        protected $availableExtensions;
        /**
         * @var string
         */
        protected $localExtensionStorage;
        /**
         * @var array
         */
        protected $dependencyErrors;
        /**
         * @var bool
         */
        protected $skipDependencyCheck;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManager $objectManager) {}
        public function injectExtensionRepository(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository $extensionRepository) {}
        public function injectListUtility(\TYPO3\CMS\Extensionmanager\Utility\ListUtility $listUtility) {}
        public function injectEmConfUtility(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility $emConfUtility) {}
        public function injectManagementService(\TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService $managementService) {}
        public function setLocalExtensionStorage($localExtensionStorage) {}
        /**
         * Setter for available extensions
         * gets available extensions from list utility if not already done
         */
        protected function setAvailableExtensions() {}
        public function setSkipDependencyCheck($skipDependencyCheck) {}
/** @var Dependency $dependency */
        public function checkDependencies(/** @var Dependency $dependency */
Extension $extension) {}
        /**
         * Returns TRUE if a dependency error was found
         *
         * @return bool
         */
        public function hasDependencyErrors() {}
        /**
         * Return the dependency errors
         *
         * @return array
         */
        public function getDependencyErrors() {}
        protected function checkTypo3Dependency(Dependency $dependency) {}
        protected function checkPhpDependency(Dependency $dependency) {}
        protected function checkExtensionDependency(Dependency $dependency) {}
        protected function getExtensionFromRepository($extensionKey, Dependency $dependency) {}
        protected function getExtensionFromInExtensionRepository($extensionKey) {}
        protected function getExtensionFromTer($extensionKey, Dependency $dependency) {}
        protected function isDependentExtensionLoaded($extensionKey) {}
        protected function isLoadedVersionCompatible(Dependency $dependency) {}
        protected function isVersionCompatible($version, Dependency $dependency) {}
        protected function isDependentExtensionAvailable($extensionKey) {}
        protected function isAvailableVersionCompatible(Dependency $dependency) {}
        protected function isExtensionDownloadableFromTer($extensionKey) {}
        protected function isDownloadableVersionCompatible(Dependency $dependency) {}
        protected function getLatestCompatibleExtensionByIntegerVersionDependency(Dependency $dependency) {}
        protected function getLowestAndHighestIntegerVersions(Dependency $dependency) {}
        public function findInstalledExtensionsThatDependOnMe($extensionKey) {}
/** @var Dependency $dependency */
        public function getExtensionsSuitableForTypo3Version(/** @var Dependency $dependency */
$extensions) {}
        public function filterYoungestVersionOfExtensionList(array $extensions, $showUnsuitable) {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Utility\Repository {
    /**
     * Central utility class for repository handling.
     */
    class Helper implements \typo3\cms\core\singletoninterface {
        const PROBLEM_EXTENSION_HASH_CHANGED = 2;
        const PROBLEM_EXTENSION_FILE_NOT_EXISTING = 1;
        const PROBLEM_NO_VERSIONS_IN_DATABASE = 4;

        /**
         * Keeps instance of repository class.
         *
         * @var \TYPO3\CMS\Extensionmanager\Domain\Model\Repository
         */
        protected $repository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository
         */
        protected $repositoryRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;

        /**
         * Class constructor.
         *
         * @access public
         */
        public function __construct() {}
        public function setRepository(\TYPO3\CMS\Extensionmanager\Domain\Model\Repository $repository) {}
        /**
         * Method fetches extension list file from remote server.
         *
         * Delegates to {@link fetchFile()}.
         *
         * @access public
         * @throws ExtensionManagerException
         * @see fetchFile()
         */
        public function fetchExtListFile() {}
        /**
         * Method fetches mirror list file from remote server.
         *
         * Delegates to {@link fetchFile()}.
         *
         * @access public
         * @throws ExtensionManagerException
         * @see fetchFile()
         */
        public function fetchMirrorListFile() {}
        protected function fetchFile($remoteResource, $localResource) {}
        /**
         * Method returns location of local extension list file.
         *
         * @access public
         * @return string local location of file
         * @see getRemoteExtListFile()
         */
        public function getLocalExtListFile() {}
        /**
         * Method returns location of remote extension list file.
         *
         * @access public
         * @return string remote location of file
         * @see getLocalExtListFile()
         */
        public function getRemoteExtListFile() {}
        /**
         * Method returns location of remote file containing
         * the extension checksum hash.
         *
         * @access public
         * @return string remote location of file
         */
        public function getRemoteExtHashFile() {}
        /**
         * Method returns location of local mirror list file.
         *
         * @access public
         * @return string local location of file
         * @see getRemoteMirrorListFile()
         */
        public function getLocalMirrorListFile() {}
        /**
         * Method returns location of remote mirror list file.
         *
         * @access public
         * @return string remote location of file
         * @see getLocalMirrorListFile()
         */
        public function getRemoteMirrorListFile() {}
/** @var $objMirrorListImporter \TYPO3\CMS\Extensionmanager\Utility\Importer\MirrorListUtility */
        public function getMirrors(/** @var $objMirrorListImporter \TYPO3\CMS\Extensionmanager\Utility\Importer\MirrorListUtility */
$forcedUpdateFromRemote = true) {}
        /**
         * Method returns information if currently available
         * extension list might be outdated.
         *
         * @access public
         * @see \TYPO3\CMS\Extensionmanager\Utility\Repository\Helper::PROBLEM_NO_VERSIONS_IN_DATABASE,
         * @throws ExtensionManagerException
         * @return int "0" if everything is perfect, otherwise bitmask with problems
         */
        public function isExtListUpdateNecessary() {}
        /**
         * Method updates TYPO3 database with up-to-date
         * extension version records.
         *
         * @return bool TRUE if the extension list was successfully update, FALSE if no update necessary
         * @throws ExtensionManagerException
         * @see isExtListUpdateNecessary()
         */
        public function updateExtList() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Utility\Importer {
    /**
     * Importer object for mirror list.
     */
    class MirrorListUtility implements \splobserver {
        /**
         * Keeps instance of a XML parser.
         *
         * @var \TYPO3\CMS\Extensionmanager\Utility\Parser\AbstractMirrorXmlParser
         */
        protected $parser;
        /**
         * Keeps mirrors' details.
         *
         * @var array
         */
        protected $arrTmpMirrors;

        /**
         * Class constructor.
         *
         * Method retrieves and initializes extension XML parser instance
         * @throws \TYPO3\CMS\Extensionmanager\Exception\ExtensionManagerException
         */
        public function __construct() {}
/** @var $objRepositoryMirrors \TYPO3\CMS\Extensionmanager\Domain\Model\Mirrors */
        public function getMirrors(/** @var $objRepositoryMirrors \TYPO3\CMS\Extensionmanager\Domain\Model\Mirrors */
$localMirrorListFile) {}
        public function update(\SplSubject $subject) {}
    }

    /**
     * Importer object for extension list
     */
    class ExtensionListUtility implements \splobserver {
        /**
         * Keeps instance of a XML parser.
         *
         * @var \TYPO3\CMS\Extensionmanager\Utility\Parser\AbstractExtensionXmlParser
         */
        protected $parser;
        /**
         * Keeps number of processed version records.
         *
         * @var int
         */
        protected $sumRecords;
        /**
         * Keeps record values to be inserted into database.
         *
         * @var array
         */
        protected $arrRows;
        /**
         * Keeps fieldnames of tx_extensionmanager_domain_model_extension table.
         *
         * @var array
         */
        static protected $fieldNames;
        /**
         * Keeps indexes of fields that should not be quoted.
         *
         * @var array
         */
        static protected $fieldIndicesNoQuote;
        /**
         * Keeps repository UID.
         *
         * The UID is necessary for inserting records.
         *
         * @var int
         */
        protected $repositoryUid;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository
         */
        protected $repositoryRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepository;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Model\Extension
         */
        protected $extensionModel;

        /** @var $objectManager \TYPO3\CMS\Extbase\Object\ObjectManager */
        public function __construct() {}
        public function import($localExtensionListFile, $repositoryUid = null) {}
        protected function loadIntoDatabase(\SplSubject $subject) {}
        public function update(\SplSubject $subject) {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Utility\Connection {
    /**
     * TER2 connection handling class for the TYPO3 Extension Manager.
     *
     * It contains methods for downloading and uploading extensions and related code
     */
    class TerUtility {
        /**
         * @var string
         */
        public $wsdlUrl;

        public function fetchExtension($extensionKey, $version, $expectedMd5, $mirrorUrl) {}
        public function decodeServerData($externalData) {}
        public function decodeExchangeData($stream) {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Utility\Parser {
    /**
     * Factory for XML parsers.
     */
    class XmlParserFactory {
        /**
         * An array with instances of xml parsers.
         * This member is set in the getParserInstance() function.
         *
         * @var array
         */
        static protected $instance;
        /**
         * Keeps array of all available parsers.
         *
         * @todo This would better be moved to a global configuration array like
         * $GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']. (might require EM to be moved in a sysext)
         *
         * @var array
         */
        static protected $parsers;

        public static function getParserInstance($parserType, $excludeClassNames = '') {}
    }

    /**
     * Abstract parser for EM related TYPO3 xml files.
     */
    abstract class AbstractXmlParser implements \splsubject {
        /**
         * Keeps XML parser instance.
         *
         * @var mixed
         */
        protected $objXml;
        /**
         * Keeps name of required PHP extension
         * for this class to work properly.
         *
         * @var string
         */
        protected $requiredPhpExtensions;
        /**
         * Keeps list of attached observers.
         *
         * @var \SplObserver[]
         */
        protected $observers;

        public function attach(\SplObserver $observer) {}
        public function detach(\SplObserver $observer) {}
        /**
         * Method notifies attached observers.
         *
         * @access public
         * @see $observers, attach(), detach()
         */
        public function notify() {}
        /**
         * Method determines if a necessary PHP extension is available.
         *
         * Method tries to load the extension if necessary and possible.
         *
         * @access public
         * @return bool TRUE, if PHP extension is available, otherwise FALSE
         */
        public function isAvailable() {}
        abstract public function parseXml($file) ;
        /**
         * Create required parser
         */
        abstract protected function createParser() ;
    }

    /**
     * Abstract parser for TYPO3's mirror.xml file.
     */
    abstract class AbstractMirrorXmlParser extends \typo3\cms\extensionmanager\utility\parser\abstractxmlparser {
        /**
         * Keeps country of currently processed mirror.
         *
         * @var string
         */
        protected $country;
        /**
         * Keeps hostname of currently processed mirror.
         *
         * @var string
         */
        protected $host;
        /**
         * Keeps path to mirrored TER of currently processed mirror.
         *
         * @var string
         */
        protected $path;
        /**
         * Keeps sponsor link of currently processed mirror.
         *
         * @var string
         */
        protected $sponsorlink;
        /**
         * Keeps sponsor logo location of currently processed mirror.
         *
         * @var string
         */
        protected $sponsorlogo;
        /**
         * Keeps sponsor name of currently processed mirror.
         *
         * @var string
         */
        protected $sponsorname;
        /**
         * Keeps title of currently processed mirror.
         *
         * @var string
         */
        protected $title;

        /**
         * Returns an associative array of all mirror properties.
         *
         * Valid array keys of returned array are:
         * country, host, path, sponsorlink, sponsorlogo, sponsorname, title
         *
         * @access public
         * @return array assoziative array of a mirror's properties
         * @see $country, $host, $path, $sponsorlink, $sponsorlogo, $sponsorname, $title
         */
        public function getAll() {}
        /**
         * Returns country of currently processed mirror.
         *
         * @access public
         * @return string name of country a mirror is located in
         * @see $country, getAll()
         */
        public function getCountry() {}
        /**
         * Returns host of currently processed mirror.
         *
         * @access public
         * @return string host name
         * @see $host, getAll()
         */
        public function getHost() {}
        /**
         * Returns path to mirrored TER of currently processed mirror.
         *
         * @access public
         * @return string path name
         * @see $path, getAll()
         */
        public function getPath() {}
        /**
         * Returns sponsor link of currently processed mirror.
         *
         * @access public
         * @return string URL of a sponsor's website
         * @see $sponsorlink, getAll()
         */
        public function getSponsorlink() {}
        /**
         * Returns sponsor logo location of currently processed mirror.
         *
         * @access public
         * @return string a sponsor's logo location
         * @see $sponsorlogo, getAll()
         */
        public function getSponsorlogo() {}
        /**
         * Returns sponsor name of currently processed mirror.
         *
         * @access public
         * @return string name of sponsor
         * @see $sponsorname, getAll()
         */
        public function getSponsorname() {}
        /**
         * Returns title of currently processed mirror.
         *
         * @access public
         * @return string title of mirror
         * @see $title, get All()
         */
        public function getTitle() {}
        /**
         * Method resets version class properties.
         *
         * @access protected
         * @see $country, $host, $path, $sponsorlink, $sponsorlogo, $sponsorname, $title
         */
        protected function resetProperties() {}
    }

    /**
     * Parser for TYPO3's mirrors.xml file.
     *
     * Depends on PHP ext/xml which should be available
     * with PHP 4+. This is the parser used in TYPO3
     * Core <= 4.3 (without the "collect all data in one
     * array" behaviour).
     * Notice: ext/xml has proven to be buggy with entities.
     * Use at least PHP 5.2.9+ and libxml2 2.7.3+!
     */
    class MirrorXmlPushParser extends \typo3\cms\extensionmanager\utility\parser\abstractmirrorxmlparser {
        /**
         * @var string
         */
        protected $element;

        /**
         * Class constructor.
         */
        public function __construct() {}
        /**
         * Create required parser
         */
        protected function createParser() {}
        public function parseXml($file) {}
        protected function startElement($parser, $elementName, $attrs) {}
        protected function endElement($parser, $elementName) {}
        protected function characterData($parser, $data) {}
    }

    /**
     * Parser for TYPO3's extension.xml file.
     *
     * Depends on PHP ext/xml which should be available
     * with PHP 4+. This is the parser used in TYPO3
     * Core <= 4.3 (without the "collect all data in one
     * array" behaviour).
     * Notice: ext/xml has proven to be buggy with entities.
     * Use at least PHP 5.2.9+ and libxml2 2.7.3+!
     */
    class ExtensionXmlPushParser extends \typo3\cms\extensionmanager\utility\parser\abstractextensionxmlparser {
        /**
         * Keeps current element to process.
         *
         * @var string
         */
        protected $element;

        /**
         * Class constructor.
         */
        public function __construct() {}
        /**
         * Create required parser
         */
        protected function createParser() {}
        public function parseXml($file) {}
        protected function startElement($parser, $elementName, $attrs) {}
        protected function endElement($parser, $elementName) {}
        protected function characterData($parser, $data) {}
    }

    /**
     * Abstract parser for TYPO3's extension.xml file.
     */
    abstract class AbstractExtensionXmlParser extends \typo3\cms\extensionmanager\utility\parser\abstractxmlparser {
        /**
         * Keeps current author company of an extension's version.
         *
         * @var string
         */
        protected $authorcompany;
        /**
         * Keeps current author mail address of an extension's version.
         *
         * @var string
         */
        protected $authoremail;
        /**
         * Keeps current author name of an extension's version.
         *
         * @var string
         */
        protected $authorname;
        /**
         * Keeps current category of an extension's version.
         *
         * @var string
         */
        protected $category;
        /**
         * Keeps current dependencies of an extension's version.
         *
         * @var string
         */
        protected $dependencies;
        /**
         * Keeps current description of an extension's version.
         *
         * @var string
         */
        protected $description;
        /**
         * Keeps current download number sum of all extension's versions.
         *
         * @var string
         */
        protected $extensionDownloadCounter;
        /**
         * Keeps current key of an extension.
         *
         * @var string
         */
        protected $extensionKey;
        /**
         * Keeps current upload date of an extension's version.
         *
         * @var string
         */
        protected $lastuploaddate;
        /**
         * Keeps current owner username of an extension's version.
         *
         * @var string
         */
        protected $ownerusername;
        /**
         * Keeps current reviewstate of an extension's version.
         *
         * @var string
         */
        protected $reviewstate;
        /**
         * Keeps current state of an extension's version.
         *
         * @var string
         */
        protected $state;
        /**
         * Keeps current t3x file hash of an extension's version.
         *
         * @var string
         */
        protected $t3xfilemd5;
        /**
         * Keeps current title of an extension's version.
         *
         * @var string
         */
        protected $title;
        /**
         * Keeps current upload comment of an extension's version.
         *
         * @var string
         */
        protected $uploadcomment;
        /**
         * Keeps current version number.
         *
         * @var string
         */
        protected $version;
        /**
         * Keeps current download number of an extension's version.
         *
         * @var string
         */
        protected $versionDownloadCounter;

        /**
         * Returns an assoziative array of all extension version properties.
         *
         * Valid array keys of returned array are:
         * extkey, version, alldownloadcounter, downloadcounter, title, description,
         * state, reviewstate, category, lastuploaddate, uploadcomment, dependencies,
         * authorname, authoremail, authorcompany, ownerusername, t3xfilemd5
         *
         * @access public
         * @see $extensionKey, $version, $extensionDownloadCounter,
         * @return array assoziative array of an extension version's properties
         */
        public function getAll() {}
        /**
         * Returns download number sum of all extension's versions.
         *
         * @access public
         * @return string download number sum
         * @see $extensionDLCounter, getAll()
         */
        public function getAlldownloadcounter() {}
        /**
         * Returns company name of extension author.
         *
         * @access public
         * @return string company name of extension author
         * @see $authorcompany, getAll()
         */
        public function getAuthorcompany() {}
        /**
         * Returns e-mail address of extension author.
         *
         * @access public
         * @return string e-mail address of extension author
         * @see $authoremail, getAll()
         */
        public function getAuthoremail() {}
        /**
         * Returns name of extension author.
         *
         * @access public
         * @return string name of extension author
         * @see $authorname, getAll()
         */
        public function getAuthorname() {}
        /**
         * Returns category of an extension.
         *
         * @access public
         * @return string extension category
         * @see $category, getAll()
         */
        public function getCategory() {}
        /**
         * Returns dependencies of an extension's version.
         *
         * @access public
         * @return string extension dependencies
         * @see $dependencies, getAll()
         */
        public function getDependencies() {}
        /**
         * Returns description of an extension's version.
         *
         * @access public
         * @return string extension description
         * @see $description, getAll()
         */
        public function getDescription() {}
        /**
         * Returns download number of an extension's version.
         *
         * @access public
         * @return string download number
         * @see $versionDLCounter, getAll()
         */
        public function getDownloadcounter() {}
        /**
         * Returns key of an extension.
         *
         * @access public
         * @return string extension key
         * @see $extensionKey, getAll()
         */
        public function getExtkey() {}
        /**
         * Returns last uploaddate of an extension's version.
         *
         * @access public
         * @return string last upload date of an extension's version
         * @see $lastuploaddate, getAll()
         */
        public function getLastuploaddate() {}
        /**
         * Returns username of extension owner.
         *
         * @access public
         * @return string extension owner's username
         * @see $ownerusername, getAll()
         */
        public function getOwnerusername() {}
        /**
         * Returns review state of an extension's version.
         *
         * @access public
         * @return string extension review state
         * @see $reviewstate, getAll()
         */
        public function getReviewstate() {}
        /**
         * Returns state of an extension's version.
         *
         * @access public
         * @return string extension state
         * @see $state, getAll()
         */
        public function getState() {}
        /**
         * Returns t3x file hash of an extension's version.
         *
         * @access public
         * @return string t3x file hash	 *
         * @see $t3xfilemd5, getAll()
         */
        public function getT3xfilemd5() {}
        /**
         * Returns title of an extension's version.
         *
         * @access public
         * @return string extension title
         * @see $title, getAll()
         */
        public function getTitle() {}
        /**
         * Returns extension upload comment.
         *
         * @access public
         * @return string extension upload comment
         * @see $uploadcomment, getAll()
         */
        public function getUploadcomment() {}
        /**
         * Returns version number.
         *
         * @access public
         * @return string version number
         * @see $version, getAll()
         */
        public function getVersion() {}
        protected function resetProperties($resetAll = false) {}
        protected function convertDependencies($dependencies) {}
    }

    /**
     * Parser for TYPO3's mirrors.xml file.
     *
     * Depends on PHP ext/xmlreader which should be available
     * with PHP >= 5.1.0.
     */
    class MirrorXmlPullParser extends \typo3\cms\extensionmanager\utility\parser\abstractmirrorxmlparser {
        /**
         * Class constructor.
         *
         * @access public
         */
        public function __construct() {}
        /**
         * Create required parser
         */
        protected function createParser() {}
        public function parseXml($file) {}
        protected function startElement($elementName) {}
        protected function endElement($elementName) {}
        protected function getElementValue($elementName) {}
    }

    /**
     * Parser for TYPO3's extension.xml file.
     *
     * Depends on PHP ext/xmlreader which should be available
     * with PHP >= 5.1.0.
     */
    class ExtensionXmlPullParser extends \typo3\cms\extensionmanager\utility\parser\abstractextensionxmlparser {
        /**
         * Class constructor.
         */
        public function __construct() {}
        /**
         * Create required parser
         */
        protected function createParser() {}
        public function parseXml($file) {}
        protected function startElement($elementName) {}
        protected function endElement($elementName) {}
        protected function getElementValue($elementName) {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Tests\Unit\Controller {
    /**
     * Update from TER controller test
     */
    class UploadExtensionFileControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @return array The test data for getExtensionFromZipFileExtractsExtensionKey
         */
        public function getExtensionFromZipFileExtractsExtensionKeyDataProvider() {}
        public function getExtensionFromZipFileExtractsExtensionKey($filename, $expectedKey) {}
    }

    /**
     * Update from TER controller test
     */
    class UpdateFromTerControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository
         */
        protected $repositoryRepositoryMock;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
         */
        protected $extensionRepositoryMock;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\Repository\Helper
         */
        protected $repositoryHelperMock;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Core\Localization\LanguageService
         */
        protected $languageServiceMock;

        protected function setUp() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface|UpdateFromTerController $controllerMock */
        public function updateExtensionListFromTerCallsUpdateExtListIfExtensionListIsEmpty() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface|UpdateFromTerController $controllerMock */
        public function updateExtensionListFromTerDoesNotCallsUpdateExtListIfExtensionListIsNotEmpty() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|AccessibleObjectInterface|UpdateFromTerController $controllerMock */
        public function updateExtensionListFromTerCallsUpdateExtListIfForceUpdateCheckIsSet() {}
    }

    /**
     * Download from TER controller test
     */
    class DownloadControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function installFromTerReturnsArrayWithBooleanResultAndErrorArrayWhenExtensionManagerExceptionIsThrown() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Tests\Unit\Task {
    /**
     * Test case
     */
    class UpdateExtensionListTaskTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\Repository\Helper
         */
        protected $repositoryHelper;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * Tear down
         */
        protected function tearDown() {}
        /**
         * @test
         */
        public function updateExtensionListTaskIsInstanceOfAbstractTask() {}
        /**
         * @test
         */
        public function executeCallsUpdateExtListOfRepositoryHelper() {}
        /** @var \TYPO3\CMS\Extensionmanager\Task\UpdateExtensionListTask|PHPUnit_Framework_MockObject_MockObject $task */
        public function executeCallsPersistAllOnPersistenceManager() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Tests\Unit\Fixtures {
    /**
     * Latest compatible extension object storage fixture
     */
    class LatestCompatibleExtensionObjectStorageFixture {
        /**
         * @var array
         */
        public $extensions;

        /**
         * @return \TYPO3\CMS\Extensionmanager\Domain\Model\Extension
         */
        public function getFirst() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Tests\Unit\Report {
    /**
     * Test case
     */
    class ExtensionStatusTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository
         */
        protected $mockRepositoryRepository;
        /**
         * @var \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected $mockLanguageService;

        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function extensionStatusImplementsStatusProviderInterface() {}
        /**
         * @test
         */
        public function getStatusReturnsArray() {}
        /**
         * @test
         */
        public function getStatusReturnArrayContainsFiveEntries() {}
        /** @var \TYPO3\CMS\Extensionmanager\Report\ExtensionStatus $report */
        public function getStatusReturnArrayContainsInstancesOfReportsStatusStatus() {}
        /**
         * @test
         */
        public function getStatusCallsGetMainRepositoryStatusForMainRepositoryStatusResult() {}
        /**
         * @test
         */
        public function getMainRepositoryStatusReturnsErrorStatusIfRepositoryIsNotFound() {}
        /** @var $result \TYPO3\CMS\Reports\Status */
        public function getMainRepositoryStatusReturnsNoticeIfRepositoryUpdateIsLongerThanSevenDaysAgo() {}
        /** @var $result \TYPO3\CMS\Reports\Status */
        public function getMainRepositoryStatusReturnsOkIfUpdatedLessThanSevenDaysAgo() {}
        /** @var $loadedResult \TYPO3\CMS\Reports\Status */
        public function getSecurityStatusOfExtensionsReturnsOkForLoadedExtensionIfNoInsecureExtensionIsLoaded() {}
        /**
         * @test
         */
        public function getSecurityStatusOfExtensionsReturnsErrorForLoadedExtensionIfInsecureExtensionIsLoaded() {}
        /** @var $loadedResult \TYPO3\CMS\Reports\Status */
        public function getSecurityStatusOfExtensionsReturnsOkForExistingExtensionIfNoInsecureExtensionExists() {}
        /** @var $loadedResult \TYPO3\CMS\Reports\Status */
        public function getSecurityStatusOfExtensionsReturnsErrorForExistingExtensionIfInsecureExtensionExists() {}
        /**
         * @test
         */
        public function getSecurityStatusOfExtensionsReturnsOkForLoadedExtensionIfNoOutdatedExtensionIsLoaded() {}
        /**
         * @test
         */
        public function getSecurityStatusOfExtensionsReturnsErrorForLoadedExtensionIfOutdatedExtensionIsLoaded() {}
        /** @var $loadedResult \TYPO3\CMS\Reports\Status */
        public function getSecurityStatusOfExtensionsReturnsOkForExistingExtensionIfNoOutdatedExtensionExists() {}
        /**
         * @test
         */
        public function getSecurityStatusOfExtensionsReturnsErrorForExistingExtensionIfOutdatedExtensionExists() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Tests\Unit\Service {
    /**
     * Testcase
     */
    class ExtensionManagementServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function resolveDependenciesCallsDownloadDependenciesIfDownloadKeyExistsInQueue() {}
        /**
         * @test
         */
        public function resolveDependenciesCallsUpdateAndDownloadDependenciesIfUpdateKeyExistsInQueue() {}
        /**
         * @test
         */
        public function downloadDependenciesCallsDownloadUtilityDownloadMethod() {}
        /**
         * @test
         */
        public function downloadDependenciesCallsRemoveExtensionFromQueue() {}
        /**
         * @test
         */
        public function downloadDependenciesReturnsResolvedDependencies() {}
        /**
         * @test
         */
        public function uninstallDependenciesToBeUpdatedCallsUninstall() {}
        /**
         * @test
         */
        public function uninstallDependenciesToBeUpdatedReturnsResolvedDependencies() {}
        /**
         * @test
         */
        public function installDependenciesCallsInstall() {}
        /** @var \TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extensionMock */
        public function installDependenciesReturnsResolvedDependencies() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Tests\Unit\Domain\Repository {
    /**
     * Test case
     */
    class RepositoryRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $mockObjectManager;
        /**
         * @var \TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository
         */
        protected $subject;

        /** @var $subject \TYPO3\CMS\Extensionmanager\Domain\Repository\RepositoryRepository|\PHPUnit_Framework_MockObject_MockObject */
        protected function setUp() {}
        /**
         * @test
         */
        public function findOneTypo3OrgRepositoryReturnsNullIfNoRepositoryWithThisTitleExists() {}
        /**
         * @test
         */
        public function findOneTypo3OrgRepositoryReturnsRepositoryWithCorrectTitle() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Tests\Unit\Domain\Model {
    /**
     * Extension test
     */
    class ExtensionTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Data provider for getCategoryIndexFromStringOrNumberReturnsIndex
         *
         * @return array
         */
        public function getCategoryIndexFromStringOrNumberReturnsIndexDataProvider() {}
        public function getCategoryIndexFromStringOrNumberReturnsIndex($input, $expected) {}
    }

    /**
     * Download queue test
     */
    class DownloadQueueTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface|\TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue
         */
        protected $downloadQueueMock;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Extensionmanager\Domain\Model\Extension
         */
        protected $extensionMock;

        /**
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function addExtensionToQueueAddsExtensionToDownloadStorageArray() {}
        /**
         * @test
         */
        public function addExtensionToQueueAddsExtensionToUpdateStorageArray() {}
        /**
         * @test
         */
        public function addExtensionToQueueThrowsExceptionIfUnknownStackIsGiven() {}
        /** @var \TYPO3\CMS\Extensionmanager\Domain\Model\Extension $extensionMock2 */
        public function addExtensionToQueueThrowsExceptionIfExtensionWithSameKeyAndDifferentValuesAlreadyExists() {}
        /**
         * @test
         */
        public function removeExtensionFromQueueRemovesExtension() {}
    }

}

namespace TYPO3\CMS\Extensionmanager\Tests\Unit\Utility {
    /**
     * List utility test
     */
    class ListUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extensionmanager\Utility\ListUtility
         */
        protected $subject;

        /**
         */
        protected function setUp() {}
        /**
         * @return array
         */
        public function getAvailableAndInstalledExtensionsDataProvider() {}
        public function getAvailableAndInstalledExtensionsTest($availableExtensions, $expectedResult) {}
        /**
         * @return array
         */
        public function enrichExtensionsWithEmConfInformationDataProvider() {}
        public function enrichExtensionsWithEmConfInformation($extensions, $emConf, $expectedResult) {}
    }

    /**
     * Test case
     */
    class InstallUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var string
         */
        protected $extensionKey;
        /**
         * @var array
         */
        protected $extensionData;
        /**
         * @var array List of created fake extensions to be deleted in tearDown() again
         */
        protected $fakedExtensions;
        /**
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\Extensionmanager\Utility\InstallUtility|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $installMock;

        /**
         */
        protected function setUp() {}
        /**
         * @return array
         */
        public function getExtensionData() {}
        /**
         */
        protected function tearDown() {}
        /**
         * Creates a fake extension inside typo3temp/. No configuration is created,
         * just the folder
         *
         * @return string The extension key
         */
        protected function createFakeExtension() {}
        /**
         * @test
         */
        public function installCallsProcessRuntimeDatabaseUpdates() {}
        /**
         * @test
         */
        public function installCallsLoadExtension() {}
        /**
         * @test
         */
        public function installCallsFlushCachesIfClearCacheOnLoadIsSet() {}
        /**
         * @test
         */
        public function installCallsFlushCachesIfClearCacheOnLoadCamelCasedIsSet() {}
        /**
         * @test
         */
        public function installationOfAnExtensionWillCallEnsureThatDirectoriesExist() {}
        /**
         * @test
         */
        public function installCallsReloadCaches() {}
        /**
         * @test
         */
        public function installCallsSaveDefaultConfigurationWithExtensionKey() {}
        /**
         * @test
         */
        public function uninstallCallsUnloadExtension() {}
        /**
         * @test
         */
        public function processDatabaseUpdatesCallsUpdateDbWithExtTablesSql() {}
        /**
         * @test
         */
        public function processDatabaseUpdatesCallsImportStaticSqlFile() {}
        /**
         * @return array
         */
        public function processDatabaseUpdatesCallsImportFileDataProvider() {}
        public function processDatabaseUpdatesCallsImportFile($fileName) {}
        /**
         * @return array
         */
        public function importT3DFileDoesNotImportFileIfAlreadyImportedDataProvider() {}
        public function importT3DFileDoesNotImportFileIfAlreadyImported($fileName, $registryNameReturnsFalse, $registryNameReturnsTrue) {}
    }

    /**
     * Testcase
     */
    class FileHandlingUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array List of created fake extensions to be deleted in tearDown() again
         */
        protected $fakedExtensions;

        protected function createFakeExtension($extkeyOnly = false) {}
        /**
         * @test
         */
        public function makeAndClearExtensionDirRemovesExtensionDirIfAlreadyExists() {}
        /**
         * @return array
         */
        public function invalidRelativePathDataProvider() {}
        public function getAbsolutePathThrowsExceptionForInvalidRelativePaths($invalidRelativePath) {}
        /**
         * @return array
         */
        public function validRelativePathDataProvider() {}
        public function getAbsolutePathReturnsAbsolutePathForValidRelativePaths($validRelativePath, $expectedAbsolutePath) {}
        /**
         * @test
         */
        public function makeAndClearExtensionDirAddsDir() {}
        /**
         * @test
         */
        public function makeAndClearExtensionDirThrowsExceptionOnInvalidPath() {}
        /**
         * @test
         */
        public function addDirectoryAddsDirectory() {}
        /**
         * @test
         */
        public function removeDirectoryRemovesDirectory() {}
        /**
         * @test
         */
        public function removeDirectoryRemovesSymlink() {}
        /**
         * @test
         */
        public function removeDirectoryDoesNotRemoveContentOfSymlinkedTargetDirectory() {}
        /**
         * @test
         */
        public function unpackExtensionFromExtensionDataArrayCreatesTheExtensionDirectory() {}
        /**
         * @test
         */
        public function unpackExtensionFromExtensionDataArrayStripsDirectoriesFromFilesArray() {}
        /**
         * @test
         */
        public function extractFilesArrayFromExtensionDataReturnsFileArray() {}
        /**
         * @test
         */
        public function writeExtensionFilesWritesFiles() {}
        /**
         * @test
         */
        public function extractDirectoriesFromExtensionDataExtractsDirectories() {}
        /**
         * @test
         */
        public function createDirectoriesForExtensionFilesCreatesDirectories() {}
        /**
         * @test
         */
        public function writeEmConfWritesEmConfFile() {}
        /** @var $fileHandlerMock \TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility|\PHPUnit_Framework_MockObject_MockObject */
        protected function getPreparedFileHandlingMockForDirectoryCreationTests() {}
        /**
         * @test
         */
        public function uploadFolderIsNotCreatedIfNotRequested() {}
        /**
         * @test
         */
        public function additionalFoldersAreNotCreatedIfNotRequested() {}
        /**
         * @test
         */
        public function configuredUploadFolderIsCreatedIfRequested() {}
        /**
         * @test
         */
        public function configuredAdditionalDirectoriesAreCreatedIfRequested() {}
        /**
         * @test
         */
        public function configuredDirectoriesAreNotCreatedIfTheyAlreadyExist() {}
        /**
         * Warning: This test asserts multiple things at once to keep the setup short.
         *
         * @test
         */
        public function createZipFileFromExtensionGeneratesCorrectArchive() {}
    }

    /**
     * Test case
     */
    class EmConfUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function constructEmConfAddsCommentBlock() {}
        /**
         * @test
         */
        public function fixEmConfTransfersOldConflictSettingToNewFormatWithSingleConflictingExtension() {}
        /**
         * @test
         */
        public function fixEmConfTransfersOldConflictSettingToNewFormatWithTwoConflictingExtensions() {}
    }

    /**
     * Test for ExtensionModelUtilityTest
     */
    class ExtensionModelUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function convertDependenciesToObjectsCreatesObjectStorage() {}
        /**
         * @test
         */
        public function convertDependenciesToObjectsSetsIdentifier() {}
        /**
         * @return array
         */
        public function convertDependenciesToObjectSetsVersionDataProvider() {}
/** @var $dependencyUtility \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility */
        public function convertDependenciesToObjectSetsVersion(/** @var $dependencyUtility \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility */
array $dependencies, /** @var $dependencyUtility \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility */
array $returnValue) {}
        /** @var $dependencyUtility \TYPO3\CMS\Extensionmanager\Utility\ExtensionModelUtility */
        public function convertDependenciesToObjectCanDealWithEmptyStringDependencyValues() {}
    }

    /**
     * Test for DependencyUtility
     */
    class DependencyUtilityTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManagerMock;

        /**
         * Set up
         */
        protected function setUp() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|Dependency $dependencyMock */
        public function checkTypo3DependencyThrowsExceptionIfVersionNumberIsTooLow() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|Dependency $dependencyMock */
        public function checkTypo3DependencyThrowsExceptionIfVersionNumberIsTooHigh() {}
        /**
         * @test
         */
        public function checkTypo3DependencyThrowsExceptionIfIdentifierIsNotTypo3() {}
        /**
         * @test
         */
        public function checkTypo3DependencyReturnsTrueIfVersionNumberIsInRange() {}
        /**
         * @test
         */
        public function checkTypo3DependencyCanHandleEmptyVersionHighestVersion() {}
        /**
         * @test
         */
        public function checkTypo3DependencyCanHandleEmptyVersionLowestVersion() {}
        /**
         * @test
         */
        public function checkPhpDependencyThrowsExceptionIfVersionNumberIsTooLow() {}
        /**
         * @test
         */
        public function checkPhpDependencyThrowsExceptionIfVersionNumberIsTooHigh() {}
        /**
         * @test
         */
        public function checkPhpDependencyThrowsExceptionIfIdentifierIsNotTypo3() {}
        /**
         * @test
         */
        public function checkPhpDependencyReturnsTrueIfVersionNumberIsInRange() {}
        /**
         * @test
         */
        public function checkPhpDependencyCanHandleEmptyVersionHighestVersion() {}
        /**
         * @test
         */
        public function checkPhpDependencyCanHandleEmptyVersionLowestVersion() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|DependencyUtility $dependencyUtility */
        public function checkDependenciesCallsMethodToCheckPhpDependencies() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|DependencyUtility $dependencyUtility */
        public function checkDependenciesCallsMethodToCheckTypo3Dependencies() {}
        /** @var \PHPUnit_Framework_MockObject_MockObject|Dependency $dependencyMock */
        public function isVersionCompatibleReturnsTrueForCompatibleVersion() {}
        /**
         * @test
         */
        public function isVersionCompatibleReturnsFalseForIncompatibleVersion() {}
        /**
         * @test
         */
        public function isDependentExtensionAvailableReturnsTrueIfExtensionIsAvailable() {}
        /**
         * @test
         */
        public function isDependentExtensionAvailableReturnsFalseIfExtensionIsNotAvailable() {}
        /**
         * @test
         */
        public function isAvailableVersionCompatibleCallsIsVersionCompatibleWithExtensionVersion() {}
        /**
         * @test
         */
        public function isExtensionDownloadableFromTerReturnsTrueIfOneVersionExists() {}
        /**
         * @test
         */
        public function isExtensionDownloadableFromTerReturnsFalseIfNoVersionExists() {}
        /**
         * @test
         */
        public function isDownloadableVersionCompatibleReturnsTrueIfCompatibleVersionExists() {}
        /**
         * @test
         */
        public function isDownloadableVersionCompatibleReturnsFalseIfIncompatibleVersionExists() {}
        /**
         * @test
         */
        public function getLowestAndHighestIntegerVersionsReturnsArrayWithVersions() {}
        /**
         * @test
         */
        public function getLatestCompatibleExtensionByIntegerVersionDependencyWillReturnExtensionModelOfLatestExtension() {}
        /**
         * @test
         */
        public function filterYoungestVersionOfExtensionListFiltersAListToLatestVersion() {}
        /**
         * @test
         */
        public function filterYoungestVersionOfExtensionListFiltersAListToLatestVersionWithOnlyCompatibleExtensions() {}
    }

}

namespace TYPO3\CMS\Filelist {
    /**
     * Class for rendering of File>Filelist
     */
    class FileList {
        /**
         * Default Max items shown
         *
         * @var int
         */
        public $iLimit;
        /**
         * Thumbnails on records containing files (pictures)
         *
         * @var bool
         */
        public $thumbs;
        /**
         * Space icon used for alignment when no button is available
         *
         * @var string
         */
        public $spaceIcon;
        /**
         * Max length of strings
         *
         * @var int
         */
        public $fixedL;
        /**
         * The field to sort by
         *
         * @var string
         */
        public $sort;
        /**
         * Reverse sorting flag
         *
         * @var bool
         */
        public $sortRev;
        /**
         * @var int
         */
        public $firstElementNumber;
        /**
         * @var bool
         */
        public $clipBoard;
        /**
         * @var bool
         */
        public $bigControlPanel;
        /**
         * @var string
         */
        public $JScode;
        /**
         * String with accumulated HTML content
         *
         * @var string
         */
        public $HTMLcode;
        /**
         * @var int
         */
        public $totalbytes;
        /**
         * @var array
         */
        public $dirs;
        /**
         * @var array
         */
        public $files;
        /**
         * @var string
         */
        public $path;
        /**
         * OBSOLETE - NOT USED ANYMORE. leftMargin
         *
         * @var int
         */
        public $leftMargin;
        /**
         * This could be set to the total number of items. Used by the fwd_rew_navigation...
         *
         * @var string
         */
        public $totalItems;
        /**
         * Decides the columns shown. Filled with values that refers to the keys of the data-array. $this->fieldArray[0] is the title column.
         *
         * @var array
         */
        public $fieldArray;
        /**
         * Set to zero, if you don't want a left-margin with addElement function
         *
         * @var int
         */
        public $setLMargin;
        /**
         * Contains page translation languages
         *
         * @var array
         */
        public $pageOverlays;
        /**
         * Counter increased for each element. Used to index elements for the JavaScript-code that transfers to the clipboard
         *
         * @var int
         */
        public $counter;
        /**
         * Contains sys language icons and titles
         *
         * @var array
         */
        public $languageIconTitles;
        /**
         * Script URL
         *
         * @var string
         */
        public $thisScript;
        /**
         * If set this is <td> CSS-classname for odd columns in addElement. Used with db_layout / pages section
         *
         * @var string
         */
        public $oddColumnsCssClass;
        /**
         * Counting the elements no matter what
         *
         * @var int
         */
        public $eCounter;
        /**
         * @var TranslationConfigurationProvider
         */
        public $translateTools;
        /**
         * Keys are fieldnames and values are td-parameters to add in addElement(), please use $addElement_tdCSSClass for CSS-classes;
         *
         * @var array
         */
        public $addElement_tdParams;
        /**
         * @var int
         */
        public $no_noWrap;
        /**
         * @var int
         */
        public $showIcon;
        /**
         * Keys are fieldnames and values are td-css-classes to add in addElement();
         *
         * @var array
         */
        public $addElement_tdCssClass;
        /**
         * @var Folder
         */
        protected $folderObject;
        /**
         * @var array
         */
        public $CBnames;
        /**
         * @var Clipboard $clipObj
         */
        public $clipObj;
        /**
         * @var ResourceFactory
         */
        protected $resourceFactory;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var int
         */
        protected $id;
        /**
         * @var FileListController
         */
        protected $fileListController;
        /**
         * @var ThumbnailConfiguration
         */
        protected $thumbnailConfiguration;

        public function __construct(FileListController $fileListController) {}
        public function injectResourceFactory(ResourceFactory $resourceFactory) {}
        public function start(Folder $folderObject, $pointer, $sort, $sortRev, $clipBoard = false, $bigControlPanel = false) {}
        /**
         * Reading files and directories, counting elements and generating the list in ->HTMLcode
         */
        public function generateList() {}
        public function linkClipboardHeaderIcon($string, $_, $cmd, $warning = '') {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        public function getTable(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$rowlist) {}
        public function addElement($h, $icon, $data, $rowParams = '', $_ = '', $_2 = '', $colType = 'td') {}
        /**
         * Dummy function, used to write the top of a table listing.
         */
        public function writeTop() {}
        public function fwd_rwd_nav($table = '') {}
        public function fwd_rwd_HTML($type, $pointer, $table = '') {}
        /**
         * Returning JavaScript for ClipBoard functionality.
         *
         * @return string
         */
        public function CBfunctions() {}
        /**
         * Initializes page languages and icons
         */
        public function initializeLanguages() {}
        public function languageFlag($sys_language_uid, $addAsAdditionalText = true) {}
        protected function getLinkToParentFolder(Folder $currentFolder) {}
        /**
         * Gets the number of files and total size of a folder
         *
         * @return string
         */
        public function getFolderInfo() {}
        public function formatDirList(array $folders) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function linkWrapDir(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$title, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
Folder $folderObject) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function linkWrapFile(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$code, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
File $fileObject) {}
        public function listURL($altId = '', $table = '-1', $exclList = '') {}
        public function formatFileList(array $files) {}
        protected function getTranslationsForMetaData($metaDataRecord) {}
        public function isImage($ext) {}
        public function isMediaFile($ext) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function linkWrapSort(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$code, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$folderIdentifier, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$col) {}
        public function makeClip($fileOrFolderObject) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function makeEdit(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$fileOrFolderObject) {}
        public function makeRef($fileOrFolderObject) {}
        /**
         * Returns an instance of LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Sets the script url depending on being a module or script request
         */
        protected function determineScriptUrl() {}
        /**
         * @return string
         */
        protected function getThisScript() {}
        /**
         * Gets an instance of TranslationConfigurationProvider
         *
         * @return TranslationConfigurationProvider
         */
        protected function getTranslateTools() {}
        protected function generateReferenceToolTip($references, $launchViewParameter = '') {}
    }

    /**
     * Class FileFacade
     *
     * This class is meant to be a wrapper for Resource\File objects, which do not
     * provide necessary methods needed in the views of the filelist extension. It
     * is a first approach to get rid of the FileList class that mixes up PHP,
     * HTML and JavaScript.
     */
    class FileFacade {
        /**
         * Cache to count the number of references for each file
         *
         * @var array
         */
        static protected $referenceCounts;
        /**
         * @var \TYPO3\CMS\Core\Resource\FileInterface
         */
        protected $resource;
        /**
         * @var \TYPO3\CMS\Core\Imaging\IconFactory
         */
        protected $iconFactory;

        public function __construct(FileInterface $resource) {}
        /**
         * @return string
         */
        public function getIcon() {}
        /**
         * @return \TYPO3\CMS\Core\Resource\FileInterface
         */
        public function getResource() {}
        /**
         * @return bool
         */
        public function getIsEditable() {}
        /**
         * @return bool
         */
        public function getIsMetadataEditable() {}
        /**
         * @return int
         */
        public function getMetadataUid() {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return string
         */
        public function getPath() {}
        /**
         * @return string
         */
        public function getPublicUrl() {}
        /**
         * @return string
         */
        public function getExtension() {}
        /**
         * @return string
         */
        public function getIdentifier() {}
        /**
         * @return string
         */
        public function getLastModified() {}
        /**
         * @return string
         */
        public function getSize() {}
        /**
         * @return bool
         */
        public function getIsReadable() {}
        /**
         * @return bool
         */
        public function getIsWritable() {}
        /**
         * @return bool
         */
        public function getIsReplaceable() {}
        /**
         * @return bool
         */
        public function getIsRenamable() {}
        /**
         * @return bool
         */
        public function getIsDeletable() {}
        /**
         * @return bool
         */
        public function getIsImage() {}
        /**
         * Fetch, cache and return the number of references of a file
         *
         * @return int
         */
        public function getReferenceCount() {}
        public function __call($method, $arguments) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Class for drag and drop and ajax functionality
     * @see class \TYPO3\CMS\Backend\Tree\View\BrowseTreeView
     */
    class FileListFolderTree extends \typo3\cms\backend\tree\view\foldertreeview {
        /**
         * @var bool
         */
        public $ext_IconMode;

        public function wrapIcon($theFolderIcon, $folderObject) {}
        public function wrapTitle($title, $folderObject, $bank = 0) {}
    }


    /**
     * Interface for classes which hook into filelist module and manipulated edit icon array
     */
    interface FileListEditIconHookInterface {
        function manipulateEditIcons($cells, $parentObject) ;
    }

}

namespace TYPO3\CMS\Filelist\Configuration {
    /**
     * Class TYPO3\CMS\Filelist\Configuration\ThumbnailConfiguration
     */
    class ThumbnailConfiguration implements \typo3\cms\core\singletoninterface {
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $height;

        public function __construct() {}
        /**
         * @return int
         */
        public function getWidth() : int {}
        /**
         * @return int
         */
        public function getHeight() : int {}
    }

}

namespace TYPO3\CMS\Filelist\ViewHelpers\Link {
    /**
     * Class ClickMenuOnIconViewHelper
     */
    class ClickMenuOnIconViewHelper extends \typo3\cms\fluid\core\viewhelper\abstracttagbasedviewhelper {
        /**
         * @var string
         */
        protected $tagName;

        /**
         * Defines additional arguments that are allowed for this view helper.
         */
        public function initializeArguments() {}
        /**
         * Renders click menu link (context sensitive menu)
         *
         * @return string
         * @see \TYPO3\CMS\Backend\Utility\BackendUtility::wrapClickMenuOnIcon()
         */
        public function render() {}
    }

}

namespace TYPO3\CMS\Filelist\ViewHelpers\Uri {
    /**
     * Class ReplaceFileViewHelper
     */
    class ReplaceFileViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
        public static function renderStatic(/** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
array $arguments, /** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
\Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Class EditFileContentViewHelper
     */
    class EditFileContentViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
        public static function renderStatic(/** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
array $arguments, /** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Class EditSysFileMetadataRecordViewHelper
     */
    class EditSysFileMetadataRecordViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Class RenameFileViewHelper
     */
    class RenameFileViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
        public static function renderStatic(/** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
array $arguments, /** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
\Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Class DeleteFileViewHelper
     */
    class DeleteFileViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
        public static function renderStatic(/** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
array $arguments, /** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Core\Resource\AbstractFile $file */
RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Filelist\ContextMenu\ItemProviders {
    /**
     * Provides click menu items for files and folders
     */
    class FileProvider extends \typo3\cms\backend\contextmenu\itemproviders\abstractprovider {
        /**
         * @var File|Folder
         */
        protected $record;
        /**
         * @var array
         */
        protected $itemsConfiguration;

        /**
         * @return bool
         */
        public function canHandle() : bool {}
        /**
         * Initialize file object
         */
        protected function initialize() {}
        protected function canRender(string $itemName, string $type) : bool {}
        /**
         * @return bool
         */
        protected function canBeEdited() : bool {}
        /**
         * @return bool
         */
        protected function canBeRenamed() : bool {}
        /**
         * @return bool
         */
        protected function canBeDeleted() : bool {}
        /**
         * @return bool
         */
        protected function canShowInfo() : bool {}
        /**
         * @return bool
         */
        protected function canCreateNew() : bool {}
        /**
         * @return bool
         */
        protected function canBeCopied() : bool {}
        /**
         * @return bool
         */
        protected function canBeCut() : bool {}
        /**
         * @return bool
         */
        protected function canBePastedInto() : bool {}
        protected function isFoldersAreInTheSameRoot($fileOrFolderInClipBoard) : bool {}
        protected function isRecordInClipboard(string $mode = '') : bool {}
        /**
         * @return bool
         */
        protected function isStorageRoot() : bool {}
        /**
         * @return bool
         */
        protected function isFile() : bool {}
        /**
         * @return bool
         */
        protected function isFolder() : bool {}
        protected function getAdditionalAttributes(string $itemName) : array {}
        /**
         * @return string
         */
        protected function getIdentifier() : string {}
    }

    /**
     * Provides click menu items for file_storage
     */
    class FileStorageProvider extends \typo3\cms\filelist\contextmenu\itemproviders\fileprovider {
        /**
         * @var array
         */
        protected $itemsConfiguration;

        /**
         * @return bool
         */
        public function canHandle() : bool {}
        /**
         * @return bool
         */
        protected function canShowInfo() : bool {}
        /**
         * @return bool
         */
        protected function canBeEdited() : bool {}
    }

    /**
     * Provides click menu items for filemounts
     */
    class FilemountsProvider extends \typo3\cms\filelist\contextmenu\itemproviders\fileprovider {
        /**
         * @var array
         */
        protected $itemsConfiguration;

        /**
         * @return bool
         */
        public function canHandle() : bool {}
    }

    /**
     * Drag drop menu provider for legacy tree (used in filelist folder tree)
     */
    class FileDragProvider extends \typo3\cms\backend\contextmenu\itemproviders\abstractprovider {
        /**
         * @var array
         */
        protected $itemsConfiguration;

        /**
         * @return bool
         */
        public function canHandle() : bool {}
        protected function canRender(string $itemName, string $type) : bool {}
        protected function getAdditionalAttributes(string $itemName) : array {}
    }

}

namespace TYPO3\CMS\Filelist\Controller {
    /**
     * Script Class for creating the list of files in the File > Filelist module
     */
    class FileListController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var array
         */
        public $MOD_MENU;
        /**
         * @var array
         */
        public $MOD_SETTINGS;
        /**
         * Document template object
         *
         * @var DocumentTemplate
         */
        public $doc;
        /**
         * "id" -> the path to list.
         *
         * @var string
         */
        public $id;
        /**
         * @var Folder
         */
        protected $folderObject;
        /**
         * @var FlashMessage
         */
        protected $errorMessage;
        /**
         * Pointer to listing
         *
         * @var int
         */
        public $pointer;
        /**
         * "Table"
         * @var string
         */
        public $table;
        /**
         * Thumbnail mode.
         *
         * @var string
         */
        public $imagemode;
        /**
         * @var string
         */
        public $cmd;
        /**
         * Defines behaviour when uploading files with names that already exist; possible values are
         * the values of the \TYPO3\CMS\Core\Resource\DuplicationBehavior enumeration
         *
         * @var \TYPO3\CMS\Core\Resource\DuplicationBehavior
         */
        protected $overwriteExistingFiles;
        /**
         * The filelist object
         *
         * @var FileList
         */
        public $filelist;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;
        /**
         * @var \TYPO3\CMS\Core\Resource\FileRepository
         */
        protected $fileRepository;
        /**
         * @var BackendTemplateView
         */
        protected $view;
        /**
         * BackendTemplateView Container
         *
         * @var BackendTemplateView
         */
        protected $defaultViewObjectName;

        public function injectFileRepository(\TYPO3\CMS\Core\Resource\FileRepository $fileRepository) {}
        /**
         * Initialize variables, file object
         * Incoming GET vars include id, pointer, table, imagemode
         *
         * @throws \RuntimeException
         * @throws Exception\InsufficientFolderAccessPermissionsException
         */
        public function initializeObject() {}
        /**
         * Setting the menu/session variables
         */
        public function menuConfig() {}
/** @var BackendTemplateView $view */
        public function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /**
         */
        public function initializeIndexAction() {}
        /** @var ExtendedFileUtility $fileProcessor */
        public function indexAction() {}
        /**
         */
        public function missingFolderAction() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function searchAction(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$searchWord = '') {}
        /**
         * Get main headline based on active folder or storage for backend module
         * Folder names are resolved to their special names like done in the tree view.
         *
         * @return string
         */
        protected function getModuleHeadline() {}
        /** @var ButtonBar $buttonBar */
        protected function registerDocHeaderButtons() {}
        /**
         * Create the panel of buttons for submitting the form or otherwise perform operations.
         *
         * @return array All available buttons as an assoc. array
         */
        protected function registerButtons() {}
        /**
         * Returns an instance of LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Filelist\Hook {
    /**
     * This class adds Filelist related JavaScript to the backend
     */
    class BackendControllerHook {
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function addJavaScript(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $configuration, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
BackendController $backendController) {}
    }

}

namespace TYPO3\CMS\T3editor {
    /**
     * Represents an addon for CodeMirror
     */
    class Addon {
        /**
         * @var string
         */
        protected $identifier;
        /**
         * @var array
         */
        protected $modes;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var array
         */
        protected $cssFiles;

        public function __construct(string $identifier) {}
        /**
         * @return string
         */
        public function getIdentifier() : string {}
        public function setModes(array $modes) : Addon {}
        /**
         * @return array
         */
        public function getModes() : array {}
        public function setOptions(array $options) : Addon {}
        /**
         * @return array
         */
        public function getOptions() : array {}
        public function setCssFiles(array $cssFiles) : Addon {}
        /**
         * @return array
         */
        public function getCssFiles() : array {}
    }

    /**
     * Represents a mode for CodeMirror
     */
    class Mode {
        /**
         * @var string
         */
        protected $identifier;
        /**
         * @var string
         */
        protected $formatCode;
        /**
         * @var array
         */
        protected $fileExtensions;
        /**
         * @var bool
         */
        protected $isDefault;

        public function __construct(string $identifier) {}
        /**
         * @return string
         */
        public function getIdentifier() : string {}
        /**
         * @return string
         */
        public function getFormatCode() : string {}
        public function setFormatCode(string $formatCode) : Mode {}
        public function bindToFileExtensions(array $fileExtensions) : Mode {}
        /**
         * @return array
         */
        public function getBoundFileExtensions() : array {}
        /**
         * @return Mode
         */
        public function setAsDefault() : Mode {}
        /**
         * @return bool
         */
        public function isDefault() : bool {}
    }

    /**
     * Loads TSref information from a XML file an responds to an AJAX call.
     */
    class TypoScriptReferenceLoader {
        /**
         * @var \DOMDocument
         */
        protected $xmlDoc;

        /**
         * Default constructor
         */
        public function __construct() {}
        public function processAjaxRequest(ServerRequestInterface $request) : ResponseInterface {}
        protected function loadFile($filepath) {}
        /**
         * Get types from XML
         *
         * @return array
         */
        protected function getTypes() : array {}
    }

    /**
     * Provides necessary code to setup a t3editor instance in FormEngine
     */
    class T3editor implements \typo3\cms\core\singletoninterface {
        /**
         * @var array
         */
        protected $configuration;

        /**
         * Registers the configuration and bootstraps the modes / addons.
         *
         * @throws \InvalidArgumentException
         */
        public function registerConfiguration() {}
        /**
         * Compiles the configuration for t3editor. Configuration is stored in caching framework.
         *
         * @return array
         * @throws \TYPO3\CMS\Core\Cache\Exception\NoSuchCacheException
         * @throws \TYPO3\CMS\Core\Cache\Exception\InvalidDataException
         * @throws \InvalidArgumentException
         */
        protected function buildConfiguration() : array {}
        protected function generateCacheIdentifier(string $key) : string {}
        /**
         * @return PhpFrontend
         * @throws \TYPO3\CMS\Core\Cache\Exception\NoSuchCacheException
         * @throws \InvalidArgumentException
         */
        protected function getCache() : PhpFrontend {}
    }

    /**
     * Code completion for t3editor
     */
    class CodeCompletion {
        /**
         * @var \TYPO3\CMS\Core\Http\AjaxRequestHandler
         */
        protected $ajaxObj;

        /**
         * Default constructor
         */
        public function __construct() {}
        public function processAjaxRequest(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function loadTemplates($pageId) : ResponseInterface {}
/** @var $tsParser \TYPO3\CMS\Core\TypoScript\ExtendedTemplateService */
        protected function getMergedTemplates(/** @var $tsParser \TYPO3\CMS\Core\TypoScript\ExtendedTemplateService */
$pageId, /** @var $tsParser \TYPO3\CMS\Core\TypoScript\ExtendedTemplateService */
$templateId = 0) {}
        private function treeWalkCleanup(array $treeBranch) {}
    }

}

namespace TYPO3\CMS\T3editor\Form\Element {
    /**
     * t3editor FormEngine widget
     */
    class T3editorElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * @var array
         */
        protected $resultArray;
        /**
         * @var string
         */
        protected $mode;
        /**
         * Relative path to EXT:t3editor
         *
         * @var string
         */
        protected $extPath;
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;

        /**
         * Render t3editor element
         *
         * @return array As defined in initializeResultArray() of AbstractNode
         * @throws \TYPO3\CMS\T3editor\Exception\InvalidModeException
         * @throws \InvalidArgumentException
         * @throws \BadFunctionCallException
         */
        public function render() : array {}
        protected function getHTMLCodeForEditor(string $name, string $class = '', string $content = '', string $additionalParams = '', string $alt = '', array $hiddenfields = [ ]) : string {}
        /**
         * @return Mode
         * @throws InvalidModeException
         */
        protected function getMode() : Mode {}
    }

}

namespace TYPO3\CMS\T3editor\Registry {
    /**
     * Registers and holds t3editor modes
     */
    class AddonRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * @var Addon[]
         */
        protected $registeredAddons;

        /**
         * @return self
         * @throws \InvalidArgumentException
         */
        public static function getInstance() : AddonRegistry {}
        public function register(Addon $addon) : AddonRegistry {}
        public function getForMode(string $mode = '') : array {}
        public function compileSettings(array $addons) : array {}
    }

    /**
     * Registers and holds t3editor modes
     */
    class ModeRegistry implements \typo3\cms\core\singletoninterface {
        /**
         * @var Mode[]
         */
        protected $registeredModes;
        /**
         * @var Mode
         */
        protected $defaultMode;

        /**
         * @return self
         * @throws \InvalidArgumentException
         */
        public static function getInstance() : ModeRegistry {}
        public function register(Mode $mode) : ModeRegistry {}
        public function unregister(string $identifier) : ModeRegistry {}
        public function isRegistered(string $identifier) : bool {}
        public function getByIdentifier(string $identifier) : Mode {}
        public function getByFormatCode(string $formatCode) : Mode {}
        public function getByFileExtension(string $fileExtension) : Mode {}
        /**
         * @return Mode
         */
        public function getDefaultMode() : Mode {}
    }

}

namespace TYPO3\CMS\T3editor\Exception {
    /**
     * Exception thrown for invalid modes
     */
    class InvalidModeException extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\T3editor\Hook {
    /**
     * File edit hook for t3editor
     */
    class FileEditHook {
        public function preOutputProcessingHook(array $parameters, EditFileController $pObj) {}
    }

}

namespace TYPO3\CMS\T3editor\Tests\Unit\Registry {
    /**
     * Unit test class for Registry\ModeRegistry
     */
    class ModeRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ModeRegistry|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function identifierIsReturned() {}
        /**
         * @test
         */
        public function latestDefaultModeIsReturned() {}
        /**
         * @test
         */
        public function formatCodeReturnsCorrectMode() {}
        /**
         * @test
         */
        public function modeIsFetchedByFileExtension() {}
    }

    /**
     * Unit test class for Registry\AddonRegistry
     */
    class AddonRegistryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var AddonRegistry|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;

        protected function setUp() {}
        /**
         * Register addons for tests
         */
        protected function registerAddons() {}
        /**
         * @test
         */
        public function globalAddonsGetReturned() {}
        /**
         * @test
         */
        public function globalAndModeAddonsGetReturned() {}
        /**
         * @test
         */
        public function settingsAreProperlyCompiled() {}
    }

}

namespace TYPO3\CMS\Lowlevel\Controller {
    /**
     * Script class for the DB int module
     */
    class DatabaseIntegrityController {
        /**
         * @var string
         */
        protected $formName;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;
        /**
         * @var StandaloneView
         */
        protected $view;
        /**
         * @var string
         */
        protected $templatePath;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * ModuleTemplate Container
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * Loaded with the global array $MCONF which holds some module configuration from the conf.php file of backend modules.
         *
         * @see init()
         * @var array
         */
        protected $MCONF;
        /**
         * The module menu items array. Each key represents a key for which values can range between the items in the array of that key.
         *
         * @see init()
         * @var array
         */
        protected $MOD_MENU;
        /**
         * Current settings for the keys of the MOD_MENU array
         *
         * @see $MOD_MENU
         * @var array
         */
        protected $MOD_SETTINGS;

        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Configure menu
         */
        protected function menuConfig() {}
        /**
         * Generates the action menu
         */
        protected function getModuleMenu() {}
        /**
         * Creates the overview menu.
         */
        protected function func_default() {}
        /**
         * Check and update reference index!
         */
        protected function func_refindex() {}
        /**
         * Search (Full / Advanced)
         */
        protected function func_search() {}
        /**
         * Records overview
         */
        protected function func_records() {}
        /**
         * Show list references
         */
        protected function func_relations() {}
        /**
         * Returns the Language Service
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

    /**
     * View configuration arrays in the backend
     */
    class ConfigurationController {
        /**
         * Available trees to render.
         *  * label is an LLL identifier
         *  * type is used to identify the data source type
         *  * globalKey (only for type=global) is the name of a global variable
         *
         * @var array
         */
        protected $treeSetup;
        /**
         * Blind configurations which should not be visible to mortal admins
         *
         * @var array
         */
        protected $blindedConfigurationOptions;

/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function mainAction(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ServerRequestInterface $request, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ResponseInterface $response) {}
        /**
         * Returns the Backend User
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Lowlevel\Command {
    /**
     * Looking up all occurencies of RTEmagic images in the database and check existence of parent and
     * copy files on the file system plus report possibly lost files of this type
     */
    class RteImagesCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function updateReferenceIndex(InputInterface $input, SymfonyStyle $io) {}
        /**
         * Find lost files in uploads/ folder
         *
         * @return array an array of files (relative to PATH_site) that are not connected
         */
        protected function findAllReferencedRteImagesWithOriginals() : array {}
        protected function findAllRteFilesInDirectory($folder = 'uploads/') : array {}
        protected function deleteLostFiles(array $lostFiles, bool $dryRun, SymfonyStyle $io) {}
        protected function copyMultipleReferencedRteImages(array $multipleReferencedImages, bool $dryRun, SymfonyStyle $io) {}
        protected function formatReferenceIndexEntryToString(array $record) : string {}
    }

    /**
     * Checks if TCA records with a FlexForm includes values that don't match the connected FlexForm value
     */
    class CleanFlexFormsCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function findAllDirtyFlexformsInPage(int $pageId, int $depth, array $dirtyFlexFormFields = [ ]) : array {}
        protected function compareAllFlexFormsInRecord(string $tableName, int $uid, array $dirtyFlexFormFields = [ ]) : array {}
        protected function cleanFlexFormRecords(array $records, bool $dryRun, SymfonyStyle $io) {}
    }

    /**
     * Finds references and soft-references to
     * - records which are marked as deleted (e.g. still in the system as reminder)
     * - offline versions (references should never point to offline versions)
     * - non-existing records (records which have been deleted not via DataHandler)
     *
     * The later (non-soft-reference variants) can be automatically fixed by simply removing
     * the references from the refindex.
     */
    class MissingRelationsCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function updateReferenceIndex(InputInterface $input, SymfonyStyle $io) {}
        /**
         * Find relations pointing to non-existing records (in managed references or soft-references)
         *
         * @return array an array of records within sys_refindex
         */
        protected function findRelationsToNonExistingRecords() : array {}
        protected function removeReferencesToMissingRecords(array $offlineVersionRecords, array $nonExistingRecords, bool $dryRun, SymfonyStyle $io) {}
        protected function formatReferenceIndexEntryToString(array $record) : string {}
    }

    /**
     * Finds files within uploads/ which are not needed anymore
     */
    class LostFilesCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function updateReferenceIndex(InputInterface $input, SymfonyStyle $io) {}
        protected function findLostFiles($excludedPaths = [ ], $customPaths = '') : array {}
        protected function deleteLostFiles(array $lostFiles, bool $dryRun, SymfonyStyle $io) {}
    }

    /**
     * Finds files which are referenced by TYPO3 but not found in the file system
     */
    class MissingFilesCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function updateReferenceIndex(InputInterface $input, SymfonyStyle $io) {}
        /**
         * Find file references that points to non-existing files in system
         * Fix methods: API in \TYPO3\CMS\Core\Database\ReferenceIndex that allows to
         * change the value of a reference (or remove it)
         *
         * @return array an array of records within sys_refindex
         */
        protected function findMissingReferencedFiles() : array {}
        /**
         * Find file references that points to non-existing files in system
         * registered as soft references (checked for "softref_key")
         *
         * @return array an array of the data within soft references
         */
        protected function findMissingSoftReferencedFiles() : array {}
        protected function removeReferencesToMissingFiles(array $missingManagedFiles, bool $dryRun, SymfonyStyle $io) {}
        protected function formatReferenceIndexEntryToString(array $record) : string {}
    }

    /**
     * Force-deletes all records in the database which have a deleted=1 flag
     */
    class DeletedRecordsCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
/** @var QueryBuilder $queryBuilderForPages */
        protected function findAllFlaggedRecordsInPage(/** @var QueryBuilder $queryBuilderForPages */
int $pageId, /** @var QueryBuilder $queryBuilderForPages */
int $depth, /** @var QueryBuilder $queryBuilderForPages */
array $deletedRecords = [ ]) : array {}
        /**
         * Fetches all tables registered in the TCA with a deleted
         * and that are not pages (which are handled separately)
         *
         * @return array an associative array with the table as key and the
         */
        protected function getTablesWithDeletedFlags() : array {}
        protected function deleteRecords(array $deletedRecords, bool $dryRun, SymfonyStyle $io) {}
    }

    /**
     * Lists all sys_log entries from the last 24 hours by default
     * This is the most basic and can be useful for nightly check test reports.
     */
    class ListSysLogCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    /**
     * Finds files within uploads/ which are used multiple times by relations within the database
     */
    class FilesWithMultipleReferencesCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function updateReferenceIndex(InputInterface $input, SymfonyStyle $io) {}
        /**
         * Find files which are referenced multiple times in uploads/ folder
         *
         * @return array an array of files and their reference hashes that are referenced multiple times
         */
        protected function findMultipleReferencedFiles() : array {}
        protected function copyMultipleReferencedFiles(array $multipleReferencesToFiles, bool $dryRun, SymfonyStyle $io) {}
        protected function formatReferenceIndexEntryToString(array $record) : string {}
    }

    /**
     * Finds (and fixes) all records that have an invalid / deleted page ID
     */
    class OrphanRecordsCommand extends \symfony\component\console\command\command {
        /**
         * Configure the command by defining the name, options and arguments
         */
        public function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function findAllConnectedRecordsInPage(int $pageId, int $depth, array $allRecords = [ ]) : array {}
        protected function deleteRecords(array $orphanedRecords, bool $dryRun, SymfonyStyle $io) {}
    }

}

namespace TYPO3\CMS\Lowlevel\Utility {
    /**
     * Class for displaying an array as a tree
     * See the extension 'lowlevel' /config (Backend module 'Tools > Configuration')
     */
    class ArrayBrowser {
        /**
         * @var bool
         */
        public $expAll;
        /**
         * If set, will expand all (depthKeys is obsolete then) (and no links are applied)
         *
         * @var bool
         */
        public $dontLinkVar;
        /**
         * If set, the variable keys are not linked.
         *
         * @var array
         */
        public $depthKeys;
        /**
         * Array defining which keys to expand. Typically set from outside from some session
         * variable - otherwise the array will collapse.
         *
         * @var array
         */
        public $searchKeys;
        /**
         * After calling the getSearchKeys function this array is populated with the
         * key-positions in the array which contains values matching the search.
         *
         * @var int
         */
        public $fixedLgd;
        /**
         * If set, the values are truncated with "..." appended if longer than a certain
         * length.
         *
         * @var int
         */
        public $regexMode;
        /**
         * If set, search for string with regex, otherwise stristr()
         *
         * @var bool
         */
        public $searchKeysToo;
        /**
         * If set, array keys are subject to the search too.
         *
         * @var string
         */
        public $varName;

/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function tree(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$array, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$positionKey) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function wrapArrayKey(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$label, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$depth, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$theValue) {}
        public function getSearchKeys($keyArr, $depth_in, $searchString, $keyArray) {}
        public function depthKeys($arr, $settings) {}
    }

}

namespace TYPO3\CMS\Lowlevel\Tests\Unit\Utility {
    /**
     * Testcase for the \TYPO3\CMS\Lowlevel\Utility\ArrayBrowser class in the TYPO3 Core.
     */
    class ArrayBrowserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Lowlevel\Utility\ArrayBrowser
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function depthKeysWithEmptyFirstParameterAddsNothing() {}
        /**
         * @test
         */
        public function depthKeysWithNumericKeyAddsOneNumberForKeyFromFirstArray() {}
    }

}

namespace TYPO3\CMS\Beuser {
    /**
     * Generic Beuser exception
     */
    class Exception extends \typo3\cms\core\exception {}

}

namespace TYPO3\CMS\Beuser\ViewHelpers {
    /**
     * Displays 'SwitchUser' link with sprite icon to change current backend user to target (non-admin) backendUser
     * @internal
     */
    class SwitchUserViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Get a value from an array by given key.
     */
    class ArrayElementViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Edit Record ViewHelper, see FormEngine logic
     *
     * @internal
     */
    class EditRecordViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public static function renderStatic(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $arguments, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
\Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Render a link to DataHandler command
     * @internal
     */
    class IssueCommandViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public static function renderStatic(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $arguments, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
\Closure $renderChildrenClosure, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Views sprite icon for a record (object)
     * @internal
     */
    class SpriteIconForRecordViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        /**
         * Displays spriteIcon for database table and object
         *
         * @return string
         * @see IconFactory::getIconForRecord()
         */
        public function render() {}
/** @var IconFactory $iconFactory */
        public static function renderStatic(/** @var IconFactory $iconFactory */
array $arguments, /** @var IconFactory $iconFactory */
\Closure $renderChildrenClosure, /** @var IconFactory $iconFactory */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Displays 'Delete user' link with sprite icon to remove user
     *
     * @internal
     */
    class RemoveUserViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
/** @var IconFactory $iconFactory */
        public static function renderStatic(/** @var IconFactory $iconFactory */
array $arguments, /** @var IconFactory $iconFactory */
\Closure $renderChildrenClosure, /** @var IconFactory $iconFactory */
RenderingContextInterface $renderingContext) {}
    }

    /**
     * Render permission icon group (user / group / others) of the "Access" module.
     *
     * Most of that could be done in fluid directly, but this view helper
     * is much better performance wise.
     */
    class PermissionsViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;
        /**
         * @var array Cached labels for a single permission mask like "Delete page"
         */
        static protected $permissionLabels;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Beuser\ViewHelpers\Display {
    /**
     * Converts comma separated list of pages uids to html unordered list (<ul>) with speaking titles
     * @internal
     */
    class PagesViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Converts comma separated list of sys_language uids to html unordered list (<ul>) with speaking titles
     * @internal
     */
    class SysLanguageViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Converts comma separated list of sys_filemounts uids to html unordered list (<ul>) with speaking titles
     * @internal
     */
    class SysFileMountsViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Beuser\ContextMenu {
    class ItemProvider extends \typo3\cms\backend\contextmenu\itemproviders\pageprovider {
        /**
         * @var array
         */
        protected $itemsConfiguration;

        protected function canRender(string $itemName, string $type) : bool {}
        public function addItems(array $items) : array {}
        /**
         * This priority should be lower than priority of the PageProvider, so it's evaluated after the PageProvider
         *
         * @return int
         */
        public function getPriority() : int {}
        protected function getAdditionalAttributes(string $itemName) : array {}
        /**
         * Checks if the page is allowed to show permission module
         *
         * @return bool
         */
        protected function canShowPermissionsModule() : bool {}
    }

}

namespace TYPO3\CMS\Beuser\Controller {
    /**
     * Backend module page permissions
     */
    class PermissionController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        const SESSION_PREFIX = 'tx_Beuser_';

        /**
         * @var int the current page id
         */
        protected $id;
        /**
         * @var string
         */
        protected $returnUrl;
        /**
         * @var int
         */
        protected $depth;
        /**
         * Number of levels to enable recursive settings for
         *
         * @var int
         */
        protected $getLevels;
        /**
         * @var array
         */
        protected $pageInfo;
        /**
         * Backend Template Container
         *
         * @var string
         */
        protected $defaultViewObjectName;
        /**
         * BackendTemplateContainer
         *
         * @var BackendTemplateView
         */
        protected $view;

        /**
         * Initialize action
         */
        protected function initializeAction() {}
        protected function initializeView(ViewInterface $view) {}
        /**
         * Registers the Icons into the docheader
         *
         * @throws \InvalidArgumentException
         */
        protected function registerDocHeaderButtons() {}
        /** @var $tree PageTreeView */
        public function indexAction() {}
        /**
         * Edit action
         */
        public function editAction() {}
        protected function updateAction(array $data, array $mirror) {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Finding tree and offer setting of values recursively.
         *
         * @return array
         */
        protected function getRecursiveSelectOptions() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Backend module user/group action controller
     */
    class BackendUserActionController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * Backend Template Container
         *
         * @var string
         */
        protected $defaultViewObjectName;
        /**
         * BackendTemplateContainer
         *
         * @var BackendTemplateView
         */
        protected $view;

/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /**
         * Generates the action menu
         */
        protected function generateMenu() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function registerDocheaderButtons() {}
        protected function getHref($controller, $action, $parameters = [ ]) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Backend module user group administration controller
     */
    class BackendUserGroupController extends \typo3\cms\beuser\controller\backenduseractioncontroller {
        /**
         * @var \TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository
         */
        protected $backendUserGroupRepository;

        public function injectBackendUserGroupRepository(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository $backendUserGroupRepository) {}
        /**
         * Initialize actions
         *
         * @throws \RuntimeException
         */
        public function initializeAction() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function indexAction() {}
    }

    /**
     * This class extends the permissions module in the TYPO3 Backend to provide
     * convenient methods of editing of page permissions (including page ownership
     * (user and group)) via new AjaxRequestHandler facility
     */
    class PermissionAjaxController {
        /**
         * The local configuration array
         *
         * @var array
         */
        protected $conf;
        /**
         * @var IconFactory
         */
        protected $iconFactory;

        /**
         * The constructor of this class
         */
        public function __construct() {}
/** @var $tce DataHandler */
        public function dispatch(/** @var $tce DataHandler */
ServerRequestInterface $request, /** @var $tce DataHandler */
ResponseInterface $response) {}
        protected function renderUserSelector($page, $ownerUid, $username = '') {}
        protected function renderGroupSelector($page, $groupUid, $groupname = '') {}
        protected function renderToggleEditLock($page, $editLockState) {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Backend module user administration controller
     */
    class BackendUserController extends \typo3\cms\beuser\controller\backenduseractioncontroller {
        const RECENT_USERS_LIMIT = 3;

        /**
         * @var \TYPO3\CMS\Beuser\Domain\Model\ModuleData
         */
        protected $moduleData;
        /**
         * @var \TYPO3\CMS\Beuser\Service\ModuleDataStorageService
         */
        protected $moduleDataStorageService;
        /**
         * @var \TYPO3\CMS\Beuser\Domain\Repository\BackendUserRepository
         */
        protected $backendUserRepository;
        /**
         * @var \TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository
         */
        protected $backendUserGroupRepository;
        /**
         * @var \TYPO3\CMS\Beuser\Domain\Repository\BackendUserSessionRepository
         */
        protected $backendUserSessionRepository;

        public function injectModuleDataStorageService(\TYPO3\CMS\Beuser\Service\ModuleDataStorageService $moduleDataStorageService) {}
        public function injectBackendUserRepository(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserRepository $backendUserRepository) {}
        public function injectBackendUserGroupRepository(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository $backendUserGroupRepository) {}
        public function injectBackendUserSessionRepository(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserSessionRepository $backendUserSessionRepository) {}
        public function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        /**
         * Initialize actions
         *
         * @throws \RuntimeException
         */
        public function initializeAction() {}
        public function indexAction(\TYPO3\CMS\Beuser\Domain\Model\Demand $demand = null) {}
        /**
         * Views all currently logged in BackendUsers and their sessions
         */
        public function onlineAction() {}
        /**
         * Compare backend users from demand
         */
        public function compareAction() {}
        public function addToCompareListAction($uid) {}
        public function removeFromCompareListAction($uid) {}
        protected function terminateBackendUserSessionAction(\TYPO3\CMS\Beuser\Domain\Model\BackendUser $backendUser, $sessionId) {}
        protected function switchUser($switchUser) {}
        protected function generateListOfMostRecentSwitchedUsers(int $targetUserUid) : array {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return SessionBackendInterface
         */
        protected function getSessionBackend() {}
    }

}

namespace TYPO3\CMS\Beuser\Service {
    /**
     * Module data storage service.
     * Used to store and retrieve module state (eg. checkboxes, selections).
     */
    class ModuleDataStorageService implements \typo3\cms\core\singletoninterface {
        const KEY = 'tx_beuser';

        /**
         * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
         */
        protected $objectManager;

        public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager) {}
        /**
         * Loads module data for user settings or returns a fresh object initially
         *
         * @return \TYPO3\CMS\Beuser\Domain\Model\ModuleData
         */
        public function loadModuleData() {}
        public function persistModuleData(\TYPO3\CMS\Beuser\Domain\Model\ModuleData $moduleData) {}
    }

}

namespace TYPO3\CMS\Beuser\Domain\Repository {
    /**
     * Repository for \TYPO3\CMS\Beuser\Domain\Model\BackendUser
     */
    class BackendUserRepository extends \typo3\cms\extbase\domain\repository\backendusergrouprepository {
/** @var QueryResult $result */
        public function findByUidList(/** @var QueryResult $result */
array $uidList) {}
/** @var QueryResult $result */
        public function findDemanded(/** @var QueryResult $result */
Demand $demand) {}
        /**
         * Find Backend Users currently online
         *
         * @return \TYPO3\CMS\Extbase\Persistence\Generic\QueryResult<\TYPO3\CMS\Beuser\Domain\Model\BackendUser>
         */
        public function findOnline() {}
        /**
         * Overwrite createQuery to don't respect enable fields
         *
         * @return QueryInterface
         */
        public function createQuery() {}
        /**
         * @return SessionBackendInterface
         */
        protected function getSessionBackend() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * Repository for \TYPO3\CMS\Extbase\Domain\Model\BackendUser
     */
    class BackendUserSessionRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * Find all active sessions for all backend users
         *
         * @return array
         */
        public function findAllActive() {}
        public function findByBackendUser(BackendUser $backendUser) {}
        public function switchBackToOriginalUser(AbstractUserAuthentication $authentication) {}
        /**
         * @return string
         */
        protected function getBackendSessionId() : string {}
        /**
         * @return SessionBackendInterface
         */
        protected function getSessionBackend() : SessionBackendInterface {}
    }

    /**
     * Repository for \TYPO3\CMS\Beuser\Domain\Model\BackendUserGroup
     */
    class BackendUserGroupRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * @var array Default order is by title ascending
         */
        protected $defaultOrderings;

        /**
         * Overwrite createQuery to don't respect enable fields
         *
         * @return \TYPO3\CMS\Extbase\Persistence\QueryInterface
         */
        public function createQuery() {}
    }

}

namespace TYPO3\CMS\Beuser\Domain\Model {
    /**
     * Model for backend user
     */
    class BackendUser extends \typo3\cms\extbase\domain\model\backenduser {
        /**
         * Comma separated list of uids in multi-select
         * Might retrieve the labels from TCA/DataMapper
         *
         * @var string
         */
        protected $allowedLanguages;
        /**
         * @var string
         */
        protected $dbMountPoints;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var string
         */
        protected $fileMountPoints;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Beuser\Domain\Model\BackendUserGroup>
         */
        protected $backendUserGroups;

        public function setAllowedLanguages($allowedLanguages) {}
        /**
         * @return string
         */
        public function getAllowedLanguages() {}
        public function setDbMountPoints($dbMountPoints) {}
        /**
         * @return string
         */
        public function getDbMountPoints() {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        public function setFileMountPoints($fileMountPoints) {}
        /**
         * @return string
         */
        public function getFileMountPoints() {}
        /**
         * Check if user is active, not disabled
         *
         * @return bool
         */
        public function isActive() {}
        public function setBackendUserGroups($backendUserGroups) {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        public function getBackendUserGroups() {}
        /**
         * Check if user is currently logged in
         *
         * @return bool
         */
        public function isCurrentlyLoggedIn() {}
        /**
         * Gets the currently logged in backend user
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        public function getBackendUser() {}
    }

    /**
     * Model for backend user group
     */
    class BackendUserGroup extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $description;
        /**
         * @var bool
         */
        protected $hidden;
        /**
         * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\TYPO3\CMS\Beuser\Domain\Model\BackendUserGroup>
         * @lazy
         */
        protected $subGroups;

        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getTitle() {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        public function setHidden($hidden) {}
        /**
         * @return bool
         */
        public function getHidden() {}
        public function setSubGroups($subGroups) {}
        /**
         * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage
         */
        public function getSubGroups() {}
    }

    /**
     * Module data object
     */
    class ModuleData {
        /**
         * @var \TYPO3\CMS\Beuser\Domain\Model\Demand
         */
        protected $demand;
        /**
         * @var array
         */
        protected $compareUserList;

        public function injectDemand(\TYPO3\CMS\Beuser\Domain\Model\Demand $demand) {}
        /**
         * @return \TYPO3\CMS\Beuser\Domain\Model\Demand
         */
        public function getDemand() {}
        public function setDemand(\TYPO3\CMS\Beuser\Domain\Model\Demand $demand) {}
        /**
         * Returns the compare list as array of user uis
         *
         * @return array
         */
        public function getCompareUserList() {}
        public function attachUidCompareUser($uid) {}
        public function detachUidCompareUser($uid) {}
    }

    /**
     * Demand filter for listings
     */
    class Demand extends \typo3\cms\extbase\domainobject\abstractentity {
        const LOGIN_NONE = 2;
        const STATUS_INACTIVE = 2;
        const LOGIN_SOME = 1;
        const STATUS_ACTIVE = 1;
        const USERTYPE_ADMINONLY = 1;
        const USERTYPE_USERONLY = 2;
        const ALL = 0;

        /**
         * @var string
         */
        protected $userName;
        /**
         * @var int
         */
        protected $userType;
        /**
         * @var int
         */
        protected $status;
        /**
         * @var int
         */
        protected $logins;
        /**
         * @var \TYPO3\CMS\Beuser\Domain\Model\BackendUserGroup
         */
        protected $backendUserGroup;

        public function setUserName($userName) {}
        /**
         * @return string
         */
        public function getUserName() {}
        public function setUserType($userType) {}
        /**
         * @return int
         */
        public function getUserType() {}
        public function setStatus($status) {}
        /**
         * @return int
         */
        public function getStatus() {}
        public function setLogins($logins) {}
        /**
         * @return int
         */
        public function getLogins() {}
        public function setBackendUserGroup($backendUserGroup) {}
        /**
         * @return BackendUserGroup
         */
        public function getBackendUserGroup() {}
    }

}

namespace TYPO3\CMS\Beuser\Hook {
    /**
     * This class adds import export related JavaScript to the backend
     */
    class BackendControllerHook {
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function addJavaScript(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $configuration, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
BackendController $backendController) {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

    /**
     * Backend user switchback, for logoff_pre_processing hook within
     * \TYPO3\CMS\Core\Authentication\AbstractUserAuthentication class
     */
    class SwitchBackUserHook {
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function switchBack(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$params, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
AbstractUserAuthentication $authentication) {}
        protected function isAHandledBackendSession(AbstractUserAuthentication $authentication) {}
    }

}

namespace TYPO3\CMS\Beuser\Tests\Unit\Controller {
    /**
     * Test case
     */
    class BackendUserControllerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var BackendUserController|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function generateListOfLatestSwitchedUsersReturnsCorrectAmountAndOrder() {}
        /**
         * @test
         */
        public function listOfLatestSwitchedUsersDoesNotContainTheSameUserTwice() {}
    }

}

namespace TYPO3\CMS\Beuser\Tests\Unit\Service {
    /**
     * Test case
     */
    class ModuleDataStorageServiceTest extends \typo3\testingframework\core\unit\unittestcase {
        /** @var \TYPO3\CMS\Beuser\Service\ModuleDataStorageService $subject */
        public function loadModuleDataReturnsModuleDataObjectForEmptyModuleData() {}
    }

}

namespace TYPO3\CMS\Beuser\Tests\Unit\Domain\Repository {
    /**
     * Test case
     */
    class BackendUserRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function classCanBeInstantiated() {}
    }

    /**
     * Test case
     */
    class BackendUserSessionRepositoryTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @test
         */
        public function classCanBeInstantiated() {}
    }

}

namespace TYPO3\CMS\Beuser\Tests\Unit\Domain\Model {
    /**
     * Test case for class \TYPO3\CMS\Beuser\Domain\Model\Demand
     */
    class DemandTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Beuser\Domain\Model\Demand
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function setUserTypeAllExpectedValueForInt() {}
        /**
         * @test
         */
        public function setUserTypeAdminOnlyExpectedValueForInt() {}
        /**
         * @test
         */
        public function setUserTypeUserOnlyExpectedValueForInt() {}
        /**
         * @test
         */
        public function setStatusAllExpectedValueForInt() {}
        /**
         * @test
         */
        public function setStatusActiveExpectedValueForInt() {}
        /**
         * @test
         */
        public function setStatusInactiveExpectedValueForInt() {}
        /**
         * @test
         */
        public function setLoginAllExpectedValueForInt() {}
        /**
         * @test
         */
        public function setLoginNoneExpectedValueForInt() {}
        /**
         * @test
         */
        public function setLoginxSameExpectedValueForInt() {}
        /**
         * @test
         */
        public function getUserNameInitialValueForString() {}
        /**
         * @test
         */
        public function setUserNameReturnExpectedValueForString() {}
    }

    /**
     * Test case
     */
    class BackendUserTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var \TYPO3\CMS\Beuser\Domain\Model\BackendUser
         */
        protected $subject;

        protected function setUp() {}
        /**
         * @test
         */
        public function getUidReturnsInitialValueForInt() {}
        /**
         * @test
         */
        public function getUserNameReturnsInitialValueForString() {}
        /**
         * @test
         */
        public function setUserNameForStringSetsUserName() {}
        /**
         * @test
         */
        public function getRealNameReturnInitialValueForString() {}
        /**
         * @test
         */
        public function setRealNameForStringSetsName() {}
        /**
         * @test
         */
        public function getAdminReturnInitialValueForBoolean() {}
        /**
         * @test
         */
        public function setAdminToTrueSetsAdmin() {}
        /**
         * @test
         */
        public function setAdminToFalseSetsAdmin() {}
    }

}

namespace TYPO3\CMS\RteCKEditor\Form\Element {
    /**
     * Render rich text editor in FormEngine
     */
    class RichTextElement extends \typo3\cms\backend\form\element\abstractformelement {
        /**
         * Default field wizards enabled for this element.
         *
         * @var array
         */
        protected $defaultFieldWizard;
        /**
         * This property contains configuration related to the RTE
         * But only the .editor configuration part
         *
         * @var array
         */
        protected $rteConfiguration;

        /**
         * Renders the ckeditor element
         *
         * @return array
         * @throws \InvalidArgumentException
         */
        public function render() : array {}
        /**
         * Determine the contents language iso code
         *
         * @return string
         */
        protected function getLanguageIsoCodeOfContent() : string {}
        protected function getCkEditorRequireJsModuleCode(string $fieldId) : string {}
        /**
         * Get configuration of external/additional plugins
         *
         * @return array
         */
        protected function getExtraPlugins() : array {}
        protected function replaceLanguageFileReferences(array $configuration) : array {}
        protected function replaceAbsolutePathsToRelativeResourcesPath(array $configuration) : array {}
        protected function resolveUrlPath(string $value) : string {}
        /**
         * Compiles the configuration set from the outside
         * to have it easily injected into the CKEditor.
         *
         * @return array the configuration
         */
        protected function prepareConfigurationForEditor() : array {}
        protected function sanitizeFieldId(string $itemFormElementName) : string {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\RteCKEditor\Form\Resolver {
    /**
     * This resolver will return the RichTextElement render class if RTE is enabled for this field.
     */
    class RichTextNodeResolver implements \typo3\cms\backend\form\noderesolverinterface {
        /**
         * Global options from NodeFactory
         *
         * @var array
         */
        protected $data;

        public function __construct(NodeFactory $nodeFactory, array $data) {}
        /**
         * Returns RichTextElement as class name if RTE widget should be rendered.
         *
         * @return string|void New class name or void if this resolver does not change current class name.
         */
        public function resolve() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

}

namespace TYPO3\CMS\RteCKEditor\Controller {
    /**
     * Extended controller for link browser
     */
    class BrowseLinksController extends \typo3\cms\recordlist\controller\abstractlinkbrowsercontroller {
        /**
         * @var string
         */
        protected $editorId;
        /**
         * TYPO3 language code of the content language
         *
         * @var int
         */
        protected $contentsLanguage;
        /**
         * Language service object for localization to the content language
         *
         * @var LanguageService
         */
        protected $contentLanguageService;
        /**
         * @var array
         */
        protected $buttonConfig;
        /**
         * @var array
         */
        protected $thisConfig;
        /**
         * @var array
         */
        protected $classesAnchorDefault;
        /**
         * @var array
         */
        protected $classesAnchorDefaultTitle;
        /**
         * @var array
         */
        protected $classesAnchorClassTitle;
        /**
         * @var array
         */
        protected $classesAnchorDefaultTarget;
        /**
         * @var array
         */
        protected $classesAnchorJSOptions;
        /**
         * @var string
         */
        protected $defaultLinkTarget;
        /**
         * @var array
         */
        protected $additionalAttributes;
        /**
         * @var string
         */
        protected $siteUrl;

        /**
         * Initialize controller
         */
        protected function init() {}
/** @var Richtext $richtextConfigurationProvider */
        protected function initVariables(/** @var Richtext $richtextConfigurationProvider */
ServerRequestInterface $request) {}
        /**
         * Initialize document template object
         */
        protected function initDocumentTemplate() {}
        /**
         * Initialize $this->currentLink and $this->currentLinkHandler
         */
        protected function initCurrentUrl() {}
        /**
         * Renders the link attributes for the selected link handler
         *
         * @return string
         */
        public function renderLinkAttributeFields() {}
        public function getPageConfigLabel($string, $JScharCode = true) {}
        /**
         * @return string
         */
        protected function renderCurrentUrl() {}
        /**
         * Get the allowed items or tabs
         *
         * @return string[]
         */
        protected function getAllowedItems() {}
        /**
         * Get the allowed link attributes
         *
         * @return string[]
         */
        protected function getAllowedLinkAttributes() {}
        /**
         * Create an array of link attribute field rendering definitions
         *
         * @return string[]
         */
        protected function getLinkAttributeFieldDefinitions() {}
        /**
         * Add rel field
         *
         * @return string
         */
        protected function getRelField() {}
        /**
         * Add target selector
         *
         * @return string
         */
        protected function getTargetField() {}
        /**
         * Add title selector
         *
         * @return string
         */
        protected function getTitleField() {}
        /**
         * Return html code for the class selector
         *
         * @return string the html code to be added to the form
         */
        protected function getClassField() {}
        /**
         * Return the ID of current page
         *
         * @return int
         */
        protected function getCurrentPageId() {}
        /**
         * Retrieve the configuration
         *
         * This is only used by RTE currently.
         *
         * @return array
         */
        public function getConfiguration() {}
        /**
         * Get attributes for the body tag
         *
         * @return string[] Array of body-tag attributes
         */
        protected function getBodyTagAttributes() {}
        public function getUrlParameters(array $overrides = null) {}
    }

}

namespace TYPO3\CMS\Viewpage\Controller {
    /**
     * Controller for viewing the frontend
     */
    class ViewModuleController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var string
         */
        protected $defaultViewObjectName;
        /**
         * @var BackendTemplateView
         */
        protected $view;

/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function registerDocHeader() {}
        /**
         * Gets called before each action
         */
        public function initializeAction() {}
        /**
         * Show selected page from pagetree in iframe
         */
        public function showAction() {}
        /** @var \TYPO3\CMS\Frontend\Page\PageRepository $sysPage */
        protected function getTargetUrl() {}
        protected function getAdminCommand($pageId) {}
        protected function getTypeParameterIfSet($pageId) {}
        protected function getDomainName($pageId) {}
        /**
         * Get available presets for preview frame
         *
         * @return array
         */
        protected function getPreviewPresets() {}
        /**
         * Returns the preview languages
         *
         * @return array
         */
        protected function getPreviewLanguages() {}
        /**
         * Returns the current language
         *
         * @return string
         */
        protected function getCurrentLanguage() {}
        /**
         * Gets the L parameter from the user session
         *
         * @return string
         */
        protected function getLanguageParameter() {}
        /**
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Opendocs\Backend\ToolbarItems {
    /**
     * Main functionality to render a list of all open documents in the top bar of the TYPO3 Backend
     *
     * This class also contains hooks and AJAX calls related to the toolbar item dynamic updating processing
     */
    class OpendocsToolbarItem implements \typo3\cms\backend\toolbar\toolbariteminterface {
        /**
         * @var array
         */
        protected $openDocs;
        /**
         * @var array
         */
        protected $recentDocs;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Checks whether the user has access to this toolbar item
         *
         * @return bool TRUE if user has access, FALSE if not
         */
        public function checkAccess() {}
        /**
         * Loads the opened and recently opened documents from the user
         */
        public function loadDocsFromUserSession() {}
        /**
         * Render toolbar icon via Fluid
         *
         * @return string HTML
         */
        public function getItem() {}
        /**
         * Render drop down via Fluid
         *
         * @return string HTML
         */
        public function getDropDown() {}
        protected function getMenuEntries(array $documents) : array {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function getMenuEntry(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$document, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$md5sum) {}
        /**
         * No additional attributes
         *
         * @return string List item HTML attibutes
         */
        public function getAdditionalAttributes() {}
        /**
         * This item has a drop down
         *
         * @return bool
         */
        public function hasDropDown() {}
        public function updateNumberOfOpenDocsHook($params) {}
        public function closeDocument(ServerRequestInterface $request, ResponseInterface $response) {}
        public function renderMenu(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Position relative to others
         *
         * @return int
         */
        public function getIndex() {}
        /**
         * Returns the current BE user.
         *
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        protected function getFluidTemplateObject(string $filename) : StandaloneView {}
    }

}

namespace TYPO3\CMS\SysNote\Core {
    /**
     * Bootstrap for note module
     */
    class Bootstrap {
        /**
         * Do not touch if you are not sure what you are doing!
         * @var array
         */
        protected $extbaseConfiguration;
        /**
         * @var array
         */
        protected $currentGetArguments;

/** @var $extbaseBootstrap \TYPO3\CMS\Extbase\Core\Bootstrap */
        public function run(/** @var $extbaseBootstrap \TYPO3\CMS\Extbase\Core\Bootstrap */
$controllerName, /** @var $extbaseBootstrap \TYPO3\CMS\Extbase\Core\Bootstrap */
$actionName, /** @var $extbaseBootstrap \TYPO3\CMS\Extbase\Core\Bootstrap */
array $arguments = [ ]) {}
        protected function expectOutput(array $arguments = [ ]) {}
        protected function overrideGetArguments(array $arguments) {}
        /**
         * Revert previously backuped get arguments
         */
        protected function revertGetArguments() {}
    }

}

namespace TYPO3\CMS\SysNote\ViewHelpers {
    /**
     * ViewHelper to create a link to edit a note
     * @internal
     */
    class EditLinkViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * ViewHelper to create a link to delete a note
     *
     * @internal
     */
    class DeleteLinkViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\SysNote\Controller {
    /**
     * Note controller
     */
    class NoteController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var \TYPO3\CMS\SysNote\Domain\Repository\SysNoteRepository
         */
        protected $sysNoteRepository;

        public function injectSysNoteRepository(\TYPO3\CMS\SysNote\Domain\Repository\SysNoteRepository $sysNoteRepository) {}
        public function listAction($pids) {}
    }

}

namespace TYPO3\CMS\SysNote\Domain\Repository {
    /**
     * Sys_note repository
     */
    class SysNoteRepository extends \typo3\cms\extbase\persistence\repository {
        /**
         * Initialize the repository
         */
        public function initializeObject() {}
        public function findByPidsAndAuthor($pids, \TYPO3\CMS\Extbase\Domain\Model\BackendUser $author) {}
        public function findByPidsAndAuthorId($pids, int $author) {}
    }

}

namespace TYPO3\CMS\SysNote\Domain\Model {
    /**
     * SysNote model
     */
    class SysNote extends \typo3\cms\extbase\domainobject\abstractentity {
        /**
         * @var \DateTime
         */
        protected $creationDate;
        /**
         * @var \DateTime
         */
        protected $modificationDate;
        /**
         * @var \TYPO3\CMS\Extbase\Domain\Model\BackendUser
         */
        protected $author;
        /**
         * @var string
         */
        protected $subject;
        /**
         * @var string
         */
        protected $message;
        /**
         * @var bool
         */
        protected $personal;
        /**
         * @var int
         */
        protected $category;

        /**
         * @return \DateTime $creationDate
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return \DateTime $modificationDate
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return \TYPO3\CMS\Extbase\Domain\Model\BackendUser $author
         */
        public function getAuthor() {}
        public function setAuthor(\TYPO3\CMS\Extbase\Domain\Model\BackendUser $author) {}
        /**
         * @return string $subject
         */
        public function getSubject() {}
        public function setSubject($subject) {}
        /**
         * @return string $message
         */
        public function getMessage() {}
        public function setMessage($message) {}
        /**
         * @return bool $personal
         */
        public function getPersonal() {}
        public function setPersonal($personal) {}
        /**
         * @return int $category
         */
        public function getCategory() {}
        public function setCategory($category) {}
    }

}

namespace TYPO3\CMS\SysNote\Hook {
    /**
     * Hook for the list module
     */
    class RecordListHook {
/** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
        public function render(/** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
array $params = [ ], /** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
\TYPO3\CMS\Recordlist\RecordList $parentObject) {}
    }

    /**
     * Hook for the page module
     */
    class PageHook {
/** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
        public function render(/** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
array $params = [ ], /** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
\TYPO3\CMS\Backend\Controller\PageLayoutController $parentObject) {}
    }

    /**
     * Hook for the info module
     */
    class InfoModuleHook {
/** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
        public function render(/** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
array $params = [ ], /** @var $noteBootstrap \TYPO3\CMS\SysNote\Core\Bootstrap */
\TYPO3\CMS\Info\Controller\PageInformationController $parentObject) {}
    }

}

namespace TYPO3\CMS\SysNote\Tests\Unit\Tca {
    class NoteVisibleFieldsTest extends \typo3\testingframework\core\functional\functionaltestcase {
        /**
         * @var array
         */
        protected $coreExtensionsToLoad;
        /**
         * @var array
         */
        static protected $noteFields;

        /**
         * @test
         */
        public function noteFormContainsExpectedFields() {}
    }

}

namespace TYPO3\CMS\Taskcenter {
    /**
     * Status of tasks
     */
    class TaskStatus {
        public function saveCollapseState(ServerRequestInterface $request, ResponseInterface $response) {}
        public function saveSortingState(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Returns BackendUserAuthentication
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }


    /**
     * Interface for classes which provide a task.
     */
    interface TaskInterface {
        /**
         * Returns the content for a task
         *
         * @return string A task rendered HTML
         */
        function getTask() ;
        /**
         * Returns the overview of a task
         *
         * @return string A task rendered HTML
         */
        function getOverview() ;
    }

}

namespace TYPO3\CMS\Taskcenter\Controller {
    /**
     * This class provides a taskcenter for BE users
     */
    class TaskModuleController extends \typo3\cms\backend\module\basescriptclass {
        /**
         * @var array
         */
        protected $pageinfo;
        /**
         * ModuleTemplate Container
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;

        /**
         * Initializes the Module
         */
        public function __construct() {}
        /**
         * Adds items to the ->MOD_MENU array. Used for the function menu selector.
         */
        public function menuConfig() {}
        /**
         * Generates the menu based on $this->MOD_MENU
         *
         * @throws \InvalidArgumentException
         */
        protected function generateMenu() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Creates the module's content. In this case it rather acts as a kind of #
         * dispatcher redirecting requests to specific tasks.
         */
        public function main() {}
        /**
         * Generates the module content by calling the selected task
         */
        protected function renderModuleContent() {}
        /**
         * Generates the information content
         */
        protected function renderInformationContent() {}
        public function description($title, $description = '') {}
        public function renderListMenu($items, $mainMenu = false) {}
        /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        protected function indexAction() {}
        /**
         * Create the panel of buttons for submitting the form or otherwise
         * perform operations.
         */
        protected function getButtons() {}
        protected function checkAccess($extKey, $taskClass) {}
        public function urlInIframe($url) {}
        protected function getUniqueKey($string) {}
        /**
         * Returns the current BE user.
         *
         * @return \TYPO3\CMS\Core\Authentication\BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return ModuleTemplate
         */
        public function getModuleTemplate() {}
    }

}

namespace TYPO3\CMS\IndexedSearch {
    /**
     * External standard parsers for indexed_search
     * MUST RETURN utf-8 content!
     */
    class FileContentParser {
        /**
         * This value is also overridden from config.
         * zero: whole PDF file is indexed in one. positive value: Indicates number of pages at a time, eg. "5" would means 1-5,6-10,....
         * Negative integer would indicate (abs value) number of groups. Eg "3" groups of 10 pages would be 1-4,5-8,9-10
         *
         * @var int
         */
        public $pdf_mode;
        /**
         * @var array
         */
        public $app;
        /**
         * @var array
         */
        public $ext2itemtype_map;
        /**
         * @var array
         */
        public $supportedExtensions;
        /**
         * @var \TYPO3\CMS\IndexedSearch\Indexer
         */
        public $pObj;
        /**
         * @var \TYPO3\CMS\Core\Localization\LanguageService|\TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected $langObject;

        /**
         * Constructs this external parsers object
         */
        public function __construct() {}
        public function initParser($extension) {}
        public function softInit($extension) {}
        public function searchTypeMediaTitle($extension) {}
        public function isMultiplePageExtension($extension) {}
        protected function sL($reference) {}
        public function readFileContent($ext, $absFile, $cPKey) {}
        protected function setLocaleForServerFileSystem($resetLocale = false) {}
        public function fileContentParts($ext, $absFile) {}
        public function splitPdfInfo($pdfInfoArray) {}
        public function removeEndJunk($string) {}
        public function getIcon($extension) {}
    }

    /**
     * Lexer class for indexed_search
     * A lexer splits the text into words
     */
    class Lexer {
        /**
         * Debugging options:
         *
         * @var bool
         */
        public $debug;
        /**
         * If set, the debugString is filled with HTML output highlighting search / non-search words (for backend display)
         *
         * @var string
         */
        public $debugString;
        /**
         * Charset class object
         *
         * @var \TYPO3\CMS\Core\Charset\CharsetConverter
         */
        public $csObj;
        /**
         * Configuration of the lexer:
         *
         * @var array
         */
        public $lexerConf;

        /**
         * Constructor: Initializes the charset class
         */
        public function __construct() {}
        public function split2Words($wordString) {}
        public function addWords($words, $wordString, $start, $len) {}
        public function get_word($str, $pos = 0) {}
        public function utf8_is_letter($str, $len, $pos = 0) {}
        public function charType($cp) {}
        public function utf8_ord($str, $len, $pos = 0, $hex = false) {}
    }

    /**
     * Indexing class for TYPO3 frontend
     */
    class Indexer {
        /**
         * @var array
         */
        public $reasons;
        /**
         * HTML code blocks to exclude from indexing
         *
         * @var string
         */
        public $excludeSections;
        /**
         * Supported Extensions for external files
         *
         * @var array
         */
        public $external_parsers;
        /**
         * External parser objects, keys are file extension names. Values are objects with certain methods.
         * Fe-group list (pages might be indexed separately for each usergroup combination to support search
         * in access limited pages!)
         *
         * @var string
         */
        public $defaultGrList;
        /**
         * Min/Max times
         *
         * @var int
         */
        public $tstamp_maxAge;
        /**
         * If set, this tells a number of seconds that is the maximum age of an indexed document.
         * Regardless of mtime the document will be re-indexed if this limit is exceeded.
         *
         * @var int
         */
        public $tstamp_minAge;
        /**
         * If set, this tells a minimum limit before a document can be indexed again. This is regardless of mtime.
         *
         * @var int
         */
        public $maxExternalFiles;
        /**
         * Max number of external files to index.
         *
         * @var bool
         */
        public $forceIndexing;
        /**
         * If TRUE, indexing is forced despite of hashes etc.
         *
         * @var bool
         */
        public $crawlerActive;
        /**
         * Set when crawler is detected (internal)
         *
         * @var array
         */
        public $defaultContentArray;
        /**
         * @var int
         */
        public $wordcount;
        /**
         * @var int
         */
        public $externalFileCounter;
        /**
         * @var array
         */
        public $conf;
        /**
         * Configuration set internally (see init functions for required keys and their meaning)
         *
         * @var array
         */
        public $indexerConfig;
        /**
         * Indexer configuration, coming from TYPO3's system configuration for EXT:indexed_search
         *
         * @var array
         */
        public $hash;
        /**
         * Hash array, contains phash and phash_grouping
         *
         * @var array
         */
        public $file_phash_arr;
        /**
         * Hash array for files
         *
         * @var array
         */
        public $contentParts;
        /**
         * Content of TYPO3 page
         *
         * @var string
         */
        public $content_md5h;
        /**
         * @var array
         */
        public $internal_log;
        /**
         * Internal log
         *
         * @var string
         */
        public $indexExternalUrl_content;
        /**
         * @var array
         */
        public $cHashParams;
        /**
         * cHashparams array
         *
         * @var int
         */
        public $freqRange;
        /**
         * @var float
         */
        public $freqMax;
        /**
         * @var bool
         */
        public $enableMetaphoneSearch;
        /**
         * @var bool
         */
        public $storeMetaphoneInfoAsWords;
        /**
         * @var string
         */
        public $metaphoneContent;
        /**
         * Charset class object
         *
         * @var \TYPO3\CMS\Core\Charset\CharsetConverter
         */
        public $csObj;
        /**
         * Metaphone object, if any
         *
         * @var \TYPO3\CMS\IndexedSearch\Utility\DoubleMetaPhoneUtility
         */
        public $metaphoneObj;
        /**
         * Lexer object for word splitting
         *
         * @var \TYPO3\CMS\IndexedSearch\Lexer
         */
        public $lexerObj;
        /**
         * @var bool
         */
        public $flagBitMask;
        /**
         * @var TimeTracker
         */
        protected $timeTracker;

        /**
         * Indexer constructor.
         */
        public function __construct() {}
        public function hook_indexContent($pObj) {}
        public function backend_initIndexer($id, $type, $sys_language_uid, $MP, $uidRL, $cHash_array = [ ], $createCHash = false) {}
        public function backend_setFreeIndexUid($freeIndexUid, $freeIndexSetId = 0) {}
        public function backend_indexAsTYPO3Page($title, $keywords, $description, $content, $charset, $mtime, $crdate = 0, $recordUid = 0) {}
        /**
         * Initializes the object. $this->conf MUST be set with proper values prior to this call!!!
         */
        public function init() {}
        /**
         * Initialize external parsers
         *
         * @access private
         * @see init()
         */
        public function initializeExternalParsers() {}
        /**
         * Start indexing of the TYPO3 page
         */
        public function indexTypo3PageContent() {}
        public function splitHTMLContent($content) {}
        public function getHTMLcharset($content) {}
        public function convertHTMLToUtf8($content, $charset = '') {}
        public function embracingTags($string, $tagName, $tagContent, $stringAfter, $paramList) {}
        public function typoSearchTags($body) {}
        public function extractLinks($content) {}
        public function extractHyperLinks($html) {}
        public function extractBaseHref($html) {}
        public function indexExternalUrl($externalUrl) {}
        public function getUrlHeaders($url) {}
        protected function createLocalPath($sourcePath) {}
        protected function createLocalPathFromT3vars($sourcePath) {}
        protected function createLocalPathUsingDomainURL($sourcePath) {}
        protected function createLocalPathUsingAbsRefPrefix($sourcePath) {}
        protected function createLocalPathFromAbsoluteURL($sourcePath) {}
        protected function createLocalPathFromRelativeURL($sourcePath) {}
        protected static function isRelativeURL($url) {}
        protected static function isAllowedLocalFile($filePath) {}
        public function indexRegularDocument($file, $force = false, $contentTmpFile = '', $altExtension = '') {}
        public function readFileContent($fileExtension, $absoluteFileName, $sectionPointer) {}
        public function fileContentParts($ext, $absFile) {}
        public function splitRegularContent($content) {}
        public function charsetEntity2utf8($contentArr, $charset) {}
        public function processWordsInArrays($contentArr) {}
        public function bodyDescription($contentArr) {}
        public function indexAnalyze($content) {}
        public function analyzeHeaderinfo($retArr, $content, $key, $offset) {}
        public function analyzeBody($retArr, $content) {}
        public function metaphone($word, $returnRawMetaphoneValue = false) {}
        /**
         * Updates db with information about the page (TYPO3 page, not external media)
         */
        public function submitPage() {}
        public function submit_grlist($hash, $phash_x) {}
        public function submit_section($hash, $hash_t3) {}
        public function removeOldIndexedPages($phash) {}
        public function submitFilePage($hash, $file, $subinfo, $ext, $mtime, $ctime, $size, $content_md5h, $contentParts) {}
        public function submitFile_grlist($hash) {}
        public function submitFile_section($hash) {}
        public function removeOldIndexedFiles($phash) {}
        public function checkMtimeTstamp($mtime, $phash) {}
        /**
         * Check content hash in phash table
         *
         * @return mixed Returns TRUE if the page needs to be indexed (that is, there was no result), otherwise the phash value (in an array) of the phash record to which the grlist_record should be related!
         */
        public function checkContentHash() {}
        public function checkExternalDocContentHash($hashGr, $content_md5h) {}
        public function is_grlist_set($phash_x) {}
        public function update_grlist($phash, $phash_x) {}
        public function updateTstamp($phash, $mtime = 0) {}
        public function updateSetId($phash) {}
        public function updateParsetime($phash, $parsetime) {}
        /**
         * Update section rootline for the page
         */
        public function updateRootline() {}
        public function getRootLineFields(array $fieldArray) {}
        public function checkWordList($wordListArray) {}
        public function submitWords($wordList, $phash) {}
        public function freqMap($freq) {}
        /**
         * Get search hash, T3 pages
         */
        public function setT3Hashes() {}
        public function setExtHashes($file, $subinfo = [ ]) {}
        public function log_push($msg, $key) {}
        /**
         * Pull function wrapper for TT logging
         */
        public function log_pull() {}
        public function log_setTSlogMessage($msg, $errorNum = 0) {}
        protected function addSpacesToKeywordList($keywordList) {}
    }

}

namespace TYPO3\CMS\IndexedSearch\Example {
    /**
     * Index search frontend - EXAMPLE hook for alternative searching / display etc.
     * Hooks are configured in ext_localconf.php as key => hook-reference pairs in $TYPO3_CONF_VARS['EXTCONF']['indexed_search']['pi1_hooks']. See example in ext_localconf.php for "indexed_search"
     * Each hook must have an entry, the key must match the hook-key in class.tx_indexed_search.php and generally the key equals the function name in the hook object (a convension used)
     */
    class PluginHook {
        /**
         * Is set to a reference to the parent object, "pi1/class.indexedsearch.php"
         *
         * @var \TYPO3\CMS\IndexedSearch\Controller\SearchFormController
         */
        public $pObj;

        /**
         * EXAMPLE of how you can post process the initialized values in the frontend plugin.
         * The example reverses the order of elements in the ranking selector box. You can modify other values like this or add / remove items.
         *
         * This hook is activated by this key / value pair in ext_localconf.php
         * 'initialize_postProc' => \TYPO3\CMS\IndexedSearch\Example\PluginHook::class,
         */
        public function initialize_postProc() {}
        public function getDisplayResults_postProc(array $result) : array {}
        public function getResultRows($sWArr) {}
        public function prepareResultRowTemplateData_postProc($tmplContent, $row, $headerOnly) {}
    }

    /**
     * Index search crawler hook example
     */
    class CrawlerHook {
        /**
         * Function is called when an indexing session starts according to the time intervals set for the indexing configuration.
         *
         * @return string Return a text string for the first, initiating queue entry for the crawler.
         */
        public function initMessage() {}
/** @var Indexer $indexerObj */
        public function indexOperation(/** @var Indexer $indexerObj */
$cfgRec, /** @var Indexer $indexerObj */
$session_data, /** @var Indexer $indexerObj */
$params, /** @var Indexer $indexerObj */
$pObj) {}
    }

}

namespace TYPO3\CMS\IndexedSearch\ViewHelpers {
    /**
     * renders the header of the results page
     * @internal
     */
    class PageBrowsingResultsViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Page browser for indexed search, and only useful here, as the
     * regular pagebrowser
     * so this is a cleaner "pi_browsebox" but not a real page browser
     * functionality
     * @internal
     */
    class PageBrowsingViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;
        /**
         * @var string
         */
        static protected $prefixId;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
        protected static function makecurrentPageSelector_link($str, $p, $freeIndexUid) {}
    }

}

namespace TYPO3\CMS\IndexedSearch\ViewHelpers\Format {
    /**
     * FlagValue viewhelper
     */
    class FlagValueViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Sets up the needed arguments for this View Helper.
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * Group list viewhelper
     */
    class GroupListViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * Initialize arguments
         */
        public function initializeArguments() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

    /**
     * DateTime viewhelper
     */
    class DateTimeViewHelper extends \typo3fluid\fluid\core\viewhelper\abstractviewhelper {
    use \typo3fluid\fluid\core\viewhelper\traits\compilewithrenderstatic;

        /**
         * The rendered children are fed into data() function, which expects an integer.
         * It reduces overhead and is safe to disable children escaping here.
         *
         * @var bool
         */
        protected $escapeChildren;

        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\IndexedSearch\Controller {
    /**
     * Index search frontend
     *
     * Creates a search form for indexed search. Indexing must be enabled
     * for this to make sense.
     */
    class SearchController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * previously known as $this->piVars['sword']
         *
         * @var string
         */
        protected $sword;
        /**
         * @var array
         */
        protected $searchWords;
        /**
         * @var array
         */
        protected $searchData;
        /**
         * This is the id of the site root.
         * This value may be a comma separated list of integer (prepared for this)
         * Root-page PIDs to search in (rl0 field where clause, see initialize() function)
         *
         * If this value is set to less than zero (eg. -1) searching will happen
         * in ALL of the page tree with no regard to branches at all.
         * @var int|string
         */
        protected $searchRootPageIdList;
        /**
         * @var int
         */
        protected $defaultResultNumber;
        /**
         * @var int[]
         */
        protected $availableResultsNumbers;
        /**
         * Search repository
         *
         * @var \TYPO3\CMS\IndexedSearch\Domain\Repository\IndexSearchRepository
         */
        protected $searchRepository;
        /**
         * Lexer object
         *
         * @var \TYPO3\CMS\IndexedSearch\Lexer
         */
        protected $lexerObj;
        /**
         * External parser objects
         * @var array
         */
        protected $externalParsers;
        /**
         * Will hold the first row in result - used to calculate relative hit-ratings.
         *
         * @var array
         */
        protected $firstRow;
        /**
         * sys_domain records
         *
         * @var array
         */
        protected $domainRecords;
        /**
         * Required fe_groups memberships for display of a result.
         *
         * @var array
         */
        protected $requiredFrontendUsergroups;
        /**
         * Page tree sections for search result.
         *
         * @var array
         */
        protected $resultSections;
        /**
         * Caching of page path
         *
         * @var array
         */
        protected $pathCache;
        /**
         * Storage of icons
         *
         * @var array
         */
        protected $iconFileNameCache;
        /**
         * Indexer configuration, coming from TYPO3's system configuration for EXT:indexed_search
         *
         * @var array
         */
        protected $indexerConfig;
        /**
         * Flag whether metaphone search should be enabled
         *
         * @var bool
         */
        protected $enableMetaphoneSearch;
        /**
         * @var \TYPO3\CMS\Core\TypoScript\TypoScriptService
         */
        protected $typoScriptService;
        /**
         * @var CharsetConverter
         */
        protected $charsetConverter;

        public function injectTypoScriptService(\TYPO3\CMS\Core\TypoScript\TypoScriptService $typoScriptService) {}
        public function initialize($searchData = [ ]) {}
        public function searchAction($search = [ ]) {}
        protected function getDisplayResults($searchWords, $resultData, $freeIndexUid = -1) {}
        protected function compileResultRows($resultRows, $freeIndexUid = -1) {}
        protected function compileSingleResultRow($row, $headerOnly = 0) {}
        protected function getSpecialConfigurationForResultRow($row) {}
        protected function makeRating($row) {}
/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
        protected function makeLanguageIndication(/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
$row) {}
/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
        public function makeItemTypeIcon(/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
$imageType, /** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
$alt, /** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
$specRowConf) {}
        protected function makeDescription($row, $noMarkup = false, $length = 180) {}
        protected function markupSWpartsOfString($str) {}
        protected function writeSearchStat($searchParams, $searchWords, $count, $pt) {}
        protected function getSearchWords($defaultOperator) {}
        protected function procSearchWordsByLexer($searchWords) {}
        public function formAction($search = [ ]) {}
        /**
         * TypoScript was not loaded
         */
        public function noTypoScriptAction() {}
        /**
         * get the values for the "type" selector
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableSearchTypeOptions() {}
        /**
         * get the values for the "defaultOperand" selector
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableOperandsOptions() {}
        /**
         * get the values for the "media type" selector
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableMediaTypesOptions() {}
        /**
         * get the values for the "language" selector
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableLanguageOptions() {}
        /**
         * get the values for the "section" selector
         * Here values like "rl1_" and "rl2_" + a rootlevel 1/2 id can be added
         * to perform searches in rootlevel 1+2 specifically. The id-values can even
         * be commaseparated. Eg. "rl1_1,2" would search for stuff inside pages on
         * menu-level 1 which has the uid's 1 and 2.
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableSectionsOptions() {}
        /**
         * get the values for the "freeIndexUid" selector
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableIndexConfigurationsOptions() {}
        /**
         * get the values for the "section" selector
         * Here values like "rl1_" and "rl2_" + a rootlevel 1/2 id can be added
         * to perform searches in rootlevel 1+2 specifically. The id-values can even
         * be commaseparated. Eg. "rl1_1,2" would search for stuff inside pages on
         * menu-level 1 which has the uid's 1 and 2.
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableSortOrderOptions() {}
        /**
         * get the values for the "group" selector
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableGroupOptions() {}
        /**
         * get the values for the "sortDescending" selector
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableSortDescendingOptions() {}
        /**
         * get the values for the "results" selector
         *
         * @return array Associative array with options
         */
        protected function getAllAvailableNumberOfResultsOptions() {}
        protected function removeOptionsFromOptionList($allOptions, $blindOptions) {}
        protected function linkPage($pageUid, $row = [ ], $markUpSwParams = [ ]) {}
        protected function getMenuOfPages($pageUid) {}
        protected function getPathFromPageId($id, $pathMP = '') {}
        protected function getFirstSysDomainRecordForPage($id) {}
        /**
         * simple function to initialize possible external parsers
         * feeds the $this->externalParsers array
         */
        protected function initializeExternalParsers() {}
        protected function hookRequest($functionName) {}
        protected function multiplePagesType($item_type) {}
        /**
         * Load settings and apply stdWrap to them
         */
        protected function loadSettings() {}
        protected function getNumberOfResults($numberOfResults) {}
        protected function preparePageLink(int $pageUid, array $row, array $urlParameters) : array {}
        protected function linkPageATagWrap(string $linkText, array $linkData) : string {}
        public function setSword($sword) {}
        /**
         * Returns the search word
         * @return string
         */
        public function getSword() {}
    }

    /**
     * Administration controller
     */
    class AdministrationController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var AdministrationRepository
         */
        protected $administrationRepository;
        /**
         * @var int Current page id
         */
        protected $pageUid;
        /**
         * @var array External parsers
         */
        protected $external_parsers;
        /**
         * @var array Configuration defined in the Extension Manager
         */
        protected $indexerConfig;
        /**
         * @var bool is metaphone enabled
         */
        protected $enableMetaphoneSearch;
        /**
         * Indexer object
         *
         * @var \TYPO3\CMS\IndexedSearch\Indexer
         */
        protected $indexer;
        /**
         * Backend Template Container
         *
         * @var BackendTemplateView
         */
        protected $defaultViewObjectName;
        /**
         * BackendTemplateContainer
         *
         * @var BackendTemplateView
         */
        protected $view;

/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /**
         * Generates the action menu
         */
        protected function generateMenu() {}
        /**
         * Function will be called before every other action
         */
        public function initializeAction() {}
        public function processRequest(\TYPO3\CMS\Extbase\Mvc\RequestInterface $request, \TYPO3\CMS\Extbase\Mvc\ResponseInterface $response) {}
        public function injectAdministrationRepository(AdministrationRepository $administrationRepository) {}
        /**
         * Index action contains the most important statistics
         */
        public function indexAction() {}
        /**
         * Statistics for pages
         */
        public function pagesAction() {}
        /**
         * Statistics for external documents
         */
        public function externalDocumentsAction() {}
        public function statisticDetailsAction($pageHash = 0) {}
        public function saveStopwordsKeywordsAction($pageHash, $pageId, $stopwords = [ ], $keywords = [ ]) {}
        public function wordDetailAction($id = 0, $pageHash = 0) {}
/** @var \TYPO3\CMS\IndexedSearch\FileContentParser $fileContentParser */
        public function statisticAction(/** @var \TYPO3\CMS\IndexedSearch\FileContentParser $fileContentParser */
$depth = 1, /** @var \TYPO3\CMS\IndexedSearch\FileContentParser $fileContentParser */
$mode = 'overview') {}
        public function deleteIndexedItemAction($id, $depth = 1, $mode = 'overview') {}
        protected function getHref($controller, $action, $parameters = [ ]) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\IndexedSearch\Service {
    /**
     * This service provides the mysql specific changes of the schema definition
     */
    class DatabaseSchemaService {
        public function addMysqlFulltextIndex(array $sqlString) {}
    }

}

namespace TYPO3\CMS\IndexedSearch\Domain\Repository {
    /**
     * Index search abstraction to search through the index
     */
    class IndexSearchRepository {
        /**
         * Indexer object
         *
         * @var Indexer
         */
        protected $indexerObj;
        /**
         * External Parsers
         *
         * @var array
         */
        protected $externalParsers;
        /**
         * Frontend User Group List
         *
         * @var string
         */
        protected $frontendUserGroupList;
        /**
         * Sections
         * formally known as $this->piVars['sections']
         *
         * @var string
         */
        protected $sections;
        /**
         * Search type
         * formally known as $this->piVars['type']
         *
         * @var string
         */
        protected $searchType;
        /**
         * Language uid
         * formally known as $this->piVars['lang']
         *
         * @var int
         */
        protected $languageUid;
        /**
         * Media type
         * formally known as $this->piVars['media']
         *
         * @var int
         */
        protected $mediaType;
        /**
         * Sort order
         * formally known as $this->piVars['sort_order']
         *
         * @var string
         */
        protected $sortOrder;
        /**
         * Descending sort order flag
         * formally known as $this->piVars['desc']
         *
         * @var bool
         */
        protected $descendingSortOrderFlag;
        /**
         * Result page pointer
         * formally known as $this->piVars['pointer']
         *
         * @var int
         */
        protected $resultpagePointer;
        /**
         * Number of results
         * formally known as $this->piVars['result']
         *
         * @var int
         */
        protected $numberOfResults;
        /**
         * list of all root pages that will be used
         * If this value is set to less than zero (eg. -1) searching will happen
         * in ALL of the page tree with no regard to branches at all.
         *
         * @var string
         */
        protected $searchRootPageIdList;
        /**
         * formally known as $conf['search.']['searchSkipExtendToSubpagesChecking']
         * enabled through settings.searchSkipExtendToSubpagesChecking
         *
         * @var bool
         */
        protected $joinPagesForQuery;
        /**
         * Select clauses for individual words, will be filled during the search
         *
         * @var array
         */
        protected $wSelClauses;
        /**
         * Flag for exact search count
         * formally known as $conf['search.']['exactCount']
         *
         * Continue counting and checking of results even if we are sure
         * they are not displayed in this request. This will slow down your
         * page rendering, but it allows precise search result counters.
         * enabled through settings.exactCount
         *
         * @var bool
         */
        protected $useExactCount;
        /**
         * Display forbidden records
         * formally known as $this->conf['show.']['forbiddenRecords']
         *
         * enabled through settings.displayForbiddenRecords
         *
         * @var bool
         */
        protected $displayForbiddenRecords;

        public function initialize($settings, $searchData, $externalParsers, $searchRootPageIdList) {}
        public function doSearch($searchWords, $freeIndexUid = -1) {}
        protected function getResultRows_SQLpointer($searchWords, $freeIndexUid = -1) {}
/** @var TimeTracker $timeTracker */
        protected function getResultRows_SQLpointerMysqlFulltext(/** @var TimeTracker $timeTracker */
$searchWordsArray, /** @var TimeTracker $timeTracker */
$freeIndexUid = -1) {}
/** @var Indexer $indexerObj */
        protected function getSearchString(/** @var Indexer $indexerObj */
$searchWordArray) {}
/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
        protected function execFinalQuery_fulltext(/** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
$searchData, /** @var \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer $cObj */
$freeIndexUid = -1) {}
/**
 * Indexer object
 *
 * @var Indexer
 */
        protected function getPhashList(/**
 * Indexer object
 *
 * @var Indexer
 */
$searchWords) {}
        protected function execPHashListQuery($wordSel, $additionalWhereClause = '') {}
        protected function searchWord($sWord, $wildcard) {}
        protected function searchDistinct($sWord) {}
        protected function searchSentence($sWord) {}
        protected function searchMetaphone($sWord) {}
        /**
         * Returns AND statement for selection of section in database. (rootlevel 0-2 + page_id)
         *
         * @return string AND clause for selection of section in database.
         */
        public function sectionTableWhere() {}
        /**
         * Returns AND statement for selection of media type
         *
         * @return string AND statement for selection of media type
         */
        public function mediaTypeWhere() {}
        /**
         * Returns AND statement for selection of language
         *
         * @return string AND statement for selection of language
         */
        public function languageWhere() {}
        public function freeIndexUidWhere($freeIndexUid) {}
        protected function execFinalQuery($list, $freeIndexUid = -1) {}
        protected function checkResume($row) {}
        protected function getDescendingSortOrderFlag($inverse = false) {}
/** @var \TYPO3\CMS\IndexedSearch\FileContentParser $fileContentParser */
        protected function multiplePagesType(/** @var \TYPO3\CMS\IndexedSearch\FileContentParser $fileContentParser */
$itemType) {}
        protected function md5inthash($str) {}
        protected function isTableUsed($table_list) {}
        public function hookRequest($functionName) {}
        /**
         * Search type
         * e.g. sentence (20), any part of the word (1)
         *
         * @return int
         */
        public function getSearchType() {}
        /**
         * A list of integer which should be root-pages to search from
         *
         * @return int[]
         */
        public function getSearchRootPageIdList() {}
        /**
         * Getter for joinPagesForQuery flag
         * enabled through TypoScript 'settings.skipExtendToSubpagesChecking'
         *
         * @return bool
         */
        public function getJoinPagesForQuery() {}
        /**
         * @return \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController
         */
        protected function getTypoScriptFrontendController() {}
        /**
         * @return TimeTracker
         */
        protected function getTimeTracker() {}
    }

    /**
     * Administration repository
     */
    class AdministrationRepository {
        /**
         * List of fileContentParsers
         *
         * @var FileContentParser[]
         */
        public $external_parsers;
        /**
         * @var array
         */
        protected $allPhashListed;
        /**
         * @var array
         */
        protected $iconFileNameCache;

        public function getGrlistRecord($phash) {}
        public function getNumberOfFulltextRecords($phash) {}
        public function getNumberOfWords($phash) {}
        /**
         * Get statistic of external documents
         *
         * @return array
         */
        public function getExternalDocumentsStatistic() {}
        /**
         * Get count of the tables used for indexed_search
         *
         * @return array
         */
        public function getRecordsNumbers() {}
        /**
         * Get hash types
         *
         * @return array
         */
        public function getPageHashTypes() {}
        protected function countUniqueTypes($itemType) {}
        public function getNumberOfSections($pageHash) {}
        /**
         * Get page statistic
         *
         * @return array
         */
        public function getPageStatistic() {}
        public function getGeneralSearchStatistic($additionalWhere, $pageUid, $max = 50) {}
        protected function addAdditionalInformation(array $row) {}
/** @var PageTreeView $tree */
        public function getTree(/** @var PageTreeView $tree */
$pageId, /** @var PageTreeView $tree */
$depth = 4, /** @var PageTreeView $tree */
$mode) {}
        protected function extGetTreeList($id, $depth, $begin = 0, $perms_clause) {}
/** @var FrontendInterface $pageCache */
        public function removeIndexedPhashRow(/** @var FrontendInterface $pageCache */
$phashList, /** @var FrontendInterface $pageCache */
$pageId, /** @var FrontendInterface $pageCache */
$depth = 4) {}
        public function saveStopWords(array $words) {}
        public function saveKeywords(array $words, $pageId) {}
        protected function makeItemTypeIcon($itemType) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
    }

}

namespace TYPO3\CMS\IndexedSearch\Hook {
    /**
     * Crawler hook for indexed search. Works with the "crawler" extension
     * This hook is specifically used to index external files found on pages through the crawler extension.
     * @see \TYPO3\CMS\IndexedSearch\Indexer::extractLinks()
     */
    class CrawlerFilesHook {
        public function crawler_execute($params, $pObj) {}
    }

    /**
     * Hooks for \TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController (TSFE).
     */
    class TypoScriptFrontendHook {
        public function headerNoCache(array $params, $ref) {}
    }

    /**
     * Crawler hook for indexed search. Works with the "crawler" extension
     */
    class CrawlerHook {
        /**
         * Number of seconds to use as interval between queued indexing operations of URLs / files (types 2 & 3)
         *
         * @var int
         */
        public $secondsPerExternalUrl;
        /**
         * Counts up for each added URL (type 3)
         *
         * @var int
         */
        public $instanceCounter;
        /**
         * @var string
         */
        public $callBack;

        /**
         * The constructor
         */
        public function __construct() {}
        public function crawler_init($pObj) {}
        public function crawler_execute($params, $pObj) {}
        public function crawler_execute_type1($cfgRec, $session_data, $params, $pObj) {}
        public function crawler_execute_type2($cfgRec, $session_data, $params, $pObj) {}
        public function crawler_execute_type3($cfgRec, $session_data, $params, $pObj) {}
        public function crawler_execute_type4($cfgRec, $session_data, $params, $pObj) {}
        /**
         * Look up all old index configurations which are finished and needs to be reset and done
         */
        public function cleanUpOldRunningConfigurations() {}
        public function checkUrl($url, $urlLog, $baseUrl) {}
        public function indexExtUrl($url, $pageId, $rl, $cfgUid, $setId) {}
        public function indexSingleRecord($r, $cfgRec, $rl = null) {}
        public function getUidRootLineForClosestTemplate($id) {}
        public function generateNextIndexingTime($cfgRec) {}
        public function checkDeniedSuburls($url, $url_deny) {}
        public function addQueueEntryForHook($cfgRec, $title) {}
        public function deleteFromIndex($id) {}
        public function processCmdmap_preProcess($command, $table, $id, $value, $pObj) {}
        public function processDatamap_afterDatabaseOperations($status, $table, $id, $fieldArray, $pObj) {}
    }

}

namespace TYPO3\CMS\IndexedSearch\Utility {
    /**
     * Enumeration object for LikeWildcard
     */
    class LikeWildcard extends \typo3\cms\core\type\enumeration {
        const NONE = 0;
        const __default = self::BOTH;
        const BOTH = 3;
        const RIGHT = 2;
        const LEFT = 1;

        public function getLikeQueryPart($tableName, $fieldName, $likeValue) {}
    }

    /**
     * TYPO3: Had to change name to "\TYPO3\CMS\IndexedSearch\Utility\DoubleMetaPhoneUtility" from just "DoubleMetaPhone" because TYPO3 requires a user class to be prefixed so:
     * TYPO3: If you want to use this metaphone method instead of the default in the indexer you can enable it in the extension configuration
     * TYPO3: Of course you can write your own metaphone hook methods by taking this class and configuration as example (also see ext_localconf.php)
     */
    class DoubleMetaPhoneUtility {
        /**
         * @var string
         */
        public $original;
        /**
         * @var string
         */
        public $primary;
        /**
         * @var string
         */
        public $secondary;
        /**
         * @var int
         */
        public $length;
        /**
         * @var int
         */
        public $last;
        /**
         * @var int
         */
        public $current;

        public function metaphone($string, $sys_language_uid = 0) {}
        public function DoubleMetaPhone($string) {}
        public function StringAt($string, $start, $length, $list) {}
        public function IsVowel($string, $pos) {}
        public function SlavoGermanic($string) {}
    }

    /**
     * Class with common methods used across various classes in the indexed search.
     * Impementation is provided by various people from the TYPO3 community.
     */
    class IndexedSearchUtility {
        public static function isTableUsed($tableName) {}
        public static function md5inthash($stringToHash) {}
        public static function getExplodedSearchString($sword, $defaultOperator, $operatorTranslateTable) {}
        protected static function split($origSword, $specchars = '+-', $delchars = '+.,-') {}
        protected static function getOperator($operator, $operatorTranslateTable) {}
    }

}

namespace TYPO3\CMS\IndexedSearch\Tests\Unit {
    /**
     * This class contains unit tests for the indexer
     */
    class IndexerTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Indexer instance
         *
         * @var \PHPUnit_Framework_MockObject_MockObject|\TYPO3\CMS\IndexedSearch\Indexer
         */
        protected $subject;

        /**
         * Sets up the test
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function extractHyperLinksDoesNotReturnNonExistingLocalPath() {}
        /**
         * @test
         */
        public function extractHyperLinksReturnsCorrectFileUsingT3Vars() {}
        /**
         * @test
         */
        public function extractHyperLinksRecurnsCorrectPathWithBaseUrl() {}
        /**
         * @test
         */
        public function extractHyperLinksFindsCorrectPathWithAbsolutePath() {}
        /**
         * @test
         */
        public function extractHyperLinksFindsCorrectPathForPathWithinTypo3Directory() {}
        /**
         * @test
         */
        public function extractHyperLinksFindsCorrectPathUsingAbsRefPrefix() {}
        /**
         * @test
         */
        public function extractBaseHrefExtractsBaseHref() {}
        /**
         * Tests whether indexer can extract content between "TYPO3SEARCH_begin" and "TYPO3SEARCH_end" markers
         *
         * @test
         */
        public function typoSearchTagsRemovesBodyContentOutsideMarkers() {}
        /**
         * Tests whether indexer can extract content between multiple pairs of "TYPO3SEARCH" markers
         *
         * @test
         */
        public function typoSearchTagsHandlesMultipleMarkerPairs() {}
    }

    /**
     * This class contains unit tests for the indexer
     */
    class PluginHookTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var array A backup of registered singleton instances
         */
        protected $singletonInstances;
        /**
         * Indexer instance
         *
         * @var \TYPO3\CMS\IndexedSearch\Example\PluginHook
         */
        protected $subject;

        /**
         * Sets up the test
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getDisplayResults_postProcReturnsTheOriginalSearchResultBecauseOfMissingItems() {}
        /**
         * @test
         */
        public function getDisplayResults_postProcModifiesTheDescriptionInARowOfSearchResult() {}
        /**
         * Tear down the tests
         */
        protected function tearDown() {}
    }

}

namespace TYPO3\CMS\IndexedSearch\Tests\Unit\Utility {
    /**
     * This class contains unit tests for the LikeQueryUtility
     */
    class LikeWildcardTest extends \typo3\testingframework\core\functional\functionaltestcase {
        public function getLikeQueryPart($tableName, $fieldName, $likeValue, $wildcard, $expected) {}
        /**
         * Returns data sets for the test getLikeQueryPart
         * Each dataset is an array with the following elements:
         * - the table name
         * - the field name
         * - the search value
         * - the wildcard mode
         * - the expected result
         *
         * @return array
         */
        public function getLikeQueryPartDataProvider() {}
    }

}

namespace TYPO3\CMS\Sv\Report {
    class ServicesListReport extends \typo3\cms\reports\report\serviceslistreport {}

}

namespace TYPO3\CMS\Reports {
    /**
     * A class representing a certain status
     */
    class Status {
        const NOTICE = -2;
        const INFO = -1;
        const OK = 0;
        const WARNING = 1;
        const ERROR = 2;

        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $value;
        /**
         * @var string
         */
        protected $message;
        /**
         * @var int
         */
        protected $severity;

        public function __construct($title, $value, $message = '', $severity = self::OK) {}
        /**
         * Gets the status' title
         *
         * @return string
         */
        public function getTitle() {}
        /**
         * Gets the status' value
         *
         * @return string
         */
        public function getValue() {}
        /**
         * Gets the status' message (if any)
         *
         * @return string
         */
        public function getMessage() {}
        /**
         * Gets the status' severity
         *
         * @return int
         */
        public function getSeverity() {}
        /**
         * Creates a string representation of a status.
         *
         * @return string String representation of this status.
         */
        public function __toString() {}
    }


    /**
     * Interface for classes which provide a report.
     */
    interface ReportInterface {
        /**
         * Returns the content for a report
         *
         * @return string A reports rendered HTML
         */
        function getReport() ;
    }

    /**
     * Interface for classes which provide a status report entry.
     */
    interface StatusProviderInterface {
        /**
         * Returns the status of an extension or (sub)system
         *
         * @return array An array of \TYPO3\CMS\Reports\Status objects
         */
        function getStatus() ;
    }

    /**
     * Interface for classes which provide a status report entry.
     */
    interface ExtendedStatusProviderInterface {
        /**
         * Returns the detailed status of an extension or (sub)system
         *
         * @return \TYPO3\CMS\Reports\Status[]
         */
        function getDetailedStatus() ;
    }

}

namespace TYPO3\CMS\Reports\ViewHelpers {
    /**
     * Render the icon of a report
     *
     * @internal
     */
    class IconViewHelper extends \typo3\cms\fluid\viewhelpers\be\abstractbackendviewhelper {
        /**
         * As this ViewHelper renders HTML, the output must not be escaped.
         *
         * @var bool
         */
        protected $escapeOutput;

        /**
         * Initializes the arguments
         */
        public function initializeArguments() {}
        /**
         * Renders the icon
         *
         * @return string Content rendered image
         */
        public function render() {}
        public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext) {}
    }

}

namespace TYPO3\CMS\Reports\Controller {
    /**
     * Reports controller
     */
    class ReportController extends \typo3\cms\extbase\mvc\controller\actioncontroller {
        /**
         * @var BackendTemplateView
         */
        protected $view;
        /**
         * BackendTemplateView Container
         *
         * @var BackendTemplateView
         */
        protected $defaultViewObjectName;
        /**
         * Module name for the shortcut
         *
         * @var string
         */
        protected $shortcutName;

        /**
         * Redirect to the saved report
         */
        public function initializeAction() {}
/** @var BackendTemplateView $view */
        protected function initializeView(/** @var BackendTemplateView $view */
ViewInterface $view) {}
        /**
         * Overview
         */
        public function indexAction() {}
        public function detailAction($extension, $report) {}
        /**
         * Generates the menu
         */
        protected function generateMenu() {}
        /**
         * Gets all buttons for the docheader
         */
        protected function generateButtons() {}
        protected function saveState($extension = '', $report = '') {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Reports\Task {
    /**
     * Additional field to set the notification email address(es) for system health
     * issue notifications.
     */
    class SystemStatusUpdateTaskNotificationEmailField implements \typo3\cms\scheduler\additionalfieldproviderinterface {
        /**
         * Additional fields
         *
         * @var array
         */
        protected $fields;
        /**
         * Field prefix.
         *
         * @var string
         */
        protected $fieldPrefix;

        public function getAdditionalFields(array $taskInfo, $task, SchedulerModuleController $schedulerModule) {}
        public function validateAdditionalFields(array $submittedData, SchedulerModuleController $schedulerModule) {}
        public function saveAdditionalFields(array $submittedData, AbstractTask $task) {}
        protected function getFullFieldName($fieldName) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * A task that should be run regularly to determine the system's status.
     */
    class SystemStatusUpdateTask extends \typo3\cms\scheduler\task\abstracttask {
        /**
         * Email addresses to send email notification to in case we find problems with
         * the system.
         *
         * @var string
         */
        protected $notificationEmail;
        /**
         * Checkbox for to send all types of notification, not only problems
         *
         * @var bool
         */
        protected $notificationAll;

        /** @var \TYPO3\CMS\Reports\Report\Status\Status $statusReport */
        public function execute() {}
        /**
         * Gets the notification email addresses.
         *
         * @return string Notification email addresses.
         */
        public function getNotificationEmail() {}
        public function setNotificationEmail($notificationEmail) {}
/** @var MailMessage $mail */
        protected function sendNotificationEmail(/** @var MailMessage $mail */
array $systemStatus) {}
        /**
         * @return bool
         */
        public function getNotificationAll() : bool {}
        public function setNotificationAll(bool $notificationAll) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Reports\Report {
    /**
     * This class provides a report displaying a list of all installed services
     */
    class ServicesListReport implements \typo3\cms\reports\reportinterface {
        /**
         * @var ReportController
         */
        protected $reportsModule;

        public function __construct(ReportController $reportsModule) {}
        /**
         * This method renders the report
         *
         * @return string The status report as HTML
         */
        public function getReport() {}
        /**
         * This method assembles a list of all installed services
         *
         * @return array with data to display
         */
        protected function getServicesList() {}
        protected function getServiceTypeList($serviceType, $services) {}
        protected function getServiceRow($serviceKey, $serviceInformation) {}
        /**
         * This method assembles a list of all defined executables search paths
         *
         * @return array data to display
         */
        protected function getExecutablesSearchPathList() {}
        /**
         * This method filters the $T3_SERVICES global array to return a relevant,
         * ordered list of installed services.
         *
         * Every installed service appears twice in $T3_SERVICES: once as a service key
         * for a given service type, and once a service type all by itself
         * The list of services to display must avoid these duplicates
         *
         * Furthermore, inside each service type, installed services must be
         * ordered by priority and quality
         *
         * @return array List of filtered and ordered services
         */
        protected function getInstalledServices() {}
        protected function sortServices(array $a, array $b) {}
        private function getServicePathStatus($isValid) : array {}
        /**
         * Returns LanguageService
         *
         * @return \TYPO3\CMS\Core\Localization\LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\CMS\Reports\Report\Status {
    /**
     * Performs basic checks about the TYPO3 install
     */
    class Typo3Status implements \typo3\cms\reports\statusproviderinterface {
        /**
         * Returns the status for this report
         *
         * @return array List of statuses
         */
        public function getStatus() {}
        /**
         * List any Xclasses registered in the system
         *
         * @return \TYPO3\CMS\Reports\Status
         */
        protected function getRegisteredXclassStatus() {}
        /**
         * Check for usage of EXT:compatibility7
         *
         * @return \TYPO3\CMS\Reports\Status
         */
        protected function getCompatibility7Status() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Performs some checks about the install tool protection status
     */
    class ConfigurationStatus implements \typo3\cms\reports\statusproviderinterface {
        /**
         * Determines the Install Tool's status, mainly concerning its protection.
         *
         * @return array List of statuses
         */
        public function getStatus() {}
        /**
         * Checks if sys_refindex is empty.
         *
         * @return \TYPO3\CMS\Reports\Status An object representing whether the reference index is empty or not
         */
        protected function getReferenceIndexStatus() {}
        /**
         * Checks whether memcached is configured, if that's the case we assume it's also used.
         *
         * @return bool TRUE if memcached is used, FALSE otherwise.
         */
        protected function isMemcachedUsed() {}
        /**
         * Gets the configured memcached server connections.
         *
         * @return array An array of configured memcached server connections.
         */
        protected function getConfiguredMemcachedServers() {}
        /**
         * Checks whether TYPO3 can connect to the configured memcached servers.
         *
         * @return \TYPO3\CMS\Reports\Status An object representing whether TYPO3 can connect to the configured memcached servers
         */
        protected function getMemcachedConnectionStatus() {}
        /**
         * Warning, if fileCreateMask has write bit for 'others' set.
         *
         * @return \TYPO3\CMS\Reports\Status The writable status for 'others'
         */
        protected function getCreatedFilesWorldWritableStatus() {}
        /**
         * Warning, if folderCreateMask has write bit for 'others' set.
         *
         * @return \TYPO3\CMS\Reports\Status The writable status for 'others'
         */
        protected function getCreatedDirectoriesWorldWritableStatus() {}
        /**
         * Checks if the default connection is a MySQL compatible database instance.
         *
         * @return bool
         */
        protected function isMysqlUsed() {}
        /** @var QueryBuilder $queryBuilder */
        protected function getMysqlDatabaseUtf8Status() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Post processes the warning messages found in about modules.
     */
    class WarningMessagePostProcessor {
/** @var Registry $registry */
        public function displayWarningMessages_postProcess(/** @var Registry $registry */
array $warningMessages) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Performs several checks about the system's health
     */
    class SecurityStatus implements \typo3\cms\reports\statusproviderinterface {
        /**
         * Determines the security of this TYPO3 installation
         *
         * @return \TYPO3\CMS\Reports\Status[] List of statuses
         */
        public function getStatus() {}
        /**
         * Checks if the trusted hosts pattern check is disabled.
         *
         * @return \TYPO3\CMS\Reports\Status An object representing whether the check is disabled
         */
        protected function getTrustedHostsPatternStatus() {}
        /**
         * Checks whether a BE user account named admin with default password exists.
         *
         * @return \TYPO3\CMS\Reports\Status An object representing whether a default admin account exists
         */
        protected function getAdminAccountStatus() {}
        /**
         * Checks if fileDenyPattern was changed which is dangerous on Apache
         *
         * @return \TYPO3\CMS\Reports\Status An object representing whether the file deny pattern has changed
         */
        protected function getFileDenyPatternStatus() {}
        /**
         * Checks if fileDenyPattern allows to upload .htaccess files which is
         * dangerous on Apache.
         *
         * @return \TYPO3\CMS\Reports\Status An object representing whether it's possible to upload .htaccess files
         */
        protected function getHtaccessUploadStatus() {}
        /**
         * Checks whether salted Passwords are configured or not.
         *
         * @return \TYPO3\CMS\Reports\Status An object representing the security of the saltedpassswords extension
         */
        protected function getSaltedPasswordsStatus() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * The status report
     */
    class Status implements \typo3\cms\reports\reportinterface {
        /**
         * @var StatusProviderInterface[][]
         */
        protected $statusProviders;

        /**
         * Constructor for class tx_reports_report_Status
         */
        public function __construct() {}
        /**
         * Takes care of creating / rendering the status report
         *
         * @return string The status report as HTML
         */
        public function getReport() {}
        /**
         * Gets all registered status providers and creates instances of them.
         */
        protected function getStatusProviders() {}
        /**
         * Runs through all status providers and returns all statuses collected.
         *
         * @return \TYPO3\CMS\Reports\Status[]
         */
        public function getSystemStatus() {}
        /**
         * Runs through all status providers and returns all statuses collected, which are detailed.
         *
         * @return \TYPO3\CMS\Reports\Status[]
         */
        public function getDetailedSystemStatus() {}
/** @var ReportStatus $status */
        public function getHighestSeverity(/** @var ReportStatus $status */
array $statusCollection) {}
/** @var ReportStatus $status */
        protected function renderStatus(/** @var ReportStatus $status */
array $statusCollection) {}
        protected function sortStatusProviders(array $statusCollection) {}
/** @var ReportStatus $status */
        protected function sortStatuses(/** @var ReportStatus $status */
array $statusCollection) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Performs several checks about the FAL status
     */
    class FalStatus implements \typo3\cms\reports\statusproviderinterface {
        /**
         * Determines the status of the FAL index.
         *
         * @return array List of statuses
         */
        public function getStatus() {}
        /**
         * Checks if there are files marked as missed.
         *
         * @return \TYPO3\CMS\Reports\Status An object representing whether there are files marked as missed or not
         */
        protected function getMissingFilesStatus() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Performs several checks about the system's health
     */
    class SystemStatus implements \typo3\cms\reports\statusproviderinterface {
        /**
         * Determines the Install Tool's status, mainly concerning its protection.
         *
         * @return array List of statuses
         */
        public function getStatus() {}
        /**
         * Reports whether extensions need additional PHP modules different from standard core requirements
         *
         * @return \TYPO3\CMS\Reports\Status A status of missing PHP modules
         */
        protected function getMissingPhpModulesOfExtensions() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

}

namespace TYPO3\Reports\Tests\Unit\Report {
    /**
     * Test case for class ServicesListReport
     */
    class ServicesListReportTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * @var ServicesListReport
         */
        protected $subject;

        /**
         * SetUp
         */
        public function setUp() {}
        /**
         * @test
         */
        public function getReportCollectsRelevantDataToAssignThemToTemplateForResponse() {}
        /**
         * @return ObjectProphecy
         * @internal param $templatePath
         */
        private function standaloneViewProphecy() : ObjectProphecy {}
        /**
         * @return ObjectProphecy
         */
        private function languageServiceProphecy() : ObjectProphecy {}
        /**
         * @return ObjectProphecy
         */
        private function reportControllerProphecy() : ObjectProphecy {}
    }

}

namespace TYPO3\CMS\Reports\Tests\Unit\Report\Status {
    /**
     * Test case
     */
    class Typo3StatusTest extends \typo3\testingframework\core\unit\unittestcase {
        /**
         * Set up
         */
        protected function setUp() {}
        /**
         * @test
         */
        public function getStatusReturnsXclassStatusObjectWithSeverityOkIfNoXclassExists() {}
        /**
         * @test
         */
        public function getStatusReturnsXclassStatusObjectWithSeverityNoticeIfXclassExists() {}
    }

}

namespace TYPO3\CMS\Recordlist {
    /**
     * Script Class for the Web > List module; rendering the listing of records on a page
     */
    class RecordList {
        /**
         * Page Id for which to make the listing
         *
         * @var int
         */
        public $id;
        /**
         * Pointer - for browsing list of records.
         *
         * @var int
         */
        public $pointer;
        /**
         * Thumbnails or not
         *
         * @var string
         */
        public $imagemode;
        /**
         * Which table to make extended listing for
         *
         * @var string
         */
        public $table;
        /**
         * Search-fields
         *
         * @var string
         */
        public $search_field;
        /**
         * Search-levels
         *
         * @var int
         */
        public $search_levels;
        /**
         * Show-limit
         *
         * @var int
         */
        public $showLimit;
        /**
         * Return URL
         *
         * @var string
         */
        public $returnUrl;
        /**
         * Clear-cache flag - if set, clears page cache for current id.
         *
         * @var bool
         */
        public $clear_cache;
        /**
         * Command: Eg. "delete" or "setCB" (for DataHandler / clipboard operations)
         *
         * @var string
         */
        public $cmd;
        /**
         * Table on which the cmd-action is performed.
         *
         * @var string
         */
        public $cmd_table;
        /**
         * Page select perms clause
         *
         * @var int
         */
        public $perms_clause;
        /**
         * Module TSconfig
         *
         * @var array
         */
        public $modTSconfig;
        /**
         * Current ids page record
         *
         * @var mixed[]|bool
         */
        public $pageinfo;
        /**
         * Document template object
         *
         * @var DocumentTemplate
         */
        public $doc;
        /**
         * Menu configuration
         *
         * @var string[]
         */
        public $MOD_MENU;
        /**
         * Module settings (session variable)
         *
         * @var string[]
         */
        public $MOD_SETTINGS;
        /**
         * Module output accumulation
         *
         * @var string
         */
        public $content;
        /**
         * The name of the module
         *
         * @var string
         */
        protected $moduleName;
        /**
         * @var string
         */
        public $body;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * ModuleTemplate object
         *
         * @var ModuleTemplate
         */
        protected $moduleTemplate;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initializing the module
         */
        public function init() {}
        /**
         * Initialize function menu array
         */
        public function menuConfig() {}
        /**
         * Clears page cache for the current id, $this->id
         */
        public function clearCache() {}
        /**
         * Main function, starting the rendering of the list.
         */
        public function main() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        protected function languageSelector(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
int $id) : string {}
        /**
         * @return ModuleTemplate
         */
        public function getModuleTemplate() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

}

namespace TYPO3\CMS\Recordlist\Tree\View {
    /**
     * This class is a dummy class used for the FileSystemNavigationFrameController
     */
    class DummyLinkParameterProvider implements \typo3\cms\recordlist\tree\view\linkparameterproviderinterface {
        /**
         * @var array
         */
        protected $parameters;
        /**
         * @var string
         */
        protected $thisScript;

        public function __construct(array $parameters, $thisScript) {}
        public function getUrlParameters(array $values) {}
        public function isCurrentlySelectedItem(array $values) {}
        /**
         * Returns the URL of the current script
         *
         * @return string
         */
        public function getScriptUrl() {}
    }

    /**
     * Extension class for the TBE record browser
     */
    class ElementBrowserPageTreeView extends \typo3\cms\backend\tree\view\elementbrowserpagetreeview {
        public function ext_isLinkable($doktype, $uid) {}
        public function wrapTitle($title, $v, $ext_pArrPages = false) {}
    }

    /**
     * Specific page tree for the record link handler.
     */
    class RecordBrowserPageTreeView extends \typo3\cms\backend\tree\view\elementbrowserpagetreeview {
        public function printTree($treeArr = '') {}
        public function wrapTitle($title, $record, $ext_pArrPages = false) {}
        public function ext_isLinkable($doktype, $uid) {}
    }


    interface LinkParameterProviderInterface {
        /**
         * Returns the URL of the current script
         *
         * @return string
         */
        function getScriptUrl() ;
        function getUrlParameters(array $values) ;
        function isCurrentlySelectedItem(array $values) ;
    }

}

namespace TYPO3\CMS\Recordlist\LinkHandler {
    /**
     * Link handler for folder links
     */
    class FolderLinkHandler extends \typo3\cms\recordlist\linkhandler\filelinkhandler {
        /**
         * @var string
         */
        protected $mode;
        /**
         * @var string
         */
        protected $expectedClass;

        protected function getFolderContent(Folder $folder, $extensionList) {}
        /**
         * @return string[] Array of body-tag attributes
         */
        public function getBodyTagAttributes() {}
        protected function renderItem(ResourceInterface $fileOrFolderObject) {}
    }

    /**
     * Link handler for files
     */
    class FileLinkHandler extends \typo3\cms\recordlist\linkhandler\abstractlinkhandler implements \typo3\cms\recordlist\tree\view\linkparameterproviderinterface, \typo3\cms\recordlist\linkhandler\linkhandlerinterface {
        /**
         * Parts of the current link
         *
         * @var array
         */
        protected $linkParts;
        /**
         * @var string
         */
        protected $expectedClass;
        /**
         * @var string
         */
        protected $mode;
        /**
         * @var string
         */
        protected $expandFolder;

        public function canHandleLink(array $linkParts) {}
        /**
         * Format the current link for HTML output
         *
         * @return string
         */
        public function formatCurrentUrl() {}
/** @var ElementBrowserFolderTreeView $folderTree */
        public function render(/** @var ElementBrowserFolderTreeView $folderTree */
ServerRequestInterface $request) {}
        public function expandFolder(Folder $folder, $extensionList = '') {}
/** @var FileExtensionFilter $filter */
        protected function getFolderContent(/** @var FileExtensionFilter $filter */
Folder $folder, /** @var FileExtensionFilter $filter */
$extensionList) {}
        protected function renderItem(ResourceInterface $fileOrFolderObject) {}
        /**
         * @return string[] Array of body-tag attributes
         */
        public function getBodyTagAttributes() {}
        public function getUrlParameters(array $values) {}
        public function isCurrentlySelectedItem(array $values) {}
        /**
         * Returns the URL of the current script
         *
         * @return string
         */
        public function getScriptUrl() {}
        protected function getSelectedFolder($folderIdentifier = '') {}
    }

    /**
     * Link handler for arbitrary database records
     */
    class RecordLinkHandler extends \typo3\cms\recordlist\linkhandler\abstractlinkhandler implements \typo3\cms\recordlist\tree\view\linkparameterproviderinterface, \typo3\cms\recordlist\linkhandler\linkhandlerinterface {
        /**
         * Configuration key in TSconfig TCEMAIN.linkHandler.record
         *
         * @var string
         */
        protected $identifier;
        /**
         * Specific TSconfig for the current instance (corresponds to TCEMAIN.linkHandler.record.identifier.configuration)
         *
         * @var array
         */
        protected $configuration;
        /**
         * Parts of the current link
         *
         * @var array
         */
        protected $linkParts;
        /**
         * @var int
         */
        protected $expandPage;

        public function initialize(AbstractLinkBrowserController $linkBrowser, $identifier, array $configuration) {}
        public function canHandleLink(array $linkParts) : bool {}
        /**
         * Formats information for the current record for HTML output.
         *
         * @return string
         */
        public function formatCurrentUrl() : string {}
        public function render(ServerRequestInterface $request) : string {}
        /**
         * Renders the page tree.
         *
         * @return string
         */
        protected function renderPageTree() : string {}
        /**
         * Returns attributes for the body tag.
         *
         * @return string[] Array of body-tag attributes
         */
        public function getBodyTagAttributes() : array {}
        public function getUrlParameters(array $values) : array {}
        public function isCurrentlySelectedItem(array $values) : bool {}
        /**
         * Returns the URL of the current script
         *
         * @return string
         */
        public function getScriptUrl() : string {}
    }

    /**
     * Link handler for external URLs
     */
    class UrlLinkHandler extends \typo3\cms\recordlist\linkhandler\abstractlinkhandler implements \typo3\cms\recordlist\linkhandler\linkhandlerinterface {
        /**
         * Parts of the current link
         *
         * @var array
         */
        protected $linkParts;
        /**
         * We don't support updates since there is no difference to simply set the link again.
         *
         * @var bool
         */
        protected $updateSupported;

        /**
         * Constructor
         */
        public function __construct() {}
        public function canHandleLink(array $linkParts) {}
        /**
         * Format the current link for HTML output
         *
         * @return string
         */
        public function formatCurrentUrl() {}
        public function render(ServerRequestInterface $request) {}
        /**
         * @return string[] Array of body-tag attributes
         */
        public function getBodyTagAttributes() {}
    }

    /**
     * Link handler for page (and content) links
     */
    class PageLinkHandler extends \typo3\cms\recordlist\linkhandler\abstractlinkhandler implements \typo3\cms\recordlist\tree\view\linkparameterproviderinterface, \typo3\cms\recordlist\linkhandler\linkhandlerinterface {
        /**
         * @var int
         */
        protected $expandPage;
        /**
         * Parts of the current link
         *
         * @var array
         */
        protected $linkParts;

        public function canHandleLink(array $linkParts) {}
        /**
         * Format the current link for HTML output
         *
         * @return string
         */
        public function formatCurrentUrl() {}
/** @var ElementBrowserPageTreeView $pageTree */
        public function render(/** @var ElementBrowserPageTreeView $pageTree */
ServerRequestInterface $request) {}
        protected function getRecordsOnExpandedPage($pageId) {}
        /**
         * Check if a temporary tree mount is set and return a cancel button link
         *
         * @return string the link to cancel the temporary tree mount
         */
        protected function getTemporaryTreeMountCancelNotice() {}
        /**
         * @return string[] Array of body-tag attributes
         */
        public function getBodyTagAttributes() {}
        public function getUrlParameters(array $values) {}
        public function isCurrentlySelectedItem(array $values) {}
        /**
         * Returns the URL of the current script
         *
         * @return string
         */
        public function getScriptUrl() {}
        public function modifyLinkAttributes(array $fieldDefinitions) {}
    }

    /**
     * Base class for link handlers
     *
     * NOTE: This class should only be used internally. Extensions must implement the LinkHandlerInterface.
     */
    abstract class AbstractLinkHandler {
        /**
         * Available additional link attributes
         *
         * 'rel' only works in RTE, still we have to declare support for it.
         *
         * @var string[]
         */
        protected $linkAttributes;
        /**
         * @var bool
         */
        protected $updateSupported;
        /**
         * @var AbstractLinkBrowserController
         */
        protected $linkBrowser;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * @var \TYPO3\CMS\Fluid\View\StandaloneView
         */
        protected $view;

        /**
         * Constructor
         */
        public function __construct() {}
        public function initialize(AbstractLinkBrowserController $linkBrowser, $identifier, array $configuration) {}
        /**
         * @return array
         */
        public function getLinkAttributes() {}
        public function modifyLinkAttributes(array $fieldDefinitions) {}
        /**
         * Return TRUE if the handler supports to update a link.
         *
         * This is useful for e.g. file or page links, when only attributes are changed.
         *
         * @return bool
         */
        public function isUpdateSupported() {}
        /**
         * Sets a DB mount and stores it in the currently defined backend user in her/his uc
         */
        protected function setTemporaryDbMounts() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }

    /**
     * Link handler for email links
     */
    class MailLinkHandler extends \typo3\cms\recordlist\linkhandler\abstractlinkhandler implements \typo3\cms\recordlist\linkhandler\linkhandlerinterface {
        /**
         * Parts of the current link
         *
         * @var array
         */
        protected $linkParts;
        /**
         * We don't support updates since there is no difference to simply set the link again.
         *
         * @var bool
         */
        protected $updateSupported;

        /**
         * Constructor
         */
        public function __construct() {}
        public function canHandleLink(array $linkParts) {}
        /**
         * Format the current link for HTML output
         *
         * @return string
         */
        public function formatCurrentUrl() {}
        public function render(ServerRequestInterface $request) {}
        /**
         * @return string[] Array of body-tag attributes
         */
        public function getBodyTagAttributes() {}
    }


    /**
     * Interface for link handlers displayed in the LinkBrowser
     */
    interface LinkHandlerInterface {
        /**
         * @return array
         */
        function getLinkAttributes() ;
        function modifyLinkAttributes(array $fieldDefinitions) ;
        function initialize(AbstractLinkBrowserController $linkBrowser, $identifier, array $configuration) ;
        function canHandleLink(array $linkParts) ;
        /**
         * Format the current link for HTML output
         *
         * @return string
         */
        function formatCurrentUrl() ;
        function render(ServerRequestInterface $request) ;
        /**
         * Return TRUE if the handler supports to update a link.
         *
         * This is useful for file or page links, when only attributes are changed.
         *
         * @return bool
         */
        function isUpdateSupported() ;
        /**
         * @return string[] Array of body-tag attributes
         */
        function getBodyTagAttributes() ;
    }

}

namespace TYPO3\CMS\Recordlist\Controller {
    /**
     * Script Class, putting the frameset together.
     */
    class ElementBrowserFramesetController {
        /**
         * Internal, dynamic
         *
         * @var string
         */
        public $content;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;

        /**
         * Constructor
         */
        public function __construct() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        /**
         * Main function.
         * Creates the header code in XHTML, the JavaScript, then the frameset for the two frames.
         */
        public function main() {}
        /**
         * @return DocumentTemplate
         */
        protected function getDocumentTemplate() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return PageRenderer
         */
        protected function getPageRenderer() {}
    }

    /**
     * Script class for the Element Browser window.
     */
    class ElementBrowserController {
        /**
         * The mode determines the main kind of output of the element browser.
         *
         * There are these options for values:
         *  - "db" will allow you to browse for pages or records in the page tree for FormEngine select fields
         *  - "file" will allow you to browse for files in the folder mounts for FormEngine file selections
         *  - "folder" will allow you to browse for folders in the folder mounts for FormEngine folder selections
         *  - Other options may be registered via extensions
         *
         * @var string
         */
        protected $mode;
        /**
         * Document template object
         *
         * @var DocumentTemplate
         */
        public $doc;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialize the controller
         */
        protected function init() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function mainAction(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ServerRequestInterface $request, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ResponseInterface $response) {}
        /**
         * Main function, detecting the current mode of the element browser and branching out to internal methods.
         *
         * @return string HTML content
         */
        public function main() {}
        /**
         * Get instance of the actual element browser
         *
         * This method shall be overwritten in subclasses
         *
         * @return ElementBrowserInterface
         * @throws \UnexpectedValueException
         */
        protected function getElementBrowserInstance() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Script class for the Link Browser window.
     */
    abstract class AbstractLinkBrowserController {
        /**
         * @var DocumentTemplate
         */
        protected $doc;
        /**
         * @var array
         */
        protected $parameters;
        /**
         * URL of current request
         *
         * @var string
         */
        protected $thisScript;
        /**
         * @var LinkHandlerInterface[]
         */
        protected $linkHandlers;
        /**
         * All parts of the current link
         *
         * Comprised of url information and additional link parameters.
         *
         * @var string[]
         */
        protected $currentLinkParts;
        /**
         * Link handler responsible for the current active link
         *
         * @var LinkHandlerInterface $currentLinkHandler
         */
        protected $currentLinkHandler;
        /**
         * The ID of the currently active link handler
         *
         * @var string
         */
        protected $currentLinkHandlerId;
        /**
         * Link handler to be displayed
         *
         * @var LinkHandlerInterface $displayedLinkHandler
         */
        protected $displayedLinkHandler;
        /**
         * The ID of the displayed link handler
         *
         * This is read from the 'act' GET parameter
         *
         * @var string
         */
        protected $displayedLinkHandlerId;
        /**
         * List of available link attribute fields
         *
         * @var string[]
         */
        protected $linkAttributeFields;
        /**
         * Values of the link attributes
         *
         * @var string[]
         */
        protected $linkAttributeValues;
        /**
         * @var array
         */
        protected $hookObjects;

        /**
         * Constructor
         */
        public function __construct() {}
        /**
         * Initialize the controller
         */
        protected function init() {}
        /**
         * Initialize hook objects implementing the interface
         *
         * @throws \UnexpectedValueException
         */
        protected function initHookObjects() {}
        public function mainAction(ServerRequestInterface $request, ResponseInterface $response) {}
        protected function determineScriptUrl(ServerRequestInterface $request) {}
        protected function initVariables(ServerRequestInterface $request) {}
        /**
         * @throws \UnexpectedValueException
         */
        protected function loadLinkHandlers() {}
        /**
         * Reads the configured link handlers from page TSconfig
         *
         * @return array
         */
        protected function getLinkHandlers() {}
        /** @var LinkHandlerInterface $handler */
        protected function initCurrentUrl() {}
        /**
         * Initialize document template object
         */
        protected function initDocumentTemplate() {}
        /**
         * Render the currently set URL
         *
         * @return string
         */
        protected function renderCurrentUrl() {}
        /**
         * Returns an array definition of the top menu
         *
         * @return mixed[][]
         */
        protected function buildMenuArray() {}
        /**
         * Get the allowed items or tabs
         *
         * @return string[]
         */
        protected function getAllowedItems() {}
        /**
         * Get the allowed link attributes
         *
         * @return string[]
         */
        protected function getAllowedLinkAttributes() {}
        /**
         * Renders the link attributes for the selected link handler
         *
         * @return string
         */
        public function renderLinkAttributeFields() {}
        /**
         * Create an array of link attribute field rendering definitions
         *
         * @return string[]
         */
        protected function getLinkAttributeFieldDefinitions() {}
        public function getUrlParameters(array $overrides = null) {}
        /**
         * Get attributes for the body tag
         *
         * @return string[] Array of body-tag attributes
         */
        protected function getBodyTagAttributes() {}
        /**
         * Return the ID of current page
         *
         * @return int
         */
        abstract protected function getCurrentPageId() ;
        /**
         * @return array
         */
        public function getParameters() {}
        /**
         * Retrieve the configuration
         *
         * @return array
         */
        public function getConfiguration() {}
        /**
         * @return string
         */
        public function getDisplayedLinkHandlerId() {}
        /**
         * @return string
         */
        public function getScriptUrl() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Recordlist\Browser {
    /**
     * Browser for folders
     */
    class FolderBrowser extends \typo3\cms\recordlist\browser\abstractelementbrowser implements \typo3\cms\recordlist\browser\elementbrowserinterface, \typo3\cms\recordlist\tree\view\linkparameterproviderinterface {
        /**
         * When you click a folder name/expand icon to see the content of a certain file folder,
         * this value will contain the path of the expanded file folder.
         * If the value is NOT set, then it will be restored from the module session data.
         * Example value: "/www/htdocs/typo3/32/3dsplm/fileadmin/css/"
         *
         * @var string|null
         */
        protected $expandFolder;

        /**
         * Adds additional JavaScript modules
         */
        protected function initialize() {}
        /**
         * Checks for an additional request parameter
         */
        protected function initVariables() {}
        public function processSessionData($data) {}
        /**
         * @return string HTML content
         */
        public function render() {}
        protected function renderFolders(Folder $parentFolder) {}
        /**
         * @return string[] Array of body-tag attributes
         */
        protected function getBodyTagAttributes() {}
        public function getUrlParameters(array $values) {}
        public function isCurrentlySelectedItem(array $values) {}
        /**
         * Returns the URL of the current script
         *
         * @return string
         */
        public function getScriptUrl() {}
    }

    /**
     * Extends the DatabaseBrowser for the specific needs of the LinkBrowser.
     *
     * Mostly this is about being able to set to some parameters that cannot
     * be set from outside the DatabaseBrowser.
     */
    class RecordBrowser extends \typo3\cms\recordlist\browser\databasebrowser {
        /**
         * @var array
         */
        protected $urlParameters;

        /**
         * Main initialization
         */
        protected function initialize() {}
        /**
         * Avoid any initialization
         */
        protected function initVariables() {}
        public function displayRecordsForPage(int $selectedPage, string $tables, array $urlParameters) : string {}
        public function getUrlParameters(array $values) : array {}
    }

    /**
     * Showing a page tree and allows you to browse for records
     */
    class DatabaseBrowser extends \typo3\cms\recordlist\browser\abstractelementbrowser implements \typo3\cms\recordlist\tree\view\linkparameterproviderinterface, \typo3\cms\recordlist\browser\elementbrowserinterface {
        /**
         * When you click a page title/expand icon to see the content of a certain page, this
         * value will contain the ID of the expanded page.
         * If the value is NOT set by GET parameter, then it will be restored from the module session data.
         *
         * @var int|null
         */
        protected $expandPage;

        /**
         */
        protected function initialize() {}
        /**
         */
        protected function initVariables() {}
        public function processSessionData($data) {}
        /**
         * @return string HTML content
         */
        public function render() {}
        /**
         * Check if a temporary tree mount is set and return a cancel button
         *
         * @return string HTML code
         */
        protected function getTemporaryTreeMountCancelNotice() {}
        /**
         * If the current Backend User has set a temporary DB mount, it is stored to her/his UC.
         */
        protected function setTemporaryDbMounts() {}
/** @var ElementBrowserRecordList $dbList */
        protected function renderTableRecords(/** @var ElementBrowserRecordList $dbList */
$tables) {}
        /**
         * @return string[] Array of body-tag attributes
         */
        protected function getBodyTagAttributes() {}
        public function getUrlParameters(array $values) {}
        public function isCurrentlySelectedItem(array $values) {}
        /**
         * Returns the URL of the current script
         *
         * @return string
         */
        public function getScriptUrl() {}
    }

    /**
     * Base class for element browsers
     *
     * NOTE: This class should only be used internally. Extensions must implement the ElementBrowserInterface.
     */
    abstract class AbstractElementBrowser {
        /**
         * @var DocumentTemplate
         */
        protected $doc;
        /**
         * @var PageRenderer
         */
        protected $pageRenderer;
        /**
         * URL of current request
         *
         * @var string
         */
        protected $thisScript;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * Active with TYPO3 Element Browser: Contains the name of the form field for which this window
         * opens - thus allows us to make references back to the main window in which the form is.
         * Example value: "data[pages][39][bodytext]|||tt_content|"
         * or "data[tt_content][NEW3fba56fde763d][image]|||gif,jpg,jpeg,tif,bmp,pcx,tga,png,pdf,ai|"
         *
         * Values:
         * 0: form field name reference, eg. "data[tt_content][123][image]"
         * 1: htmlArea RTE parameters: editorNo:contentTypo3Language
         * 2: RTE config parameters: RTEtsConfigParams
         * 3: allowed types. Eg. "tt_content" or "gif,jpg,jpeg,tif,bmp,pcx,tga,png,pdf,ai"
         * 4: IRRE uniqueness: target level object-id to perform actions/checks on, eg. "data[79][tt_address][1][<field>][<foreign_table>]"
         * 5: IRRE uniqueness: name of function in opener window that checks if element is already used, eg. "inline.checkUniqueElement"
         * 6: IRRE uniqueness: name of function in opener window that performs some additional(!) action, eg. "inline.setUniqueElement"
         * 7: IRRE uniqueness: name of function in opener window that performs action instead of using addElement/insertElement, eg. "inline.importElement"
         *
         * $pArr = explode('|', $this->bparams);
         * $formFieldName = $pArr[0];
         * $allowedTablesOrFileTypes = $pArr[3];
         *
         * @var string
         */
        protected $bparams;

        /**
         * Construct
         */
        public function __construct() {}
        /**
         * Main initialization
         */
        protected function initialize() {}
        /**
         * Sets the script url depending on being a module or script request
         */
        protected function determineScriptUrl() {}
        /**
         */
        protected function initVariables() {}
        /**
         * Initialize document template object
         */
        protected function initDocumentTemplate() {}
        /**
         * @return string[] Array of body-tag attributes
         */
        abstract protected function getBodyTagAttributes() ;
        /**
         * Splits parts of $this->bparams and returns needed data attributes for the Javascript
         *
         * @return string[] Data attributes for Javascript
         */
        protected function getBParamDataAttributes() {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

    /**
     * Browser for files
     */
    class FileBrowser extends \typo3\cms\recordlist\browser\abstractelementbrowser implements \typo3\cms\recordlist\tree\view\linkparameterproviderinterface, \typo3\cms\recordlist\browser\elementbrowserinterface {
        /**
         * When you click a folder name/expand icon to see the content of a certain file folder,
         * this value will contain the path of the expanded file folder.
         * If the value is NOT set, then it will be restored from the module session data.
         * Example value: "/www/htdocs/typo3/32/3dsplm/fileadmin/css/"
         *
         * @var string|null
         */
        protected $expandFolder;
        /**
         * @var Folder
         */
        protected $selectedFolder;
        /**
         * Holds information about files
         *
         * @var mixed[][]
         */
        protected $elements;
        /**
         * @var string
         */
        protected $searchWord;
        /**
         * @var FileRepository
         */
        protected $fileRepository;
        /**
         * @var array
         */
        protected $thumbnailConfiguration;

        /**
         * Loads additional JavaScript
         */
        protected function initialize() {}
        /**
         * Checks additional GET/POST requests
         */
        protected function initVariables() {}
        public function processSessionData($data) {}
        /**
         * @return string HTML content
         */
        public function render() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function renderFilesInFolder(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
Folder $folder, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $extensionList = [ ], /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$noThumbs = false) {}
/** @var FileExtensionFilter $filter */
        protected function getFilesInFolder(/** @var FileExtensionFilter $filter */
Folder $folder, /** @var FileExtensionFilter $filter */
array $extensionList) {}
        protected function getBulkSelector($filesCount) {}
        protected function fileIsSelectableInFileList(FileInterface $file, array $imgInfo) {}
        /**
         * @return string[] Array of body-tag attributes
         */
        protected function getBodyTagAttributes() {}
        public function getUrlParameters(array $values) {}
        public function isCurrentlySelectedItem(array $values) {}
        /**
         * Returns the URL of the current script
         *
         * @return string
         */
        public function getScriptUrl() {}
    }


    interface ElementBrowserInterface {
        /**
         * @return string HTML content
         */
        function render() ;
        function processSessionData($data) ;
    }

}

namespace TYPO3\CMS\Recordlist\View {
    /**
     * Renders utility forms used in the views for files/folders of Element and Link Browser
     */
    class FolderUtilityRenderer {
        /**
         * @var LinkParameterProviderInterface
         */
        protected $parameterProvider;

        public function __construct(LinkParameterProviderInterface $parameterProvider) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function createFolder(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
Folder $folderObject) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function uploadForm(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
Folder $folderObject, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
array $allowedExtensions) {}
        public function getFileSearchField($searchWord) {}
        /**
         * @return LanguageService
         */
        protected function getLanguageService() {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUser() {}
    }

}

namespace TYPO3\CMS\Recordlist\RecordList {
    /**
     * Child class for rendering of Web > List (not the final class)
     * Shared between Web>List and Web>Page
     * @see \TYPO3\CMS\Recordlist\RecordList\DatabaseRecordList
     * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
     */
    class AbstractDatabaseRecordList extends \typo3\cms\backend\recordlist\abstractrecordlist {
        /**
         * Specify a list of tables which are the only ones allowed to be displayed.
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $tableList;
        /**
         * Return URL
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $returnUrl;
        /**
         * Thumbnails on records containing files (pictures)
         *
         * @var bool
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $thumbs;
        /**
         * default Max items shown per table in "multi-table mode", may be overridden by tables.php
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $itemsLimitPerTable;
        /**
         * default Max items shown per table in "single-table mode", may be overridden by tables.php
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $itemsLimitSingleTable;
        /**
         * Current script name
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $script;
        /**
         * Indicates if all available fields for a user should be selected or not.
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $allFields;
        /**
         * If set, csvList is outputted.
         *
         * @var bool
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $csvOutput;
        /**
         * Field, to sort list by
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $sortField;
        /**
         * Field, indicating to sort in reverse order.
         *
         * @var bool
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $sortRev;
        /**
         * Containing which fields to display in extended mode
         *
         * @var string[]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $displayFields;
        /**
         * String, can contain the field name from a table which must have duplicate values marked.
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $duplicateField;
        /**
         * Page id
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $id;
        /**
         * Tablename if single-table mode
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $table;
        /**
         * If TRUE, records are listed only if a specific table is selected.
         *
         * @var bool
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $listOnlyInSingleTableMode;
        /**
         * Pointer for browsing list
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $firstElementNumber;
        /**
         * Search string
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $searchString;
        /**
         * Levels to search down.
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $searchLevels;
        /**
         * Number of records to show
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $showLimit;
        /**
         * Page select permissions
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $perms_clause;
        /**
         * Some permissions...
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $calcPerms;
        /**
         * Mode for what happens when a user clicks the title of a record.
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $clickTitleMode;
        /**
         * Shared module configuration, used by localization features
         *
         * @var array
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $modSharedTSconfig;
        /**
         * Loaded with page record with version overlay if any.
         *
         * @var string[]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $pageRecord;
        /**
         * Tables which should not get listed
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $hideTables;
        /**
         * Tables which should not list their translations
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $hideTranslations;
        /**
         * TSconfig which overwrites TCA-Settings
         *
         * @var mixed[][]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $tableTSconfigOverTCA;
        /**
         * Array of collapsed / uncollapsed tables in multi table view
         *
         * @var int[][]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $tablesCollapsed;
        /**
         * JavaScript code accumulation
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $JScode;
        /**
         * HTML output
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $HTMLcode;
        /**
         * "LIMIT " in SQL...
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $iLimit;
        /**
         * Counting the elements no matter what...
         *
         * @var int
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $eCounter;
        /**
         * Set to the total number of items for a table when selecting.
         *
         * @var string
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $totalItems;
        /**
         * Cache for record path
         *
         * @var mixed[]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $recPath_cache;
        /**
         * Fields to display for the current table
         *
         * @var string[]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $setFields;
        /**
         * Used for tracking next/prev uids
         *
         * @var int[][]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $currentTable;
        /**
         * Used for tracking duplicate values of fields
         *
         * @var string[]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $duplicateStack;
        /**
         * @var array[] Module configuration
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public $modTSconfig;
        /**
         * Override/add urlparameters in listUrl() method
         * @var string[]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected $overrideUrlParameters;
        /**
         * Override the page ids taken into account by getPageIdConstraint()
         *
         * @var array
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected $overridePageIdList;
        /**
         * Array with before/after setting for tables
         * Structure:
         * 'tableName' => [
         *    'before' => ['A', ...]
         *    'after' => []
         *  ]
         * @var array[]
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected $tableDisplayOrder;

        public function start($id, $table, $pointer, $search = '', $levels = 0, $showLimit = 0) {}
        /**
         * Traverses the table(s) to be listed and renders the output code for each:
         * The HTML is accumulated in $this->HTMLcode
         * Finishes off with a stopper-gif
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public function generateList() {}
        public function getTable($tableName, $id, $fields = '') {}
/** @var $iconFactory IconFactory */
        public function getSearchBox(/** @var $iconFactory IconFactory */
$formFields = true) {}
        /**
         * Setting the field names to display in extended list.
         * Sets the internal variable $this->setFields
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public function setDispFields() {}
        public function thumbCode($row, $table, $field) {}
        public function getQueryBuilder(string $table, int $pageId, array $additionalConstraints = [ ], array $fields = ['*']) : QueryBuilder {}
        protected function prepareQueryBuilder(string $table, int $pageId, array $fieldList = ['*'], array $additionalConstraints = [ ], QueryBuilder $queryBuilder, bool $addSorting = true) : QueryBuilder {}
        public function setTotalItems(string $table, int $pageId, array $constraints) {}
        public function makeSearchString($table, $currentPid = -1) {}
        protected function getSearchFields($tableName) {}
        public function linkWrapTable($table, $code) {}
        public function linkWrapItems($table, $uid, $code, $row) {}
        public function linkUrlMail($code, $testString) {}
        public function listURL($altId = '', $table = '-1', $exclList = '') {}
        /**
         * Returns "requestUri" - which is basically listURL
         * @return string Content of ->listURL()
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public function requestUri() {}
        public function makeFieldList($table, $dontCheckUser = false, $addDateFields = false) {}
/** @var PageTreeView $tree */
        protected function getSearchableWebmounts(/** @var PageTreeView $tree */
$id, /** @var PageTreeView $tree */
$depth, /** @var PageTreeView $tree */
$perms_clause) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function localizationRedirect(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$justLocalized) {}
        public function setOverrideUrlParameters(array $urlParameters) {}
        public function setTableDisplayOrder(array $orderInformation) {}
        /**
         * @return array
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        public function getOverridePageIdList() : array {}
        public function setOverridePageIdList(array $overridePageIdList) {}
        protected function addPageIdConstraint(string $tableName, QueryBuilder $queryBuilder) : QueryBuilder {}
        protected function logDeprecation(string $index) {}
        /**
         * @return BackendUserAuthentication
         * @deprecated since TYPO3 v9, will be removed in TYPO3 v10
         */
        protected function getBackendUserAuthentication() {}
    }

    /**
     * Class for rendering of Web>List module
     */
    class DatabaseRecordList {
        /**
         * Used to indicate which tables (values in the array) that can have a
         * create-new-record link. If the array is empty, all tables are allowed.
         *
         * @var string[]
         */
        public $allowedNewTables;
        /**
         * Used to indicate which tables (values in the array) that cannot have a
         * create-new-record link. If the array is empty, all tables are allowed.
         *
         * @var string[]
         */
        public $deniedNewTables;
        /**
         * If TRUE, the control panel will contain links to the create-new wizards for
         * pages and tt_content elements (normally, the link goes to just creatinga new
         * element without the wizards!).
         *
         * @var bool
         */
        public $newWizards;
        /**
         * If TRUE, will disable the rendering of clipboard + control panels.
         *
         * @var bool
         */
        public $dontShowClipControlPanels;
        /**
         * If TRUE, will show the clipboard in the field list.
         *
         * @var bool
         */
        public $showClipboard;
        /**
         * If TRUE, will DISABLE all control panels in lists. (Takes precedence)
         *
         * @var bool
         */
        public $noControlPanels;
        /**
         * If TRUE, clickmenus will be rendered
         *
         * @var bool
         */
        public $clickMenuEnabled;
        /**
         * Count of record rows in view
         *
         * @var int
         */
        public $totalRowCount;
        /**
         * Space icon used for alignment
         *
         * @var string
         */
        public $spaceIcon;
        /**
         * Disable single table view
         *
         * @var bool
         */
        public $disableSingleTableView;
        /**
         * Set to the page record (see writeTop())
         *
         * @var string[]
         */
        public $pageRow;
        /**
         * Shared module configuration, used by localization features
         *
         * @var array
         */
        public $modSharedTSconfig;
        /**
         * Contains page translation languages
         *
         * @var array
         */
        public $pageOverlays;
        /**
         * Contains sys language icons and titles
         *
         * @var array
         */
        public $languageIconTitles;
        /**
         * Tables which should not list their translations
         *
         * @var string
         */
        public $hideTranslations;
        /**
         * If set, the listing is returned as CSV instead.
         *
         * @var bool
         */
        public $csvOutput;
        /**
         * Cache for record path
         *
         * @var mixed[]
         */
        public $recPath_cache;
        /**
         * Field, to sort list by
         *
         * @var string
         */
        public $sortField;
        /**
         * default Max items shown per table in "multi-table mode", may be overridden by tables.php
         *
         * @var int
         */
        public $itemsLimitPerTable;
        /**
         * Keys are fieldnames and values are td-parameters to add in addElement(), please use $addElement_tdCSSClass for CSS-classes;
         *
         * @var array
         */
        public $addElement_tdParams;
        /**
         * Page id
         *
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $no_noWrap;
        /**
         * Set to zero, if you don't want a left-margin with addElement function
         *
         * @var int
         */
        public $setLMargin;
        /**
         * Used for tracking duplicate values of fields
         *
         * @var string[]
         */
        public $duplicateStack;
        /**
         * Current script name
         *
         * @var string
         */
        public $script;
        /**
         * If TRUE, records are listed only if a specific table is selected.
         *
         * @var bool
         */
        public $listOnlyInSingleTableMode;
        /**
         * Script URL
         *
         * @var string
         */
        public $thisScript;
        /**
         * JavaScript code accumulation
         *
         * @var string
         */
        public $JScode;
        /**
         * @var TranslationConfigurationProvider
         */
        public $translateTools;
        /**
         * default Max items shown per table in "single-table mode", may be overridden by tables.php
         *
         * @var int
         */
        public $itemsLimitSingleTable;
        /**
         * Array of collapsed / uncollapsed tables in multi table view
         *
         * @var int[][]
         */
        public $tablesCollapsed;
        /**
         * @var array[] Module configuration
         */
        public $modTSconfig;
        /**
         * String with accumulated HTML content
         *
         * @var string
         */
        public $HTMLcode;
        /**
         * Keys are fieldnames and values are td-css-classes to add in addElement();
         *
         * @var array
         */
        public $addElement_tdCssClass;
        /**
         * Thumbnails on records containing files (pictures)
         *
         * @var bool
         */
        public $thumbs;
        /**
         * Used for tracking next/prev uids
         *
         * @var int[][]
         */
        public $currentTable;
        /**
         * Indicates if all available fields for a user should be selected or not.
         *
         * @var int
         */
        public $allFields;
        /**
         * Number of records to show
         *
         * @var int
         */
        public $showLimit;
        /**
         * Decides the columns shown. Filled with values that refers to the keys of the data-array. $this->fieldArray[0] is the title column.
         *
         * @var array
         */
        public $fieldArray;
        /**
         * Tables which should not get listed
         *
         * @var string
         */
        public $hideTables;
        /**
         * Containing which fields to display in extended mode
         *
         * @var string[]
         */
        public $displayFields;
        /**
         * If set this is <td> CSS-classname for odd columns in addElement. Used with db_layout / pages section
         *
         * @var string
         */
        public $oddColumnsCssClass;
        /**
         * Not used in this class - but maybe extension classes...
         * Max length of strings
         *
         * @var int
         */
        public $fixedL;
        /**
         * Page select permissions
         *
         * @var string
         */
        public $perms_clause;
        /**
         * Return URL
         *
         * @var string
         */
        public $returnUrl;
        /**
         * Tablename if single-table mode
         *
         * @var string
         */
        public $table;
        /**
         * Some permissions...
         *
         * @var int
         */
        public $calcPerms;
        /**
         * Mode for what happens when a user clicks the title of a record.
         *
         * @var string
         */
        public $clickTitleMode;
        /**
         * @var int
         */
        public $showIcon;
        /**
         * Levels to search down.
         *
         * @var int
         */
        public $searchLevels;
        /**
         * "LIMIT " in SQL...
         *
         * @var int
         */
        public $iLimit;
        /**
         * Set to the total number of items for a table when selecting.
         *
         * @var string
         */
        public $totalItems;
        /**
         * OBSOLETE - NOT USED ANYMORE. leftMargin
         *
         * @var int
         */
        public $leftMargin;
        /**
         * TSconfig which overwrites TCA-Settings
         *
         * @var mixed[][]
         */
        public $tableTSconfigOverTCA;
        /**
         * Loaded with page record with version overlay if any.
         *
         * @var string[]
         */
        public $pageRecord;
        /**
         * Fields to display for the current table
         *
         * @var string[]
         */
        public $setFields;
        /**
         * Counter increased for each element. Used to index elements for the JavaScript-code that transfers to the clipboard
         *
         * @var int
         */
        public $counter;
        /**
         * Pointer for browsing list
         *
         * @var int
         */
        public $firstElementNumber;
        /**
         * Counting the elements no matter what...
         *
         * @var int
         */
        public $eCounter;
        /**
         * Search string
         *
         * @var string
         */
        public $searchString;
        /**
         * Field, indicating to sort in reverse order.
         *
         * @var bool
         */
        public $sortRev;
        /**
         * String, can contain the field name from a table which must have duplicate values marked.
         *
         * @var string
         */
        public $duplicateField;
        /**
         * Specify a list of tables which are the only ones allowed to be displayed.
         *
         * @var string
         */
        public $tableList;
        /**
         * Used to accumulate CSV lines for CSV export.
         *
         * @var string[]
         */
        protected $csvLines;
        /**
         * Clipboard object
         *
         * @var \TYPO3\CMS\Backend\Clipboard\Clipboard
         */
        public $clipObj;
        /**
         * Tracking names of elements (for clipboard use)
         *
         * @var string[]
         */
        public $CBnames;
        /**
         * [$tablename][$uid] = number of references to this record
         *
         * @var int[][]
         */
        protected $referenceCount;
        /**
         * Translations of the current record
         *
         * @var string[]
         */
        public $translations;
        /**
         * select fields for the query which fetches the translations of the current
         * record
         *
         * @var string
         */
        public $selFieldList;
        /**
         * @var mixed[]
         */
        public $pageinfo;
        /**
         * Injected by RecordList
         *
         * @var string[]
         */
        public $MOD_MENU;
        /**
         * If defined the records are editable
         *
         * @var bool
         */
        protected $editable;
        /**
         * @var IconFactory
         */
        protected $iconFactory;
        /**
         * Array with before/after setting for tables
         * Structure:
         * 'tableName' => [
         *    'before' => ['A', ...]
         *    'after' => []
         *  ]
         *
         * @var array[]
         */
        protected $tableDisplayOrder;
        /**
         * Override the page ids taken into account by getPageIdConstraint()
         *
         * @var array
         */
        protected $overridePageIdList;
        /**
         * Override/add urlparameters in listUrl() method
         * @var string[]
         */
        protected $overrideUrlParameters;
        /**
         * Only used to render translated records, used in list module to show page translations
         *
         * @var bool
         */
        protected $showOnlyTranslatedRecords;

        /**
         * Constructor
         */
        public function __construct() {}
        /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function getButtons() {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function getDocHeaderButtons(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
ModuleTemplate $moduleTemplate) {}
/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
        public function getTable(/** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$table, /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$id, /** @var $defaultFlashMessageQueue \TYPO3\CMS\Core\Messaging\FlashMessageQueue */
$rowList = '') {}
        protected function getOnClickForRow(string $table, array $row) : string {}
        protected function isRowListingConditionFulfilled($table, $row) {}
        public function renderListRow($table, $row, $cc, $titleCol, $thumbsCol, $indent = 0) {}
        protected function getReferenceCount($tableName, $uid) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function renderListHeader(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$currentIdList) {}
        protected function getPointerForPage($page) {}
        protected function renderListNavigation($renderPart = 'top') {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function makeControl(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$table, /** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$row) {}
        public function makeClip($table, $row) {}
        protected function createReferenceHtml($tableName, $uid) {}
        public function makeLocalizationPanel($table, $row) {}
        public function fieldSelectBox($table, $formFields = true) {}
        public function linkClipboardHeaderIcon($string, $table, $cmd, $warning = '', $title = '') {}
        /**
         * Returns TRUE if a numeric clipboard pad is selected/active
         *
         * @return bool
         */
        public function clipNumPane() {}
        public function addSortLink($code, $field, $table) {}
        public function recPath($pid) {}
        public function showNewRecLink($table) {}
        /**
         * Creates the "&returnUrl" parameter for links - this is used when the script links
         * to other scripts and passes its own URL with the link so other scripts can return to the listing again.
         * Uses REQUEST_URI as value.
         *
         * @return string
         */
        public function makeReturnUrl() {}
        /**
         * Initializes internal csvLines array with the header of field names
         */
        protected function initCSV() {}
        /**
         * Add header line with field names as CSV line
         */
        protected function addHeaderRowToCSV() {}
        protected function addToCSV(array $row = [ ]) {}
        protected static function removeControlFieldsFromFieldRow(array $row = [ ]) {}
        public function setCsvRow($csvRow) {}
        public function outputCSV($prefix) {}
        public function addActionToCellGroup($cells, $action, $actionKey) {}
        protected function isRecordCurrentBackendUser($table, $row) {}
        public function setIsEditable($isEditable) {}
        public function isEditable($table) {}
        protected function overlayEditLockPermissions($table, $row = [ ], $editPermission = true) {}
        /**
         * Check whether or not the current backend user is an admin or the current page is
         * locked by editlock.
         *
         * @return bool
         */
        protected function editLockPermissions() {}
        /**
         * @return BaseScriptClass
         */
        protected function getModule() {}
        /**
         * @return DocumentTemplate
         */
        protected function getDocumentTemplate() {}
        public function start($id, $table, $pointer, $search = '', $levels = 0, $showLimit = 0) {}
        /**
         * Traverses the table(s) to be listed and renders the output code for each:
         * The HTML is accumulated in $this->HTMLcode
         * Finishes off with a stopper-gif
         */
        public function generateList() {}
/** @var $iconFactory IconFactory */
        public function getSearchBox(/** @var $iconFactory IconFactory */
$formFields = true) {}
        /**
         * Setting the field names to display in extended list.
         * Sets the internal variable $this->setFields
         */
        public function setDispFields() {}
        public function thumbCode($row, $table, $field) {}
        public function getQueryBuilder(string $table, int $pageId, array $additionalConstraints = [ ], array $fields = ['*']) : QueryBuilder {}
        protected function prepareQueryBuilder(string $table, int $pageId, array $fieldList = ['*'], array $additionalConstraints = [ ], QueryBuilder $queryBuilder, bool $addSorting = true) : QueryBuilder {}
        public function setTotalItems(string $table, int $pageId, array $constraints) {}
        public function makeSearchString($table, $currentPid = -1) {}
        protected function getSearchFields($tableName) {}
        public function linkWrapTable($table, $code) {}
        public function linkWrapItems($table, $uid, $code, $row) {}
        public function linkUrlMail($code, $testString) {}
        public function listURL($altId = '', $table = '-1', $exclList = '') {}
        /**
         * Returns "requestUri" - which is basically listURL
         * @return string Content of ->listURL()
         */
        public function requestUri() {}
        public function makeFieldList($table, $dontCheckUser = false, $addDateFields = false) {}
/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
        public function localizationRedirect(/** @var \TYPO3\CMS\Backend\Routing\UriBuilder $uriBuilder */
$justLocalized) {}
        public function setOverrideUrlParameters(array $urlParameters) {}
        public function setTableDisplayOrder(array $orderInformation) {}
        /**
         * @return array
         */
        public function getOverridePageIdList() : array {}
        public function setOverridePageIdList(array $overridePageIdList) {}
/** @var PageTreeView $tree */
        protected function getSearchableWebmounts(/** @var PageTreeView $tree */
$id, /** @var PageTreeView $tree */
$depth, /** @var PageTreeView $tree */
$perms_clause) {}
        protected function addPageIdConstraint(string $tableName, QueryBuilder $queryBuilder) : QueryBuilder {}
        protected function logDeprecation(string $index) {}
        /**
         * @return BackendUserAuthentication
         */
        protected function getBackendUserAuthentication() {}
        public function addElement($h, $icon, $data, $rowParams = '', $_ = '', $_2 = '', $colType = 'td') {}
        /**
         * Dummy function, used to write the top of a table listing.
         */
        public function writeTop() {}
        public function fwd_rwd_nav($table = '') {}
        public function fwd_rwd_HTML($type, $pointer, $table = '') {}
        /**
         * Returning JavaScript for ClipBoard functionality.
         *
         * @return string
         */
        public function CBfunctions() {}
        /**
         * Initializes page languages and icons
         */
        public function initializeLanguages() {}
        public function languageFlag($sys_language_uid, $addAsAdditionalText = true) {}
        /**
         * Sets the script url depending on being a module or script request
         */
        protected function determineScriptUrl() {}
        /**
         * @return string
         */
        protected function getThisScript() {}
        /**
         * Gets an instance of TranslationConfigurationProvider
         *
         * @return TranslationConfigurationProvider
         */
        protected function getTranslateTools() {}
        protected function generateReferenceToolTip($references, $launchViewParameter = '') {}
        public function showOnlyTranslatedRecords(bool $showOnlyTranslatedRecords) {}
        /**
         * Returns the language service
         * @return LanguageService
         */
        protected function getLanguageService() {}
    }


    /**
     * Interface for classes which hook into \TYPO3\CMS\Recordlist\RecordList\DatabaseRecordList and modify clip-icons
     */
    interface RecordListHookInterface {
        function makeClip($table, $row, $cells, $parentObject) ;
        function makeControl($table, $row, $cells, $parentObject) ;
        function renderListHeader($table, $currentIdList, $headerColumns, $parentObject) ;
        function renderListHeaderActions($table, $currentIdList, $cells, $parentObject) ;
    }

}

namespace TYPO3\CMS\Recordlist\Tests\UnitDeprecated\RecordList {
    /**
     * Test case
     */
    class AbstractDatabaseRecordListTest extends \typo3\testingframework\core\unit\unittestcase {
/** @var AbstractDatabaseRecordList|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
        public function setTableDisplayOrderConvertsStringInput(/** @var AbstractDatabaseRecordList|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
array $input, /** @var AbstractDatabaseRecordList|\PHPUnit_Framework_MockObject_MockObject|\TYPO3\TestingFramework\Core\AccessibleObjectInterface $subject */
array $expected) {}
        /**
         * @return array
         */
        public function setTableDisplayOrderConvertsStringsDataProvider() {}
        /**
         * @test
         */
        public function setTableDisplayOrderThrowsExceptionOnInvalidAfter() {}
        /**
         * @test
         */
        public function setTableDisplayOrderThrowsExceptionOnInvalidBefore() {}
    }

}

?>
