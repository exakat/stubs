<?php
/**
  * Generated by Exakat 2.1.6 (Build 1091)
  * On 2020-08-26T05:54:43+00:00
  * See https://www.exakat.io/
  */

namespace  {
    function twig_raw_filter($string) {}
    function twig_template_from_string(Environment $env, $template, string $name = null) {}
    function twig_cycle($values, $position) {}
    function twig_random(Environment $env, $values = null, $max = null) {}
    function twig_date_format_filter(Environment $env, $date, $format = null, $timezone = null) {}
    function twig_date_modify_filter(Environment $env, $date, $modifier) {}
    function twig_date_converter(Environment $env, $date = null, $timezone = null) {}
    function twig_replace_filter($str, $from) {}
    function twig_round($value, $precision = 0, $method = 'common') {}
    function twig_number_format_filter(Environment $env, $number, $decimal = null, $decimalPoint = null, $thousandSep = null) {}
    function twig_urlencode_filter($url) {}
    function twig_array_merge($arr1, $arr2) {}
    function twig_slice(Environment $env, $item, $start, $length = null, $preserveKeys = false) {}
    function twig_first(Environment $env, $item) {}
    function twig_last(Environment $env, $item) {}
    function twig_join_filter($value, $glue = '', $and = null) {}
    function twig_split_filter(Environment $env, $value, $delimiter, $limit = null) {}
    function _twig_default_filter($value, $default = '') {}
    function twig_get_array_keys_filter($array) {}
    function twig_reverse_filter(Environment $env, $item, $preserveKeys = false) {}
    function twig_sort_filter($array) {}
    function twig_in_filter($value, $compare) {}
    function twig_trim_filter($string, $characterMask = null, $side = 'both') {}
    function twig_spaceless($content) {}
    function twig_escape_filter(Environment $env, $string, $strategy = 'html', $charset = null, $autoescape = false) {}
    function twig_escape_filter_is_safe(Node $filterArgs) {}
    function twig_convert_encoding($string, $to, $from) {}
    function twig_length_filter(Environment $env, $thing) {}
    function twig_upper_filter(Environment $env, $string) {}
    function twig_lower_filter(Environment $env, $string) {}
    function twig_title_string_filter(Environment $env, $string) {}
    function twig_capitalize_string_filter(Environment $env, $string) {}
    function twig_ensure_traversable($seq) {}
    function twig_to_array($seq, $preserveKeys = true) {}
    function twig_test_empty($value) {}
    function twig_test_iterable($value) {}
    function twig_include(Environment $env, $context, $template, $variables = [ ], $withContext = true, $ignoreMissing = false, $sandboxed = false) {}
    function twig_source(Environment $env, $name, $ignoreMissing = false) {}
    function twig_constant($constant, $object = null) {}
    function twig_constant_is_defined($constant, $object = null) {}
    function twig_array_batch($items, $size, $fill = null, $preserveKeys = true) {}
    function twig_get_attribute(Environment $env, Source $source, $object, $item, array $arguments = [ ], $type = 'any', $isDefinedTest = false, $ignoreStrictCheck = false, $sandboxed = false, int $lineno = -1) {}
    function twig_array_column($array, $name) : array {}
    function twig_var_dump(Environment $env, $context, $vars) {}

    /** @deprecated since Twig 2.7, use "Twig\NodeVisitor\AbstractNodeVisitor" instead */
    class Twig_BaseNodeVisitor extends \twig\nodevisitor\abstractnodevisitor {}

    /** @deprecated since Twig 2.7, use "Twig\Node\NodeOutputInterface" instead */
    class Twig_NodeOutputInterface extends \twig\node\nodeoutputinterface {}

    /** @deprecated since Twig 2.7, use "Twig\Node\NodeCaptureInterface" instead */
    class Twig_NodeCaptureInterface extends \twig\node\nodecaptureinterface {}

    /** @deprecated since Twig 2.7, use "Twig\Token" instead */
    class Twig_Token extends \twig\token {}

    /** @deprecated since Twig 2.7, use "Twig\Parser" instead */
    class Twig_Parser extends \twig\parser {}

    /** @deprecated since Twig 2.7, use "Twig\ExpressionParser" instead */
    class Twig_ExpressionParser extends \twig\expressionparser {}

    /** @deprecated since Twig 2.7, use "Twig\Markup" instead */
    class Twig_Markup extends \twig\markup {}

    /** @deprecated since Twig 2.7, use "Twig\TemplateWrapper" instead */
    class Twig_TemplateWrapper extends \twig\templatewrapper {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\ExtensionInterface" instead */
    class Twig_ExtensionInterface extends \twig\extension\extensioninterface {}

    /** @deprecated since Twig 2.7, use "Twig\TwigFunction" instead */
    class Twig_Function extends \twig\twigfunction {}

    /** @deprecated since Twig 2.7, use "Twig\Cache\CacheInterface" instead */
    class Twig_CacheInterface extends \twig\cache\cacheinterface {}

    /** @deprecated since Twig 2.7, use "Twig\RuntimeLoader\RuntimeLoaderInterface" instead */
    class Twig_RuntimeLoaderInterface extends \twig\runtimeloader\runtimeloaderinterface {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\TokenParserInterface" instead */
    class Twig_TokenParserInterface extends \twig\tokenparser\tokenparserinterface {}

    /** @deprecated since Twig 2.7, use "Twig\Loader\LoaderInterface" instead */
    class Twig_LoaderInterface extends \twig\loader\loaderinterface {}

    /** @deprecated since Twig 2.7, use "Twig\TwigFunction" instead */
    final class Twig_SimpleFunction extends \twig\twigfunction {}

    /** @deprecated since Twig 2.7, use "Twig\Loader\SourceContextLoaderInterface" instead */
    class Twig_SourceContextLoaderInterface extends \twig\loader\sourcecontextloaderinterface {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Node" instead */
    class Twig_Node extends \twig\node\node {}

    /** @deprecated since Twig 2.7, use "Twig\TwigTest" instead */
    class Twig_Test extends \twig\twigtest {}

    /** @deprecated since Twig 2.7, use "Twig\Error\Error" instead */
    class Twig_Error extends \twig\error\error {}

    /** @deprecated since Twig 2.7, use "Twig\RuntimeLoader\FactoryRuntimeLoader" instead */
    class Twig_FactoryRuntimeLoader extends \twig\runtimeloader\factoryruntimeloader {}

    /** @deprecated since Twig 2.7, use "Twig\Loader\ExistsLoaderInterface" instead */
    class Twig_ExistsLoaderInterface extends \twig\loader\existsloaderinterface {}

    /** @deprecated since Twig 2.7, use "Twig\TwigTest" instead */
    final class Twig_SimpleTest extends \twig\twigtest {}

    /** @deprecated since Twig 2.7, use "Twig\TwigFilter" instead */
    class Twig_Filter extends \twig\twigfilter {}

    /** @deprecated since Twig 2.7, use "Twig\Lexer" instead */
    class Twig_Lexer extends \twig\lexer {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\AbstractTokenParser" instead */
    class Twig_TokenParser extends \twig\tokenparser\abstracttokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\ExtensionSet" instead */
    class Twig_ExtensionSet extends \twig\extensionset {}

    /** @deprecated since Twig 2.7, use "Twig\FileExtensionEscapingStrategy" instead */
    class Twig_FileExtensionEscapingStrategy extends \twig\fileextensionescapingstrategy {}

    /** @deprecated since Twig 2.7, use "Twig\Source" instead */
    class Twig_Source extends \twig\source {}

    /** @deprecated since Twig 2.7, use "Twig\RuntimeLoader\ContainerRuntimeLoader" instead */
    class Twig_ContainerRuntimeLoader extends \twig\runtimeloader\containerruntimeloader {}

    /** @deprecated since Twig 2.7, use "Twig\Template" instead */
    class Twig_Template extends \twig\template {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\AbstractExtension" instead */
    class Twig_Extension extends \twig\extension\abstractextension {}

    /** @deprecated since Twig 2.7, use "Twig\NodeTraverser" instead */
    class Twig_NodeTraverser extends \twig\nodetraverser {}

    /** @deprecated since Twig 2.7, use "Twig\NodeVisitor\NodeVisitorInterface" instead */
    class Twig_NodeVisitorInterface extends \twig\nodevisitor\nodevisitorinterface {}

    /** @deprecated since Twig 2.7, use "Twig\Compiler" instead */
    class Twig_Compiler extends \twig\compiler {}

    /** @deprecated since Twig 2.7, use "Twig\TwigFilter" instead */
    final class Twig_SimpleFilter extends \twig\twigfilter {}

    /** @deprecated since Twig 2.7, use "Twig\Environment" instead */
    class Twig_Environment extends \twig\environment {}

    /** @deprecated since Twig 2.7, use "Twig\TokenStream" instead */
    class Twig_TokenStream extends \twig\tokenstream {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\InitRuntimeInterface" instead */
    class Twig_Extension_InitRuntimeInterface extends \twig\extension\initruntimeinterface {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\EscaperExtension" instead */
    class Twig_Extension_Escaper extends \twig\extension\escaperextension {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\DebugExtension" instead */
    class Twig_Extension_Debug extends \twig\extension\debugextension {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\StringLoaderExtension" instead */
    class Twig_Extension_StringLoader extends \twig\extension\stringloaderextension {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\SandboxExtension" instead */
    class Twig_Extension_Sandbox extends \twig\extension\sandboxextension {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\OptimizerExtension" instead */
    class Twig_Extension_Optimizer extends \twig\extension\optimizerextension {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\StagingExtension" instead */
    class Twig_Extension_Staging extends \twig\extension\stagingextension {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\GlobalsInterface" instead */
    class Twig_Extension_GlobalsInterface extends \twig\extension\globalsinterface {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\ProfilerExtension" instead */
    class Twig_Extension_Profiler extends \twig\extension\profilerextension {}

    /** @deprecated since Twig 2.7, use "Twig\Extension\CoreExtension" instead */
    class Twig_Extension_Core extends \twig\extension\coreextension {}

    /** @deprecated since Twig 2.7, use "Twig\Cache\FilesystemCache" instead */
    class Twig_Cache_Filesystem extends \twig\cache\filesystemcache {}

    /** @deprecated since Twig 2.7, use "Twig\Cache\NullCache" instead */
    class Twig_Cache_Null extends \twig\cache\nullcache {}

    /** @deprecated since Twig 2.7, use "Twig\NodeVisitor\SafeAnalysisNodeVisitor" instead */
    class Twig_NodeVisitor_SafeAnalysis extends \twig\nodevisitor\safeanalysisnodevisitor {}

    /** @deprecated since Twig 2.7, use "Twig\NodeVisitor\EscaperNodeVisitor" instead */
    class Twig_NodeVisitor_Escaper extends \twig\nodevisitor\escapernodevisitor {}

    /** @deprecated since Twig 2.7, use "Twig\NodeVisitor\SandboxNodeVisitor" instead */
    class Twig_NodeVisitor_Sandbox extends \twig\nodevisitor\sandboxnodevisitor {}

    /** @deprecated since Twig 2.7, use "Twig\NodeVisitor\OptimizerNodeVisitor" instead */
    class Twig_NodeVisitor_Optimizer extends \twig\nodevisitor\optimizernodevisitor {}

    /** @deprecated since Twig 2.7, use "Twig\Test\NodeTestCase" instead */
    class Twig_Test_NodeTestCase extends \twig\test\nodetestcase {}

    /** @deprecated since Twig 2.7, use "Twig\Test\IntegrationTestCase" instead */
    class Twig_Test_IntegrationTestCase extends \twig\test\integrationtestcase {}

    /** @deprecated since Twig 2.7, use "Twig\Util\DeprecationCollector" instead */
    class Twig_Util_DeprecationCollector extends \twig\util\deprecationcollector {}

    /** @deprecated since Twig 2.7, use "Twig\Util\TemplateDirIterator" instead */
    class Twig_Util_TemplateDirIterator extends \twig\util\templatediriterator {}

    /** @deprecated since Twig 2.7, use "Twig\Sandbox\SecurityPolicy" instead */
    class Twig_Sandbox_SecurityPolicy extends \twig\sandbox\securitypolicy {}

    /** @deprecated since Twig 2.7, use "Twig\Sandbox\SecurityNotAllowedFunctionError" instead */
    class Twig_Sandbox_SecurityNotAllowedFunctionError extends \twig\sandbox\securitynotallowedfunctionerror {}

    /** @deprecated since Twig 2.7, use "Twig\Sandbox\SecurityNotAllowedMethodError" instead */
    class Twig_Sandbox_SecurityNotAllowedMethodError extends \twig\sandbox\securitynotallowedmethoderror {}

    /** @deprecated since Twig 2.7, use "Twig\Sandbox\SecurityError" instead */
    class Twig_Sandbox_SecurityError extends \twig\sandbox\securityerror {}

    /** @deprecated since Twig 2.7, use "Twig\Sandbox\SecurityPolicyInterface" instead */
    class Twig_Sandbox_SecurityPolicyInterface extends \twig\sandbox\securitypolicyinterface {}

    /** @deprecated since Twig 2.7, use "Twig\Sandbox\SecurityNotAllowedTagError" instead */
    class Twig_Sandbox_SecurityNotAllowedTagError extends \twig\sandbox\securitynotallowedtagerror {}

    /** @deprecated since Twig 2.7, use "Twig\Sandbox\SecurityNotAllowedFilterError" instead */
    class Twig_Sandbox_SecurityNotAllowedFilterError extends \twig\sandbox\securitynotallowedfiltererror {}

    /** @deprecated since Twig 2.7, use "Twig\Sandbox\SecurityNotAllowedPropertyError" instead */
    class Twig_Sandbox_SecurityNotAllowedPropertyError extends \twig\sandbox\securitynotallowedpropertyerror {}

    /** @deprecated since Twig 2.7, use "Twig\Loader\ChainLoader" instead */
    class Twig_Loader_Chain extends \twig\loader\chainloader {}

    /** @deprecated since Twig 2.7, use "Twig\Loader\FilesystemLoader" instead */
    class Twig_Loader_Filesystem extends \twig\loader\filesystemloader {}

    /** @deprecated since Twig 2.7, use "Twig\Loader\ArrayLoader" instead */
    class Twig_Loader_Array extends \twig\loader\arrayloader {}

    /** @deprecated since Twig 2.7, use "Twig\Profiler\Profile" instead */
    class Twig_Profiler_Profile extends \twig\profiler\profile {}

    /** @deprecated since Twig 2.7, use "Twig\Profiler\NodeVisitor\ProfilerNodeVisitor" instead */
    class Twig_Profiler_NodeVisitor_Profiler extends \twig\profiler\nodevisitor\profilernodevisitor {}

    /** @deprecated since Twig 2.7, use "Twig\Profiler\Node\LeaveProfileNode" instead */
    class Twig_Profiler_Node_LeaveProfile extends \twig\profiler\node\leaveprofilenode {}

    /** @deprecated since Twig 2.7, use "Twig\Profiler\Node\EnterProfileNode" instead */
    class Twig_Profiler_Node_EnterProfile extends \twig\profiler\node\enterprofilenode {}

    /** @deprecated since Twig 2.7, use "Twig\Profiler\Dumper\BlackfireDumper" instead */
    class Twig_Profiler_Dumper_Blackfire extends \twig\profiler\dumper\blackfiredumper {}

    /** @deprecated since Twig 2.7, use "Twig\Profiler\Dumper\HtmlDumper" instead */
    class Twig_Profiler_Dumper_Html extends \twig\profiler\dumper\htmldumper {}

    /** @deprecated since Twig 2.7, use "Twig\Profiler\Dumper\BaseDumper" instead */
    class Twig_Profiler_Dumper_Base extends \twig\profiler\dumper\basedumper {}

    /** @deprecated since Twig 2.7, use "Twig\Profiler\Dumper\TextDumper" instead */
    class Twig_Profiler_Dumper_Text extends \twig\profiler\dumper\textdumper {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\ForTokenParser" instead */
    class Twig_TokenParser_For extends \twig\tokenparser\fortokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\AutoEscapeTokenParser" instead */
    class Twig_TokenParser_AutoEscape extends \twig\tokenparser\autoescapetokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\ImportTokenParser" instead */
    class Twig_TokenParser_Import extends \twig\tokenparser\importtokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\IncludeTokenParser" instead */
    class Twig_TokenParser_Include extends \twig\tokenparser\includetokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\DoTokenParser" instead */
    class Twig_TokenParser_Do extends \twig\tokenparser\dotokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\WithTokenParser" instead */
    class Twig_TokenParser_With extends \twig\tokenparser\withtokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\FromTokenParser" instead */
    class Twig_TokenParser_From extends \twig\tokenparser\fromtokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\ExtendsTokenParser" instead */
    class Twig_TokenParser_Extends extends \twig\tokenparser\extendstokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\UseTokenParser" instead */
    class Twig_TokenParser_Use extends \twig\tokenparser\usetokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\SetTokenParser" instead */
    class Twig_TokenParser_Set extends \twig\tokenparser\settokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\IfTokenParser" instead */
    class Twig_TokenParser_If extends \twig\tokenparser\iftokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\BlockTokenParser" instead */
    class Twig_TokenParser_Block extends \twig\tokenparser\blocktokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\EmbedTokenParser" instead */
    class Twig_TokenParser_Embed extends \twig\tokenparser\embedtokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\SandboxTokenParser" instead */
    class Twig_TokenParser_Sandbox extends \twig\tokenparser\sandboxtokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\SpacelessTokenParser" instead */
    class Twig_TokenParser_Spaceless extends \twig\tokenparser\spacelesstokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\FlushTokenParser" instead */
    class Twig_TokenParser_Flush extends \twig\tokenparser\flushtokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\FilterTokenParser" instead */
    class Twig_TokenParser_Filter extends \twig\tokenparser\filtertokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\DeprecatedTokenParser" instead */
    class Twig_TokenParser_Deprecated extends \twig\tokenparser\deprecatedtokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\TokenParser\MacroTokenParser" instead */
    class Twig_TokenParser_Macro extends \twig\tokenparser\macrotokenparser {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\AbstractExpression" instead */
    class Twig_Node_Expression extends \twig\node\expression\abstractexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\ForNode" instead */
    class Twig_Node_For extends \twig\node\fornode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\AutoEscapeNode" instead */
    class Twig_Node_AutoEscape extends \twig\node\autoescapenode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\CheckSecurityNode" instead */
    class Twig_Node_CheckSecurity extends \twig\node\checksecuritynode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\ImportNode" instead */
    class Twig_Node_Import extends \twig\node\importnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\IncludeNode" instead */
    class Twig_Node_Include extends \twig\node\includenode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\ForLoopNode" instead */
    class Twig_Node_ForLoop extends \twig\node\forloopnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\BodyNode" instead */
    class Twig_Node_Body extends \twig\node\bodynode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\DoNode" instead */
    class Twig_Node_Do extends \twig\node\donode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\WithNode" instead */
    class Twig_Node_With extends \twig\node\withnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\PrintNode" instead */
    class Twig_Node_Print extends \twig\node\printnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\SetNode" instead */
    class Twig_Node_Set extends \twig\node\setnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\IfNode" instead */
    class Twig_Node_If extends \twig\node\ifnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\BlockNode" instead */
    class Twig_Node_Block extends \twig\node\blocknode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\EmbedNode" instead */
    class Twig_Node_Embed extends \twig\node\embednode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\ModuleNode" instead */
    class Twig_Node_Module extends \twig\node\modulenode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\SandboxNode" instead */
    class Twig_Node_Sandbox extends \twig\node\sandboxnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\SpacelessNode" instead */
    class Twig_Node_Spaceless extends \twig\node\spacelessnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\FlushNode" instead */
    class Twig_Node_Flush extends \twig\node\flushnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\BlockReferenceNode" instead */
    class Twig_Node_BlockReference extends \twig\node\blockreferencenode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\TextNode" instead */
    class Twig_Node_Text extends \twig\node\textnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\SandboxedPrintNode" instead */
    class Twig_Node_SandboxedPrint extends \twig\node\sandboxedprintnode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\DeprecatedNode" instead */
    class Twig_Node_Deprecated extends \twig\node\deprecatednode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\MacroNode" instead */
    class Twig_Node_Macro extends \twig\node\macronode {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\ConstantExpression" instead */
    class Twig_Node_Expression_Constant extends \twig\node\expression\constantexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\ArrayExpression" instead */
    class Twig_Node_Expression_Array extends \twig\node\expression\arrayexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\NullCoalesceExpression" instead */
    class Twig_Node_Expression_NullCoalesce extends \twig\node\expression\nullcoalesceexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\FunctionExpression" instead */
    class Twig_Node_Expression_Function extends \twig\node\expression\functionexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\MethodCallExpression" instead */
    class Twig_Node_Expression_MethodCall extends \twig\node\expression\methodcallexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\TestExpression" instead */
    class Twig_Node_Expression_Test extends \twig\node\expression\testexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Unary\AbstractUnary" instead */
    class Twig_Node_Expression_Unary extends \twig\node\expression\unary\abstractunary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\AssignNameExpression" instead */
    class Twig_Node_Expression_AssignName extends \twig\node\expression\assignnameexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\FilterExpression" instead */
    class Twig_Node_Expression_Filter extends \twig\node\expression\filterexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\AbstractBinary" instead */
    class Twig_Node_Expression_Binary extends \twig\node\expression\binary\abstractbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\CallExpression" instead */
    class Twig_Node_Expression_Call extends \twig\node\expression\callexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\BlockReferenceExpression" instead */
    class Twig_Node_Expression_BlockReference extends \twig\node\expression\blockreferenceexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\ParentExpression" instead */
    class Twig_Node_Expression_Parent extends \twig\node\expression\parentexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\NameExpression" instead */
    class Twig_Node_Expression_Name extends \twig\node\expression\nameexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\GetAttrExpression" instead */
    class Twig_Node_Expression_GetAttr extends \twig\node\expression\getattrexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\ConditionalExpression" instead */
    class Twig_Node_Expression_Conditional extends \twig\node\expression\conditionalexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\TempNameExpression" instead */
    class Twig_Node_Expression_TempName extends \twig\node\expression\tempnameexpression {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Unary\NegUnary" instead */
    class Twig_Node_Expression_Unary_Neg extends \twig\node\expression\unary\negunary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Unary\PosUnary" instead */
    class Twig_Node_Expression_Unary_Pos extends \twig\node\expression\unary\posunary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Unary\NotUnary" instead */
    class Twig_Node_Expression_Unary_Not extends \twig\node\expression\unary\notunary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Test\ConstantTest" instead */
    class Twig_Node_Expression_Test_Constant extends \twig\node\expression\test\constanttest {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Test\DefinedTest" instead */
    class Twig_Node_Expression_Test_Defined extends \twig\node\expression\test\definedtest {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Test\SameasTest" instead */
    class Twig_Node_Expression_Test_Sameas extends \twig\node\expression\test\sameastest {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Test\NullTest" instead */
    class Twig_Node_Expression_Test_Null extends \twig\node\expression\test\nulltest {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Test\DivisiblebyTest" instead */
    class Twig_Node_Expression_Test_Divisibleby extends \twig\node\expression\test\divisiblebytest {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Test\EvenTest" instead */
    class Twig_Node_Expression_Test_Even extends \twig\node\expression\test\eventest {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Test\OddTest" instead */
    class Twig_Node_Expression_Test_Odd extends \twig\node\expression\test\oddtest {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\AddBinary" instead */
    class Twig_Node_Expression_Binary_Add extends \twig\node\expression\binary\addbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\LessEqualBinary" instead */
    class Twig_Node_Expression_Binary_LessEqual extends \twig\node\expression\binary\lessequalbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\GreaterBinary" instead */
    class Twig_Node_Expression_Binary_Greater extends \twig\node\expression\binary\greaterbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\SubBinary" instead */
    class Twig_Node_Expression_Binary_Sub extends \twig\node\expression\binary\subbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\InBinary" instead */
    class Twig_Node_Expression_Binary_In extends \twig\node\expression\binary\inbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\AndBinary" instead */
    class Twig_Node_Expression_Binary_And extends \twig\node\expression\binary\andbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\PowerBinary" instead */
    class Twig_Node_Expression_Binary_Power extends \twig\node\expression\binary\powerbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\EqualBinary" instead */
    class Twig_Node_Expression_Binary_Equal extends \twig\node\expression\binary\equalbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\DivBinary" instead */
    class Twig_Node_Expression_Binary_Div extends \twig\node\expression\binary\divbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\ModBinary" instead */
    class Twig_Node_Expression_Binary_Mod extends \twig\node\expression\binary\modbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\BitwiseOrBinary" instead */
    class Twig_Node_Expression_Binary_BitwiseOr extends \twig\node\expression\binary\bitwiseorbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\MatchesBinary" instead */
    class Twig_Node_Expression_Binary_Matches extends \twig\node\expression\binary\matchesbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\MulBinary" instead */
    class Twig_Node_Expression_Binary_Mul extends \twig\node\expression\binary\mulbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\ConcatBinary" instead */
    class Twig_Node_Expression_Binary_Concat extends \twig\node\expression\binary\concatbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\FloorDivBinary" instead */
    class Twig_Node_Expression_Binary_FloorDiv extends \twig\node\expression\binary\floordivbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\LessBinary" instead */
    class Twig_Node_Expression_Binary_Less extends \twig\node\expression\binary\lessbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\StartsWithBinary" instead */
    class Twig_Node_Expression_Binary_StartsWith extends \twig\node\expression\binary\startswithbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\NotInBinary" instead */
    class Twig_Node_Expression_Binary_NotIn extends \twig\node\expression\binary\notinbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\OrBinary" instead */
    class Twig_Node_Expression_Binary_Or extends \twig\node\expression\binary\orbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\RangeBinary" instead */
    class Twig_Node_Expression_Binary_Range extends \twig\node\expression\binary\rangebinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\BitwiseXorBinary" instead */
    class Twig_Node_Expression_Binary_BitwiseXor extends \twig\node\expression\binary\bitwisexorbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\EndsWithBinary" instead */
    class Twig_Node_Expression_Binary_EndsWith extends \twig\node\expression\binary\endswithbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\NotEqualBinary" instead */
    class Twig_Node_Expression_Binary_NotEqual extends \twig\node\expression\binary\notequalbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\GreaterEqualBinary" instead */
    class Twig_Node_Expression_Binary_GreaterEqual extends \twig\node\expression\binary\greaterequalbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Binary\BitwiseAndBinary" instead */
    class Twig_Node_Expression_Binary_BitwiseAnd extends \twig\node\expression\binary\bitwiseandbinary {}

    /** @deprecated since Twig 2.7, use "Twig\Node\Expression\Filter\DefaultFilter" instead */
    class Twig_Node_Expression_Filter_Default extends \twig\node\expression\filter\defaultfilter {}

    /** @deprecated since Twig 2.7, use "Twig\Error\RuntimeError" instead */
    class Twig_Error_Runtime extends \twig\error\runtimeerror {}

    /** @deprecated since Twig 2.7, use "Twig\Error\LoaderError" instead */
    class Twig_Error_Loader extends \twig\error\loadererror {}

    /** @deprecated since Twig 2.7, use "Twig\Error\SyntaxError" instead */
    class Twig_Error_Syntax extends \twig\error\syntaxerror {}

}

namespace Twig {
    /**
     * Represents a Token.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Token {
        const PUNCTUATION_TYPE = 9;
        const INTERPOLATION_START_TYPE = 10;
        const STRING_TYPE = 7;
        const OPERATOR_TYPE = 8;
        const INTERPOLATION_END_TYPE = 11;
        const VAR_START_TYPE = 2;
        const BLOCK_START_TYPE = 1;
        const TEXT_TYPE = 0;
        const EOF_TYPE = -1;
        const NUMBER_TYPE = 6;
        const NAME_TYPE = 5;
        const VAR_END_TYPE = 4;
        const BLOCK_END_TYPE = 3;

        private $value;
        private $type;
        private $lineno;

        public function __construct($type, $value, $lineno) {}
        public function __toString() {}
        public function test($type, $values = null) {}
        /**
         * @return int
         */
        public function getLine() {}
        /**
         * @return int
         */
        public function getType() {}
        /**
         * @return string
         */
        public function getValue() {}
        public static function typeToString($type, $short = false) {}
        public static function typeToEnglish($type) {}
    }

    /**
     * Default parser implementation.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Parser {
        private $stack;
        private $stream;
        private $parent;
        private $handlers;
        private $visitors;
        private $expressionParser;
        private $blocks;
        private $blockStack;
        private $macros;
        private $env;
        private $importedSymbols;
        private $traits;
        private $embeddedTemplates;
        private $varNameSalt;

        public function __construct(Environment $env) {}
        public function getVarName() {}
        public function parse(TokenStream $stream, $test = null, $dropNeedle = false) {}
        public function subparse($test, $dropNeedle = false) {}
        public function getBlockStack() {}
        public function peekBlockStack() {}
        public function popBlockStack() {}
        public function pushBlockStack($name) {}
        public function hasBlock($name) {}
        public function getBlock($name) {}
        public function setBlock($name, BlockNode $value) {}
        public function hasMacro($name) {}
        public function setMacro($name, MacroNode $node) {}
        public function isReservedMacroName($name) {}
        public function addTrait($trait) {}
        public function hasTraits() {}
        public function embedTemplate(ModuleNode $template) {}
        public function addImportedSymbol($type, $alias, $name = null, AbstractExpression $node = null) {}
        public function getImportedSymbol($type, $alias) {}
        public function isMainScope() {}
        public function pushLocalScope() {}
        public function popLocalScope() {}
        /**
         * @return ExpressionParser
         */
        public function getExpressionParser() {}
        public function getParent() {}
        public function setParent($parent) {}
        /**
         * @return TokenStream
         */
        public function getStream() {}
        /**
         * @return Token
         */
        public function getCurrentToken() {}
        private function filterBodyNodes(Node $node, bool $nested = false) {}
    }

    /**
     * Parses expressions.
     *
     * This parser implements a "Precedence climbing" algorithm.
     *
     * @see https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm
     * @see https://en.wikipedia.org/wiki/Operator-precedence_parser
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    class ExpressionParser {
        const OPERATOR_LEFT = 1;
        const OPERATOR_RIGHT = 2;

        private $parser;
        private $env;
        private $unaryOperators;
        private $binaryOperators;

        public function __construct(Parser $parser, Environment $env) {}
        public function parseExpression($precedence = 0) {}
        private function getPrimary() : AbstractExpression {}
        private function parseConditionalExpression($expr) : AbstractExpression {}
        private function isUnary(Token $token) : bool {}
        private function isBinary(Token $token) : bool {}
        public function parsePrimaryExpression() {}
        public function parseStringExpression() {}
        public function parseArrayExpression() {}
        public function parseHashExpression() {}
        public function parsePostfixExpression($node) {}
        public function getFunctionNode($name, $line) {}
        public function parseSubscriptExpression($node) {}
        public function parseFilterExpression($node) {}
        public function parseFilterExpressionRaw($node, $tag = null) {}
        public function parseArguments($namedArguments = false, $definition = false) {}
        public function parseAssignmentExpression() {}
        public function parseMultitargetExpression() {}
        private function parseNotTestExpression(Node $node) : NotUnary {}
        private function parseTestExpression(Node $node) : TestExpression {}
        private function getTest(int $line) : array {}
        private function getTestNodeClass(TwigTest $test) : string {}
        private function getFunctionNodeClass(string $name, int $line) : string {}
        private function getFilterNodeClass(string $name, int $line) : string {}
        private function checkConstantExpression(Node $node) : bool {}
    }

    /**
     * Marks a content as safe.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Markup implements \jsonserializable, \countable {
        private $content;
        private $charset;

        public function __construct($content, $charset) {}
        public function __toString() {}
        public function count() {}
        public function jsonSerialize() {}
    }

    /**
     * Exposes a template to userland.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class TemplateWrapper {
        private $env;
        private $template;

        public function __construct(Environment $env, Template $template) {}
        public function render(array $context = [ ]) : string {}
        public function display(array $context = [ ]) {}
        public function hasBlock(string $name, array $context = [ ]) : bool {}
        public function getBlockNames(array $context = [ ]) : array {}
        public function renderBlock(string $name, array $context = [ ]) : string {}
        public function displayBlock(string $name, array $context = [ ]) {}
        public function getSourceContext() : Source {}
        public function getTemplateName() : string {}
        /**
         * @internal
         *
         * @return Template
         */
        public function unwrap() {}
    }

    /**
     * Represents a template test.
     *
     * @final since Twig 2.4.0
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @see https://twig.symfony.com/doc/templates.html#test-operator
     */
    class TwigTest {
        private $name;
        private $callable;
        private $options;
        private $arguments;

        public function __construct(string $name, $callable = null, array $options = [ ]) {}
        public function getName() {}
        /**
         * Returns the callable to execute for this test.
         *
         * @return callable|null
         */
        public function getCallable() {}
        public function getNodeClass() {}
        public function setArguments($arguments) {}
        public function getArguments() {}
        public function isVariadic() {}
        public function isDeprecated() {}
        public function getDeprecatedVersion() {}
        public function getAlternative() {}
    }

    /**
     * Lexes a template string.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Lexer {
        const STATE_DATA = 0;
        const PUNCTUATION = '()[]{}?:.,|';
        const REGEX_DQ_STRING_PART = '/[^#"\\\\]*(?:(?:\\\\.|#(?!\{))[^#"\\\\]*)*/As';
        const STATE_VAR = 2;
        const STATE_BLOCK = 1;
        const STATE_INTERPOLATION = 4;
        const STATE_STRING = 3;
        const REGEX_NUMBER = '/[0-9]+(?:\.[0-9]+)?/A';
        const REGEX_NAME = '/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/A';
        const REGEX_DQ_STRING_DELIM = '/"/A';
        const REGEX_STRING = '/"([^#"\\\\]*(?:\\\\.[^#"\\\\]*)*)"|\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'/As';

        private $tokens;
        private $code;
        private $cursor;
        private $lineno;
        private $end;
        private $state;
        private $states;
        private $brackets;
        private $env;
        private $source;
        private $options;
        private $regexes;
        private $position;
        private $positions;
        private $currentVarBlockLine;

        public function __construct(Environment $env, array $options = [ ]) {}
        public function tokenize(Source $source) {}
        private function lexData() {}
        private function lexBlock() {}
        private function lexVar() {}
        private function lexExpression() {}
        private function lexRawData() {}
        private function lexComment() {}
        private function lexString() {}
        private function lexInterpolation() {}
        private function pushToken($type, $value = '') {}
        private function moveCursor($text) {}
        private function getOperatorRegex() {}
        private function pushState($state) {}
        private function popState() {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    final class ExtensionSet {
        private $extensions;
        private $initialized;
        private $runtimeInitialized;
        private $staging;
        private $parsers;
        private $visitors;
        private $filters;
        private $tests;
        private $functions;
        private $unaryOperators;
        private $binaryOperators;
        private $globals;
        private $functionCallbacks;
        private $filterCallbacks;
        private $lastModified;

        public function __construct() {}
        public function initRuntime(Environment $env) {}
        public function hasExtension(string $class) : bool {}
        public function getExtension(string $class) : ExtensionInterface {}
        public function setExtensions(array $extensions) {}
        /**
         * @return ExtensionInterface[]
         */
        public function getExtensions() : array {}
        public function getSignature() : string {}
        public function isInitialized() : bool {}
        public function getLastModified() : int {}
        public function addExtension(ExtensionInterface $extension) {}
        public function addFunction(TwigFunction $function) {}
        /**
         * @return TwigFunction[]
         */
        public function getFunctions() : array {}
        public function getFunction(string $name) {}
        public function registerUndefinedFunctionCallback(callable $callable) {}
        public function addFilter(TwigFilter $filter) {}
        /**
         * @return TwigFilter[]
         */
        public function getFilters() : array {}
        public function getFilter(string $name) {}
        public function registerUndefinedFilterCallback(callable $callable) {}
        public function addNodeVisitor(NodeVisitorInterface $visitor) {}
        /**
         * @return NodeVisitorInterface[]
         */
        public function getNodeVisitors() : array {}
        public function addTokenParser(TokenParserInterface $parser) {}
        /**
         * @return TokenParserInterface[]
         */
        public function getTokenParsers() : array {}
        public function getGlobals() : array {}
        public function addTest(TwigTest $test) {}
        /**
         * @return TwigTest[]
         */
        public function getTests() : array {}
        public function getTest(string $name) {}
        public function getUnaryOperators() : array {}
        public function getBinaryOperators() : array {}
        private function initExtensions() {}
        private function initExtension(ExtensionInterface $extension) {}
    }

    /**
     * Default autoescaping strategy based on file names.
     *
     * This strategy sets the HTML as the default autoescaping strategy,
     * but changes it based on the template name.
     *
     * Note that there is no runtime performance impact as the
     * default autoescaping strategy is set at compilation time.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FileExtensionEscapingStrategy {
        public static function guess($name) {}
    }

    /**
     * Holds information about a non-compiled Twig template.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Source {
        private $code;
        private $name;
        private $path;

        public function __construct(string $code, string $name, string $path = '') {}
        public function getCode() : string {}
        public function getName() {}
        public function getPath() : string {}
    }

    /**
     * Default base class for compiled templates.
     *
     * This class is an implementation detail of how template compilation currently
     * works, which might change. It should never be used directly. Use $twig->load()
     * instead, which returns an instance of \Twig\TemplateWrapper.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    abstract class Template {
        const METHOD_CALL = 'method';
        const ANY_CALL = 'any';
        const ARRAY_CALL = 'array';

        protected $parent;
        protected $parents;
        protected $env;
        protected $blocks;
        protected $traits;
        protected $extensions;
        protected $sandbox;

        public function __construct(Environment $env) {}
        /**
         * @internal this method will be removed in 3.0 and is only used internally to provide an upgrade path from 1.x to 2.0
         */
        public function __toString() {}
        /**
         * Returns the template name.
         *
         * @return string The template name
         */
        abstract public function getTemplateName() ;
        /**
         * Returns debug information about the template.
         *
         * @return array Debug information
         */
        abstract public function getDebugInfo() ;
        /**
         * Returns information about the original template source code.
         *
         * @return Source
         */
        public function getSourceContext() {}
        public function getParent(array $context) {}
        protected function doGetParent(array $context) {}
        public function isTraitable() {}
        public function displayParentBlock($name, array $context, array $blocks = [ ]) {}
        public function displayBlock($name, array $context, array $blocks = [ ], $useBlocks = true, self $templateContext = null) {}
        public function renderParentBlock($name, array $context, array $blocks = [ ]) {}
        public function renderBlock($name, array $context, array $blocks = [ ], $useBlocks = true) {}
        public function hasBlock($name, array $context, array $blocks = [ ]) {}
        public function getBlockNames(array $context, array $blocks = [ ]) {}
        protected function loadTemplate($template, $templateName = null, $line = null, $index = null) {}
        /**
         * @internal
         *
         * @return Template
         */
        protected function unwrap() {}
        /**
         * Returns all blocks.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @return array An array of blocks
         */
        public function getBlocks() {}
        public function display(array $context, array $blocks = [ ]) {}
        public function render(array $context) {}
        protected function displayWithErrorHandling(array $context, array $blocks = [ ]) {}
        abstract protected function doDisplay(array $context, array $blocks = [ ]) ;
    }

    /**
     * Represents a template function.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @see https://twig.symfony.com/doc/templates.html#functions
     */
    class TwigFunction {
        private $name;
        private $callable;
        private $options;
        private $arguments;

        public function __construct(string $name, $callable = null, array $options = [ ]) {}
        public function getName() {}
        /**
         * Returns the callable to execute for this function.
         *
         * @return callable|null
         */
        public function getCallable() {}
        public function getNodeClass() {}
        public function setArguments($arguments) {}
        public function getArguments() {}
        public function needsEnvironment() {}
        public function needsContext() {}
        public function getSafe(Node $functionArgs) {}
        public function isVariadic() {}
        public function isDeprecated() {}
        public function getDeprecatedVersion() {}
        public function getAlternative() {}
    }

    /**
     * A node traverser.
     *
     * It visits all nodes and their children and calls the given visitor for each.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class NodeTraverser {
        private $env;
        private $visitors;

        public function __construct(Environment $env, array $visitors = [ ]) {}
        public function addVisitor(NodeVisitorInterface $visitor) {}
        public function traverse(Node $node) : Node {}
        private function traverseForVisitor(NodeVisitorInterface $visitor, Node $node) {}
    }

    /**
     * Compiles a node to PHP code.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Compiler {
        private $lastLine;
        private $source;
        private $indentation;
        private $env;
        private $debugInfo;
        private $sourceOffset;
        private $sourceLine;
        private $varNameSalt;

        public function __construct(Environment $env) {}
        /**
         * Returns the environment instance related to this compiler.
         *
         * @return Environment
         */
        public function getEnvironment() {}
        /**
         * Gets the current PHP code after compilation.
         *
         * @return string The PHP code
         */
        public function getSource() {}
        public function compile(Node $node, $indentation = 0) {}
        public function subcompile(Node $node, $raw = true) {}
        public function raw($string) {}
        public function write($strings) {}
        public function string($value) {}
        public function repr($value) {}
        public function addDebugInfo(Node $node) {}
        public function getDebugInfo() {}
        public function indent($step = 1) {}
        public function outdent($step = 1) {}
        public function getVarName() {}
    }

    /**
     * Stores the Twig configuration.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Environment {
        const RELEASE_VERSION = 0;
        const EXTRA_VERSION = '';
        const VERSION_ID = 20900;
        const VERSION = '2.9.0';
        const MINOR_VERSION = 9;
        const MAJOR_VERSION = 2;

        private $charset;
        private $loader;
        private $debug;
        private $autoReload;
        private $cache;
        private $lexer;
        private $parser;
        private $compiler;
        private $baseTemplateClass;
        private $globals;
        private $resolvedGlobals;
        private $loadedTemplates;
        private $strictVariables;
        private $templateClassPrefix;
        private $originalCache;
        private $extensionSet;
        private $runtimeLoaders;
        private $runtimes;
        private $optionsHash;

        public function __construct(LoaderInterface $loader, $options = [ ]) {}
        /**
         * Gets the base template class for compiled templates.
         *
         * @return string The base template class name
         */
        public function getBaseTemplateClass() {}
        public function setBaseTemplateClass($class) {}
        /**
         * Enables debugging mode.
         */
        public function enableDebug() {}
        /**
         * Disables debugging mode.
         */
        public function disableDebug() {}
        /**
         * Checks if debug mode is enabled.
         *
         * @return bool true if debug mode is enabled, false otherwise
         */
        public function isDebug() {}
        /**
         * Enables the auto_reload option.
         */
        public function enableAutoReload() {}
        /**
         * Disables the auto_reload option.
         */
        public function disableAutoReload() {}
        /**
         * Checks if the auto_reload option is enabled.
         *
         * @return bool true if auto_reload is enabled, false otherwise
         */
        public function isAutoReload() {}
        /**
         * Enables the strict_variables option.
         */
        public function enableStrictVariables() {}
        /**
         * Disables the strict_variables option.
         */
        public function disableStrictVariables() {}
        /**
         * Checks if the strict_variables option is enabled.
         *
         * @return bool true if strict_variables is enabled, false otherwise
         */
        public function isStrictVariables() {}
        public function getCache($original = true) {}
        public function setCache($cache) {}
        public function getTemplateClass($name, $index = null) {}
        public function render($name, array $context = [ ]) {}
        public function display($name, array $context = [ ]) {}
        public function load($name) {}
        public function loadTemplate($name, $index = null) {}
        public function loadClass($cls, $name, $index = null) {}
        public function createTemplate($template, string $name = null) {}
        public function isTemplateFresh($name, $time) {}
        public function resolveTemplate($names) {}
        public function setLexer(Lexer $lexer) {}
        public function tokenize(Source $source) {}
        public function setParser(Parser $parser) {}
        public function parse(TokenStream $stream) {}
        public function setCompiler(Compiler $compiler) {}
        public function compile(Node $node) {}
        public function compileSource(Source $source) {}
        public function setLoader(LoaderInterface $loader) {}
        /**
         * Gets the Loader instance.
         *
         * @return LoaderInterface
         */
        public function getLoader() {}
        public function setCharset($charset) {}
        /**
         * Gets the default template charset.
         *
         * @return string The default charset
         */
        public function getCharset() {}
        public function hasExtension($class) {}
        public function addRuntimeLoader(RuntimeLoaderInterface $loader) {}
        public function getExtension($class) {}
        public function getRuntime($class) {}
        public function addExtension(ExtensionInterface $extension) {}
        public function setExtensions(array $extensions) {}
        /**
         * Returns all registered extensions.
         *
         * @return ExtensionInterface[] An array of extensions (keys are for internal usage only and should not be relied on)
         */
        public function getExtensions() {}
        public function addTokenParser(TokenParserInterface $parser) {}
        /**
         * Gets the registered Token Parsers.
         *
         * @return TokenParserInterface[]
         *
         * @internal
         */
        public function getTokenParsers() {}
        /**
         * Gets registered tags.
         *
         * @return TokenParserInterface[]
         *
         * @internal
         */
        public function getTags() {}
        public function addNodeVisitor(NodeVisitorInterface $visitor) {}
        /**
         * Gets the registered Node Visitors.
         *
         * @return NodeVisitorInterface[]
         *
         * @internal
         */
        public function getNodeVisitors() {}
        public function addFilter(TwigFilter $filter) {}
        public function getFilter($name) {}
        public function registerUndefinedFilterCallback(callable $callable) {}
        /**
         * Gets the registered Filters.
         *
         * Be warned that this method cannot return filters defined with registerUndefinedFilterCallback.
         *
         * @return TwigFilter[]
         *
         * @see registerUndefinedFilterCallback
         *
         * @internal
         */
        public function getFilters() {}
        public function addTest(TwigTest $test) {}
        /**
         * Gets the registered Tests.
         *
         * @return TwigTest[]
         *
         * @internal
         */
        public function getTests() {}
        public function getTest($name) {}
        public function addFunction(TwigFunction $function) {}
        public function getFunction($name) {}
        public function registerUndefinedFunctionCallback(callable $callable) {}
        /**
         * Gets registered functions.
         *
         * Be warned that this method cannot return functions defined with registerUndefinedFunctionCallback.
         *
         * @return TwigFunction[]
         *
         * @see registerUndefinedFunctionCallback
         *
         * @internal
         */
        public function getFunctions() {}
        public function addGlobal($name, $value) {}
        /**
         * Gets the registered Globals.
         *
         * @return array An array of globals
         *
         * @internal
         */
        public function getGlobals() {}
        public function mergeGlobals(array $context) {}
        /**
         * Gets the registered unary Operators.
         *
         * @return array An array of unary operators
         *
         * @internal
         */
        public function getUnaryOperators() {}
        /**
         * Gets the registered binary Operators.
         *
         * @return array An array of binary operators
         *
         * @internal
         */
        public function getBinaryOperators() {}
        private function updateOptionsHash() {}
    }

    /**
     * Represents a template filter.
     *
     * @final since Twig 2.4.0
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @see https://twig.symfony.com/doc/templates.html#filters
     */
    class TwigFilter {
        private $name;
        private $callable;
        private $options;
        private $arguments;

        public function __construct(string $name, $callable = null, array $options = [ ]) {}
        public function getName() {}
        /**
         * Returns the callable to execute for this filter.
         *
         * @return callable|null
         */
        public function getCallable() {}
        public function getNodeClass() {}
        public function setArguments($arguments) {}
        public function getArguments() {}
        public function needsEnvironment() {}
        public function needsContext() {}
        public function getSafe(Node $filterArgs) {}
        public function getPreservesSafety() {}
        public function getPreEscape() {}
        public function isVariadic() {}
        public function isDeprecated() {}
        public function getDeprecatedVersion() {}
        public function getAlternative() {}
    }

    /**
     * Represents a token stream.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class TokenStream {
        private $tokens;
        private $current;
        private $source;

        public function __construct(array $tokens, Source $source = null) {}
        public function __toString() {}
        public function injectTokens(array $tokens) {}
        /**
         * Sets the pointer to the next token and returns the old one.
         */
        public function next() : Token {}
        public function nextIf($primary, $secondary = null) {}
        public function expect($type, $value = null, string $message = null) : Token {}
        public function look(int $number = 1) : Token {}
        public function test($primary, $secondary = null) : bool {}
        /**
         * Checks if end of stream was reached.
         */
        public function isEOF() : bool {}
        public function getCurrent() : Token {}
        /**
         * Gets the source associated with this stream.
         *
         * @internal
         */
        public function getSourceContext() : Source {}
    }

}

namespace Twig\Extension {
    final class EscaperExtension extends \twig\extension\abstractextension {
        private $defaultStrategy;

        public function __construct($defaultStrategy = 'html') {}
        public function getTokenParsers() {}
        public function getNodeVisitors() {}
        public function getFilters() {}
        public function setDefaultStrategy($defaultStrategy) {}
        public function getDefaultStrategy($name) {}
    }

    class ProfilerExtension extends \twig\extension\abstractextension {
        private $actives;

        public function __construct(Profile $profile) {}
        public function enter(Profile $profile) {}
        public function leave(Profile $profile) {}
        public function getNodeVisitors() {}
    }

    /**
     * Used by \Twig\Environment as a staging area.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    final class StagingExtension extends \twig\extension\abstractextension {
        private $functions;
        private $filters;
        private $visitors;
        private $tokenParsers;
        private $tests;

        public function addFunction(TwigFunction $function) {}
        public function getFunctions() {}
        public function addFilter(TwigFilter $filter) {}
        public function getFilters() {}
        public function addNodeVisitor(NodeVisitorInterface $visitor) {}
        public function getNodeVisitors() {}
        public function addTokenParser(TokenParserInterface $parser) {}
        public function getTokenParsers() {}
        public function addTest(TwigTest $test) {}
        public function getTests() {}
    }

    final class StringLoaderExtension extends \twig\extension\abstractextension {
        public function getFunctions() {}
    }

    abstract class AbstractExtension implements \twig\extension\extensioninterface {
        public function getTokenParsers() {}
        public function getNodeVisitors() {}
        public function getFilters() {}
        public function getTests() {}
        public function getFunctions() {}
        public function getOperators() {}
    }

    final class SandboxExtension extends \twig\extension\abstractextension {
        private $sandboxedGlobally;
        private $sandboxed;
        private $policy;

        public function __construct(SecurityPolicyInterface $policy, $sandboxed = false) {}
        public function getTokenParsers() {}
        public function getNodeVisitors() {}
        public function enableSandbox() {}
        public function disableSandbox() {}
        public function isSandboxed() {}
        public function isSandboxedGlobally() {}
        public function setSecurityPolicy(SecurityPolicyInterface $policy) {}
        public function getSecurityPolicy() {}
        public function checkSecurity($tags, $filters, $functions) {}
        public function checkMethodAllowed($obj, $method, int $lineno = -1, Source $source = null) {}
        public function checkPropertyAllowed($obj, $method, int $lineno = -1, Source $source = null) {}
        public function ensureToStringAllowed($obj, int $lineno = -1, Source $source = null) {}
    }

    final class CoreExtension extends \twig\extension\abstractextension {
        private $dateFormats;
        private $numberFormat;
        private $timezone;
        private $escapers;

        public function setEscaper($strategy, callable $callable) {}
        /**
         * Gets all defined escapers.
         *
         * @return callable[] An array of escapers
         */
        public function getEscapers() {}
        public function setDateFormat($format = null, $dateIntervalFormat = null) {}
        /**
         * Gets the default format to be used by the date filter.
         *
         * @return array The default date format string and the default date interval format string
         */
        public function getDateFormat() {}
        public function setTimezone($timezone) {}
        /**
         * Gets the default timezone to be used by the date filter.
         *
         * @return \DateTimeZone The default timezone currently in use
         */
        public function getTimezone() {}
        public function setNumberFormat($decimal, $decimalPoint, $thousandSep) {}
        /**
         * Get the default format used by the number_format filter.
         *
         * @return array The arguments for number_format()
         */
        public function getNumberFormat() {}
        public function getTokenParsers() {}
        public function getFilters() {}
        public function getFunctions() {}
        public function getTests() {}
        public function getOperators() {}
    }

    final class OptimizerExtension extends \twig\extension\abstractextension {
        private $optimizers;

        public function __construct($optimizers = -1) {}
        public function getNodeVisitors() {}
    }

    final class DebugExtension extends \twig\extension\abstractextension {
        public function getFunctions() {}
    }


    /**
     * @author Grégoire Pineau <lyrixx@lyrixx.info>
     */
    interface RuntimeExtensionInterface {}

    /**
     * Enables usage of the deprecated Twig\Extension\AbstractExtension::initRuntime() method.
     *
     * Explicitly implement this interface if you really need to implement the
     * deprecated initRuntime() method in your extensions.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since Twig 2.7, to be removed in 3.0
     */
    interface InitRuntimeInterface {
        function initRuntime(Environment $environment) ;
    }

    /**
     * Interface implemented by extension classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface ExtensionInterface {
        /**
         * Returns the token parser instances to add to the existing list.
         *
         * @return TokenParserInterface[]
         */
        function getTokenParsers() ;
        /**
         * Returns the node visitor instances to add to the existing list.
         *
         * @return NodeVisitorInterface[]
         */
        function getNodeVisitors() ;
        /**
         * Returns a list of filters to add to the existing list.
         *
         * @return TwigFilter[]
         */
        function getFilters() ;
        /**
         * Returns a list of tests to add to the existing list.
         *
         * @return TwigTest[]
         */
        function getTests() ;
        /**
         * Returns a list of functions to add to the existing list.
         *
         * @return TwigFunction[]
         */
        function getFunctions() ;
        /**
         * Returns a list of operators to add to the existing list.
         *
         * @return array<array> First array of unary operators, second array of binary operators
         */
        function getOperators() ;
    }

    /**
     * Enables usage of the deprecated Twig\Extension\AbstractExtension::getGlobals() method.
     *
     * Explicitly implement this interface if you really need to implement the
     * deprecated getGlobals() method in your extensions.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface GlobalsInterface {
        /**
         * Returns a list of global variables to add to the existing list.
         *
         * @return array An array of global variables
         */
        function getGlobals() ;
    }

}

namespace Twig\Cache {
    /**
     * Implements a cache on the filesystem.
     *
     * @author Andrew Tch <andrew@noop.lv>
     */
    class FilesystemCache implements \twig\cache\cacheinterface {
        const FORCE_BYTECODE_INVALIDATION = 1;

        private $directory;
        private $options;

        public function __construct($directory, $options = 0) {}
        public function generateKey($name, $className) {}
        public function load($key) {}
        public function write($key, $content) {}
        public function getTimestamp($key) {}
    }

    /**
     * Implements a no-cache strategy.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class NullCache implements \twig\cache\cacheinterface {
        public function generateKey($name, $className) {}
        public function write($key, $content) {}
        public function load($key) {}
        public function getTimestamp($key) {}
    }


    /**
     * Interface implemented by cache classes.
     *
     * It is highly recommended to always store templates on the filesystem to
     * benefit from the PHP opcode cache. This interface is mostly useful if you
     * need to implement a custom strategy for storing templates on the filesystem.
     *
     * @author Andrew Tch <andrew@noop.lv>
     */
    interface CacheInterface {
        function generateKey($name, $className) ;
        function write($key, $content) ;
        function load($key) ;
        function getTimestamp($key) ;
    }

}

namespace Twig\NodeVisitor {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class EscaperNodeVisitor extends \twig\nodevisitor\abstractnodevisitor {
        private $statusStack;
        private $blocks;
        private $safeAnalysis;
        private $traverser;
        private $defaultStrategy;
        private $safeVars;

        public function __construct() {}
        protected function doEnterNode(Node $node, Environment $env) {}
        protected function doLeaveNode(Node $node, Environment $env) {}
        private function shouldUnwrapConditional(ConditionalExpression $expression, Environment $env, $type) {}
        private function unwrapConditional(ConditionalExpression $expression, Environment $env, $type) {}
        private function escapeInlinePrintNode(InlinePrint $node, Environment $env, $type) {}
        private function escapePrintNode(PrintNode $node, Environment $env, $type) {}
        private function preEscapeFilterNode(FilterExpression $filter, Environment $env) {}
        private function isSafeFor($type, Node $expression, $env) {}
        private function needEscaping(Environment $env) {}
        private function getEscaperFilter(string $type, Node $node) : FilterExpression {}
        public function getPriority() {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class SandboxNodeVisitor extends \twig\nodevisitor\abstractnodevisitor {
        private $inAModule;
        private $tags;
        private $filters;
        private $functions;
        private $needsToStringWrap;

        protected function doEnterNode(Node $node, Environment $env) {}
        protected function doLeaveNode(Node $node, Environment $env) {}
        private function wrapNode(Node $node, string $name) {}
        private function wrapArrayNode(Node $node, string $name) {}
        public function getPriority() {}
    }

    /**
     * Used to make node visitors compatible with Twig 1.x and 2.x.
     *
     * To be removed in Twig 3.1.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractNodeVisitor implements \twig\nodevisitor\nodevisitorinterface {
        public function enterNode(Node $node, Environment $env) {}
        public function leaveNode(Node $node, Environment $env) {}
        abstract protected function doEnterNode(Node $node, Environment $env) ;
        abstract protected function doLeaveNode(Node $node, Environment $env) ;
    }

    /**
     * Tries to optimize the AST.
     *
     * This visitor is always the last registered one.
     *
     * You can configure which optimizations you want to activate via the
     * optimizer mode.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class OptimizerNodeVisitor extends \twig\nodevisitor\abstractnodevisitor {
        const OPTIMIZE_ALL = -1;
        const OPTIMIZE_NONE = 0;
        const OPTIMIZE_FOR = 2;
        const OPTIMIZE_RAW_FILTER = 4;
        const OPTIMIZE_VAR_ACCESS = 8;

        private $loops;
        private $loopsTargets;
        private $optimizers;

        public function __construct(int $optimizers = -1) {}
        protected function doEnterNode(Node $node, Environment $env) {}
        protected function doLeaveNode(Node $node, Environment $env) {}
        private function optimizePrintNode(Node $node, Environment $env) : Node {}
        private function optimizeRawFilter(Node $node, Environment $env) : Node {}
        private function enterOptimizeFor(Node $node, Environment $env) {}
        private function leaveOptimizeFor(Node $node, Environment $env) {}
        private function addLoopToCurrent() {}
        private function addLoopToAll() {}
        public function getPriority() {}
    }

    final class SafeAnalysisNodeVisitor extends \twig\nodevisitor\abstractnodevisitor {
        private $data;
        private $safeVars;

        public function setSafeVars($safeVars) {}
        public function getSafe(Node $node) {}
        private function setSafe(Node $node, array $safe) {}
        protected function doEnterNode(Node $node, Environment $env) {}
        protected function doLeaveNode(Node $node, Environment $env) {}
        private function intersectSafe(array $a = null, array $b = null) : array {}
        public function getPriority() {}
    }


    /**
     * Interface for node visitor classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeVisitorInterface {
        function enterNode(Node $node, Environment $env) ;
        function leaveNode(Node $node, Environment $env) ;
        /**
         * Returns the priority for this visitor.
         *
         * Priority should be between -10 and 10 (0 is the default).
         *
         * @return int The priority level
         */
        function getPriority() ;
    }

}

namespace Twig\Test {
    abstract class NodeTestCase extends \phpunit\framework\testcase {
        abstract public function getTests() ;
        public function testCompile($node, $source, $environment = null, $isPattern = false) {}
        public function assertNodeCompilation($source, Node $node, Environment $environment = null, $isPattern = false) {}
        protected function getCompiler(Environment $environment = null) {}
        protected function getEnvironment() {}
        protected function getVariableGetter($name, $line = false) {}
        protected function getAttributeGetter() {}
    }

    /**
     * Integration test helper.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Karma Dordrak <drak@zikula.org>
     */
    abstract class IntegrationTestCase extends \phpunit\framework\testcase {
        /**
         * @return string
         */
        abstract protected function getFixturesDir() ;
        /**
         * @return RuntimeLoaderInterface[]
         */
        protected function getRuntimeLoaders() {}
        /**
         * @return ExtensionInterface[]
         */
        protected function getExtensions() {}
        /**
         * @return TwigFilter[]
         */
        protected function getTwigFilters() {}
        /**
         * @return TwigFunction[]
         */
        protected function getTwigFunctions() {}
        /**
         * @return TwigTest[]
         */
        protected function getTwigTests() {}
        public function testIntegration($file, $message, $condition, $templates, $exception, $outputs, $deprecation = '') {}
        public function testLegacyIntegration($file, $message, $condition, $templates, $exception, $outputs, $deprecation = '') {}
        public function getTests($name, $legacyTests = false) {}
        public function getLegacyTests() {}
        protected function doIntegrationTest($file, $message, $condition, $templates, $exception, $outputs, $deprecation = '') {}
        protected static function parseTemplates($test) {}
    }

}

namespace Twig\Util {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class DeprecationCollector {
        private $twig;

        public function __construct(Environment $twig) {}
        public function collectDir($dir, $ext = '.twig') {}
        public function collect(\Traversable $iterator) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TemplateDirIterator extends \iteratoriterator {
        public function current() {}
        public function key() {}
    }

}

namespace Twig\RuntimeLoader {
    /**
     * Lazy loads the runtime implementations for a Twig element.
     *
     * @author Robin Chalas <robin.chalas@gmail.com>
     */
    class FactoryRuntimeLoader implements \twig\runtimeloader\runtimeloaderinterface {
        private $map;

        public function __construct(array $map = [ ]) {}
        public function load($class) {}
    }

    /**
     * Lazily loads Twig runtime implementations from a PSR-11 container.
     *
     * Note that the runtime services MUST use their class names as identifiers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Robin Chalas <robin.chalas@gmail.com>
     */
    class ContainerRuntimeLoader implements \twig\runtimeloader\runtimeloaderinterface {
        private $container;

        public function __construct(ContainerInterface $container) {}
        public function load($class) {}
    }


    /**
     * Creates runtime implementations for Twig elements (filters/functions/tests).
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface RuntimeLoaderInterface {
        function load($class) ;
    }

}

namespace Twig\Sandbox {
    /**
     * Represents a security policy which need to be enforced when sandbox mode is enabled.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class SecurityPolicy implements \twig\sandbox\securitypolicyinterface {
        private $allowedTags;
        private $allowedFilters;
        private $allowedMethods;
        private $allowedProperties;
        private $allowedFunctions;

        public function __construct(array $allowedTags = [ ], array $allowedFilters = [ ], array $allowedMethods = [ ], array $allowedProperties = [ ], array $allowedFunctions = [ ]) {}
        public function setAllowedTags(array $tags) {}
        public function setAllowedFilters(array $filters) {}
        public function setAllowedMethods(array $methods) {}
        public function setAllowedProperties(array $properties) {}
        public function setAllowedFunctions(array $functions) {}
        public function checkSecurity($tags, $filters, $functions) {}
        public function checkMethodAllowed($obj, $method) {}
        public function checkPropertyAllowed($obj, $property) {}
    }

    /**
     * Exception thrown when a not allowed function is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     *
     * @final
     */
    class SecurityNotAllowedFunctionError extends \twig\sandbox\securityerror {
        private $functionName;

        public function __construct(string $message, string $functionName, int $lineno = -1, string $filename = null, \Exception $previous = null) {}
        public function getFunctionName() {}
    }

    /**
     * Exception thrown when a not allowed class method is used in a template.
     *
     * @author Kit Burton-Senior <mail@kitbs.com>
     *
     * @final
     */
    class SecurityNotAllowedMethodError extends \twig\sandbox\securityerror {
        private $className;
        private $methodName;

        public function __construct(string $message, string $className, string $methodName, int $lineno = -1, string $filename = null, \Exception $previous = null) {}
        public function getClassName() {}
        public function getMethodName() {}
    }

    /**
     * Exception thrown when a security error occurs at runtime.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SecurityError extends \twig\error\error {}

    /**
     * Exception thrown when a not allowed tag is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     *
     * @final
     */
    class SecurityNotAllowedTagError extends \twig\sandbox\securityerror {
        private $tagName;

        public function __construct(string $message, string $tagName, int $lineno = -1, string $filename = null, \Exception $previous = null) {}
        public function getTagName() {}
    }

    /**
     * Exception thrown when a not allowed filter is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     *
     * @final
     */
    class SecurityNotAllowedFilterError extends \twig\sandbox\securityerror {
        private $filterName;

        public function __construct(string $message, string $functionName, int $lineno = -1, string $filename = null, \Exception $previous = null) {}
        public function getFilterName() {}
    }

    /**
     * Exception thrown when a not allowed class property is used in a template.
     *
     * @author Kit Burton-Senior <mail@kitbs.com>
     *
     * @final
     */
    class SecurityNotAllowedPropertyError extends \twig\sandbox\securityerror {
        private $className;
        private $propertyName;

        public function __construct(string $message, string $className, string $propertyName, int $lineno = -1, string $filename = null, \Exception $previous = null) {}
        public function getClassName() {}
        public function getPropertyName() {}
    }


    /**
     * Interface that all security policy classes must implements.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface SecurityPolicyInterface {
        function checkSecurity($tags, $filters, $functions) ;
        function checkMethodAllowed($obj, $method) ;
        function checkPropertyAllowed($obj, $method) ;
    }

}

namespace Twig\Loader {
    /**
     * Loads template from the filesystem.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FilesystemLoader implements \twig\loader\sourcecontextloaderinterface, \twig\loader\loaderinterface, \twig\loader\existsloaderinterface {
        const MAIN_NAMESPACE = '__main__';

        protected $paths;
        protected $cache;
        protected $errorCache;
        private $rootPath;

        public function __construct($paths = [ ], string $rootPath = null) {}
        public function getPaths($namespace = self::MAIN_NAMESPACE) {}
        /**
         * Returns the path namespaces.
         *
         * The main namespace is always defined.
         *
         * @return array The array of defined namespaces
         */
        public function getNamespaces() {}
        public function setPaths($paths, $namespace = self::MAIN_NAMESPACE) {}
        public function addPath($path, $namespace = self::MAIN_NAMESPACE) {}
        public function prependPath($path, $namespace = self::MAIN_NAMESPACE) {}
        public function getSourceContext($name) {}
        public function getCacheKey($name) {}
        public function exists($name) {}
        public function isFresh($name, $time) {}
        protected function findTemplate($name, $throw = true) {}
        private function normalizeName($name) {}
        private function parseName($name, $default = self::MAIN_NAMESPACE) {}
        private function validateName($name) {}
        private function isAbsolutePath($file) {}
    }

    /**
     * Loads a template from an array.
     *
     * When using this loader with a cache mechanism, you should know that a new cache
     * key is generated each time a template content "changes" (the cache key being the
     * source code of the template). If you don't want to see your cache grows out of
     * control, you need to take care of clearing the old cache file by yourself.
     *
     * This loader should only be used for unit testing.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class ArrayLoader implements \twig\loader\sourcecontextloaderinterface, \twig\loader\loaderinterface, \twig\loader\existsloaderinterface {
        private $templates;

        public function __construct(array $templates = [ ]) {}
        public function setTemplate($name, $template) {}
        public function getSourceContext($name) {}
        public function exists($name) {}
        public function getCacheKey($name) {}
        public function isFresh($name, $time) {}
    }

    /**
     * Loads templates from other loaders.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class ChainLoader implements \twig\loader\loaderinterface, \twig\loader\existsloaderinterface, \twig\loader\sourcecontextloaderinterface {
        private $hasSourceCache;
        private $loaders;

        public function __construct(array $loaders = [ ]) {}
        public function addLoader(LoaderInterface $loader) {}
        /**
         * @return LoaderInterface[]
         */
        public function getLoaders() {}
        public function getSourceContext($name) {}
        public function exists($name) {}
        public function getCacheKey($name) {}
        public function isFresh($name, $time) {}
    }


    /**
     * Interface all loaders must implement.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface LoaderInterface {
        function getSourceContext($name) ;
        function getCacheKey($name) ;
        function isFresh($name, $time) ;
        function exists($name) ;
    }

    /**
     * Empty interface for Twig 1.x compatibility.
     */
    interface SourceContextLoaderInterface extends \twig\loader\loaderinterface {}

    /**
     * Empty interface for Twig 1.x compatibility.
     *
     * @deprecated since Twig 2.7, to be removed in 3.0
     */
    interface ExistsLoaderInterface extends \twig\loader\loaderinterface {}

}

namespace Twig\Profiler {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final since Twig 2.4.0
     */
    class Profile implements \iteratoraggregate, \serializable {
        const BLOCK = 'block';
        const TEMPLATE = 'template';
        const ROOT = 'ROOT';
        const MACRO = 'macro';

        private $template;
        private $name;
        private $type;
        private $starts;
        private $ends;
        private $profiles;

        public function __construct(string $template = 'main', string $type = self::ROOT, string $name = 'main') {}
        public function getTemplate() {}
        public function getType() {}
        public function getName() {}
        public function isRoot() {}
        public function isTemplate() {}
        public function isBlock() {}
        public function isMacro() {}
        public function getProfiles() {}
        public function addProfile(self $profile) {}
        /**
         * Returns the duration in microseconds.
         *
         * @return float
         */
        public function getDuration() {}
        /**
         * Returns the memory usage in bytes.
         *
         * @return int
         */
        public function getMemoryUsage() {}
        /**
         * Returns the peak memory usage in bytes.
         *
         * @return int
         */
        public function getPeakMemoryUsage() {}
        /**
         * Starts the profiling.
         */
        public function enter() {}
        /**
         * Stops the profiling.
         */
        public function leave() {}
        public function reset() {}
        public function getIterator() {}
        public function serialize() {}
        public function unserialize($data) {}
        /**
         * @internal
         */
        public function __serialize() {}
        public function __unserialize(array $data) {}
    }

}

namespace Twig\Profiler\NodeVisitor {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class ProfilerNodeVisitor extends \twig\nodevisitor\abstractnodevisitor {
        private $extensionName;

        public function __construct(string $extensionName) {}
        protected function doEnterNode(Node $node, Environment $env) {}
        protected function doLeaveNode(Node $node, Environment $env) {}
        private function getVarName() : string {}
        public function getPriority() {}
    }

}

namespace Twig\Profiler\Node {
    /**
     * Represents a profile enter node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EnterProfileNode extends \twig\node\node {
        public function __construct(string $extensionName, string $type, string $name, string $varName) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a profile leave node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class LeaveProfileNode extends \twig\node\node {
        public function __construct(string $varName) {}
        public function compile(Compiler $compiler) {}
    }

}

namespace Twig\Profiler\Dumper {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class BlackfireDumper {
        public function dump(Profile $profile) {}
        private function dumpChildren(string $parent, Profile $profile, $data) {}
        private function dumpProfile(string $edge, Profile $profile, $data) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class TextDumper extends \twig\profiler\dumper\basedumper {
        protected function formatTemplate(Profile $profile, $prefix) {}
        protected function formatNonTemplate(Profile $profile, $prefix) {}
        protected function formatTime(Profile $profile, $percent) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class BaseDumper {
        private $root;

        public function dump(Profile $profile) {}
        abstract protected function formatTemplate(Profile $profile, $prefix) ;
        abstract protected function formatNonTemplate(Profile $profile, $prefix) ;
        abstract protected function formatTime(Profile $profile, $percent) ;
        private function dumpProfile(Profile $profile, $prefix = '', $sibling = false) : string {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class HtmlDumper extends \twig\profiler\dumper\basedumper {
        static private $colors;

        public function dump(Profile $profile) {}
        protected function formatTemplate(Profile $profile, $prefix) {}
        protected function formatNonTemplate(Profile $profile, $prefix) {}
        protected function formatTime(Profile $profile, $percent) {}
    }

}

namespace Twig\TokenParser {
    /**
     * Deprecates a section of a template.
     *
     *    {% deprecated 'The "base.twig" template is deprecated, use "layout.twig" instead.' %}
     *    {% extends 'layout.html.twig' %}
     *
     * @author Yonel Ceruto <yonelceruto@gmail.com>
     *
     * @final
     */
    class DeprecatedTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function getTag() {}
    }

    /**
     * Loops over each item of a sequence.
     *
     *   <ul>
     *    {% for user in users %}
     *      <li>{{ user.username|e }}</li>
     *    {% endfor %}
     *   </ul>
     */
    final class ForTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideForFork(Token $token) {}
        public function decideForEnd(Token $token) {}
        private function checkLoopUsageCondition(TokenStream $stream, Node $node) {}
        private function checkLoopUsageBody(TokenStream $stream, Node $node) {}
        public function getTag() {}
    }

    /**
     * Evaluates an expression, discarding the returned value.
     */
    final class DoTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function getTag() {}
    }

    /**
     * Imports macros.
     *
     *   {% from 'forms.html' import forms %}
     */
    final class FromTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function getTag() {}
    }

    /**
     * Base class for all token parsers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractTokenParser implements \twig\tokenparser\tokenparserinterface {
        /**
         * @var Parser
         */
        protected $parser;

        public function setParser(Parser $parser) {}
    }

    /**
     * Marks a section of a template as untrusted code that must be evaluated in the sandbox mode.
     *
     *    {% sandbox %}
     *        {% include 'user.html' %}
     *    {% endsandbox %}
     *
     * @see https://twig.symfony.com/doc/api.html#sandbox-extension for details
     */
    final class SandboxTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideBlockEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Imports blocks defined in another template into the current template.
     *
     *    {% extends "base.html" %}
     *
     *    {% use "blocks.html" %}
     *
     *    {% block title %}{% endblock %}
     *    {% block content %}{% endblock %}
     *
     * @see https://twig.symfony.com/doc/templates.html#horizontal-reuse for details.
     */
    final class UseTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function getTag() {}
    }

    /**
     * Marks a section of a template to be escaped or not.
     */
    final class AutoEscapeTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideBlockEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Includes a template.
     *
     *   {% include 'header.html' %}
     *     Body
     *   {% include 'footer.html' %}
     */
    class IncludeTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        protected function parseArguments() {}
        public function getTag() {}
    }

    /**
     * Remove whitespaces between HTML tags.
     *
     *   {% spaceless %}
     *      <div>
     *          <strong>foo</strong>
     *      </div>
     *   {% endspaceless %}
     *   {# output will be <div><strong>foo</strong></div> #}
     *
     * @deprecated since Twig 2.7, to be removed in 3.0 (use the spaceless filter instead)
     */
    final class SpacelessTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideSpacelessEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Applies filters on a section of a template.
     *
     *   {% apply upper %}
     *      This text becomes uppercase
     *   {% endapplys %}
     */
    final class ApplyTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideApplyEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Filters a section of a template by applying filters.
     *
     *   {% filter upper %}
     *      This text becomes uppercase
     *   {% endfilter %}
     *
     * @deprecated since Twig 2.9, to be removed in 3.0 (use the "apply" tag instead)
     */
    final class FilterTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideBlockEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Defines a variable.
     *
     *  {% set foo = 'foo' %}
     *  {% set foo = [1, 2] %}
     *  {% set foo = {'foo': 'bar'} %}
     *  {% set foo = 'foo' ~ 'bar' %}
     *  {% set foo, bar = 'foo', 'bar' %}
     *  {% set foo %}Some content{% endset %}
     */
    final class SetTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideBlockEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Embeds a template.
     */
    final class EmbedTokenParser extends \twig\tokenparser\includetokenparser {
        public function parse(Token $token) {}
        public function decideBlockEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Flushes the output to the client.
     *
     * @see flush()
     */
    final class FlushTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function getTag() {}
    }

    /**
     * Creates a nested scope.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class WithTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideWithEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Imports macros.
     *
     *   {% import 'forms.html' as forms %}
     */
    final class ImportTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function getTag() {}
    }

    /**
     * Marks a section of a template as being reusable.
     *
     *  {% block head %}
     *    <link rel="stylesheet" href="style.css" />
     *    <title>{% block title %}{% endblock %} - My Webpage</title>
     *  {% endblock %}
     */
    final class BlockTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideBlockEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Extends a template by another one.
     *
     *  {% extends "base.html" %}
     */
    final class ExtendsTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function getTag() {}
    }

    /**
     * Tests a condition.
     *
     *   {% if users %}
     *    <ul>
     *      {% for user in users %}
     *        <li>{{ user.username|e }}</li>
     *      {% endfor %}
     *    </ul>
     *   {% endif %}
     */
    final class IfTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideIfFork(Token $token) {}
        public function decideIfEnd(Token $token) {}
        public function getTag() {}
    }

    /**
     * Defines a macro.
     *
     *   {% macro input(name, value, type, size) %}
     *      <input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />
     *   {% endmacro %}
     */
    final class MacroTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideBlockEnd(Token $token) {}
        public function getTag() {}
    }


    /**
     * Interface implemented by token parsers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface TokenParserInterface {
        function setParser(Parser $parser) ;
        function parse(Token $token) ;
        /**
         * Gets the tag name associated with this token parser.
         *
         * @return string The tag name
         */
        function getTag() ;
    }

}

namespace Twig\Node {
    /**
     * Represents a sandbox node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SandboxNode extends \twig\node\node {
        public function __construct(Node $body, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents an include node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class IncludeNode extends \twig\node\node implements \twig\node\nodeoutputinterface {
        public function __construct(AbstractExpression $expr, AbstractExpression $variables = null, bool $only = false, bool $ignoreMissing = false, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
        protected function addGetTemplate(Compiler $compiler) {}
        protected function addTemplateArguments(Compiler $compiler) {}
    }

    /**
     * Represents a for node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ForNode extends \twig\node\node {
        private $loop;

        public function __construct(AssignNameExpression $keyTarget, AssignNameExpression $valueTarget, AbstractExpression $seq, AbstractExpression $ifexpr = null, Node $body, Node $else = null, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class CheckSecurityNode extends \twig\node\node {
        private $usedFilters;
        private $usedTags;
        private $usedFunctions;

        public function __construct(array $usedFilters, array $usedTags, array $usedFunctions) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Adds a check for the __toString() method when the variable is an object and the sandbox is activated.
     *
     * When there is a simple Print statement, like {{ article }},
     * and if the sandbox is enabled, we need to check that the __toString()
     * method is allowed if 'article' is an object.
     *
     * Not used anymore, to be deprecated in 2.x and removed in 3.0
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SandboxedPrintNode extends \twig\node\printnode {
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a block call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockReferenceNode extends \twig\node\node implements \twig\node\nodeoutputinterface {
        public function __construct(string $name, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a text node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TextNode extends \twig\node\node implements \twig\node\nodeoutputinterface {
        public function __construct(string $data, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a body node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BodyNode extends \twig\node\node {}

    /**
     * Represents a macro node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class MacroNode extends \twig\node\node {
        const VARARGS_NAME = 'varargs';

        public function __construct(string $name, Node $body, Node $arguments, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a spaceless node.
     *
     * It removes spaces between HTML tags.
     *
     * @deprecated since Twig 2.7, to be removed in 3.0
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SpacelessNode extends \twig\node\node implements \twig\node\nodeoutputinterface {
        public function __construct(Node $body, int $lineno, string $tag = 'spaceless') {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a block node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockNode extends \twig\node\node {
        public function __construct(string $name, Node $body, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Node implements \iteratoraggregate, \countable {
        protected $nodes;
        protected $attributes;
        protected $lineno;
        protected $tag;
        private $name;
        private $sourceContext;

        public function __construct(array $nodes = [ ], array $attributes = [ ], int $lineno = 0, string $tag = null) {}
        public function __toString() {}
        public function compile(Compiler $compiler) {}
        public function getTemplateLine() {}
        public function getNodeTag() {}
        public function hasAttribute($name) {}
        public function getAttribute($name) {}
        public function setAttribute($name, $value) {}
        public function removeAttribute($name) {}
        public function hasNode($name) {}
        public function getNode($name) {}
        public function setNode($name, self $node) {}
        public function removeNode($name) {}
        public function count() {}
        public function getIterator() {}
        public function setTemplateName($name) {}
        public function getTemplateName() {}
        public function setSourceContext(Source $source) {}
        public function getSourceContext() {}
    }

    /**
     * Represents a nested "with" scope.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class WithNode extends \twig\node\node {
        public function __construct(Node $body, Node $variables = null, bool $only = false, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents an autoescape node.
     *
     * The value is the escaping strategy (can be html, js, ...)
     *
     * The true value is equivalent to html.
     *
     * If autoescaping is disabled, then the value is false.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class AutoEscapeNode extends \twig\node\node {
        public function __construct($value, Node $body, int $lineno, string $tag = 'autoescape') {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a set node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SetNode extends \twig\node\node implements \twig\node\nodecaptureinterface {
        public function __construct(bool $capture, Node $names, Node $values, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents an import node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ImportNode extends \twig\node\node {
        public function __construct(AbstractExpression $expr, AbstractExpression $var, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a do node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DoNode extends \twig\node\node {
        public function __construct(AbstractExpression $expr, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a module node.
     *
     * Consider this class as being final. If you need to customize the behavior of
     * the generated class, consider adding nodes to the following nodes: display_start,
     * display_end, constructor_start, constructor_end, and class_end.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final since Twig 2.4.0
     */
    class ModuleNode extends \twig\node\node {
        public function __construct(Node $body, AbstractExpression $parent = null, Node $blocks, Node $macros, Node $traits, $embeddedTemplates, Source $source) {}
        public function setIndex($index) {}
        public function compile(Compiler $compiler) {}
        protected function compileTemplate(Compiler $compiler) {}
        protected function compileGetParent(Compiler $compiler) {}
        protected function compileClassHeader(Compiler $compiler) {}
        protected function compileConstructor(Compiler $compiler) {}
        protected function compileDisplay(Compiler $compiler) {}
        protected function compileClassFooter(Compiler $compiler) {}
        protected function compileMacros(Compiler $compiler) {}
        protected function compileGetTemplateName(Compiler $compiler) {}
        protected function compileIsTraitable(Compiler $compiler) {}
        protected function compileDebugInfo(Compiler $compiler) {}
        protected function compileGetSourceContext(Compiler $compiler) {}
        protected function compileLoadTemplate(Compiler $compiler, $node, $var) {}
    }

    /**
     * Represents a flush node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FlushNode extends \twig\node\node {
        public function __construct(int $lineno, string $tag) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Internal node used by the for node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ForLoopNode extends \twig\node\node {
        public function __construct(int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Checks if casting an expression to __toString() is allowed by the sandbox.
     *
     * For instance, when there is a simple Print statement, like {{ article }},
     * and if the sandbox is enabled, we need to check that the __toString()
     * method is allowed if 'article' is an object. The same goes for {{ article|upper }}
     * or {{ random(article) }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class CheckToStringNode extends \twig\node\expression\abstractexpression {
        public function __construct(AbstractExpression $expr) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents an if node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class IfNode extends \twig\node\node {
        public function __construct(Node $tests, Node $else = null, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents an embed node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EmbedNode extends \twig\node\includenode {
        public function __construct(string $name, int $index, AbstractExpression $variables = null, bool $only = false, bool $ignoreMissing = false, int $lineno, string $tag = null) {}
        protected function addGetTemplate(Compiler $compiler) {}
    }

    /**
     * Represents a node that outputs an expression.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class PrintNode extends \twig\node\node implements \twig\node\nodeoutputinterface {
        public function __construct(AbstractExpression $expr, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a deprecated node.
     *
     * @author Yonel Ceruto <yonelceruto@gmail.com>
     */
    class DeprecatedNode extends \twig\node\node {
        public function __construct(AbstractExpression $expr, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }


    /**
     * Represents a displayable node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeOutputInterface {}

    /**
     * Represents a node that captures any nested displayable nodes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeCaptureInterface {}

}

namespace Twig\Node\Expression {
    abstract class CallExpression extends \twig\node\expression\abstractexpression {
        private $reflector;

        protected function compileCallable(Compiler $compiler) {}
        protected function compileArguments(Compiler $compiler, $isArray = false) {}
        protected function getArguments($callable = null, $arguments) {}
        protected function normalizeName($name) {}
        private function getCallableParameters($callable, bool $isVariadic) : array {}
        private function reflectCallable($callable) {}
    }

    class FunctionExpression extends \twig\node\expression\callexpression {
        public function __construct(string $name, Node $arguments, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a parent node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ParentExpression extends \twig\node\expression\abstractexpression {
        public function __construct(string $name, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Represents a block call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockReferenceExpression extends \twig\node\expression\abstractexpression {
        public function __construct(Node $name, Node $template = null, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
        private function compileTemplateCall(Compiler $compiler, string $method) : Compiler {}
        private function compileBlockArguments(Compiler $compiler) : Compiler {}
    }

    class FilterExpression extends \twig\node\expression\callexpression {
        public function __construct(Node $node, ConstantExpression $filterName, Node $arguments, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

    class MethodCallExpression extends \twig\node\expression\abstractexpression {
        public function __construct(AbstractExpression $node, string $method, ArrayExpression $arguments, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    class ConstantExpression extends \twig\node\expression\abstractexpression {
        public function __construct($value, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    class VariadicExpression extends \twig\node\expression\arrayexpression {
        public function compile(Compiler $compiler) {}
    }

    class AssignNameExpression extends \twig\node\expression\nameexpression {
        public function compile(Compiler $compiler) {}
    }

    /**
     * @internal
     */
    final class InlinePrint extends \twig\node\expression\abstractexpression {
        public function __construct(Node $node, $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Abstract class for all nodes that represents an expression.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractExpression extends \twig\node\node {}

    class TempNameExpression extends \twig\node\expression\abstractexpression {
        public function __construct(string $name, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    class NullCoalesceExpression extends \twig\node\expression\conditionalexpression {
        public function __construct(Node $left, Node $right, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    class ArrayExpression extends \twig\node\expression\abstractexpression {
        private $index;

        public function __construct(array $elements, int $lineno) {}
        public function getKeyValuePairs() {}
        public function hasElement(AbstractExpression $key) {}
        public function addElement(AbstractExpression $value, AbstractExpression $key = null) {}
        public function compile(Compiler $compiler) {}
    }

    class TestExpression extends \twig\node\expression\callexpression {
        public function __construct(Node $node, string $name, Node $arguments = null, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    class NameExpression extends \twig\node\expression\abstractexpression {
        private $specialVars;

        public function __construct(string $name, int $lineno) {}
        public function compile(Compiler $compiler) {}
        public function isSpecial() {}
        public function isSimple() {}
    }

    class ConditionalExpression extends \twig\node\expression\abstractexpression {
        public function __construct(AbstractExpression $expr1, AbstractExpression $expr2, AbstractExpression $expr3, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

    class GetAttrExpression extends \twig\node\expression\abstractexpression {
        public function __construct(AbstractExpression $node, AbstractExpression $attribute, AbstractExpression $arguments = null, string $type, int $lineno) {}
        public function compile(Compiler $compiler) {}
    }

}

namespace Twig\Node\Expression\Unary {
    class NegUnary extends \twig\node\expression\unary\abstractunary {
        public function operator(Compiler $compiler) {}
    }

    class NotUnary extends \twig\node\expression\unary\abstractunary {
        public function operator(Compiler $compiler) {}
    }

    class PosUnary extends \twig\node\expression\unary\abstractunary {
        public function operator(Compiler $compiler) {}
    }

    abstract class AbstractUnary extends \twig\node\expression\abstractexpression {
        public function __construct(Node $node, int $lineno) {}
        public function compile(Compiler $compiler) {}
        abstract public function operator(Compiler $compiler) ;
    }

}

namespace Twig\Node\Expression\Test {
    /**
     * Checks if a number is even.
     *
     *  {{ var is even }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EvenTest extends \twig\node\expression\testexpression {
        public function compile(Compiler $compiler) {}
    }

    /**
     * Checks if a variable is the same as another one (=== in PHP).
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SameasTest extends \twig\node\expression\testexpression {
        public function compile(Compiler $compiler) {}
    }

    /**
     * Checks if a variable is divisible by a number.
     *
     *  {% if loop.index is divisible by(3) %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DivisiblebyTest extends \twig\node\expression\testexpression {
        public function compile(Compiler $compiler) {}
    }

    /**
     * Checks if a variable is the exact same value as a constant.
     *
     *    {% if post.status is constant('Post::PUBLISHED') %}
     *      the status attribute is exactly the same as Post::PUBLISHED
     *    {% endif %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ConstantTest extends \twig\node\expression\testexpression {
        public function compile(Compiler $compiler) {}
    }

    /**
     * Checks that a variable is null.
     *
     *  {{ var is none }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class NullTest extends \twig\node\expression\testexpression {
        public function compile(Compiler $compiler) {}
    }

    /**
     * Checks if a variable is defined in the current context.
     *
     *    {# defined works with variable names and variable attributes #}
     *    {% if foo is defined %}
     *        {# ... #}
     *    {% endif %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DefinedTest extends \twig\node\expression\testexpression {
        public function __construct(Node $node, string $name, Node $arguments = null, int $lineno) {}
        private function changeIgnoreStrictCheck(GetAttrExpression $node) {}
        public function compile(Compiler $compiler) {}
    }

    /**
     * Checks if a number is odd.
     *
     *  {{ var is odd }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class OddTest extends \twig\node\expression\testexpression {
        public function compile(Compiler $compiler) {}
    }

}

namespace Twig\Node\Expression\Binary {
    class NotInBinary extends \twig\node\expression\binary\abstractbinary {
        public function compile(Compiler $compiler) {}
        public function operator(Compiler $compiler) {}
    }

    class RangeBinary extends \twig\node\expression\binary\abstractbinary {
        public function compile(Compiler $compiler) {}
        public function operator(Compiler $compiler) {}
    }

    class EndsWithBinary extends \twig\node\expression\binary\abstractbinary {
        public function compile(Compiler $compiler) {}
        public function operator(Compiler $compiler) {}
    }

    class MulBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class MatchesBinary extends \twig\node\expression\binary\abstractbinary {
        public function compile(Compiler $compiler) {}
        public function operator(Compiler $compiler) {}
    }

    class GreaterEqualBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    abstract class AbstractBinary extends \twig\node\expression\abstractexpression {
        public function __construct(Node $left, Node $right, int $lineno) {}
        public function compile(Compiler $compiler) {}
        abstract public function operator(Compiler $compiler) ;
    }

    class ModBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class SubBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class BitwiseOrBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class FloorDivBinary extends \twig\node\expression\binary\abstractbinary {
        public function compile(Compiler $compiler) {}
        public function operator(Compiler $compiler) {}
    }

    class StartsWithBinary extends \twig\node\expression\binary\abstractbinary {
        public function compile(Compiler $compiler) {}
        public function operator(Compiler $compiler) {}
    }

    class LessEqualBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class InBinary extends \twig\node\expression\binary\abstractbinary {
        public function compile(Compiler $compiler) {}
        public function operator(Compiler $compiler) {}
    }

    class LessBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class AddBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class EqualBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class BitwiseXorBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class ConcatBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class AndBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class BitwiseAndBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class NotEqualBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class PowerBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class DivBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class OrBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

    class GreaterBinary extends \twig\node\expression\binary\abstractbinary {
        public function operator(Compiler $compiler) {}
    }

}

namespace Twig\Node\Expression\Filter {
    /**
     * Returns the value or the default value when it is undefined or empty.
     *
     *  {{ var.foo|default('foo item on var is not defined') }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DefaultFilter extends \twig\node\expression\filterexpression {
        public function __construct(Node $node, ConstantExpression $filterName, Node $arguments, int $lineno, string $tag = null) {}
        public function compile(Compiler $compiler) {}
    }

}

namespace Twig\Error {
    /**
     * Exception thrown when an error occurs during template loading.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class LoaderError extends \twig\error\error {}

    /**
     * Exception thrown when an error occurs at runtime.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class RuntimeError extends \twig\error\error {}

    /**
     * Twig base exception.
     *
     * This exception class and its children must only be used when
     * an error occurs during the loading of a template, when a syntax error
     * is detected in a template, or when rendering a template. Other
     * errors must use regular PHP exception classes (like when the template
     * cache directory is not writable for instance).
     *
     * To help debugging template issues, this class tracks the original template
     * name and line where the error occurred.
     *
     * Whenever possible, you must set these information (original template name
     * and line number) yourself by passing them to the constructor. If some or all
     * these information are not available from where you throw the exception, then
     * this class will guess them automatically (when the line number is set to -1
     * and/or the name is set to null). As this is a costly operation, this
     * can be disabled by passing false for both the name and the line number
     * when creating a new instance of this class.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Error extends \exception {
        private $lineno;
        private $name;
        private $rawMessage;
        private $sourcePath;
        private $sourceCode;

        public function __construct(string $message, int $lineno = -1, $source = null, \Exception $previous = null) {}
        /**
         * Gets the raw message.
         *
         * @return string The raw message
         */
        public function getRawMessage() {}
        /**
         * Gets the template line where the error occurred.
         *
         * @return int The template line
         */
        public function getTemplateLine() {}
        public function setTemplateLine($lineno) {}
        /**
         * Gets the source context of the Twig template where the error occurred.
         *
         * @return Source|null
         */
        public function getSourceContext() {}
        public function setSourceContext(Source $source = null) {}
        public function guess() {}
        public function appendMessage($rawMessage) {}
        private function updateRepr() {}
        private function guessTemplateInfo() {}
    }

    /**
     * \Exception thrown when a syntax error occurs during lexing or parsing of a template.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SyntaxError extends \twig\error\error {
        public function addSuggestions($name, array $items) {}
    }

}

?>
