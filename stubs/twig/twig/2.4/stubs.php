<?php
/**
  * Generated by Exakat 2.1.6 (Build 1091)
  * On 2020-08-26T06:01:02+00:00
  * See https://www.exakat.io/
  */

namespace  {
    function twig_raw_filter($string) {}
    function twig_var_dump(Twig_Environment $env, $context, $vars) {}
    function twig_template_from_string(Twig_Environment $env, $template) {}
    function twig_cycle($values, $position) {}
    function twig_random(Twig_Environment $env, $values = null) {}
    function twig_date_format_filter(Twig_Environment $env, $date, $format = null, $timezone = null) {}
    function twig_date_modify_filter(Twig_Environment $env, $date, $modifier) {}
    function twig_date_converter(Twig_Environment $env, $date = null, $timezone = null) {}
    function twig_replace_filter($str, $from) {}
    function twig_round($value, $precision = 0, $method = 'common') {}
    function twig_number_format_filter(Twig_Environment $env, $number, $decimal = null, $decimalPoint = null, $thousandSep = null) {}
    function twig_urlencode_filter($url) {}
    function twig_array_merge($arr1, $arr2) {}
    function twig_slice(Twig_Environment $env, $item, $start, $length = null, $preserveKeys = false) {}
    function twig_first(Twig_Environment $env, $item) {}
    function twig_last(Twig_Environment $env, $item) {}
    function twig_join_filter($value, $glue = '') {}
    function twig_split_filter(Twig_Environment $env, $value, $delimiter, $limit = null) {}
    function _twig_default_filter($value, $default = '') {}
    function twig_get_array_keys_filter($array) {}
    function twig_reverse_filter(Twig_Environment $env, $item, $preserveKeys = false) {}
    function twig_sort_filter($array) {}
    function twig_in_filter($value, $compare) {}
    function twig_trim_filter($string, $characterMask = null, $side = 'both') {}
    function twig_escape_filter(Twig_Environment $env, $string, $strategy = 'html', $charset = null, $autoescape = false) {}
    function twig_escape_filter_is_safe(Twig_Node $filterArgs) {}
    function twig_convert_encoding($string, $to, $from) {}
    function twig_length_filter(Twig_Environment $env, $thing) {}
    function twig_upper_filter(Twig_Environment $env, $string) {}
    function twig_lower_filter(Twig_Environment $env, $string) {}
    function twig_title_string_filter(Twig_Environment $env, $string) {}
    function twig_capitalize_string_filter(Twig_Environment $env, $string) {}
    function twig_ensure_traversable($seq) {}
    function twig_test_empty($value) {}
    function twig_test_iterable($value) {}
    function twig_include(Twig_Environment $env, $context, $template, $variables = array( ), $withContext = true, $ignoreMissing = false, $sandboxed = false) {}
    function twig_source(Twig_Environment $env, $name, $ignoreMissing = false) {}
    function twig_constant($constant, $object = null) {}
    function twig_constant_is_defined($constant, $object = null) {}
    function twig_array_batch($items, $size, $fill = null) {}
    function twig_get_attribute(Twig_Environment $env, Twig_Source $source, $object, $item, array $arguments = array( ), $type = 'any', $isDefinedTest = false, $ignoreStrictCheck = false, $sandboxed = false) {}

    /**
     * Twig_BaseNodeVisitor can be used to make node visitors compatible with Twig 1.x and 2.x.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class Twig_BaseNodeVisitor implements \twig_nodevisitorinterface {
        public function enterNode(Twig_Node $node, Twig_Environment $env) {}
        public function leaveNode(Twig_Node $node, Twig_Environment $env) {}
        abstract protected function doEnterNode(Twig_Node $node, Twig_Environment $env) ;
        abstract protected function doLeaveNode(Twig_Node $node, Twig_Environment $env) ;
    }

    /**
     * Represents a Token.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Token {
        const BLOCK_START_TYPE = 1;
        const VAR_START_TYPE = 2;
        const EOF_TYPE = -1;
        const TEXT_TYPE = 0;
        const NAME_TYPE = 5;
        const NUMBER_TYPE = 6;
        const BLOCK_END_TYPE = 3;
        const VAR_END_TYPE = 4;
        const PUNCTUATION_TYPE = 9;
        const INTERPOLATION_START_TYPE = 10;
        const STRING_TYPE = 7;
        const OPERATOR_TYPE = 8;
        const INTERPOLATION_END_TYPE = 11;

        private $value;
        private $type;
        private $lineno;

        public function __construct($type, $value, $lineno) {}
        public function __toString() {}
        public function test($type, $values = null) {}
        /**
         * @return int
         */
        public function getLine() {}
        /**
         * @return int
         */
        public function getType() {}
        /**
         * @return string
         */
        public function getValue() {}
        public static function typeToString($type, $short = false) {}
        public static function typeToEnglish($type) {}
    }

    /**
     * Default parser implementation.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Parser {
        private $stack;
        private $stream;
        private $parent;
        private $handlers;
        private $visitors;
        private $expressionParser;
        private $blocks;
        private $blockStack;
        private $macros;
        private $env;
        private $importedSymbols;
        private $traits;
        private $embeddedTemplates;
        private $varNameSalt;

        public function __construct(Twig_Environment $env) {}
        public function getVarName() {}
        public function parse(Twig_TokenStream $stream, $test = null, $dropNeedle = false) {}
        public function subparse($test, $dropNeedle = false) {}
        public function getBlockStack() {}
        public function peekBlockStack() {}
        public function popBlockStack() {}
        public function pushBlockStack($name) {}
        public function hasBlock($name) {}
        public function getBlock($name) {}
        public function setBlock($name, Twig_Node_Block $value) {}
        public function hasMacro($name) {}
        public function setMacro($name, Twig_Node_Macro $node) {}
        public function isReservedMacroName($name) {}
        public function addTrait($trait) {}
        public function hasTraits() {}
        public function embedTemplate(Twig_Node_Module $template) {}
        public function addImportedSymbol($type, $alias, $name = null, Twig_Node_Expression $node = null) {}
        public function getImportedSymbol($type, $alias) {}
        public function isMainScope() {}
        public function pushLocalScope() {}
        public function popLocalScope() {}
        /**
         * @return Twig_ExpressionParser
         */
        public function getExpressionParser() {}
        public function getParent() {}
        public function setParent($parent) {}
        /**
         * @return Twig_TokenStream
         */
        public function getStream() {}
        /**
         * @return Twig_Token
         */
        public function getCurrentToken() {}
        private function filterBodyNodes(Twig_Node $node) {}
    }

    /**
     * Parses expressions.
     *
     * This parser implements a "Precedence climbing" algorithm.
     *
     * @see http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm
     * @see http://en.wikipedia.org/wiki/Operator-precedence_parser
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    class Twig_ExpressionParser {
        const OPERATOR_LEFT = 1;
        const OPERATOR_RIGHT = 2;

        private $parser;
        private $env;
        private $unaryOperators;
        private $binaryOperators;

        public function __construct(Twig_Parser $parser, Twig_Environment $env) {}
        public function parseExpression($precedence = 0) {}
        private function getPrimary() {}
        private function parseConditionalExpression($expr) {}
        private function isUnary(Twig_Token $token) {}
        private function isBinary(Twig_Token $token) {}
        public function parsePrimaryExpression() {}
        public function parseStringExpression() {}
        public function parseArrayExpression() {}
        public function parseHashExpression() {}
        public function parsePostfixExpression($node) {}
        public function getFunctionNode($name, $line) {}
        public function parseSubscriptExpression($node) {}
        public function parseFilterExpression($node) {}
        public function parseFilterExpressionRaw($node, $tag = null) {}
        public function parseArguments($namedArguments = false, $definition = false) {}
        public function parseAssignmentExpression() {}
        public function parseMultitargetExpression() {}
        private function parseNotTestExpression(Twig_Node $node) {}
        private function parseTestExpression(Twig_Node $node) {}
        private function getTest($line) {}
        private function getTestNodeClass($test) {}
        private function getFunctionNodeClass($name, $line) {}
        private function getFilterNodeClass($name, $line) {}
        private function checkConstantExpression(Twig_Node $node) {}
    }

    /**
     * Marks a content as safe.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Markup implements \jsonserializable, \countable {
        private $content;
        private $charset;

        public function __construct($content, $charset) {}
        public function __toString() {}
        public function count() {}
        public function jsonSerialize() {}
    }

    /**
     * Exposes a template to userland.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_TemplateWrapper {
        private $env;
        private $template;

        public function __construct(Twig_Environment $env, Twig_Template $template) {}
        public function render($context = array( )) {}
        public function display($context = array( )) {}
        public function hasBlock($name, $context = array( )) {}
        public function getBlockNames($context = array( )) {}
        public function renderBlock($name, $context = array( )) {}
        public function displayBlock($name, $context = array( )) {}
        /**
         * @return Twig_Source
         */
        public function getSourceContext() {}
    }

    /**
     * Represents a template function.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @see http://twig.sensiolabs.org/doc/templates.html#functions
     */
    class Twig_Function {
        private $name;
        private $callable;
        private $options;
        private $arguments;

        public function __construct(string $name, $callable = null, array $options = array( )) {}
        public function getName() {}
        /**
         * Returns the callable to execute for this function.
         *
         * @return callable|null
         */
        public function getCallable() {}
        public function getNodeClass() {}
        public function setArguments($arguments) {}
        public function getArguments() {}
        public function needsEnvironment() {}
        public function needsContext() {}
        public function getSafe(Twig_Node $functionArgs) {}
        public function isVariadic() {}
        public function isDeprecated() {}
        public function getDeprecatedVersion() {}
        public function getAlternative() {}
    }

    /**
     * For Twig 1.x compatibility.
     */
    final class Twig_SimpleFunction extends \twig_function {}

    /**
     * Represents a node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node implements \countable, \iteratoraggregate {
        protected $nodes;
        protected $attributes;
        protected $lineno;
        protected $tag;
        private $name;

        public function __construct(array $nodes = array( ), array $attributes = array( ), $lineno = 0, $tag = null) {}
        public function __toString() {}
        public function compile(Twig_Compiler $compiler) {}
        public function getTemplateLine() {}
        public function getNodeTag() {}
        public function hasAttribute($name) {}
        public function getAttribute($name) {}
        public function setAttribute($name, $value) {}
        public function removeAttribute($name) {}
        public function hasNode($name) {}
        public function getNode($name) {}
        public function setNode($name, self $node) {}
        public function removeNode($name) {}
        public function count() {}
        public function getIterator() {}
        public function setTemplateName($name) {}
        public function getTemplateName() {}
    }

    /**
     * Represents a template test.
     *
     * @final since version 2.4.0
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @see http://twig.sensiolabs.org/doc/templates.html#test-operator
     */
    class Twig_Test {
        private $name;
        private $callable;
        private $options;

        public function __construct(string $name, $callable = null, array $options = array( )) {}
        public function getName() {}
        /**
         * Returns the callable to execute for this test.
         *
         * @return callable|null
         */
        public function getCallable() {}
        public function getNodeClass() {}
        public function isVariadic() {}
        public function isDeprecated() {}
        public function getDeprecatedVersion() {}
        public function getAlternative() {}
    }

    /**
     * Twig base exception.
     *
     * This exception class and its children must only be used when
     * an error occurs during the loading of a template, when a syntax error
     * is detected in a template, or when rendering a template. Other
     * errors must use regular PHP exception classes (like when the template
     * cache directory is not writable for instance).
     *
     * To help debugging template issues, this class tracks the original template
     * name and line where the error occurred.
     *
     * Whenever possible, you must set these information (original template name
     * and line number) yourself by passing them to the constructor. If some or all
     * these information are not available from where you throw the exception, then
     * this class will guess them automatically (when the line number is set to -1
     * and/or the name is set to null). As this is a costly operation, this
     * can be disabled by passing false for both the name and the line number
     * when creating a new instance of this class.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Error extends \exception {
        private $lineno;
        private $name;
        private $rawMessage;
        private $sourcePath;
        private $sourceCode;

        public function __construct($message, $lineno = -1, $source = null, Exception $previous = null) {}
        /**
         * Gets the raw message.
         *
         * @return string The raw message
         */
        public function getRawMessage() {}
        /**
         * Gets the template line where the error occurred.
         *
         * @return int The template line
         */
        public function getTemplateLine() {}
        public function setTemplateLine($lineno) {}
        /**
         * Gets the source context of the Twig template where the error occurred.
         *
         * @return Twig_Source|null
         */
        public function getSourceContext() {}
        public function setSourceContext(Twig_Source $source = null) {}
        public function guess() {}
        public function appendMessage($rawMessage) {}
        private function updateRepr() {}
        private function guessTemplateInfo() {}
    }

    /**
     * Lazy loads the runtime implementations for a Twig element.
     *
     * @author Robin Chalas <robin.chalas@gmail.com>
     */
    class Twig_FactoryRuntimeLoader implements \twig_runtimeloaderinterface {
        private $map;

        public function __construct($map = array( )) {}
        public function load($class) {}
    }

    /**
     * For Twig 1.x compatibility.
     */
    final class Twig_SimpleTest extends \twig_test {}

    /**
     * Represents a template filter.
     *
     * @final since version 2.4.0
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @see http://twig.sensiolabs.org/doc/templates.html#filters
     */
    class Twig_Filter {
        private $name;
        private $callable;
        private $options;
        private $arguments;

        public function __construct(string $name, $callable = null, array $options = array( )) {}
        public function getName() {}
        /**
         * Returns the callable to execute for this filter.
         *
         * @return callable|null
         */
        public function getCallable() {}
        public function getNodeClass() {}
        public function setArguments($arguments) {}
        public function getArguments() {}
        public function needsEnvironment() {}
        public function needsContext() {}
        public function getSafe(Twig_Node $filterArgs) {}
        public function getPreservesSafety() {}
        public function getPreEscape() {}
        public function isVariadic() {}
        public function isDeprecated() {}
        public function getDeprecatedVersion() {}
        public function getAlternative() {}
    }

    /**
     * Lexes a template string.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Lexer {
        const STATE_VAR = 2;
        const STATE_BLOCK = 1;
        const STATE_DATA = 0;
        const REGEX_NUMBER = '/[0-9]+(?:\.[0-9]+)?/A';
        const REGEX_NAME = '/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/A';
        const STATE_INTERPOLATION = 4;
        const STATE_STRING = 3;
        const PUNCTUATION = '()[]{}?:.,|';
        const REGEX_DQ_STRING_PART = '/[^#"\\\\]*(?:(?:\\\\.|#(?!\{))[^#"\\\\]*)*/As';
        const REGEX_DQ_STRING_DELIM = '/"/A';
        const REGEX_STRING = '/"([^#"\\\\]*(?:\\\\.[^#"\\\\]*)*)"|\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'/As';

        private $tokens;
        private $code;
        private $cursor;
        private $lineno;
        private $end;
        private $state;
        private $states;
        private $brackets;
        private $env;
        private $source;
        private $options;
        private $regexes;
        private $position;
        private $positions;
        private $currentVarBlockLine;

        public function __construct(Twig_Environment $env, array $options = array( )) {}
        public function tokenize(Twig_Source $source) {}
        private function lexData() {}
        private function lexBlock() {}
        private function lexVar() {}
        private function lexExpression() {}
        private function lexRawData() {}
        private function lexComment() {}
        private function lexString() {}
        private function lexInterpolation() {}
        private function pushToken($type, $value = '') {}
        private function moveCursor($text) {}
        private function getOperatorRegex() {}
        private function pushState($state) {}
        private function popState() {}
    }

    /**
     * Base class for all token parsers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class Twig_TokenParser implements \twig_tokenparserinterface {
        /**
         * @var Twig_Parser
         */
        protected $parser;

        public function setParser(Twig_Parser $parser) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    final class Twig_ExtensionSet {
        private $extensions;
        private $initialized;
        private $runtimeInitialized;
        private $staging;
        private $parsers;
        private $visitors;
        private $filters;
        private $tests;
        private $functions;
        private $unaryOperators;
        private $binaryOperators;
        private $globals;
        private $functionCallbacks;
        private $filterCallbacks;
        private $lastModified;

        public function __construct() {}
        public function initRuntime(Twig_Environment $env) {}
        public function hasExtension($class) {}
        public function getExtension($class) {}
        public function setExtensions(array $extensions) {}
        /**
         * Returns all registered extensions.
         *
         * @return array An array of extensions
         */
        public function getExtensions() {}
        public function getSignature() {}
        public function isInitialized() {}
        public function getLastModified() {}
        public function addExtension(Twig_ExtensionInterface $extension) {}
        public function addFunction(Twig_Function $function) {}
        public function getFunctions() {}
        public function getFunction($name) {}
        public function registerUndefinedFunctionCallback(callable $callable) {}
        public function addFilter(Twig_Filter $filter) {}
        public function getFilters() {}
        public function getFilter($name) {}
        public function registerUndefinedFilterCallback(callable $callable) {}
        public function addNodeVisitor(Twig_NodeVisitorInterface $visitor) {}
        public function getNodeVisitors() {}
        public function addTokenParser(Twig_TokenParserInterface $parser) {}
        public function getTokenParsers() {}
        public function getGlobals() {}
        public function addTest(Twig_Test $test) {}
        public function getTests() {}
        public function getTest($name) {}
        /**
         * Gets the registered unary Operators.
         *
         * @return array An array of unary operators
         */
        public function getUnaryOperators() {}
        /**
         * Gets the registered binary Operators.
         *
         * @return array An array of binary operators
         */
        public function getBinaryOperators() {}
        private function initExtensions() {}
        private function initExtension(Twig_ExtensionInterface $extension) {}
    }

    /**
     * Default autoescaping strategy based on file names.
     *
     * This strategy sets the HTML as the default autoescaping strategy,
     * but changes it based on the template name.
     *
     * Note that there is no runtime performance impact as the
     * default autoescaping strategy is set at compilation time.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_FileExtensionEscapingStrategy {
        public static function guess($name) {}
    }

    /**
     * Holds information about a non-compiled Twig template.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Source {
        private $code;
        private $name;
        private $path;

        public function __construct($code, $name, $path = '') {}
        public function getCode() {}
        public function getName() {}
        public function getPath() {}
    }

    /**
     * Lazily loads Twig runtime implementations from a PSR-11 container.
     *
     * Note that the runtime services MUST use their class names as identifiers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Robin Chalas <robin.chalas@gmail.com>
     */
    class Twig_ContainerRuntimeLoader implements \twig_runtimeloaderinterface {
        private $container;

        public function __construct(ContainerInterface $container) {}
        public function load($class) {}
    }

    /**
     * Default base class for compiled templates.
     *
     * This class is an implementation detail of how template compilation currently
     * works, which might change. It should never be used directly. Use $twig->load()
     * instead, which returns an instance of Twig_TemplateWrapper.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    abstract class Twig_Template {
        const METHOD_CALL = 'method';
        const ARRAY_CALL = 'array';
        const ANY_CALL = 'any';

        protected $parent;
        protected $parents;
        protected $env;
        protected $blocks;
        protected $traits;
        /**
         * @internal
         */
        protected $extensions;

        public function __construct(Twig_Environment $env) {}
        /**
         * @internal this method will be removed in 2.0 and is only used internally to provide an upgrade path from 1.x to 2.0
         */
        public function __toString() {}
        /**
         * Returns the template name.
         *
         * @return string The template name
         */
        abstract public function getTemplateName() ;
        /**
         * Returns debug information about the template.
         *
         * @return array Debug information
         *
         * @internal
         */
        abstract public function getDebugInfo() ;
        /**
         * Returns information about the original template source code.
         *
         * @return Twig_Source
         */
        public function getSourceContext() {}
        public function getParent(array $context) {}
        protected function doGetParent(array $context) {}
        public function isTraitable() {}
        public function displayParentBlock($name, array $context, array $blocks = array( )) {}
        public function displayBlock($name, array $context, array $blocks = array( ), $useBlocks = true) {}
        public function renderParentBlock($name, array $context, array $blocks = array( )) {}
        public function renderBlock($name, array $context, array $blocks = array( ), $useBlocks = true) {}
        public function hasBlock($name, array $context, array $blocks = array( )) {}
        public function getBlockNames(array $context, array $blocks = array( )) {}
        protected function loadTemplate($template, $templateName = null, $line = null, $index = null) {}
        /**
         * Returns all blocks.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @return array An array of blocks
         *
         * @internal
         */
        public function getBlocks() {}
        public function display(array $context, array $blocks = array( )) {}
        public function render(array $context) {}
        protected function displayWithErrorHandling(array $context, array $blocks = array( )) {}
        abstract protected function doDisplay(array $context, array $blocks = array( )) ;
    }

    abstract class Twig_Extension implements \twig_extensioninterface {
        public function getTokenParsers() {}
        public function getNodeVisitors() {}
        public function getFilters() {}
        public function getTests() {}
        public function getFunctions() {}
        public function getOperators() {}
    }

    /**
     * Twig_NodeTraverser is a node traverser.
     *
     * It visits all nodes and their children and calls the given visitor for each.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_NodeTraverser {
        private $env;
        private $visitors;

        public function __construct(Twig_Environment $env, array $visitors = array( )) {}
        public function addVisitor(Twig_NodeVisitorInterface $visitor) {}
        public function traverse(Twig_Node $node) {}
        private function traverseForVisitor(Twig_NodeVisitorInterface $visitor, Twig_Node $node) {}
    }

    /**
     * Compiles a node to PHP code.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Compiler {
        private $lastLine;
        private $source;
        private $indentation;
        private $env;
        private $debugInfo;
        private $sourceOffset;
        private $sourceLine;
        private $varNameSalt;

        public function __construct(Twig_Environment $env) {}
        /**
         * Returns the environment instance related to this compiler.
         *
         * @return Twig_Environment
         */
        public function getEnvironment() {}
        /**
         * Gets the current PHP code after compilation.
         *
         * @return string The PHP code
         */
        public function getSource() {}
        public function compile(Twig_Node $node, $indentation = 0) {}
        public function subcompile(Twig_Node $node, $raw = true) {}
        public function raw($string) {}
        public function write($strings) {}
        public function string($value) {}
        public function repr($value) {}
        public function addDebugInfo(Twig_Node $node) {}
        public function getDebugInfo() {}
        public function indent($step = 1) {}
        public function outdent($step = 1) {}
        public function getVarName() {}
    }

    /**
     * For Twig 1.x compatibility.
     */
    final class Twig_SimpleFilter extends \twig_filter {}

    /**
     * Stores the Twig configuration.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Environment {
        const VERSION = '2.4.8';
        const VERSION_ID = 20408;
        const RELEASE_VERSION = 8;
        const EXTRA_VERSION = '';
        const MAJOR_VERSION = 2;
        const MINOR_VERSION = 4;

        private $charset;
        private $loader;
        private $debug;
        private $autoReload;
        private $cache;
        private $lexer;
        private $parser;
        private $compiler;
        private $baseTemplateClass;
        private $globals;
        private $resolvedGlobals;
        private $loadedTemplates;
        private $strictVariables;
        private $templateClassPrefix;
        private $originalCache;
        private $extensionSet;
        private $runtimeLoaders;
        private $runtimes;
        private $optionsHash;
        private $loading;

        public function __construct(Twig_LoaderInterface $loader, $options = array( )) {}
        /**
         * Gets the base template class for compiled templates.
         *
         * @return string The base template class name
         */
        public function getBaseTemplateClass() {}
        public function setBaseTemplateClass($class) {}
        /**
         * Enables debugging mode.
         */
        public function enableDebug() {}
        /**
         * Disables debugging mode.
         */
        public function disableDebug() {}
        /**
         * Checks if debug mode is enabled.
         *
         * @return bool true if debug mode is enabled, false otherwise
         */
        public function isDebug() {}
        /**
         * Enables the auto_reload option.
         */
        public function enableAutoReload() {}
        /**
         * Disables the auto_reload option.
         */
        public function disableAutoReload() {}
        /**
         * Checks if the auto_reload option is enabled.
         *
         * @return bool true if auto_reload is enabled, false otherwise
         */
        public function isAutoReload() {}
        /**
         * Enables the strict_variables option.
         */
        public function enableStrictVariables() {}
        /**
         * Disables the strict_variables option.
         */
        public function disableStrictVariables() {}
        /**
         * Checks if the strict_variables option is enabled.
         *
         * @return bool true if strict_variables is enabled, false otherwise
         */
        public function isStrictVariables() {}
        public function getCache($original = true) {}
        public function setCache($cache) {}
        public function getTemplateClass($name, $index = null) {}
        public function render($name, array $context = array( )) {}
        public function display($name, array $context = array( )) {}
        public function load($name) {}
        public function loadTemplate($name, $index = null) {}
        public function createTemplate($template) {}
        public function isTemplateFresh($name, $time) {}
        public function resolveTemplate($names) {}
        public function setLexer(Twig_Lexer $lexer) {}
        public function tokenize(Twig_Source $source) {}
        public function setParser(Twig_Parser $parser) {}
        public function parse(Twig_TokenStream $stream) {}
        public function setCompiler(Twig_Compiler $compiler) {}
        public function compile(Twig_Node $node) {}
        public function compileSource(Twig_Source $source) {}
        public function setLoader(Twig_LoaderInterface $loader) {}
        /**
         * Gets the Loader instance.
         *
         * @return Twig_LoaderInterface
         */
        public function getLoader() {}
        public function setCharset($charset) {}
        /**
         * Gets the default template charset.
         *
         * @return string The default charset
         */
        public function getCharset() {}
        public function hasExtension($class) {}
        public function addRuntimeLoader(Twig_RuntimeLoaderInterface $loader) {}
        public function getExtension($class) {}
        public function getRuntime($class) {}
        public function addExtension(Twig_ExtensionInterface $extension) {}
        public function setExtensions(array $extensions) {}
        /**
         * Returns all registered extensions.
         *
         * @return Twig_ExtensionInterface[] An array of extensions (keys are for internal usage only and should not be relied on)
         */
        public function getExtensions() {}
        public function addTokenParser(Twig_TokenParserInterface $parser) {}
        /**
         * Gets the registered Token Parsers.
         *
         * @return Twig_TokenParserInterface[]
         *
         * @internal
         */
        public function getTokenParsers() {}
        /**
         * Gets registered tags.
         *
         * @return Twig_TokenParserInterface[]
         *
         * @internal
         */
        public function getTags() {}
        public function addNodeVisitor(Twig_NodeVisitorInterface $visitor) {}
        /**
         * Gets the registered Node Visitors.
         *
         * @return Twig_NodeVisitorInterface[]
         *
         * @internal
         */
        public function getNodeVisitors() {}
        public function addFilter(Twig_Filter $filter) {}
        public function getFilter($name) {}
        public function registerUndefinedFilterCallback(callable $callable) {}
        /**
         * Gets the registered Filters.
         *
         * Be warned that this method cannot return filters defined with registerUndefinedFilterCallback.
         *
         * @return Twig_Filter[]
         *
         * @see registerUndefinedFilterCallback
         *
         * @internal
         */
        public function getFilters() {}
        public function addTest(Twig_Test $test) {}
        /**
         * Gets the registered Tests.
         *
         * @return Twig_Test[]
         *
         * @internal
         */
        public function getTests() {}
        public function getTest($name) {}
        public function addFunction(Twig_Function $function) {}
        public function getFunction($name) {}
        public function registerUndefinedFunctionCallback(callable $callable) {}
        /**
         * Gets registered functions.
         *
         * Be warned that this method cannot return functions defined with registerUndefinedFunctionCallback.
         *
         * @return Twig_Function[]
         *
         * @see registerUndefinedFunctionCallback
         *
         * @internal
         */
        public function getFunctions() {}
        public function addGlobal($name, $value) {}
        /**
         * Gets the registered Globals.
         *
         * @return array An array of globals
         *
         * @internal
         */
        public function getGlobals() {}
        public function mergeGlobals(array $context) {}
        /**
         * Gets the registered unary Operators.
         *
         * @return array An array of unary operators
         *
         * @internal
         */
        public function getUnaryOperators() {}
        /**
         * Gets the registered binary Operators.
         *
         * @return array An array of binary operators
         *
         * @internal
         */
        public function getBinaryOperators() {}
        private function updateOptionsHash() {}
    }

    /**
     * Represents a token stream.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_TokenStream {
        private $tokens;
        private $current;
        private $source;

        public function __construct(array $tokens, Twig_Source $source = null) {}
        public function __toString() {}
        public function injectTokens(array $tokens) {}
        /**
         * Sets the pointer to the next token and returns the old one.
         *
         * @return Twig_Token
         */
        public function next() {}
        public function nextIf($primary, $secondary = null) {}
        public function expect($type, $value = null, $message = null) {}
        public function look($number = 1) {}
        public function test($primary, $secondary = null) {}
        /**
         * Checks if end of stream was reached.
         *
         * @return bool
         */
        public function isEOF() {}
        /**
         * @return Twig_Token
         */
        public function getCurrent() {}
        /**
         * Gets the source associated with this stream.
         *
         * @return Twig_Source
         *
         * @internal
         */
        public function getSourceContext() {}
    }

    final class Twig_Extension_Escaper extends \twig_extension {
        private $defaultStrategy;

        public function __construct($defaultStrategy = 'html') {}
        public function getTokenParsers() {}
        public function getNodeVisitors() {}
        public function getFilters() {}
        public function setDefaultStrategy($defaultStrategy) {}
        public function getDefaultStrategy($name) {}
    }

    final class Twig_Extension_Debug extends \twig_extension {
        public function getFunctions() {}
    }

    final class Twig_Extension_StringLoader extends \twig_extension {
        public function getFunctions() {}
    }

    final class Twig_Extension_Sandbox extends \twig_extension {
        private $sandboxedGlobally;
        private $sandboxed;
        private $policy;

        public function __construct(Twig_Sandbox_SecurityPolicyInterface $policy, $sandboxed = false) {}
        public function getTokenParsers() {}
        public function getNodeVisitors() {}
        public function enableSandbox() {}
        public function disableSandbox() {}
        public function isSandboxed() {}
        public function isSandboxedGlobally() {}
        public function setSecurityPolicy(Twig_Sandbox_SecurityPolicyInterface $policy) {}
        public function getSecurityPolicy() {}
        public function checkSecurity($tags, $filters, $functions) {}
        public function checkMethodAllowed($obj, $method) {}
        public function checkPropertyAllowed($obj, $method) {}
        public function ensureToStringAllowed($obj) {}
    }

    final class Twig_Extension_Optimizer extends \twig_extension {
        private $optimizers;

        public function __construct($optimizers = -1) {}
        public function getNodeVisitors() {}
    }

    /**
     * Used by Twig_Environment as a staging area.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    final class Twig_Extension_Staging extends \twig_extension {
        private $functions;
        private $filters;
        private $visitors;
        private $tokenParsers;
        private $tests;

        public function addFunction(Twig_Function $function) {}
        public function getFunctions() {}
        public function addFilter(Twig_Filter $filter) {}
        public function getFilters() {}
        public function addNodeVisitor(Twig_NodeVisitorInterface $visitor) {}
        public function getNodeVisitors() {}
        public function addTokenParser(Twig_TokenParserInterface $parser) {}
        public function getTokenParsers() {}
        public function addTest(Twig_Test $test) {}
        public function getTests() {}
    }

    class Twig_Extension_Profiler extends \twig_extension {
        private $actives;

        public function __construct(Twig_Profiler_Profile $profile) {}
        public function enter(Twig_Profiler_Profile $profile) {}
        public function leave(Twig_Profiler_Profile $profile) {}
        public function getNodeVisitors() {}
    }

    final class Twig_Extension_Core extends \twig_extension {
        private $dateFormats;
        private $numberFormat;
        private $timezone;
        private $escapers;

        public function setEscaper($strategy, callable $callable) {}
        /**
         * Gets all defined escapers.
         *
         * @return callable[] An array of escapers
         */
        public function getEscapers() {}
        public function setDateFormat($format = null, $dateIntervalFormat = null) {}
        /**
         * Gets the default format to be used by the date filter.
         *
         * @return array The default date format string and the default date interval format string
         */
        public function getDateFormat() {}
        public function setTimezone($timezone) {}
        /**
         * Gets the default timezone to be used by the date filter.
         *
         * @return DateTimeZone The default timezone currently in use
         */
        public function getTimezone() {}
        public function setNumberFormat($decimal, $decimalPoint, $thousandSep) {}
        /**
         * Get the default format used by the number_format filter.
         *
         * @return array The arguments for number_format()
         */
        public function getNumberFormat() {}
        public function getTokenParsers() {}
        public function getFilters() {}
        public function getFunctions() {}
        public function getTests() {}
        public function getOperators() {}
    }

    /**
     * Implements a cache on the filesystem.
     *
     * @author Andrew Tch <andrew@noop.lv>
     */
    class Twig_Cache_Filesystem implements \twig_cacheinterface {
        const FORCE_BYTECODE_INVALIDATION = 1;

        private $directory;
        private $options;

        public function __construct($directory, $options = 0) {}
        public function generateKey($name, $className) {}
        public function load($key) {}
        public function write($key, $content) {}
        public function getTimestamp($key) {}
    }

    /**
     * Implements a no-cache strategy.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Cache_Null implements \twig_cacheinterface {
        public function generateKey($name, $className) {}
        public function write($key, $content) {}
        public function load($key) {}
        public function getTimestamp($key) {}
    }

    final class Twig_NodeVisitor_SafeAnalysis extends \twig_basenodevisitor {
        private $data;
        private $safeVars;

        public function setSafeVars($safeVars) {}
        public function getSafe(Twig_Node $node) {}
        private function setSafe(Twig_Node $node, array $safe) {}
        protected function doEnterNode(Twig_Node $node, Twig_Environment $env) {}
        protected function doLeaveNode(Twig_Node $node, Twig_Environment $env) {}
        private function intersectSafe(array $a = null, array $b = null) {}
        public function getPriority() {}
    }

    /**
     * Twig_NodeVisitor_Escaper implements output escaping.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_NodeVisitor_Escaper extends \twig_basenodevisitor {
        private $statusStack;
        private $blocks;
        private $safeAnalysis;
        private $traverser;
        private $defaultStrategy;
        private $safeVars;

        public function __construct() {}
        protected function doEnterNode(Twig_Node $node, Twig_Environment $env) {}
        protected function doLeaveNode(Twig_Node $node, Twig_Environment $env) {}
        private function escapePrintNode(Twig_Node_Print $node, Twig_Environment $env, $type) {}
        private function preEscapeFilterNode(Twig_Node_Expression_Filter $filter, Twig_Environment $env) {}
        private function isSafeFor($type, Twig_Node $expression, $env) {}
        private function needEscaping(Twig_Environment $env) {}
        private function getEscaperFilter($type, Twig_Node $node) {}
        public function getPriority() {}
    }

    /**
     * Twig_NodeVisitor_Sandbox implements sandboxing.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_NodeVisitor_Sandbox extends \twig_basenodevisitor {
        private $inAModule;
        private $tags;
        private $filters;
        private $functions;

        protected function doEnterNode(Twig_Node $node, Twig_Environment $env) {}
        protected function doLeaveNode(Twig_Node $node, Twig_Environment $env) {}
        public function getPriority() {}
    }

    /**
     * Twig_NodeVisitor_Optimizer tries to optimizes the AST.
     *
     * This visitor is always the last registered one.
     *
     * You can configure which optimizations you want to activate via the
     * optimizer mode.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_NodeVisitor_Optimizer extends \twig_basenodevisitor {
        const OPTIMIZE_ALL = -1;
        const OPTIMIZE_NONE = 0;
        const OPTIMIZE_FOR = 2;
        const OPTIMIZE_RAW_FILTER = 4;
        const OPTIMIZE_VAR_ACCESS = 8;

        private $loops;
        private $loopsTargets;
        private $optimizers;

        public function __construct($optimizers = -1) {}
        protected function doEnterNode(Twig_Node $node, Twig_Environment $env) {}
        protected function doLeaveNode(Twig_Node $node, Twig_Environment $env) {}
        private function optimizePrintNode(Twig_Node $node, Twig_Environment $env) {}
        private function optimizeRawFilter(Twig_Node $node, Twig_Environment $env) {}
        private function enterOptimizeFor(Twig_Node $node, Twig_Environment $env) {}
        private function leaveOptimizeFor(Twig_Node $node, Twig_Environment $env) {}
        private function addLoopToCurrent() {}
        private function addLoopToAll() {}
        public function getPriority() {}
    }

    abstract class Twig_Test_NodeTestCase extends \phpunit\framework\testcase {
        abstract public function getTests() ;
        public function testCompile($node, $source, $environment = null, $isPattern = false) {}
        public function assertNodeCompilation($source, Twig_Node $node, Twig_Environment $environment = null, $isPattern = false) {}
        protected function getCompiler(Twig_Environment $environment = null) {}
        protected function getEnvironment() {}
        protected function getVariableGetter($name, $line = false) {}
        protected function getAttributeGetter() {}
    }

    /**
     * Integration test helper.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Karma Dordrak <drak@zikula.org>
     */
    abstract class Twig_Test_IntegrationTestCase extends \phpunit\framework\testcase {
        /**
         * @return string
         */
        abstract protected function getFixturesDir() ;
        /**
         * @return Twig_RuntimeLoaderInterface[]
         */
        protected function getRuntimeLoaders() {}
        /**
         * @return Twig_ExtensionInterface[]
         */
        protected function getExtensions() {}
        /**
         * @return Twig_Filter[]
         */
        protected function getTwigFilters() {}
        /**
         * @return Twig_Function[]
         */
        protected function getTwigFunctions() {}
        /**
         * @return Twig_Test[]
         */
        protected function getTwigTests() {}
        public function testIntegration($file, $message, $condition, $templates, $exception, $outputs) {}
        public function testLegacyIntegration($file, $message, $condition, $templates, $exception, $outputs) {}
        public function getTests($name, $legacyTests = false) {}
        public function getLegacyTests() {}
        protected function doIntegrationTest($file, $message, $condition, $templates, $exception, $outputs) {}
        protected static function parseTemplates($test) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Util_DeprecationCollector {
        private $twig;

        public function __construct(Twig_Environment $twig) {}
        public function collectDir($dir, $ext = '.twig') {}
        public function collect(Traversable $iterator) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Util_TemplateDirIterator extends \iteratoriterator {
        public function current() {}
        public function key() {}
    }

    /**
     * Represents a security policy which need to be enforced when sandbox mode is enabled.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Sandbox_SecurityPolicy implements \twig_sandbox_securitypolicyinterface {
        private $allowedTags;
        private $allowedFilters;
        private $allowedMethods;
        private $allowedProperties;
        private $allowedFunctions;

        public function __construct(array $allowedTags = array( ), array $allowedFilters = array( ), array $allowedMethods = array( ), array $allowedProperties = array( ), array $allowedFunctions = array( )) {}
        public function setAllowedTags(array $tags) {}
        public function setAllowedFilters(array $filters) {}
        public function setAllowedMethods(array $methods) {}
        public function setAllowedProperties(array $properties) {}
        public function setAllowedFunctions(array $functions) {}
        public function checkSecurity($tags, $filters, $functions) {}
        public function checkMethodAllowed($obj, $method) {}
        public function checkPropertyAllowed($obj, $property) {}
    }

    /**
     * Exception thrown when a not allowed function is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class Twig_Sandbox_SecurityNotAllowedFunctionError extends \twig_sandbox_securityerror {
        private $functionName;

        public function __construct($message, $functionName, $lineno = -1, $filename = null, Exception $previous = null) {}
        public function getFunctionName() {}
    }

    /**
     * Exception thrown when a not allowed class method is used in a template.
     *
     * @author Kit Burton-Senior <mail@kitbs.com>
     */
    class Twig_Sandbox_SecurityNotAllowedMethodError extends \twig_sandbox_securityerror {
        private $className;
        private $methodName;

        public function __construct($message, $className, $methodName, $lineno = -1, $filename = null, Exception $previous = null) {}
        public function getClassName() {}
        public function getMethodName() {}
    }

    /**
     * Exception thrown when a security error occurs at runtime.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Sandbox_SecurityError extends \twig_error {}

    /**
     * Exception thrown when a not allowed tag is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class Twig_Sandbox_SecurityNotAllowedTagError extends \twig_sandbox_securityerror {
        private $tagName;

        public function __construct($message, $tagName, $lineno = -1, $filename = null, Exception $previous = null) {}
        public function getTagName() {}
    }

    /**
     * Exception thrown when a not allowed filter is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class Twig_Sandbox_SecurityNotAllowedFilterError extends \twig_sandbox_securityerror {
        private $filterName;

        public function __construct($message, $functionName, $lineno = -1, $filename = null, Exception $previous = null) {}
        public function getFilterName() {}
    }

    /**
     * Exception thrown when a not allowed class property is used in a template.
     *
     * @author Kit Burton-Senior <mail@kitbs.com>
     */
    class Twig_Sandbox_SecurityNotAllowedPropertyError extends \twig_sandbox_securityerror {
        private $className;
        private $propertyName;

        public function __construct($message, $className, $propertyName, $lineno = -1, $filename = null, Exception $previous = null) {}
        public function getClassName() {}
        public function getPropertyName() {}
    }

    /**
     * Loads templates from other loaders.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Loader_Chain implements \twig_sourcecontextloaderinterface, \twig_loaderinterface, \twig_existsloaderinterface {
        private $hasSourceCache;
        private $loaders;

        public function __construct(array $loaders = array( )) {}
        public function addLoader(Twig_LoaderInterface $loader) {}
        public function getSourceContext($name) {}
        public function exists($name) {}
        public function getCacheKey($name) {}
        public function isFresh($name, $time) {}
    }

    /**
     * Loads template from the filesystem.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Loader_Filesystem implements \twig_sourcecontextloaderinterface, \twig_existsloaderinterface, \twig_loaderinterface {
        const MAIN_NAMESPACE = '__main__';

        protected $paths;
        protected $cache;
        protected $errorCache;
        private $rootPath;

        public function __construct($paths = array( ), $rootPath = null) {}
        public function getPaths($namespace = self::MAIN_NAMESPACE) {}
        /**
         * Returns the path namespaces.
         *
         * The main namespace is always defined.
         *
         * @return array The array of defined namespaces
         */
        public function getNamespaces() {}
        public function setPaths($paths, $namespace = self::MAIN_NAMESPACE) {}
        public function addPath($path, $namespace = self::MAIN_NAMESPACE) {}
        public function prependPath($path, $namespace = self::MAIN_NAMESPACE) {}
        public function getSourceContext($name) {}
        public function getCacheKey($name) {}
        public function exists($name) {}
        public function isFresh($name, $time) {}
        protected function findTemplate($name, $throw = true) {}
        private function normalizeName($name) {}
        private function parseName($name, $default = self::MAIN_NAMESPACE) {}
        private function validateName($name) {}
        private function isAbsolutePath($file) {}
    }

    /**
     * Loads a template from an array.
     *
     * When using this loader with a cache mechanism, you should know that a new cache
     * key is generated each time a template content "changes" (the cache key being the
     * source code of the template). If you don't want to see your cache grows out of
     * control, you need to take care of clearing the old cache file by yourself.
     *
     * This loader should only be used for unit testing.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Loader_Array implements \twig_loaderinterface, \twig_sourcecontextloaderinterface, \twig_existsloaderinterface {
        private $templates;

        public function __construct(array $templates = array( )) {}
        public function setTemplate($name, $template) {}
        public function getSourceContext($name) {}
        public function exists($name) {}
        public function getCacheKey($name) {}
        public function isFresh($name, $time) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final since version 2.4.0
     */
    class Twig_Profiler_Profile implements \serializable, \iteratoraggregate {
        const MACRO = 'macro';
        const TEMPLATE = 'template';
        const BLOCK = 'block';
        const ROOT = 'ROOT';

        private $template;
        private $name;
        private $type;
        private $starts;
        private $ends;
        private $profiles;

        public function __construct($template = 'main', $type = self::ROOT, $name = 'main') {}
        public function getTemplate() {}
        public function getType() {}
        public function getName() {}
        public function isRoot() {}
        public function isTemplate() {}
        public function isBlock() {}
        public function isMacro() {}
        public function getProfiles() {}
        public function addProfile(Twig_Profiler_Profile $profile) {}
        /**
         * Returns the duration in microseconds.
         *
         * @return int
         */
        public function getDuration() {}
        /**
         * Returns the memory usage in bytes.
         *
         * @return int
         */
        public function getMemoryUsage() {}
        /**
         * Returns the peak memory usage in bytes.
         *
         * @return int
         */
        public function getPeakMemoryUsage() {}
        /**
         * Starts the profiling.
         */
        public function enter() {}
        /**
         * Stops the profiling.
         */
        public function leave() {}
        public function reset() {}
        public function getIterator() {}
        public function serialize() {}
        public function unserialize($data) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Profiler_NodeVisitor_Profiler extends \twig_basenodevisitor {
        private $extensionName;

        public function __construct($extensionName) {}
        protected function doEnterNode(Twig_Node $node, Twig_Environment $env) {}
        protected function doLeaveNode(Twig_Node $node, Twig_Environment $env) {}
        private function getVarName() {}
        public function getPriority() {}
    }

    /**
     * Represents a profile leave node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Profiler_Node_LeaveProfile extends \twig_node {
        public function __construct($varName) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a profile enter node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Profiler_Node_EnterProfile extends \twig_node {
        public function __construct($extensionName, $type, $name, $varName) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Profiler_Dumper_Blackfire {
        public function dump(Twig_Profiler_Profile $profile) {}
        private function dumpChildren($parent, Twig_Profiler_Profile $profile, $data) {}
        private function dumpProfile($edge, Twig_Profiler_Profile $profile, $data) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Profiler_Dumper_Html extends \twig_profiler_dumper_base {
        static private $colors;

        public function dump(Twig_Profiler_Profile $profile) {}
        protected function formatTemplate(Twig_Profiler_Profile $profile, $prefix) {}
        protected function formatNonTemplate(Twig_Profiler_Profile $profile, $prefix) {}
        protected function formatTime(Twig_Profiler_Profile $profile, $percent) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class Twig_Profiler_Dumper_Base {
        private $root;

        public function dump(Twig_Profiler_Profile $profile) {}
        abstract protected function formatTemplate(Twig_Profiler_Profile $profile, $prefix) ;
        abstract protected function formatNonTemplate(Twig_Profiler_Profile $profile, $prefix) ;
        abstract protected function formatTime(Twig_Profiler_Profile $profile, $percent) ;
        private function dumpProfile(Twig_Profiler_Profile $profile, $prefix = '', $sibling = false) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_Profiler_Dumper_Text extends \twig_profiler_dumper_base {
        protected function formatTemplate(Twig_Profiler_Profile $profile, $prefix) {}
        protected function formatNonTemplate(Twig_Profiler_Profile $profile, $prefix) {}
        protected function formatTime(Twig_Profiler_Profile $profile, $percent) {}
    }

    /**
     * Loops over each item of a sequence.
     *
     * <pre>
     * <ul>
     *  {% for user in users %}
     *    <li>{{ user.username|e }}</li>
     *  {% endfor %}
     * </ul>
     * </pre>
     */
    final class Twig_TokenParser_For extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideForFork(Twig_Token $token) {}
        public function decideForEnd(Twig_Token $token) {}
        private function checkLoopUsageCondition(Twig_TokenStream $stream, Twig_Node $node) {}
        private function checkLoopUsageBody(Twig_TokenStream $stream, Twig_Node $node) {}
        public function getTag() {}
    }

    /**
     * Marks a section of a template to be escaped or not.
     */
    final class Twig_TokenParser_AutoEscape extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideBlockEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Imports macros.
     *
     * <pre>
     *   {% import 'forms.html' as forms %}
     * </pre>
     */
    final class Twig_TokenParser_Import extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Includes a template.
     *
     * <pre>
     *   {% include 'header.html' %}
     *     Body
     *   {% include 'footer.html' %}
     * </pre>
     */
    class Twig_TokenParser_Include extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        protected function parseArguments() {}
        public function getTag() {}
    }

    /**
     * Evaluates an expression, discarding the returned value.
     */
    final class Twig_TokenParser_Do extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Creates a nested scope.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class Twig_TokenParser_With extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideWithEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Imports macros.
     *
     * <pre>
     *   {% from 'forms.html' import forms %}
     * </pre>
     */
    final class Twig_TokenParser_From extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Extends a template by another one.
     *
     * <pre>
     *  {% extends "base.html" %}
     * </pre>
     */
    final class Twig_TokenParser_Extends extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Imports blocks defined in another template into the current template.
     *
     * <pre>
     * {% extends "base.html" %}
     *
     * {% use "blocks.html" %}
     *
     * {% block title %}{% endblock %}
     * {% block content %}{% endblock %}
     * </pre>
     *
     * @see http://www.twig-project.org/doc/templates.html#horizontal-reuse for details.
     */
    final class Twig_TokenParser_Use extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Defines a variable.
     *
     * <pre>
     *  {% set foo = 'foo' %}
     *
     *  {% set foo = [1, 2] %}
     *
     *  {% set foo = {'foo': 'bar'} %}
     *
     *  {% set foo = 'foo' ~ 'bar' %}
     *
     *  {% set foo, bar = 'foo', 'bar' %}
     *
     *  {% set foo %}Some content{% endset %}
     * </pre>
     */
    final class Twig_TokenParser_Set extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideBlockEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Tests a condition.
     *
     * <pre>
     * {% if users %}
     *  <ul>
     *    {% for user in users %}
     *      <li>{{ user.username|e }}</li>
     *    {% endfor %}
     *  </ul>
     * {% endif %}
     * </pre>
     */
    final class Twig_TokenParser_If extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideIfFork(Twig_Token $token) {}
        public function decideIfEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Marks a section of a template as being reusable.
     *
     * <pre>
     *  {% block head %}
     *    <link rel="stylesheet" href="style.css" />
     *    <title>{% block title %}{% endblock %} - My Webpage</title>
     *  {% endblock %}
     * </pre>
     */
    final class Twig_TokenParser_Block extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideBlockEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Embeds a template.
     */
    final class Twig_TokenParser_Embed extends \twig_tokenparser_include {
        public function parse(Twig_Token $token) {}
        public function decideBlockEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Marks a section of a template as untrusted code that must be evaluated in the sandbox mode.
     *
     * <pre>
     * {% sandbox %}
     *     {% include 'user.html' %}
     * {% endsandbox %}
     * </pre>
     *
     * @see http://www.twig-project.org/doc/api.html#sandbox-extension for details
     */
    final class Twig_TokenParser_Sandbox extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideBlockEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Remove whitespaces between HTML tags.
     *
     * <pre>
     * {% spaceless %}
     *      <div>
     *          <strong>foo</strong>
     *      </div>
     * {% endspaceless %}
     *
     * {# output will be <div><strong>foo</strong></div> #}
     * </pre>
     */
    final class Twig_TokenParser_Spaceless extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideSpacelessEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Flushes the output to the client.
     *
     * @see flush()
     */
    final class Twig_TokenParser_Flush extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Filters a section of a template by applying filters.
     *
     * <pre>
     * {% filter upper %}
     *  This text becomes uppercase
     * {% endfilter %}
     * </pre>
     */
    final class Twig_TokenParser_Filter extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideBlockEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Defines a macro.
     *
     * <pre>
     * {% macro input(name, value, type, size) %}
     *    <input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />
     * {% endmacro %}
     * </pre>
     */
    final class Twig_TokenParser_Macro extends \twig_tokenparser {
        public function parse(Twig_Token $token) {}
        public function decideBlockEnd(Twig_Token $token) {}
        public function getTag() {}
    }

    /**
     * Abstract class for all nodes that represents an expression.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class Twig_Node_Expression extends \twig_node {}

    /**
     * Represents a for node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_For extends \twig_node {
        private $loop;

        public function __construct(Twig_Node_Expression_AssignName $keyTarget, Twig_Node_Expression_AssignName $valueTarget, Twig_Node_Expression $seq, Twig_Node_Expression $ifexpr = null, Twig_Node $body, Twig_Node $else = null, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents an autoescape node.
     *
     * The value is the escaping strategy (can be html, js, ...)
     *
     * The true value is equivalent to html.
     *
     * If autoescaping is disabled, then the value is false.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_AutoEscape extends \twig_node {
        public function __construct($value, Twig_Node $body, $lineno, $tag = 'autoescape') {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_CheckSecurity extends \twig_node {
        private $usedFilters;
        private $usedTags;
        private $usedFunctions;

        public function __construct(array $usedFilters, array $usedTags, array $usedFunctions) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents an import node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Import extends \twig_node {
        public function __construct(Twig_Node_Expression $expr, Twig_Node_Expression $var, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents an include node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Include extends \twig_node implements \twig_nodeoutputinterface {
        public function __construct(Twig_Node_Expression $expr, Twig_Node_Expression $variables = null, $only = false, $ignoreMissing = false, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
        protected function addGetTemplate(Twig_Compiler $compiler) {}
        protected function addTemplateArguments(Twig_Compiler $compiler) {}
    }

    /**
     * Internal node used by the for node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_ForLoop extends \twig_node {
        public function __construct($lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a body node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Body extends \twig_node {}

    /**
     * Represents a do node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Do extends \twig_node {
        public function __construct(Twig_Node_Expression $expr, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a nested "with" scope.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_With extends \twig_node {
        public function __construct(Twig_Node $body, Twig_Node $variables = null, $only = false, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a node that outputs an expression.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Print extends \twig_node implements \twig_nodeoutputinterface {
        public function __construct(Twig_Node_Expression $expr, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a set node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Set extends \twig_node implements \twig_nodecaptureinterface {
        public function __construct($capture, Twig_Node $names, Twig_Node $values, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents an if node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_If extends \twig_node {
        public function __construct(Twig_Node $tests, Twig_Node $else = null, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a block node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Block extends \twig_node {
        public function __construct($name, Twig_Node $body, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents an embed node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Embed extends \twig_node_include {
        public function __construct($name, $index, Twig_Node_Expression $variables = null, $only = false, $ignoreMissing = false, $lineno, $tag = null) {}
        protected function addGetTemplate(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a module node.
     *
     * Consider this class as being final. If you need to customize the behavior of
     * the generated class, consider adding nodes to the following nodes: display_start,
     * display_end, constructor_start, constructor_end, and class_end.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final since version 2.4.0
     */
    class Twig_Node_Module extends \twig_node {
        private $source;

        public function __construct(Twig_Node $body, Twig_Node_Expression $parent = null, Twig_Node $blocks, Twig_Node $macros, Twig_Node $traits, $embeddedTemplates, Twig_Source $source) {}
        public function setIndex($index) {}
        public function compile(Twig_Compiler $compiler) {}
        protected function compileTemplate(Twig_Compiler $compiler) {}
        protected function compileGetParent(Twig_Compiler $compiler) {}
        protected function compileClassHeader(Twig_Compiler $compiler) {}
        protected function compileConstructor(Twig_Compiler $compiler) {}
        protected function compileDisplay(Twig_Compiler $compiler) {}
        protected function compileClassFooter(Twig_Compiler $compiler) {}
        protected function compileMacros(Twig_Compiler $compiler) {}
        protected function compileGetTemplateName(Twig_Compiler $compiler) {}
        protected function compileIsTraitable(Twig_Compiler $compiler) {}
        protected function compileDebugInfo(Twig_Compiler $compiler) {}
        protected function compileGetSourceContext(Twig_Compiler $compiler) {}
        protected function compileLoadTemplate(Twig_Compiler $compiler, $node, $var) {}
    }

    /**
     * Represents a sandbox node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Sandbox extends \twig_node {
        public function __construct(Twig_Node $body, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a spaceless node.
     *
     * It removes spaces between HTML tags.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Spaceless extends \twig_node {
        public function __construct(Twig_Node $body, $lineno, $tag = 'spaceless') {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a flush node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Flush extends \twig_node {
        public function __construct($lineno, $tag) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a block call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_BlockReference extends \twig_node implements \twig_nodeoutputinterface {
        public function __construct($name, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a text node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Text extends \twig_node implements \twig_nodeoutputinterface {
        public function __construct($data, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Twig_Node_SandboxedPrint adds a check for the __toString() method
     * when the variable is an object and the sandbox is activated.
     *
     * When there is a simple Print statement, like {{ article }},
     * and if the sandbox is enabled, we need to check that the __toString()
     * method is allowed if 'article' is an object.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_SandboxedPrint extends \twig_node_print {
        public function compile(Twig_Compiler $compiler) {}
        private function removeNodeFilter(Twig_Node $node) {}
    }

    /**
     * Represents a macro node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Macro extends \twig_node {
        const VARARGS_NAME = 'varargs';

        public function __construct($name, Twig_Node $body, Twig_Node $arguments, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Constant extends \twig_node_expression {
        public function __construct($value, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Array extends \twig_node_expression {
        private $index;

        public function __construct(array $elements, $lineno) {}
        public function getKeyValuePairs() {}
        public function hasElement(Twig_Node_Expression $key) {}
        public function addElement(Twig_Node_Expression $value, Twig_Node_Expression $key = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_NullCoalesce extends \twig_node_expression_conditional {
        public function __construct(Twig_Node $left, Twig_Node $right, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Function extends \twig_node_expression_call {
        public function __construct($name, Twig_Node $arguments, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_MethodCall extends \twig_node_expression {
        public function __construct(Twig_Node_Expression $node, $method, Twig_Node_Expression_Array $arguments, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Test extends \twig_node_expression_call {
        public function __construct(Twig_Node $node, $name, Twig_Node $arguments = null, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    abstract class Twig_Node_Expression_Unary extends \twig_node_expression {
        public function __construct(Twig_Node $node, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
        abstract public function operator(Twig_Compiler $compiler) ;
    }

    class Twig_Node_Expression_AssignName extends \twig_node_expression_name {
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Filter extends \twig_node_expression_call {
        public function __construct(Twig_Node $node, Twig_Node_Expression_Constant $filterName, Twig_Node $arguments, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    abstract class Twig_Node_Expression_Binary extends \twig_node_expression {
        public function __construct(Twig_Node $left, Twig_Node $right, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
        abstract public function operator(Twig_Compiler $compiler) ;
    }

    abstract class Twig_Node_Expression_Call extends \twig_node_expression {
        private $reflector;

        protected function compileCallable(Twig_Compiler $compiler) {}
        protected function compileArguments(Twig_Compiler $compiler) {}
        protected function getArguments($callable = null, $arguments) {}
        protected function normalizeName($name) {}
        private function getCallableParameters($callable, $isVariadic) {}
        private function reflectCallable($callable) {}
    }

    /**
     * Represents a block call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_BlockReference extends \twig_node_expression {
        public function __construct(Twig_Node $name, Twig_Node $template = null, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
        private function compileTemplateCall(Twig_Compiler $compiler, $method) {}
        private function compileBlockArguments(Twig_Compiler $compiler) {}
    }

    /**
     * Represents a parent node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Parent extends \twig_node_expression {
        public function __construct($name, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Name extends \twig_node_expression {
        private $specialVars;

        public function __construct($name, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
        public function isSpecial() {}
        public function isSimple() {}
    }

    class Twig_Node_Expression_GetAttr extends \twig_node_expression {
        public function __construct(Twig_Node_Expression $node, Twig_Node_Expression $attribute, Twig_Node_Expression $arguments = null, $type, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Conditional extends \twig_node_expression {
        public function __construct(Twig_Node_Expression $expr1, Twig_Node_Expression $expr2, Twig_Node_Expression $expr3, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_TempName extends \twig_node_expression {
        public function __construct($name, $lineno) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Unary_Neg extends \twig_node_expression_unary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Unary_Pos extends \twig_node_expression_unary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Unary_Not extends \twig_node_expression_unary {
        public function operator(Twig_Compiler $compiler) {}
    }

    /**
     * Checks if a variable is the exact same value as a constant.
     *
     * <pre>
     *  {% if post.status is constant('Post::PUBLISHED') %}
     *    the status attribute is exactly the same as Post::PUBLISHED
     *  {% endif %}
     * </pre>
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Test_Constant extends \twig_node_expression_test {
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Checks if a variable is defined in the current context.
     *
     * <pre>
     * {# defined works with variable names and variable attributes #}
     * {% if foo is defined %}
     *     {# ... #}
     * {% endif %}
     * </pre>
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Test_Defined extends \twig_node_expression_test {
        public function __construct(Twig_Node $node, $name, Twig_Node $arguments = null, $lineno) {}
        private function changeIgnoreStrictCheck(Twig_Node_Expression_GetAttr $node) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Checks if a variable is the same as another one (=== in PHP).
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Test_Sameas extends \twig_node_expression_test {
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Checks that a variable is null.
     *
     * <pre>
     *  {{ var is none }}
     * </pre>
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Test_Null extends \twig_node_expression_test {
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Checks if a variable is divisible by a number.
     *
     * <pre>
     *  {% if loop.index is divisible by(3) %}
     * </pre>
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Test_Divisibleby extends \twig_node_expression_test {
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Checks if a number is even.
     *
     * <pre>
     *  {{ var is even }}
     * </pre>
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Test_Even extends \twig_node_expression_test {
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Checks if a number is odd.
     *
     * <pre>
     *  {{ var is odd }}
     * </pre>
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Test_Odd extends \twig_node_expression_test {
        public function compile(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Add extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_LessEqual extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Greater extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Sub extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_In extends \twig_node_expression_binary {
        public function compile(Twig_Compiler $compiler) {}
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_And extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Power extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Equal extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Div extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Mod extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_BitwiseOr extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Matches extends \twig_node_expression_binary {
        public function compile(Twig_Compiler $compiler) {}
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Mul extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Concat extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_FloorDiv extends \twig_node_expression_binary {
        public function compile(Twig_Compiler $compiler) {}
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Less extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_StartsWith extends \twig_node_expression_binary {
        public function compile(Twig_Compiler $compiler) {}
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_NotIn extends \twig_node_expression_binary {
        public function compile(Twig_Compiler $compiler) {}
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Or extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_Range extends \twig_node_expression_binary {
        public function compile(Twig_Compiler $compiler) {}
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_BitwiseXor extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_EndsWith extends \twig_node_expression_binary {
        public function compile(Twig_Compiler $compiler) {}
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_NotEqual extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_GreaterEqual extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    class Twig_Node_Expression_Binary_BitwiseAnd extends \twig_node_expression_binary {
        public function operator(Twig_Compiler $compiler) {}
    }

    /**
     * Returns the value or the default value when it is undefined or empty.
     *
     * <pre>
     *  {{ var.foo|default('foo item on var is not defined') }}
     * </pre>
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Node_Expression_Filter_Default extends \twig_node_expression_filter {
        public function __construct(Twig_Node $node, Twig_Node_Expression_Constant $filterName, Twig_Node $arguments, $lineno, $tag = null) {}
        public function compile(Twig_Compiler $compiler) {}
    }

    /**
     * Exception thrown when an error occurs at runtime.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Error_Runtime extends \twig_error {}

    /**
     * Exception thrown when an error occurs during template loading.
     *
     * Automatic template information guessing is always turned off as
     * if a template cannot be loaded, there is nothing to guess.
     * However, when a template is loaded from another one, then, we need
     * to find the current context and this is automatically done by
     * Twig_Template::displayWithErrorHandling().
     *
     * This strategy makes Twig_Environment::resolveTemplate() much faster.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Error_Loader extends \twig_error {
        public function __construct($message, $lineno = -1, $source = null, Exception $previous = null) {}
    }

    /**
     * Exception thrown when a syntax error occurs during lexing or parsing of a template.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Error_Syntax extends \twig_error {
        public function addSuggestions($name, array $items) {}
    }


    /**
     * Represents a displayable node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_NodeOutputInterface {}

    /**
     * Represents a node that captures any nested displayable nodes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_NodeCaptureInterface {}

    /**
     * Interface implemented by extension classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_ExtensionInterface {
        /**
         * Returns the token parser instances to add to the existing list.
         *
         * @return Twig_TokenParserInterface[]
         */
        function getTokenParsers() ;
        /**
         * Returns the node visitor instances to add to the existing list.
         *
         * @return Twig_NodeVisitorInterface[]
         */
        function getNodeVisitors() ;
        /**
         * Returns a list of filters to add to the existing list.
         *
         * @return Twig_Filter[]
         */
        function getFilters() ;
        /**
         * Returns a list of tests to add to the existing list.
         *
         * @return Twig_Test[]
         */
        function getTests() ;
        /**
         * Returns a list of functions to add to the existing list.
         *
         * @return Twig_Function[]
         */
        function getFunctions() ;
        /**
         * Returns a list of operators to add to the existing list.
         *
         * @return array<array> First array of unary operators, second array of binary operators
         */
        function getOperators() ;
    }

    /**
     * Interface implemented by cache classes.
     *
     * It is highly recommended to always store templates on the filesystem to
     * benefit from the PHP opcode cache. This interface is mostly useful if you
     * need to implement a custom strategy for storing templates on the filesystem.
     *
     * @author Andrew Tch <andrew@noop.lv>
     */
    interface Twig_CacheInterface {
        function generateKey($name, $className) ;
        function write($key, $content) ;
        function load($key) ;
        function getTimestamp($key) ;
    }

    /**
     * Creates runtime implementations for Twig elements (filters/functions/tests).
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_RuntimeLoaderInterface {
        function load($class) ;
    }

    /**
     * Interface implemented by token parsers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_TokenParserInterface {
        function setParser(Twig_Parser $parser) ;
        function parse(Twig_Token $token) ;
        /**
         * Gets the tag name associated with this token parser.
         *
         * @return string The tag name
         */
        function getTag() ;
    }

    /**
     * Interface all loaders must implement.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_LoaderInterface {
        function getSourceContext($name) ;
        function getCacheKey($name) ;
        function isFresh($name, $time) ;
        function exists($name) ;
    }

    /**
     * Empty interface for Twig 1.x compatibility.
     */
    interface Twig_SourceContextLoaderInterface extends \twig_loaderinterface {}

    /**
     * Empty interface for Twig 1.x compatibility.
     */
    interface Twig_ExistsLoaderInterface extends \twig_loaderinterface {}

    /**
     * Twig_NodeVisitorInterface is the interface the all node visitor classes must implement.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_NodeVisitorInterface {
        function enterNode(Twig_Node $node, Twig_Environment $env) ;
        function leaveNode(Twig_Node $node, Twig_Environment $env) ;
        /**
         * Returns the priority for this visitor.
         *
         * Priority should be between -10 and 10 (0 is the default).
         *
         * @return int The priority level
         */
        function getPriority() ;
    }

    /**
     * Enables usage of the deprecated Twig_Extension::initRuntime() method.
     *
     * Explicitly implement this interface if you really need to implement the
     * deprecated initRuntime() method in your extensions.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_Extension_InitRuntimeInterface {
        function initRuntime(Twig_Environment $environment) ;
    }

    /**
     * Enables usage of the deprecated Twig_Extension::getGlobals() method.
     *
     * Explicitly implement this interface if you really need to implement the
     * deprecated getGlobals() method in your extensions.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_Extension_GlobalsInterface {
        /**
         * Returns a list of global variables to add to the existing list.
         *
         * @return array An array of global variables
         */
        function getGlobals() ;
    }

    /**
     * Interfaces that all security policy classes must implements.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface Twig_Sandbox_SecurityPolicyInterface {
        function checkSecurity($tags, $filters, $functions) ;
        function checkMethodAllowed($obj, $method) ;
        function checkPropertyAllowed($obj, $method) ;
    }

}

namespace Twig {
    class Token extends \twig_token {}

    class Parser extends \twig_parser {}

    class ExpressionParser extends \twig_expressionparser {}

    class Markup extends \twig_markup {}

    class TemplateWrapper extends \twig_templatewrapper {}

    class TwigTest extends \twig_simpletest {}

    class Lexer extends \twig_lexer {}

    class ExtensionSet extends \twig_extensionset {}

    class FileExtensionEscapingStrategy extends \twig_fileextensionescapingstrategy {}

    class Source extends \twig_source {}

    class Template extends \twig_template {}

    class TwigFunction extends \twig_simplefunction {}

    class NodeTraverser extends \twig_nodetraverser {}

    class Compiler extends \twig_compiler {}

    class Environment extends \twig_environment {}

    class TwigFilter extends \twig_simplefilter {}

    class TokenStream extends \twig_tokenstream {}

}

namespace Twig\Extension {
    class EscaperExtension extends \twig_extension_escaper {}

    class ProfilerExtension extends \twig_extension_profiler {}

    class StagingExtension extends \twig_extension_staging {}

    class StringLoaderExtension extends \twig_extension_stringloader {}

    class AbstractExtension extends \twig_extension {}

    class SandboxExtension extends \twig_extension_sandbox {}

    class CoreExtension extends \twig_extension_core {}

    class OptimizerExtension extends \twig_extension_optimizer {}

    class DebugExtension extends \twig_extension_debug {}


    /**
     * @author Grégoire Pineau <lyrixx@lyrixx.info>
     */
    interface RuntimeExtensionInterface {}

    interface InitRuntimeInterface extends \twig_extension_initruntimeinterface {}

    interface ExtensionInterface extends \twig_extensioninterface {}

    interface GlobalsInterface extends \twig_extension_extensioninterface {}

}

namespace Twig\Cache {
    class FilesystemCache extends \twig_cache_filesystem {}

    class NullCache extends \twig_cache_null {}


    interface CacheInterface extends \twig_cacheinterface {}

}

namespace Twig\NodeVisitor {
    class EscaperNodeVisitor extends \twig_nodevisitor_escaper {}

    class SandboxNodeVisitor extends \twig_nodevisitor_sandbox {}

    class AbstractNodeVisitor extends \twig_basenodevisitor {}

    class OptimizerNodeVisitor extends \twig_nodevisitor_optimizer {}

    class SafeAnalysisNodeVisitor extends \twig_nodevisitor_safeanalysis {}


    interface NodeVisitorInterface extends \twig_nodevisitorinterface {}

}

namespace Twig\Test {
    class NodeTestCase extends \twig_test_nodetestcase {}

    class IntegrationTestCase extends \twig_test_integrationtestcase {}

}

namespace Twig\Util {
    class DeprecationCollector extends \twig_util_deprecationcollector {}

    class TemplateDirIterator extends \twig_util_templatediriterator {}

}

namespace Twig\RuntimeLoader {
    class FactoryRuntimeLoader extends \twig_factoryruntimeloader {}

    class ContainerRuntimeLoader extends \twig_containerruntimeloader {}


    interface RuntimeLoaderInterface extends \twig_runtimeloaderinterface {}

}

namespace Twig\Sandbox {
    class SecurityPolicy extends \twig_sandbox_securitypolicy {}

    class SecurityNotAllowedFunctionError extends \twig_sandbox_securitynotallowedfunctionerror {}

    class SecurityNotAllowedMethodError extends \twig_sandbox_securitynotallowedmethoderror {}

    class SecurityError extends \twig_sandbox_securityerror {}

    class SecurityNotAllowedTagError extends \twig_sandbox_securitynotallowedtagerror {}

    class SecurityNotAllowedFilterError extends \twig_sandbox_securitynotallowedfiltererror {}

    class SecurityNotAllowedPropertyError extends \twig_sandbox_securitynotallowedpropertyerror {}


    interface SecurityPolicyInterface extends \twig_sandbox_securitypolicyinterface {}

}

namespace Twig\Loader {
    class FilesystemLoader extends \twig_loader_filesystem {}

    class ArrayLoader extends \twig_loader_array {}

    class ChainLoader extends \twig_loader_chain {}


    interface LoaderInterface extends \twig_loaderinterface {}

    interface SourceContextLoaderInterface extends \twig_sourcecontextloaderinterface {}

    interface ExistsLoaderInterface extends \twig_existsloaderinterface {}

}

namespace Twig\Profiler {
    class Profile extends \twig_profiler_profile {}

}

namespace Twig\Profiler\NodeVisitor {
    class ProfilerNodeVisitor extends \twig_profiler_nodevisitor_profiler {}

}

namespace Twig\Profiler\Node {
    class EnterProfileNode extends \twig_profiler_node_enterprofile {}

    class LeaveProfileNode extends \twig_profiler_node_leaveprofile {}

}

namespace Twig\Profiler\Dumper {
    class BlackfireDumper extends \twig_profiler_dumper_blackfire {}

    class TextDumper extends \twig_profiler_dumper_text {}

    class BaseDumper extends \twig_profiler_dumper_base {}

    class HtmlDumper extends \twig_profiler_dumper_html {}

}

namespace Twig\TokenParser {
    class ForTokenParser extends \twig_tokenparser_for {}

    class DoTokenParser extends \twig_tokenparser_do {}

    class FromTokenParser extends \twig_tokenparser_from {}

    class AbstractTokenParser extends \twig_tokenparser {}

    class SandboxTokenParser extends \twig_tokenparser_sandbox {}

    class UseTokenParser extends \twig_tokenparser_use {}

    class AutoEscapeTokenParser extends \twig_tokenparser_autoescape {}

    class IncludeTokenParser extends \twig_tokenparser_include {}

    class SpacelessTokenParser extends \twig_tokenparser_spaceless {}

    class FilterTokenParser extends \twig_tokenparser_filter {}

    class SetTokenParser extends \twig_tokenparser_set {}

    class EmbedTokenParser extends \twig_tokenparser_embed {}

    class FlushTokenParser extends \twig_tokenparser_flush {}

    class WithTokenParser extends \twig_tokenparser_with {}

    class ImportTokenParser extends \twig_tokenparser_import {}

    class BlockTokenParser extends \twig_tokenparser_block {}

    class ExtendsTokenParser extends \twig_tokenparser_extends {}

    class IfTokenParser extends \twig_tokenparser_if {}

    class MacroTokenParser extends \twig_tokenparser_macro {}


    interface TokenParserInterface extends \twig_tokenparserinterface {}

}

namespace Twig\Node {
    class SandboxNode extends \twig_node_sandbox {}

    class IncludeNode extends \twig_node_include {}

    class ForNode extends \twig_node_for {}

    class CheckSecurityNode extends \twig_node_checksecurity {}

    class SandboxedPrintNode extends \twig_node_sandboxedprint {}

    class BlockReferenceNode extends \twig_node_blockreference {}

    class TextNode extends \twig_node_text {}

    class BodyNode extends \twig_node_body {}

    class MacroNode extends \twig_node_macro {}

    class SpacelessNode extends \twig_node_spaceless {}

    class BlockNode extends \twig_node_block {}

    class Node extends \twig_node {}

    class WithNode extends \twig_node_with {}

    class AutoEscapeNode extends \twig_node_autoescape {}

    class SetNode extends \twig_node_set {}

    class ImportNode extends \twig_node_import {}

    class DoNode extends \twig_node_do {}

    class ModuleNode extends \twig_node_module {}

    class FlushNode extends \twig_node_flush {}

    class ForLoopNode extends \twig_node_forloop {}

    class IfNode extends \twig_node_if {}

    class EmbedNode extends \twig_node_embed {}

    class PrintNode extends \twig_node_print {}


    interface NodeOutputInterface extends \twig_nodeoutputinterface {}

    interface NodeCaptureInterface extends \twig_nodecaptureinterface {}

}

namespace Twig\Node\Expression {
    class CallExpression extends \twig_node_expression_call {}

    class FunctionExpression extends \twig_node_expression_function {}

    class ParentExpression extends \twig_node_expression_parent {}

    class BlockReferenceExpression extends \twig_node_expression_blockreference {}

    class FilterExpression extends \twig_node_expression_filter {}

    class MethodCallExpression extends \twig_node_expression_methodcall {}

    class ConstantExpression extends \twig_node_expression_constant {}

    class AssignNameExpression extends \twig_node_expression_assignname {}

    class AbstractExpression extends \twig_node_expression {}

    class TempNameExpression extends \twig_node_expression_tempname {}

    class NullCoalesceExpression extends \twig_node_expression_nullcoalesce {}

    class ArrayExpression extends \twig_node_expression_array {}

    class TestExpression extends \twig_node_expression_test {}

    class NameExpression extends \twig_node_expression_name {}

    class ConditionalExpression extends \twig_node_expression_conditional {}

    class GetAttrExpression extends \twig_node_expression_getattr {}

}

namespace Twig\Node\Expression\Unary {
    class NegUnary extends \twig_node_expression_unary_neg {}

    class NotUnary extends \twig_node_expression_unary_not {}

    class PosUnary extends \twig_node_expression_unary_pos {}

    class AbstractUnary extends \twig_node_expression_unary {}

}

namespace Twig\Node\Expression\Test {
    class EvenTest extends \twig_node_expression_test_even {}

    class SameasTest extends \twig_node_expression_test_sameas {}

    class DivisiblebyTest extends \twig_node_expression_test_divisibleby {}

    class ConstantTest extends \twig_node_expression_test_constant {}

    class NullTest extends \twig_node_expression_test_null {}

    class DefinedTest extends \twig_node_expression_test_defined {}

    class OddTest extends \twig_node_expression_test_odd {}

}

namespace Twig\Node\Expression\Binary {
    class NotInBinary extends \twig_node_expression_binary_notin {}

    class RangeBinary extends \twig_node_expression_binary_range {}

    class EndsWithBinary extends \twig_node_expression_binary_endswith {}

    class MulBinary extends \twig_node_expression_binary_mul {}

    class MatchesBinary extends \twig_node_expression_binary_matches {}

    class GreaterEqualBinary extends \twig_node_expression_binary_greaterequal {}

    class AbstractBinary extends \twig_node_expression_binary {}

    class ModBinary extends \twig_node_expression_binary_mod {}

    class SubBinary extends \twig_node_expression_binary_sub {}

    class BitwiseOrBinary extends \twig_node_expression_binary_bitwiseor {}

    class FloorDivBinary extends \twig_node_expression_binary_floordiv {}

    class StartsWithBinary extends \twig_node_expression_binary_startswith {}

    class LessEqualBinary extends \twig_node_expression_binary_lessequal {}

    class InBinary extends \twig_node_expression_binary_in {}

    class LessBinary extends \twig_node_expression_binary_less {}

    class AddBinary extends \twig_node_expression_binary_add {}

    class EqualBinary extends \twig_node_expression_binary_equal {}

    class BitwiseXorBinary extends \twig_node_expression_binary_bitwisexor {}

    class ConcatBinary extends \twig_node_expression_binary_concat {}

    class AndBinary extends \twig_node_expression_binary_and {}

    class BitwiseAndBinary extends \twig_node_expression_binary_bitwiseand {}

    class NotEqualBinary extends \twig_node_expression_binary_notequal {}

    class PowerBinary extends \twig_node_expression_binary_power {}

    class DivBinary extends \twig_node_expression_binary_div {}

    class OrBinary extends \twig_node_expression_binary_or {}

    class GreaterBinary extends \twig_node_expression_binary_greater {}

}

namespace Twig\Node\Expression\Filter {
    class DefaultFilter extends \twig_node_expression_filter_default {}

}

namespace Twig\Error {
    class LoaderError extends \twig_error_loader {}

    class RuntimeError extends \twig_error_runtime {}

    class Error extends \twig_error {}

    class SyntaxError extends \twig_error_syntax {}

}

?>
